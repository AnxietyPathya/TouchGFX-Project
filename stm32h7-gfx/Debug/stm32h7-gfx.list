
stm32h7-gfx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027bb0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002df8  08027e80  08027e80  00028e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000ea0  0802ac78  0802ac78  0002bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 TextFlashSection 00000ab4  0802bb18  0802bb18  0002cb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0802c5cc  0802c5cc  0002d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000014  0802c5d4  0802c5d4  0002d5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0802c5e8  0802c5e8  0002d5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000328  24000000  0802c5f0  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b80  24000328  0802c918  0002e328  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24004ea8  0802c918  0002eea8  2**0
                  ALLOC
 11 .non_cache    00000858  38000000  38000000  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 FontFlashSection 009a75c0  90000000  90000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  009d75c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000c53b5  00000000  00000000  009d75ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001c504  00000000  00000000  00a9c9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001d2de  00000000  00000000  00ab8ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000042c0  00000000  00000000  00ad6188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002c8d  00000000  00000000  00ada448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004f3ab  00000000  00000000  00add0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000953bc  00000000  00000000  00b2c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001874c3  00000000  00000000  00bc183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000c2  00000000  00000000  00d48cff  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a764  00000000  00000000  00d48dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000064  00000000  00000000  00d53528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000328 	.word	0x24000328
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08027e68 	.word	0x08027e68

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400032c 	.word	0x2400032c
 800030c:	08027e68 	.word	0x08027e68

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <apInit>:
extern void touchgfxUpdate(void);



void apInit (void)
{
 8000ab8:	b508      	push	{r3, lr}
  cliOpen(_DEF_UART1, 57600);
 8000aba:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f98c 	bl	8000ddc <cliOpen>
  logBoot(false);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f002 fc33 	bl	8003330 <logBoot>

  touchgfxInit();	
 8000aca:	f006 f930 	bl	8006d2e <touchgfxInit>
}
 8000ace:	bd08      	pop	{r3, pc}

08000ad0 <apMain>:

extern uint32_t update_cnt;

void apMain (void)
{
 8000ad0:	b510      	push	{r4, lr}
	uint32_t pre_time;

	pre_time = millis ();
 8000ad2:	f000 f817 	bl	8000b04 <millis>
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	e009      	b.n	8000aee <apMain+0x1e>
	while (1)
	{
		if (millis () - pre_time >= 500)
		{
			pre_time = millis ();
 8000ada:	f000 f813 	bl	8000b04 <millis>
 8000ade:	4604      	mov	r4, r0
			ledToggle (_DEF_LED1);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f002 fb5d 	bl	80031a0 <ledToggle>

		}
		
		cliMain();
 8000ae6:	f000 fbe9 	bl	80012bc <cliMain>
			
		touchgfxUpdate();
 8000aea:	f006 f924 	bl	8006d36 <touchgfxUpdate>
		if (millis () - pre_time >= 500)
 8000aee:	f000 f809 	bl	8000b04 <millis>
 8000af2:	1b03      	subs	r3, r0, r4
 8000af4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000af8:	d2ef      	bcs.n	8000ada <apMain+0xa>
 8000afa:	e7f4      	b.n	8000ae6 <apMain+0x16>

08000afc <delay>:
{
  return true;
}

void delay(uint32_t ms)
{
 8000afc:	b508      	push	{r3, lr}
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8000afe:	f006 ff71 	bl	80079e4 <HAL_Delay>
#endif
}
 8000b02:	bd08      	pop	{r3, pc}

08000b04 <millis>:

uint32_t millis(void)
{
 8000b04:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8000b06:	f006 ff67 	bl	80079d8 <HAL_GetTick>
}
 8000b0a:	bd08      	pop	{r3, pc}

08000b0c <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000b0c:	4603      	mov	r3, r0
  bool ret = true;

  p_node->in    = 0;
 8000b0e:	2000      	movs	r0, #0
 8000b10:	6018      	str	r0, [r3, #0]
  p_node->out   = 0;
 8000b12:	6058      	str	r0, [r3, #4]
  p_node->len   = length;
 8000b14:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8000b16:	2001      	movs	r0, #1
 8000b18:	60d8      	str	r0, [r3, #12]
  p_node->p_buf = p_buf;
 8000b1a:	6119      	str	r1, [r3, #16]

  return ret;
}
 8000b1c:	4770      	bx	lr

08000b1e <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000b1e:	b570      	push	{r4, r5, r6, lr}
 8000b20:	460c      	mov	r4, r1
 8000b22:	4616      	mov	r6, r2
  bool ret = true;


  for (uint32_t i=0; i<length; i++)
 8000b24:	2500      	movs	r5, #0
 8000b26:	e016      	b.n	8000b56 <qbufferRead+0x38>
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
      for (uint32_t j=0; j<p_node->size; j++)
      {
        p_data[j] = p_buf[j];
 8000b28:	eb01 0c0e 	add.w	ip, r1, lr
 8000b2c:	f81c c003 	ldrb.w	ip, [ip, r3]
 8000b30:	f804 c003 	strb.w	ip, [r4, r3]
      for (uint32_t j=0; j<p_node->size; j++)
 8000b34:	3301      	adds	r3, #1
 8000b36:	68c2      	ldr	r2, [r0, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f5      	bhi.n	8000b28 <qbufferRead+0xa>
      }

      p_data += p_node->size;
 8000b3c:	4414      	add	r4, r2
    }

    if (p_node->out != p_node->in)
 8000b3e:	6843      	ldr	r3, [r0, #4]
 8000b40:	6802      	ldr	r2, [r0, #0]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d016      	beq.n	8000b74 <qbufferRead+0x56>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000b46:	3301      	adds	r3, #1
 8000b48:	6882      	ldr	r2, [r0, #8]
 8000b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b4e:	fb02 3311 	mls	r3, r2, r1, r3
 8000b52:	6043      	str	r3, [r0, #4]
  for (uint32_t i=0; i<length; i++)
 8000b54:	3501      	adds	r5, #1
 8000b56:	42b5      	cmp	r5, r6
 8000b58:	d20a      	bcs.n	8000b70 <qbufferRead+0x52>
    if (p_node->p_buf != NULL && p_data != NULL)
 8000b5a:	6901      	ldr	r1, [r0, #16]
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d0ee      	beq.n	8000b3e <qbufferRead+0x20>
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	d0ec      	beq.n	8000b3e <qbufferRead+0x20>
      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8000b64:	6843      	ldr	r3, [r0, #4]
 8000b66:	68c2      	ldr	r2, [r0, #12]
 8000b68:	fb02 fe03 	mul.w	lr, r2, r3
      for (uint32_t j=0; j<p_node->size; j++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e7e2      	b.n	8000b36 <qbufferRead+0x18>
  bool ret = true;
 8000b70:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
      ret = false;
 8000b74:	2000      	movs	r0, #0
 8000b76:	e7fc      	b.n	8000b72 <qbufferRead+0x54>

08000b78 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8000b78:	6882      	ldr	r2, [r0, #8]
 8000b7a:	6803      	ldr	r3, [r0, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	6841      	ldr	r1, [r0, #4]
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	fbb3 f0f2 	udiv	r0, r3, r2

  return ret;
}
 8000b86:	fb02 3010 	mls	r0, r2, r0, r3
 8000b8a:	4770      	bx	lr

08000b8c <cliLineClean>:
  return ret;
}

void cliLineClean(cli_t *p_cli)
{
  p_cli->line.count   = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f880 33f2 	strb.w	r3, [r0, #1010]	@ 0x3f2
  p_cli->line.cursor  = 0;
 8000b92:	f880 33f1 	strb.w	r3, [r0, #1009]	@ 0x3f1
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8000b96:	223f      	movs	r2, #63	@ 0x3f
 8000b98:	f880 23f0 	strb.w	r2, [r0, #1008]	@ 0x3f0
  p_cli->line.buf[0]  = 0;
 8000b9c:	f880 33b0 	strb.w	r3, [r0, #944]	@ 0x3b0
}
 8000ba0:	4770      	bx	lr

08000ba2 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8000ba2:	b538      	push	{r3, r4, r5, lr}
 8000ba4:	4605      	mov	r5, r0

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8000ba6:	f890 4196 	ldrb.w	r4, [r0, #406]	@ 0x196
 8000baa:	eb04 1044 	add.w	r0, r4, r4, lsl #5
 8000bae:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8000bb2:	4428      	add	r0, r5
 8000bb4:	2243      	movs	r2, #67	@ 0x43
 8000bb6:	f505 716c 	add.w	r1, r5, #944	@ 0x3b0
 8000bba:	f500 70cc 	add.w	r0, r0, #408	@ 0x198
 8000bbe:	f025 fa38 	bl	8026032 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8000bc2:	f895 3197 	ldrb.w	r3, [r5, #407]	@ 0x197
 8000bc6:	2b07      	cmp	r3, #7
 8000bc8:	d802      	bhi.n	8000bd0 <cliLineAdd+0x2e>
  {
    p_cli->hist_line_count++;
 8000bca:	3301      	adds	r3, #1
 8000bcc:	f885 3197 	strb.w	r3, [r5, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8000bd0:	f885 4195 	strb.w	r4, [r5, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8000bd4:	3401      	adds	r4, #1
 8000bd6:	4263      	negs	r3, r4
 8000bd8:	f004 0407 	and.w	r4, r4, #7
 8000bdc:	f003 0307 	and.w	r3, r3, #7
 8000be0:	bf58      	it	pl
 8000be2:	425c      	negpl	r4, r3
 8000be4:	f885 4196 	strb.w	r4, [r5, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f885 3194 	strb.w	r3, [r5, #404]	@ 0x194
}
 8000bee:	bd38      	pop	{r3, r4, r5, pc}

08000bf0 <cliToUpper>:
void cliToUpper(char *str)
{
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e003      	b.n	8000bfc <cliToUpper+0xc>

    if ((str_ch >= 'a') && (str_ch <= 'z'))
    {
      str_ch = str_ch - 'a' + 'A';
    }
    str[i] = str_ch;
 8000bf4:	f88c 2000 	strb.w	r2, [ip]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80b      	bhi.n	8000c18 <cliToUpper+0x28>
    str_ch = str[i];
 8000c00:	eb00 0c03 	add.w	ip, r0, r3
 8000c04:	5cc2      	ldrb	r2, [r0, r3]
    if (str_ch == 0)
 8000c06:	b13a      	cbz	r2, 8000c18 <cliToUpper+0x28>
    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8000c08:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 8000c0c:	b2c9      	uxtb	r1, r1
 8000c0e:	2919      	cmp	r1, #25
 8000c10:	d8f0      	bhi.n	8000bf4 <cliToUpper+0x4>
      str_ch = str_ch - 'a' + 'A';
 8000c12:	3a20      	subs	r2, #32
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	e7ed      	b.n	8000bf4 <cliToUpper+0x4>
  }

  if (i == CLI_CMD_NAME_MAX)
 8000c18:	2b10      	cmp	r3, #16
 8000c1a:	d000      	beq.n	8000c1e <cliToUpper+0x2e>
  {
    str[i-1] = 0;
  }
}
 8000c1c:	4770      	bx	lr
    str[i-1] = 0;
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	2200      	movs	r2, #0
 8000c22:	54c2      	strb	r2, [r0, r3]
}
 8000c24:	e7fa      	b.n	8000c1c <cliToUpper+0x2c>
	...

08000c28 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <cliArgsGetStr+0x1c>)
 8000c2a:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8000c2e:	4298      	cmp	r0, r3
 8000c30:	d205      	bcs.n	8000c3e <cliArgsGetStr+0x16>
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <cliArgsGetStr+0x1c>)
 8000c34:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8000c38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  return ret;
 8000c3c:	4770      	bx	lr
    return 0;
 8000c3e:	2000      	movs	r0, #0
}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	24000344 	.word	0x24000344

08000c48 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, const char *p_str)
{
 8000c48:	b508      	push	{r3, lr}
 8000c4a:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8000c4c:	4a09      	ldr	r2, [pc, #36]	@ (8000c74 <cliArgsIsStr+0x2c>)
 8000c4e:	f8b2 2678 	ldrh.w	r2, [r2, #1656]	@ 0x678
 8000c52:	4290      	cmp	r0, r2
 8000c54:	d20a      	bcs.n	8000c6c <cliArgsIsStr+0x24>
 8000c56:	4608      	mov	r0, r1
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <cliArgsIsStr+0x2c>)
 8000c5a:	f8d2 267c 	ldr.w	r2, [r2, #1660]	@ 0x67c
 8000c5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c62:	f7ff fb55 	bl	8000310 <strcmp>
 8000c66:	b118      	cbz	r0, 8000c70 <cliArgsIsStr+0x28>
  bool ret = false;
 8000c68:	2000      	movs	r0, #0
 8000c6a:	e000      	b.n	8000c6e <cliArgsIsStr+0x26>
    return 0;
 8000c6c:	2000      	movs	r0, #0
  {
    ret = true;
  }

  return ret;
}
 8000c6e:	bd08      	pop	{r3, pc}
    ret = true;
 8000c70:	2001      	movs	r0, #1
 8000c72:	e7fc      	b.n	8000c6e <cliArgsIsStr+0x26>
 8000c74:	24000344 	.word	0x24000344

08000c78 <cliArgsGetFloat>:
{
 8000c78:	b508      	push	{r3, lr}
  if (index >= p_cli->cmd_args.argc)
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <cliArgsGetFloat+0x24>)
 8000c7c:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8000c80:	4298      	cmp	r0, r3
 8000c82:	d302      	bcc.n	8000c8a <cliArgsGetFloat+0x12>
    return 0;
 8000c84:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000ca0 <cliArgsGetFloat+0x28>
}
 8000c88:	bd08      	pop	{r3, pc}
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <cliArgsGetFloat+0x24>)
 8000c8c:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8000c90:	2100      	movs	r1, #0
 8000c92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000c96:	f024 fe5f 	bl	8025958 <strtof>
  return ret;
 8000c9a:	e7f5      	b.n	8000c88 <cliArgsGetFloat+0x10>
 8000c9c:	24000344 	.word	0x24000344
 8000ca0:	00000000 	.word	0x00000000

08000ca4 <cliArgsGetData>:
{
 8000ca4:	b508      	push	{r3, lr}
  if (index >= p_cli->cmd_args.argc)
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <cliArgsGetData+0x24>)
 8000ca8:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d301      	bcc.n	8000cb4 <cliArgsGetData+0x10>
    return 0;
 8000cb0:	2000      	movs	r0, #0
}
 8000cb2:	bd08      	pop	{r3, pc}
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <cliArgsGetData+0x24>)
 8000cb6:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000cc2:	f024 ff05 	bl	8025ad0 <strtoul>
  return ret;
 8000cc6:	e7f4      	b.n	8000cb2 <cliArgsGetData+0xe>
 8000cc8:	24000344 	.word	0x24000344

08000ccc <cliShowPrompt>:
{
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	4604      	mov	r4, r0
  uartPrintf(p_cli->ch, "\n\r");
 8000cd0:	4904      	ldr	r1, [pc, #16]	@ (8000ce4 <cliShowPrompt+0x18>)
 8000cd2:	7800      	ldrb	r0, [r0, #0]
 8000cd4:	f004 fc98 	bl	8005608 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8000cd8:	4903      	ldr	r1, [pc, #12]	@ (8000ce8 <cliShowPrompt+0x1c>)
 8000cda:	7820      	ldrb	r0, [r4, #0]
 8000cdc:	f004 fc94 	bl	8005608 <uartPrintf>
}
 8000ce0:	bd10      	pop	{r4, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08027ee8 	.word	0x08027ee8
 8000ce8:	08027eec 	.word	0x08027eec

08000cec <cliLineChange>:
{
 8000cec:	b538      	push	{r3, r4, r5, lr}
  if (p_cli->hist_line_count == 0)
 8000cee:	f890 3197 	ldrb.w	r3, [r0, #407]	@ 0x197
 8000cf2:	b343      	cbz	r3, 8000d46 <cliLineChange+0x5a>
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	460d      	mov	r5, r1
  if (p_cli->line.cursor > 0)
 8000cf8:	f890 23f1 	ldrb.w	r2, [r0, #1009]	@ 0x3f1
 8000cfc:	bb22      	cbnz	r2, 8000d48 <cliLineChange+0x5c>
  if (p_cli->line.count > 0)
 8000cfe:	f894 23f2 	ldrb.w	r2, [r4, #1010]	@ 0x3f2
 8000d02:	bb32      	cbnz	r2, 8000d52 <cliLineChange+0x66>
  if (key_up == true)
 8000d04:	2d01      	cmp	r5, #1
 8000d06:	d029      	beq.n	8000d5c <cliLineChange+0x70>
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8000d08:	f994 1195 	ldrsb.w	r1, [r4, #405]	@ 0x195
 8000d0c:	3101      	adds	r1, #1
 8000d0e:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 8000d12:	fb91 f2f3 	sdiv	r2, r1, r3
 8000d16:	fb03 1112 	mls	r1, r3, r2, r1
 8000d1a:	f884 1195 	strb.w	r1, [r4, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8000d1e:	b2c9      	uxtb	r1, r1
  p_cli->line = p_cli->line_buf[change_i];
 8000d20:	eb01 1341 	add.w	r3, r1, r1, lsl #5
 8000d24:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8000d28:	4421      	add	r1, r4
 8000d2a:	2243      	movs	r2, #67	@ 0x43
 8000d2c:	f501 71cc 	add.w	r1, r1, #408	@ 0x198
 8000d30:	f504 706c 	add.w	r0, r4, #944	@ 0x3b0
 8000d34:	f025 f97d 	bl	8026032 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8000d38:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8000d3c:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
  p_cli->hist_line_new = false;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
}
 8000d46:	bd38      	pop	{r3, r4, r5, pc}
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8000d48:	490f      	ldr	r1, [pc, #60]	@ (8000d88 <cliLineChange+0x9c>)
 8000d4a:	7800      	ldrb	r0, [r0, #0]
 8000d4c:	f004 fc5c 	bl	8005608 <uartPrintf>
 8000d50:	e7d5      	b.n	8000cfe <cliLineChange+0x12>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8000d52:	490e      	ldr	r1, [pc, #56]	@ (8000d8c <cliLineChange+0xa0>)
 8000d54:	7820      	ldrb	r0, [r4, #0]
 8000d56:	f004 fc57 	bl	8005608 <uartPrintf>
 8000d5a:	e7d3      	b.n	8000d04 <cliLineChange+0x18>
    if (p_cli->hist_line_new == true)
 8000d5c:	f894 3194 	ldrb.w	r3, [r4, #404]	@ 0x194
 8000d60:	b11b      	cbz	r3, 8000d6a <cliLineChange+0x7e>
      p_cli->hist_line_i = p_cli->hist_line_last;
 8000d62:	f994 3196 	ldrsb.w	r3, [r4, #406]	@ 0x196
 8000d66:	f884 3195 	strb.w	r3, [r4, #405]	@ 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8000d6a:	f994 1195 	ldrsb.w	r1, [r4, #405]	@ 0x195
 8000d6e:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 8000d72:	4419      	add	r1, r3
 8000d74:	3901      	subs	r1, #1
 8000d76:	fb91 f2f3 	sdiv	r2, r1, r3
 8000d7a:	fb03 1112 	mls	r1, r3, r2, r1
 8000d7e:	f884 1195 	strb.w	r1, [r4, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8000d82:	b2c9      	uxtb	r1, r1
 8000d84:	e7cc      	b.n	8000d20 <cliLineChange+0x34>
 8000d86:	bf00      	nop
 8000d88:	08027ef4 	.word	0x08027ef4
 8000d8c:	08027efc 	.word	0x08027efc

08000d90 <cliParseArgs>:
{
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	4606      	mov	r6, r0
  p_cli->argc = 0;
 8000d96:	2400      	movs	r4, #0
 8000d98:	f8a0 4112 	strh.w	r4, [r0, #274]	@ 0x112
  argv    = p_cli->argv;
 8000d9c:	f500 758a 	add.w	r5, r0, #276	@ 0x114
  argv[argc] = NULL;
 8000da0:	f8c0 4114 	str.w	r4, [r0, #276]	@ 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000da4:	aa01      	add	r2, sp, #4
 8000da6:	490c      	ldr	r1, [pc, #48]	@ (8000dd8 <cliParseArgs+0x48>)
 8000da8:	f500 706c 	add.w	r0, r0, #944	@ 0x3b0
 8000dac:	f025 f86e 	bl	8025e8c <strtok_r>
  uint16_t argc = 0;
 8000db0:	4623      	mov	r3, r4
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000db2:	e009      	b.n	8000dc8 <cliParseArgs+0x38>
    argv[argc++] = tok;
 8000db4:	1c5c      	adds	r4, r3, #1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000dbc:	aa01      	add	r2, sp, #4
 8000dbe:	4906      	ldr	r1, [pc, #24]	@ (8000dd8 <cliParseArgs+0x48>)
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f025 f863 	bl	8025e8c <strtok_r>
    argv[argc++] = tok;
 8000dc6:	4623      	mov	r3, r4
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <cliParseArgs+0x24>
  p_cli->argc = argc;
 8000dcc:	f8a6 3112 	strh.w	r3, [r6, #274]	@ 0x112
  if (argc > 0)
 8000dd0:	b103      	cbz	r3, 8000dd4 <cliParseArgs+0x44>
    ret = true;
 8000dd2:	2001      	movs	r0, #1
}
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	08027f04 	.word	0x08027f04

08000ddc <cliOpen>:
  cli_node.ch = ch;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <cliOpen+0x2c>)
 8000dde:	7018      	strb	r0, [r3, #0]
  if (cli_node.is_open == false || cli_node.baud != baud)
 8000de0:	7a1b      	ldrb	r3, [r3, #8]
 8000de2:	b11b      	cbz	r3, 8000dec <cliOpen+0x10>
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <cliOpen+0x2c>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d000      	beq.n	8000dee <cliOpen+0x12>
    if (baud > 0)
 8000dec:	b911      	cbnz	r1, 8000df4 <cliOpen+0x18>
}
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <cliOpen+0x2c>)
 8000df0:	7a18      	ldrb	r0, [r3, #8]
 8000df2:	4770      	bx	lr
{
 8000df4:	b510      	push	{r4, lr}
      cli_node.baud = baud;
 8000df6:	4c04      	ldr	r4, [pc, #16]	@ (8000e08 <cliOpen+0x2c>)
 8000df8:	6061      	str	r1, [r4, #4]
      cli_node.is_open = uartOpen(ch, baud);
 8000dfa:	f004 fae5 	bl	80053c8 <uartOpen>
 8000dfe:	7220      	strb	r0, [r4, #8]
}
 8000e00:	4b01      	ldr	r3, [pc, #4]	@ (8000e08 <cliOpen+0x2c>)
 8000e02:	7a18      	ldrb	r0, [r3, #8]
 8000e04:	bd10      	pop	{r4, pc}
 8000e06:	bf00      	nop
 8000e08:	24000344 	.word	0x24000344

08000e0c <cliGetPort>:
}
 8000e0c:	4b01      	ldr	r3, [pc, #4]	@ (8000e14 <cliGetPort+0x8>)
 8000e0e:	7818      	ldrb	r0, [r3, #0]
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	24000344 	.word	0x24000344

08000e18 <cliShowLog>:
{
 8000e18:	b538      	push	{r3, r4, r5, lr}
  if (cli_node.is_log == true)
 8000e1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <cliShowLog+0x90>)
 8000e1c:	7a5b      	ldrb	r3, [r3, #9]
 8000e1e:	b903      	cbnz	r3, 8000e22 <cliShowLog+0xa>
}
 8000e20:	bd38      	pop	{r3, r4, r5, pc}
 8000e22:	4605      	mov	r5, r0
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8000e24:	f890 23f1 	ldrb.w	r2, [r0, #1009]	@ 0x3f1
 8000e28:	4920      	ldr	r1, [pc, #128]	@ (8000eac <cliShowLog+0x94>)
 8000e2a:	7ac0      	ldrb	r0, [r0, #11]
 8000e2c:	f004 fbec 	bl	8005608 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8000e30:	f895 23f2 	ldrb.w	r2, [r5, #1010]	@ 0x3f2
 8000e34:	491e      	ldr	r1, [pc, #120]	@ (8000eb0 <cliShowLog+0x98>)
 8000e36:	7ae8      	ldrb	r0, [r5, #11]
 8000e38:	f004 fbe6 	bl	8005608 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8000e3c:	f895 23f0 	ldrb.w	r2, [r5, #1008]	@ 0x3f0
 8000e40:	491c      	ldr	r1, [pc, #112]	@ (8000eb4 <cliShowLog+0x9c>)
 8000e42:	7ae8      	ldrb	r0, [r5, #11]
 8000e44:	f004 fbe0 	bl	8005608 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8000e48:	f505 726c 	add.w	r2, r5, #944	@ 0x3b0
 8000e4c:	491a      	ldr	r1, [pc, #104]	@ (8000eb8 <cliShowLog+0xa0>)
 8000e4e:	7ae8      	ldrb	r0, [r5, #11]
 8000e50:	f004 fbda 	bl	8005608 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8000e54:	f995 2195 	ldrsb.w	r2, [r5, #405]	@ 0x195
 8000e58:	4918      	ldr	r1, [pc, #96]	@ (8000ebc <cliShowLog+0xa4>)
 8000e5a:	7ae8      	ldrb	r0, [r5, #11]
 8000e5c:	f004 fbd4 	bl	8005608 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8000e60:	f895 2196 	ldrb.w	r2, [r5, #406]	@ 0x196
 8000e64:	4916      	ldr	r1, [pc, #88]	@ (8000ec0 <cliShowLog+0xa8>)
 8000e66:	7ae8      	ldrb	r0, [r5, #11]
 8000e68:	f004 fbce 	bl	8005608 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8000e6c:	f895 2197 	ldrb.w	r2, [r5, #407]	@ 0x197
 8000e70:	4914      	ldr	r1, [pc, #80]	@ (8000ec4 <cliShowLog+0xac>)
 8000e72:	7ae8      	ldrb	r0, [r5, #11]
 8000e74:	f004 fbc8 	bl	8005608 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8000e78:	2400      	movs	r4, #0
 8000e7a:	e00c      	b.n	8000e96 <cliShowLog+0x7e>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8000e7c:	eb04 1344 	add.w	r3, r4, r4, lsl #5
 8000e80:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000e84:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8000e88:	442b      	add	r3, r5
 8000e8a:	4622      	mov	r2, r4
 8000e8c:	490e      	ldr	r1, [pc, #56]	@ (8000ec8 <cliShowLog+0xb0>)
 8000e8e:	7ae8      	ldrb	r0, [r5, #11]
 8000e90:	f004 fbba 	bl	8005608 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8000e94:	3401      	adds	r4, #1
 8000e96:	f895 3197 	ldrb.w	r3, [r5, #407]	@ 0x197
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	dcee      	bgt.n	8000e7c <cliShowLog+0x64>
    uartPrintf(p_cli->log_ch, "\n");
 8000e9e:	490b      	ldr	r1, [pc, #44]	@ (8000ecc <cliShowLog+0xb4>)
 8000ea0:	7ae8      	ldrb	r0, [r5, #11]
 8000ea2:	f004 fbb1 	bl	8005608 <uartPrintf>
}
 8000ea6:	e7bb      	b.n	8000e20 <cliShowLog+0x8>
 8000ea8:	24000344 	.word	0x24000344
 8000eac:	08027f0c 	.word	0x08027f0c
 8000eb0:	08027f1c 	.word	0x08027f1c
 8000eb4:	08027f2c 	.word	0x08027f2c
 8000eb8:	08027f3c 	.word	0x08027f3c
 8000ebc:	08027f4c 	.word	0x08027f4c
 8000ec0:	08027f5c 	.word	0x08027f5c
 8000ec4:	08027f6c 	.word	0x08027f6c
 8000ec8:	08027f7c 	.word	0x08027f7c
 8000ecc:	0802921c 	.word	0x0802921c

08000ed0 <cliAvailable>:
{
 8000ed0:	b508      	push	{r3, lr}
  return uartAvailable(cli_node.ch);
 8000ed2:	4b02      	ldr	r3, [pc, #8]	@ (8000edc <cliAvailable+0xc>)
 8000ed4:	7818      	ldrb	r0, [r3, #0]
 8000ed6:	f004 fb31 	bl	800553c <uartAvailable>
}
 8000eda:	bd08      	pop	{r3, pc}
 8000edc:	24000344 	.word	0x24000344

08000ee0 <cliRead>:
{
 8000ee0:	b508      	push	{r3, lr}
  return uartRead(cli_node.ch);
 8000ee2:	4b02      	ldr	r3, [pc, #8]	@ (8000eec <cliRead+0xc>)
 8000ee4:	7818      	ldrb	r0, [r3, #0]
 8000ee6:	f004 fb45 	bl	8005574 <uartRead>
}
 8000eea:	bd08      	pop	{r3, pc}
 8000eec:	24000344 	.word	0x24000344

08000ef0 <cliWrite>:
{
 8000ef0:	b508      	push	{r3, lr}
 8000ef2:	460a      	mov	r2, r1
  return uartWrite(cli_node.ch, p_data, length);
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	4b02      	ldr	r3, [pc, #8]	@ (8000f00 <cliWrite+0x10>)
 8000ef8:	7818      	ldrb	r0, [r3, #0]
 8000efa:	f004 fb61 	bl	80055c0 <uartWrite>
}
 8000efe:	bd08      	pop	{r3, pc}
 8000f00:	24000344 	.word	0x24000344

08000f04 <cliPrintf>:
{
 8000f04:	b40f      	push	{r0, r1, r2, r3}
 8000f06:	b510      	push	{r4, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	ab04      	add	r3, sp, #16
 8000f0c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start (arg, fmt);
 8000f10:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000f12:	4c08      	ldr	r4, [pc, #32]	@ (8000f34 <cliPrintf+0x30>)
 8000f14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f024 ff67 	bl	8025dec <vsniprintf>
 8000f1e:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8000f20:	4621      	mov	r1, r4
 8000f22:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 8000f26:	f004 fb4b 	bl	80055c0 <uartWrite>
}
 8000f2a:	b002      	add	sp, #8
 8000f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr
 8000f34:	24000355 	.word	0x24000355

08000f38 <cliRunCmd>:
{
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4605      	mov	r5, r0
  if (cliParseArgs(p_cli) == true)
 8000f3c:	f7ff ff28 	bl	8000d90 <cliParseArgs>
 8000f40:	b908      	cbnz	r0, 8000f46 <cliRunCmd+0xe>
}
 8000f42:	2000      	movs	r0, #0
 8000f44:	bd38      	pop	{r3, r4, r5, pc}
    cliPrintf("\r\n");
 8000f46:	4818      	ldr	r0, [pc, #96]	@ (8000fa8 <cliRunCmd+0x70>)
 8000f48:	f7ff ffdc 	bl	8000f04 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 8000f4c:	f8d5 0114 	ldr.w	r0, [r5, #276]	@ 0x114
 8000f50:	f7ff fe4e 	bl	8000bf0 <cliToUpper>
    p_cli->is_busy = true;
 8000f54:	2301      	movs	r3, #1
 8000f56:	72ab      	strb	r3, [r5, #10]
    for (int i=0; i<p_cli->cmd_count; i++)
 8000f58:	2400      	movs	r4, #0
 8000f5a:	f8b5 33f4 	ldrh.w	r3, [r5, #1012]	@ 0x3f4
 8000f5e:	42a3      	cmp	r3, r4
 8000f60:	dd1e      	ble.n	8000fa0 <cliRunCmd+0x68>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8000f62:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000f66:	0089      	lsls	r1, r1, #2
 8000f68:	f501 717e 	add.w	r1, r1, #1016	@ 0x3f8
 8000f6c:	4429      	add	r1, r5
 8000f6e:	f8d5 0114 	ldr.w	r0, [r5, #276]	@ 0x114
 8000f72:	f7ff f9cd 	bl	8000310 <strcmp>
 8000f76:	b108      	cbz	r0, 8000f7c <cliRunCmd+0x44>
    for (int i=0; i<p_cli->cmd_count; i++)
 8000f78:	3401      	adds	r4, #1
 8000f7a:	e7ee      	b.n	8000f5a <cliRunCmd+0x22>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8000f7c:	f8b5 3112 	ldrh.w	r3, [r5, #274]	@ 0x112
 8000f80:	3b01      	subs	r3, #1
 8000f82:	f8a5 3678 	strh.w	r3, [r5, #1656]	@ 0x678
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8000f86:	f505 738c 	add.w	r3, r5, #280	@ 0x118
 8000f8a:	f8c5 367c 	str.w	r3, [r5, #1660]	@ 0x67c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8000f8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000f92:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8000f96:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
 8000f9a:	f505 60cf 	add.w	r0, r5, #1656	@ 0x678
 8000f9e:	4798      	blx	r3
    p_cli->is_busy = false;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	72ab      	strb	r3, [r5, #10]
 8000fa4:	e7cd      	b.n	8000f42 <cliRunCmd+0xa>
 8000fa6:	bf00      	nop
 8000fa8:	080288c0 	.word	0x080288c0

08000fac <cliUpdate>:
{
 8000fac:	b530      	push	{r4, r5, lr}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	f88d 1007 	strb.w	r1, [sp, #7]
  if (p_cli->state == CLI_RX_IDLE)
 8000fb6:	7c03      	ldrb	r3, [r0, #16]
 8000fb8:	b9ab      	cbnz	r3, 8000fe6 <cliUpdate+0x3a>
    switch(rx_data)
 8000fba:	b2cb      	uxtb	r3, r1
 8000fbc:	2b1b      	cmp	r3, #27
 8000fbe:	d030      	beq.n	8001022 <cliUpdate+0x76>
 8000fc0:	d81c      	bhi.n	8000ffc <cliUpdate+0x50>
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d04b      	beq.n	800105e <cliUpdate+0xb2>
 8000fc6:	2b0d      	cmp	r3, #13
 8000fc8:	f040 8084 	bne.w	80010d4 <cliUpdate+0x128>
        if (line->count > 0)
 8000fcc:	f890 33f2 	ldrb.w	r3, [r0, #1010]	@ 0x3f2
 8000fd0:	bb0b      	cbnz	r3, 8001016 <cliUpdate+0x6a>
        line->count = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
        line->cursor = 0;
 8000fd8:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        line->buf[0] = 0;
 8000fdc:	f884 33b0 	strb.w	r3, [r4, #944]	@ 0x3b0
        cliShowPrompt(p_cli);
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff fe73 	bl	8000ccc <cliShowPrompt>
  switch(p_cli->state)
 8000fe6:	7c23      	ldrb	r3, [r4, #16]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	f200 80c8 	bhi.w	8001180 <cliUpdate+0x1d4>
 8000ff0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000ff4:	00cc00c4 	.word	0x00cc00c4
 8000ff8:	015600cf 	.word	0x015600cf
    switch(rx_data)
 8000ffc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ffe:	d169      	bne.n	80010d4 <cliUpdate+0x128>
        if (line->cursor < line->count)
 8001000:	f890 c3f1 	ldrb.w	ip, [r0, #1009]	@ 0x3f1
 8001004:	f890 e3f2 	ldrb.w	lr, [r0, #1010]	@ 0x3f2
 8001008:	45f4      	cmp	ip, lr
 800100a:	d2ec      	bcs.n	8000fe6 <cliUpdate+0x3a>
          mov_len = line->count - line->cursor;
 800100c:	ebae 050c 	sub.w	r5, lr, ip
 8001010:	b2ed      	uxtb	r5, r5
          for (int i=1; i<mov_len; i++)
 8001012:	2201      	movs	r2, #1
 8001014:	e012      	b.n	800103c <cliUpdate+0x90>
          cliLineAdd(p_cli);
 8001016:	f7ff fdc4 	bl	8000ba2 <cliLineAdd>
          cliRunCmd(p_cli);
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff ff8c 	bl	8000f38 <cliRunCmd>
 8001020:	e7d7      	b.n	8000fd2 <cliUpdate+0x26>
        p_cli->state = CLI_RX_SP1;
 8001022:	2301      	movs	r3, #1
 8001024:	7403      	strb	r3, [r0, #16]
        break;
 8001026:	e7de      	b.n	8000fe6 <cliUpdate+0x3a>
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001028:	eb0c 0302 	add.w	r3, ip, r2
 800102c:	1e59      	subs	r1, r3, #1
 800102e:	4423      	add	r3, r4
 8001030:	f893 03b0 	ldrb.w	r0, [r3, #944]	@ 0x3b0
 8001034:	1863      	adds	r3, r4, r1
 8001036:	f883 03b0 	strb.w	r0, [r3, #944]	@ 0x3b0
          for (int i=1; i<mov_len; i++)
 800103a:	3201      	adds	r2, #1
 800103c:	4295      	cmp	r5, r2
 800103e:	dcf3      	bgt.n	8001028 <cliUpdate+0x7c>
          line->count--;
 8001040:	f10e 3eff 	add.w	lr, lr, #4294967295
 8001044:	fa5f fe8e 	uxtb.w	lr, lr
 8001048:	f884 e3f2 	strb.w	lr, [r4, #1010]	@ 0x3f2
          line->buf[line->count] = 0;
 800104c:	44a6      	add	lr, r4
 800104e:	2300      	movs	r3, #0
 8001050:	f88e 33b0 	strb.w	r3, [lr, #944]	@ 0x3b0
          uartPrintf(p_cli->ch, "\x1B[1P");
 8001054:	4994      	ldr	r1, [pc, #592]	@ (80012a8 <cliUpdate+0x2fc>)
 8001056:	7820      	ldrb	r0, [r4, #0]
 8001058:	f004 fad6 	bl	8005608 <uartPrintf>
 800105c:	e7c3      	b.n	8000fe6 <cliUpdate+0x3a>
        if (line->count > 0 && line->cursor > 0)
 800105e:	f890 33f2 	ldrb.w	r3, [r0, #1010]	@ 0x3f2
 8001062:	b35b      	cbz	r3, 80010bc <cliUpdate+0x110>
 8001064:	f890 03f1 	ldrb.w	r0, [r0, #1009]	@ 0x3f1
 8001068:	b340      	cbz	r0, 80010bc <cliUpdate+0x110>
          if (line->cursor == line->count)
 800106a:	4283      	cmp	r3, r0
 800106c:	d009      	beq.n	8001082 <cliUpdate+0xd6>
          if (line->cursor < line->count)
 800106e:	f894 c3f2 	ldrb.w	ip, [r4, #1010]	@ 0x3f2
 8001072:	4560      	cmp	r0, ip
 8001074:	d222      	bcs.n	80010bc <cliUpdate+0x110>
            mov_len = line->count - line->cursor;
 8001076:	ebac 0e00 	sub.w	lr, ip, r0
 800107a:	fa5f fe8e 	uxtb.w	lr, lr
            for (int i=0; i<mov_len; i++)
 800107e:	2200      	movs	r2, #0
 8001080:	e011      	b.n	80010a6 <cliUpdate+0xfa>
            line->count--;
 8001082:	3b01      	subs	r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->buf[line->count] = 0;
 800108a:	4423      	add	r3, r4
 800108c:	2200      	movs	r2, #0
 800108e:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
 8001092:	e7ec      	b.n	800106e <cliUpdate+0xc2>
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001094:	1883      	adds	r3, r0, r2
 8001096:	1e59      	subs	r1, r3, #1
 8001098:	4423      	add	r3, r4
 800109a:	f893 53b0 	ldrb.w	r5, [r3, #944]	@ 0x3b0
 800109e:	1863      	adds	r3, r4, r1
 80010a0:	f883 53b0 	strb.w	r5, [r3, #944]	@ 0x3b0
            for (int i=0; i<mov_len; i++)
 80010a4:	3201      	adds	r2, #1
 80010a6:	4596      	cmp	lr, r2
 80010a8:	dcf4      	bgt.n	8001094 <cliUpdate+0xe8>
            line->count--;
 80010aa:	f10c 33ff 	add.w	r3, ip, #4294967295
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->buf[line->count] = 0;
 80010b4:	4423      	add	r3, r4
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
        if (line->cursor > 0)
 80010bc:	f894 33f1 	ldrb.w	r3, [r4, #1009]	@ 0x3f1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d090      	beq.n	8000fe6 <cliUpdate+0x3a>
          line->cursor--;
 80010c4:	3b01      	subs	r3, #1
 80010c6:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80010ca:	4978      	ldr	r1, [pc, #480]	@ (80012ac <cliUpdate+0x300>)
 80010cc:	7820      	ldrb	r0, [r4, #0]
 80010ce:	f004 fa9b 	bl	8005608 <uartPrintf>
 80010d2:	e788      	b.n	8000fe6 <cliUpdate+0x3a>
        if ((line->count + 1) < line->buf_len)
 80010d4:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 80010d8:	1c59      	adds	r1, r3, #1
 80010da:	f894 23f0 	ldrb.w	r2, [r4, #1008]	@ 0x3f0
 80010de:	4291      	cmp	r1, r2
 80010e0:	da81      	bge.n	8000fe6 <cliUpdate+0x3a>
          if (line->cursor == line->count)
 80010e2:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d016      	beq.n	8001118 <cliUpdate+0x16c>
          if (line->cursor < line->count)
 80010ea:	f894 c3f1 	ldrb.w	ip, [r4, #1009]	@ 0x3f1
 80010ee:	f894 03f2 	ldrb.w	r0, [r4, #1010]	@ 0x3f2
 80010f2:	4584      	cmp	ip, r0
 80010f4:	f4bf af77 	bcs.w	8000fe6 <cliUpdate+0x3a>
            mov_len = line->count - line->cursor;
 80010f8:	eba0 050c 	sub.w	r5, r0, ip
 80010fc:	b2ed      	uxtb	r5, r5
            for (int i=0; i<mov_len; i++)
 80010fe:	2200      	movs	r2, #0
 8001100:	4295      	cmp	r5, r2
 8001102:	dd24      	ble.n	800114e <cliUpdate+0x1a2>
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001104:	1a83      	subs	r3, r0, r2
 8001106:	1e59      	subs	r1, r3, #1
 8001108:	4421      	add	r1, r4
 800110a:	f891 13b0 	ldrb.w	r1, [r1, #944]	@ 0x3b0
 800110e:	4423      	add	r3, r4
 8001110:	f883 13b0 	strb.w	r1, [r3, #944]	@ 0x3b0
            for (int i=0; i<mov_len; i++)
 8001114:	3201      	adds	r2, #1
 8001116:	e7f3      	b.n	8001100 <cliUpdate+0x154>
            uartWrite(p_cli->ch, &rx_data, 1);
 8001118:	2201      	movs	r2, #1
 800111a:	f10d 0107 	add.w	r1, sp, #7
 800111e:	7820      	ldrb	r0, [r4, #0]
 8001120:	f004 fa4e 	bl	80055c0 <uartWrite>
            line->buf[line->cursor] = rx_data;
 8001124:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8001128:	18a3      	adds	r3, r4, r2
 800112a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800112e:	f883 13b0 	strb.w	r1, [r3, #944]	@ 0x3b0
            line->count++;
 8001132:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8001136:	3301      	adds	r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->cursor++;
 800113e:	3201      	adds	r2, #1
 8001140:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
            line->buf[line->count] = 0;
 8001144:	4423      	add	r3, r4
 8001146:	2200      	movs	r2, #0
 8001148:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
 800114c:	e7cd      	b.n	80010ea <cliUpdate+0x13e>
            line->buf[line->cursor] = rx_data;
 800114e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001152:	eb04 030c 	add.w	r3, r4, ip
 8001156:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
            line->count++;
 800115a:	3001      	adds	r0, #1
 800115c:	b2c0      	uxtb	r0, r0
 800115e:	f884 03f2 	strb.w	r0, [r4, #1010]	@ 0x3f2
            line->cursor++;
 8001162:	f10c 0c01 	add.w	ip, ip, #1
 8001166:	f884 c3f1 	strb.w	ip, [r4, #1009]	@ 0x3f1
            line->buf[line->count] = 0;
 800116a:	4420      	add	r0, r4
 800116c:	2300      	movs	r3, #0
 800116e:	f880 33b0 	strb.w	r3, [r0, #944]	@ 0x3b0
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001172:	494f      	ldr	r1, [pc, #316]	@ (80012b0 <cliUpdate+0x304>)
 8001174:	7820      	ldrb	r0, [r4, #0]
 8001176:	f004 fa47 	bl	8005608 <uartPrintf>
 800117a:	e734      	b.n	8000fe6 <cliUpdate+0x3a>
      p_cli->state = CLI_RX_SP2;
 800117c:	2302      	movs	r3, #2
 800117e:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 8001180:	4620      	mov	r0, r4
 8001182:	f7ff fe49 	bl	8000e18 <cliShowLog>
}
 8001186:	2000      	movs	r0, #0
 8001188:	b005      	add	sp, #20
 800118a:	bd30      	pop	{r4, r5, pc}
      p_cli->state = CLI_RX_SP3;
 800118c:	2303      	movs	r3, #3
 800118e:	7423      	strb	r3, [r4, #16]
      break;
 8001190:	e7f6      	b.n	8001180 <cliUpdate+0x1d4>
      p_cli->state = CLI_RX_IDLE;
 8001192:	2300      	movs	r3, #0
 8001194:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8001196:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800119a:	2b44      	cmp	r3, #68	@ 0x44
 800119c:	d026      	beq.n	80011ec <cliUpdate+0x240>
      if (rx_data == CLI_KEY_RIGHT)
 800119e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011a2:	2b43      	cmp	r3, #67	@ 0x43
 80011a4:	d037      	beq.n	8001216 <cliUpdate+0x26a>
      if (rx_data == CLI_KEY_UP)
 80011a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011aa:	2b41      	cmp	r3, #65	@ 0x41
 80011ac:	d04a      	beq.n	8001244 <cliUpdate+0x298>
      if (rx_data == CLI_KEY_DOWN)
 80011ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011b2:	2b42      	cmp	r3, #66	@ 0x42
 80011b4:	d050      	beq.n	8001258 <cliUpdate+0x2ac>
      if (rx_data == CLI_KEY_HOME)
 80011b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011ba:	2b31      	cmp	r3, #49	@ 0x31
 80011bc:	d056      	beq.n	800126c <cliUpdate+0x2c0>
      if (rx_data == CLI_KEY_END)
 80011be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011c2:	2b34      	cmp	r3, #52	@ 0x34
 80011c4:	d1dc      	bne.n	8001180 <cliUpdate+0x1d4>
        if (line->cursor < line->count)
 80011c6:	f894 33f1 	ldrb.w	r3, [r4, #1009]	@ 0x3f1
 80011ca:	f894 23f2 	ldrb.w	r2, [r4, #1010]	@ 0x3f2
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d358      	bcc.n	8001284 <cliUpdate+0x2d8>
        if (line->cursor > line->count)
 80011d2:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 80011d6:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 80011da:	429a      	cmp	r2, r3
 80011dc:	d859      	bhi.n	8001292 <cliUpdate+0x2e6>
        line->cursor = line->count;
 80011de:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 80011e2:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        p_cli->state = CLI_RX_SP4;
 80011e6:	2304      	movs	r3, #4
 80011e8:	7423      	strb	r3, [r4, #16]
 80011ea:	e7c9      	b.n	8001180 <cliUpdate+0x1d4>
        if (line->cursor > 0)
 80011ec:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d0d4      	beq.n	800119e <cliUpdate+0x1f2>
          line->cursor--;
 80011f4:	3a01      	subs	r2, #1
 80011f6:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
          tx_buf[0] = 0x1B;
 80011fa:	221b      	movs	r2, #27
 80011fc:	f88d 2008 	strb.w	r2, [sp, #8]
          tx_buf[1] = 0x5B;
 8001200:	225b      	movs	r2, #91	@ 0x5b
 8001202:	f88d 2009 	strb.w	r2, [sp, #9]
          tx_buf[2] = rx_data;
 8001206:	f88d 300a 	strb.w	r3, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 800120a:	2203      	movs	r2, #3
 800120c:	a902      	add	r1, sp, #8
 800120e:	7820      	ldrb	r0, [r4, #0]
 8001210:	f004 f9d6 	bl	80055c0 <uartWrite>
 8001214:	e7c3      	b.n	800119e <cliUpdate+0x1f2>
        if (line->cursor < line->count)
 8001216:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 800121a:	f894 13f2 	ldrb.w	r1, [r4, #1010]	@ 0x3f2
 800121e:	428a      	cmp	r2, r1
 8001220:	d2c1      	bcs.n	80011a6 <cliUpdate+0x1fa>
          line->cursor++;
 8001222:	3201      	adds	r2, #1
 8001224:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
          tx_buf[0] = 0x1B;
 8001228:	221b      	movs	r2, #27
 800122a:	f88d 2008 	strb.w	r2, [sp, #8]
          tx_buf[1] = 0x5B;
 800122e:	225b      	movs	r2, #91	@ 0x5b
 8001230:	f88d 2009 	strb.w	r2, [sp, #9]
          tx_buf[2] = rx_data;
 8001234:	f88d 300a 	strb.w	r3, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001238:	2203      	movs	r2, #3
 800123a:	a902      	add	r1, sp, #8
 800123c:	7820      	ldrb	r0, [r4, #0]
 800123e:	f004 f9bf 	bl	80055c0 <uartWrite>
 8001242:	e7b0      	b.n	80011a6 <cliUpdate+0x1fa>
        cliLineChange(p_cli, true);
 8001244:	2101      	movs	r1, #1
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fd50 	bl	8000cec <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800124c:	f504 716c 	add.w	r1, r4, #944	@ 0x3b0
 8001250:	7820      	ldrb	r0, [r4, #0]
 8001252:	f004 f9d9 	bl	8005608 <uartPrintf>
 8001256:	e7aa      	b.n	80011ae <cliUpdate+0x202>
        cliLineChange(p_cli, false);
 8001258:	2100      	movs	r1, #0
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff fd46 	bl	8000cec <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001260:	f504 716c 	add.w	r1, r4, #944	@ 0x3b0
 8001264:	7820      	ldrb	r0, [r4, #0]
 8001266:	f004 f9cf 	bl	8005608 <uartPrintf>
 800126a:	e7a4      	b.n	80011b6 <cliUpdate+0x20a>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800126c:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8001270:	4910      	ldr	r1, [pc, #64]	@ (80012b4 <cliUpdate+0x308>)
 8001272:	7820      	ldrb	r0, [r4, #0]
 8001274:	f004 f9c8 	bl	8005608 <uartPrintf>
        line->cursor = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        p_cli->state = CLI_RX_SP4;
 800127e:	2304      	movs	r3, #4
 8001280:	7423      	strb	r3, [r4, #16]
 8001282:	e79c      	b.n	80011be <cliUpdate+0x212>
          mov_len = line->count - line->cursor;
 8001284:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001286:	b292      	uxth	r2, r2
 8001288:	490b      	ldr	r1, [pc, #44]	@ (80012b8 <cliUpdate+0x30c>)
 800128a:	7820      	ldrb	r0, [r4, #0]
 800128c:	f004 f9bc 	bl	8005608 <uartPrintf>
 8001290:	e79f      	b.n	80011d2 <cliUpdate+0x226>
          mov_len = line->cursor - line->count;
 8001292:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001294:	b292      	uxth	r2, r2
 8001296:	4907      	ldr	r1, [pc, #28]	@ (80012b4 <cliUpdate+0x308>)
 8001298:	7820      	ldrb	r0, [r4, #0]
 800129a:	f004 f9b5 	bl	8005608 <uartPrintf>
 800129e:	e79e      	b.n	80011de <cliUpdate+0x232>
      p_cli->state = CLI_RX_IDLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	7423      	strb	r3, [r4, #16]
      break;
 80012a4:	e76c      	b.n	8001180 <cliUpdate+0x1d4>
 80012a6:	bf00      	nop
 80012a8:	08027f8c 	.word	0x08027f8c
 80012ac:	08027f94 	.word	0x08027f94
 80012b0:	08027f9c 	.word	0x08027f9c
 80012b4:	08027ef4 	.word	0x08027ef4
 80012b8:	08027fa8 	.word	0x08027fa8

080012bc <cliMain>:
{
 80012bc:	b538      	push	{r3, r4, r5, lr}
  if (cli_node.is_open != true)
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <cliMain+0x28>)
 80012c0:	7a1c      	ldrb	r4, [r3, #8]
 80012c2:	b90c      	cbnz	r4, 80012c8 <cliMain+0xc>
}
 80012c4:	4620      	mov	r0, r4
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
  if (uartAvailable(cli_node.ch) > 0)
 80012c8:	7818      	ldrb	r0, [r3, #0]
 80012ca:	f004 f937 	bl	800553c <uartAvailable>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d0f8      	beq.n	80012c4 <cliMain+0x8>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80012d2:	4d04      	ldr	r5, [pc, #16]	@ (80012e4 <cliMain+0x28>)
 80012d4:	7828      	ldrb	r0, [r5, #0]
 80012d6:	f004 f94d 	bl	8005574 <uartRead>
 80012da:	4601      	mov	r1, r0
 80012dc:	4628      	mov	r0, r5
 80012de:	f7ff fe65 	bl	8000fac <cliUpdate>
 80012e2:	e7ef      	b.n	80012c4 <cliMain+0x8>
 80012e4:	24000344 	.word	0x24000344

080012e8 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 80012e8:	b510      	push	{r4, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 80012ea:	480f      	ldr	r0, [pc, #60]	@ (8001328 <cliShowList+0x40>)
 80012ec:	f7ff fe0a 	bl	8000f04 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80012f0:	480e      	ldr	r0, [pc, #56]	@ (800132c <cliShowList+0x44>)
 80012f2:	f7ff fe07 	bl	8000f04 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80012f6:	2400      	movs	r4, #0
 80012f8:	e00c      	b.n	8001314 <cliShowList+0x2c>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80012fa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80012fe:	0098      	lsls	r0, r3, #2
 8001300:	f500 707e 	add.w	r0, r0, #1016	@ 0x3f8
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <cliShowList+0x48>)
 8001306:	4418      	add	r0, r3
 8001308:	f7ff fdfc 	bl	8000f04 <cliPrintf>
    cliPrintf("\r\n");
 800130c:	4806      	ldr	r0, [pc, #24]	@ (8001328 <cliShowList+0x40>)
 800130e:	f7ff fdf9 	bl	8000f04 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8001312:	3401      	adds	r4, #1
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <cliShowList+0x48>)
 8001316:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 800131a:	42a3      	cmp	r3, r4
 800131c:	dced      	bgt.n	80012fa <cliShowList+0x12>
  }

  cliPrintf("-----------------------------\r\n");
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <cliShowList+0x4c>)
 8001320:	f7ff fdf0 	bl	8000f04 <cliPrintf>
}
 8001324:	bd10      	pop	{r4, pc}
 8001326:	bf00      	nop
 8001328:	080288c0 	.word	0x080288c0
 800132c:	08027fb0 	.word	0x08027fb0
 8001330:	24000344 	.word	0x24000344
 8001334:	08027fd0 	.word	0x08027fd0

08001338 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8001338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800133c:	b083      	sub	sp, #12
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800133e:	8803      	ldrh	r3, [r0, #0]
  char **argv = args->argv;
 8001340:	6844      	ldr	r4, [r0, #4]


  if(args->argc < 1)
 8001342:	b173      	cbz	r3, 8001362 <cliMemoryDump+0x2a>
  {
    cliPrintf(">> md addr [size] \n");
    return;
  }

  if(argc > 1)
 8001344:	2b01      	cmp	r3, #1
 8001346:	d812      	bhi.n	800136e <cliMemoryDump+0x36>
  int idx, size = 16;
 8001348:	2710      	movs	r7, #16
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800134a:	2200      	movs	r2, #0
 800134c:	4611      	mov	r1, r2
 800134e:	6820      	ldr	r0, [r4, #0]
 8001350:	f024 fbbe 	bl	8025ad0 <strtoul>
 8001354:	4606      	mov	r6, r0
  ascptr = (unsigned int *)addr;

  cliPrintf("\n   ");
 8001356:	482c      	ldr	r0, [pc, #176]	@ (8001408 <cliMemoryDump+0xd0>)
 8001358:	f7ff fdd4 	bl	8000f04 <cliPrintf>
  ascptr = (unsigned int *)addr;
 800135c:	46b0      	mov	r8, r6
  for (idx = 0; idx<size; idx++)
 800135e:	2400      	movs	r4, #0
 8001360:	e01b      	b.n	800139a <cliMemoryDump+0x62>
    cliPrintf(">> md addr [size] \n");
 8001362:	482a      	ldr	r0, [pc, #168]	@ (800140c <cliMemoryDump+0xd4>)
 8001364:	f7ff fdce 	bl	8000f04 <cliPrintf>
      cliPrintf("|\n   ");
      delay(1);
    }
    addr++;
  }
}
 8001368:	b003      	add	sp, #12
 800136a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800136e:	2200      	movs	r2, #0
 8001370:	4611      	mov	r1, r2
 8001372:	6860      	ldr	r0, [r4, #4]
 8001374:	f024 fbac 	bl	8025ad0 <strtoul>
 8001378:	4607      	mov	r7, r0
 800137a:	e7e6      	b.n	800134a <cliMemoryDump+0x12>
    cliPrintf(" 0x%08X", *(addr));
 800137c:	6831      	ldr	r1, [r6, #0]
 800137e:	4824      	ldr	r0, [pc, #144]	@ (8001410 <cliMemoryDump+0xd8>)
 8001380:	f7ff fdc0 	bl	8000f04 <cliPrintf>
    if ((idx%4) == 3)
 8001384:	4262      	negs	r2, r4
 8001386:	f004 0303 	and.w	r3, r4, #3
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	bf58      	it	pl
 8001390:	4253      	negpl	r3, r2
 8001392:	2b03      	cmp	r3, #3
 8001394:	d00b      	beq.n	80013ae <cliMemoryDump+0x76>
    addr++;
 8001396:	3604      	adds	r6, #4
  for (idx = 0; idx<size; idx++)
 8001398:	3401      	adds	r4, #1
 800139a:	42bc      	cmp	r4, r7
 800139c:	dae4      	bge.n	8001368 <cliMemoryDump+0x30>
    if((idx%4) == 0)
 800139e:	f014 0f03 	tst.w	r4, #3
 80013a2:	d1eb      	bne.n	800137c <cliMemoryDump+0x44>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80013a4:	4631      	mov	r1, r6
 80013a6:	481b      	ldr	r0, [pc, #108]	@ (8001414 <cliMemoryDump+0xdc>)
 80013a8:	f7ff fdac 	bl	8000f04 <cliPrintf>
 80013ac:	e7e6      	b.n	800137c <cliMemoryDump+0x44>
      cliPrintf ("  |");
 80013ae:	481a      	ldr	r0, [pc, #104]	@ (8001418 <cliMemoryDump+0xe0>)
 80013b0:	f7ff fda8 	bl	8000f04 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80013b4:	f04f 0900 	mov.w	r9, #0
 80013b8:	e017      	b.n	80013ea <cliMemoryDump+0xb2>
            cliPrintf(".");
 80013ba:	4818      	ldr	r0, [pc, #96]	@ (800141c <cliMemoryDump+0xe4>)
 80013bc:	f7ff fda2 	bl	8000f04 <cliPrintf>
        for (i=0;i<4;i++)
 80013c0:	3501      	adds	r5, #1
 80013c2:	2d03      	cmp	r5, #3
 80013c4:	dc0d      	bgt.n	80013e2 <cliMemoryDump+0xaa>
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80013c6:	f105 0308 	add.w	r3, r5, #8
 80013ca:	446b      	add	r3, sp
 80013cc:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80013d0:	f1a1 0320 	sub.w	r3, r1, #32
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80013d8:	d8ef      	bhi.n	80013ba <cliMemoryDump+0x82>
            cliPrintf("%c", asc[i]);
 80013da:	4811      	ldr	r0, [pc, #68]	@ (8001420 <cliMemoryDump+0xe8>)
 80013dc:	f7ff fd92 	bl	8000f04 <cliPrintf>
 80013e0:	e7ee      	b.n	80013c0 <cliMemoryDump+0x88>
        ascptr+=1;
 80013e2:	f108 0804 	add.w	r8, r8, #4
      for (idx1= 0; idx1< 4; idx1++)
 80013e6:	f109 0901 	add.w	r9, r9, #1
 80013ea:	f1b9 0f03 	cmp.w	r9, #3
 80013ee:	dc04      	bgt.n	80013fa <cliMemoryDump+0xc2>
        memcpy((char *)asc, (char *)ascptr, 4);
 80013f0:	f8d8 3000 	ldr.w	r3, [r8]
 80013f4:	9301      	str	r3, [sp, #4]
        for (i=0;i<4;i++)
 80013f6:	2500      	movs	r5, #0
 80013f8:	e7e3      	b.n	80013c2 <cliMemoryDump+0x8a>
      cliPrintf("|\n   ");
 80013fa:	480a      	ldr	r0, [pc, #40]	@ (8001424 <cliMemoryDump+0xec>)
 80013fc:	f7ff fd82 	bl	8000f04 <cliPrintf>
      delay(1);
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fb7b 	bl	8000afc <delay>
 8001406:	e7c6      	b.n	8001396 <cliMemoryDump+0x5e>
 8001408:	08028004 	.word	0x08028004
 800140c:	08027ff0 	.word	0x08027ff0
 8001410:	08028018 	.word	0x08028018
 8001414:	0802800c 	.word	0x0802800c
 8001418:	08028020 	.word	0x08028020
 800141c:	08028028 	.word	0x08028028
 8001420:	08028024 	.word	0x08028024
 8001424:	0802802c 	.word	0x0802802c

08001428 <cliPutch>:
{
 8001428:	b500      	push	{lr}
 800142a:	b083      	sub	sp, #12
 800142c:	f88d 0007 	strb.w	r0, [sp, #7]
  uartWrite(p_cli->ch, &data, 1);
 8001430:	2201      	movs	r2, #1
 8001432:	f10d 0107 	add.w	r1, sp, #7
 8001436:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <cliPutch+0x1c>)
 8001438:	7818      	ldrb	r0, [r3, #0]
 800143a:	f004 f8c1 	bl	80055c0 <uartWrite>
}
 800143e:	b003      	add	sp, #12
 8001440:	f85d fb04 	ldr.w	pc, [sp], #4
 8001444:	24000344 	.word	0x24000344

08001448 <cliKeepLoop>:
{
 8001448:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 800144a:	4b04      	ldr	r3, [pc, #16]	@ (800145c <cliKeepLoop+0x14>)
 800144c:	7818      	ldrb	r0, [r3, #0]
 800144e:	f004 f875 	bl	800553c <uartAvailable>
 8001452:	b908      	cbnz	r0, 8001458 <cliKeepLoop+0x10>
    return true;
 8001454:	2001      	movs	r0, #1
}
 8001456:	bd08      	pop	{r3, pc}
    return false;
 8001458:	2000      	movs	r0, #0
 800145a:	e7fc      	b.n	8001456 <cliKeepLoop+0xe>
 800145c:	24000344 	.word	0x24000344

08001460 <cliAdd>:
{
 8001460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <cliAdd+0x4c>)
 8001466:	f8b3 53f4 	ldrh.w	r5, [r3, #1012]	@ 0x3f4
 800146a:	2d1f      	cmp	r5, #31
 800146c:	d902      	bls.n	8001474 <cliAdd+0x14>
    return false;
 800146e:	2000      	movs	r0, #0
}
 8001470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001474:	460e      	mov	r6, r1
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001476:	00af      	lsls	r7, r5, #2
 8001478:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800147c:	00a4      	lsls	r4, r4, #2
 800147e:	f504 747e 	add.w	r4, r4, #1016	@ 0x3f8
 8001482:	4698      	mov	r8, r3
 8001484:	441c      	add	r4, r3
 8001486:	4601      	mov	r1, r0
 8001488:	4620      	mov	r0, r4
 800148a:	f024 fdca 	bl	8026022 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800148e:	442f      	add	r7, r5
 8001490:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8001494:	f8c7 6408 	str.w	r6, [r7, #1032]	@ 0x408
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff fba9 	bl	8000bf0 <cliToUpper>
  p_cli->cmd_count++;
 800149e:	f8b8 33f4 	ldrh.w	r3, [r8, #1012]	@ 0x3f4
 80014a2:	3301      	adds	r3, #1
 80014a4:	f8a8 33f4 	strh.w	r3, [r8, #1012]	@ 0x3f4
  return ret;
 80014a8:	2001      	movs	r0, #1
 80014aa:	e7e1      	b.n	8001470 <cliAdd+0x10>
 80014ac:	24000344 	.word	0x24000344

080014b0 <cliInit>:
{
 80014b0:	b508      	push	{r3, lr}
  cli_node.is_open = false;
 80014b2:	4813      	ldr	r0, [pc, #76]	@ (8001500 <cliInit+0x50>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	7203      	strb	r3, [r0, #8]
  cli_node.is_log  = false;
 80014b8:	7243      	strb	r3, [r0, #9]
  cli_node.is_busy = false;
 80014ba:	7283      	strb	r3, [r0, #10]
  cli_node.state   = CLI_RX_IDLE;
 80014bc:	7403      	strb	r3, [r0, #16]
  cli_node.hist_line_i     = 0;
 80014be:	f880 3195 	strb.w	r3, [r0, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 80014c2:	f880 3196 	strb.w	r3, [r0, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 80014c6:	f880 3197 	strb.w	r3, [r0, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 80014ca:	f880 3194 	strb.w	r3, [r0, #404]	@ 0x194
  cli_node.cmd_args.getData  = cliArgsGetData;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <cliInit+0x54>)
 80014d0:	f8c0 3680 	str.w	r3, [r0, #1664]	@ 0x680
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <cliInit+0x58>)
 80014d6:	f8c0 3684 	str.w	r3, [r0, #1668]	@ 0x684
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <cliInit+0x5c>)
 80014dc:	f8c0 3688 	str.w	r3, [r0, #1672]	@ 0x688
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <cliInit+0x60>)
 80014e2:	f8c0 368c 	str.w	r3, [r0, #1676]	@ 0x68c
  cliLineClean(&cli_node);
 80014e6:	f7ff fb51 	bl	8000b8c <cliLineClean>
  cliAdd("help", cliShowList);
 80014ea:	490a      	ldr	r1, [pc, #40]	@ (8001514 <cliInit+0x64>)
 80014ec:	480a      	ldr	r0, [pc, #40]	@ (8001518 <cliInit+0x68>)
 80014ee:	f7ff ffb7 	bl	8001460 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80014f2:	490a      	ldr	r1, [pc, #40]	@ (800151c <cliInit+0x6c>)
 80014f4:	480a      	ldr	r0, [pc, #40]	@ (8001520 <cliInit+0x70>)
 80014f6:	f7ff ffb3 	bl	8001460 <cliAdd>
}
 80014fa:	2001      	movs	r0, #1
 80014fc:	bd08      	pop	{r3, pc}
 80014fe:	bf00      	nop
 8001500:	24000344 	.word	0x24000344
 8001504:	08000ca5 	.word	0x08000ca5
 8001508:	08000c79 	.word	0x08000c79
 800150c:	08000c29 	.word	0x08000c29
 8001510:	08000c49 	.word	0x08000c49
 8001514:	080012e9 	.word	0x080012e9
 8001518:	08028034 	.word	0x08028034
 800151c:	08001339 	.word	0x08001339
 8001520:	0802803c 	.word	0x0802803c

08001524 <getWidth>:
}

static uint32_t getWidth(void)
{
  return cli_gui_w;
}
 8001524:	4b01      	ldr	r3, [pc, #4]	@ (800152c <getWidth+0x8>)
 8001526:	8818      	ldrh	r0, [r3, #0]
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	24000072 	.word	0x24000072

08001530 <getHeight>:

static uint32_t getHeight(void)
{
  return cli_gui_h;
}
 8001530:	4b01      	ldr	r3, [pc, #4]	@ (8001538 <getHeight+0x8>)
 8001532:	8818      	ldrh	r0, [r3, #0]
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	24000070 	.word	0x24000070

0800153c <setScrollArea>:
  moveAddStr(x, y, line_buf);
}

static void setScrollArea(uint8_t top, uint8_t bottom)
{
  cli_gui_scrl_start = top;
 800153c:	4b02      	ldr	r3, [pc, #8]	@ (8001548 <setScrollArea+0xc>)
 800153e:	7018      	strb	r0, [r3, #0]
  cli_gui_scrl_end = bottom;
 8001540:	4b02      	ldr	r3, [pc, #8]	@ (800154c <setScrollArea+0x10>)
 8001542:	7019      	strb	r1, [r3, #0]
}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	24000dd8 	.word	0x24000dd8
 800154c:	2400006c 	.word	0x2400006c

08001550 <clearToEol>:
{
  addCh_Or_InsCh(ch, true);
}

static void clearToEol(void)
{
 8001550:	b508      	push	{r3, lr}
  cliPrintf(SEQ_CLRTOEOL);
 8001552:	4802      	ldr	r0, [pc, #8]	@ (800155c <clearToEol+0xc>)
 8001554:	f7ff fcd6 	bl	8000f04 <cliPrintf>
}
 8001558:	bd08      	pop	{r3, pc}
 800155a:	bf00      	nop
 800155c:	08028040 	.word	0x08028040

08001560 <delChar>:
{
 8001560:	b508      	push	{r3, lr}
  cliPrintf(SEQ_DELCH);
 8001562:	4802      	ldr	r0, [pc, #8]	@ (800156c <delChar+0xc>)
 8001564:	f7ff fcce 	bl	8000f04 <cliPrintf>
}
 8001568:	bd08      	pop	{r3, pc}
 800156a:	bf00      	nop
 800156c:	08028044 	.word	0x08028044

08001570 <guiSetScrollArea>:
{
 8001570:	b508      	push	{r3, lr}
  if (top == bottom)
 8001572:	4288      	cmp	r0, r1
 8001574:	d006      	beq.n	8001584 <guiSetScrollArea+0x14>
    cliPrintf("%s%d;%dr", SEQ_CSI, top + 1, bottom + 1);
 8001576:	1c4b      	adds	r3, r1, #1
 8001578:	1c42      	adds	r2, r0, #1
 800157a:	4904      	ldr	r1, [pc, #16]	@ (800158c <guiSetScrollArea+0x1c>)
 800157c:	4804      	ldr	r0, [pc, #16]	@ (8001590 <guiSetScrollArea+0x20>)
 800157e:	f7ff fcc1 	bl	8000f04 <cliPrintf>
}
 8001582:	bd08      	pop	{r3, pc}
    cliPrintf(SEQ_RESET_SCRREG); // reset scrolling region
 8001584:	4803      	ldr	r0, [pc, #12]	@ (8001594 <guiSetScrollArea+0x24>)
 8001586:	f7ff fcbd 	bl	8000f04 <cliPrintf>
 800158a:	e7fa      	b.n	8001582 <guiSetScrollArea+0x12>
 800158c:	0802804c 	.word	0x0802804c
 8001590:	08028050 	.word	0x08028050
 8001594:	08028048 	.word	0x08028048

08001598 <guiMove>:
{
 8001598:	b508      	push	{r3, lr}
  cliPrintf("%s%d;%dH", SEQ_CSI, y+1,x+1);
 800159a:	1c43      	adds	r3, r0, #1
 800159c:	1c4a      	adds	r2, r1, #1
 800159e:	4902      	ldr	r1, [pc, #8]	@ (80015a8 <guiMove+0x10>)
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <guiMove+0x14>)
 80015a2:	f7ff fcaf 	bl	8000f04 <cliPrintf>
}
 80015a6:	bd08      	pop	{r3, pc}
 80015a8:	0802804c 	.word	0x0802804c
 80015ac:	0802805c 	.word	0x0802805c

080015b0 <move>:
{
 80015b0:	b508      	push	{r3, lr}
  if (cli_gui_cury != y || cli_gui_curx != x)
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <move+0x20>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	428b      	cmp	r3, r1
 80015b8:	d103      	bne.n	80015c2 <move+0x12>
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <move+0x24>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4283      	cmp	r3, r0
 80015c0:	d005      	beq.n	80015ce <move+0x1e>
    cli_gui_cury = y;
 80015c2:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <move+0x20>)
 80015c4:	7019      	strb	r1, [r3, #0]
    cli_gui_curx = x;
 80015c6:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <move+0x24>)
 80015c8:	7018      	strb	r0, [r3, #0]
    guiMove(x, y);
 80015ca:	f7ff ffe5 	bl	8001598 <guiMove>
}
 80015ce:	bd08      	pop	{r3, pc}
 80015d0:	2400006e 	.word	0x2400006e
 80015d4:	2400006d 	.word	0x2400006d

080015d8 <insertLine>:
{
 80015d8:	b510      	push	{r4, lr}
    guiSetScrollArea(cli_gui_cury, cli_gui_scrl_end);                     // set scrolling region
 80015da:	4c0b      	ldr	r4, [pc, #44]	@ (8001608 <insertLine+0x30>)
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <insertLine+0x34>)
 80015de:	7819      	ldrb	r1, [r3, #0]
 80015e0:	7820      	ldrb	r0, [r4, #0]
 80015e2:	f7ff ffc5 	bl	8001570 <guiSetScrollArea>
    guiMove(0, cli_gui_cury);                                             // goto to current line
 80015e6:	7821      	ldrb	r1, [r4, #0]
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ffd5 	bl	8001598 <guiMove>
    cliPrintf(SEQ_INSERTLINE);                                            // insert line
 80015ee:	4808      	ldr	r0, [pc, #32]	@ (8001610 <insertLine+0x38>)
 80015f0:	f7ff fc88 	bl	8000f04 <cliPrintf>
    guiSetScrollArea(0, 0);                                               // reset scrolling region
 80015f4:	2100      	movs	r1, #0
 80015f6:	4608      	mov	r0, r1
 80015f8:	f7ff ffba 	bl	8001570 <guiSetScrollArea>
    guiMove(cli_gui_curx, cli_gui_cury);                                  // restore position
 80015fc:	7821      	ldrb	r1, [r4, #0]
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <insertLine+0x3c>)
 8001600:	7818      	ldrb	r0, [r3, #0]
 8001602:	f7ff ffc9 	bl	8001598 <guiMove>
}
 8001606:	bd10      	pop	{r4, pc}
 8001608:	2400006e 	.word	0x2400006e
 800160c:	2400006c 	.word	0x2400006c
 8001610:	08028068 	.word	0x08028068
 8001614:	2400006d 	.word	0x2400006d

08001618 <scroll>:
{
 8001618:	b510      	push	{r4, lr}
    guiSetScrollArea (cli_gui_scrl_start, cli_gui_scrl_end);              // set scrolling region
 800161a:	4c0c      	ldr	r4, [pc, #48]	@ (800164c <scroll+0x34>)
 800161c:	7821      	ldrb	r1, [r4, #0]
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <scroll+0x38>)
 8001620:	7818      	ldrb	r0, [r3, #0]
 8001622:	f7ff ffa5 	bl	8001570 <guiSetScrollArea>
    guiMove(0, cli_gui_scrl_end);                                         // goto to last line of scrolling region
 8001626:	7821      	ldrb	r1, [r4, #0]
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff ffb5 	bl	8001598 <guiMove>
    cliPrintf(SEQ_NEXTLINE);                                              // next line
 800162e:	4809      	ldr	r0, [pc, #36]	@ (8001654 <scroll+0x3c>)
 8001630:	f7ff fc68 	bl	8000f04 <cliPrintf>
    guiSetScrollArea (0, 0);                                              // reset scrolling region
 8001634:	2100      	movs	r1, #0
 8001636:	4608      	mov	r0, r1
 8001638:	f7ff ff9a 	bl	8001570 <guiSetScrollArea>
    guiMove(cli_gui_curx, cli_gui_cury);                                  // restore position
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <scroll+0x40>)
 800163e:	7819      	ldrb	r1, [r3, #0]
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <scroll+0x44>)
 8001642:	7818      	ldrb	r0, [r3, #0]
 8001644:	f7ff ffa8 	bl	8001598 <guiMove>
}
 8001648:	bd10      	pop	{r4, pc}
 800164a:	bf00      	nop
 800164c:	2400006c 	.word	0x2400006c
 8001650:	24000dd8 	.word	0x24000dd8
 8001654:	0802806c 	.word	0x0802806c
 8001658:	2400006e 	.word	0x2400006e
 800165c:	2400006d 	.word	0x2400006d

08001660 <clear>:
{
 8001660:	b508      	push	{r3, lr}
  cliPrintf(SEQ_CLEAR);
 8001662:	4802      	ldr	r0, [pc, #8]	@ (800166c <clear+0xc>)
 8001664:	f7ff fc4e 	bl	8000f04 <cliPrintf>
}
 8001668:	bd08      	pop	{r3, pc}
 800166a:	bf00      	nop
 800166c:	08028070 	.word	0x08028070

08001670 <addCh_Or_InsCh>:
{
 8001670:	b538      	push	{r3, r4, r5, lr}
 8001672:	4604      	mov	r4, r0
 8001674:	460d      	mov	r5, r1
  if (ch >= 0x80 && ch <= 0x9F)
 8001676:	f080 0380 	eor.w	r3, r0, #128	@ 0x80
 800167a:	2b1f      	cmp	r3, #31
 800167c:	d818      	bhi.n	80016b0 <addCh_Or_InsCh+0x40>
    if (charset != CHARSET_G1)
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <addCh_Or_InsCh+0x7c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d10d      	bne.n	80016a2 <addCh_Or_InsCh+0x32>
    ch -= 0x20;                 
 8001686:	3c20      	subs	r4, #32
 8001688:	b2e4      	uxtb	r4, r4
  if (insert)
 800168a:	b31d      	cbz	r5, 80016d4 <addCh_Or_InsCh+0x64>
    if (! insert_mode)
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <addCh_Or_InsCh+0x80>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b1cb      	cbz	r3, 80016c6 <addCh_Or_InsCh+0x56>
  cliPutch(ch);
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff fec8 	bl	8001428 <cliPutch>
  cli_gui_curx++;
 8001698:	4a16      	ldr	r2, [pc, #88]	@ (80016f4 <addCh_Or_InsCh+0x84>)
 800169a:	7813      	ldrb	r3, [r2, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	7013      	strb	r3, [r2, #0]
}
 80016a0:	bd38      	pop	{r3, r4, r5, pc}
      cliPutch('\016');         
 80016a2:	200e      	movs	r0, #14
 80016a4:	f7ff fec0 	bl	8001428 <cliPutch>
      charset = CHARSET_G1;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <addCh_Or_InsCh+0x7c>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e7ea      	b.n	8001686 <addCh_Or_InsCh+0x16>
    if (charset != CHARSET_G0)
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <addCh_Or_InsCh+0x7c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0e8      	beq.n	800168a <addCh_Or_InsCh+0x1a>
      cliPutch('\017');         
 80016b8:	200f      	movs	r0, #15
 80016ba:	f7ff feb5 	bl	8001428 <cliPutch>
      charset = CHARSET_G0;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <addCh_Or_InsCh+0x7c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e7e1      	b.n	800168a <addCh_Or_InsCh+0x1a>
      cliPrintf(SEQ_INSERT_MODE);
 80016c6:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <addCh_Or_InsCh+0x88>)
 80016c8:	f7ff fc1c 	bl	8000f04 <cliPrintf>
      insert_mode = true;
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <addCh_Or_InsCh+0x80>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e7de      	b.n	8001692 <addCh_Or_InsCh+0x22>
    if (insert_mode)
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <addCh_Or_InsCh+0x80>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0da      	beq.n	8001692 <addCh_Or_InsCh+0x22>
      cliPrintf(SEQ_REPLACE_MODE);
 80016dc:	4807      	ldr	r0, [pc, #28]	@ (80016fc <addCh_Or_InsCh+0x8c>)
 80016de:	f7ff fc11 	bl	8000f04 <cliPrintf>
      insert_mode = false;
 80016e2:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <addCh_Or_InsCh+0x80>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e7d3      	b.n	8001692 <addCh_Or_InsCh+0x22>
 80016ea:	bf00      	nop
 80016ec:	24000006 	.word	0x24000006
 80016f0:	240009d4 	.word	0x240009d4
 80016f4:	2400006d 	.word	0x2400006d
 80016f8:	08028078 	.word	0x08028078
 80016fc:	08028080 	.word	0x08028080

08001700 <insChar>:
{
 8001700:	b508      	push	{r3, lr}
  addCh_Or_InsCh(ch, true);
 8001702:	2101      	movs	r1, #1
 8001704:	f7ff ffb4 	bl	8001670 <addCh_Or_InsCh>
}
 8001708:	bd08      	pop	{r3, pc}

0800170a <addStr>:
{
 800170a:	b510      	push	{r4, lr}
 800170c:	4604      	mov	r4, r0
  while (*str)
 800170e:	e003      	b.n	8001718 <addStr+0xe>
    addCh_Or_InsCh(*str++, false);
 8001710:	3401      	adds	r4, #1
 8001712:	2100      	movs	r1, #0
 8001714:	f7ff ffac 	bl	8001670 <addCh_Or_InsCh>
  while (*str)
 8001718:	7820      	ldrb	r0, [r4, #0]
 800171a:	2800      	cmp	r0, #0
 800171c:	d1f8      	bne.n	8001710 <addStr+0x6>
}
 800171e:	bd10      	pop	{r4, pc}

08001720 <message>:

static void message(const char * msg)
{
 8001720:	b510      	push	{r4, lr}
 8001722:	4604      	mov	r4, r0
  move(0, getHeight() - 2);
 8001724:	f7ff ff04 	bl	8001530 <getHeight>
 8001728:	1e81      	subs	r1, r0, #2
 800172a:	b2c9      	uxtb	r1, r1
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff ff3f 	bl	80015b0 <move>
  addStr(msg);
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff ffe9 	bl	800170a <addStr>
  clearToEol();
 8001738:	f7ff ff0a 	bl	8001550 <clearToEol>
}
 800173c:	bd10      	pop	{r4, pc}

0800173e <addChar>:
{
 800173e:	b508      	push	{r3, lr}
  addCh_Or_InsCh (ch, false);
 8001740:	2100      	movs	r1, #0
 8001742:	f7ff ff95 	bl	8001670 <addCh_Or_InsCh>
}
 8001746:	bd08      	pop	{r3, pc}

08001748 <showCursor>:
{
 8001748:	b510      	push	{r4, lr}
 800174a:	4604      	mov	r4, r0
    cliPrintf(SEQ_CURSOR_VIS);
 800174c:	4805      	ldr	r0, [pc, #20]	@ (8001764 <showCursor+0x1c>)
 800174e:	f7ff fbd9 	bl	8000f04 <cliPrintf>
  if (visibility == false)
 8001752:	b91c      	cbnz	r4, 800175c <showCursor+0x14>
    cliPutch('l');
 8001754:	206c      	movs	r0, #108	@ 0x6c
 8001756:	f7ff fe67 	bl	8001428 <cliPutch>
}
 800175a:	bd10      	pop	{r4, pc}
    cliPutch('h');
 800175c:	2068      	movs	r0, #104	@ 0x68
 800175e:	f7ff fe63 	bl	8001428 <cliPutch>
}
 8001762:	e7fa      	b.n	800175a <showCursor+0x12>
 8001764:	08028088 	.word	0x08028088

08001768 <setAttr>:
{
 8001768:	b538      	push	{r3, r4, r5, lr}
  if (attr != cur_attr)
 800176a:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <setAttr+0x9c>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	4283      	cmp	r3, r0
 8001770:	d100      	bne.n	8001774 <setAttr+0xc>
}
 8001772:	bd38      	pop	{r3, r4, r5, pc}
 8001774:	4604      	mov	r4, r0
    cliPrintf(SEQ_ATTRSET);
 8001776:	4824      	ldr	r0, [pc, #144]	@ (8001808 <setAttr+0xa0>)
 8001778:	f7ff fbc4 	bl	8000f04 <cliPrintf>
    idx = (attr & F_COLOR) >> 8;
 800177c:	f3c4 2503 	ubfx	r5, r4, #8, #4
    if (idx >= 1 && idx <= 8)
 8001780:	1e6b      	subs	r3, r5, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b07      	cmp	r3, #7
 8001786:	d919      	bls.n	80017bc <setAttr+0x54>
    idx = (attr & B_COLOR) >> 12;
 8001788:	0b25      	lsrs	r5, r4, #12
    if (idx >= 1 && idx <= 8)
 800178a:	1e6b      	subs	r3, r5, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b07      	cmp	r3, #7
 8001790:	d91c      	bls.n	80017cc <setAttr+0x64>
    if (attr & A_REVERSE)
 8001792:	f014 0f02 	tst.w	r4, #2
 8001796:	d121      	bne.n	80017dc <setAttr+0x74>
    if (attr & A_UNDERLINE)
 8001798:	f014 0f01 	tst.w	r4, #1
 800179c:	d122      	bne.n	80017e4 <setAttr+0x7c>
    if (attr & A_BLINK)
 800179e:	f014 0f04 	tst.w	r4, #4
 80017a2:	d123      	bne.n	80017ec <setAttr+0x84>
    if (attr & A_BOLD)
 80017a4:	f014 0f08 	tst.w	r4, #8
 80017a8:	d124      	bne.n	80017f4 <setAttr+0x8c>
    if (attr & A_DIM)
 80017aa:	f014 0f10 	tst.w	r4, #16
 80017ae:	d125      	bne.n	80017fc <setAttr+0x94>
    cliPutch('m');
 80017b0:	206d      	movs	r0, #109	@ 0x6d
 80017b2:	f7ff fe39 	bl	8001428 <cliPutch>
    cur_attr = attr;
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <setAttr+0x9c>)
 80017b8:	801c      	strh	r4, [r3, #0]
}
 80017ba:	e7da      	b.n	8001772 <setAttr+0xa>
      cliPrintf(SEQ_ATTRSET_FCOLOR);
 80017bc:	4813      	ldr	r0, [pc, #76]	@ (800180c <setAttr+0xa4>)
 80017be:	f7ff fba1 	bl	8000f04 <cliPrintf>
      cliPutch(idx - 1 + '0');
 80017c2:	f105 002f 	add.w	r0, r5, #47	@ 0x2f
 80017c6:	f7ff fe2f 	bl	8001428 <cliPutch>
 80017ca:	e7dd      	b.n	8001788 <setAttr+0x20>
      cliPrintf(SEQ_ATTRSET_BCOLOR);
 80017cc:	4810      	ldr	r0, [pc, #64]	@ (8001810 <setAttr+0xa8>)
 80017ce:	f7ff fb99 	bl	8000f04 <cliPrintf>
      cliPutch(idx - 1 + '0');
 80017d2:	f105 002f 	add.w	r0, r5, #47	@ 0x2f
 80017d6:	f7ff fe27 	bl	8001428 <cliPutch>
 80017da:	e7da      	b.n	8001792 <setAttr+0x2a>
      cliPrintf(SEQ_ATTRSET_REVERSE);
 80017dc:	480d      	ldr	r0, [pc, #52]	@ (8001814 <setAttr+0xac>)
 80017de:	f7ff fb91 	bl	8000f04 <cliPrintf>
 80017e2:	e7d9      	b.n	8001798 <setAttr+0x30>
      cliPrintf(SEQ_ATTRSET_UNDERLINE);
 80017e4:	480a      	ldr	r0, [pc, #40]	@ (8001810 <setAttr+0xa8>)
 80017e6:	f7ff fb8d 	bl	8000f04 <cliPrintf>
 80017ea:	e7d8      	b.n	800179e <setAttr+0x36>
      cliPrintf(SEQ_ATTRSET_BLINK);
 80017ec:	480a      	ldr	r0, [pc, #40]	@ (8001818 <setAttr+0xb0>)
 80017ee:	f7ff fb89 	bl	8000f04 <cliPrintf>
 80017f2:	e7d7      	b.n	80017a4 <setAttr+0x3c>
      cliPrintf(SEQ_ATTRSET_BOLD);
 80017f4:	4809      	ldr	r0, [pc, #36]	@ (800181c <setAttr+0xb4>)
 80017f6:	f7ff fb85 	bl	8000f04 <cliPrintf>
 80017fa:	e7d6      	b.n	80017aa <setAttr+0x42>
      cliPrintf(SEQ_ATTRSET_DIM);
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <setAttr+0xb8>)
 80017fe:	f7ff fb81 	bl	8000f04 <cliPrintf>
 8001802:	e7d5      	b.n	80017b0 <setAttr+0x48>
 8001804:	24000004 	.word	0x24000004
 8001808:	08028090 	.word	0x08028090
 800180c:	08028094 	.word	0x08028094
 8001810:	08028098 	.word	0x08028098
 8001814:	0802809c 	.word	0x0802809c
 8001818:	080280a0 	.word	0x080280a0
 800181c:	080280a4 	.word	0x080280a4
 8001820:	080280a8 	.word	0x080280a8

08001824 <shiftLeft>:
{
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	4605      	mov	r5, r0
 8001828:	460c      	mov	r4, r1
 800182a:	4616      	mov	r6, r2
  move(getWidth() - 2, y);
 800182c:	f7ff fe7a 	bl	8001524 <getWidth>
 8001830:	3802      	subs	r0, #2
 8001832:	4621      	mov	r1, r4
 8001834:	b2c0      	uxtb	r0, r0
 8001836:	f7ff febb 	bl	80015b0 <move>
  addChar (ch);
 800183a:	4630      	mov	r0, r6
 800183c:	f7ff ff7f 	bl	800173e <addChar>
  move(x, y);
 8001840:	4621      	mov	r1, r4
 8001842:	4628      	mov	r0, r5
 8001844:	f7ff feb4 	bl	80015b0 <move>
  for (col = getWidth() - 2; col > x; col--)
 8001848:	f7ff fe6c 	bl	8001524 <getWidth>
 800184c:	b2c4      	uxtb	r4, r0
 800184e:	3c02      	subs	r4, #2
 8001850:	b2e4      	uxtb	r4, r4
 8001852:	e006      	b.n	8001862 <shiftLeft+0x3e>
    delay(5);
 8001854:	2005      	movs	r0, #5
 8001856:	f7ff f951 	bl	8000afc <delay>
    delChar();
 800185a:	f7ff fe81 	bl	8001560 <delChar>
  for (col = getWidth() - 2; col > x; col--)
 800185e:	3c01      	subs	r4, #1
 8001860:	b2e4      	uxtb	r4, r4
 8001862:	42ac      	cmp	r4, r5
 8001864:	d8f6      	bhi.n	8001854 <shiftLeft+0x30>
}
 8001866:	bd70      	pop	{r4, r5, r6, pc}

08001868 <shiftLeftStr>:
{
 8001868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800186c:	4680      	mov	r8, r0
 800186e:	460f      	mov	r7, r1
 8001870:	4615      	mov	r5, r2
  setAttr(F_RED);
 8001872:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001876:	f7ff ff77 	bl	8001768 <setAttr>
  uint8_t xx = x;
 800187a:	4644      	mov	r4, r8
  for (s = str; *s; s++)
 800187c:	462e      	mov	r6, r5
 800187e:	e002      	b.n	8001886 <shiftLeftStr+0x1e>
    xx++;
 8001880:	3401      	adds	r4, #1
 8001882:	b2e4      	uxtb	r4, r4
  for (s = str; *s; s++)
 8001884:	3601      	adds	r6, #1
 8001886:	7832      	ldrb	r2, [r6, #0]
 8001888:	b132      	cbz	r2, 8001898 <shiftLeftStr+0x30>
    if (*s != ' ')
 800188a:	2a20      	cmp	r2, #32
 800188c:	d0f8      	beq.n	8001880 <shiftLeftStr+0x18>
      shiftLeft(xx, y, *s);
 800188e:	4639      	mov	r1, r7
 8001890:	4620      	mov	r0, r4
 8001892:	f7ff ffc7 	bl	8001824 <shiftLeft>
 8001896:	e7f3      	b.n	8001880 <shiftLeftStr+0x18>
  move(x, y);
 8001898:	4639      	mov	r1, r7
 800189a:	4640      	mov	r0, r8
 800189c:	f7ff fe88 	bl	80015b0 <move>
  setAttr(A_REVERSE);
 80018a0:	2002      	movs	r0, #2
 80018a2:	f7ff ff61 	bl	8001768 <setAttr>
  for (s = str; *s; s++)
 80018a6:	462c      	mov	r4, r5
 80018a8:	e005      	b.n	80018b6 <shiftLeftStr+0x4e>
    addChar(*s);
 80018aa:	f7ff ff48 	bl	800173e <addChar>
    delay(25);
 80018ae:	2019      	movs	r0, #25
 80018b0:	f7ff f924 	bl	8000afc <delay>
  for (s = str; *s; s++)
 80018b4:	3401      	adds	r4, #1
 80018b6:	7820      	ldrb	r0, [r4, #0]
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d1f6      	bne.n	80018aa <shiftLeftStr+0x42>
  move(x, y);
 80018bc:	4639      	mov	r1, r7
 80018be:	4640      	mov	r0, r8
 80018c0:	f7ff fe76 	bl	80015b0 <move>
  setAttr(F_BLUE);
 80018c4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80018c8:	f7ff ff4e 	bl	8001768 <setAttr>
  for (s = str; *s; s++)
 80018cc:	e005      	b.n	80018da <shiftLeftStr+0x72>
    addChar(*s);
 80018ce:	f7ff ff36 	bl	800173e <addChar>
    delay(25);
 80018d2:	2019      	movs	r0, #25
 80018d4:	f7ff f912 	bl	8000afc <delay>
  for (s = str; *s; s++)
 80018d8:	3501      	adds	r5, #1
 80018da:	7828      	ldrb	r0, [r5, #0]
 80018dc:	2800      	cmp	r0, #0
 80018de:	d1f6      	bne.n	80018ce <shiftLeftStr+0x66>
}
 80018e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080018e4 <addPrintf>:
{
 80018e4:	b40f      	push	{r0, r1, r2, r3}
 80018e6:	b510      	push	{r4, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	ab04      	add	r3, sp, #16
 80018ec:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start (arg, fmt);
 80018f0:	9301      	str	r3, [sp, #4]
  vsnprintf(line_buf, 1024, fmt, arg);
 80018f2:	4c07      	ldr	r4, [pc, #28]	@ (8001910 <addPrintf+0x2c>)
 80018f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018f8:	4620      	mov	r0, r4
 80018fa:	f024 fa77 	bl	8025dec <vsniprintf>
  addStr(line_buf);
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff ff03 	bl	800170a <addStr>
}
 8001904:	b002      	add	sp, #8
 8001906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800190a:	b004      	add	sp, #16
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	240009d8 	.word	0x240009d8

08001914 <cliGui>:
    .drawBoxLine = drawBoxLine,
    .eraseBox = eraseBox,
  };

  return &cli_gui_api;
}
 8001914:	4800      	ldr	r0, [pc, #0]	@ (8001918 <cliGui+0x4>)
 8001916:	4770      	bx	lr
 8001918:	24000008 	.word	0x24000008

0800191c <eraseBox>:
{
 800191c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001920:	4680      	mov	r8, r0
 8001922:	468a      	mov	sl, r1
 8001924:	4691      	mov	r9, r2
 8001926:	469b      	mov	fp, r3
  cliGui()->move(x, y);
 8001928:	f7ff fff4 	bl	8001914 <cliGui>
 800192c:	4605      	mov	r5, r0
 800192e:	6983      	ldr	r3, [r0, #24]
 8001930:	4651      	mov	r1, sl
 8001932:	4640      	mov	r0, r8
 8001934:	4798      	blx	r3
  cliGui()->addChar(' ');
 8001936:	69eb      	ldr	r3, [r5, #28]
 8001938:	2020      	movs	r0, #32
 800193a:	4798      	blx	r3
  for (col = 0; col < w - 2; col++)
 800193c:	2400      	movs	r4, #0
 800193e:	e004      	b.n	800194a <eraseBox+0x2e>
    cliGui()->addChar(' ');
 8001940:	69eb      	ldr	r3, [r5, #28]
 8001942:	2020      	movs	r0, #32
 8001944:	4798      	blx	r3
  for (col = 0; col < w - 2; col++)
 8001946:	3401      	adds	r4, #1
 8001948:	b2e4      	uxtb	r4, r4
 800194a:	f1a9 0702 	sub.w	r7, r9, #2
 800194e:	42bc      	cmp	r4, r7
 8001950:	dbf6      	blt.n	8001940 <eraseBox+0x24>
  cliGui()->addChar(' ');
 8001952:	69eb      	ldr	r3, [r5, #28]
 8001954:	2020      	movs	r0, #32
 8001956:	4798      	blx	r3
  for (line = 0; line < h - 2; line++)
 8001958:	2600      	movs	r6, #0
 800195a:	e018      	b.n	800198e <eraseBox+0x72>
    cliGui()->move(x, line + y + 1);
 800195c:	69ab      	ldr	r3, [r5, #24]
 800195e:	eb06 040a 	add.w	r4, r6, sl
 8001962:	b2e4      	uxtb	r4, r4
 8001964:	3401      	adds	r4, #1
 8001966:	b2e4      	uxtb	r4, r4
 8001968:	4621      	mov	r1, r4
 800196a:	4640      	mov	r0, r8
 800196c:	4798      	blx	r3
    cliGui()->addChar(' ');
 800196e:	69eb      	ldr	r3, [r5, #28]
 8001970:	2020      	movs	r0, #32
 8001972:	4798      	blx	r3
    cliGui()->move(x + w - 1, line + y + 1);
 8001974:	69ab      	ldr	r3, [r5, #24]
 8001976:	eb08 0009 	add.w	r0, r8, r9
 800197a:	b2c0      	uxtb	r0, r0
 800197c:	3801      	subs	r0, #1
 800197e:	4621      	mov	r1, r4
 8001980:	b2c0      	uxtb	r0, r0
 8001982:	4798      	blx	r3
    cliGui()->addChar(' ');
 8001984:	69eb      	ldr	r3, [r5, #28]
 8001986:	2020      	movs	r0, #32
 8001988:	4798      	blx	r3
  for (line = 0; line < h - 2; line++)
 800198a:	3601      	adds	r6, #1
 800198c:	b2f6      	uxtb	r6, r6
 800198e:	f1ab 0302 	sub.w	r3, fp, #2
 8001992:	429e      	cmp	r6, r3
 8001994:	dbe2      	blt.n	800195c <eraseBox+0x40>
  cliGui()->move (x, y + h - 1);
 8001996:	69ab      	ldr	r3, [r5, #24]
 8001998:	eb0a 010b 	add.w	r1, sl, fp
 800199c:	b2c9      	uxtb	r1, r1
 800199e:	3901      	subs	r1, #1
 80019a0:	b2c9      	uxtb	r1, r1
 80019a2:	4640      	mov	r0, r8
 80019a4:	4798      	blx	r3
  cliGui()->addChar(' ');
 80019a6:	69eb      	ldr	r3, [r5, #28]
 80019a8:	2020      	movs	r0, #32
 80019aa:	4798      	blx	r3
  for (col = 0; col < w - 2; col++)
 80019ac:	2400      	movs	r4, #0
 80019ae:	e004      	b.n	80019ba <eraseBox+0x9e>
    cliGui()->addChar(' ');
 80019b0:	69eb      	ldr	r3, [r5, #28]
 80019b2:	2020      	movs	r0, #32
 80019b4:	4798      	blx	r3
  for (col = 0; col < w - 2; col++)
 80019b6:	3401      	adds	r4, #1
 80019b8:	b2e4      	uxtb	r4, r4
 80019ba:	42a7      	cmp	r7, r4
 80019bc:	dcf8      	bgt.n	80019b0 <eraseBox+0x94>
  cliGui()->addChar(' ');
 80019be:	69eb      	ldr	r3, [r5, #28]
 80019c0:	2020      	movs	r0, #32
 80019c2:	4798      	blx	r3
}
 80019c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019c8 <drawBox>:
{
 80019c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019cc:	4607      	mov	r7, r0
 80019ce:	4688      	mov	r8, r1
 80019d0:	4615      	mov	r5, r2
 80019d2:	4699      	mov	r9, r3
  title_len = strlen(title);
 80019d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80019d6:	f7fe fca5 	bl	8000324 <strlen>
  if (title_len > 0)
 80019da:	4683      	mov	fp, r0
 80019dc:	b128      	cbz	r0, 80019ea <drawBox+0x22>
    if (w > title_len)
 80019de:	4285      	cmp	r5, r0
 80019e0:	d91b      	bls.n	8001a1a <drawBox+0x52>
      title_pos = (w - title_len)/2;
 80019e2:	eba5 0a00 	sub.w	sl, r5, r0
 80019e6:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
  cliGui()->move(x, y);
 80019ea:	f7ff ff93 	bl	8001914 <cliGui>
 80019ee:	4604      	mov	r4, r0
 80019f0:	6983      	ldr	r3, [r0, #24]
 80019f2:	4641      	mov	r1, r8
 80019f4:	4638      	mov	r0, r7
 80019f6:	4798      	blx	r3
  cliGui()->addChar('+');
 80019f8:	69e3      	ldr	r3, [r4, #28]
 80019fa:	202b      	movs	r0, #43	@ 0x2b
 80019fc:	4798      	blx	r3
  if (title_len == 0)
 80019fe:	f1bb 0f00 	cmp.w	fp, #0
 8001a02:	d00d      	beq.n	8001a20 <drawBox+0x58>
    for (col = 0; col < title_pos - 1; col++)
 8001a04:	2600      	movs	r6, #0
 8001a06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8001a0a:	429e      	cmp	r6, r3
 8001a0c:	d218      	bcs.n	8001a40 <drawBox+0x78>
      cliGui()->addChar('|');
 8001a0e:	69e3      	ldr	r3, [r4, #28]
 8001a10:	207c      	movs	r0, #124	@ 0x7c
 8001a12:	4798      	blx	r3
    for (col = 0; col < title_pos - 1; col++)
 8001a14:	3601      	adds	r6, #1
 8001a16:	b2f6      	uxtb	r6, r6
 8001a18:	e7f5      	b.n	8001a06 <drawBox+0x3e>
    title_pos = 0;
 8001a1a:	f04f 0a00 	mov.w	sl, #0
 8001a1e:	e7e4      	b.n	80019ea <drawBox+0x22>
    for (col = 0; col < w - 2; col++)
 8001a20:	2600      	movs	r6, #0
 8001a22:	1eab      	subs	r3, r5, #2
 8001a24:	429e      	cmp	r6, r3
 8001a26:	da05      	bge.n	8001a34 <drawBox+0x6c>
      cliGui()->addChar('-');
 8001a28:	69e3      	ldr	r3, [r4, #28]
 8001a2a:	202d      	movs	r0, #45	@ 0x2d
 8001a2c:	4798      	blx	r3
    for (col = 0; col < w - 2; col++)
 8001a2e:	3601      	adds	r6, #1
 8001a30:	b2f6      	uxtb	r6, r6
 8001a32:	e7f6      	b.n	8001a22 <drawBox+0x5a>
    cliGui()->addChar('+');
 8001a34:	69e3      	ldr	r3, [r4, #28]
 8001a36:	202b      	movs	r0, #43	@ 0x2b
 8001a38:	4798      	blx	r3
    for (col = 0; col < w - title_pos - title_len - 1; col++)
 8001a3a:	f04f 0a00 	mov.w	sl, #0
 8001a3e:	e02e      	b.n	8001a9e <drawBox+0xd6>
    cliGui()->addPrintf(title);  
 8001a40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001a42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001a44:	4798      	blx	r3
    for (col = 0; col < w - title_pos - title_len - 1; col++)
 8001a46:	2600      	movs	r6, #0
 8001a48:	eba5 030a 	sub.w	r3, r5, sl
 8001a4c:	eba3 030b 	sub.w	r3, r3, fp
 8001a50:	3b01      	subs	r3, #1
 8001a52:	429e      	cmp	r6, r3
 8001a54:	d205      	bcs.n	8001a62 <drawBox+0x9a>
      cliGui()->addChar('-');
 8001a56:	69e3      	ldr	r3, [r4, #28]
 8001a58:	202d      	movs	r0, #45	@ 0x2d
 8001a5a:	4798      	blx	r3
    for (col = 0; col < w - title_pos - title_len - 1; col++)
 8001a5c:	3601      	adds	r6, #1
 8001a5e:	b2f6      	uxtb	r6, r6
 8001a60:	e7f2      	b.n	8001a48 <drawBox+0x80>
    cliGui()->addChar('+');    
 8001a62:	69e3      	ldr	r3, [r4, #28]
 8001a64:	202b      	movs	r0, #43	@ 0x2b
 8001a66:	4798      	blx	r3
 8001a68:	e7e7      	b.n	8001a3a <drawBox+0x72>
    cliGui()->move(x, line + y + 1);
 8001a6a:	69a3      	ldr	r3, [r4, #24]
 8001a6c:	eb0a 0608 	add.w	r6, sl, r8
 8001a70:	b2f6      	uxtb	r6, r6
 8001a72:	3601      	adds	r6, #1
 8001a74:	b2f6      	uxtb	r6, r6
 8001a76:	4631      	mov	r1, r6
 8001a78:	4638      	mov	r0, r7
 8001a7a:	4798      	blx	r3
    cliGui()->addChar('|');
 8001a7c:	69e3      	ldr	r3, [r4, #28]
 8001a7e:	207c      	movs	r0, #124	@ 0x7c
 8001a80:	4798      	blx	r3
    cliGui()->move(x + w - 1, line + y + 1);
 8001a82:	69a3      	ldr	r3, [r4, #24]
 8001a84:	19e8      	adds	r0, r5, r7
 8001a86:	b2c0      	uxtb	r0, r0
 8001a88:	3801      	subs	r0, #1
 8001a8a:	4631      	mov	r1, r6
 8001a8c:	b2c0      	uxtb	r0, r0
 8001a8e:	4798      	blx	r3
    cliGui()->addChar('|');
 8001a90:	69e3      	ldr	r3, [r4, #28]
 8001a92:	207c      	movs	r0, #124	@ 0x7c
 8001a94:	4798      	blx	r3
  for (line = 0; line < h - 2; line++)
 8001a96:	f10a 0a01 	add.w	sl, sl, #1
 8001a9a:	fa5f fa8a 	uxtb.w	sl, sl
 8001a9e:	f1a9 0302 	sub.w	r3, r9, #2
 8001aa2:	459a      	cmp	sl, r3
 8001aa4:	dbe1      	blt.n	8001a6a <drawBox+0xa2>
  cliGui()->move (x, y + h - 1);
 8001aa6:	69a3      	ldr	r3, [r4, #24]
 8001aa8:	eb08 0109 	add.w	r1, r8, r9
 8001aac:	b2c9      	uxtb	r1, r1
 8001aae:	3901      	subs	r1, #1
 8001ab0:	b2c9      	uxtb	r1, r1
 8001ab2:	4638      	mov	r0, r7
 8001ab4:	4798      	blx	r3
  cliGui()->addChar('+');
 8001ab6:	69e3      	ldr	r3, [r4, #28]
 8001ab8:	202b      	movs	r0, #43	@ 0x2b
 8001aba:	4798      	blx	r3
  for (col = 0; col < w - 2; col++)
 8001abc:	2600      	movs	r6, #0
 8001abe:	e004      	b.n	8001aca <drawBox+0x102>
    cliGui()->addChar('-');
 8001ac0:	69e3      	ldr	r3, [r4, #28]
 8001ac2:	202d      	movs	r0, #45	@ 0x2d
 8001ac4:	4798      	blx	r3
  for (col = 0; col < w - 2; col++)
 8001ac6:	3601      	adds	r6, #1
 8001ac8:	b2f6      	uxtb	r6, r6
 8001aca:	1eab      	subs	r3, r5, #2
 8001acc:	429e      	cmp	r6, r3
 8001ace:	dbf7      	blt.n	8001ac0 <drawBox+0xf8>
  cliGui()->addChar('+');
 8001ad0:	69e3      	ldr	r3, [r4, #28]
 8001ad2:	202b      	movs	r0, #43	@ 0x2b
 8001ad4:	4798      	blx	r3
}
 8001ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ada <drawBoxLine>:
{
 8001ada:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ade:	4607      	mov	r7, r0
 8001ae0:	4688      	mov	r8, r1
 8001ae2:	4615      	mov	r5, r2
 8001ae4:	4699      	mov	r9, r3
  title_len = strlen(title);
 8001ae6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001ae8:	f7fe fc1c 	bl	8000324 <strlen>
  if (title_len > 0)
 8001aec:	4683      	mov	fp, r0
 8001aee:	b128      	cbz	r0, 8001afc <drawBoxLine+0x22>
    if (w > title_len)
 8001af0:	4285      	cmp	r5, r0
 8001af2:	d91b      	bls.n	8001b2c <drawBoxLine+0x52>
      title_pos = (w - title_len)/2;
 8001af4:	eba5 0a00 	sub.w	sl, r5, r0
 8001af8:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
  cliGui()->move(x, y);
 8001afc:	f7ff ff0a 	bl	8001914 <cliGui>
 8001b00:	4604      	mov	r4, r0
 8001b02:	6983      	ldr	r3, [r0, #24]
 8001b04:	4641      	mov	r1, r8
 8001b06:	4638      	mov	r0, r7
 8001b08:	4798      	blx	r3
  cliGui()->addChar(ACS_ULCORNER);
 8001b0a:	69e3      	ldr	r3, [r4, #28]
 8001b0c:	208c      	movs	r0, #140	@ 0x8c
 8001b0e:	4798      	blx	r3
  if (title_len == 0)
 8001b10:	f1bb 0f00 	cmp.w	fp, #0
 8001b14:	d00d      	beq.n	8001b32 <drawBoxLine+0x58>
    for (col = 0; col < title_pos - 1; col++)
 8001b16:	2600      	movs	r6, #0
 8001b18:	f10a 33ff 	add.w	r3, sl, #4294967295
 8001b1c:	429e      	cmp	r6, r3
 8001b1e:	d218      	bcs.n	8001b52 <drawBoxLine+0x78>
      cliGui()->addChar(ACS_HLINE);
 8001b20:	69e3      	ldr	r3, [r4, #28]
 8001b22:	2091      	movs	r0, #145	@ 0x91
 8001b24:	4798      	blx	r3
    for (col = 0; col < title_pos - 1; col++)
 8001b26:	3601      	adds	r6, #1
 8001b28:	b2f6      	uxtb	r6, r6
 8001b2a:	e7f5      	b.n	8001b18 <drawBoxLine+0x3e>
    title_pos = 0;
 8001b2c:	f04f 0a00 	mov.w	sl, #0
 8001b30:	e7e4      	b.n	8001afc <drawBoxLine+0x22>
    for (col = 0; col < w - 2; col++)
 8001b32:	2600      	movs	r6, #0
 8001b34:	1eab      	subs	r3, r5, #2
 8001b36:	429e      	cmp	r6, r3
 8001b38:	da05      	bge.n	8001b46 <drawBoxLine+0x6c>
      cliGui()->addChar(ACS_HLINE);
 8001b3a:	69e3      	ldr	r3, [r4, #28]
 8001b3c:	2091      	movs	r0, #145	@ 0x91
 8001b3e:	4798      	blx	r3
    for (col = 0; col < w - 2; col++)
 8001b40:	3601      	adds	r6, #1
 8001b42:	b2f6      	uxtb	r6, r6
 8001b44:	e7f6      	b.n	8001b34 <drawBoxLine+0x5a>
    cliGui()->addChar(ACS_URCORNER);
 8001b46:	69e3      	ldr	r3, [r4, #28]
 8001b48:	208b      	movs	r0, #139	@ 0x8b
 8001b4a:	4798      	blx	r3
    for (col = 0; col < w - title_pos - title_len - 1; col++)
 8001b4c:	f04f 0a00 	mov.w	sl, #0
 8001b50:	e02e      	b.n	8001bb0 <drawBoxLine+0xd6>
    cliGui()->addPrintf(title);  
 8001b52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001b54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001b56:	4798      	blx	r3
    for (col = 0; col < w - title_pos - title_len - 1; col++)
 8001b58:	2600      	movs	r6, #0
 8001b5a:	eba5 030a 	sub.w	r3, r5, sl
 8001b5e:	eba3 030b 	sub.w	r3, r3, fp
 8001b62:	3b01      	subs	r3, #1
 8001b64:	429e      	cmp	r6, r3
 8001b66:	d205      	bcs.n	8001b74 <drawBoxLine+0x9a>
      cliGui()->addChar(ACS_HLINE);
 8001b68:	69e3      	ldr	r3, [r4, #28]
 8001b6a:	2091      	movs	r0, #145	@ 0x91
 8001b6c:	4798      	blx	r3
    for (col = 0; col < w - title_pos - title_len - 1; col++)
 8001b6e:	3601      	adds	r6, #1
 8001b70:	b2f6      	uxtb	r6, r6
 8001b72:	e7f2      	b.n	8001b5a <drawBoxLine+0x80>
    cliGui()->addChar(ACS_URCORNER);    
 8001b74:	69e3      	ldr	r3, [r4, #28]
 8001b76:	208b      	movs	r0, #139	@ 0x8b
 8001b78:	4798      	blx	r3
 8001b7a:	e7e7      	b.n	8001b4c <drawBoxLine+0x72>
    cliGui()->move(x, line + y + 1);
 8001b7c:	69a3      	ldr	r3, [r4, #24]
 8001b7e:	eb0a 0608 	add.w	r6, sl, r8
 8001b82:	b2f6      	uxtb	r6, r6
 8001b84:	3601      	adds	r6, #1
 8001b86:	b2f6      	uxtb	r6, r6
 8001b88:	4631      	mov	r1, r6
 8001b8a:	4638      	mov	r0, r7
 8001b8c:	4798      	blx	r3
    cliGui()->addChar(ACS_VLINE);
 8001b8e:	69e3      	ldr	r3, [r4, #28]
 8001b90:	2098      	movs	r0, #152	@ 0x98
 8001b92:	4798      	blx	r3
    cliGui()->move(x + w - 1, line + y + 1);
 8001b94:	69a3      	ldr	r3, [r4, #24]
 8001b96:	19e8      	adds	r0, r5, r7
 8001b98:	b2c0      	uxtb	r0, r0
 8001b9a:	3801      	subs	r0, #1
 8001b9c:	4631      	mov	r1, r6
 8001b9e:	b2c0      	uxtb	r0, r0
 8001ba0:	4798      	blx	r3
    cliGui()->addChar(ACS_VLINE);
 8001ba2:	69e3      	ldr	r3, [r4, #28]
 8001ba4:	2098      	movs	r0, #152	@ 0x98
 8001ba6:	4798      	blx	r3
  for (line = 0; line < h - 2; line++)
 8001ba8:	f10a 0a01 	add.w	sl, sl, #1
 8001bac:	fa5f fa8a 	uxtb.w	sl, sl
 8001bb0:	f1a9 0302 	sub.w	r3, r9, #2
 8001bb4:	459a      	cmp	sl, r3
 8001bb6:	dbe1      	blt.n	8001b7c <drawBoxLine+0xa2>
  cliGui()->move (x, y + h - 1);
 8001bb8:	69a3      	ldr	r3, [r4, #24]
 8001bba:	eb08 0109 	add.w	r1, r8, r9
 8001bbe:	b2c9      	uxtb	r1, r1
 8001bc0:	3901      	subs	r1, #1
 8001bc2:	b2c9      	uxtb	r1, r1
 8001bc4:	4638      	mov	r0, r7
 8001bc6:	4798      	blx	r3
  cliGui()->addChar(ACS_LLCORNER);
 8001bc8:	69e3      	ldr	r3, [r4, #28]
 8001bca:	208d      	movs	r0, #141	@ 0x8d
 8001bcc:	4798      	blx	r3
  for (col = 0; col < w - 2; col++)
 8001bce:	2600      	movs	r6, #0
 8001bd0:	e004      	b.n	8001bdc <drawBoxLine+0x102>
    cliGui()->addChar(ACS_HLINE);
 8001bd2:	69e3      	ldr	r3, [r4, #28]
 8001bd4:	2091      	movs	r0, #145	@ 0x91
 8001bd6:	4798      	blx	r3
  for (col = 0; col < w - 2; col++)
 8001bd8:	3601      	adds	r6, #1
 8001bda:	b2f6      	uxtb	r6, r6
 8001bdc:	1eab      	subs	r3, r5, #2
 8001bde:	429e      	cmp	r6, r3
 8001be0:	dbf7      	blt.n	8001bd2 <drawBoxLine+0xf8>
  cliGui()->addChar(ACS_LRCORNER);
 8001be2:	69e3      	ldr	r3, [r4, #28]
 8001be4:	208a      	movs	r0, #138	@ 0x8a
 8001be6:	4798      	blx	r3
}
 8001be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bec <showBottomLine>:
{
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	4606      	mov	r6, r0
  cliGui()->move (0, cli_gui_h - 3);
 8001bf0:	f7ff fe90 	bl	8001914 <cliGui>
 8001bf4:	4605      	mov	r5, r0
 8001bf6:	6983      	ldr	r3, [r0, #24]
 8001bf8:	4a10      	ldr	r2, [pc, #64]	@ (8001c3c <showBottomLine+0x50>)
 8001bfa:	8811      	ldrh	r1, [r2, #0]
 8001bfc:	3903      	subs	r1, #3
 8001bfe:	b2c9      	uxtb	r1, r1
 8001c00:	2000      	movs	r0, #0
 8001c02:	4798      	blx	r3
  cliGui()->setAttr (A_BOLD | F_WHITE | B_BLUE);
 8001c04:	692b      	ldr	r3, [r5, #16]
 8001c06:	f645 0008 	movw	r0, #22536	@ 0x5808
 8001c0a:	4798      	blx	r3
  for (col = 0; col < cli_gui_w; col++)
 8001c0c:	2400      	movs	r4, #0
 8001c0e:	e004      	b.n	8001c1a <showBottomLine+0x2e>
    cliGui()->addChar(' ');
 8001c10:	69eb      	ldr	r3, [r5, #28]
 8001c12:	2020      	movs	r0, #32
 8001c14:	4798      	blx	r3
  for (col = 0; col < cli_gui_w; col++)
 8001c16:	3401      	adds	r4, #1
 8001c18:	b2e4      	uxtb	r4, r4
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <showBottomLine+0x54>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	42a3      	cmp	r3, r4
 8001c20:	d8f6      	bhi.n	8001c10 <showBottomLine+0x24>
  cliGui()->moveAddStr(2, cli_gui_h - 3, str);
 8001c22:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001c24:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <showBottomLine+0x50>)
 8001c26:	8811      	ldrh	r1, [r2, #0]
 8001c28:	3903      	subs	r1, #3
 8001c2a:	4632      	mov	r2, r6
 8001c2c:	b2c9      	uxtb	r1, r1
 8001c2e:	2002      	movs	r0, #2
 8001c30:	4798      	blx	r3
  cliGui()->setAttr(A_NORMAL);
 8001c32:	692b      	ldr	r3, [r5, #16]
 8001c34:	2000      	movs	r0, #0
 8001c36:	4798      	blx	r3
}
 8001c38:	bd70      	pop	{r4, r5, r6, pc}
 8001c3a:	bf00      	nop
 8001c3c:	24000070 	.word	0x24000070
 8001c40:	24000072 	.word	0x24000072

08001c44 <showTopLine>:
{
 8001c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c48:	4680      	mov	r8, r0
  str_len = strlen(str);
 8001c4a:	f7fe fb6b 	bl	8000324 <strlen>
  if (str_len > 0)
 8001c4e:	4607      	mov	r7, r0
 8001c50:	b130      	cbz	r0, 8001c60 <showTopLine+0x1c>
    if (getWidth() > str_len)
 8001c52:	f7ff fc67 	bl	8001524 <getWidth>
 8001c56:	42b8      	cmp	r0, r7
 8001c58:	d910      	bls.n	8001c7c <showTopLine+0x38>
      str_pos = (getWidth() - str_len)/2;
 8001c5a:	1bc0      	subs	r0, r0, r7
 8001c5c:	0846      	lsrs	r6, r0, #1
 8001c5e:	e000      	b.n	8001c62 <showTopLine+0x1e>
  uint32_t str_pos = 0;
 8001c60:	4606      	mov	r6, r0
  cliGui()->move(0, 1);
 8001c62:	f7ff fe57 	bl	8001914 <cliGui>
 8001c66:	4605      	mov	r5, r0
 8001c68:	6983      	ldr	r3, [r0, #24]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	4798      	blx	r3
  cliGui()->setAttr(A_BOLD | F_WHITE | B_BLUE);
 8001c70:	692b      	ldr	r3, [r5, #16]
 8001c72:	f645 0008 	movw	r0, #22536	@ 0x5808
 8001c76:	4798      	blx	r3
  for (col = 0; col < str_pos; col++)
 8001c78:	2400      	movs	r4, #0
 8001c7a:	e005      	b.n	8001c88 <showTopLine+0x44>
    str_pos = 0;
 8001c7c:	2600      	movs	r6, #0
 8001c7e:	e7f0      	b.n	8001c62 <showTopLine+0x1e>
    cliGui()->addChar(' ');
 8001c80:	69eb      	ldr	r3, [r5, #28]
 8001c82:	2020      	movs	r0, #32
 8001c84:	4798      	blx	r3
  for (col = 0; col < str_pos; col++)
 8001c86:	3401      	adds	r4, #1
 8001c88:	42b4      	cmp	r4, r6
 8001c8a:	d3f9      	bcc.n	8001c80 <showTopLine+0x3c>
  cliGui()->addStr(str);
 8001c8c:	6a2b      	ldr	r3, [r5, #32]
 8001c8e:	4640      	mov	r0, r8
 8001c90:	4798      	blx	r3
  for (col = 0; col < getWidth() - str_pos - str_len; col++)
 8001c92:	2400      	movs	r4, #0
 8001c94:	e003      	b.n	8001c9e <showTopLine+0x5a>
    cliGui()->addChar(' ');
 8001c96:	69eb      	ldr	r3, [r5, #28]
 8001c98:	2020      	movs	r0, #32
 8001c9a:	4798      	blx	r3
  for (col = 0; col < getWidth() - str_pos - str_len; col++)
 8001c9c:	3401      	adds	r4, #1
 8001c9e:	f7ff fc41 	bl	8001524 <getWidth>
 8001ca2:	1b83      	subs	r3, r0, r6
 8001ca4:	1bdb      	subs	r3, r3, r7
 8001ca6:	42a3      	cmp	r3, r4
 8001ca8:	d8f5      	bhi.n	8001c96 <showTopLine+0x52>
  cliGui()->setAttr(A_NORMAL);
 8001caa:	692b      	ldr	r3, [r5, #16]
 8001cac:	2000      	movs	r0, #0
 8001cae:	4798      	blx	r3
}
 8001cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001cb4 <moveAddStr>:
{
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	4606      	mov	r6, r0
 8001cb8:	460f      	mov	r7, r1
 8001cba:	4615      	mov	r5, r2
  cliGui()->move(x, y);
 8001cbc:	f7ff fe2a 	bl	8001914 <cliGui>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	6983      	ldr	r3, [r0, #24]
 8001cc4:	4639      	mov	r1, r7
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	4798      	blx	r3
  cliGui()->addStr(p_str);
 8001cca:	6a23      	ldr	r3, [r4, #32]
 8001ccc:	4628      	mov	r0, r5
 8001cce:	4798      	blx	r3
}
 8001cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cd4 <movePrintf>:
{
 8001cd4:	b40c      	push	{r2, r3}
 8001cd6:	b570      	push	{r4, r5, r6, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460d      	mov	r5, r1
 8001cde:	ab06      	add	r3, sp, #24
 8001ce0:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start (arg, fmt);
 8001ce4:	9301      	str	r3, [sp, #4]
  vsnprintf(line_buf, 1024, fmt, arg);
 8001ce6:	4e08      	ldr	r6, [pc, #32]	@ (8001d08 <movePrintf+0x34>)
 8001ce8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cec:	4630      	mov	r0, r6
 8001cee:	f024 f87d 	bl	8025dec <vsniprintf>
  moveAddStr(x, y, line_buf);
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff ffdc 	bl	8001cb4 <moveAddStr>
}
 8001cfc:	b002      	add	sp, #8
 8001cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d02:	b002      	add	sp, #8
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	240009d8 	.word	0x240009d8

08001d0c <closeScreen>:
{  
 8001d0c:	b510      	push	{r4, lr}
  cliGui()->setAttr(A_NORMAL);
 8001d0e:	f7ff fe01 	bl	8001914 <cliGui>
 8001d12:	4604      	mov	r4, r0
 8001d14:	6903      	ldr	r3, [r0, #16]
 8001d16:	2000      	movs	r0, #0
 8001d18:	4798      	blx	r3
  cliGui()->showCursor(true);
 8001d1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	4798      	blx	r3
  cliGui()->addPrintf("close");
 8001d20:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d22:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <closeScreen+0x20>)
 8001d24:	4798      	blx	r3
  cliGui()->clear();
 8001d26:	6963      	ldr	r3, [r4, #20]
 8001d28:	4798      	blx	r3
}
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	080280ac 	.word	0x080280ac

08001d30 <initScreen>:
{
 8001d30:	b510      	push	{r4, lr}
  cli_gui_w = w;
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <initScreen+0x38>)
 8001d34:	8018      	strh	r0, [r3, #0]
  cli_gui_h = h;
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <initScreen+0x3c>)
 8001d38:	8019      	strh	r1, [r3, #0]
  cliPrintf(SEQ_LOAD_G1);
 8001d3a:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <initScreen+0x40>)
 8001d3c:	f7ff f8e2 	bl	8000f04 <cliPrintf>
  cliGui()->showCursor(false);
 8001d40:	f7ff fde8 	bl	8001914 <cliGui>
 8001d44:	4604      	mov	r4, r0
 8001d46:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001d48:	2000      	movs	r0, #0
 8001d4a:	4798      	blx	r3
  cliGui()->setAttr(A_NORMAL);
 8001d4c:	6923      	ldr	r3, [r4, #16]
 8001d4e:	2000      	movs	r0, #0
 8001d50:	4798      	blx	r3
  cliGui()->move(0, 0);
 8001d52:	69a3      	ldr	r3, [r4, #24]
 8001d54:	2100      	movs	r1, #0
 8001d56:	4608      	mov	r0, r1
 8001d58:	4798      	blx	r3
  cliGui()->clear();
 8001d5a:	6963      	ldr	r3, [r4, #20]
 8001d5c:	4798      	blx	r3
  cli_gui_is_init = true;
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <initScreen+0x44>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
}
 8001d64:	bd10      	pop	{r4, pc}
 8001d66:	bf00      	nop
 8001d68:	24000072 	.word	0x24000072
 8001d6c:	24000070 	.word	0x24000070
 8001d70:	080280b4 	.word	0x080280b4
 8001d74:	24000dd9 	.word	0x24000dd9

08001d78 <buttonGetPin>:

bool buttonGetPin(uint8_t ch)
{
  bool ret = false;

  if (ch >= BUTTON_MAX_CH)
 8001d78:	b108      	cbz	r0, 8001d7e <buttonGetPin+0x6>
  {
    return false;
 8001d7a:	2000      	movs	r0, #0
  {
    ret = true;
  }

  return ret;
}
 8001d7c:	4770      	bx	lr
{
 8001d7e:	b570      	push	{r4, r5, r6, lr}
 8001d80:	4604      	mov	r4, r0
  if (HAL_GPIO_ReadPin(button_pin[ch].port, button_pin[ch].pin) == button_pin[ch].on_state)
 8001d82:	4d0a      	ldr	r5, [pc, #40]	@ (8001dac <buttonGetPin+0x34>)
 8001d84:	0046      	lsls	r6, r0, #1
 8001d86:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001d8a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8001d8e:	8891      	ldrh	r1, [r2, #4]
 8001d90:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8001d94:	f007 fe24 	bl	80099e0 <HAL_GPIO_ReadPin>
 8001d98:	4426      	add	r6, r4
 8001d9a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8001d9e:	7a2b      	ldrb	r3, [r5, #8]
 8001da0:	4298      	cmp	r0, r3
 8001da2:	d001      	beq.n	8001da8 <buttonGetPin+0x30>
  bool ret = false;
 8001da4:	2000      	movs	r0, #0
}
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
    ret = true;
 8001da8:	2001      	movs	r0, #1
 8001daa:	e7fc      	b.n	8001da6 <buttonGetPin+0x2e>
 8001dac:	0802817c 	.word	0x0802817c

08001db0 <buttonISR>:
{
 8001db0:	b538      	push	{r3, r4, r5, lr}
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001db2:	2400      	movs	r4, #0
 8001db4:	e028      	b.n	8001e08 <buttonISR+0x58>
    if (buttonGetPin(i) == true)
 8001db6:	b2e0      	uxtb	r0, r4
 8001db8:	f7ff ffde 	bl	8001d78 <buttonGetPin>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d06d      	beq.n	8001e9c <buttonISR+0xec>
      if (button_tbl[i].pressed == false)
 8001dc0:	232c      	movs	r3, #44	@ 0x2c
 8001dc2:	fb04 f303 	mul.w	r3, r4, r3
 8001dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8001f00 <buttonISR+0x150>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	b303      	cbz	r3, 8001e0e <buttonISR+0x5e>
      button_tbl[i].pressed = true;
 8001dcc:	494c      	ldr	r1, [pc, #304]	@ (8001f00 <buttonISR+0x150>)
 8001dce:	232c      	movs	r3, #44	@ 0x2c
 8001dd0:	fb04 f303 	mul.w	r3, r4, r3
 8001dd4:	18ca      	adds	r2, r1, r3
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	54c8      	strb	r0, [r1, r3]
      button_tbl[i].pressed_cnt++;
 8001dda:	8853      	ldrh	r3, [r2, #2]
 8001ddc:	4403      	add	r3, r0
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	8053      	strh	r3, [r2, #2]
      if (button_tbl[i].repeat_cnt == 0)
 8001de2:	69d1      	ldr	r1, [r2, #28]
 8001de4:	bb79      	cbnz	r1, 8001e46 <buttonISR+0x96>
        repeat_time = button_tbl[i].repeat_time_detect;
 8001de6:	4a46      	ldr	r2, [pc, #280]	@ (8001f00 <buttonISR+0x150>)
 8001de8:	202c      	movs	r0, #44	@ 0x2c
 8001dea:	fb00 2204 	mla	r2, r0, r4, r2
 8001dee:	6a12      	ldr	r2, [r2, #32]
      if (button_tbl[i].pressed_cnt >= repeat_time)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d236      	bcs.n	8001e62 <buttonISR+0xb2>
      button_tbl[i].pressed_end_time = millis();
 8001df4:	f7fe fe86 	bl	8000b04 <millis>
 8001df8:	4b41      	ldr	r3, [pc, #260]	@ (8001f00 <buttonISR+0x150>)
 8001dfa:	222c      	movs	r2, #44	@ 0x2c
 8001dfc:	fb02 3304 	mla	r3, r2, r4, r3
 8001e00:	6098      	str	r0, [r3, #8]
      button_tbl[i].released = false;
 8001e02:	2200      	movs	r2, #0
 8001e04:	731a      	strb	r2, [r3, #12]
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001e06:	3401      	adds	r4, #1
 8001e08:	2c00      	cmp	r4, #0
 8001e0a:	ddd4      	ble.n	8001db6 <buttonISR+0x6>
}
 8001e0c:	bd38      	pop	{r3, r4, r5, pc}
        button_tbl[i].pressed_event = true;
 8001e0e:	232c      	movs	r3, #44	@ 0x2c
 8001e10:	fb03 2504 	mla	r5, r3, r4, r2
 8001e14:	2301      	movs	r3, #1
 8001e16:	706b      	strb	r3, [r5, #1]
        button_tbl[i].pressed_start_time = millis();
 8001e18:	f7fe fe74 	bl	8000b04 <millis>
 8001e1c:	6068      	str	r0, [r5, #4]
        for (int e_i=0; e_i<event_cnt; e_i++)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e003      	b.n	8001e2a <buttonISR+0x7a>
            event_tbl[e_i]->pressed_event[i] = false;
 8001e22:	4423      	add	r3, r4
 8001e24:	2100      	movs	r1, #0
 8001e26:	70d9      	strb	r1, [r3, #3]
        for (int e_i=0; e_i<event_cnt; e_i++)
 8001e28:	3201      	adds	r2, #1
 8001e2a:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <buttonISR+0x154>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	ddcc      	ble.n	8001dcc <buttonISR+0x1c>
          if (event_tbl[e_i]->level <= event_level)
 8001e32:	4b35      	ldr	r3, [pc, #212]	@ (8001f08 <buttonISR+0x158>)
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	7859      	ldrb	r1, [r3, #1]
 8001e3a:	2905      	cmp	r1, #5
 8001e3c:	d8f1      	bhi.n	8001e22 <buttonISR+0x72>
            event_tbl[e_i]->pressed_event[i] = true;
 8001e3e:	4423      	add	r3, r4
 8001e40:	2101      	movs	r1, #1
 8001e42:	70d9      	strb	r1, [r3, #3]
 8001e44:	e7f0      	b.n	8001e28 <buttonISR+0x78>
      else if (button_tbl[i].repeat_cnt == 1)
 8001e46:	2901      	cmp	r1, #1
 8001e48:	d005      	beq.n	8001e56 <buttonISR+0xa6>
        repeat_time = button_tbl[i].repeat_time;
 8001e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f00 <buttonISR+0x150>)
 8001e4c:	202c      	movs	r0, #44	@ 0x2c
 8001e4e:	fb00 2204 	mla	r2, r0, r4, r2
 8001e52:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e54:	e7cc      	b.n	8001df0 <buttonISR+0x40>
        repeat_time = button_tbl[i].repeat_time_delay;
 8001e56:	4a2a      	ldr	r2, [pc, #168]	@ (8001f00 <buttonISR+0x150>)
 8001e58:	202c      	movs	r0, #44	@ 0x2c
 8001e5a:	fb00 2204 	mla	r2, r0, r4, r2
 8001e5e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e60:	e7c6      	b.n	8001df0 <buttonISR+0x40>
        button_tbl[i].pressed_cnt = 0;
 8001e62:	4b27      	ldr	r3, [pc, #156]	@ (8001f00 <buttonISR+0x150>)
 8001e64:	222c      	movs	r2, #44	@ 0x2c
 8001e66:	fb02 3304 	mla	r3, r2, r4, r3
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	805a      	strh	r2, [r3, #2]
        button_tbl[i].repeat_cnt++;
 8001e6e:	3101      	adds	r1, #1
 8001e70:	61d9      	str	r1, [r3, #28]
        button_tbl[i].repeat_update = true;
 8001e72:	2101      	movs	r1, #1
 8001e74:	7619      	strb	r1, [r3, #24]
        for (int e_i=0; e_i<BUTTON_EVENT_MAX; e_i++)
 8001e76:	e003      	b.n	8001e80 <buttonISR+0xd0>
              event_tbl[e_i]->repeat_event[i] = false;
 8001e78:	4423      	add	r3, r4
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	7159      	strb	r1, [r3, #5]
        for (int e_i=0; e_i<BUTTON_EVENT_MAX; e_i++)
 8001e7e:	3201      	adds	r2, #1
 8001e80:	2a07      	cmp	r2, #7
 8001e82:	dcb7      	bgt.n	8001df4 <buttonISR+0x44>
          if (event_tbl[e_i] != NULL)
 8001e84:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <buttonISR+0x158>)
 8001e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f7      	beq.n	8001e7e <buttonISR+0xce>
            if (event_tbl[e_i]->level <= event_level)
 8001e8e:	7859      	ldrb	r1, [r3, #1]
 8001e90:	2905      	cmp	r1, #5
 8001e92:	d8f1      	bhi.n	8001e78 <buttonISR+0xc8>
              event_tbl[e_i]->repeat_event[i] = true;
 8001e94:	4423      	add	r3, r4
 8001e96:	2101      	movs	r1, #1
 8001e98:	7159      	strb	r1, [r3, #5]
 8001e9a:	e7f0      	b.n	8001e7e <buttonISR+0xce>
      if (button_tbl[i].pressed == true)
 8001e9c:	232c      	movs	r3, #44	@ 0x2c
 8001e9e:	fb04 f303 	mul.w	r3, r4, r3
 8001ea2:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <buttonISR+0x150>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	b973      	cbnz	r3, 8001ec6 <buttonISR+0x116>
      button_tbl[i].pressed  = false;
 8001ea8:	4915      	ldr	r1, [pc, #84]	@ (8001f00 <buttonISR+0x150>)
 8001eaa:	232c      	movs	r3, #44	@ 0x2c
 8001eac:	fb04 f303 	mul.w	r3, r4, r3
 8001eb0:	18cd      	adds	r5, r1, r3
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	54ca      	strb	r2, [r1, r3]
      button_tbl[i].released = true;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	732b      	strb	r3, [r5, #12]
      button_tbl[i].repeat_cnt = 0;
 8001eba:	61ea      	str	r2, [r5, #28]
      button_tbl[i].repeat_update = false;
 8001ebc:	762a      	strb	r2, [r5, #24]
      button_tbl[i].released_end_time = millis();
 8001ebe:	f7fe fe21 	bl	8000b04 <millis>
 8001ec2:	6168      	str	r0, [r5, #20]
 8001ec4:	e79f      	b.n	8001e06 <buttonISR+0x56>
        button_tbl[i].released_event = true;
 8001ec6:	232c      	movs	r3, #44	@ 0x2c
 8001ec8:	fb03 2504 	mla	r5, r3, r4, r2
 8001ecc:	2301      	movs	r3, #1
 8001ece:	736b      	strb	r3, [r5, #13]
        button_tbl[i].released_start_time = millis();
 8001ed0:	f7fe fe18 	bl	8000b04 <millis>
 8001ed4:	6128      	str	r0, [r5, #16]
        for (int e_i=0; e_i<BUTTON_EVENT_MAX; e_i++)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	e003      	b.n	8001ee2 <buttonISR+0x132>
              event_tbl[e_i]->released_event[i] = false;
 8001eda:	4423      	add	r3, r4
 8001edc:	2100      	movs	r1, #0
 8001ede:	7119      	strb	r1, [r3, #4]
        for (int e_i=0; e_i<BUTTON_EVENT_MAX; e_i++)
 8001ee0:	3201      	adds	r2, #1
 8001ee2:	2a07      	cmp	r2, #7
 8001ee4:	dce0      	bgt.n	8001ea8 <buttonISR+0xf8>
          if (event_tbl[e_i] != NULL)
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <buttonISR+0x158>)
 8001ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f7      	beq.n	8001ee0 <buttonISR+0x130>
            if (event_tbl[e_i]->level <= event_level)
 8001ef0:	7859      	ldrb	r1, [r3, #1]
 8001ef2:	2905      	cmp	r1, #5
 8001ef4:	d8f1      	bhi.n	8001eda <buttonISR+0x12a>
              event_tbl[e_i]->released_event[i] = true;
 8001ef6:	4423      	add	r3, r4
 8001ef8:	2101      	movs	r1, #1
 8001efa:	7119      	strb	r1, [r3, #4]
 8001efc:	e7f0      	b.n	8001ee0 <buttonISR+0x130>
 8001efe:	bf00      	nop
 8001f00:	24000e00 	.word	0x24000e00
 8001f04:	24000dfc 	.word	0x24000dfc
 8001f08:	24000ddc 	.word	0x24000ddc

08001f0c <buttonInit>:
{
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	2400      	movs	r4, #0
 8001f12:	9403      	str	r4, [sp, #12]
 8001f14:	9404      	str	r4, [sp, #16]
 8001f16:	9405      	str	r4, [sp, #20]
 8001f18:	9406      	str	r4, [sp, #24]
 8001f1a:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <buttonInit+0xc4>)
 8001f1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f26:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f32:	9302      	str	r3, [sp, #8]
 8001f34:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	9305      	str	r3, [sp, #20]
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f3a:	e00c      	b.n	8001f56 <buttonInit+0x4a>
    GPIO_InitStruct.Pin = button_pin[i].pin;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <buttonInit+0xc8>)
 8001f3e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001f42:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8001f46:	6849      	ldr	r1, [r1, #4]
 8001f48:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(button_pin[i].port, &GPIO_InitStruct);
 8001f4a:	a903      	add	r1, sp, #12
 8001f4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001f50:	f007 fb9a 	bl	8009688 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f54:	3401      	adds	r4, #1
 8001f56:	2c00      	cmp	r4, #0
 8001f58:	ddf0      	ble.n	8001f3c <buttonInit+0x30>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2900      	cmp	r1, #0
 8001f5e:	dd01      	ble.n	8001f64 <buttonInit+0x58>
  for (int i=0; i<BUTTON_EVENT_MAX; i++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	e018      	b.n	8001f96 <buttonInit+0x8a>
    button_tbl[i].pressed_cnt    = 0;
 8001f64:	4c1c      	ldr	r4, [pc, #112]	@ (8001fd8 <buttonInit+0xcc>)
 8001f66:	202c      	movs	r0, #44	@ 0x2c
 8001f68:	fb01 f000 	mul.w	r0, r1, r0
 8001f6c:	1823      	adds	r3, r4, r0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	805a      	strh	r2, [r3, #2]
    button_tbl[i].pressed        = 0;
 8001f72:	5422      	strb	r2, [r4, r0]
    button_tbl[i].released       = 0;
 8001f74:	731a      	strb	r2, [r3, #12]
    button_tbl[i].released_event = 0;
 8001f76:	735a      	strb	r2, [r3, #13]
    button_tbl[i].repeat_cnt     = 0;
 8001f78:	61da      	str	r2, [r3, #28]
    button_tbl[i].repeat_time_detect = 60;
 8001f7a:	203c      	movs	r0, #60	@ 0x3c
 8001f7c:	6218      	str	r0, [r3, #32]
    button_tbl[i].repeat_time_delay  = 250;
 8001f7e:	20fa      	movs	r0, #250	@ 0xfa
 8001f80:	6258      	str	r0, [r3, #36]	@ 0x24
    button_tbl[i].repeat_time        = 200;
 8001f82:	20c8      	movs	r0, #200	@ 0xc8
 8001f84:	6298      	str	r0, [r3, #40]	@ 0x28
    button_tbl[i].repeat_update = false;
 8001f86:	761a      	strb	r2, [r3, #24]
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f88:	3101      	adds	r1, #1
 8001f8a:	e7e7      	b.n	8001f5c <buttonInit+0x50>
    event_tbl[i] = NULL;
 8001f8c:	4a13      	ldr	r2, [pc, #76]	@ (8001fdc <buttonInit+0xd0>)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<BUTTON_EVENT_MAX; i++)
 8001f94:	3301      	adds	r3, #1
 8001f96:	2b07      	cmp	r3, #7
 8001f98:	ddf8      	ble.n	8001f8c <buttonInit+0x80>
  timer_ch = swtimerGetHandle();
 8001f9a:	f003 f807 	bl	8004fac <swtimerGetHandle>
  if (timer_ch >= 0)
 8001f9e:	1e04      	subs	r4, r0, #0
 8001fa0:	db11      	blt.n	8001fc6 <buttonInit+0xba>
    swtimerSet(timer_ch, 10, LOOP_TIME, buttonISR, NULL);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <buttonInit+0xd4>)
 8001fa8:	2202      	movs	r2, #2
 8001faa:	210a      	movs	r1, #10
 8001fac:	4620      	mov	r0, r4
 8001fae:	f002 ffd1 	bl	8004f54 <swtimerSet>
    swtimerStart(timer_ch);
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f002 ffe8 	bl	8004f88 <swtimerStart>
  cliAdd("button", cliButton);
 8001fb8:	490a      	ldr	r1, [pc, #40]	@ (8001fe4 <buttonInit+0xd8>)
 8001fba:	480b      	ldr	r0, [pc, #44]	@ (8001fe8 <buttonInit+0xdc>)
 8001fbc:	f7ff fa50 	bl	8001460 <cliAdd>
}
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	b008      	add	sp, #32
 8001fc4:	bd10      	pop	{r4, pc}
    logPrintf("[NG] buttonInit()\n     swtimerGetHandle()\n");
 8001fc6:	4809      	ldr	r0, [pc, #36]	@ (8001fec <buttonInit+0xe0>)
 8001fc8:	f001 f9fe 	bl	80033c8 <logPrintf>
 8001fcc:	e7f4      	b.n	8001fb8 <buttonInit+0xac>
 8001fce:	bf00      	nop
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	0802817c 	.word	0x0802817c
 8001fd8:	24000e00 	.word	0x24000e00
 8001fdc:	24000ddc 	.word	0x24000ddc
 8001fe0:	08001db1 	.word	0x08001db1
 8001fe4:	08002059 	.word	0x08002059
 8001fe8:	080280e4 	.word	0x080280e4
 8001fec:	080280b8 	.word	0x080280b8

08001ff0 <buttonGetPressed>:
  is_enable = enable;
}

bool buttonGetPressed(uint8_t ch)
{
  if (ch >= BUTTON_MAX_CH || is_enable == false)
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b940      	cbnz	r0, 8002006 <buttonGetPressed+0x16>
 8001ff4:	4a05      	ldr	r2, [pc, #20]	@ (800200c <buttonGetPressed+0x1c>)
 8001ff6:	7810      	ldrb	r0, [r2, #0]
 8001ff8:	b130      	cbz	r0, 8002008 <buttonGetPressed+0x18>
  {
    return false;
  }

  return button_tbl[ch].pressed;
 8001ffa:	222c      	movs	r2, #44	@ 0x2c
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	4a03      	ldr	r2, [pc, #12]	@ (8002010 <buttonGetPressed+0x20>)
 8002002:	5cd0      	ldrb	r0, [r2, r3]
 8002004:	4770      	bx	lr
    return false;
 8002006:	2000      	movs	r0, #0
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	24000074 	.word	0x24000074
 8002010:	24000e00 	.word	0x24000e00

08002014 <buttonGetName>:
  return ret;
}

const char *buttonGetName(uint8_t ch)
{
  ch = constrain(ch, 0, BUTTON_MAX_CH);
 8002014:	2801      	cmp	r0, #1
 8002016:	bf28      	it	cs
 8002018:	2001      	movcs	r0, #1

  return button_name[ch];
}
 800201a:	4b02      	ldr	r3, [pc, #8]	@ (8002024 <buttonGetName+0x10>)
 800201c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	08028174 	.word	0x08028174

08002028 <buttonGetPressedTime>:
uint32_t buttonGetPressedTime(uint8_t ch)
{
  volatile uint32_t ret;


  if (ch >= BUTTON_MAX_CH || is_enable == false) return 0;
 8002028:	b970      	cbnz	r0, 8002048 <buttonGetPressedTime+0x20>
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <buttonGetPressedTime+0x28>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b16b      	cbz	r3, 800204c <buttonGetPressedTime+0x24>
{
 8002030:	b082      	sub	sp, #8


  ret = button_tbl[ch].pressed_end_time - button_tbl[ch].pressed_start_time;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <buttonGetPressedTime+0x2c>)
 8002034:	212c      	movs	r1, #44	@ 0x2c
 8002036:	fb01 3300 	mla	r3, r1, r0, r3
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	9301      	str	r3, [sp, #4]

  return ret;
 8002042:	9801      	ldr	r0, [sp, #4]
}
 8002044:	b002      	add	sp, #8
 8002046:	4770      	bx	lr
  if (ch >= BUTTON_MAX_CH || is_enable == false) return 0;
 8002048:	2000      	movs	r0, #0
 800204a:	4770      	bx	lr
 800204c:	2000      	movs	r0, #0
}
 800204e:	4770      	bx	lr
 8002050:	24000074 	.word	0x24000074
 8002054:	24000e00 	.word	0x24000e00

08002058 <cliButton>:
  return ret;
}

#ifdef _USE_HW_CLI
void cliButton(cli_args_t *args)
{
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	4605      	mov	r5, r0
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info"))
 800205c:	8803      	ldrh	r3, [r0, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d009      	beq.n	8002076 <cliButton+0x1e>
  bool ret = false;
 8002062:	2400      	movs	r4, #0
      cliPrintf("%-12s pin %d\n", buttonGetName(i), button_pin[i].pin);
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "show"))
 8002064:	882b      	ldrh	r3, [r5, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d01f      	beq.n	80020aa <cliButton+0x52>
      cliPrintf("\r");
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "time"))
 800206a:	882b      	ldrh	r3, [r5, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d03a      	beq.n	80020e6 <cliButton+0x8e>
      delay(10);
    }
    ret = true;
  }

  if (ret == false)
 8002070:	2c00      	cmp	r4, #0
 8002072:	d062      	beq.n	800213a <cliButton+0xe2>
  {
    cliPrintf("button info\n");
    cliPrintf("button show\n");
    cliPrintf("button time\n", BUTTON_MAX_CH);
  }
}
 8002074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 8002076:	6943      	ldr	r3, [r0, #20]
 8002078:	4935      	ldr	r1, [pc, #212]	@ (8002150 <cliButton+0xf8>)
 800207a:	2000      	movs	r0, #0
 800207c:	4798      	blx	r3
 800207e:	4604      	mov	r4, r0
 8002080:	2800      	cmp	r0, #0
 8002082:	d0ef      	beq.n	8002064 <cliButton+0xc>
    for (int i=0; i<BUTTON_MAX_CH; i++)
 8002084:	2600      	movs	r6, #0
 8002086:	e00d      	b.n	80020a4 <cliButton+0x4c>
      cliPrintf("%-12s pin %d\n", buttonGetName(i), button_pin[i].pin);
 8002088:	b2f0      	uxtb	r0, r6
 800208a:	f7ff ffc3 	bl	8002014 <buttonGetName>
 800208e:	4601      	mov	r1, r0
 8002090:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8002094:	4b2f      	ldr	r3, [pc, #188]	@ (8002154 <cliButton+0xfc>)
 8002096:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	482e      	ldr	r0, [pc, #184]	@ (8002158 <cliButton+0x100>)
 800209e:	f7fe ff31 	bl	8000f04 <cliPrintf>
    for (int i=0; i<BUTTON_MAX_CH; i++)
 80020a2:	3601      	adds	r6, #1
 80020a4:	2e00      	cmp	r6, #0
 80020a6:	ddef      	ble.n	8002088 <cliButton+0x30>
 80020a8:	e7dc      	b.n	8002064 <cliButton+0xc>
  if (args->argc == 1 && args->isStr(0, "show"))
 80020aa:	696b      	ldr	r3, [r5, #20]
 80020ac:	492b      	ldr	r1, [pc, #172]	@ (800215c <cliButton+0x104>)
 80020ae:	2000      	movs	r0, #0
 80020b0:	4798      	blx	r3
 80020b2:	4606      	mov	r6, r0
 80020b4:	b980      	cbnz	r0, 80020d8 <cliButton+0x80>
 80020b6:	e7d8      	b.n	800206a <cliButton+0x12>
        cliPrintf("%d", buttonGetPressed(i));
 80020b8:	b2e0      	uxtb	r0, r4
 80020ba:	f7ff ff99 	bl	8001ff0 <buttonGetPressed>
 80020be:	4601      	mov	r1, r0
 80020c0:	4827      	ldr	r0, [pc, #156]	@ (8002160 <cliButton+0x108>)
 80020c2:	f7fe ff1f 	bl	8000f04 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80020c6:	3401      	adds	r4, #1
 80020c8:	2c00      	cmp	r4, #0
 80020ca:	ddf5      	ble.n	80020b8 <cliButton+0x60>
      delay(50);
 80020cc:	2032      	movs	r0, #50	@ 0x32
 80020ce:	f7fe fd15 	bl	8000afc <delay>
      cliPrintf("\r");
 80020d2:	4824      	ldr	r0, [pc, #144]	@ (8002164 <cliButton+0x10c>)
 80020d4:	f7fe ff16 	bl	8000f04 <cliPrintf>
    while(cliKeepLoop())
 80020d8:	f7ff f9b6 	bl	8001448 <cliKeepLoop>
 80020dc:	b108      	cbz	r0, 80020e2 <cliButton+0x8a>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80020de:	2400      	movs	r4, #0
 80020e0:	e7f2      	b.n	80020c8 <cliButton+0x70>
    ret = true;
 80020e2:	4634      	mov	r4, r6
 80020e4:	e7c1      	b.n	800206a <cliButton+0x12>
  if (args->argc == 1 && args->isStr(0, "time"))
 80020e6:	696b      	ldr	r3, [r5, #20]
 80020e8:	491f      	ldr	r1, [pc, #124]	@ (8002168 <cliButton+0x110>)
 80020ea:	2000      	movs	r0, #0
 80020ec:	4798      	blx	r3
 80020ee:	4607      	mov	r7, r0
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d0bd      	beq.n	8002070 <cliButton+0x18>
    ch = (uint8_t)args->getData(1);
 80020f4:	68ab      	ldr	r3, [r5, #8]
 80020f6:	2001      	movs	r0, #1
 80020f8:	4798      	blx	r3
    while(cliKeepLoop())
 80020fa:	e00a      	b.n	8002112 <cliButton+0xba>
        if(buttonGetPressed(i))
 80020fc:	b2e5      	uxtb	r5, r4
 80020fe:	4628      	mov	r0, r5
 8002100:	f7ff ff76 	bl	8001ff0 <buttonGetPressed>
 8002104:	b950      	cbnz	r0, 800211c <cliButton+0xc4>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8002106:	3401      	adds	r4, #1
 8002108:	2c00      	cmp	r4, #0
 800210a:	ddf7      	ble.n	80020fc <cliButton+0xa4>
      delay(10);
 800210c:	200a      	movs	r0, #10
 800210e:	f7fe fcf5 	bl	8000afc <delay>
    while(cliKeepLoop())
 8002112:	f7ff f999 	bl	8001448 <cliKeepLoop>
 8002116:	b170      	cbz	r0, 8002136 <cliButton+0xde>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8002118:	2400      	movs	r4, #0
 800211a:	e7f5      	b.n	8002108 <cliButton+0xb0>
          cliPrintf("%-12s, Time :  %d ms\n", buttonGetName(i), buttonGetPressedTime(i));
 800211c:	4628      	mov	r0, r5
 800211e:	f7ff ff79 	bl	8002014 <buttonGetName>
 8002122:	4606      	mov	r6, r0
 8002124:	4628      	mov	r0, r5
 8002126:	f7ff ff7f 	bl	8002028 <buttonGetPressedTime>
 800212a:	4602      	mov	r2, r0
 800212c:	4631      	mov	r1, r6
 800212e:	480f      	ldr	r0, [pc, #60]	@ (800216c <cliButton+0x114>)
 8002130:	f7fe fee8 	bl	8000f04 <cliPrintf>
 8002134:	e7e7      	b.n	8002106 <cliButton+0xae>
    ret = true;
 8002136:	463c      	mov	r4, r7
 8002138:	e79a      	b.n	8002070 <cliButton+0x18>
    cliPrintf("button info\n");
 800213a:	480d      	ldr	r0, [pc, #52]	@ (8002170 <cliButton+0x118>)
 800213c:	f7fe fee2 	bl	8000f04 <cliPrintf>
    cliPrintf("button show\n");
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <cliButton+0x11c>)
 8002142:	f7fe fedf 	bl	8000f04 <cliPrintf>
    cliPrintf("button time\n", BUTTON_MAX_CH);
 8002146:	2101      	movs	r1, #1
 8002148:	480b      	ldr	r0, [pc, #44]	@ (8002178 <cliButton+0x120>)
 800214a:	f7fe fedb 	bl	8000f04 <cliPrintf>
}
 800214e:	e791      	b.n	8002074 <cliButton+0x1c>
 8002150:	080280ec 	.word	0x080280ec
 8002154:	0802817c 	.word	0x0802817c
 8002158:	080280f4 	.word	0x080280f4
 800215c:	08028104 	.word	0x08028104
 8002160:	0802810c 	.word	0x0802810c
 8002164:	08028110 	.word	0x08028110
 8002168:	08028114 	.word	0x08028114
 800216c:	0802811c 	.word	0x0802811c
 8002170:	08028134 	.word	0x08028134
 8002174:	08028144 	.word	0x08028144
 8002178:	08028154 	.word	0x08028154

0800217c <eepromIsInit>:
}

bool eepromIsInit(void)
{
  return is_init;
}
 800217c:	4b01      	ldr	r3, [pc, #4]	@ (8002184 <eepromIsInit+0x8>)
 800217e:	7818      	ldrb	r0, [r3, #0]
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	24000e2c 	.word	0x24000e2c

08002188 <eepromValid>:
bool eepromValid(uint32_t addr)
{
  uint8_t data;
  bool ret;

  if (addr >= EEPROM_MAX_SIZE)
 8002188:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800218c:	d301      	bcc.n	8002192 <eepromValid+0xa>
  {
    return false;
 800218e:	2000      	movs	r0, #0
  }

  ret = i2cReadBytes(i2c_ch, i2c_addr, addr, &data, 1, 100);

  return ret;
}
 8002190:	4770      	bx	lr
{
 8002192:	b500      	push	{lr}
 8002194:	b085      	sub	sp, #20
 8002196:	4602      	mov	r2, r0
  ret = i2cReadBytes(i2c_ch, i2c_addr, addr, &data, 1, 100);
 8002198:	2364      	movs	r3, #100	@ 0x64
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2001      	movs	r0, #1
 800219e:	9000      	str	r0, [sp, #0]
 80021a0:	f10d 030f 	add.w	r3, sp, #15
 80021a4:	b292      	uxth	r2, r2
 80021a6:	2150      	movs	r1, #80	@ 0x50
 80021a8:	f000 feb8 	bl	8002f1c <i2cReadBytes>
}
 80021ac:	b005      	add	sp, #20
 80021ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080021b4 <eepromInit>:
{
 80021b4:	b510      	push	{r4, lr}
  ret = i2cBegin(i2c_ch, 400);
 80021b6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80021ba:	2001      	movs	r0, #1
 80021bc:	f000 fe60 	bl	8002e80 <i2cBegin>
  if (ret == true)
 80021c0:	b968      	cbnz	r0, 80021de <eepromInit+0x2a>
 80021c2:	4604      	mov	r4, r0
  logPrintf("[%s] eepromInit()\n", ret ? "OK":"NG");
 80021c4:	490d      	ldr	r1, [pc, #52]	@ (80021fc <eepromInit+0x48>)
 80021c6:	480e      	ldr	r0, [pc, #56]	@ (8002200 <eepromInit+0x4c>)
 80021c8:	f001 f8fe 	bl	80033c8 <logPrintf>
  if (ret == true)
 80021cc:	b984      	cbnz	r4, 80021f0 <eepromInit+0x3c>
  cliAdd("eeprom", cliEeprom);
 80021ce:	490d      	ldr	r1, [pc, #52]	@ (8002204 <eepromInit+0x50>)
 80021d0:	480d      	ldr	r0, [pc, #52]	@ (8002208 <eepromInit+0x54>)
 80021d2:	f7ff f945 	bl	8001460 <cliAdd>
  is_init = ret;
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <eepromInit+0x58>)
 80021d8:	701c      	strb	r4, [r3, #0]
}
 80021da:	4620      	mov	r0, r4
 80021dc:	bd10      	pop	{r4, pc}
    ret = eepromValid(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff ffd2 	bl	8002188 <eepromValid>
  logPrintf("[%s] eepromInit()\n", ret ? "OK":"NG");
 80021e4:	4604      	mov	r4, r0
 80021e6:	b108      	cbz	r0, 80021ec <eepromInit+0x38>
 80021e8:	4909      	ldr	r1, [pc, #36]	@ (8002210 <eepromInit+0x5c>)
 80021ea:	e7ec      	b.n	80021c6 <eepromInit+0x12>
 80021ec:	4903      	ldr	r1, [pc, #12]	@ (80021fc <eepromInit+0x48>)
 80021ee:	e7ea      	b.n	80021c6 <eepromInit+0x12>
    logPrintf("     addr : 0x%02X\n", i2c_addr);
 80021f0:	2150      	movs	r1, #80	@ 0x50
 80021f2:	4808      	ldr	r0, [pc, #32]	@ (8002214 <eepromInit+0x60>)
 80021f4:	f001 f8e8 	bl	80033c8 <logPrintf>
 80021f8:	e7e9      	b.n	80021ce <eepromInit+0x1a>
 80021fa:	bf00      	nop
 80021fc:	0802818c 	.word	0x0802818c
 8002200:	08028190 	.word	0x08028190
 8002204:	080022ad 	.word	0x080022ad
 8002208:	080281b8 	.word	0x080281b8
 800220c:	24000e2c 	.word	0x24000e2c
 8002210:	08028188 	.word	0x08028188
 8002214:	080281a4 	.word	0x080281a4

08002218 <eepromReadByte>:

bool eepromReadByte(uint32_t addr, uint8_t *p_data)
{
  bool ret;

  if (addr >= EEPROM_MAX_SIZE)
 8002218:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800221c:	d301      	bcc.n	8002222 <eepromReadByte+0xa>
  {
    return false;
 800221e:	2000      	movs	r0, #0
  uint8_t block_addr = (addr>>8) & 0x07;

  ret = i2cReadBytes(i2c_ch, i2c_addr | block_addr, addr & 0xFF, p_data, 1, 100);

  return ret;
}
 8002220:	4770      	bx	lr
{
 8002222:	b500      	push	{lr}
 8002224:	b083      	sub	sp, #12
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
  uint8_t block_addr = (addr>>8) & 0x07;
 800222a:	f3c0 2102 	ubfx	r1, r0, #8, #3
  ret = i2cReadBytes(i2c_ch, i2c_addr | block_addr, addr & 0xFF, p_data, 1, 100);
 800222e:	2064      	movs	r0, #100	@ 0x64
 8002230:	9001      	str	r0, [sp, #4]
 8002232:	2001      	movs	r0, #1
 8002234:	9000      	str	r0, [sp, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 800223c:	f000 fe6e 	bl	8002f1c <i2cReadBytes>
}
 8002240:	b003      	add	sp, #12
 8002242:	f85d fb04 	ldr.w	pc, [sp], #4

08002246 <eepromWriteByte>:

bool eepromWriteByte(uint32_t addr, uint8_t data_in)
{
 8002246:	b530      	push	{r4, r5, lr}
 8002248:	b085      	sub	sp, #20
 800224a:	f88d 100f 	strb.w	r1, [sp, #15]
  uint32_t pre_time;
  bool ret;

  if (addr >= EEPROM_MAX_SIZE)
 800224e:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8002252:	d303      	bcc.n	800225c <eepromWriteByte+0x16>
  {
    return false;
 8002254:	2400      	movs	r4, #0
      break;
    }
    delay(1);
  }
  return ret;
}
 8002256:	4620      	mov	r0, r4
 8002258:	b005      	add	sp, #20
 800225a:	bd30      	pop	{r4, r5, pc}
 800225c:	4602      	mov	r2, r0
  uint8_t block_addr = (addr>>8) & 0x07;
 800225e:	f3c0 2102 	ubfx	r1, r0, #8, #3
  ret = i2cWriteBytes(i2c_ch, i2c_addr | block_addr, addr & 0xFF, &data_in, 1, 10);
 8002262:	230a      	movs	r3, #10
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	2001      	movs	r0, #1
 8002268:	9000      	str	r0, [sp, #0]
 800226a:	f10d 030f 	add.w	r3, sp, #15
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 8002274:	f000 fe7e 	bl	8002f74 <i2cWriteBytes>
 8002278:	4604      	mov	r4, r0
  pre_time = millis();
 800227a:	f7fe fc43 	bl	8000b04 <millis>
 800227e:	4605      	mov	r5, r0
  while(millis()-pre_time < 100)
 8002280:	f7fe fc40 	bl	8000b04 <millis>
 8002284:	1b40      	subs	r0, r0, r5
 8002286:	2863      	cmp	r0, #99	@ 0x63
 8002288:	d8e5      	bhi.n	8002256 <eepromWriteByte+0x10>
    ret = i2cIsDeviceReady(i2c_ch, i2c_addr);
 800228a:	2150      	movs	r1, #80	@ 0x50
 800228c:	2001      	movs	r0, #1
 800228e:	f000 fe31 	bl	8002ef4 <i2cIsDeviceReady>
    if (ret == true)
 8002292:	4604      	mov	r4, r0
 8002294:	2800      	cmp	r0, #0
 8002296:	d1de      	bne.n	8002256 <eepromWriteByte+0x10>
    delay(1);
 8002298:	2001      	movs	r0, #1
 800229a:	f7fe fc2f 	bl	8000afc <delay>
 800229e:	e7ef      	b.n	8002280 <eepromWriteByte+0x3a>

080022a0 <eepromGetLength>:
}

uint32_t eepromGetLength(void)
{
  return EEPROM_MAX_SIZE;
}
 80022a0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80022a4:	4770      	bx	lr

080022a6 <eepromFormat>:

bool eepromFormat(void)
{
  return true;
}
 80022a6:	2001      	movs	r0, #1
 80022a8:	4770      	bx	lr
	...

080022ac <cliEeprom>:



#ifdef _USE_HW_CLI
void cliEeprom(cli_args_t *args)
{
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	b083      	sub	sp, #12
 80022b0:	4604      	mov	r4, r0
  uint8_t  data;
  uint32_t pre_time;
  bool eep_ret;


  if (args->argc == 1)
 80022b2:	8803      	ldrh	r3, [r0, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d00f      	beq.n	80022d8 <cliEeprom+0x2c>
    else
    {
      ret = false;
    }
  }
  else if (args->argc == 3)
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d030      	beq.n	800231e <cliEeprom+0x72>
  }


  if (ret == false)
  {
    cliPrintf( "eeprom info\n");
 80022bc:	4843      	ldr	r0, [pc, #268]	@ (80023cc <cliEeprom+0x120>)
 80022be:	f7fe fe21 	bl	8000f04 <cliPrintf>
    cliPrintf( "eeprom format\n");
 80022c2:	4843      	ldr	r0, [pc, #268]	@ (80023d0 <cliEeprom+0x124>)
 80022c4:	f7fe fe1e 	bl	8000f04 <cliPrintf>
    cliPrintf( "eeprom read  [addr] [length]\n");
 80022c8:	4842      	ldr	r0, [pc, #264]	@ (80023d4 <cliEeprom+0x128>)
 80022ca:	f7fe fe1b 	bl	8000f04 <cliPrintf>
    cliPrintf( "eeprom write [addr] [data]\n");
 80022ce:	4842      	ldr	r0, [pc, #264]	@ (80023d8 <cliEeprom+0x12c>)
 80022d0:	f7fe fe18 	bl	8000f04 <cliPrintf>
  }

}
 80022d4:	b003      	add	sp, #12
 80022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(args->isStr(0, "info") == true)
 80022d8:	6943      	ldr	r3, [r0, #20]
 80022da:	4940      	ldr	r1, [pc, #256]	@ (80023dc <cliEeprom+0x130>)
 80022dc:	2000      	movs	r0, #0
 80022de:	4798      	blx	r3
 80022e0:	b960      	cbnz	r0, 80022fc <cliEeprom+0x50>
    else if(args->isStr(0, "format") == true)
 80022e2:	6963      	ldr	r3, [r4, #20]
 80022e4:	493e      	ldr	r1, [pc, #248]	@ (80023e0 <cliEeprom+0x134>)
 80022e6:	2000      	movs	r0, #0
 80022e8:	4798      	blx	r3
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d0e6      	beq.n	80022bc <cliEeprom+0x10>
      if (eepromFormat() == true)
 80022ee:	f7ff ffda 	bl	80022a6 <eepromFormat>
 80022f2:	b180      	cbz	r0, 8002316 <cliEeprom+0x6a>
        cliPrintf("format OK\n");
 80022f4:	483b      	ldr	r0, [pc, #236]	@ (80023e4 <cliEeprom+0x138>)
 80022f6:	f7fe fe05 	bl	8000f04 <cliPrintf>
  if (ret == false)
 80022fa:	e7eb      	b.n	80022d4 <cliEeprom+0x28>
      cliPrintf("eeprom init   : %d\n", eepromIsInit());
 80022fc:	f7ff ff3e 	bl	800217c <eepromIsInit>
 8002300:	4601      	mov	r1, r0
 8002302:	4839      	ldr	r0, [pc, #228]	@ (80023e8 <cliEeprom+0x13c>)
 8002304:	f7fe fdfe 	bl	8000f04 <cliPrintf>
      cliPrintf("eeprom length : %d bytes\n", eepromGetLength());
 8002308:	f7ff ffca 	bl	80022a0 <eepromGetLength>
 800230c:	4601      	mov	r1, r0
 800230e:	4837      	ldr	r0, [pc, #220]	@ (80023ec <cliEeprom+0x140>)
 8002310:	f7fe fdf8 	bl	8000f04 <cliPrintf>
  if (ret == false)
 8002314:	e7de      	b.n	80022d4 <cliEeprom+0x28>
        cliPrintf("format Fail\n");
 8002316:	4836      	ldr	r0, [pc, #216]	@ (80023f0 <cliEeprom+0x144>)
 8002318:	f7fe fdf4 	bl	8000f04 <cliPrintf>
  if (ret == false)
 800231c:	e7da      	b.n	80022d4 <cliEeprom+0x28>
    if(args->isStr(0, "read") == true)
 800231e:	6943      	ldr	r3, [r0, #20]
 8002320:	4934      	ldr	r1, [pc, #208]	@ (80023f4 <cliEeprom+0x148>)
 8002322:	2000      	movs	r0, #0
 8002324:	4798      	blx	r3
 8002326:	b328      	cbz	r0, 8002374 <cliEeprom+0xc8>
      addr   = (uint32_t)args->getData(1);
 8002328:	68a3      	ldr	r3, [r4, #8]
 800232a:	2001      	movs	r0, #1
 800232c:	4798      	blx	r3
 800232e:	4607      	mov	r7, r0
      length = (uint32_t)args->getData(2);
 8002330:	68a3      	ldr	r3, [r4, #8]
 8002332:	2002      	movs	r0, #2
 8002334:	4798      	blx	r3
 8002336:	4606      	mov	r6, r0
      if (length > eepromGetLength())
 8002338:	f7ff ffb2 	bl	80022a0 <eepromGetLength>
 800233c:	42b0      	cmp	r0, r6
 800233e:	d311      	bcc.n	8002364 <cliEeprom+0xb8>
{
 8002340:	2400      	movs	r4, #0
      for (i=0; i<length; i++)
 8002342:	42b4      	cmp	r4, r6
 8002344:	d2c6      	bcs.n	80022d4 <cliEeprom+0x28>
        if (eepromReadByte(addr+i, &data) == true)
 8002346:	19e5      	adds	r5, r4, r7
 8002348:	f10d 0107 	add.w	r1, sp, #7
 800234c:	4628      	mov	r0, r5
 800234e:	f7ff ff63 	bl	8002218 <eepromReadByte>
 8002352:	b158      	cbz	r0, 800236c <cliEeprom+0xc0>
          cliPrintf( "addr : %d\t 0x%02X\n", addr+i, data);          
 8002354:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002358:	4629      	mov	r1, r5
 800235a:	4827      	ldr	r0, [pc, #156]	@ (80023f8 <cliEeprom+0x14c>)
 800235c:	f7fe fdd2 	bl	8000f04 <cliPrintf>
      for (i=0; i<length; i++)
 8002360:	3401      	adds	r4, #1
 8002362:	e7ee      	b.n	8002342 <cliEeprom+0x96>
        cliPrintf( "length error\n");
 8002364:	4825      	ldr	r0, [pc, #148]	@ (80023fc <cliEeprom+0x150>)
 8002366:	f7fe fdcd 	bl	8000f04 <cliPrintf>
 800236a:	e7e9      	b.n	8002340 <cliEeprom+0x94>
          cliPrintf("eepromReadByte() Error\n");
 800236c:	4824      	ldr	r0, [pc, #144]	@ (8002400 <cliEeprom+0x154>)
 800236e:	f7fe fdc9 	bl	8000f04 <cliPrintf>
  if (ret == false)
 8002372:	e7af      	b.n	80022d4 <cliEeprom+0x28>
    else if(args->isStr(0, "write") == true)
 8002374:	6963      	ldr	r3, [r4, #20]
 8002376:	4923      	ldr	r1, [pc, #140]	@ (8002404 <cliEeprom+0x158>)
 8002378:	2000      	movs	r0, #0
 800237a:	4798      	blx	r3
 800237c:	2800      	cmp	r0, #0
 800237e:	d09d      	beq.n	80022bc <cliEeprom+0x10>
      addr = (uint32_t)args->getData(1);
 8002380:	68a3      	ldr	r3, [r4, #8]
 8002382:	2001      	movs	r0, #1
 8002384:	4798      	blx	r3
 8002386:	4605      	mov	r5, r0
      data = (uint8_t )args->getData(2);
 8002388:	68a3      	ldr	r3, [r4, #8]
 800238a:	2002      	movs	r0, #2
 800238c:	4798      	blx	r3
 800238e:	f88d 0007 	strb.w	r0, [sp, #7]
      pre_time = millis();
 8002392:	f7fe fbb7 	bl	8000b04 <millis>
 8002396:	4606      	mov	r6, r0
      eep_ret = eepromWriteByte(addr, data);
 8002398:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800239c:	4628      	mov	r0, r5
 800239e:	f7ff ff52 	bl	8002246 <eepromWriteByte>
 80023a2:	4604      	mov	r4, r0
      cliPrintf( "addr : %d\t 0x%02X %dms\n", addr, data, millis()-pre_time);
 80023a4:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80023a8:	f7fe fbac 	bl	8000b04 <millis>
 80023ac:	1b83      	subs	r3, r0, r6
 80023ae:	463a      	mov	r2, r7
 80023b0:	4629      	mov	r1, r5
 80023b2:	4815      	ldr	r0, [pc, #84]	@ (8002408 <cliEeprom+0x15c>)
 80023b4:	f7fe fda6 	bl	8000f04 <cliPrintf>
      if (eep_ret)
 80023b8:	b11c      	cbz	r4, 80023c2 <cliEeprom+0x116>
        cliPrintf("OK\n");
 80023ba:	4814      	ldr	r0, [pc, #80]	@ (800240c <cliEeprom+0x160>)
 80023bc:	f7fe fda2 	bl	8000f04 <cliPrintf>
  if (ret == false)
 80023c0:	e788      	b.n	80022d4 <cliEeprom+0x28>
        cliPrintf("FAIL\n");
 80023c2:	4813      	ldr	r0, [pc, #76]	@ (8002410 <cliEeprom+0x164>)
 80023c4:	f7fe fd9e 	bl	8000f04 <cliPrintf>
  if (ret == false)
 80023c8:	e784      	b.n	80022d4 <cliEeprom+0x28>
 80023ca:	bf00      	nop
 80023cc:	08028284 	.word	0x08028284
 80023d0:	08028294 	.word	0x08028294
 80023d4:	080282a4 	.word	0x080282a4
 80023d8:	080282c4 	.word	0x080282c4
 80023dc:	080280ec 	.word	0x080280ec
 80023e0:	080281f0 	.word	0x080281f0
 80023e4:	080281f8 	.word	0x080281f8
 80023e8:	080281c0 	.word	0x080281c0
 80023ec:	080281d4 	.word	0x080281d4
 80023f0:	08028204 	.word	0x08028204
 80023f4:	08028214 	.word	0x08028214
 80023f8:	0802822c 	.word	0x0802822c
 80023fc:	0802821c 	.word	0x0802821c
 8002400:	08028240 	.word	0x08028240
 8002404:	08028258 	.word	0x08028258
 8002408:	08028260 	.word	0x08028260
 800240c:	08028278 	.word	0x08028278
 8002410:	0802827c 	.word	0x0802827c

08002414 <flashInit>:




bool flashInit(void)
{
 8002414:	b508      	push	{r3, lr}

  logPrintf("[OK] flashInit()\n");
 8002416:	4804      	ldr	r0, [pc, #16]	@ (8002428 <flashInit+0x14>)
 8002418:	f000 ffd6 	bl	80033c8 <logPrintf>

#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 800241c:	4903      	ldr	r1, [pc, #12]	@ (800242c <flashInit+0x18>)
 800241e:	4804      	ldr	r0, [pc, #16]	@ (8002430 <flashInit+0x1c>)
 8002420:	f7ff f81e 	bl	8001460 <cliAdd>
#endif
  return true;
}
 8002424:	2001      	movs	r0, #1
 8002426:	bd08      	pop	{r3, pc}
 8002428:	080282e0 	.word	0x080282e0
 800242c:	08002735 	.word	0x08002735
 8002430:	080282f4 	.word	0x080282f4

08002434 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8002434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	4604      	mov	r4, r0
 800243c:	460d      	mov	r5, r1
  uint32_t banks;
  const flash_tbl_t *flash_tbl;


#ifdef _USE_HW_QSPI
  if (addr >= qspiGetAddr() && addr < (qspiGetAddr() + qspiGetLength()))
 800243e:	f001 fa0b 	bl	8003858 <qspiGetAddr>
 8002442:	42a0      	cmp	r0, r4
 8002444:	d807      	bhi.n	8002456 <flashErase+0x22>
 8002446:	f001 fa07 	bl	8003858 <qspiGetAddr>
 800244a:	4606      	mov	r6, r0
 800244c:	f001 fa07 	bl	800385e <qspiGetLength>
 8002450:	4406      	add	r6, r0
 8002452:	42a6      	cmp	r6, r4
 8002454:	d819      	bhi.n	800248a <flashErase+0x56>
    ret = qspiErase(addr - qspiGetAddr(), length);
    return ret;
  }
#endif
#ifdef _USE_HW_SPI_FLASH
  if (addr >= spiFlashGetAddr() && addr < (spiFlashGetAddr() + spiFlashGetLength()))
 8002456:	f002 fbe2 	bl	8004c1e <spiFlashGetAddr>
 800245a:	42a0      	cmp	r0, r4
 800245c:	d807      	bhi.n	800246e <flashErase+0x3a>
 800245e:	f002 fbde 	bl	8004c1e <spiFlashGetAddr>
 8002462:	4606      	mov	r6, r0
 8002464:	f002 fbde 	bl	8004c24 <spiFlashGetLength>
 8002468:	4406      	add	r6, r0
 800246a:	42a6      	cmp	r6, r4
 800246c:	d815      	bhi.n	800249a <flashErase+0x66>
    ret = spiFlashErase(addr - spiFlashGetAddr(), length);
    return ret;
  }
#endif

  HAL_FLASH_Unlock();
 800246e:	f006 ffd3 	bl	8009418 <HAL_FLASH_Unlock>

  for (banks = 0; banks < FLASH_MAX_BANK; banks++)
 8002472:	f04f 0800 	mov.w	r8, #0
  bool ret = false;
 8002476:	46c1      	mov	r9, r8
  for (banks = 0; banks < FLASH_MAX_BANK; banks++)
 8002478:	f1b8 0f00 	cmp.w	r8, #0
 800247c:	d046      	beq.n	800250c <flashErase+0xd8>
        ret = true;
      }
    }
  }

  HAL_FLASH_Lock();
 800247e:	f006 ffe5 	bl	800944c <HAL_FLASH_Lock>

  return ret;
}
 8002482:	4648      	mov	r0, r9
 8002484:	b006      	add	sp, #24
 8002486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = qspiErase(addr - qspiGetAddr(), length);
 800248a:	f001 f9e5 	bl	8003858 <qspiGetAddr>
 800248e:	4629      	mov	r1, r5
 8002490:	1a20      	subs	r0, r4, r0
 8002492:	f001 fb73 	bl	8003b7c <qspiErase>
 8002496:	4681      	mov	r9, r0
    return ret;
 8002498:	e7f3      	b.n	8002482 <flashErase+0x4e>
    ret = spiFlashErase(addr - spiFlashGetAddr(), length);
 800249a:	f002 fbc0 	bl	8004c1e <spiFlashGetAddr>
 800249e:	4629      	mov	r1, r5
 80024a0:	1a20      	subs	r0, r4, r0
 80024a2:	f002 fb9f 	bl	8004be4 <spiFlashErase>
 80024a6:	4681      	mov	r9, r0
    return ret;
 80024a8:	e7eb      	b.n	8002482 <flashErase+0x4e>
      bool update = false;
 80024aa:	2200      	movs	r2, #0
      if (end_addr >= addr && end_addr < (addr+length))
 80024ac:	429c      	cmp	r4, r3
 80024ae:	d804      	bhi.n	80024ba <flashErase+0x86>
 80024b0:	eb04 0c05 	add.w	ip, r4, r5
 80024b4:	459c      	cmp	ip, r3
 80024b6:	d900      	bls.n	80024ba <flashErase+0x86>
        update = true;
 80024b8:	2201      	movs	r2, #1
      if (addr >= start_addr && addr <= end_addr)
 80024ba:	4284      	cmp	r4, r0
 80024bc:	bf34      	ite	cc
 80024be:	2700      	movcc	r7, #0
 80024c0:	2701      	movcs	r7, #1
 80024c2:	429c      	cmp	r4, r3
 80024c4:	bf88      	it	hi
 80024c6:	2700      	movhi	r7, #0
 80024c8:	b907      	cbnz	r7, 80024cc <flashErase+0x98>
 80024ca:	4617      	mov	r7, r2
      if ((addr+length-1) >= start_addr && (addr+length-1) <= end_addr)
 80024cc:	1962      	adds	r2, r4, r5
 80024ce:	3a01      	subs	r2, #1
 80024d0:	4282      	cmp	r2, r0
 80024d2:	d301      	bcc.n	80024d8 <flashErase+0xa4>
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d900      	bls.n	80024da <flashErase+0xa6>
      if (update == true)
 80024d8:	b117      	cbz	r7, 80024e0 <flashErase+0xac>
        if (start_sector < 0)
 80024da:	2e00      	cmp	r6, #0
 80024dc:	db13      	blt.n	8002506 <flashErase+0xd2>
        end_sector = i;
 80024de:	468a      	mov	sl, r1
    for (int i=0; i<FLASH_MAX_SECTOR; i++)
 80024e0:	3101      	adds	r1, #1
 80024e2:	2907      	cmp	r1, #7
 80024e4:	dc17      	bgt.n	8002516 <flashErase+0xe2>
      start_addr = flash_tbl[i].addr;
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <flashErase+0x124>)
 80024e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80024ec:	6898      	ldr	r0, [r3, #8]
      end_addr   = flash_tbl[i].addr + flash_tbl[i].length - 1;
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4403      	add	r3, r0
 80024f2:	3b01      	subs	r3, #1
      if (start_addr >= addr && start_addr < (addr+length))
 80024f4:	4284      	cmp	r4, r0
 80024f6:	d8d8      	bhi.n	80024aa <flashErase+0x76>
 80024f8:	1962      	adds	r2, r4, r5
 80024fa:	4282      	cmp	r2, r0
 80024fc:	d801      	bhi.n	8002502 <flashErase+0xce>
      bool update = false;
 80024fe:	2200      	movs	r2, #0
 8002500:	e7d4      	b.n	80024ac <flashErase+0x78>
        update = true;
 8002502:	2201      	movs	r2, #1
 8002504:	e7d2      	b.n	80024ac <flashErase+0x78>
        end_sector = i;
 8002506:	468a      	mov	sl, r1
          start_sector = i;
 8002508:	460e      	mov	r6, r1
 800250a:	e7e9      	b.n	80024e0 <flashErase+0xac>
    for (int i=0; i<FLASH_MAX_SECTOR; i++)
 800250c:	2100      	movs	r1, #0
    end_sector = -1;
 800250e:	f04f 3aff 	mov.w	sl, #4294967295
    start_sector = -1;
 8002512:	4656      	mov	r6, sl
 8002514:	e7e5      	b.n	80024e2 <flashErase+0xae>
    if (start_sector >= 0)
 8002516:	2e00      	cmp	r6, #0
 8002518:	da02      	bge.n	8002520 <flashErase+0xec>
  for (banks = 0; banks < FLASH_MAX_BANK; banks++)
 800251a:	f108 0801 	add.w	r8, r8, #1
 800251e:	e7ab      	b.n	8002478 <flashErase+0x44>
      EraseInit.Sector       = start_sector;
 8002520:	9603      	str	r6, [sp, #12]
      EraseInit.NbSectors    = (end_sector - start_sector) + 1;
 8002522:	ebaa 0306 	sub.w	r3, sl, r6
 8002526:	3301      	adds	r3, #1
 8002528:	9304      	str	r3, [sp, #16]
      EraseInit.TypeErase    = FLASH_TYPEERASE_SECTORS;
 800252a:	2300      	movs	r3, #0
 800252c:	9301      	str	r3, [sp, #4]
      EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_4;
 800252e:	2330      	movs	r3, #48	@ 0x30
 8002530:	9305      	str	r3, [sp, #20]
      EraseInit.Banks        = flash_tbl[start_sector].bank;
 8002532:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <flashErase+0x124>)
 8002534:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	9302      	str	r3, [sp, #8]
      status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 800253c:	4669      	mov	r1, sp
 800253e:	a801      	add	r0, sp, #4
 8002540:	f007 f83e 	bl	80095c0 <HAL_FLASHEx_Erase>
      if (status == HAL_OK)
 8002544:	2800      	cmp	r0, #0
 8002546:	d1e8      	bne.n	800251a <flashErase+0xe6>
 8002548:	e000      	b.n	800254c <flashErase+0x118>
        for (int i=start_sector; i<=end_sector; i++)
 800254a:	3601      	adds	r6, #1
 800254c:	45b2      	cmp	sl, r6
 800254e:	dafc      	bge.n	800254a <flashErase+0x116>
        ret = true;
 8002550:	f04f 0901 	mov.w	r9, #1
 8002554:	e7e1      	b.n	800251a <flashErase+0xe6>
 8002556:	bf00      	nop
 8002558:	08028480 	.word	0x08028480

0800255c <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800255c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002560:	b088      	sub	sp, #32
 8002562:	4607      	mov	r7, r0
 8002564:	4688      	mov	r8, r1
 8002566:	4615      	mov	r5, r2
  uint32_t offset;
  HAL_StatusTypeDef status;


#ifdef _USE_HW_QSPI
  if (addr >= qspiGetAddr() && addr < (qspiGetAddr() + qspiGetLength()))
 8002568:	f001 f976 	bl	8003858 <qspiGetAddr>
 800256c:	42b8      	cmp	r0, r7
 800256e:	d807      	bhi.n	8002580 <flashWrite+0x24>
 8002570:	f001 f972 	bl	8003858 <qspiGetAddr>
 8002574:	4604      	mov	r4, r0
 8002576:	f001 f972 	bl	800385e <qspiGetLength>
 800257a:	4404      	add	r4, r0
 800257c:	42bc      	cmp	r4, r7
 800257e:	d852      	bhi.n	8002626 <flashWrite+0xca>
    ret = qspiWrite(addr - qspiGetAddr(), p_data, length);
    return ret;
  }
#endif
#ifdef _USE_HW_SPI_FLASH
  if (addr >= spiFlashGetAddr() && addr < (spiFlashGetAddr() + spiFlashGetLength()))
 8002580:	f002 fb4d 	bl	8004c1e <spiFlashGetAddr>
 8002584:	42b8      	cmp	r0, r7
 8002586:	d807      	bhi.n	8002598 <flashWrite+0x3c>
 8002588:	f002 fb49 	bl	8004c1e <spiFlashGetAddr>
 800258c:	4604      	mov	r4, r0
 800258e:	f002 fb49 	bl	8004c24 <spiFlashGetLength>
 8002592:	4404      	add	r4, r0
 8002594:	42bc      	cmp	r4, r7
 8002596:	d84f      	bhi.n	8002638 <flashWrite+0xdc>
    ret = spiFlashWrite(addr - spiFlashGetAddr(), p_data, length);
    return ret;
  }
#endif

  HAL_FLASH_Unlock();
 8002598:	f006 ff3e 	bl	8009418 <HAL_FLASH_Unlock>

  index = 0;
  offset = addr%FLASH_PAGE_SIZE;

  if (offset != 0 || length < FLASH_PAGE_SIZE)
 800259c:	f007 091f 	and.w	r9, r7, #31
 80025a0:	f017 031f 	ands.w	r3, r7, #31
 80025a4:	bf18      	it	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2d1f      	cmp	r5, #31
 80025aa:	bf8c      	ite	hi
 80025ac:	2600      	movhi	r6, #0
 80025ae:	2601      	movls	r6, #1
 80025b0:	4333      	orrs	r3, r6
 80025b2:	d14a      	bne.n	800264a <flashWrite+0xee>
  index = 0;
 80025b4:	2400      	movs	r4, #0
      index += (FLASH_PAGE_SIZE - offset);
    }
  }


  while(index < length)
 80025b6:	42ac      	cmp	r4, r5
 80025b8:	d277      	bcs.n	80026aa <flashWrite+0x14e>
  {
    write_length = constrain(length - index, 0, FLASH_PAGE_SIZE);
 80025ba:	1b2b      	subs	r3, r5, r4
 80025bc:	2b20      	cmp	r3, #32
 80025be:	bf28      	it	cs
 80025c0:	2320      	movcs	r3, #32
 80025c2:	461e      	mov	r6, r3

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, addr + index, (uint32_t)&p_data[index]);
 80025c4:	eb08 0204 	add.w	r2, r8, r4
 80025c8:	19e1      	adds	r1, r4, r7
 80025ca:	2001      	movs	r0, #1
 80025cc:	f006 ff90 	bl	80094f0 <HAL_FLASH_Program>
    if (status != HAL_OK)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d171      	bne.n	80026b8 <flashWrite+0x15c>
    {
      ret = false;
      break;
    }

    index += write_length;
 80025d4:	4434      	add	r4, r6

    if ((length - index) > 0 && (length - index) < FLASH_PAGE_SIZE)
 80025d6:	42a5      	cmp	r5, r4
 80025d8:	d0ed      	beq.n	80025b6 <flashWrite+0x5a>
 80025da:	1b2e      	subs	r6, r5, r4
 80025dc:	2e1f      	cmp	r6, #31
 80025de:	d8ea      	bhi.n	80025b6 <flashWrite+0x5a>
    {
      offset = length - index;
      write_addr = addr + index;
 80025e0:	eb07 0904 	add.w	r9, r7, r4
      memcpy(&buf[0], (void *)write_addr, FLASH_PAGE_SIZE);
 80025e4:	466d      	mov	r5, sp
 80025e6:	5938      	ldr	r0, [r7, r4]
 80025e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80025ec:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80025f0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80025f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80025fa:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80025fe:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8002602:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      memcpy(&buf[0], &p_data[index], offset);
 8002608:	4632      	mov	r2, r6
 800260a:	eb08 0104 	add.w	r1, r8, r4
 800260e:	4668      	mov	r0, sp
 8002610:	f023 fd0f 	bl	8026032 <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, write_addr, (uint32_t)buf);
 8002614:	466a      	mov	r2, sp
 8002616:	4649      	mov	r1, r9
 8002618:	2001      	movs	r0, #1
 800261a:	f006 ff69 	bl	80094f0 <HAL_FLASH_Program>
      if (status != HAL_OK)
 800261e:	2800      	cmp	r0, #0
 8002620:	d14e      	bne.n	80026c0 <flashWrite+0x164>
  bool ret = true;
 8002622:	2401      	movs	r4, #1
 8002624:	e042      	b.n	80026ac <flashWrite+0x150>
    ret = qspiWrite(addr - qspiGetAddr(), p_data, length);
 8002626:	f001 f917 	bl	8003858 <qspiGetAddr>
 800262a:	462a      	mov	r2, r5
 800262c:	4641      	mov	r1, r8
 800262e:	1a38      	subs	r0, r7, r0
 8002630:	f001 fa5a 	bl	8003ae8 <qspiWrite>
 8002634:	4604      	mov	r4, r0
    return ret;
 8002636:	e03b      	b.n	80026b0 <flashWrite+0x154>
    ret = spiFlashWrite(addr - spiFlashGetAddr(), p_data, length);
 8002638:	f002 faf1 	bl	8004c1e <spiFlashGetAddr>
 800263c:	462a      	mov	r2, r5
 800263e:	4641      	mov	r1, r8
 8002640:	1a38      	subs	r0, r7, r0
 8002642:	f002 faf2 	bl	8004c2a <spiFlashWrite>
 8002646:	4604      	mov	r4, r0
    return ret;
 8002648:	e032      	b.n	80026b0 <flashWrite+0x154>
    write_addr = addr - offset;
 800264a:	eba7 0a09 	sub.w	sl, r7, r9
    memcpy(&buf[0], (void *)write_addr, FLASH_PAGE_SIZE);
 800264e:	466c      	mov	r4, sp
 8002650:	f8da 0000 	ldr.w	r0, [sl]
 8002654:	f8da 1004 	ldr.w	r1, [sl, #4]
 8002658:	f8da 2008 	ldr.w	r2, [sl, #8]
 800265c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002662:	f8da 0010 	ldr.w	r0, [sl, #16]
 8002666:	f8da 1014 	ldr.w	r1, [sl, #20]
 800266a:	f8da 2018 	ldr.w	r2, [sl, #24]
 800266e:	f8da 301c 	ldr.w	r3, [sl, #28]
 8002672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_PAGE_SIZE-offset, 0, length));
 8002674:	f1c9 0420 	rsb	r4, r9, #32
 8002678:	4622      	mov	r2, r4
 800267a:	42ac      	cmp	r4, r5
 800267c:	bf28      	it	cs
 800267e:	462a      	movcs	r2, r5
 8002680:	4641      	mov	r1, r8
 8002682:	eb0d 0009 	add.w	r0, sp, r9
 8002686:	f023 fcd4 	bl	8026032 <memcpy>
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, write_addr, (uint32_t)buf);
 800268a:	466a      	mov	r2, sp
 800268c:	4651      	mov	r1, sl
 800268e:	2001      	movs	r0, #1
 8002690:	f006 ff2e 	bl	80094f0 <HAL_FLASH_Program>
    if (status != HAL_OK)
 8002694:	b990      	cbnz	r0, 80026bc <flashWrite+0x160>
    if (offset == 0 && length < FLASH_PAGE_SIZE)
 8002696:	f1b9 0f00 	cmp.w	r9, #0
 800269a:	bf14      	ite	ne
 800269c:	2600      	movne	r6, #0
 800269e:	f006 0601 	andeq.w	r6, r6, #1
 80026a2:	2e00      	cmp	r6, #0
 80026a4:	d087      	beq.n	80025b6 <flashWrite+0x5a>
      index += length;
 80026a6:	462c      	mov	r4, r5
 80026a8:	e785      	b.n	80025b6 <flashWrite+0x5a>
  bool ret = true;
 80026aa:	2401      	movs	r4, #1
      }
      break;
    }
  }

  HAL_FLASH_Lock();
 80026ac:	f006 fece 	bl	800944c <HAL_FLASH_Lock>

  return ret;
}
 80026b0:	4620      	mov	r0, r4
 80026b2:	b008      	add	sp, #32
 80026b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = false;
 80026b8:	2400      	movs	r4, #0
 80026ba:	e7f7      	b.n	80026ac <flashWrite+0x150>
      return false;
 80026bc:	2400      	movs	r4, #0
 80026be:	e7f7      	b.n	80026b0 <flashWrite+0x154>
        return false;
 80026c0:	2400      	movs	r4, #0
 80026c2:	e7f5      	b.n	80026b0 <flashWrite+0x154>

080026c4 <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	4604      	mov	r4, r0
 80026c8:	460e      	mov	r6, r1
 80026ca:	4615      	mov	r5, r2
  bool ret = true;
  uint8_t *p_byte = (uint8_t *)addr;


#ifdef _USE_HW_QSPI
  if (addr >= qspiGetAddr() && addr < (qspiGetAddr() + qspiGetLength()))
 80026cc:	f001 f8c4 	bl	8003858 <qspiGetAddr>
 80026d0:	42a0      	cmp	r0, r4
 80026d2:	d807      	bhi.n	80026e4 <flashRead+0x20>
 80026d4:	f001 f8c0 	bl	8003858 <qspiGetAddr>
 80026d8:	4607      	mov	r7, r0
 80026da:	f001 f8c0 	bl	800385e <qspiGetLength>
 80026de:	4407      	add	r7, r0
 80026e0:	42a7      	cmp	r7, r4
 80026e2:	d805      	bhi.n	80026f0 <flashRead+0x2c>
    ret = qspiRead(addr - qspiGetAddr(), p_data, length);
    return ret;
  }
#endif
#ifdef _USE_HW_SPI_FLASH
  if (addr >= spiFlashGetAddr() && addr < (spiFlashGetAddr() + spiFlashGetLength()))
 80026e4:	f002 fa9b 	bl	8004c1e <spiFlashGetAddr>
 80026e8:	42a0      	cmp	r0, r4
 80026ea:	d909      	bls.n	8002700 <flashRead+0x3c>
{
 80026ec:	2300      	movs	r3, #0
 80026ee:	e01c      	b.n	800272a <flashRead+0x66>
    ret = qspiRead(addr - qspiGetAddr(), p_data, length);
 80026f0:	f001 f8b2 	bl	8003858 <qspiGetAddr>
 80026f4:	462a      	mov	r2, r5
 80026f6:	4631      	mov	r1, r6
 80026f8:	1a20      	subs	r0, r4, r0
 80026fa:	f001 f98b 	bl	8003a14 <qspiRead>
    return ret;
 80026fe:	e017      	b.n	8002730 <flashRead+0x6c>
  if (addr >= spiFlashGetAddr() && addr < (spiFlashGetAddr() + spiFlashGetLength()))
 8002700:	f002 fa8d 	bl	8004c1e <spiFlashGetAddr>
 8002704:	4607      	mov	r7, r0
 8002706:	f002 fa8d 	bl	8004c24 <spiFlashGetLength>
 800270a:	4407      	add	r7, r0
 800270c:	42a7      	cmp	r7, r4
 800270e:	d9ed      	bls.n	80026ec <flashRead+0x28>
  {
    ret = spiFlashRead(addr - spiFlashGetAddr(), p_data, length);
 8002710:	f002 fa85 	bl	8004c1e <spiFlashGetAddr>
 8002714:	462a      	mov	r2, r5
 8002716:	4631      	mov	r1, r6
 8002718:	1a20      	subs	r0, r4, r0
 800271a:	f002 fa09 	bl	8004b30 <spiFlashRead>
    return ret;
 800271e:	e007      	b.n	8002730 <flashRead+0x6c>
  }
#endif

  for (int i=0; i<length; i++)
  {
    p_data[i] = p_byte[i];
 8002720:	f814 c003 	ldrb.w	ip, [r4, r3]
 8002724:	f806 c003 	strb.w	ip, [r6, r3]
  for (int i=0; i<length; i++)
 8002728:	3301      	adds	r3, #1
 800272a:	42ab      	cmp	r3, r5
 800272c:	d3f8      	bcc.n	8002720 <flashRead+0x5c>
  }

  return ret;
 800272e:	2001      	movs	r0, #1
}
 8002730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002734 <cliFlash>:



#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 8002734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002738:	b083      	sub	sp, #12
 800273a:	4604      	mov	r4, r0
  uint32_t length;
  uint32_t pre_time;
  bool flash_ret;


  if (args->argc == 1 && args->isStr(0, "info"))
 800273c:	8803      	ldrh	r3, [r0, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d013      	beq.n	800276a <cliFlash+0x36>
  bool ret = false;
 8002742:	2500      	movs	r5, #0
    cliPrintf("spi   addr  : 0x%X\n", spiFlashGetAddr());
    #endif
    ret = true;
  }

  if(args->argc == 3 && args->isStr(0, "read"))
 8002744:	8823      	ldrh	r3, [r4, #0]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d028      	beq.n	800279c <cliFlash+0x68>
    }

    ret = true;
  }
    
  if(args->argc == 3 && args->isStr(0, "erase"))
 800274a:	8823      	ldrh	r3, [r4, #0]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d04f      	beq.n	80027f0 <cliFlash+0xbc>
    }

    ret = true;
  }
    
  if(args->argc == 3 && args->isStr(0, "write"))
 8002750:	8823      	ldrh	r3, [r4, #0]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d076      	beq.n	8002844 <cliFlash+0x110>
    }

    ret = true;
  }

  if(args->argc == 3 && args->isStr(0, "check"))
 8002756:	8823      	ldrh	r3, [r4, #0]
 8002758:	2b03      	cmp	r3, #3
 800275a:	f000 80a0 	beq.w	800289e <cliFlash+0x16a>
    
    ret = true;
  }


  if (ret == false)
 800275e:	2d00      	cmp	r5, #0
 8002760:	f000 8105 	beq.w	800296e <cliFlash+0x23a>
    cliPrintf( "flash read  [addr] [length]\n");
    cliPrintf( "flash erase [addr] [length]\n");
    cliPrintf( "flash write [addr] [data]\n");
    cliPrintf( "flash check [addr] [length]\n");
  }
}
 8002764:	b003      	add	sp, #12
 8002766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 800276a:	6943      	ldr	r3, [r0, #20]
 800276c:	4988      	ldr	r1, [pc, #544]	@ (8002990 <cliFlash+0x25c>)
 800276e:	2000      	movs	r0, #0
 8002770:	4798      	blx	r3
 8002772:	4605      	mov	r5, r0
 8002774:	2800      	cmp	r0, #0
 8002776:	d0e5      	beq.n	8002744 <cliFlash+0x10>
    cliPrintf("flash addr  : 0x%X\n", 0x8000000);
 8002778:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800277c:	4885      	ldr	r0, [pc, #532]	@ (8002994 <cliFlash+0x260>)
 800277e:	f7fe fbc1 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi  addr  : 0x%X\n", qspiGetAddr());
 8002782:	f001 f869 	bl	8003858 <qspiGetAddr>
 8002786:	4601      	mov	r1, r0
 8002788:	4883      	ldr	r0, [pc, #524]	@ (8002998 <cliFlash+0x264>)
 800278a:	f7fe fbbb 	bl	8000f04 <cliPrintf>
    cliPrintf("spi   addr  : 0x%X\n", spiFlashGetAddr());
 800278e:	f002 fa46 	bl	8004c1e <spiFlashGetAddr>
 8002792:	4601      	mov	r1, r0
 8002794:	4881      	ldr	r0, [pc, #516]	@ (800299c <cliFlash+0x268>)
 8002796:	f7fe fbb5 	bl	8000f04 <cliPrintf>
    ret = true;
 800279a:	e7d3      	b.n	8002744 <cliFlash+0x10>
  if(args->argc == 3 && args->isStr(0, "read"))
 800279c:	6963      	ldr	r3, [r4, #20]
 800279e:	4980      	ldr	r1, [pc, #512]	@ (80029a0 <cliFlash+0x26c>)
 80027a0:	2000      	movs	r0, #0
 80027a2:	4798      	blx	r3
 80027a4:	4680      	mov	r8, r0
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d0cf      	beq.n	800274a <cliFlash+0x16>
    addr   = (uint32_t)args->getData(1);
 80027aa:	68a3      	ldr	r3, [r4, #8]
 80027ac:	2001      	movs	r0, #1
 80027ae:	4798      	blx	r3
 80027b0:	4681      	mov	r9, r0
    length = (uint32_t)args->getData(2);
 80027b2:	68a3      	ldr	r3, [r4, #8]
 80027b4:	2002      	movs	r0, #2
 80027b6:	4798      	blx	r3
 80027b8:	4607      	mov	r7, r0
    for (i=0; i<length; i++)
 80027ba:	2500      	movs	r5, #0
 80027bc:	e004      	b.n	80027c8 <cliFlash+0x94>
        cliPrintf( "addr : 0x%X\t Fail\n", addr+i);
 80027be:	4631      	mov	r1, r6
 80027c0:	4878      	ldr	r0, [pc, #480]	@ (80029a4 <cliFlash+0x270>)
 80027c2:	f7fe fb9f 	bl	8000f04 <cliPrintf>
    for (i=0; i<length; i++)
 80027c6:	3501      	adds	r5, #1
 80027c8:	42bd      	cmp	r5, r7
 80027ca:	d20f      	bcs.n	80027ec <cliFlash+0xb8>
      flash_ret = flashRead(addr+i, &data, 1);
 80027cc:	eb05 0609 	add.w	r6, r5, r9
 80027d0:	2201      	movs	r2, #1
 80027d2:	a901      	add	r1, sp, #4
 80027d4:	4630      	mov	r0, r6
 80027d6:	f7ff ff75 	bl	80026c4 <flashRead>
      if (flash_ret == true)
 80027da:	2800      	cmp	r0, #0
 80027dc:	d0ef      	beq.n	80027be <cliFlash+0x8a>
        cliPrintf( "addr : 0x%X\t 0x%02X\n", addr+i, data);
 80027de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80027e2:	4631      	mov	r1, r6
 80027e4:	4870      	ldr	r0, [pc, #448]	@ (80029a8 <cliFlash+0x274>)
 80027e6:	f7fe fb8d 	bl	8000f04 <cliPrintf>
 80027ea:	e7ec      	b.n	80027c6 <cliFlash+0x92>
    ret = true;
 80027ec:	4645      	mov	r5, r8
 80027ee:	e7ac      	b.n	800274a <cliFlash+0x16>
  if(args->argc == 3 && args->isStr(0, "erase"))
 80027f0:	6963      	ldr	r3, [r4, #20]
 80027f2:	496e      	ldr	r1, [pc, #440]	@ (80029ac <cliFlash+0x278>)
 80027f4:	2000      	movs	r0, #0
 80027f6:	4798      	blx	r3
 80027f8:	4681      	mov	r9, r0
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d0a8      	beq.n	8002750 <cliFlash+0x1c>
    addr   = (uint32_t)args->getData(1);
 80027fe:	68a3      	ldr	r3, [r4, #8]
 8002800:	2001      	movs	r0, #1
 8002802:	4798      	blx	r3
 8002804:	4606      	mov	r6, r0
    length = (uint32_t)args->getData(2);
 8002806:	68a3      	ldr	r3, [r4, #8]
 8002808:	2002      	movs	r0, #2
 800280a:	4798      	blx	r3
 800280c:	4607      	mov	r7, r0
    pre_time = millis();
 800280e:	f7fe f979 	bl	8000b04 <millis>
 8002812:	4680      	mov	r8, r0
    flash_ret = flashErase(addr, length);
 8002814:	4639      	mov	r1, r7
 8002816:	4630      	mov	r0, r6
 8002818:	f7ff fe0c 	bl	8002434 <flashErase>
 800281c:	4605      	mov	r5, r0
    cliPrintf( "addr : 0x%X\t len : %d %d ms\n", addr, length, (millis()-pre_time));
 800281e:	f7fe f971 	bl	8000b04 <millis>
 8002822:	eba0 0308 	sub.w	r3, r0, r8
 8002826:	463a      	mov	r2, r7
 8002828:	4631      	mov	r1, r6
 800282a:	4861      	ldr	r0, [pc, #388]	@ (80029b0 <cliFlash+0x27c>)
 800282c:	f7fe fb6a 	bl	8000f04 <cliPrintf>
    if (flash_ret)
 8002830:	b11d      	cbz	r5, 800283a <cliFlash+0x106>
      cliPrintf("OK\n");
 8002832:	4860      	ldr	r0, [pc, #384]	@ (80029b4 <cliFlash+0x280>)
 8002834:	f7fe fb66 	bl	8000f04 <cliPrintf>
 8002838:	e78a      	b.n	8002750 <cliFlash+0x1c>
      cliPrintf("FAIL\n");
 800283a:	485f      	ldr	r0, [pc, #380]	@ (80029b8 <cliFlash+0x284>)
 800283c:	f7fe fb62 	bl	8000f04 <cliPrintf>
    ret = true;
 8002840:	464d      	mov	r5, r9
 8002842:	e785      	b.n	8002750 <cliFlash+0x1c>
  if(args->argc == 3 && args->isStr(0, "write"))
 8002844:	6963      	ldr	r3, [r4, #20]
 8002846:	495d      	ldr	r1, [pc, #372]	@ (80029bc <cliFlash+0x288>)
 8002848:	2000      	movs	r0, #0
 800284a:	4798      	blx	r3
 800284c:	4680      	mov	r8, r0
 800284e:	2800      	cmp	r0, #0
 8002850:	d081      	beq.n	8002756 <cliFlash+0x22>
    addr = (uint32_t)args->getData(1);
 8002852:	68a3      	ldr	r3, [r4, #8]
 8002854:	2001      	movs	r0, #1
 8002856:	4798      	blx	r3
 8002858:	4605      	mov	r5, r0
    data = (uint32_t)args->getData(2);
 800285a:	68a3      	ldr	r3, [r4, #8]
 800285c:	2002      	movs	r0, #2
 800285e:	4798      	blx	r3
 8002860:	9001      	str	r0, [sp, #4]
    pre_time = millis();
 8002862:	f7fe f94f 	bl	8000b04 <millis>
 8002866:	4607      	mov	r7, r0
    flash_ret = flashWrite(addr, (uint8_t *)&data, 4);
 8002868:	2204      	movs	r2, #4
 800286a:	eb0d 0102 	add.w	r1, sp, r2
 800286e:	4628      	mov	r0, r5
 8002870:	f7ff fe74 	bl	800255c <flashWrite>
 8002874:	4606      	mov	r6, r0
    cliPrintf( "addr : 0x%X\t 0x%X %dms\n", addr, data, millis()-pre_time);
 8002876:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800287a:	f7fe f943 	bl	8000b04 <millis>
 800287e:	1bc3      	subs	r3, r0, r7
 8002880:	464a      	mov	r2, r9
 8002882:	4629      	mov	r1, r5
 8002884:	484e      	ldr	r0, [pc, #312]	@ (80029c0 <cliFlash+0x28c>)
 8002886:	f7fe fb3d 	bl	8000f04 <cliPrintf>
    if (flash_ret)
 800288a:	b126      	cbz	r6, 8002896 <cliFlash+0x162>
      cliPrintf("OK\n");
 800288c:	4849      	ldr	r0, [pc, #292]	@ (80029b4 <cliFlash+0x280>)
 800288e:	f7fe fb39 	bl	8000f04 <cliPrintf>
    ret = true;
 8002892:	4645      	mov	r5, r8
 8002894:	e75f      	b.n	8002756 <cliFlash+0x22>
      cliPrintf("FAIL\n");
 8002896:	4848      	ldr	r0, [pc, #288]	@ (80029b8 <cliFlash+0x284>)
 8002898:	f7fe fb34 	bl	8000f04 <cliPrintf>
 800289c:	e7f9      	b.n	8002892 <cliFlash+0x15e>
  if(args->argc == 3 && args->isStr(0, "check"))
 800289e:	6963      	ldr	r3, [r4, #20]
 80028a0:	4948      	ldr	r1, [pc, #288]	@ (80029c4 <cliFlash+0x290>)
 80028a2:	2000      	movs	r0, #0
 80028a4:	4798      	blx	r3
 80028a6:	2800      	cmp	r0, #0
 80028a8:	f43f af59 	beq.w	800275e <cliFlash+0x2a>
    uint32_t data = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	9301      	str	r3, [sp, #4]
    addr    = (uint32_t)args->getData(1);
 80028b0:	68a3      	ldr	r3, [r4, #8]
 80028b2:	2001      	movs	r0, #1
 80028b4:	4798      	blx	r3
 80028b6:	4606      	mov	r6, r0
    length  = (uint32_t)args->getData(2);
 80028b8:	68a3      	ldr	r3, [r4, #8]
 80028ba:	2002      	movs	r0, #2
 80028bc:	4798      	blx	r3
    length -= (length % block);
 80028be:	f020 0503 	bic.w	r5, r0, #3
      cliPrintf("flashErase()..");
 80028c2:	4841      	ldr	r0, [pc, #260]	@ (80029c8 <cliFlash+0x294>)
 80028c4:	f7fe fb1e 	bl	8000f04 <cliPrintf>
      if (flashErase(addr, length) == false)
 80028c8:	4629      	mov	r1, r5
 80028ca:	4630      	mov	r0, r6
 80028cc:	f7ff fdb2 	bl	8002434 <flashErase>
 80028d0:	b918      	cbnz	r0, 80028da <cliFlash+0x1a6>
        cliPrintf("Fail\n");
 80028d2:	483e      	ldr	r0, [pc, #248]	@ (80029cc <cliFlash+0x298>)
 80028d4:	f7fe fb16 	bl	8000f04 <cliPrintf>
        break;
 80028d8:	e744      	b.n	8002764 <cliFlash+0x30>
      cliPrintf("OK\n");
 80028da:	4836      	ldr	r0, [pc, #216]	@ (80029b4 <cliFlash+0x280>)
 80028dc:	f7fe fb12 	bl	8000f04 <cliPrintf>
      cliPrintf("flashWrite()..");
 80028e0:	483b      	ldr	r0, [pc, #236]	@ (80029d0 <cliFlash+0x29c>)
 80028e2:	f7fe fb0f 	bl	8000f04 <cliPrintf>
      for (uint32_t i=0; i<length; i+=block)
 80028e6:	2400      	movs	r4, #0
 80028e8:	42ac      	cmp	r4, r5
 80028ea:	d20d      	bcs.n	8002908 <cliFlash+0x1d4>
        data = i;
 80028ec:	9401      	str	r4, [sp, #4]
        if (flashWrite(addr + i, (uint8_t *)&data, block) == false)
 80028ee:	2204      	movs	r2, #4
 80028f0:	eb0d 0102 	add.w	r1, sp, r2
 80028f4:	19a0      	adds	r0, r4, r6
 80028f6:	f7ff fe31 	bl	800255c <flashWrite>
 80028fa:	b108      	cbz	r0, 8002900 <cliFlash+0x1cc>
      for (uint32_t i=0; i<length; i+=block)
 80028fc:	3404      	adds	r4, #4
 80028fe:	e7f3      	b.n	80028e8 <cliFlash+0x1b4>
          cliPrintf("Fail %d\n", i);
 8002900:	4621      	mov	r1, r4
 8002902:	4834      	ldr	r0, [pc, #208]	@ (80029d4 <cliFlash+0x2a0>)
 8002904:	f7fe fafe 	bl	8000f04 <cliPrintf>
      cliPrintf("OK\n");
 8002908:	482a      	ldr	r0, [pc, #168]	@ (80029b4 <cliFlash+0x280>)
 800290a:	f7fe fafb 	bl	8000f04 <cliPrintf>
      cliPrintf("flashRead() ..");
 800290e:	4832      	ldr	r0, [pc, #200]	@ (80029d8 <cliFlash+0x2a4>)
 8002910:	f7fe faf8 	bl	8000f04 <cliPrintf>
      for (uint32_t i=0; i<length; i+=block)
 8002914:	2400      	movs	r4, #0
 8002916:	42ac      	cmp	r4, r5
 8002918:	d211      	bcs.n	800293e <cliFlash+0x20a>
        data = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
        if (flashRead(addr + i, (uint8_t *)&data, block) == false)
 800291e:	2204      	movs	r2, #4
 8002920:	eb0d 0102 	add.w	r1, sp, r2
 8002924:	19a0      	adds	r0, r4, r6
 8002926:	f7ff fecd 	bl	80026c4 <flashRead>
 800292a:	b120      	cbz	r0, 8002936 <cliFlash+0x202>
        if (data != i)
 800292c:	9b01      	ldr	r3, [sp, #4]
 800292e:	42a3      	cmp	r3, r4
 8002930:	d114      	bne.n	800295c <cliFlash+0x228>
      for (uint32_t i=0; i<length; i+=block)
 8002932:	3404      	adds	r4, #4
 8002934:	e7ef      	b.n	8002916 <cliFlash+0x1e2>
          cliPrintf("Fail %d\n", i);
 8002936:	4621      	mov	r1, r4
 8002938:	4826      	ldr	r0, [pc, #152]	@ (80029d4 <cliFlash+0x2a0>)
 800293a:	f7fe fae3 	bl	8000f04 <cliPrintf>
      cliPrintf("OK\n");
 800293e:	481d      	ldr	r0, [pc, #116]	@ (80029b4 <cliFlash+0x280>)
 8002940:	f7fe fae0 	bl	8000f04 <cliPrintf>
      cliPrintf("flashErase()..");
 8002944:	4820      	ldr	r0, [pc, #128]	@ (80029c8 <cliFlash+0x294>)
 8002946:	f7fe fadd 	bl	8000f04 <cliPrintf>
      if (flashErase(addr, length) == false)
 800294a:	4629      	mov	r1, r5
 800294c:	4630      	mov	r0, r6
 800294e:	f7ff fd71 	bl	8002434 <flashErase>
 8002952:	b940      	cbnz	r0, 8002966 <cliFlash+0x232>
        cliPrintf("Fail\n");
 8002954:	481d      	ldr	r0, [pc, #116]	@ (80029cc <cliFlash+0x298>)
 8002956:	f7fe fad5 	bl	8000f04 <cliPrintf>
        break;
 800295a:	e703      	b.n	8002764 <cliFlash+0x30>
          cliPrintf("Check Fail %d\n", i);
 800295c:	4621      	mov	r1, r4
 800295e:	481f      	ldr	r0, [pc, #124]	@ (80029dc <cliFlash+0x2a8>)
 8002960:	f7fe fad0 	bl	8000f04 <cliPrintf>
          break;
 8002964:	e7eb      	b.n	800293e <cliFlash+0x20a>
      cliPrintf("OK\n");  
 8002966:	4813      	ldr	r0, [pc, #76]	@ (80029b4 <cliFlash+0x280>)
 8002968:	f7fe facc 	bl	8000f04 <cliPrintf>
  if (ret == false)
 800296c:	e6fa      	b.n	8002764 <cliFlash+0x30>
    cliPrintf( "flash info\n");
 800296e:	481c      	ldr	r0, [pc, #112]	@ (80029e0 <cliFlash+0x2ac>)
 8002970:	f7fe fac8 	bl	8000f04 <cliPrintf>
    cliPrintf( "flash read  [addr] [length]\n");
 8002974:	481b      	ldr	r0, [pc, #108]	@ (80029e4 <cliFlash+0x2b0>)
 8002976:	f7fe fac5 	bl	8000f04 <cliPrintf>
    cliPrintf( "flash erase [addr] [length]\n");
 800297a:	481b      	ldr	r0, [pc, #108]	@ (80029e8 <cliFlash+0x2b4>)
 800297c:	f7fe fac2 	bl	8000f04 <cliPrintf>
    cliPrintf( "flash write [addr] [data]\n");
 8002980:	481a      	ldr	r0, [pc, #104]	@ (80029ec <cliFlash+0x2b8>)
 8002982:	f7fe fabf 	bl	8000f04 <cliPrintf>
    cliPrintf( "flash check [addr] [length]\n");
 8002986:	481a      	ldr	r0, [pc, #104]	@ (80029f0 <cliFlash+0x2bc>)
 8002988:	f7fe fabc 	bl	8000f04 <cliPrintf>
}
 800298c:	e6ea      	b.n	8002764 <cliFlash+0x30>
 800298e:	bf00      	nop
 8002990:	080280ec 	.word	0x080280ec
 8002994:	080282fc 	.word	0x080282fc
 8002998:	08028310 	.word	0x08028310
 800299c:	08028324 	.word	0x08028324
 80029a0:	08028214 	.word	0x08028214
 80029a4:	08028350 	.word	0x08028350
 80029a8:	08028338 	.word	0x08028338
 80029ac:	08028364 	.word	0x08028364
 80029b0:	0802836c 	.word	0x0802836c
 80029b4:	08028278 	.word	0x08028278
 80029b8:	0802827c 	.word	0x0802827c
 80029bc:	08028258 	.word	0x08028258
 80029c0:	0802838c 	.word	0x0802838c
 80029c4:	080283a4 	.word	0x080283a4
 80029c8:	080283ac 	.word	0x080283ac
 80029cc:	0802919c 	.word	0x0802919c
 80029d0:	080283bc 	.word	0x080283bc
 80029d4:	080283cc 	.word	0x080283cc
 80029d8:	080283d8 	.word	0x080283d8
 80029dc:	080283e8 	.word	0x080283e8
 80029e0:	080283f8 	.word	0x080283f8
 80029e4:	08028404 	.word	0x08028404
 80029e8:	08028424 	.word	0x08028424
 80029ec:	08028444 	.word	0x08028444
 80029f0:	08028460 	.word	0x08028460

080029f4 <gpioPinMode>:

  return ret;
}

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80029f4:	b500      	push	{lr}
 80029f6:	b087      	sub	sp, #28
  bool ret = true;
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	2300      	movs	r3, #0
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	9304      	str	r3, [sp, #16]
 8002a02:	9305      	str	r3, [sp, #20]


  if (ch >= GPIO_MAX_CH)
 8002a04:	2803      	cmp	r0, #3
 8002a06:	d826      	bhi.n	8002a56 <gpioPinMode+0x62>
  {
    return false;
  }

  switch(mode)
 8002a08:	3901      	subs	r1, #1
 8002a0a:	2904      	cmp	r1, #4
 8002a0c:	d806      	bhi.n	8002a1c <gpioPinMode+0x28>
 8002a0e:	e8df f001 	tbb	[pc, r1]
 8002a12:	1303      	.short	0x1303
 8002a14:	1916      	.short	0x1916
 8002a16:	1d          	.byte	0x1d
 8002a17:	00          	.byte	0x00
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      break;

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      break;
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <gpioPinMode+0x68>)
 8002a1e:	0102      	lsls	r2, r0, #4
 8002a20:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002a24:	6841      	ldr	r1, [r0, #4]
 8002a26:	9101      	str	r1, [sp, #4]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8002a28:	a901      	add	r1, sp, #4
 8002a2a:	5898      	ldr	r0, [r3, r2]
 8002a2c:	f006 fe2c 	bl	8009688 <HAL_GPIO_Init>

  return ret;
 8002a30:	2001      	movs	r0, #1
}
 8002a32:	b007      	add	sp, #28
 8002a34:	f85d fb04 	ldr.w	pc, [sp], #4
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	9303      	str	r3, [sp, #12]
      break;
 8002a3c:	e7ee      	b.n	8002a1c <gpioPinMode+0x28>
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	9302      	str	r3, [sp, #8]
      break;
 8002a42:	e7eb      	b.n	8002a1c <gpioPinMode+0x28>
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a48:	9303      	str	r3, [sp, #12]
      break;
 8002a4a:	e7e7      	b.n	8002a1c <gpioPinMode+0x28>
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a50:	2302      	movs	r3, #2
 8002a52:	9303      	str	r3, [sp, #12]
      break;
 8002a54:	e7e2      	b.n	8002a1c <gpioPinMode+0x28>
    return false;
 8002a56:	2000      	movs	r0, #0
 8002a58:	e7eb      	b.n	8002a32 <gpioPinMode+0x3e>
 8002a5a:	bf00      	nop
 8002a5c:	080285b8 	.word	0x080285b8

08002a60 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
  if (ch >= GPIO_MAX_CH)
 8002a60:	2803      	cmp	r0, #3
 8002a62:	d819      	bhi.n	8002a98 <gpioPinWrite+0x38>
{
 8002a64:	b508      	push	{r3, lr}
  {
    return;
  }

  if (value)
 8002a66:	b159      	cbz	r1, 8002a80 <gpioPinWrite+0x20>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <gpioPinWrite+0x3c>)
 8002a6a:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8002a6e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002a72:	7a42      	ldrb	r2, [r0, #9]
 8002a74:	8881      	ldrh	r1, [r0, #4]
 8002a76:	f853 000c 	ldr.w	r0, [r3, ip]
 8002a7a:	f006 ffb8 	bl	80099ee <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
  }
}
 8002a7e:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <gpioPinWrite+0x3c>)
 8002a82:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8002a86:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002a8a:	7a82      	ldrb	r2, [r0, #10]
 8002a8c:	8881      	ldrh	r1, [r0, #4]
 8002a8e:	f853 000c 	ldr.w	r0, [r3, ip]
 8002a92:	f006 ffac 	bl	80099ee <HAL_GPIO_WritePin>
 8002a96:	e7f2      	b.n	8002a7e <gpioPinWrite+0x1e>
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	080285b8 	.word	0x080285b8

08002aa0 <gpioInit>:
{
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	b086      	sub	sp, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa4:	4b30      	ldr	r3, [pc, #192]	@ (8002b68 <gpioInit+0xc8>)
 8002aa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002aaa:	f042 0202 	orr.w	r2, r2, #2
 8002aae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002ab2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ab6:	f002 0202 	and.w	r2, r2, #2
 8002aba:	9200      	str	r2, [sp, #0]
 8002abc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ac2:	f042 0204 	orr.w	r2, r2, #4
 8002ac6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002aca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ace:	f002 0204 	and.w	r2, r2, #4
 8002ad2:	9201      	str	r2, [sp, #4]
 8002ad4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ad6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ade:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002ae2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ae6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002aea:	9202      	str	r2, [sp, #8]
 8002aec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002af2:	f042 0208 	orr.w	r2, r2, #8
 8002af6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002afa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002afe:	f002 0208 	and.w	r2, r2, #8
 8002b02:	9203      	str	r2, [sp, #12]
 8002b04:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b0a:	f042 0210 	orr.w	r2, r2, #16
 8002b0e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002b12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b16:	f002 0210 	and.w	r2, r2, #16
 8002b1a:	9204      	str	r2, [sp, #16]
 8002b1c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b22:	f042 0220 	orr.w	r2, r2, #32
 8002b26:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	9305      	str	r3, [sp, #20]
 8002b34:	9b05      	ldr	r3, [sp, #20]
  for (int i=0; i<GPIO_MAX_CH; i++)
 8002b36:	2400      	movs	r4, #0
 8002b38:	e00c      	b.n	8002b54 <gpioInit+0xb4>
    gpioPinMode(i, gpio_tbl[i].mode);
 8002b3a:	b2e6      	uxtb	r6, r4
 8002b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8002b6c <gpioInit+0xcc>)
 8002b3e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 8002b42:	7a29      	ldrb	r1, [r5, #8]
 8002b44:	4630      	mov	r0, r6
 8002b46:	f7ff ff55 	bl	80029f4 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8002b4a:	7ae9      	ldrb	r1, [r5, #11]
 8002b4c:	4630      	mov	r0, r6
 8002b4e:	f7ff ff87 	bl	8002a60 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8002b52:	3401      	adds	r4, #1
 8002b54:	2c03      	cmp	r4, #3
 8002b56:	ddf0      	ble.n	8002b3a <gpioInit+0x9a>
  cliAdd("gpio", cliGpio);
 8002b58:	4905      	ldr	r1, [pc, #20]	@ (8002b70 <gpioInit+0xd0>)
 8002b5a:	4806      	ldr	r0, [pc, #24]	@ (8002b74 <gpioInit+0xd4>)
 8002b5c:	f7fe fc80 	bl	8001460 <cliAdd>
}
 8002b60:	2001      	movs	r0, #1
 8002b62:	b006      	add	sp, #24
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	bf00      	nop
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	080285b8 	.word	0x080285b8
 8002b70:	08002ba5 	.word	0x08002ba5
 8002b74:	08028500 	.word	0x08028500

08002b78 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
  bool ret = false;

  if (ch >= GPIO_MAX_CH)
 8002b78:	2803      	cmp	r0, #3
 8002b7a:	d901      	bls.n	8002b80 <gpioPinRead+0x8>
  {
    return false;
 8002b7c:	2000      	movs	r0, #0
  {
    ret = true;
  }

  return ret;
}
 8002b7e:	4770      	bx	lr
{
 8002b80:	b510      	push	{r4, lr}
  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002b82:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <gpioPinRead+0x28>)
 8002b84:	0102      	lsls	r2, r0, #4
 8002b86:	eb03 1400 	add.w	r4, r3, r0, lsl #4
 8002b8a:	88a1      	ldrh	r1, [r4, #4]
 8002b8c:	5898      	ldr	r0, [r3, r2]
 8002b8e:	f006 ff27 	bl	80099e0 <HAL_GPIO_ReadPin>
 8002b92:	7a63      	ldrb	r3, [r4, #9]
 8002b94:	4298      	cmp	r0, r3
 8002b96:	d001      	beq.n	8002b9c <gpioPinRead+0x24>
  bool ret = false;
 8002b98:	2000      	movs	r0, #0
}
 8002b9a:	bd10      	pop	{r4, pc}
    ret = true;
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	e7fc      	b.n	8002b9a <gpioPinRead+0x22>
 8002ba0:	080285b8 	.word	0x080285b8

08002ba4 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	4605      	mov	r5, r0
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002ba8:	8803      	ldrh	r3, [r0, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d00c      	beq.n	8002bc8 <cliGpio+0x24>
  bool ret = false;
 8002bae:	2600      	movs	r6, #0
      cliPrintf("%d %-16s - %d\n", i, gpio_tbl[i].p_name, gpioPinRead(i));
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "show") == true)
 8002bb0:	882b      	ldrh	r3, [r5, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d022      	beq.n	8002bfc <cliGpio+0x58>
      delay(100);
    }
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8002bb6:	882b      	ldrh	r3, [r5, #0]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d03d      	beq.n	8002c38 <cliGpio+0x94>
    }

    ret = true;
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8002bbc:	882b      	ldrh	r3, [r5, #0]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d058      	beq.n	8002c74 <cliGpio+0xd0>

    cliPrintf("gpio write %d : %d\n", ch, data);
    ret = true;
  }

  if (ret != true)
 8002bc2:	2e00      	cmp	r6, #0
 8002bc4:	d071      	beq.n	8002caa <cliGpio+0x106>
    cliPrintf("gpio info\n");
    cliPrintf("gpio show\n");
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
  }
}
 8002bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002bc8:	6943      	ldr	r3, [r0, #20]
 8002bca:	493f      	ldr	r1, [pc, #252]	@ (8002cc8 <cliGpio+0x124>)
 8002bcc:	2000      	movs	r0, #0
 8002bce:	4798      	blx	r3
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d0ec      	beq.n	8002bb0 <cliGpio+0xc>
    for (int i=0; i<GPIO_MAX_CH; i++)
 8002bd6:	2400      	movs	r4, #0
 8002bd8:	e00d      	b.n	8002bf6 <cliGpio+0x52>
      cliPrintf("%d %-16s - %d\n", i, gpio_tbl[i].p_name, gpioPinRead(i));
 8002bda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ccc <cliGpio+0x128>)
 8002bdc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002be0:	68df      	ldr	r7, [r3, #12]
 8002be2:	b2e0      	uxtb	r0, r4
 8002be4:	f7ff ffc8 	bl	8002b78 <gpioPinRead>
 8002be8:	4603      	mov	r3, r0
 8002bea:	463a      	mov	r2, r7
 8002bec:	4621      	mov	r1, r4
 8002bee:	4838      	ldr	r0, [pc, #224]	@ (8002cd0 <cliGpio+0x12c>)
 8002bf0:	f7fe f988 	bl	8000f04 <cliPrintf>
    for (int i=0; i<GPIO_MAX_CH; i++)
 8002bf4:	3401      	adds	r4, #1
 8002bf6:	2c03      	cmp	r4, #3
 8002bf8:	ddef      	ble.n	8002bda <cliGpio+0x36>
 8002bfa:	e7d9      	b.n	8002bb0 <cliGpio+0xc>
  if (args->argc == 1 && args->isStr(0, "show") == true)
 8002bfc:	696b      	ldr	r3, [r5, #20]
 8002bfe:	4935      	ldr	r1, [pc, #212]	@ (8002cd4 <cliGpio+0x130>)
 8002c00:	2000      	movs	r0, #0
 8002c02:	4798      	blx	r3
 8002c04:	4607      	mov	r7, r0
 8002c06:	b980      	cbnz	r0, 8002c2a <cliGpio+0x86>
 8002c08:	e7d5      	b.n	8002bb6 <cliGpio+0x12>
        cliPrintf("%d", gpioPinRead(i));
 8002c0a:	b2e0      	uxtb	r0, r4
 8002c0c:	f7ff ffb4 	bl	8002b78 <gpioPinRead>
 8002c10:	4601      	mov	r1, r0
 8002c12:	4831      	ldr	r0, [pc, #196]	@ (8002cd8 <cliGpio+0x134>)
 8002c14:	f7fe f976 	bl	8000f04 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8002c18:	3401      	adds	r4, #1
 8002c1a:	2c03      	cmp	r4, #3
 8002c1c:	ddf5      	ble.n	8002c0a <cliGpio+0x66>
      cliPrintf("\n");
 8002c1e:	482f      	ldr	r0, [pc, #188]	@ (8002cdc <cliGpio+0x138>)
 8002c20:	f7fe f970 	bl	8000f04 <cliPrintf>
      delay(100);
 8002c24:	2064      	movs	r0, #100	@ 0x64
 8002c26:	f7fd ff69 	bl	8000afc <delay>
    while(cliKeepLoop())
 8002c2a:	f7fe fc0d 	bl	8001448 <cliKeepLoop>
 8002c2e:	b108      	cbz	r0, 8002c34 <cliGpio+0x90>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8002c30:	2400      	movs	r4, #0
 8002c32:	e7f2      	b.n	8002c1a <cliGpio+0x76>
    ret = true;
 8002c34:	463e      	mov	r6, r7
 8002c36:	e7be      	b.n	8002bb6 <cliGpio+0x12>
  if (args->argc == 2 && args->isStr(0, "read") == true)
 8002c38:	696b      	ldr	r3, [r5, #20]
 8002c3a:	4929      	ldr	r1, [pc, #164]	@ (8002ce0 <cliGpio+0x13c>)
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	4798      	blx	r3
 8002c40:	4607      	mov	r7, r0
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d0ba      	beq.n	8002bbc <cliGpio+0x18>
    ch = (uint8_t)args->getData(1);
 8002c46:	68ab      	ldr	r3, [r5, #8]
 8002c48:	2001      	movs	r0, #1
 8002c4a:	4798      	blx	r3
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	b2c6      	uxtb	r6, r0
    while(cliKeepLoop())
 8002c50:	e00a      	b.n	8002c68 <cliGpio+0xc4>
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8002c52:	4630      	mov	r0, r6
 8002c54:	f7ff ff90 	bl	8002b78 <gpioPinRead>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	b2e1      	uxtb	r1, r4
 8002c5c:	4821      	ldr	r0, [pc, #132]	@ (8002ce4 <cliGpio+0x140>)
 8002c5e:	f7fe f951 	bl	8000f04 <cliPrintf>
      delay(100);
 8002c62:	2064      	movs	r0, #100	@ 0x64
 8002c64:	f7fd ff4a 	bl	8000afc <delay>
    while(cliKeepLoop())
 8002c68:	f7fe fbee 	bl	8001448 <cliKeepLoop>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d1f0      	bne.n	8002c52 <cliGpio+0xae>
    ret = true;
 8002c70:	463e      	mov	r6, r7
 8002c72:	e7a3      	b.n	8002bbc <cliGpio+0x18>
  if (args->argc == 3 && args->isStr(0, "write") == true)
 8002c74:	696b      	ldr	r3, [r5, #20]
 8002c76:	491c      	ldr	r1, [pc, #112]	@ (8002ce8 <cliGpio+0x144>)
 8002c78:	2000      	movs	r0, #0
 8002c7a:	4798      	blx	r3
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d0a0      	beq.n	8002bc2 <cliGpio+0x1e>
    ch   = (uint8_t)args->getData(1);
 8002c80:	68ab      	ldr	r3, [r5, #8]
 8002c82:	2001      	movs	r0, #1
 8002c84:	4798      	blx	r3
 8002c86:	b2c4      	uxtb	r4, r0
    data = (uint8_t)args->getData(2);
 8002c88:	68ab      	ldr	r3, [r5, #8]
 8002c8a:	2002      	movs	r0, #2
 8002c8c:	4798      	blx	r3
    gpioPinWrite(ch, data);
 8002c8e:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 8002c92:	bf14      	ite	ne
 8002c94:	2101      	movne	r1, #1
 8002c96:	2100      	moveq	r1, #0
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7ff fee1 	bl	8002a60 <gpioPinWrite>
    cliPrintf("gpio write %d : %d\n", ch, data);
 8002c9e:	462a      	mov	r2, r5
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	4812      	ldr	r0, [pc, #72]	@ (8002cec <cliGpio+0x148>)
 8002ca4:	f7fe f92e 	bl	8000f04 <cliPrintf>
  if (ret != true)
 8002ca8:	e78d      	b.n	8002bc6 <cliGpio+0x22>
    cliPrintf("gpio info\n");
 8002caa:	4811      	ldr	r0, [pc, #68]	@ (8002cf0 <cliGpio+0x14c>)
 8002cac:	f7fe f92a 	bl	8000f04 <cliPrintf>
    cliPrintf("gpio show\n");
 8002cb0:	4810      	ldr	r0, [pc, #64]	@ (8002cf4 <cliGpio+0x150>)
 8002cb2:	f7fe f927 	bl	8000f04 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8002cb6:	2103      	movs	r1, #3
 8002cb8:	480f      	ldr	r0, [pc, #60]	@ (8002cf8 <cliGpio+0x154>)
 8002cba:	f7fe f923 	bl	8000f04 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	480e      	ldr	r0, [pc, #56]	@ (8002cfc <cliGpio+0x158>)
 8002cc2:	f7fe f91f 	bl	8000f04 <cliPrintf>
}
 8002cc6:	e77e      	b.n	8002bc6 <cliGpio+0x22>
 8002cc8:	080280ec 	.word	0x080280ec
 8002ccc:	080285b8 	.word	0x080285b8
 8002cd0:	08028508 	.word	0x08028508
 8002cd4:	08028104 	.word	0x08028104
 8002cd8:	0802810c 	.word	0x0802810c
 8002cdc:	0802921c 	.word	0x0802921c
 8002ce0:	08028214 	.word	0x08028214
 8002ce4:	08028518 	.word	0x08028518
 8002ce8:	08028258 	.word	0x08028258
 8002cec:	0802852c 	.word	0x0802852c
 8002cf0:	08028540 	.word	0x08028540
 8002cf4:	0802854c 	.word	0x0802854c
 8002cf8:	08028558 	.word	0x08028558
 8002cfc:	0802856c 	.word	0x0802856c

08002d00 <i2cGetTimming>:

uint32_t i2cGetTimming(uint32_t freq_khz)
{
  uint32_t ret;

  switch(freq_khz)
 8002d00:	2864      	cmp	r0, #100	@ 0x64
 8002d02:	d001      	beq.n	8002d08 <i2cGetTimming+0x8>
    case 100:
      ret = 0x60100AB6;
      break;

    case 400:
      ret = 0x00D049FB;
 8002d04:	4801      	ldr	r0, [pc, #4]	@ (8002d0c <i2cGetTimming+0xc>)
      ret = 0x00D049FB;
      break;
  };

  return ret;
}
 8002d06:	4770      	bx	lr
  switch(freq_khz)
 8002d08:	4801      	ldr	r0, [pc, #4]	@ (8002d10 <i2cGetTimming+0x10>)
 8002d0a:	4770      	bx	lr
 8002d0c:	00d049fb 	.word	0x00d049fb
 8002d10:	60100ab6 	.word	0x60100ab6

08002d14 <delayUs>:
{
  return i2c_errcount[ch];
}

void delayUs(uint32_t us)
{
 8002d14:	b082      	sub	sp, #8
  volatile uint32_t i;

  for (i=0; i<us*1000; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	e002      	b.n	8002d22 <delayUs+0xe>
 8002d1c:	9b01      	ldr	r3, [sp, #4]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d26:	fb00 f303 	mul.w	r3, r0, r3
 8002d2a:	9a01      	ldr	r2, [sp, #4]
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d8f5      	bhi.n	8002d1c <delayUs+0x8>
  {

  }
}
 8002d30:	b002      	add	sp, #8
 8002d32:	4770      	bx	lr

08002d34 <i2cInit>:
{
 8002d34:	b508      	push	{r3, lr}
  for (i=0; i<I2C_MAX_CH; i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	e00a      	b.n	8002d50 <i2cInit+0x1c>
    i2c_timeout[i] = 10;
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <i2cInit+0x30>)
 8002d3c:	210a      	movs	r1, #10
 8002d3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    i2c_errcount[i] = 0;
 8002d42:	2200      	movs	r2, #0
 8002d44:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <i2cInit+0x34>)
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    is_begin[i] = false;
 8002d4a:	4908      	ldr	r1, [pc, #32]	@ (8002d6c <i2cInit+0x38>)
 8002d4c:	54ca      	strb	r2, [r1, r3]
  for (i=0; i<I2C_MAX_CH; i++)
 8002d4e:	3301      	adds	r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d9f2      	bls.n	8002d3a <i2cInit+0x6>
  cliAdd("i2c", cliI2C);
 8002d54:	4906      	ldr	r1, [pc, #24]	@ (8002d70 <i2cInit+0x3c>)
 8002d56:	4807      	ldr	r0, [pc, #28]	@ (8002d74 <i2cInit+0x40>)
 8002d58:	f7fe fb82 	bl	8001460 <cliAdd>
  is_init = true;
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <i2cInit+0x44>)
 8002d60:	7018      	strb	r0, [r3, #0]
}
 8002d62:	bd08      	pop	{r3, pc}
 8002d64:	24000e44 	.word	0x24000e44
 8002d68:	24000e3c 	.word	0x24000e3c
 8002d6c:	24000e30 	.word	0x24000e30
 8002d70:	08002fd9 	.word	0x08002fd9
 8002d74:	080285f8 	.word	0x080285f8
 8002d78:	24000e32 	.word	0x24000e32

08002d7c <i2cIsBegin>:
}
 8002d7c:	4b01      	ldr	r3, [pc, #4]	@ (8002d84 <i2cIsBegin+0x8>)
 8002d7e:	5c18      	ldrb	r0, [r3, r0]
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	24000e30 	.word	0x24000e30

08002d88 <i2cReset>:
{
 8002d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	4605      	mov	r5, r0
  GPIO_InitStruct.Pin       = p_pin->scl_pin;
 8002d90:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8002d94:	4e39      	ldr	r6, [pc, #228]	@ (8002e7c <i2cReset+0xf4>)
 8002d96:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8002d9a:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8002d9e:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8002da2:	f04f 0a11 	mov.w	sl, #17
 8002da6:	f8cd a008 	str.w	sl, [sp, #8]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002daa:	2400      	movs	r4, #0
 8002dac:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(p_pin->scl_port, &GPIO_InitStruct);
 8002db2:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8002db6:	a901      	add	r1, sp, #4
 8002db8:	4640      	mov	r0, r8
 8002dba:	f006 fc65 	bl	8009688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = p_pin->sda_pin;
 8002dbe:	6977      	ldr	r7, [r6, #20]
 8002dc0:	9701      	str	r7, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8002dc2:	f8cd a008 	str.w	sl, [sp, #8]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002dc6:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(p_pin->sda_port, &GPIO_InitStruct);
 8002dc8:	6936      	ldr	r6, [r6, #16]
 8002dca:	a901      	add	r1, sp, #4
 8002dcc:	4630      	mov	r0, r6
 8002dce:	f006 fc5b 	bl	8009688 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	fa1f f189 	uxth.w	r1, r9
 8002dd8:	4640      	mov	r0, r8
 8002dda:	f006 fe08 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8002dde:	2201      	movs	r2, #1
 8002de0:	b2b9      	uxth	r1, r7
 8002de2:	4630      	mov	r0, r6
 8002de4:	f006 fe03 	bl	80099ee <HAL_GPIO_WritePin>
  delayUs(5);
 8002de8:	2005      	movs	r0, #5
 8002dea:	f7ff ff93 	bl	8002d14 <delayUs>
  for (int i = 0; i < 9; i++)
 8002dee:	e017      	b.n	8002e20 <i2cReset+0x98>
    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8002df0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002df4:	4b21      	ldr	r3, [pc, #132]	@ (8002e7c <i2cReset+0xf4>)
 8002df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002dfa:	899f      	ldrh	r7, [r3, #12]
 8002dfc:	689e      	ldr	r6, [r3, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4639      	mov	r1, r7
 8002e02:	4630      	mov	r0, r6
 8002e04:	f006 fdf3 	bl	80099ee <HAL_GPIO_WritePin>
    delayUs(5);
 8002e08:	2005      	movs	r0, #5
 8002e0a:	f7ff ff83 	bl	8002d14 <delayUs>
    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4639      	mov	r1, r7
 8002e12:	4630      	mov	r0, r6
 8002e14:	f006 fdeb 	bl	80099ee <HAL_GPIO_WritePin>
    delayUs(5);
 8002e18:	2005      	movs	r0, #5
 8002e1a:	f7ff ff7b 	bl	8002d14 <delayUs>
  for (int i = 0; i < 9; i++)
 8002e1e:	3401      	adds	r4, #1
 8002e20:	2c08      	cmp	r4, #8
 8002e22:	dde5      	ble.n	8002df0 <i2cReset+0x68>
  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8002e24:	4e15      	ldr	r6, [pc, #84]	@ (8002e7c <i2cReset+0xf4>)
 8002e26:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8002e2a:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8002e2e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8002e32:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	4651      	mov	r1, sl
 8002e3a:	4648      	mov	r0, r9
 8002e3c:	f006 fdd7 	bl	80099ee <HAL_GPIO_WritePin>
  delayUs(5);
 8002e40:	2005      	movs	r0, #5
 8002e42:	f7ff ff67 	bl	8002d14 <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_RESET);
 8002e46:	f8b4 8014 	ldrh.w	r8, [r4, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	6920      	ldr	r0, [r4, #16]
 8002e50:	f006 fdcd 	bl	80099ee <HAL_GPIO_WritePin>
  delayUs(5);
 8002e54:	2005      	movs	r0, #5
 8002e56:	f7ff ff5d 	bl	8002d14 <delayUs>
  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4651      	mov	r1, sl
 8002e5e:	4648      	mov	r0, r9
 8002e60:	f006 fdc5 	bl	80099ee <HAL_GPIO_WritePin>
  delayUs(5);
 8002e64:	2005      	movs	r0, #5
 8002e66:	f7ff ff55 	bl	8002d14 <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	6920      	ldr	r0, [r4, #16]
 8002e70:	f006 fdbd 	bl	80099ee <HAL_GPIO_WritePin>
}
 8002e74:	b006      	add	sp, #24
 8002e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08028734 	.word	0x08028734

08002e80 <i2cBegin>:
{
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8002e82:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002e86:	4b18      	ldr	r3, [pc, #96]	@ (8002ee8 <i2cBegin+0x68>)
 8002e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e8c:	685d      	ldr	r5, [r3, #4]
  if (ch >= I2C_MAX_CH)
 8002e8e:	2801      	cmp	r0, #1
 8002e90:	d901      	bls.n	8002e96 <i2cBegin+0x16>
    return false;
 8002e92:	2000      	movs	r0, #0
}
 8002e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e96:	4604      	mov	r4, r0
      i2c_freq[ch] = freq_khz;
 8002e98:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <i2cBegin+0x6c>)
 8002e9a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      p_handle->Instance             = i2c_tbl[ch].p_i2c;
 8002e9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <i2cBegin+0x68>)
 8002ea0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002ea4:	602b      	str	r3, [r5, #0]
      p_handle->Init.Timing          = i2cGetTimming(freq_khz);
 8002ea6:	4608      	mov	r0, r1
 8002ea8:	f7ff ff2a 	bl	8002d00 <i2cGetTimming>
 8002eac:	6068      	str	r0, [r5, #4]
      p_handle->Init.OwnAddress1     = 0x00;
 8002eae:	2700      	movs	r7, #0
 8002eb0:	60af      	str	r7, [r5, #8]
      p_handle->Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8002eb2:	2601      	movs	r6, #1
 8002eb4:	60ee      	str	r6, [r5, #12]
      p_handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eb6:	612f      	str	r7, [r5, #16]
      p_handle->Init.OwnAddress2     = 0x00;
 8002eb8:	616f      	str	r7, [r5, #20]
      p_handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eba:	61ef      	str	r7, [r5, #28]
      p_handle->Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8002ebc:	622f      	str	r7, [r5, #32]
      i2cReset(ch);
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7ff ff62 	bl	8002d88 <i2cReset>
      HAL_I2C_DeInit(p_handle);
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f007 f811 	bl	8009eec <HAL_I2C_DeInit>
      if(HAL_I2C_Init(p_handle) != HAL_OK)
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f006 ffaa 	bl	8009e24 <HAL_I2C_Init>
      HAL_I2CEx_ConfigAnalogFilter(p_handle,I2C_ANALOGFILTER_ENABLE);
 8002ed0:	4639      	mov	r1, r7
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f007 fe45 	bl	800ab62 <HAL_I2CEx_ConfigAnalogFilter>
      HAL_I2CEx_ConfigDigitalFilter(p_handle, 0);
 8002ed8:	4639      	mov	r1, r7
 8002eda:	4628      	mov	r0, r5
 8002edc:	f007 fe6f 	bl	800abbe <HAL_I2CEx_ConfigDigitalFilter>
      is_begin[ch] = true;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <i2cBegin+0x70>)
 8002ee2:	551e      	strb	r6, [r3, r4]
  return ret;
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	e7d5      	b.n	8002e94 <i2cBegin+0x14>
 8002ee8:	08028734 	.word	0x08028734
 8002eec:	24000e34 	.word	0x24000e34
 8002ef0:	24000e30 	.word	0x24000e30

08002ef4 <i2cIsDeviceReady>:
{
 8002ef4:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8002ef6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <i2cIsDeviceReady+0x24>)
 8002efc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  if (HAL_I2C_IsDeviceReady(p_handle, dev_addr << 1, 10, 10) == HAL_OK)
 8002f00:	230a      	movs	r3, #10
 8002f02:	461a      	mov	r2, r3
 8002f04:	0049      	lsls	r1, r1, #1
 8002f06:	6840      	ldr	r0, [r0, #4]
 8002f08:	f007 f9b6 	bl	800a278 <HAL_I2C_IsDeviceReady>
 8002f0c:	b108      	cbz	r0, 8002f12 <i2cIsDeviceReady+0x1e>
  return false;
 8002f0e:	2000      	movs	r0, #0
}
 8002f10:	bd08      	pop	{r3, pc}
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002f12:	b662      	cpsie	i
    return true;
 8002f14:	2001      	movs	r0, #1
 8002f16:	e7fb      	b.n	8002f10 <i2cIsDeviceReady+0x1c>
 8002f18:	08028734 	.word	0x08028734

08002f1c <i2cReadBytes>:
{
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	4684      	mov	ip, r0
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8002f22:	eb00 0e40 	add.w	lr, r0, r0, lsl #1
 8002f26:	480d      	ldr	r0, [pc, #52]	@ (8002f5c <i2cReadBytes+0x40>)
 8002f28:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 8002f2c:	6840      	ldr	r0, [r0, #4]
  if (ch >= I2C_MAX_CH)
 8002f2e:	f1bc 0f01 	cmp.w	ip, #1
 8002f32:	d902      	bls.n	8002f3a <i2cReadBytes+0x1e>
    return false;
 8002f34:	2000      	movs	r0, #0
}
 8002f36:	b004      	add	sp, #16
 8002f38:	bd10      	pop	{r4, pc}
  i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8002f3a:	0049      	lsls	r1, r1, #1
 8002f3c:	b289      	uxth	r1, r1
 8002f3e:	9c07      	ldr	r4, [sp, #28]
 8002f40:	9402      	str	r4, [sp, #8]
 8002f42:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8002f46:	9401      	str	r4, [sp, #4]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f007 f8bc 	bl	800a0c8 <HAL_I2C_Mem_Read>
  if( i2c_ret == HAL_OK )
 8002f50:	b908      	cbnz	r0, 8002f56 <i2cReadBytes+0x3a>
    ret = true;
 8002f52:	2001      	movs	r0, #1
 8002f54:	e7ef      	b.n	8002f36 <i2cReadBytes+0x1a>
    ret = false;
 8002f56:	2000      	movs	r0, #0
 8002f58:	e7ed      	b.n	8002f36 <i2cReadBytes+0x1a>
 8002f5a:	bf00      	nop
 8002f5c:	08028734 	.word	0x08028734

08002f60 <i2cReadByte>:
{
 8002f60:	b510      	push	{r4, lr}
 8002f62:	b082      	sub	sp, #8
  return i2cReadBytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 8002f64:	9c04      	ldr	r4, [sp, #16]
 8002f66:	9401      	str	r4, [sp, #4]
 8002f68:	2401      	movs	r4, #1
 8002f6a:	9400      	str	r4, [sp, #0]
 8002f6c:	f7ff ffd6 	bl	8002f1c <i2cReadBytes>
}
 8002f70:	b002      	add	sp, #8
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <i2cWriteBytes>:
{
 8002f74:	b510      	push	{r4, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	4684      	mov	ip, r0
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8002f7a:	eb00 0e40 	add.w	lr, r0, r0, lsl #1
 8002f7e:	480d      	ldr	r0, [pc, #52]	@ (8002fb4 <i2cWriteBytes+0x40>)
 8002f80:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 8002f84:	6840      	ldr	r0, [r0, #4]
  if (ch >= I2C_MAX_CH)
 8002f86:	f1bc 0f01 	cmp.w	ip, #1
 8002f8a:	d902      	bls.n	8002f92 <i2cWriteBytes+0x1e>
    return false;
 8002f8c:	2000      	movs	r0, #0
}
 8002f8e:	b004      	add	sp, #16
 8002f90:	bd10      	pop	{r4, pc}
  i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8002f92:	0049      	lsls	r1, r1, #1
 8002f94:	b289      	uxth	r1, r1
 8002f96:	9c07      	ldr	r4, [sp, #28]
 8002f98:	9402      	str	r4, [sp, #8]
 8002f9a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8002f9e:	9401      	str	r4, [sp, #4]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f006 ffbb 	bl	8009f1e <HAL_I2C_Mem_Write>
  if(i2c_ret == HAL_OK)
 8002fa8:	b908      	cbnz	r0, 8002fae <i2cWriteBytes+0x3a>
    ret = true;
 8002faa:	2001      	movs	r0, #1
 8002fac:	e7ef      	b.n	8002f8e <i2cWriteBytes+0x1a>
    ret = false;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e7ed      	b.n	8002f8e <i2cWriteBytes+0x1a>
 8002fb2:	bf00      	nop
 8002fb4:	08028734 	.word	0x08028734

08002fb8 <i2cWriteByte>:
{
 8002fb8:	b500      	push	{lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	f88d 300f 	strb.w	r3, [sp, #15]
  return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 8002fc0:	9b06      	ldr	r3, [sp, #24]
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	f10d 030f 	add.w	r3, sp, #15
 8002fcc:	f7ff ffd2 	bl	8002f74 <i2cWriteBytes>
}
 8002fd0:	b005      	add	sp, #20
 8002fd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002fd8 <cliI2C>:
}


#ifdef _USE_HW_CLI
void cliI2C(cli_args_t *args)
{
 8002fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fdc:	b0a2      	sub	sp, #136	@ 0x88
 8002fde:	4604      	mov	r4, r0
  uint32_t i;
  uint8_t i2c_data[128];
  uint32_t pre_time;


  if (args->argc == 2)
 8002fe0:	8803      	ldrh	r3, [r0, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d03a      	beq.n	800305c <cliI2C+0x84>
      {
        cliPrintf("I2C CH%d Begin Fail\n", print_ch + 1);
      }
    }
  }
  else if (args->argc == 5)
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d127      	bne.n	800303a <cliI2C+0x62>
  {
    print_ch = (uint16_t) args->getData(1);
 8002fea:	6883      	ldr	r3, [r0, #8]
 8002fec:	2001      	movs	r0, #1
 8002fee:	4798      	blx	r3
    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8002ff0:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 8002ff4:	d074      	beq.n	80030e0 <cliI2C+0x108>
 8002ff6:	2d02      	cmp	r5, #2
 8002ff8:	bf28      	it	cs
 8002ffa:	2502      	movcs	r5, #2

    dev_addr = (uint16_t) args->getData(2);
 8002ffc:	68a3      	ldr	r3, [r4, #8]
 8002ffe:	2002      	movs	r0, #2
 8003000:	4798      	blx	r3
 8003002:	fa1f f980 	uxth.w	r9, r0
    reg_addr = (uint16_t) args->getData(3);
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	2003      	movs	r0, #3
 800300a:	4798      	blx	r3
 800300c:	4606      	mov	r6, r0
 800300e:	fa1f fa80 	uxth.w	sl, r0
    length   = (uint16_t) args->getData(4);
 8003012:	68a3      	ldr	r3, [r4, #8]
 8003014:	2004      	movs	r0, #4
 8003016:	4798      	blx	r3
 8003018:	4607      	mov	r7, r0
    ch       = print_ch - 1;
 800301a:	f105 38ff 	add.w	r8, r5, #4294967295
 800301e:	fa5f f888 	uxtb.w	r8, r8

    if(args->isStr(0, "read") == true)
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	494d      	ldr	r1, [pc, #308]	@ (800315c <cliI2C+0x184>)
 8003026:	2000      	movs	r0, #0
 8003028:	4798      	blx	r3
 800302a:	2800      	cmp	r0, #0
 800302c:	d15f      	bne.n	80030ee <cliI2C+0x116>
          cliPrintf("%d I2C - Fail \n", print_ch);
          break;
        }
      }
    }
    else if(args->isStr(0, "write") == true)
 800302e:	6963      	ldr	r3, [r4, #20]
 8003030:	494b      	ldr	r1, [pc, #300]	@ (8003160 <cliI2C+0x188>)
 8003032:	2000      	movs	r0, #0
 8003034:	4798      	blx	r3
 8003036:	2800      	cmp	r0, #0
 8003038:	d173      	bne.n	8003122 <cliI2C+0x14a>
    ret = false;
  }

  if (ret == false)
  {
    cliPrintf( "i2c begin ch[1~%d]\n", I2C_MAX_CH);
 800303a:	2102      	movs	r1, #2
 800303c:	4849      	ldr	r0, [pc, #292]	@ (8003164 <cliI2C+0x18c>)
 800303e:	f7fd ff61 	bl	8000f04 <cliPrintf>
    cliPrintf( "i2c scan  ch[1~%d]\n", I2C_MAX_CH);
 8003042:	2102      	movs	r1, #2
 8003044:	4848      	ldr	r0, [pc, #288]	@ (8003168 <cliI2C+0x190>)
 8003046:	f7fd ff5d 	bl	8000f04 <cliPrintf>
    cliPrintf( "i2c read  ch dev_addr reg_addr length\n");
 800304a:	4848      	ldr	r0, [pc, #288]	@ (800316c <cliI2C+0x194>)
 800304c:	f7fd ff5a 	bl	8000f04 <cliPrintf>
    cliPrintf( "i2c write ch dev_addr reg_addr data\n");
 8003050:	4847      	ldr	r0, [pc, #284]	@ (8003170 <cliI2C+0x198>)
 8003052:	f7fd ff57 	bl	8000f04 <cliPrintf>
  }
}
 8003056:	b022      	add	sp, #136	@ 0x88
 8003058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    print_ch = (uint16_t) args->getData(1);
 800305c:	6883      	ldr	r3, [r0, #8]
 800305e:	2001      	movs	r0, #1
 8003060:	4798      	blx	r3
    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8003062:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 8003066:	d00f      	beq.n	8003088 <cliI2C+0xb0>
 8003068:	2d02      	cmp	r5, #2
 800306a:	bf28      	it	cs
 800306c:	2502      	movcs	r5, #2
    print_ch -= 1;
 800306e:	3d01      	subs	r5, #1
 8003070:	b2ed      	uxtb	r5, r5
    if(args->isStr(0, "scan") == true)
 8003072:	6963      	ldr	r3, [r4, #20]
 8003074:	493f      	ldr	r1, [pc, #252]	@ (8003174 <cliI2C+0x19c>)
 8003076:	2000      	movs	r0, #0
 8003078:	4798      	blx	r3
 800307a:	b1d8      	cbz	r0, 80030b4 <cliI2C+0xdc>
      if (i2cIsBegin(print_ch) == true)
 800307c:	4628      	mov	r0, r5
 800307e:	f7ff fe7d 	bl	8002d7c <i2cIsBegin>
 8003082:	b190      	cbz	r0, 80030aa <cliI2C+0xd2>
        for (i=0x00; i<= 0x7F; i++)
 8003084:	2400      	movs	r4, #0
 8003086:	e002      	b.n	800308e <cliI2C+0xb6>
    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8003088:	2501      	movs	r5, #1
 800308a:	e7f0      	b.n	800306e <cliI2C+0x96>
        for (i=0x00; i<= 0x7F; i++)
 800308c:	3401      	adds	r4, #1
 800308e:	2c7f      	cmp	r4, #127	@ 0x7f
 8003090:	d8e1      	bhi.n	8003056 <cliI2C+0x7e>
          if (i2cIsDeviceReady(print_ch, i) == true)
 8003092:	b2e1      	uxtb	r1, r4
 8003094:	4628      	mov	r0, r5
 8003096:	f7ff ff2d 	bl	8002ef4 <i2cIsDeviceReady>
 800309a:	2800      	cmp	r0, #0
 800309c:	d0f6      	beq.n	800308c <cliI2C+0xb4>
            cliPrintf("I2C CH%d Addr 0x%02X : OK\n", print_ch+1, i);
 800309e:	4622      	mov	r2, r4
 80030a0:	1c69      	adds	r1, r5, #1
 80030a2:	4835      	ldr	r0, [pc, #212]	@ (8003178 <cliI2C+0x1a0>)
 80030a4:	f7fd ff2e 	bl	8000f04 <cliPrintf>
 80030a8:	e7f0      	b.n	800308c <cliI2C+0xb4>
        cliPrintf("i2c ch%d is not begin\n", print_ch + 1);
 80030aa:	1c69      	adds	r1, r5, #1
 80030ac:	4833      	ldr	r0, [pc, #204]	@ (800317c <cliI2C+0x1a4>)
 80030ae:	f7fd ff29 	bl	8000f04 <cliPrintf>
  if (ret == false)
 80030b2:	e7d0      	b.n	8003056 <cliI2C+0x7e>
    else if(args->isStr(0, "begin") == true)
 80030b4:	6963      	ldr	r3, [r4, #20]
 80030b6:	4932      	ldr	r1, [pc, #200]	@ (8003180 <cliI2C+0x1a8>)
 80030b8:	2000      	movs	r0, #0
 80030ba:	4798      	blx	r3
 80030bc:	2800      	cmp	r0, #0
 80030be:	d0ca      	beq.n	8003056 <cliI2C+0x7e>
      i2c_ret = i2cBegin(print_ch, 400);
 80030c0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80030c4:	4628      	mov	r0, r5
 80030c6:	f7ff fedb 	bl	8002e80 <i2cBegin>
      if (i2c_ret == true)
 80030ca:	b120      	cbz	r0, 80030d6 <cliI2C+0xfe>
        cliPrintf("I2C CH%d Begin OK\n", print_ch + 1);
 80030cc:	1c69      	adds	r1, r5, #1
 80030ce:	482d      	ldr	r0, [pc, #180]	@ (8003184 <cliI2C+0x1ac>)
 80030d0:	f7fd ff18 	bl	8000f04 <cliPrintf>
  if (ret == false)
 80030d4:	e7bf      	b.n	8003056 <cliI2C+0x7e>
        cliPrintf("I2C CH%d Begin Fail\n", print_ch + 1);
 80030d6:	1c69      	adds	r1, r5, #1
 80030d8:	482b      	ldr	r0, [pc, #172]	@ (8003188 <cliI2C+0x1b0>)
 80030da:	f7fd ff13 	bl	8000f04 <cliPrintf>
  if (ret == false)
 80030de:	e7ba      	b.n	8003056 <cliI2C+0x7e>
    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 80030e0:	2501      	movs	r5, #1
 80030e2:	e78b      	b.n	8002ffc <cliI2C+0x24>
          cliPrintf("%d I2C - Fail \n", print_ch);
 80030e4:	4629      	mov	r1, r5
 80030e6:	4829      	ldr	r0, [pc, #164]	@ (800318c <cliI2C+0x1b4>)
 80030e8:	f7fd ff0c 	bl	8000f04 <cliPrintf>
  if (ret == false)
 80030ec:	e7b3      	b.n	8003056 <cliI2C+0x7e>
      for (i=0; i<length; i++)
 80030ee:	2400      	movs	r4, #0
 80030f0:	b2bb      	uxth	r3, r7
 80030f2:	42a3      	cmp	r3, r4
 80030f4:	d9af      	bls.n	8003056 <cliI2C+0x7e>
        i2c_ret = i2cReadByte(ch, dev_addr, reg_addr+i, i2c_data, 100);
 80030f6:	eb0a 0204 	add.w	r2, sl, r4
 80030fa:	2364      	movs	r3, #100	@ 0x64
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	ab02      	add	r3, sp, #8
 8003100:	b292      	uxth	r2, r2
 8003102:	4649      	mov	r1, r9
 8003104:	4640      	mov	r0, r8
 8003106:	f7ff ff2b 	bl	8002f60 <i2cReadByte>
        if (i2c_ret == true)
 800310a:	2800      	cmp	r0, #0
 800310c:	d0ea      	beq.n	80030e4 <cliI2C+0x10c>
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 800310e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003112:	fa14 f286 	uxtah	r2, r4, r6
 8003116:	4629      	mov	r1, r5
 8003118:	481d      	ldr	r0, [pc, #116]	@ (8003190 <cliI2C+0x1b8>)
 800311a:	f7fd fef3 	bl	8000f04 <cliPrintf>
      for (i=0; i<length; i++)
 800311e:	3401      	adds	r4, #1
 8003120:	e7e6      	b.n	80030f0 <cliI2C+0x118>
      pre_time = millis();
 8003122:	f7fd fcef 	bl	8000b04 <millis>
 8003126:	4604      	mov	r4, r0
      i2c_ret = i2cWriteByte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 8003128:	2364      	movs	r3, #100	@ 0x64
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	b2fb      	uxtb	r3, r7
 800312e:	4652      	mov	r2, sl
 8003130:	4649      	mov	r1, r9
 8003132:	4640      	mov	r0, r8
 8003134:	f7ff ff40 	bl	8002fb8 <i2cWriteByte>
      if (i2c_ret == true)
 8003138:	b150      	cbz	r0, 8003150 <cliI2C+0x178>
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", print_ch, reg_addr, length, millis()-pre_time);
 800313a:	f7fd fce3 	bl	8000b04 <millis>
 800313e:	1b00      	subs	r0, r0, r4
 8003140:	9000      	str	r0, [sp, #0]
 8003142:	b2bb      	uxth	r3, r7
 8003144:	b2b2      	uxth	r2, r6
 8003146:	4629      	mov	r1, r5
 8003148:	4812      	ldr	r0, [pc, #72]	@ (8003194 <cliI2C+0x1bc>)
 800314a:	f7fd fedb 	bl	8000f04 <cliPrintf>
  if (ret == false)
 800314e:	e782      	b.n	8003056 <cliI2C+0x7e>
        cliPrintf("%d I2C - Fail \n", print_ch);
 8003150:	4629      	mov	r1, r5
 8003152:	480e      	ldr	r0, [pc, #56]	@ (800318c <cliI2C+0x1b4>)
 8003154:	f7fd fed6 	bl	8000f04 <cliPrintf>
  if (ret == false)
 8003158:	e77d      	b.n	8003056 <cliI2C+0x7e>
 800315a:	bf00      	nop
 800315c:	08028214 	.word	0x08028214
 8003160:	08028258 	.word	0x08028258
 8003164:	080286bc 	.word	0x080286bc
 8003168:	080286d0 	.word	0x080286d0
 800316c:	080286e4 	.word	0x080286e4
 8003170:	0802870c 	.word	0x0802870c
 8003174:	080285fc 	.word	0x080285fc
 8003178:	08028604 	.word	0x08028604
 800317c:	08028620 	.word	0x08028620
 8003180:	08028638 	.word	0x08028638
 8003184:	08028640 	.word	0x08028640
 8003188:	08028654 	.word	0x08028654
 800318c:	08028688 	.word	0x08028688
 8003190:	0802866c 	.word	0x0802866c
 8003194:	08028698 	.word	0x08028698

08003198 <HAL_I2C_ErrorCallback>:
}
 8003198:	4770      	bx	lr

0800319a <ledInit>:


bool ledInit(void)
{
  return true;
}
 800319a:	2001      	movs	r0, #1
 800319c:	4770      	bx	lr
	...

080031a0 <ledToggle>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
}

void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 80031a0:	b100      	cbz	r0, 80031a4 <ledToggle+0x4>
 80031a2:	4770      	bx	lr
{
 80031a4:	b508      	push	{r3, lr}

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80031a6:	4a04      	ldr	r2, [pc, #16]	@ (80031b8 <ledToggle+0x18>)
 80031a8:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 80031ac:	8889      	ldrh	r1, [r1, #4]
 80031ae:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 80031b2:	f006 fc22 	bl	80099fa <HAL_GPIO_TogglePin>
}
 80031b6:	bd08      	pop	{r3, pc}
 80031b8:	08028764 	.word	0x08028764

080031bc <cliCmd>:
}


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 80031bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c0:	4606      	mov	r6, r0
  bool ret = false;



  if (args->argc == 1 && args->isStr(0, "info"))
 80031c2:	8803      	ldrh	r3, [r0, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d00a      	beq.n	80031de <cliCmd+0x22>
  bool ret = false;
 80031c8:	2700      	movs	r7, #0
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);

    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 80031ca:	8833      	ldrh	r3, [r6, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d023      	beq.n	8003218 <cliCmd+0x5c>
      #endif
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 80031d0:	8833      	ldrh	r3, [r6, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d03e      	beq.n	8003254 <cliCmd+0x98>

    }
    ret = true;
  }

  if (ret == false)
 80031d6:	2f00      	cmp	r7, #0
 80031d8:	d05a      	beq.n	8003290 <cliCmd+0xd4>
  {
    cliPrintf("log info\n");
    cliPrintf("log boot\n");
    cliPrintf("log list\n");
  }
}
 80031da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 80031de:	6943      	ldr	r3, [r0, #20]
 80031e0:	4930      	ldr	r1, [pc, #192]	@ (80032a4 <cliCmd+0xe8>)
 80031e2:	2000      	movs	r0, #0
 80031e4:	4798      	blx	r3
 80031e6:	4607      	mov	r7, r0
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d0ee      	beq.n	80031ca <cliCmd+0xe>
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 80031ec:	4c2e      	ldr	r4, [pc, #184]	@ (80032a8 <cliCmd+0xec>)
 80031ee:	8821      	ldrh	r1, [r4, #0]
 80031f0:	482e      	ldr	r0, [pc, #184]	@ (80032ac <cliCmd+0xf0>)
 80031f2:	f7fd fe87 	bl	8000f04 <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 80031f6:	8861      	ldrh	r1, [r4, #2]
 80031f8:	482d      	ldr	r0, [pc, #180]	@ (80032b0 <cliCmd+0xf4>)
 80031fa:	f7fd fe83 	bl	8000f04 <cliPrintf>
    cliPrintf("\n");
 80031fe:	482d      	ldr	r0, [pc, #180]	@ (80032b4 <cliCmd+0xf8>)
 8003200:	f7fd fe80 	bl	8000f04 <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 8003204:	4c2c      	ldr	r4, [pc, #176]	@ (80032b8 <cliCmd+0xfc>)
 8003206:	8821      	ldrh	r1, [r4, #0]
 8003208:	482c      	ldr	r0, [pc, #176]	@ (80032bc <cliCmd+0x100>)
 800320a:	f7fd fe7b 	bl	8000f04 <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 800320e:	8861      	ldrh	r1, [r4, #2]
 8003210:	482b      	ldr	r0, [pc, #172]	@ (80032c0 <cliCmd+0x104>)
 8003212:	f7fd fe77 	bl	8000f04 <cliPrintf>
    ret = true;
 8003216:	e7d8      	b.n	80031ca <cliCmd+0xe>
  if (args->argc == 1 && args->isStr(0, "boot"))
 8003218:	6973      	ldr	r3, [r6, #20]
 800321a:	492a      	ldr	r1, [pc, #168]	@ (80032c4 <cliCmd+0x108>)
 800321c:	2000      	movs	r0, #0
 800321e:	4798      	blx	r3
 8003220:	4680      	mov	r8, r0
 8003222:	2800      	cmp	r0, #0
 8003224:	d0d4      	beq.n	80031d0 <cliCmd+0x14>
    uint32_t index = 0;
 8003226:	2500      	movs	r5, #0
 8003228:	e006      	b.n	8003238 <cliCmd+0x7c>
      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 800322a:	4b1f      	ldr	r3, [pc, #124]	@ (80032a8 <cliCmd+0xec>)
 800322c:	6898      	ldr	r0, [r3, #8]
 800322e:	4621      	mov	r1, r4
 8003230:	4428      	add	r0, r5
 8003232:	f7fd fe5d 	bl	8000ef0 <cliWrite>
      index += buf_len;
 8003236:	4425      	add	r5, r4
    while(cliKeepLoop())
 8003238:	f7fe f906 	bl	8001448 <cliKeepLoop>
 800323c:	4607      	mov	r7, r0
 800323e:	b138      	cbz	r0, 8003250 <cliCmd+0x94>
      buf_len = log_buf_boot.buf_length - index;
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <cliCmd+0xec>)
 8003242:	885c      	ldrh	r4, [r3, #2]
      if (buf_len == 0)
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	d0c3      	beq.n	80031d0 <cliCmd+0x14>
      if (buf_len > 64)
 8003248:	2c40      	cmp	r4, #64	@ 0x40
 800324a:	d9ee      	bls.n	800322a <cliCmd+0x6e>
        buf_len = 64;
 800324c:	2440      	movs	r4, #64	@ 0x40
 800324e:	e7ec      	b.n	800322a <cliCmd+0x6e>
    ret = true;
 8003250:	4647      	mov	r7, r8
 8003252:	e7bd      	b.n	80031d0 <cliCmd+0x14>
  if (args->argc == 1 && args->isStr(0, "list"))
 8003254:	6973      	ldr	r3, [r6, #20]
 8003256:	491c      	ldr	r1, [pc, #112]	@ (80032c8 <cliCmd+0x10c>)
 8003258:	2000      	movs	r0, #0
 800325a:	4798      	blx	r3
 800325c:	4606      	mov	r6, r0
 800325e:	2800      	cmp	r0, #0
 8003260:	d0b9      	beq.n	80031d6 <cliCmd+0x1a>
    uint32_t index = 0;
 8003262:	2500      	movs	r5, #0
 8003264:	e006      	b.n	8003274 <cliCmd+0xb8>
      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 8003266:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <cliCmd+0xfc>)
 8003268:	6898      	ldr	r0, [r3, #8]
 800326a:	4621      	mov	r1, r4
 800326c:	4428      	add	r0, r5
 800326e:	f7fd fe3f 	bl	8000ef0 <cliWrite>
      index += buf_len;
 8003272:	4425      	add	r5, r4
    while(cliKeepLoop())
 8003274:	f7fe f8e8 	bl	8001448 <cliKeepLoop>
 8003278:	4607      	mov	r7, r0
 800327a:	b138      	cbz	r0, 800328c <cliCmd+0xd0>
      buf_len = log_buf_list.buf_length - index;
 800327c:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <cliCmd+0xfc>)
 800327e:	885c      	ldrh	r4, [r3, #2]
      if (buf_len == 0)
 8003280:	1b64      	subs	r4, r4, r5
 8003282:	d0a8      	beq.n	80031d6 <cliCmd+0x1a>
      if (buf_len > 64)
 8003284:	2c40      	cmp	r4, #64	@ 0x40
 8003286:	d9ee      	bls.n	8003266 <cliCmd+0xaa>
        buf_len = 64;
 8003288:	2440      	movs	r4, #64	@ 0x40
 800328a:	e7ec      	b.n	8003266 <cliCmd+0xaa>
    ret = true;
 800328c:	4637      	mov	r7, r6
 800328e:	e7a2      	b.n	80031d6 <cliCmd+0x1a>
    cliPrintf("log info\n");
 8003290:	480e      	ldr	r0, [pc, #56]	@ (80032cc <cliCmd+0x110>)
 8003292:	f7fd fe37 	bl	8000f04 <cliPrintf>
    cliPrintf("log boot\n");
 8003296:	480e      	ldr	r0, [pc, #56]	@ (80032d0 <cliCmd+0x114>)
 8003298:	f7fd fe34 	bl	8000f04 <cliPrintf>
    cliPrintf("log list\n");
 800329c:	480d      	ldr	r0, [pc, #52]	@ (80032d4 <cliCmd+0x118>)
 800329e:	f7fd fe31 	bl	8000f04 <cliPrintf>
}
 80032a2:	e79a      	b.n	80031da <cliCmd+0x1e>
 80032a4:	080280ec 	.word	0x080280ec
 80032a8:	24002760 	.word	0x24002760
 80032ac:	0802876c 	.word	0x0802876c
 80032b0:	08028780 	.word	0x08028780
 80032b4:	0802921c 	.word	0x0802921c
 80032b8:	24002754 	.word	0x24002754
 80032bc:	08028794 	.word	0x08028794
 80032c0:	080287a8 	.word	0x080287a8
 80032c4:	080287bc 	.word	0x080287bc
 80032c8:	080287c4 	.word	0x080287c4
 80032cc:	080287cc 	.word	0x080287cc
 80032d0:	080287d8 	.word	0x080287d8
 80032d4:	080287e4 	.word	0x080287e4

080032d8 <logInit>:
{
 80032d8:	b510      	push	{r4, lr}
  log_buf_boot.line_index     = 0;
 80032da:	4a0e      	ldr	r2, [pc, #56]	@ (8003314 <logInit+0x3c>)
 80032dc:	2300      	movs	r3, #0
 80032de:	8013      	strh	r3, [r2, #0]
  log_buf_boot.buf_length     = 0;
 80032e0:	8053      	strh	r3, [r2, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 80032e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032e6:	8091      	strh	r1, [r2, #4]
  log_buf_boot.buf_index      = 0;
 80032e8:	80d3      	strh	r3, [r2, #6]
  log_buf_boot.buf            = buf_boot;
 80032ea:	490b      	ldr	r1, [pc, #44]	@ (8003318 <logInit+0x40>)
 80032ec:	6091      	str	r1, [r2, #8]
  log_buf_list.line_index     = 0;
 80032ee:	4a0b      	ldr	r2, [pc, #44]	@ (800331c <logInit+0x44>)
 80032f0:	8013      	strh	r3, [r2, #0]
  log_buf_list.buf_length     = 0;
 80032f2:	8053      	strh	r3, [r2, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 80032f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032f8:	8091      	strh	r1, [r2, #4]
  log_buf_list.buf_index      = 0;
 80032fa:	80d3      	strh	r3, [r2, #6]
  log_buf_list.buf            = buf_list;
 80032fc:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <logInit+0x48>)
 80032fe:	6093      	str	r3, [r2, #8]
  is_init = true;
 8003300:	2401      	movs	r4, #1
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <logInit+0x4c>)
 8003304:	701c      	strb	r4, [r3, #0]
  cliAdd("log", cliCmd);
 8003306:	4908      	ldr	r1, [pc, #32]	@ (8003328 <logInit+0x50>)
 8003308:	4808      	ldr	r0, [pc, #32]	@ (800332c <logInit+0x54>)
 800330a:	f7fe f8a9 	bl	8001460 <cliAdd>
}
 800330e:	4620      	mov	r0, r4
 8003310:	bd10      	pop	{r4, pc}
 8003312:	bf00      	nop
 8003314:	24002760 	.word	0x24002760
 8003318:	24001f54 	.word	0x24001f54
 800331c:	24002754 	.word	0x24002754
 8003320:	24000f54 	.word	0x24000f54
 8003324:	24000f52 	.word	0x24000f52
 8003328:	080031bd 	.word	0x080031bd
 800332c:	080287f0 	.word	0x080287f0

08003330 <logBoot>:
  is_boot_log = enable;
 8003330:	3800      	subs	r0, #0
 8003332:	bf18      	it	ne
 8003334:	2001      	movne	r0, #1
 8003336:	4b01      	ldr	r3, [pc, #4]	@ (800333c <logBoot+0xc>)
 8003338:	7018      	strb	r0, [r3, #0]
}
 800333a:	4770      	bx	lr
 800333c:	24000076 	.word	0x24000076

08003340 <logOpen>:
{
 8003340:	b510      	push	{r4, lr}
  log_ch   = ch;
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <logOpen+0x18>)
 8003344:	7018      	strb	r0, [r3, #0]
  log_baud = baud;
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <logOpen+0x1c>)
 8003348:	6019      	str	r1, [r3, #0]
  is_open  = true;
 800334a:	4c05      	ldr	r4, [pc, #20]	@ (8003360 <logOpen+0x20>)
 800334c:	2301      	movs	r3, #1
 800334e:	7023      	strb	r3, [r4, #0]
  is_open = uartOpen(ch, baud);
 8003350:	f002 f83a 	bl	80053c8 <uartOpen>
 8003354:	7020      	strb	r0, [r4, #0]
}
 8003356:	bd10      	pop	{r4, pc}
 8003358:	24000f50 	.word	0x24000f50
 800335c:	24000f4c 	.word	0x24000f4c
 8003360:	24000f51 	.word	0x24000f51

08003364 <logBufPrintf>:
{
 8003364:	b530      	push	{r4, r5, lr}
 8003366:	b083      	sub	sp, #12
 8003368:	4604      	mov	r4, r0
 800336a:	4694      	mov	ip, r2
  buf_last = p_log->buf_index + length + 8;
 800336c:	88c3      	ldrh	r3, [r0, #6]
 800336e:	4413      	add	r3, r2
 8003370:	3308      	adds	r3, #8
  if (buf_last > p_log->buf_length_max)
 8003372:	8882      	ldrh	r2, [r0, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d205      	bcs.n	8003384 <logBufPrintf+0x20>
    p_log->buf_index = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	80c3      	strh	r3, [r0, #6]
    buf_last = p_log->buf_index + length + 8;
 800337c:	f10c 0308 	add.w	r3, ip, #8
    if (buf_last > p_log->buf_length_max)
 8003380:	429a      	cmp	r2, r3
 8003382:	d319      	bcc.n	80033b8 <logBufPrintf+0x54>
  p_buf = &p_log->buf[p_log->buf_index];
 8003384:	88e0      	ldrh	r0, [r4, #6]
  buf_len = snprintf((char *)p_buf, length + 8, "%04X\t%s", p_log->line_index, p_data);
 8003386:	9100      	str	r1, [sp, #0]
 8003388:	8823      	ldrh	r3, [r4, #0]
 800338a:	4a0e      	ldr	r2, [pc, #56]	@ (80033c4 <logBufPrintf+0x60>)
 800338c:	f10c 0108 	add.w	r1, ip, #8
 8003390:	68a5      	ldr	r5, [r4, #8]
 8003392:	4428      	add	r0, r5
 8003394:	f022 fc88 	bl	8025ca8 <sniprintf>
  p_log->line_index++;
 8003398:	8823      	ldrh	r3, [r4, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	8023      	strh	r3, [r4, #0]
  p_log->buf_index += buf_len;
 800339e:	88e3      	ldrh	r3, [r4, #6]
 80033a0:	b282      	uxth	r2, r0
 80033a2:	4413      	add	r3, r2
 80033a4:	80e3      	strh	r3, [r4, #6]
  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 80033a6:	8863      	ldrh	r3, [r4, #2]
 80033a8:	4418      	add	r0, r3
 80033aa:	88a1      	ldrh	r1, [r4, #4]
 80033ac:	4288      	cmp	r0, r1
 80033ae:	dc05      	bgt.n	80033bc <logBufPrintf+0x58>
    p_log->buf_length += buf_len;
 80033b0:	441a      	add	r2, r3
 80033b2:	8062      	strh	r2, [r4, #2]
  return true;
 80033b4:	2001      	movs	r0, #1
 80033b6:	e002      	b.n	80033be <logBufPrintf+0x5a>
      return false;
 80033b8:	2000      	movs	r0, #0
 80033ba:	e000      	b.n	80033be <logBufPrintf+0x5a>
  return true;
 80033bc:	2001      	movs	r0, #1
}
 80033be:	b003      	add	sp, #12
 80033c0:	bd30      	pop	{r4, r5, pc}
 80033c2:	bf00      	nop
 80033c4:	080287f4 	.word	0x080287f4

080033c8 <logPrintf>:
{
 80033c8:	b40f      	push	{r0, r1, r2, r3}
 80033ca:	b510      	push	{r4, lr}
 80033cc:	b082      	sub	sp, #8
  if (is_init != true) return;
 80033ce:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <logPrintf+0x60>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b923      	cbnz	r3, 80033de <logPrintf+0x16>
}
 80033d4:	b002      	add	sp, #8
 80033d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033da:	b004      	add	sp, #16
 80033dc:	4770      	bx	lr
  va_start(args, fmt);
 80033de:	ab05      	add	r3, sp, #20
 80033e0:	9301      	str	r3, [sp, #4]
  len = vsnprintf(print_buf, 256, fmt, args);
 80033e2:	9a04      	ldr	r2, [sp, #16]
 80033e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033e8:	4810      	ldr	r0, [pc, #64]	@ (800342c <logPrintf+0x64>)
 80033ea:	f022 fcff 	bl	8025dec <vsniprintf>
 80033ee:	4604      	mov	r4, r0
  if (is_open == true && is_enable == true)
 80033f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <logPrintf+0x68>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b113      	cbz	r3, 80033fc <logPrintf+0x34>
 80033f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <logPrintf+0x6c>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b943      	cbnz	r3, 800340e <logPrintf+0x46>
  if (is_boot_log)
 80033fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <logPrintf+0x70>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b963      	cbnz	r3, 800341c <logPrintf+0x54>
  logBufPrintf(&log_buf_list, print_buf, len);
 8003402:	4622      	mov	r2, r4
 8003404:	4909      	ldr	r1, [pc, #36]	@ (800342c <logPrintf+0x64>)
 8003406:	480d      	ldr	r0, [pc, #52]	@ (800343c <logPrintf+0x74>)
 8003408:	f7ff ffac 	bl	8003364 <logBufPrintf>
  va_end(args);
 800340c:	e7e2      	b.n	80033d4 <logPrintf+0xc>
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 800340e:	4602      	mov	r2, r0
 8003410:	4906      	ldr	r1, [pc, #24]	@ (800342c <logPrintf+0x64>)
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <logPrintf+0x78>)
 8003414:	7818      	ldrb	r0, [r3, #0]
 8003416:	f002 f8d3 	bl	80055c0 <uartWrite>
 800341a:	e7ef      	b.n	80033fc <logPrintf+0x34>
    logBufPrintf(&log_buf_boot, print_buf, len);
 800341c:	4622      	mov	r2, r4
 800341e:	4903      	ldr	r1, [pc, #12]	@ (800342c <logPrintf+0x64>)
 8003420:	4808      	ldr	r0, [pc, #32]	@ (8003444 <logPrintf+0x7c>)
 8003422:	f7ff ff9f 	bl	8003364 <logBufPrintf>
 8003426:	e7ec      	b.n	8003402 <logPrintf+0x3a>
 8003428:	24000f52 	.word	0x24000f52
 800342c:	24000e4c 	.word	0x24000e4c
 8003430:	24000f51 	.word	0x24000f51
 8003434:	24000075 	.word	0x24000075
 8003438:	24000076 	.word	0x24000076
 800343c:	24002754 	.word	0x24002754
 8003440:	24000f50 	.word	0x24000f50
 8003444:	24002760 	.word	0x24002760

08003448 <pwmInit>:




bool pwmInit(void)
{
 8003448:	b510      	push	{r4, lr}
 800344a:	b08e      	sub	sp, #56	@ 0x38
  bool ret = true;
  TIM_OC_InitTypeDef sConfigOC = {0};
 800344c:	2300      	movs	r3, #0
 800344e:	9307      	str	r3, [sp, #28]
 8003450:	9308      	str	r3, [sp, #32]
 8003452:	9309      	str	r3, [sp, #36]	@ 0x24
 8003454:	930a      	str	r3, [sp, #40]	@ 0x28
 8003456:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003458:	930c      	str	r3, [sp, #48]	@ 0x30
 800345a:	930d      	str	r3, [sp, #52]	@ 0x34



  for (int i=0; i<PWM_MAX_CH; i++)
 800345c:	2b00      	cmp	r3, #0
 800345e:	dd1f      	ble.n	80034a0 <pwmInit+0x58>
  {
    pwm_tbl[i].duty = 0;
    pwm_tbl[i].max_value = 100;
  }

  __HAL_RCC_TIM13_CLK_ENABLE();
 8003460:	4b35      	ldr	r3, [pc, #212]	@ (8003538 <pwmInit+0xf0>)
 8003462:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003466:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800346a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800346e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	9b00      	ldr	r3, [sp, #0]

  htim13.Instance = TIM13;
 800347a:	4830      	ldr	r0, [pc, #192]	@ (800353c <pwmInit+0xf4>)
 800347c:	4b30      	ldr	r3, [pc, #192]	@ (8003540 <pwmInit+0xf8>)
 800347e:	6003      	str	r3, [r0, #0]
  htim13.Init.Prescaler = 274;
 8003480:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8003484:	6043      	str	r3, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003486:	2300      	movs	r3, #0
 8003488:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 99;
 800348a:	2263      	movs	r2, #99	@ 0x63
 800348c:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348e:	6103      	str	r3, [r0, #16]
  htim13.Init.RepetitionCounter = 0;
 8003490:	6143      	str	r3, [r0, #20]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003492:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003494:	f00b fd5a 	bl	800ef4c <HAL_TIM_Base_Init>
 8003498:	b160      	cbz	r0, 80034b4 <pwmInit+0x6c>
  {
    return false;
 800349a:	2000      	movs	r0, #0

#ifdef _USE_HW_CLI
  cliAdd("pwm", cliPwm);
#endif
  return ret;
}
 800349c:	b00e      	add	sp, #56	@ 0x38
 800349e:	bd10      	pop	{r4, pc}
    pwm_tbl[i].duty = 0;
 80034a0:	4a28      	ldr	r2, [pc, #160]	@ (8003544 <pwmInit+0xfc>)
 80034a2:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80034a6:	2000      	movs	r0, #0
 80034a8:	8048      	strh	r0, [r1, #2]
    pwm_tbl[i].max_value = 100;
 80034aa:	2164      	movs	r1, #100	@ 0x64
 80034ac:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
  for (int i=0; i<PWM_MAX_CH; i++)
 80034b0:	3301      	adds	r3, #1
 80034b2:	e7d3      	b.n	800345c <pwmInit+0x14>
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80034b4:	4821      	ldr	r0, [pc, #132]	@ (800353c <pwmInit+0xf4>)
 80034b6:	f00b fd79 	bl	800efac <HAL_TIM_PWM_Init>
 80034ba:	b108      	cbz	r0, 80034c0 <pwmInit+0x78>
    return false;
 80034bc:	2000      	movs	r0, #0
 80034be:	e7ed      	b.n	800349c <pwmInit+0x54>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034c0:	2360      	movs	r3, #96	@ 0x60
 80034c2:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80034c4:	2200      	movs	r2, #0
 80034c6:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034c8:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ca:	920b      	str	r2, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034cc:	a907      	add	r1, sp, #28
 80034ce:	481b      	ldr	r0, [pc, #108]	@ (800353c <pwmInit+0xf4>)
 80034d0:	f00b fde6 	bl	800f0a0 <HAL_TIM_PWM_ConfigChannel>
 80034d4:	b108      	cbz	r0, 80034da <pwmInit+0x92>
    return false;
 80034d6:	2000      	movs	r0, #0
 80034d8:	e7e0      	b.n	800349c <pwmInit+0x54>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034da:	2400      	movs	r4, #0
 80034dc:	9402      	str	r4, [sp, #8]
 80034de:	9403      	str	r4, [sp, #12]
 80034e0:	9404      	str	r4, [sp, #16]
 80034e2:	9405      	str	r4, [sp, #20]
 80034e4:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034e6:	4b14      	ldr	r3, [pc, #80]	@ (8003538 <pwmInit+0xf0>)
 80034e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80034ec:	f042 0220 	orr.w	r2, r2, #32
 80034f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80034f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003504:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800350a:	2309      	movs	r3, #9
 800350c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800350e:	a902      	add	r1, sp, #8
 8003510:	480d      	ldr	r0, [pc, #52]	@ (8003548 <pwmInit+0x100>)
 8003512:	f006 f8b9 	bl	8009688 <HAL_GPIO_Init>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8003516:	4621      	mov	r1, r4
 8003518:	4808      	ldr	r0, [pc, #32]	@ (800353c <pwmInit+0xf4>)
 800351a:	f00b fe6d 	bl	800f1f8 <HAL_TIM_PWM_Start>
  is_init = ret;
 800351e:	2401      	movs	r4, #1
 8003520:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <pwmInit+0x104>)
 8003522:	701c      	strb	r4, [r3, #0]
  logPrintf("[%s] pwmInit()\n", ret ? "OK" : "NG");
 8003524:	490a      	ldr	r1, [pc, #40]	@ (8003550 <pwmInit+0x108>)
 8003526:	480b      	ldr	r0, [pc, #44]	@ (8003554 <pwmInit+0x10c>)
 8003528:	f7ff ff4e 	bl	80033c8 <logPrintf>
  cliAdd("pwm", cliPwm);
 800352c:	490a      	ldr	r1, [pc, #40]	@ (8003558 <pwmInit+0x110>)
 800352e:	480b      	ldr	r0, [pc, #44]	@ (800355c <pwmInit+0x114>)
 8003530:	f7fd ff96 	bl	8001460 <cliAdd>
  return ret;
 8003534:	4620      	mov	r0, r4
 8003536:	e7b1      	b.n	800349c <pwmInit+0x54>
 8003538:	58024400 	.word	0x58024400
 800353c:	2400276c 	.word	0x2400276c
 8003540:	40001c00 	.word	0x40001c00
 8003544:	240027b8 	.word	0x240027b8
 8003548:	58021400 	.word	0x58021400
 800354c:	240027c0 	.word	0x240027c0
 8003550:	08028188 	.word	0x08028188
 8003554:	080287fc 	.word	0x080287fc
 8003558:	08003599 	.word	0x08003599
 800355c:	0802880c 	.word	0x0802880c

08003560 <pwmWrite>:
  return is_init;
}

void pwmWrite(uint8_t ch, uint16_t pwm_data)
{
  if (ch >= PWM_MAX_CH) return;
 8003560:	b958      	cbnz	r0, 800357a <pwmWrite+0x1a>

  pwm_tbl[ch].duty = constrain(pwm_data, 0, pwm_tbl[ch].max_value);
 8003562:	4a06      	ldr	r2, [pc, #24]	@ (800357c <pwmWrite+0x1c>)
 8003564:	f832 3030 	ldrh.w	r3, [r2, r0, lsl #3]
 8003568:	428b      	cmp	r3, r1
 800356a:	bf28      	it	cs
 800356c:	460b      	movcs	r3, r1
 800356e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003572:	8053      	strh	r3, [r2, #2]

  switch(ch)
  {
    case _DEF_PWM1:
      htim13.Instance->CCR1 = pwm_tbl[ch].duty;
 8003574:	4a02      	ldr	r2, [pc, #8]	@ (8003580 <pwmWrite+0x20>)
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
  }
}
 800357a:	4770      	bx	lr
 800357c:	240027b8 	.word	0x240027b8
 8003580:	2400276c 	.word	0x2400276c

08003584 <pwmRead>:

uint16_t pwmRead(uint8_t ch)
{
  if (ch >= HW_PWM_MAX_CH) return 0;
 8003584:	b920      	cbnz	r0, 8003590 <pwmRead+0xc>

  return pwm_tbl[ch].duty;
 8003586:	4b03      	ldr	r3, [pc, #12]	@ (8003594 <pwmRead+0x10>)
 8003588:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800358c:	8858      	ldrh	r0, [r3, #2]
 800358e:	4770      	bx	lr
  if (ch >= HW_PWM_MAX_CH) return 0;
 8003590:	2000      	movs	r0, #0
}
 8003592:	4770      	bx	lr
 8003594:	240027b8 	.word	0x240027b8

08003598 <cliPwm>:



#ifdef _USE_HW_CLI
void cliPwm(cli_args_t *args)
{
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	4604      	mov	r4, r0
  bool ret = true;
  uint8_t  ch;
  uint32_t pwm;


  if (args->argc == 3)
 800359c:	8803      	ldrh	r3, [r0, #0]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d00a      	beq.n	80035b8 <cliPwm+0x20>
    else
    {
      ret = false;
    }
  }
  else if (args->argc == 2)
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d023      	beq.n	80035ee <cliPwm+0x56>
  }


  if (ret == false)
  {
    cliPrintf( "pwm set 0~%d 0~255 \n", PWM_MAX_CH-1);
 80035a6:	2100      	movs	r1, #0
 80035a8:	481a      	ldr	r0, [pc, #104]	@ (8003614 <cliPwm+0x7c>)
 80035aa:	f7fd fcab 	bl	8000f04 <cliPrintf>
    cliPrintf( "pwm get 0~%d \n", PWM_MAX_CH-1);
 80035ae:	2100      	movs	r1, #0
 80035b0:	4819      	ldr	r0, [pc, #100]	@ (8003618 <cliPwm+0x80>)
 80035b2:	f7fd fca7 	bl	8000f04 <cliPrintf>
  }

}
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
    ch  = (uint8_t)args->getData(1);
 80035b8:	6883      	ldr	r3, [r0, #8]
 80035ba:	2001      	movs	r0, #1
 80035bc:	4798      	blx	r3
 80035be:	b2c5      	uxtb	r5, r0
    pwm = (uint8_t)args->getData(2);
 80035c0:	68a3      	ldr	r3, [r4, #8]
 80035c2:	2002      	movs	r0, #2
 80035c4:	4798      	blx	r3
 80035c6:	b2c6      	uxtb	r6, r0
    ch = constrain(ch, 0, PWM_MAX_CH);
 80035c8:	2d01      	cmp	r5, #1
 80035ca:	bf28      	it	cs
 80035cc:	2501      	movcs	r5, #1
    if(args->isStr(0, "set"))
 80035ce:	6963      	ldr	r3, [r4, #20]
 80035d0:	4912      	ldr	r1, [pc, #72]	@ (800361c <cliPwm+0x84>)
 80035d2:	2000      	movs	r0, #0
 80035d4:	4798      	blx	r3
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d0e5      	beq.n	80035a6 <cliPwm+0xe>
      pwmWrite(ch, pwm);
 80035da:	4631      	mov	r1, r6
 80035dc:	4628      	mov	r0, r5
 80035de:	f7ff ffbf 	bl	8003560 <pwmWrite>
      cliPrintf("pwm ch%d %d\n", ch, pwm);
 80035e2:	4632      	mov	r2, r6
 80035e4:	4629      	mov	r1, r5
 80035e6:	480e      	ldr	r0, [pc, #56]	@ (8003620 <cliPwm+0x88>)
 80035e8:	f7fd fc8c 	bl	8000f04 <cliPrintf>
  if (ret == false)
 80035ec:	e7e3      	b.n	80035b6 <cliPwm+0x1e>
    ch = (uint8_t)args->getData(1);
 80035ee:	6883      	ldr	r3, [r0, #8]
 80035f0:	2001      	movs	r0, #1
 80035f2:	4798      	blx	r3
 80035f4:	b2c6      	uxtb	r6, r0
    if(args->isStr(0, "get"))
 80035f6:	6963      	ldr	r3, [r4, #20]
 80035f8:	490a      	ldr	r1, [pc, #40]	@ (8003624 <cliPwm+0x8c>)
 80035fa:	2000      	movs	r0, #0
 80035fc:	4798      	blx	r3
 80035fe:	2800      	cmp	r0, #0
 8003600:	d0d1      	beq.n	80035a6 <cliPwm+0xe>
      cliPrintf("pwm ch%d %d\n", ch, pwmRead(ch));
 8003602:	4630      	mov	r0, r6
 8003604:	f7ff ffbe 	bl	8003584 <pwmRead>
 8003608:	4602      	mov	r2, r0
 800360a:	4631      	mov	r1, r6
 800360c:	4804      	ldr	r0, [pc, #16]	@ (8003620 <cliPwm+0x88>)
 800360e:	f7fd fc79 	bl	8000f04 <cliPrintf>
  if (ret == false)
 8003612:	e7d0      	b.n	80035b6 <cliPwm+0x1e>
 8003614:	08028828 	.word	0x08028828
 8003618:	08028840 	.word	0x08028840
 800361c:	08028810 	.word	0x08028810
 8003620:	08028814 	.word	0x08028814
 8003624:	08028824 	.word	0x08028824

08003628 <QSPI_AutoPollingMemReady>:

  return QSPI_OK;
}

static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *p_hqspi, uint32_t Timeout)
{
 8003628:	b530      	push	{r4, r5, lr}
 800362a:	b09b      	sub	sp, #108	@ 0x6c
 800362c:	4604      	mov	r4, r0
 800362e:	460d      	mov	r5, r1
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003630:	2250      	movs	r2, #80	@ 0x50
 8003632:	2100      	movs	r1, #0
 8003634:	a806      	add	r0, sp, #24
 8003636:	f022 fbe7 	bl	8025e08 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800363a:	2300      	movs	r3, #0
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	9302      	str	r3, [sp, #8]
 8003640:	9303      	str	r3, [sp, #12]
 8003642:	9304      	str	r3, [sp, #16]
 8003644:	9305      	str	r3, [sp, #20]

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003646:	2301      	movs	r3, #1
 8003648:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
  s_command.Instruction        = READ_STATUS_REG_CMD;
 800364a:	2005      	movs	r0, #5
 800364c:	9008      	str	r0, [sp, #32]
  
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800364e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003652:	900e      	str	r0, [sp, #56]	@ 0x38
  
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  
  s_command.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003654:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8003658:	9014      	str	r0, [sp, #80]	@ 0x50
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = 0;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
  s_command.NbData             = 1;
 800365a:	9315      	str	r3, [sp, #84]	@ 0x54


  if (HAL_OSPI_Command(p_hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800365c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003660:	a906      	add	r1, sp, #24
 8003662:	4620      	mov	r0, r4
 8003664:	f007 fe88 	bl	800b378 <HAL_OSPI_Command>
 8003668:	b110      	cbz	r0, 8003670 <QSPI_AutoPollingMemReady+0x48>
  {
    return false;
 800366a:	2000      	movs	r0, #0
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 800366c:	b01b      	add	sp, #108	@ 0x6c
 800366e:	bd30      	pop	{r4, r5, pc}
  s_config.Match           = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	9301      	str	r3, [sp, #4]
  s_config.Mask            = W25Q256JV_SR_WIP;
 8003674:	2201      	movs	r2, #1
 8003676:	9202      	str	r2, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8003678:	9303      	str	r3, [sp, #12]
  s_config.Interval        = 0x10;
 800367a:	2310      	movs	r3, #16
 800367c:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800367e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003682:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_AutoPolling(p_hqspi, &s_config, Timeout) != HAL_OK)
 8003684:	462a      	mov	r2, r5
 8003686:	a901      	add	r1, sp, #4
 8003688:	4620      	mov	r0, r4
 800368a:	f007 ff86 	bl	800b59a <HAL_OSPI_AutoPolling>
 800368e:	2800      	cmp	r0, #0
 8003690:	d0ec      	beq.n	800366c <QSPI_AutoPollingMemReady+0x44>
    return QSPI_ERROR;
 8003692:	2001      	movs	r0, #1
 8003694:	e7ea      	b.n	800366c <QSPI_AutoPollingMemReady+0x44>

08003696 <QSPI_ResetMemory>:
{
 8003696:	b510      	push	{r4, lr}
 8003698:	b094      	sub	sp, #80	@ 0x50
 800369a:	4604      	mov	r4, r0
  OSPI_RegularCmdTypeDef s_command = {0};
 800369c:	2250      	movs	r2, #80	@ 0x50
 800369e:	2100      	movs	r1, #0
 80036a0:	4668      	mov	r0, sp
 80036a2:	f022 fbb1 	bl	8025e08 <memset>
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	9303      	str	r3, [sp, #12]
  s_command.Instruction        = RESET_ENABLE_CMD;
 80036aa:	2366      	movs	r3, #102	@ 0x66
 80036ac:	9302      	str	r3, [sp, #8]
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80036ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036b2:	9308      	str	r3, [sp, #32]
  if (HAL_OSPI_Command(p_hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b8:	4669      	mov	r1, sp
 80036ba:	4620      	mov	r0, r4
 80036bc:	f007 fe5c 	bl	800b378 <HAL_OSPI_Command>
 80036c0:	b110      	cbz	r0, 80036c8 <QSPI_ResetMemory+0x32>
    return QSPI_ERROR;
 80036c2:	2001      	movs	r0, #1
}
 80036c4:	b014      	add	sp, #80	@ 0x50
 80036c6:	bd10      	pop	{r4, pc}
  s_command.Instruction = RESET_MEMORY_CMD;
 80036c8:	2399      	movs	r3, #153	@ 0x99
 80036ca:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(p_hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d0:	4669      	mov	r1, sp
 80036d2:	4620      	mov	r0, r4
 80036d4:	f007 fe50 	bl	800b378 <HAL_OSPI_Command>
 80036d8:	b108      	cbz	r0, 80036de <QSPI_ResetMemory+0x48>
    return QSPI_ERROR;
 80036da:	2001      	movs	r0, #1
 80036dc:	e7f2      	b.n	80036c4 <QSPI_ResetMemory+0x2e>
  if (QSPI_AutoPollingMemReady(p_hqspi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80036de:	f241 3188 	movw	r1, #5000	@ 0x1388
 80036e2:	4620      	mov	r0, r4
 80036e4:	f7ff ffa0 	bl	8003628 <QSPI_AutoPollingMemReady>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d0eb      	beq.n	80036c4 <QSPI_ResetMemory+0x2e>
    return QSPI_ERROR;
 80036ec:	2001      	movs	r0, #1
 80036ee:	e7e9      	b.n	80036c4 <QSPI_ResetMemory+0x2e>

080036f0 <QSPI_WriteEnable>:
{
 80036f0:	b510      	push	{r4, lr}
 80036f2:	b09a      	sub	sp, #104	@ 0x68
 80036f4:	4604      	mov	r4, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 80036f6:	2250      	movs	r2, #80	@ 0x50
 80036f8:	2100      	movs	r1, #0
 80036fa:	a806      	add	r0, sp, #24
 80036fc:	f022 fb84 	bl	8025e08 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003700:	2300      	movs	r3, #0
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	9303      	str	r3, [sp, #12]
 8003708:	9304      	str	r3, [sp, #16]
 800370a:	9305      	str	r3, [sp, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800370c:	2301      	movs	r3, #1
 800370e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.Instruction        = WRITE_ENABLE_CMD;
 8003710:	2306      	movs	r3, #6
 8003712:	9308      	str	r3, [sp, #32]
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8003714:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003718:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_OSPI_Command(p_hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800371a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371e:	a906      	add	r1, sp, #24
 8003720:	4620      	mov	r0, r4
 8003722:	f007 fe29 	bl	800b378 <HAL_OSPI_Command>
 8003726:	b110      	cbz	r0, 800372e <QSPI_WriteEnable+0x3e>
    return QSPI_ERROR;
 8003728:	2001      	movs	r0, #1
}
 800372a:	b01a      	add	sp, #104	@ 0x68
 800372c:	bd10      	pop	{r4, pc}
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800372e:	2305      	movs	r3, #5
 8003730:	9308      	str	r3, [sp, #32]
  s_command.DataMode       = HAL_OSPI_DATA_1_LINE;
 8003732:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003736:	9314      	str	r3, [sp, #80]	@ 0x50
  s_command.NbData         = 1;
 8003738:	2301      	movs	r3, #1
 800373a:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_OSPI_Command(p_hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800373c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003740:	a906      	add	r1, sp, #24
 8003742:	4620      	mov	r0, r4
 8003744:	f007 fe18 	bl	800b378 <HAL_OSPI_Command>
 8003748:	b108      	cbz	r0, 800374e <QSPI_WriteEnable+0x5e>
    return QSPI_ERROR;
 800374a:	2001      	movs	r0, #1
 800374c:	e7ed      	b.n	800372a <QSPI_WriteEnable+0x3a>
  s_config.Match           = W25Q256JV_SR_WREN;
 800374e:	2302      	movs	r3, #2
 8003750:	9301      	str	r3, [sp, #4]
  s_config.Mask            = W25Q256JV_SR_WREN;
 8003752:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8003754:	2300      	movs	r3, #0
 8003756:	9303      	str	r3, [sp, #12]
  s_config.Interval        = 0x10;
 8003758:	2310      	movs	r3, #16
 800375a:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800375c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003760:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_AutoPolling(p_hqspi, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003766:	a901      	add	r1, sp, #4
 8003768:	4620      	mov	r0, r4
 800376a:	f007 ff16 	bl	800b59a <HAL_OSPI_AutoPolling>
 800376e:	2800      	cmp	r0, #0
 8003770:	d0db      	beq.n	800372a <QSPI_WriteEnable+0x3a>
    return QSPI_ERROR;
 8003772:	2001      	movs	r0, #1
 8003774:	e7d9      	b.n	800372a <QSPI_WriteEnable+0x3a>

08003776 <QSPI_ReadStatus>:

static uint8_t QSPI_ReadStatus(OSPI_HandleTypeDef *p_hqspi, uint8_t cmd, uint8_t *p_data)
{
 8003776:	b570      	push	{r4, r5, r6, lr}
 8003778:	b096      	sub	sp, #88	@ 0x58
 800377a:	4604      	mov	r4, r0
 800377c:	460d      	mov	r5, r1
 800377e:	4616      	mov	r6, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003780:	2250      	movs	r2, #80	@ 0x50
 8003782:	2100      	movs	r1, #0
 8003784:	a802      	add	r0, sp, #8
 8003786:	f022 fb3f 	bl	8025e08 <memset>
  uint8_t reg;

  /* Initialize the read flag status register command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800378a:	2301      	movs	r3, #1
 800378c:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
  s_command.Instruction        = cmd;
 800378e:	9504      	str	r5, [sp, #16]
  
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8003790:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003794:	910a      	str	r1, [sp, #40]	@ 0x28
  
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  
  s_command.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003796:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800379a:	9110      	str	r1, [sp, #64]	@ 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = 0;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
  s_command.NbData             = 1;
 800379c:	9311      	str	r3, [sp, #68]	@ 0x44


  /* Configure the command */
  if (HAL_OSPI_Command(p_hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	a902      	add	r1, sp, #8
 80037a4:	4620      	mov	r0, r4
 80037a6:	f007 fde7 	bl	800b378 <HAL_OSPI_Command>
 80037aa:	b110      	cbz	r0, 80037b2 <QSPI_ReadStatus+0x3c>
  {
    return QSPI_ERROR;
 80037ac:	2001      	movs	r0, #1
  }

  *p_data = reg;

  return QSPI_OK;
}
 80037ae:	b016      	add	sp, #88	@ 0x58
 80037b0:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_OSPI_Receive(p_hqspi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	f10d 0107 	add.w	r1, sp, #7
 80037ba:	4620      	mov	r0, r4
 80037bc:	f007 fe8a 	bl	800b4d4 <HAL_OSPI_Receive>
 80037c0:	b918      	cbnz	r0, 80037ca <QSPI_ReadStatus+0x54>
  *p_data = reg;
 80037c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80037c6:	7033      	strb	r3, [r6, #0]
  return QSPI_OK;
 80037c8:	e7f1      	b.n	80037ae <QSPI_ReadStatus+0x38>
    return QSPI_ERROR;
 80037ca:	2001      	movs	r0, #1
 80037cc:	e7ef      	b.n	80037ae <QSPI_ReadStatus+0x38>

080037ce <QSPI_WriteStatus>:

static uint8_t QSPI_WriteStatus(OSPI_HandleTypeDef *p_hqspi, uint8_t cmd, uint8_t data)
{
 80037ce:	b530      	push	{r4, r5, lr}
 80037d0:	b097      	sub	sp, #92	@ 0x5c
 80037d2:	4604      	mov	r4, r0
 80037d4:	460d      	mov	r5, r1
 80037d6:	f88d 2007 	strb.w	r2, [sp, #7]
  OSPI_RegularCmdTypeDef s_command = {0};
 80037da:	2250      	movs	r2, #80	@ 0x50
 80037dc:	2100      	movs	r1, #0
 80037de:	a802      	add	r0, sp, #8
 80037e0:	f022 fb12 	bl	8025e08 <memset>

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
  s_command.Instruction        = cmd;
 80037e8:	9504      	str	r5, [sp, #16]
  
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80037ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037ee:	920a      	str	r2, [sp, #40]	@ 0x28
  
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  
  s_command.DataMode           = HAL_OSPI_DATA_1_LINE;
 80037f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037f4:	9210      	str	r2, [sp, #64]	@ 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = 0;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
  s_command.NbData             = 1;
 80037f6:	9311      	str	r3, [sp, #68]	@ 0x44

  /* Enable write operations */
  if (QSPI_WriteEnable(p_hqspi) != QSPI_OK)
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff ff79 	bl	80036f0 <QSPI_WriteEnable>
 80037fe:	b110      	cbz	r0, 8003806 <QSPI_WriteStatus+0x38>
  {
    return QSPI_ERROR;
 8003800:	2001      	movs	r0, #1
    return QSPI_ERROR;
  }


  return QSPI_OK;
}
 8003802:	b017      	add	sp, #92	@ 0x5c
 8003804:	bd30      	pop	{r4, r5, pc}
  if (HAL_OSPI_Command(p_hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380a:	a902      	add	r1, sp, #8
 800380c:	4620      	mov	r0, r4
 800380e:	f007 fdb3 	bl	800b378 <HAL_OSPI_Command>
 8003812:	b108      	cbz	r0, 8003818 <QSPI_WriteStatus+0x4a>
    return QSPI_ERROR;
 8003814:	2001      	movs	r0, #1
 8003816:	e7f4      	b.n	8003802 <QSPI_WriteStatus+0x34>
  if (HAL_OSPI_Transmit(p_hqspi, &data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381c:	f10d 0107 	add.w	r1, sp, #7
 8003820:	4620      	mov	r0, r4
 8003822:	f007 fe0a 	bl	800b43a <HAL_OSPI_Transmit>
 8003826:	b108      	cbz	r0, 800382c <QSPI_WriteStatus+0x5e>
    return QSPI_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	e7ea      	b.n	8003802 <QSPI_WriteStatus+0x34>
  if (QSPI_AutoPollingMemReady(p_hqspi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800382c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff fef9 	bl	8003628 <QSPI_AutoPollingMemReady>
 8003836:	2800      	cmp	r0, #0
 8003838:	d0e3      	beq.n	8003802 <QSPI_WriteStatus+0x34>
    return QSPI_ERROR;
 800383a:	2001      	movs	r0, #1
 800383c:	e7e1      	b.n	8003802 <QSPI_WriteStatus+0x34>
	...

08003840 <qspiGetXipMode>:
{
 8003840:	b508      	push	{r3, lr}
  if (HAL_OSPI_GetState(&hqspi) == HAL_OSPI_STATE_BUSY_MEM_MAPPED)
 8003842:	4804      	ldr	r0, [pc, #16]	@ (8003854 <qspiGetXipMode+0x14>)
 8003844:	f007 ffc4 	bl	800b7d0 <HAL_OSPI_GetState>
 8003848:	2888      	cmp	r0, #136	@ 0x88
 800384a:	d001      	beq.n	8003850 <qspiGetXipMode+0x10>
  bool ret = false;
 800384c:	2000      	movs	r0, #0
}
 800384e:	bd08      	pop	{r3, pc}
    ret = true;
 8003850:	2001      	movs	r0, #1
 8003852:	e7fc      	b.n	800384e <qspiGetXipMode+0xe>
 8003854:	240027c4 	.word	0x240027c4

08003858 <qspiGetAddr>:
}
 8003858:	f04f 4010 	mov.w	r0, #2415919104	@ 0x90000000
 800385c:	4770      	bx	lr

0800385e <qspiGetLength>:
}
 800385e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8003862:	4770      	bx	lr

08003864 <BSP_QSPI_Reset>:
{
 8003864:	b508      	push	{r3, lr}
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 8003866:	4803      	ldr	r0, [pc, #12]	@ (8003874 <BSP_QSPI_Reset+0x10>)
 8003868:	f7ff ff15 	bl	8003696 <QSPI_ResetMemory>
 800386c:	b900      	cbnz	r0, 8003870 <BSP_QSPI_Reset+0xc>
}
 800386e:	bd08      	pop	{r3, pc}
    return QSPI_NOT_SUPPORTED;
 8003870:	2004      	movs	r0, #4
 8003872:	e7fc      	b.n	800386e <BSP_QSPI_Reset+0xa>
 8003874:	240027c4 	.word	0x240027c4

08003878 <qspiReset>:
{
 8003878:	b510      	push	{r4, lr}
  if (is_init == true)
 800387a:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <qspiReset+0x18>)
 800387c:	781c      	ldrb	r4, [r3, #0]
 800387e:	b90c      	cbnz	r4, 8003884 <qspiReset+0xc>
}
 8003880:	4620      	mov	r0, r4
 8003882:	bd10      	pop	{r4, pc}
    if (BSP_QSPI_Reset() == QSPI_OK)
 8003884:	f7ff ffee 	bl	8003864 <BSP_QSPI_Reset>
 8003888:	2800      	cmp	r0, #0
 800388a:	d0f9      	beq.n	8003880 <qspiReset+0x8>
  bool ret = false;
 800388c:	2400      	movs	r4, #0
 800388e:	e7f7      	b.n	8003880 <qspiReset+0x8>
 8003890:	24002820 	.word	0x24002820

08003894 <BSP_QSPI_Config>:
{
 8003894:	b500      	push	{lr}
 8003896:	b083      	sub	sp, #12
  uint8_t reg = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (QSPI_ReadStatus(&hqspi, READ_STATUS_REG2_CMD, &reg) != QSPI_OK)
 800389e:	f10d 0207 	add.w	r2, sp, #7
 80038a2:	2135      	movs	r1, #53	@ 0x35
 80038a4:	480c      	ldr	r0, [pc, #48]	@ (80038d8 <BSP_QSPI_Config+0x44>)
 80038a6:	f7ff ff66 	bl	8003776 <QSPI_ReadStatus>
 80038aa:	b998      	cbnz	r0, 80038d4 <BSP_QSPI_Config+0x40>
  if ((reg & (1<<1)) == 0x00)
 80038ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80038b0:	f012 0f02 	tst.w	r2, #2
 80038b4:	d002      	beq.n	80038bc <BSP_QSPI_Config+0x28>
}
 80038b6:	b003      	add	sp, #12
 80038b8:	f85d fb04 	ldr.w	pc, [sp], #4
    reg |= (1<<1);
 80038bc:	f042 0202 	orr.w	r2, r2, #2
 80038c0:	f88d 2007 	strb.w	r2, [sp, #7]
    if (QSPI_WriteStatus(&hqspi, WRITE_STATUS_REG2_CMD, reg) != QSPI_OK)
 80038c4:	2131      	movs	r1, #49	@ 0x31
 80038c6:	4804      	ldr	r0, [pc, #16]	@ (80038d8 <BSP_QSPI_Config+0x44>)
 80038c8:	f7ff ff81 	bl	80037ce <QSPI_WriteStatus>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d0f2      	beq.n	80038b6 <BSP_QSPI_Config+0x22>
      return QSPI_ERROR;
 80038d0:	2001      	movs	r0, #1
 80038d2:	e7f0      	b.n	80038b6 <BSP_QSPI_Config+0x22>
    return QSPI_ERROR;
 80038d4:	2001      	movs	r0, #1
 80038d6:	e7ee      	b.n	80038b6 <BSP_QSPI_Config+0x22>
 80038d8:	240027c4 	.word	0x240027c4

080038dc <BSP_QSPI_Init>:
{
 80038dc:	b500      	push	{lr}
 80038de:	b087      	sub	sp, #28
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80038e0:	2300      	movs	r3, #0
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	9302      	str	r3, [sp, #8]
 80038e8:	9303      	str	r3, [sp, #12]
 80038ea:	9304      	str	r3, [sp, #16]
 80038ec:	9305      	str	r3, [sp, #20]
  hqspi.Instance = OCTOSPI1;
 80038ee:	482b      	ldr	r0, [pc, #172]	@ (800399c <BSP_QSPI_Init+0xc0>)
 80038f0:	4b2b      	ldr	r3, [pc, #172]	@ (80039a0 <BSP_QSPI_Init+0xc4>)
 80038f2:	6003      	str	r3, [r0, #0]
  if (HAL_OSPI_DeInit(&hqspi) != HAL_OK)
 80038f4:	f007 fd2c 	bl	800b350 <HAL_OSPI_DeInit>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d14b      	bne.n	8003994 <BSP_QSPI_Init+0xb8>
  hqspi.Init.FifoThreshold       = 4;
 80038fc:	4b27      	ldr	r3, [pc, #156]	@ (800399c <BSP_QSPI_Init+0xc0>)
 80038fe:	2204      	movs	r2, #4
 8003900:	605a      	str	r2, [r3, #4]
  hqspi.Init.DualQuad            = HAL_OSPI_DUALQUAD_DISABLE;
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  hqspi.Init.MemoryType          = HAL_OSPI_MEMTYPE_MICRON;
 8003906:	60da      	str	r2, [r3, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800390c:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003910:	2b00      	cmp	r3, #0
 8003912:	d030      	beq.n	8003976 <BSP_QSPI_Init+0x9a>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003914:	fab3 f383 	clz	r3, r3
  hqspi.Init.DeviceSize          = POSITION_VAL(W25Q256JV_FLASH_SIZE);
 8003918:	4820      	ldr	r0, [pc, #128]	@ (800399c <BSP_QSPI_Init+0xc0>)
 800391a:	6103      	str	r3, [r0, #16]
  hqspi.Init.ChipSelectHighTime  = 5;
 800391c:	2305      	movs	r3, #5
 800391e:	6143      	str	r3, [r0, #20]
  hqspi.Init.FreeRunningClock    = HAL_OSPI_FREERUNCLK_DISABLE;
 8003920:	2300      	movs	r3, #0
 8003922:	6183      	str	r3, [r0, #24]
  hqspi.Init.ClockMode           = HAL_OSPI_CLOCK_MODE_0;
 8003924:	61c3      	str	r3, [r0, #28]
  hqspi.Init.WrapSize            = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8003926:	6203      	str	r3, [r0, #32]
  hqspi.Init.ClockPrescaler      = 3;
 8003928:	2203      	movs	r2, #3
 800392a:	6242      	str	r2, [r0, #36]	@ 0x24
  hqspi.Init.SampleShifting      = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800392c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003930:	6282      	str	r2, [r0, #40]	@ 0x28
  hqspi.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8003932:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hqspi.Init.ChipSelectBoundary  = 0;
 8003934:	6303      	str	r3, [r0, #48]	@ 0x30
  hqspi.Init.DelayBlockBypass    = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8003936:	2208      	movs	r2, #8
 8003938:	6342      	str	r2, [r0, #52]	@ 0x34
  hqspi.Init.MaxTran             = 0;
 800393a:	6383      	str	r3, [r0, #56]	@ 0x38
  hqspi.Init.Refresh             = 0;
 800393c:	63c3      	str	r3, [r0, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hqspi) != HAL_OK)
 800393e:	f007 fec3 	bl	800b6c8 <HAL_OSPI_Init>
 8003942:	b9d0      	cbnz	r0, 800397a <BSP_QSPI_Init+0x9e>
  sOspiManagerCfg.ClkPort = 1;
 8003944:	2301      	movs	r3, #1
 8003946:	9300      	str	r3, [sp, #0]
  sOspiManagerCfg.NCSPort = 1;
 8003948:	9302      	str	r3, [sp, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 800394a:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 800394e:	9303      	str	r3, [sp, #12]
  if (HAL_OSPIM_Config(&hqspi, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003954:	4669      	mov	r1, sp
 8003956:	4811      	ldr	r0, [pc, #68]	@ (800399c <BSP_QSPI_Init+0xc0>)
 8003958:	f007 ff3c 	bl	800b7d4 <HAL_OSPIM_Config>
 800395c:	b990      	cbnz	r0, 8003984 <BSP_QSPI_Init+0xa8>
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 800395e:	480f      	ldr	r0, [pc, #60]	@ (800399c <BSP_QSPI_Init+0xc0>)
 8003960:	f7ff fe99 	bl	8003696 <QSPI_ResetMemory>
 8003964:	b988      	cbnz	r0, 800398a <BSP_QSPI_Init+0xae>
  if (BSP_QSPI_Config() != QSPI_OK)
 8003966:	f7ff ff95 	bl	8003894 <BSP_QSPI_Config>
 800396a:	b1a0      	cbz	r0, 8003996 <BSP_QSPI_Init+0xba>
    logPrintf("QSPI_Config() fail\n");
 800396c:	480d      	ldr	r0, [pc, #52]	@ (80039a4 <BSP_QSPI_Init+0xc8>)
 800396e:	f7ff fd2b 	bl	80033c8 <logPrintf>
    return QSPI_NOT_SUPPORTED;
 8003972:	2004      	movs	r0, #4
 8003974:	e00f      	b.n	8003996 <BSP_QSPI_Init+0xba>
    return 32U;
 8003976:	2320      	movs	r3, #32
 8003978:	e7ce      	b.n	8003918 <BSP_QSPI_Init+0x3c>
    logPrintf("HAL_QSPI_Init() fail\n");
 800397a:	480b      	ldr	r0, [pc, #44]	@ (80039a8 <BSP_QSPI_Init+0xcc>)
 800397c:	f7ff fd24 	bl	80033c8 <logPrintf>
    return QSPI_ERROR;
 8003980:	2001      	movs	r0, #1
 8003982:	e008      	b.n	8003996 <BSP_QSPI_Init+0xba>
    Error_Handler();
 8003984:	f003 f9db 	bl	8006d3e <Error_Handler>
 8003988:	e7e9      	b.n	800395e <BSP_QSPI_Init+0x82>
    logPrintf("QSPI_ResetMemory() fail\n");
 800398a:	4808      	ldr	r0, [pc, #32]	@ (80039ac <BSP_QSPI_Init+0xd0>)
 800398c:	f7ff fd1c 	bl	80033c8 <logPrintf>
    return QSPI_NOT_SUPPORTED;
 8003990:	2004      	movs	r0, #4
 8003992:	e000      	b.n	8003996 <BSP_QSPI_Init+0xba>
    return QSPI_ERROR;
 8003994:	2001      	movs	r0, #1
}
 8003996:	b007      	add	sp, #28
 8003998:	f85d fb04 	ldr.w	pc, [sp], #4
 800399c:	240027c4 	.word	0x240027c4
 80039a0:	52005000 	.word	0x52005000
 80039a4:	08028884 	.word	0x08028884
 80039a8:	08028850 	.word	0x08028850
 80039ac:	08028868 	.word	0x08028868

080039b0 <BSP_QSPI_Read>:
{
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	b094      	sub	sp, #80	@ 0x50
 80039b4:	4606      	mov	r6, r0
 80039b6:	460d      	mov	r5, r1
 80039b8:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80039ba:	2250      	movs	r2, #80	@ 0x50
 80039bc:	2100      	movs	r1, #0
 80039be:	4668      	mov	r0, sp
 80039c0:	f022 fa22 	bl	8025e08 <memset>
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80039c4:	2301      	movs	r3, #1
 80039c6:	9303      	str	r3, [sp, #12]
  s_command.Instruction        = QUAD_INOUT_FAST_READ_CMD;
 80039c8:	23eb      	movs	r3, #235	@ 0xeb
 80039ca:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80039cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80039d0:	9307      	str	r3, [sp, #28]
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80039d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039d6:	9308      	str	r3, [sp, #32]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 80039d8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80039dc:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DataMode           = HAL_OSPI_DATA_4_LINES;
 80039de:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80039e2:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DummyCycles        = W25Q256JV_DUMMY_CYCLES_READ_QUAD;
 80039e4:	2304      	movs	r3, #4
 80039e6:	9311      	str	r3, [sp, #68]	@ 0x44
  s_command.Address            = addr;
 80039e8:	9506      	str	r5, [sp, #24]
  s_command.NbData             = length;
 80039ea:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_OSPI_Command(&hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f0:	4669      	mov	r1, sp
 80039f2:	4807      	ldr	r0, [pc, #28]	@ (8003a10 <BSP_QSPI_Read+0x60>)
 80039f4:	f007 fcc0 	bl	800b378 <HAL_OSPI_Command>
 80039f8:	b110      	cbz	r0, 8003a00 <BSP_QSPI_Read+0x50>
}
 80039fa:	2000      	movs	r0, #0
 80039fc:	b014      	add	sp, #80	@ 0x50
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_OSPI_Receive(&hqspi, p_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a04:	4631      	mov	r1, r6
 8003a06:	4802      	ldr	r0, [pc, #8]	@ (8003a10 <BSP_QSPI_Read+0x60>)
 8003a08:	f007 fd64 	bl	800b4d4 <HAL_OSPI_Receive>
 8003a0c:	e7f5      	b.n	80039fa <BSP_QSPI_Read+0x4a>
 8003a0e:	bf00      	nop
 8003a10:	240027c4 	.word	0x240027c4

08003a14 <qspiRead>:
{
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	4604      	mov	r4, r0
 8003a18:	460d      	mov	r5, r1
 8003a1a:	4616      	mov	r6, r2
  if (qspiGetXipMode() == false)
 8003a1c:	f7ff ff10 	bl	8003840 <qspiGetXipMode>
 8003a20:	4607      	mov	r7, r0
 8003a22:	b120      	cbz	r0, 8003a2e <qspiRead+0x1a>
  if (addr >= qspiGetLength())
 8003a24:	f7ff ff1b 	bl	800385e <qspiGetLength>
 8003a28:	42a0      	cmp	r0, r4
 8003a2a:	d802      	bhi.n	8003a32 <qspiRead+0x1e>
    return false;
 8003a2c:	2700      	movs	r7, #0
}
 8003a2e:	4638      	mov	r0, r7
 8003a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ret = BSP_QSPI_Read(p_data, addr, length);
 8003a32:	4632      	mov	r2, r6
 8003a34:	4621      	mov	r1, r4
 8003a36:	4628      	mov	r0, r5
 8003a38:	f7ff ffba 	bl	80039b0 <BSP_QSPI_Read>
  if (ret == QSPI_OK)
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d0f6      	beq.n	8003a2e <qspiRead+0x1a>
    return false;
 8003a40:	2700      	movs	r7, #0
 8003a42:	e7f4      	b.n	8003a2e <qspiRead+0x1a>

08003a44 <BSP_QSPI_Write>:
{
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	b095      	sub	sp, #84	@ 0x54
 8003a48:	4606      	mov	r6, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	4617      	mov	r7, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003a4e:	2250      	movs	r2, #80	@ 0x50
 8003a50:	2100      	movs	r1, #0
 8003a52:	4668      	mov	r0, sp
 8003a54:	f022 f9d8 	bl	8025e08 <memset>
  current_size = W25Q256JV_PAGE_SIZE - (addr % W25Q256JV_PAGE_SIZE);
 8003a58:	b2e5      	uxtb	r5, r4
 8003a5a:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
  if (current_size > length)
 8003a5e:	42bd      	cmp	r5, r7
 8003a60:	d900      	bls.n	8003a64 <BSP_QSPI_Write+0x20>
    current_size = length;
 8003a62:	463d      	mov	r5, r7
  end_addr = addr + length;
 8003a64:	4427      	add	r7, r4
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003a66:	2301      	movs	r3, #1
 8003a68:	9303      	str	r3, [sp, #12]
  s_command.Instruction        = QUAD_IN_FAST_PROG_CMD;
 8003a6a:	2332      	movs	r3, #50	@ 0x32
 8003a6c:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8003a6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a72:	9307      	str	r3, [sp, #28]
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8003a74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a78:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = HAL_OSPI_DATA_4_LINES;
 8003a7a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8003a7e:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003a80:	e003      	b.n	8003a8a <BSP_QSPI_Write+0x46>
    current_size = ((current_addr + W25Q256JV_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q256JV_PAGE_SIZE;
 8003a82:	f44f 7580 	mov.w	r5, #256	@ 0x100
  } while (current_addr < end_addr);
 8003a86:	42a7      	cmp	r7, r4
 8003a88:	d923      	bls.n	8003ad2 <BSP_QSPI_Write+0x8e>
    s_command.Address = current_addr;
 8003a8a:	9406      	str	r4, [sp, #24]
    s_command.NbData  = current_size;
 8003a8c:	950f      	str	r5, [sp, #60]	@ 0x3c
    if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8003a8e:	4815      	ldr	r0, [pc, #84]	@ (8003ae4 <BSP_QSPI_Write+0xa0>)
 8003a90:	f7ff fe2e 	bl	80036f0 <QSPI_WriteEnable>
 8003a94:	b9e0      	cbnz	r0, 8003ad0 <BSP_QSPI_Write+0x8c>
    if (HAL_OSPI_Command(&hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4669      	mov	r1, sp
 8003a9c:	4811      	ldr	r0, [pc, #68]	@ (8003ae4 <BSP_QSPI_Write+0xa0>)
 8003a9e:	f007 fc6b 	bl	800b378 <HAL_OSPI_Command>
 8003aa2:	b9c8      	cbnz	r0, 8003ad8 <BSP_QSPI_Write+0x94>
    if (HAL_OSPI_Transmit(&hqspi, p_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa8:	4631      	mov	r1, r6
 8003aaa:	480e      	ldr	r0, [pc, #56]	@ (8003ae4 <BSP_QSPI_Write+0xa0>)
 8003aac:	f007 fcc5 	bl	800b43a <HAL_OSPI_Transmit>
 8003ab0:	b9a0      	cbnz	r0, 8003adc <BSP_QSPI_Write+0x98>
    if (QSPI_AutoPollingMemReady(&hqspi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003ab2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003ab6:	480b      	ldr	r0, [pc, #44]	@ (8003ae4 <BSP_QSPI_Write+0xa0>)
 8003ab8:	f7ff fdb6 	bl	8003628 <QSPI_AutoPollingMemReady>
 8003abc:	4602      	mov	r2, r0
 8003abe:	b978      	cbnz	r0, 8003ae0 <BSP_QSPI_Write+0x9c>
    current_addr += current_size;
 8003ac0:	442c      	add	r4, r5
    p_data += current_size;
 8003ac2:	442e      	add	r6, r5
    current_size = ((current_addr + W25Q256JV_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q256JV_PAGE_SIZE;
 8003ac4:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8003ac8:	42bb      	cmp	r3, r7
 8003aca:	d9da      	bls.n	8003a82 <BSP_QSPI_Write+0x3e>
 8003acc:	1b3d      	subs	r5, r7, r4
 8003ace:	e7da      	b.n	8003a86 <BSP_QSPI_Write+0x42>
      return QSPI_ERROR;
 8003ad0:	2201      	movs	r2, #1
}
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	b015      	add	sp, #84	@ 0x54
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return QSPI_ERROR;
 8003ad8:	2201      	movs	r2, #1
 8003ada:	e7fa      	b.n	8003ad2 <BSP_QSPI_Write+0x8e>
      return QSPI_ERROR;
 8003adc:	2201      	movs	r2, #1
 8003ade:	e7f8      	b.n	8003ad2 <BSP_QSPI_Write+0x8e>
      return QSPI_ERROR;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	e7f6      	b.n	8003ad2 <BSP_QSPI_Write+0x8e>
 8003ae4:	240027c4 	.word	0x240027c4

08003ae8 <qspiWrite>:
{
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	460d      	mov	r5, r1
 8003aee:	4616      	mov	r6, r2
  if (addr >= qspiGetLength())
 8003af0:	f7ff feb5 	bl	800385e <qspiGetLength>
 8003af4:	42a0      	cmp	r0, r4
 8003af6:	d801      	bhi.n	8003afc <qspiWrite+0x14>
    return false;
 8003af8:	2000      	movs	r0, #0
}
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
  ret = BSP_QSPI_Write(p_data, addr, length);
 8003afc:	4632      	mov	r2, r6
 8003afe:	4621      	mov	r1, r4
 8003b00:	4628      	mov	r0, r5
 8003b02:	f7ff ff9f 	bl	8003a44 <BSP_QSPI_Write>
  if (ret == QSPI_OK)
 8003b06:	b908      	cbnz	r0, 8003b0c <qspiWrite+0x24>
    return true;
 8003b08:	2001      	movs	r0, #1
 8003b0a:	e7f6      	b.n	8003afa <qspiWrite+0x12>
    return false;
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e7f4      	b.n	8003afa <qspiWrite+0x12>

08003b10 <BSP_QSPI_Erase_Sector>:
{
 8003b10:	b510      	push	{r4, lr}
 8003b12:	b094      	sub	sp, #80	@ 0x50
 8003b14:	4604      	mov	r4, r0
  OSPI_RegularCmdTypeDef s_command = {0};
 8003b16:	2250      	movs	r2, #80	@ 0x50
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4668      	mov	r0, sp
 8003b1c:	f022 f974 	bl	8025e08 <memset>
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	9303      	str	r3, [sp, #12]
  s_command.Instruction        = SECTOR_ERASE_CMD;
 8003b24:	23d8      	movs	r3, #216	@ 0xd8
 8003b26:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8003b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b2c:	9307      	str	r3, [sp, #28]
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8003b2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b32:	9308      	str	r3, [sp, #32]
  s_command.Address            = SectorAddress;
 8003b34:	9406      	str	r4, [sp, #24]
  if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8003b36:	480c      	ldr	r0, [pc, #48]	@ (8003b68 <BSP_QSPI_Erase_Sector+0x58>)
 8003b38:	f7ff fdda 	bl	80036f0 <QSPI_WriteEnable>
 8003b3c:	b110      	cbz	r0, 8003b44 <BSP_QSPI_Erase_Sector+0x34>
    return QSPI_ERROR;
 8003b3e:	2001      	movs	r0, #1
}
 8003b40:	b014      	add	sp, #80	@ 0x50
 8003b42:	bd10      	pop	{r4, pc}
  if (HAL_OSPI_Command(&hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b48:	4669      	mov	r1, sp
 8003b4a:	4807      	ldr	r0, [pc, #28]	@ (8003b68 <BSP_QSPI_Erase_Sector+0x58>)
 8003b4c:	f007 fc14 	bl	800b378 <HAL_OSPI_Command>
 8003b50:	b108      	cbz	r0, 8003b56 <BSP_QSPI_Erase_Sector+0x46>
    return QSPI_ERROR;
 8003b52:	2001      	movs	r0, #1
 8003b54:	e7f4      	b.n	8003b40 <BSP_QSPI_Erase_Sector+0x30>
  if (QSPI_AutoPollingMemReady(&hqspi, W25Q256JV_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8003b56:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8003b5a:	4803      	ldr	r0, [pc, #12]	@ (8003b68 <BSP_QSPI_Erase_Sector+0x58>)
 8003b5c:	f7ff fd64 	bl	8003628 <QSPI_AutoPollingMemReady>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0ed      	beq.n	8003b40 <BSP_QSPI_Erase_Sector+0x30>
    return QSPI_ERROR;
 8003b64:	2001      	movs	r0, #1
 8003b66:	e7eb      	b.n	8003b40 <BSP_QSPI_Erase_Sector+0x30>
 8003b68:	240027c4 	.word	0x240027c4

08003b6c <qspiEraseSector>:
{
 8003b6c:	b508      	push	{r3, lr}
  ret = BSP_QSPI_Erase_Sector(sector_addr);
 8003b6e:	f7ff ffcf 	bl	8003b10 <BSP_QSPI_Erase_Sector>
  if (ret == QSPI_OK)
 8003b72:	b908      	cbnz	r0, 8003b78 <qspiEraseSector+0xc>
    return true;
 8003b74:	2001      	movs	r0, #1
}
 8003b76:	bd08      	pop	{r3, pc}
    return false;
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e7fc      	b.n	8003b76 <qspiEraseSector+0xa>

08003b7c <qspiErase>:
{
 8003b7c:	b538      	push	{r3, r4, r5, lr}
  if ((addr > flash_length) || ((addr+length) > flash_length))
 8003b7e:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 8003b82:	d811      	bhi.n	8003ba8 <qspiErase+0x2c>
 8003b84:	1845      	adds	r5, r0, r1
 8003b86:	f1b5 7f00 	cmp.w	r5, #33554432	@ 0x2000000
 8003b8a:	d810      	bhi.n	8003bae <qspiErase+0x32>
  if (length == 0)
 8003b8c:	b189      	cbz	r1, 8003bb2 <qspiErase+0x36>
  block_begin = addr / block_size;
 8003b8e:	0c04      	lsrs	r4, r0, #16
  block_end   = (addr + length - 1) / block_size;
 8003b90:	3d01      	subs	r5, #1
 8003b92:	0c2d      	lsrs	r5, r5, #16
  bool ret = true;
 8003b94:	2301      	movs	r3, #1
  for (i=block_begin; i<=block_end; i++)
 8003b96:	42ac      	cmp	r4, r5
 8003b98:	d807      	bhi.n	8003baa <qspiErase+0x2e>
    ret = qspiEraseSector(block_size*i);
 8003b9a:	0420      	lsls	r0, r4, #16
 8003b9c:	f7ff ffe6 	bl	8003b6c <qspiEraseSector>
    if (ret == false)
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	b110      	cbz	r0, 8003baa <qspiErase+0x2e>
  for (i=block_begin; i<=block_end; i++)
 8003ba4:	3401      	adds	r4, #1
 8003ba6:	e7f6      	b.n	8003b96 <qspiErase+0x1a>
    return false;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
    return false;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e7fb      	b.n	8003baa <qspiErase+0x2e>
    return false;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e7f9      	b.n	8003baa <qspiErase+0x2e>
	...

08003bb8 <BSP_QSPI_GetID>:
{
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	b094      	sub	sp, #80	@ 0x50
 8003bbc:	4604      	mov	r4, r0
  OSPI_RegularCmdTypeDef s_command = {0};
 8003bbe:	2250      	movs	r2, #80	@ 0x50
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4668      	mov	r0, sp
 8003bc4:	f022 f920 	bl	8025e08 <memset>
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	9303      	str	r3, [sp, #12]
  s_command.Instruction        = READ_ID_CMD;
 8003bcc:	239f      	movs	r3, #159	@ 0x9f
 8003bce:	9302      	str	r3, [sp, #8]
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8003bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bd4:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003bd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bda:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.NbData             = 20;
 8003bdc:	2314      	movs	r3, #20
 8003bde:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_OSPI_Command(&hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be4:	4669      	mov	r1, sp
 8003be6:	4809      	ldr	r0, [pc, #36]	@ (8003c0c <BSP_QSPI_GetID+0x54>)
 8003be8:	f007 fbc6 	bl	800b378 <HAL_OSPI_Command>
 8003bec:	b110      	cbz	r0, 8003bf4 <BSP_QSPI_GetID+0x3c>
    return QSPI_ERROR;
 8003bee:	2001      	movs	r0, #1
}
 8003bf0:	b014      	add	sp, #80	@ 0x50
 8003bf2:	bd10      	pop	{r4, pc}
  if (HAL_OSPI_Receive(&hqspi, p_info->device_id, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf8:	f104 0114 	add.w	r1, r4, #20
 8003bfc:	4803      	ldr	r0, [pc, #12]	@ (8003c0c <BSP_QSPI_GetID+0x54>)
 8003bfe:	f007 fc69 	bl	800b4d4 <HAL_OSPI_Receive>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d0f4      	beq.n	8003bf0 <BSP_QSPI_GetID+0x38>
    return QSPI_ERROR;
 8003c06:	2001      	movs	r0, #1
 8003c08:	e7f2      	b.n	8003bf0 <BSP_QSPI_GetID+0x38>
 8003c0a:	bf00      	nop
 8003c0c:	240027c4 	.word	0x240027c4

08003c10 <qspiInit>:
{
 8003c10:	b510      	push	{r4, lr}
 8003c12:	b08a      	sub	sp, #40	@ 0x28
  if (BSP_QSPI_Init() == QSPI_OK)
 8003c14:	f7ff fe62 	bl	80038dc <BSP_QSPI_Init>
  if (BSP_QSPI_GetID(&info) == QSPI_OK)
 8003c18:	4668      	mov	r0, sp
 8003c1a:	f7ff ffcd 	bl	8003bb8 <BSP_QSPI_GetID>
 8003c1e:	bb18      	cbnz	r0, 8003c68 <qspiInit+0x58>
    if (info.device_id[0] == 0xEF && info.device_id[1] == 0x40 && info.device_id[2] == 0x19)
 8003c20:	9b05      	ldr	r3, [sp, #20]
 8003c22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c26:	4a13      	ldr	r2, [pc, #76]	@ (8003c74 <qspiInit+0x64>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d015      	beq.n	8003c58 <qspiInit+0x48>
      logPrintf("[OK] qspiInit()\n");
 8003c2c:	4812      	ldr	r0, [pc, #72]	@ (8003c78 <qspiInit+0x68>)
 8003c2e:	f7ff fbcb 	bl	80033c8 <logPrintf>
      logPrintf("     W25Q256JV Not Found %X %X %X\r\n", info.device_id[0], info.device_id[1], info.device_id[2]);
 8003c32:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003c36:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8003c3a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8003c3e:	480f      	ldr	r0, [pc, #60]	@ (8003c7c <qspiInit+0x6c>)
 8003c40:	f7ff fbc2 	bl	80033c8 <logPrintf>
      ret = false;
 8003c44:	2400      	movs	r4, #0
  is_init = ret;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	@ (8003c80 <qspiInit+0x70>)
 8003c48:	701c      	strb	r4, [r3, #0]
  cliAdd("qspi", cliCmd);
 8003c4a:	490e      	ldr	r1, [pc, #56]	@ (8003c84 <qspiInit+0x74>)
 8003c4c:	480e      	ldr	r0, [pc, #56]	@ (8003c88 <qspiInit+0x78>)
 8003c4e:	f7fd fc07 	bl	8001460 <cliAdd>
}
 8003c52:	4620      	mov	r0, r4
 8003c54:	b00a      	add	sp, #40	@ 0x28
 8003c56:	bd10      	pop	{r4, pc}
      logPrintf("[OK] qspiInit()\n");
 8003c58:	4807      	ldr	r0, [pc, #28]	@ (8003c78 <qspiInit+0x68>)
 8003c5a:	f7ff fbb5 	bl	80033c8 <logPrintf>
      logPrintf("     W25Q256JV Found\r\n");
 8003c5e:	480b      	ldr	r0, [pc, #44]	@ (8003c8c <qspiInit+0x7c>)
 8003c60:	f7ff fbb2 	bl	80033c8 <logPrintf>
      ret = true;
 8003c64:	2401      	movs	r4, #1
 8003c66:	e7ee      	b.n	8003c46 <qspiInit+0x36>
    logPrintf("[NG] qspiInit()\n");
 8003c68:	4809      	ldr	r0, [pc, #36]	@ (8003c90 <qspiInit+0x80>)
 8003c6a:	f7ff fbad 	bl	80033c8 <logPrintf>
    ret = false;
 8003c6e:	2400      	movs	r4, #0
 8003c70:	e7e9      	b.n	8003c46 <qspiInit+0x36>
 8003c72:	bf00      	nop
 8003c74:	001940ef 	.word	0x001940ef
 8003c78:	08028898 	.word	0x08028898
 8003c7c:	080288c4 	.word	0x080288c4
 8003c80:	24002820 	.word	0x24002820
 8003c84:	08003d71 	.word	0x08003d71
 8003c88:	080288fc 	.word	0x080288fc
 8003c8c:	080288ac 	.word	0x080288ac
 8003c90:	080288e8 	.word	0x080288e8

08003c94 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8003c94:	b500      	push	{lr}
 8003c96:	b097      	sub	sp, #92	@ 0x5c
  OSPI_RegularCmdTypeDef   s_command = {0};
 8003c98:	2250      	movs	r2, #80	@ 0x50
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	a802      	add	r0, sp, #8
 8003c9e:	f022 f8b3 	bl	8025e08 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	9301      	str	r3, [sp, #4]
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003cac:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = QUAD_INOUT_FAST_READ_CMD;
 8003cae:	23eb      	movs	r3, #235	@ 0xeb
 8003cb0:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8003cb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003cb6:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8003cb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cbc:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8003cbe:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003cc2:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AlternateBytes     = (1<<5);
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.DataMode           = HAL_OSPI_DATA_4_LINES;
 8003cc8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8003ccc:	9310      	str	r3, [sp, #64]	@ 0x40
   s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	9302      	str	r3, [sp, #8]
   s_command.Instruction        = QUAD_IN_FAST_PROG_CMD;
 8003cd2:	2332      	movs	r3, #50	@ 0x32
 8003cd4:	9304      	str	r3, [sp, #16]
   if (HAL_OSPI_Command(&hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	a902      	add	r1, sp, #8
 8003cdc:	4814      	ldr	r0, [pc, #80]	@ (8003d30 <BSP_QSPI_EnableMemoryMappedMode+0x9c>)
 8003cde:	f007 fb4b 	bl	800b378 <HAL_OSPI_Command>
 8003ce2:	b118      	cbz	r0, 8003cec <BSP_QSPI_EnableMemoryMappedMode+0x58>
     return QSPI_ERROR;
 8003ce4:	2001      	movs	r0, #1
}
 8003ce6:	b017      	add	sp, #92	@ 0x5c
 8003ce8:	f85d fb04 	ldr.w	pc, [sp], #4
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003cec:	2301      	movs	r3, #1
 8003cee:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = QUAD_INOUT_FAST_READ_CMD;
 8003cf0:	23eb      	movs	r3, #235	@ 0xeb
 8003cf2:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = W25Q256JV_DUMMY_CYCLES_READ_QUAD;
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9314      	str	r3, [sp, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_ONLY_FIRST_CMD;
 8003cfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003d00:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_OSPI_Command(&hqspi, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d06:	a902      	add	r1, sp, #8
 8003d08:	4809      	ldr	r0, [pc, #36]	@ (8003d30 <BSP_QSPI_EnableMemoryMappedMode+0x9c>)
 8003d0a:	f007 fb35 	bl	800b378 <HAL_OSPI_Command>
 8003d0e:	b108      	cbz	r0, 8003d14 <BSP_QSPI_EnableMemoryMappedMode+0x80>
    return QSPI_ERROR;
 8003d10:	2001      	movs	r0, #1
 8003d12:	e7e8      	b.n	8003ce6 <BSP_QSPI_EnableMemoryMappedMode+0x52>
  hqspi.State = HAL_OSPI_STATE_CMD_CFG;
 8003d14:	4806      	ldr	r0, [pc, #24]	@ (8003d30 <BSP_QSPI_EnableMemoryMappedMode+0x9c>)
 8003d16:	2304      	movs	r3, #4
 8003d18:	6503      	str	r3, [r0, #80]	@ 0x50
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	9300      	str	r3, [sp, #0]
  s_mem_mapped_cfg.TimeOutPeriod     = 0x20;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	9301      	str	r3, [sp, #4]
  if (HAL_OSPI_MemoryMapped(&hqspi, &s_mem_mapped_cfg) != HAL_OK)
 8003d22:	4669      	mov	r1, sp
 8003d24:	f007 fc96 	bl	800b654 <HAL_OSPI_MemoryMapped>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d0dc      	beq.n	8003ce6 <BSP_QSPI_EnableMemoryMappedMode+0x52>
    return QSPI_ERROR;
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	e7da      	b.n	8003ce6 <BSP_QSPI_EnableMemoryMappedMode+0x52>
 8003d30:	240027c4 	.word	0x240027c4

08003d34 <qspiEnableMemoryMappedMode>:
{
 8003d34:	b508      	push	{r3, lr}
  ret = BSP_QSPI_EnableMemoryMappedMode();
 8003d36:	f7ff ffad 	bl	8003c94 <BSP_QSPI_EnableMemoryMappedMode>
  if (ret == QSPI_OK)
 8003d3a:	b908      	cbnz	r0, 8003d40 <qspiEnableMemoryMappedMode+0xc>
    return true;
 8003d3c:	2001      	movs	r0, #1
}
 8003d3e:	bd08      	pop	{r3, pc}
    return false;
 8003d40:	2000      	movs	r0, #0
 8003d42:	e7fc      	b.n	8003d3e <qspiEnableMemoryMappedMode+0xa>

08003d44 <qspiSetXipMode>:
{
 8003d44:	b508      	push	{r3, lr}
  if (enable)
 8003d46:	b150      	cbz	r0, 8003d5e <qspiSetXipMode+0x1a>
    if (qspiGetXipMode() == false)
 8003d48:	f7ff fd7a 	bl	8003840 <qspiGetXipMode>
 8003d4c:	b120      	cbz	r0, 8003d58 <qspiSetXipMode+0x14>
  uint8_t ret = true;
 8003d4e:	2001      	movs	r0, #1
}
 8003d50:	3800      	subs	r0, #0
 8003d52:	bf18      	it	ne
 8003d54:	2001      	movne	r0, #1
 8003d56:	bd08      	pop	{r3, pc}
      ret = qspiEnableMemoryMappedMode();
 8003d58:	f7ff ffec 	bl	8003d34 <qspiEnableMemoryMappedMode>
 8003d5c:	e7f8      	b.n	8003d50 <qspiSetXipMode+0xc>
    if (qspiGetXipMode() == true)
 8003d5e:	f7ff fd6f 	bl	8003840 <qspiGetXipMode>
 8003d62:	b908      	cbnz	r0, 8003d68 <qspiSetXipMode+0x24>
  uint8_t ret = true;
 8003d64:	2001      	movs	r0, #1
 8003d66:	e7f3      	b.n	8003d50 <qspiSetXipMode+0xc>
      ret = qspiReset();
 8003d68:	f7ff fd86 	bl	8003878 <qspiReset>
 8003d6c:	e7f0      	b.n	8003d50 <qspiSetXipMode+0xc>
	...

08003d70 <cliCmd>:

#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 8003d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d74:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8003d78:	4604      	mov	r4, r0
  uint32_t pre_time;
  bool flash_ret;



  if(args->argc == 1 && args->isStr(0, "info"))
 8003d7a:	8803      	ldrh	r3, [r0, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d01f      	beq.n	8003dc0 <cliCmd+0x50>
  bool ret = false;
 8003d80:	2500      	movs	r5, #0
        break;
    }
    ret = true;
  }

  if(args->argc == 1 && args->isStr(0, "test"))
 8003d82:	8823      	ldrh	r3, [r4, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	f000 80a6 	beq.w	8003ed6 <cliCmd+0x166>
      }
    }
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "xip"))
 8003d8a:	8823      	ldrh	r3, [r4, #0]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f000 80c0 	beq.w	8003f12 <cliCmd+0x1a2>
    cliPrintf("qspi xip mode  : %s\n", qspiGetXipMode() ? "True":"False");

    ret = true;
  }

  if (args->argc == 3 && args->isStr(0, "read"))
 8003d92:	8823      	ldrh	r3, [r4, #0]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	f000 80dd 	beq.w	8003f54 <cliCmd+0x1e4>
      }
    }
    ret = true;
  }

  if(args->argc == 3 && args->isStr(0, "erase") == true)
 8003d9a:	8823      	ldrh	r3, [r4, #0]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	f000 8147 	beq.w	8004030 <cliCmd+0x2c0>
      cliPrintf("FAIL\n");
    }
    ret = true;
  }

  if(args->argc == 3 && args->isStr(0, "write") == true)
 8003da2:	8823      	ldrh	r3, [r4, #0]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	f000 816e 	beq.w	8004086 <cliCmd+0x316>
      cliPrintf("FAIL\n");
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "speed-test") == true)
 8003daa:	8823      	ldrh	r3, [r4, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f000 8198 	beq.w	80040e2 <cliCmd+0x372>
    }
    ret = true;
  }


  if (ret == false)
 8003db2:	2d00      	cmp	r5, #0
 8003db4:	f000 81cc 	beq.w	8004150 <cliCmd+0x3e0>
    cliPrintf("qspi speed-test\n");
    cliPrintf("qspi read  [addr] [length]\n");
    cliPrintf("qspi erase [addr] [length]\n");
    cliPrintf("qspi write [addr] [data]\n");
  }
}
 8003db8:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 8003dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(args->argc == 1 && args->isStr(0, "info"))
 8003dc0:	6943      	ldr	r3, [r0, #20]
 8003dc2:	497a      	ldr	r1, [pc, #488]	@ (8003fac <cliCmd+0x23c>)
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	4798      	blx	r3
 8003dc8:	4605      	mov	r5, r0
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	d0d9      	beq.n	8003d82 <cliCmd+0x12>
    cliPrintf("qspi flash addr  : 0x%X\n", 0);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4877      	ldr	r0, [pc, #476]	@ (8003fb0 <cliCmd+0x240>)
 8003dd2:	f7fd f897 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi xip   addr  : 0x%X\n", qspiGetAddr());
 8003dd6:	f7ff fd3f 	bl	8003858 <qspiGetAddr>
 8003dda:	4601      	mov	r1, r0
 8003ddc:	4875      	ldr	r0, [pc, #468]	@ (8003fb4 <cliCmd+0x244>)
 8003dde:	f7fd f891 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi xip   mode  : %s\n", qspiGetXipMode() ? "True":"False");
 8003de2:	f7ff fd2d 	bl	8003840 <qspiGetXipMode>
 8003de6:	b3a0      	cbz	r0, 8003e52 <cliCmd+0xe2>
 8003de8:	4973      	ldr	r1, [pc, #460]	@ (8003fb8 <cliCmd+0x248>)
 8003dea:	4874      	ldr	r0, [pc, #464]	@ (8003fbc <cliCmd+0x24c>)
 8003dec:	f7fd f88a 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi state       : ");
 8003df0:	4873      	ldr	r0, [pc, #460]	@ (8003fc0 <cliCmd+0x250>)
 8003df2:	f7fd f887 	bl	8000f04 <cliPrintf>
    switch(HAL_OSPI_GetState(&hqspi))
 8003df6:	4873      	ldr	r0, [pc, #460]	@ (8003fc4 <cliCmd+0x254>)
 8003df8:	f007 fcea 	bl	800b7d0 <HAL_OSPI_GetState>
 8003dfc:	2848      	cmp	r0, #72	@ 0x48
 8003dfe:	d82a      	bhi.n	8003e56 <cliCmd+0xe6>
 8003e00:	2848      	cmp	r0, #72	@ 0x48
 8003e02:	d864      	bhi.n	8003ece <cliCmd+0x15e>
 8003e04:	e8df f000 	tbb	[pc, r0]
 8003e08:	633f3b37 	.word	0x633f3b37
 8003e0c:	63636343 	.word	0x63636343
 8003e10:	6363634f 	.word	0x6363634f
 8003e14:	63636363 	.word	0x63636363
 8003e18:	63636363 	.word	0x63636363
 8003e1c:	63636347 	.word	0x63636347
 8003e20:	63636353 	.word	0x63636353
 8003e24:	63636363 	.word	0x63636363
 8003e28:	63636363 	.word	0x63636363
 8003e2c:	6363634b 	.word	0x6363634b
 8003e30:	63636357 	.word	0x63636357
 8003e34:	63636363 	.word	0x63636363
 8003e38:	63636363 	.word	0x63636363
 8003e3c:	63636363 	.word	0x63636363
 8003e40:	63636363 	.word	0x63636363
 8003e44:	63636363 	.word	0x63636363
 8003e48:	63636363 	.word	0x63636363
 8003e4c:	63636363 	.word	0x63636363
 8003e50:	5b          	.byte	0x5b
 8003e51:	00          	.byte	0x00
    cliPrintf("qspi xip   mode  : %s\n", qspiGetXipMode() ? "True":"False");
 8003e52:	495d      	ldr	r1, [pc, #372]	@ (8003fc8 <cliCmd+0x258>)
 8003e54:	e7c9      	b.n	8003dea <cliCmd+0x7a>
    switch(HAL_OSPI_GetState(&hqspi))
 8003e56:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8003e5a:	d034      	beq.n	8003ec6 <cliCmd+0x156>
 8003e5c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003e60:	d103      	bne.n	8003e6a <cliCmd+0xfa>
        cliPrintf("ERROR\n");
 8003e62:	485a      	ldr	r0, [pc, #360]	@ (8003fcc <cliCmd+0x25c>)
 8003e64:	f7fd f84e 	bl	8000f04 <cliPrintf>
        break;
 8003e68:	e78b      	b.n	8003d82 <cliCmd+0x12>
    switch(HAL_OSPI_GetState(&hqspi))
 8003e6a:	2888      	cmp	r0, #136	@ 0x88
 8003e6c:	d12f      	bne.n	8003ece <cliCmd+0x15e>
        cliPrintf("BUSY_MEM_MAPPED\n");
 8003e6e:	4858      	ldr	r0, [pc, #352]	@ (8003fd0 <cliCmd+0x260>)
 8003e70:	f7fd f848 	bl	8000f04 <cliPrintf>
        break;
 8003e74:	e785      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("RESET\n");
 8003e76:	4857      	ldr	r0, [pc, #348]	@ (8003fd4 <cliCmd+0x264>)
 8003e78:	f7fd f844 	bl	8000f04 <cliPrintf>
        break;
 8003e7c:	e781      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("HYPERBUS_INIT\n");
 8003e7e:	4856      	ldr	r0, [pc, #344]	@ (8003fd8 <cliCmd+0x268>)
 8003e80:	f7fd f840 	bl	8000f04 <cliPrintf>
        break;
 8003e84:	e77d      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("READY\n");
 8003e86:	4855      	ldr	r0, [pc, #340]	@ (8003fdc <cliCmd+0x26c>)
 8003e88:	f7fd f83c 	bl	8000f04 <cliPrintf>
        break;
 8003e8c:	e779      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("CMD_CFG\n");
 8003e8e:	4854      	ldr	r0, [pc, #336]	@ (8003fe0 <cliCmd+0x270>)
 8003e90:	f7fd f838 	bl	8000f04 <cliPrintf>
        break;
 8003e94:	e775      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("READ_CMD_CFG\n");
 8003e96:	4853      	ldr	r0, [pc, #332]	@ (8003fe4 <cliCmd+0x274>)
 8003e98:	f7fd f834 	bl	8000f04 <cliPrintf>
        break;
 8003e9c:	e771      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("WRITE_CMD_CFG\n");
 8003e9e:	4852      	ldr	r0, [pc, #328]	@ (8003fe8 <cliCmd+0x278>)
 8003ea0:	f7fd f830 	bl	8000f04 <cliPrintf>
        break;
 8003ea4:	e76d      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("BUSY_CMD\n");
 8003ea6:	4851      	ldr	r0, [pc, #324]	@ (8003fec <cliCmd+0x27c>)
 8003ea8:	f7fd f82c 	bl	8000f04 <cliPrintf>
        break;
 8003eac:	e769      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("BUSY_TX\n");
 8003eae:	4850      	ldr	r0, [pc, #320]	@ (8003ff0 <cliCmd+0x280>)
 8003eb0:	f7fd f828 	bl	8000f04 <cliPrintf>
        break;
 8003eb4:	e765      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("BUSY_RX\n");
 8003eb6:	484f      	ldr	r0, [pc, #316]	@ (8003ff4 <cliCmd+0x284>)
 8003eb8:	f7fd f824 	bl	8000f04 <cliPrintf>
        break;
 8003ebc:	e761      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("BUSY_AUTO_POLLING\n");
 8003ebe:	484e      	ldr	r0, [pc, #312]	@ (8003ff8 <cliCmd+0x288>)
 8003ec0:	f7fd f820 	bl	8000f04 <cliPrintf>
        break;
 8003ec4:	e75d      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("ABORT\n");
 8003ec6:	484d      	ldr	r0, [pc, #308]	@ (8003ffc <cliCmd+0x28c>)
 8003ec8:	f7fd f81c 	bl	8000f04 <cliPrintf>
        break;
 8003ecc:	e759      	b.n	8003d82 <cliCmd+0x12>
        cliPrintf("UNKWNON\n");
 8003ece:	484c      	ldr	r0, [pc, #304]	@ (8004000 <cliCmd+0x290>)
 8003ed0:	f7fd f818 	bl	8000f04 <cliPrintf>
        break;
 8003ed4:	e755      	b.n	8003d82 <cliCmd+0x12>
  if(args->argc == 1 && args->isStr(0, "test"))
 8003ed6:	6963      	ldr	r3, [r4, #20]
 8003ed8:	494a      	ldr	r1, [pc, #296]	@ (8004004 <cliCmd+0x294>)
 8003eda:	2000      	movs	r0, #0
 8003edc:	4798      	blx	r3
 8003ede:	4606      	mov	r6, r0
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f43f af52 	beq.w	8003d8a <cliCmd+0x1a>
    for (int i=0; i<100; i++)
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	2d63      	cmp	r5, #99	@ 0x63
 8003eea:	dc10      	bgt.n	8003f0e <cliCmd+0x19e>
      if (qspiRead(0x1000*i, rx_buf, 256))
 8003eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ef0:	a901      	add	r1, sp, #4
 8003ef2:	0328      	lsls	r0, r5, #12
 8003ef4:	f7ff fd8e 	bl	8003a14 <qspiRead>
 8003ef8:	b128      	cbz	r0, 8003f06 <cliCmd+0x196>
        cliPrintf("%d : OK\n", i);
 8003efa:	4629      	mov	r1, r5
 8003efc:	4842      	ldr	r0, [pc, #264]	@ (8004008 <cliCmd+0x298>)
 8003efe:	f7fd f801 	bl	8000f04 <cliPrintf>
    for (int i=0; i<100; i++)
 8003f02:	3501      	adds	r5, #1
 8003f04:	e7f0      	b.n	8003ee8 <cliCmd+0x178>
        cliPrintf("%d : FAIL\n", i);
 8003f06:	4629      	mov	r1, r5
 8003f08:	4840      	ldr	r0, [pc, #256]	@ (800400c <cliCmd+0x29c>)
 8003f0a:	f7fc fffb 	bl	8000f04 <cliPrintf>
    ret = true;
 8003f0e:	4635      	mov	r5, r6
 8003f10:	e73b      	b.n	8003d8a <cliCmd+0x1a>
  if (args->argc == 2 && args->isStr(0, "xip"))
 8003f12:	6963      	ldr	r3, [r4, #20]
 8003f14:	493e      	ldr	r1, [pc, #248]	@ (8004010 <cliCmd+0x2a0>)
 8003f16:	2000      	movs	r0, #0
 8003f18:	4798      	blx	r3
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	f43f af38 	beq.w	8003d92 <cliCmd+0x22>
    xip_enable = args->isStr(1, "on") ? true:false;
 8003f22:	6963      	ldr	r3, [r4, #20]
 8003f24:	493b      	ldr	r1, [pc, #236]	@ (8004014 <cliCmd+0x2a4>)
 8003f26:	2001      	movs	r0, #1
 8003f28:	4798      	blx	r3
    if (qspiSetXipMode(xip_enable))
 8003f2a:	f7ff ff0b 	bl	8003d44 <qspiSetXipMode>
 8003f2e:	b158      	cbz	r0, 8003f48 <cliCmd+0x1d8>
      cliPrintf("qspiSetXipMode() : OK\n");
 8003f30:	4839      	ldr	r0, [pc, #228]	@ (8004018 <cliCmd+0x2a8>)
 8003f32:	f7fc ffe7 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi xip mode  : %s\n", qspiGetXipMode() ? "True":"False");
 8003f36:	f7ff fc83 	bl	8003840 <qspiGetXipMode>
 8003f3a:	b148      	cbz	r0, 8003f50 <cliCmd+0x1e0>
 8003f3c:	491e      	ldr	r1, [pc, #120]	@ (8003fb8 <cliCmd+0x248>)
 8003f3e:	4837      	ldr	r0, [pc, #220]	@ (800401c <cliCmd+0x2ac>)
 8003f40:	f7fc ffe0 	bl	8000f04 <cliPrintf>
    ret = true;
 8003f44:	4635      	mov	r5, r6
 8003f46:	e724      	b.n	8003d92 <cliCmd+0x22>
      cliPrintf("qspiSetXipMode() : Fail\n");
 8003f48:	4835      	ldr	r0, [pc, #212]	@ (8004020 <cliCmd+0x2b0>)
 8003f4a:	f7fc ffdb 	bl	8000f04 <cliPrintf>
 8003f4e:	e7f2      	b.n	8003f36 <cliCmd+0x1c6>
    cliPrintf("qspi xip mode  : %s\n", qspiGetXipMode() ? "True":"False");
 8003f50:	491d      	ldr	r1, [pc, #116]	@ (8003fc8 <cliCmd+0x258>)
 8003f52:	e7f4      	b.n	8003f3e <cliCmd+0x1ce>
  if (args->argc == 3 && args->isStr(0, "read"))
 8003f54:	6963      	ldr	r3, [r4, #20]
 8003f56:	4933      	ldr	r1, [pc, #204]	@ (8004024 <cliCmd+0x2b4>)
 8003f58:	2000      	movs	r0, #0
 8003f5a:	4798      	blx	r3
 8003f5c:	4680      	mov	r8, r0
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	f43f af1b 	beq.w	8003d9a <cliCmd+0x2a>
    addr   = (uint32_t)args->getData(1);
 8003f64:	68a3      	ldr	r3, [r4, #8]
 8003f66:	2001      	movs	r0, #1
 8003f68:	4798      	blx	r3
 8003f6a:	4681      	mov	r9, r0
    length = (uint32_t)args->getData(2);
 8003f6c:	68a3      	ldr	r3, [r4, #8]
 8003f6e:	2002      	movs	r0, #2
 8003f70:	4798      	blx	r3
 8003f72:	4607      	mov	r7, r0
    for (i=0; i<length; i++)
 8003f74:	2500      	movs	r5, #0
 8003f76:	e004      	b.n	8003f82 <cliCmd+0x212>
        cliPrintf( "addr : 0x%X\t Fail\n", addr+i);
 8003f78:	4631      	mov	r1, r6
 8003f7a:	482b      	ldr	r0, [pc, #172]	@ (8004028 <cliCmd+0x2b8>)
 8003f7c:	f7fc ffc2 	bl	8000f04 <cliPrintf>
    for (i=0; i<length; i++)
 8003f80:	3501      	adds	r5, #1
 8003f82:	42bd      	cmp	r5, r7
 8003f84:	d210      	bcs.n	8003fa8 <cliCmd+0x238>
      flash_ret = qspiRead(addr+i, &data, 1);
 8003f86:	eb05 0609 	add.w	r6, r5, r9
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f20d 2107 	addw	r1, sp, #519	@ 0x207
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff fd3f 	bl	8003a14 <qspiRead>
      if (flash_ret == true)
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d0ee      	beq.n	8003f78 <cliCmd+0x208>
        cliPrintf( "addr : 0x%X\t 0x%02X\n", addr+i, data);
 8003f9a:	f89d 2207 	ldrb.w	r2, [sp, #519]	@ 0x207
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	4822      	ldr	r0, [pc, #136]	@ (800402c <cliCmd+0x2bc>)
 8003fa2:	f7fc ffaf 	bl	8000f04 <cliPrintf>
 8003fa6:	e7eb      	b.n	8003f80 <cliCmd+0x210>
    ret = true;
 8003fa8:	4645      	mov	r5, r8
 8003faa:	e6f6      	b.n	8003d9a <cliCmd+0x2a>
 8003fac:	080280ec 	.word	0x080280ec
 8003fb0:	08028914 	.word	0x08028914
 8003fb4:	08028930 	.word	0x08028930
 8003fb8:	08028904 	.word	0x08028904
 8003fbc:	0802894c 	.word	0x0802894c
 8003fc0:	08028964 	.word	0x08028964
 8003fc4:	240027c4 	.word	0x240027c4
 8003fc8:	0802890c 	.word	0x0802890c
 8003fcc:	08028a18 	.word	0x08028a18
 8003fd0:	080289fc 	.word	0x080289fc
 8003fd4:	08028978 	.word	0x08028978
 8003fd8:	08028980 	.word	0x08028980
 8003fdc:	08028990 	.word	0x08028990
 8003fe0:	08028998 	.word	0x08028998
 8003fe4:	080289a4 	.word	0x080289a4
 8003fe8:	080289b4 	.word	0x080289b4
 8003fec:	080289c4 	.word	0x080289c4
 8003ff0:	080289d0 	.word	0x080289d0
 8003ff4:	080289dc 	.word	0x080289dc
 8003ff8:	080289e8 	.word	0x080289e8
 8003ffc:	08028a10 	.word	0x08028a10
 8004000:	08028a20 	.word	0x08028a20
 8004004:	08028a2c 	.word	0x08028a2c
 8004008:	08028a34 	.word	0x08028a34
 800400c:	08028a40 	.word	0x08028a40
 8004010:	08028a4c 	.word	0x08028a4c
 8004014:	080280e8 	.word	0x080280e8
 8004018:	08028a50 	.word	0x08028a50
 800401c:	08028a84 	.word	0x08028a84
 8004020:	08028a68 	.word	0x08028a68
 8004024:	08028214 	.word	0x08028214
 8004028:	08028350 	.word	0x08028350
 800402c:	08028338 	.word	0x08028338
  if(args->argc == 3 && args->isStr(0, "erase") == true)
 8004030:	6963      	ldr	r3, [r4, #20]
 8004032:	4952      	ldr	r1, [pc, #328]	@ (800417c <cliCmd+0x40c>)
 8004034:	2000      	movs	r0, #0
 8004036:	4798      	blx	r3
 8004038:	4681      	mov	r9, r0
 800403a:	2800      	cmp	r0, #0
 800403c:	f43f aeb1 	beq.w	8003da2 <cliCmd+0x32>
    addr   = (uint32_t)args->getData(1);
 8004040:	68a3      	ldr	r3, [r4, #8]
 8004042:	2001      	movs	r0, #1
 8004044:	4798      	blx	r3
 8004046:	4606      	mov	r6, r0
    length = (uint32_t)args->getData(2);
 8004048:	68a3      	ldr	r3, [r4, #8]
 800404a:	2002      	movs	r0, #2
 800404c:	4798      	blx	r3
 800404e:	4607      	mov	r7, r0
    pre_time = millis();
 8004050:	f7fc fd58 	bl	8000b04 <millis>
 8004054:	4680      	mov	r8, r0
    flash_ret = qspiErase(addr, length);
 8004056:	4639      	mov	r1, r7
 8004058:	4630      	mov	r0, r6
 800405a:	f7ff fd8f 	bl	8003b7c <qspiErase>
 800405e:	4605      	mov	r5, r0
    cliPrintf( "addr : 0x%X\t len : %d %d ms\n", addr, length, (millis()-pre_time));
 8004060:	f7fc fd50 	bl	8000b04 <millis>
 8004064:	eba0 0308 	sub.w	r3, r0, r8
 8004068:	463a      	mov	r2, r7
 800406a:	4631      	mov	r1, r6
 800406c:	4844      	ldr	r0, [pc, #272]	@ (8004180 <cliCmd+0x410>)
 800406e:	f7fc ff49 	bl	8000f04 <cliPrintf>
    if (flash_ret)
 8004072:	b11d      	cbz	r5, 800407c <cliCmd+0x30c>
      cliPrintf("OK\n");
 8004074:	4843      	ldr	r0, [pc, #268]	@ (8004184 <cliCmd+0x414>)
 8004076:	f7fc ff45 	bl	8000f04 <cliPrintf>
 800407a:	e692      	b.n	8003da2 <cliCmd+0x32>
      cliPrintf("FAIL\n");
 800407c:	4842      	ldr	r0, [pc, #264]	@ (8004188 <cliCmd+0x418>)
 800407e:	f7fc ff41 	bl	8000f04 <cliPrintf>
    ret = true;
 8004082:	464d      	mov	r5, r9
 8004084:	e68d      	b.n	8003da2 <cliCmd+0x32>
  if(args->argc == 3 && args->isStr(0, "write") == true)
 8004086:	6963      	ldr	r3, [r4, #20]
 8004088:	4940      	ldr	r1, [pc, #256]	@ (800418c <cliCmd+0x41c>)
 800408a:	2000      	movs	r0, #0
 800408c:	4798      	blx	r3
 800408e:	4680      	mov	r8, r0
 8004090:	2800      	cmp	r0, #0
 8004092:	f43f ae8a 	beq.w	8003daa <cliCmd+0x3a>
    addr = (uint32_t)args->getData(1);
 8004096:	68a3      	ldr	r3, [r4, #8]
 8004098:	2001      	movs	r0, #1
 800409a:	4798      	blx	r3
 800409c:	4605      	mov	r5, r0
    flash_data = (uint32_t )args->getData(2);
 800409e:	68a3      	ldr	r3, [r4, #8]
 80040a0:	2002      	movs	r0, #2
 80040a2:	4798      	blx	r3
 80040a4:	9001      	str	r0, [sp, #4]
    pre_time = millis();
 80040a6:	f7fc fd2d 	bl	8000b04 <millis>
 80040aa:	4607      	mov	r7, r0
    flash_ret = qspiWrite(addr, (uint8_t *)&flash_data, 4);
 80040ac:	2204      	movs	r2, #4
 80040ae:	eb0d 0102 	add.w	r1, sp, r2
 80040b2:	4628      	mov	r0, r5
 80040b4:	f7ff fd18 	bl	8003ae8 <qspiWrite>
 80040b8:	4606      	mov	r6, r0
    cliPrintf( "addr : 0x%X\t 0x%X %dms\n", addr, flash_data, millis()-pre_time);
 80040ba:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80040be:	f7fc fd21 	bl	8000b04 <millis>
 80040c2:	1bc3      	subs	r3, r0, r7
 80040c4:	464a      	mov	r2, r9
 80040c6:	4629      	mov	r1, r5
 80040c8:	4831      	ldr	r0, [pc, #196]	@ (8004190 <cliCmd+0x420>)
 80040ca:	f7fc ff1b 	bl	8000f04 <cliPrintf>
    if (flash_ret)
 80040ce:	b126      	cbz	r6, 80040da <cliCmd+0x36a>
      cliPrintf("OK\n");
 80040d0:	482c      	ldr	r0, [pc, #176]	@ (8004184 <cliCmd+0x414>)
 80040d2:	f7fc ff17 	bl	8000f04 <cliPrintf>
    ret = true;
 80040d6:	4645      	mov	r5, r8
 80040d8:	e667      	b.n	8003daa <cliCmd+0x3a>
      cliPrintf("FAIL\n");
 80040da:	482b      	ldr	r0, [pc, #172]	@ (8004188 <cliCmd+0x418>)
 80040dc:	f7fc ff12 	bl	8000f04 <cliPrintf>
 80040e0:	e7f9      	b.n	80040d6 <cliCmd+0x366>
  if (args->argc == 1 && args->isStr(0, "speed-test") == true)
 80040e2:	6963      	ldr	r3, [r4, #20]
 80040e4:	492b      	ldr	r1, [pc, #172]	@ (8004194 <cliCmd+0x424>)
 80040e6:	2000      	movs	r0, #0
 80040e8:	4798      	blx	r3
 80040ea:	2800      	cmp	r0, #0
 80040ec:	f43f ae61 	beq.w	8003db2 <cliCmd+0x42>
    xip_addr = qspiGetAddr();
 80040f0:	f7ff fbb2 	bl	8003858 <qspiGetAddr>
 80040f4:	4605      	mov	r5, r0
    pre_time = millis();
 80040f6:	f7fc fd05 	bl	8000b04 <millis>
 80040fa:	4606      	mov	r6, r0
    for (int i=0; i<cnt; i++)
 80040fc:	2400      	movs	r4, #0
 80040fe:	e007      	b.n	8004110 <cliCmd+0x3a0>
        if (qspiRead(i*512, (uint8_t *)buf, 512) == false)
 8004100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004104:	a901      	add	r1, sp, #4
 8004106:	0260      	lsls	r0, r4, #9
 8004108:	f7ff fc84 	bl	8003a14 <qspiRead>
 800410c:	b178      	cbz	r0, 800412e <cliCmd+0x3be>
    for (int i=0; i<cnt; i++)
 800410e:	3401      	adds	r4, #1
 8004110:	f5b4 6f00 	cmp.w	r4, #2048	@ 0x800
 8004114:	d20f      	bcs.n	8004136 <cliCmd+0x3c6>
      if (qspiGetXipMode())
 8004116:	f7ff fb93 	bl	8003840 <qspiGetXipMode>
 800411a:	2800      	cmp	r0, #0
 800411c:	d0f0      	beq.n	8004100 <cliCmd+0x390>
        memcpy(buf, (void *)(xip_addr + i*512), 512);
 800411e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004122:	eb05 2144 	add.w	r1, r5, r4, lsl #9
 8004126:	a801      	add	r0, sp, #4
 8004128:	f021 ff83 	bl	8026032 <memcpy>
 800412c:	e7ef      	b.n	800410e <cliCmd+0x39e>
          cliPrintf("qspiRead() Fail:%d\n", i);
 800412e:	4621      	mov	r1, r4
 8004130:	4819      	ldr	r0, [pc, #100]	@ (8004198 <cliCmd+0x428>)
 8004132:	f7fc fee7 	bl	8000f04 <cliPrintf>
    exe_time = millis()-pre_time;
 8004136:	f7fc fce5 	bl	8000b04 <millis>
    if (exe_time > 0)
 800413a:	1b80      	subs	r0, r0, r6
 800413c:	f43f ae3c 	beq.w	8003db8 <cliCmd+0x48>
      cliPrintf("%d KB/sec\n", 1024 * 1000 / exe_time);
 8004140:	f44f 217a 	mov.w	r1, #1024000	@ 0xfa000
 8004144:	fbb1 f1f0 	udiv	r1, r1, r0
 8004148:	4814      	ldr	r0, [pc, #80]	@ (800419c <cliCmd+0x42c>)
 800414a:	f7fc fedb 	bl	8000f04 <cliPrintf>
  if (ret == false)
 800414e:	e633      	b.n	8003db8 <cliCmd+0x48>
    cliPrintf("qspi info\n");
 8004150:	4813      	ldr	r0, [pc, #76]	@ (80041a0 <cliCmd+0x430>)
 8004152:	f7fc fed7 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi xip on:off\n");
 8004156:	4813      	ldr	r0, [pc, #76]	@ (80041a4 <cliCmd+0x434>)
 8004158:	f7fc fed4 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi test\n");
 800415c:	4812      	ldr	r0, [pc, #72]	@ (80041a8 <cliCmd+0x438>)
 800415e:	f7fc fed1 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi speed-test\n");
 8004162:	4812      	ldr	r0, [pc, #72]	@ (80041ac <cliCmd+0x43c>)
 8004164:	f7fc fece 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi read  [addr] [length]\n");
 8004168:	4811      	ldr	r0, [pc, #68]	@ (80041b0 <cliCmd+0x440>)
 800416a:	f7fc fecb 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi erase [addr] [length]\n");
 800416e:	4811      	ldr	r0, [pc, #68]	@ (80041b4 <cliCmd+0x444>)
 8004170:	f7fc fec8 	bl	8000f04 <cliPrintf>
    cliPrintf("qspi write [addr] [data]\n");
 8004174:	4810      	ldr	r0, [pc, #64]	@ (80041b8 <cliCmd+0x448>)
 8004176:	f7fc fec5 	bl	8000f04 <cliPrintf>
}
 800417a:	e61d      	b.n	8003db8 <cliCmd+0x48>
 800417c:	08028364 	.word	0x08028364
 8004180:	0802836c 	.word	0x0802836c
 8004184:	08028278 	.word	0x08028278
 8004188:	0802827c 	.word	0x0802827c
 800418c:	08028258 	.word	0x08028258
 8004190:	0802838c 	.word	0x0802838c
 8004194:	08028a9c 	.word	0x08028a9c
 8004198:	08028aa8 	.word	0x08028aa8
 800419c:	08028abc 	.word	0x08028abc
 80041a0:	08028ac8 	.word	0x08028ac8
 80041a4:	08028ad4 	.word	0x08028ad4
 80041a8:	08028ae8 	.word	0x08028ae8
 80041ac:	08028af4 	.word	0x08028af4
 80041b0:	08028b08 	.word	0x08028b08
 80041b4:	08028b24 	.word	0x08028b24
 80041b8:	08028b40 	.word	0x08028b40

080041bc <rtcInit>:




bool rtcInit(void)
{
 80041bc:	b510      	push	{r4, lr}
  bool ret = true;


  hrtc.Instance = RTC;
 80041be:	4810      	ldr	r0, [pc, #64]	@ (8004200 <rtcInit+0x44>)
 80041c0:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <rtcInit+0x48>)
 80041c2:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041c4:	2300      	movs	r3, #0
 80041c6:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80041c8:	227f      	movs	r2, #127	@ 0x7f
 80041ca:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80041cc:	22ff      	movs	r2, #255	@ 0xff
 80041ce:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80041d0:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80041d2:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80041d4:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80041d6:	6143      	str	r3, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80041d8:	f009 fba8 	bl	800d92c <HAL_RTC_Init>
 80041dc:	b960      	cbnz	r0, 80041f8 <rtcInit+0x3c>
  bool ret = true;
 80041de:	2401      	movs	r4, #1
  {
    ret = false;
  }


  logPrintf("[%s] rtcInit()\n", ret ? "OK":"NG");
 80041e0:	4909      	ldr	r1, [pc, #36]	@ (8004208 <rtcInit+0x4c>)
 80041e2:	480a      	ldr	r0, [pc, #40]	@ (800420c <rtcInit+0x50>)
 80041e4:	f7ff f8f0 	bl	80033c8 <logPrintf>
  is_init = ret;
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <rtcInit+0x54>)
 80041ea:	701c      	strb	r4, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("rtc", cliRtc);
 80041ec:	4909      	ldr	r1, [pc, #36]	@ (8004214 <rtcInit+0x58>)
 80041ee:	480a      	ldr	r0, [pc, #40]	@ (8004218 <rtcInit+0x5c>)
 80041f0:	f7fd f936 	bl	8001460 <cliAdd>
#endif
  return ret;
}
 80041f4:	4620      	mov	r0, r4
 80041f6:	bd10      	pop	{r4, pc}
    ret = false;
 80041f8:	2400      	movs	r4, #0
  logPrintf("[%s] rtcInit()\n", ret ? "OK":"NG");
 80041fa:	4908      	ldr	r1, [pc, #32]	@ (800421c <rtcInit+0x60>)
 80041fc:	e7f1      	b.n	80041e2 <rtcInit+0x26>
 80041fe:	bf00      	nop
 8004200:	24002ba4 	.word	0x24002ba4
 8004204:	58004000 	.word	0x58004000
 8004208:	08028188 	.word	0x08028188
 800420c:	08028b5c 	.word	0x08028b5c
 8004210:	24002821 	.word	0x24002821
 8004214:	08004341 	.word	0x08004341
 8004218:	08028b6c 	.word	0x08028b6c
 800421c:	0802818c 	.word	0x0802818c

08004220 <rtcGetInfo>:

bool rtcGetInfo(rtc_info_t *rtc_info)
{
 8004220:	b510      	push	{r4, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	4604      	mov	r4, r0
  RTC_TimeTypeDef sTime = {0};
 8004226:	2200      	movs	r2, #0
 8004228:	9201      	str	r2, [sp, #4]
 800422a:	9202      	str	r2, [sp, #8]
 800422c:	9203      	str	r2, [sp, #12]
 800422e:	9204      	str	r2, [sp, #16]
 8004230:	9205      	str	r2, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8004232:	9200      	str	r2, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004234:	a901      	add	r1, sp, #4
 8004236:	4811      	ldr	r0, [pc, #68]	@ (800427c <rtcGetInfo+0x5c>)
 8004238:	f009 fc95 	bl	800db66 <HAL_RTC_GetTime>
 800423c:	b110      	cbz	r0, 8004244 <rtcGetInfo+0x24>
    return false;
 800423e:	2000      	movs	r0, #0
  rtc_info->date.year = sDate.Year;
  rtc_info->date.month = sDate.Month;
  rtc_info->date.day = sDate.Date;

  return true;
}
 8004240:	b006      	add	sp, #24
 8004242:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004244:	2200      	movs	r2, #0
 8004246:	4669      	mov	r1, sp
 8004248:	480c      	ldr	r0, [pc, #48]	@ (800427c <rtcGetInfo+0x5c>)
 800424a:	f009 fcb2 	bl	800dbb2 <HAL_RTC_GetDate>
 800424e:	b998      	cbnz	r0, 8004278 <rtcGetInfo+0x58>
  rtc_info->time.hours = sTime.Hours;
 8004250:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004254:	7023      	strb	r3, [r4, #0]
  rtc_info->time.minutes = sTime.Minutes;
 8004256:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800425a:	7063      	strb	r3, [r4, #1]
  rtc_info->time.seconds = sTime.Seconds;
 800425c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004260:	70a3      	strb	r3, [r4, #2]
  rtc_info->date.year = sDate.Year;
 8004262:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004266:	70e3      	strb	r3, [r4, #3]
  rtc_info->date.month = sDate.Month;
 8004268:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800426c:	7123      	strb	r3, [r4, #4]
  rtc_info->date.day = sDate.Date;
 800426e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004272:	7163      	strb	r3, [r4, #5]
  return true;
 8004274:	2001      	movs	r0, #1
 8004276:	e7e3      	b.n	8004240 <rtcGetInfo+0x20>
    return false;
 8004278:	2000      	movs	r0, #0
 800427a:	e7e1      	b.n	8004240 <rtcGetInfo+0x20>
 800427c:	24002ba4 	.word	0x24002ba4

08004280 <rtcSetTime>:

  return true;
}

bool rtcSetTime(rtc_time_t *rtc_time)
{
 8004280:	b510      	push	{r4, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	4604      	mov	r4, r0
  RTC_TimeTypeDef sTime = {0};
 8004286:	2200      	movs	r2, #0
 8004288:	9201      	str	r2, [sp, #4]
 800428a:	9202      	str	r2, [sp, #8]
 800428c:	9203      	str	r2, [sp, #12]
 800428e:	9204      	str	r2, [sp, #16]
 8004290:	9205      	str	r2, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8004292:	9200      	str	r2, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004294:	a901      	add	r1, sp, #4
 8004296:	4811      	ldr	r0, [pc, #68]	@ (80042dc <rtcSetTime+0x5c>)
 8004298:	f009 fc65 	bl	800db66 <HAL_RTC_GetTime>
 800429c:	b110      	cbz	r0, 80042a4 <rtcSetTime+0x24>
    return false;
 800429e:	2000      	movs	r0, #0

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
    return false;

  return true;
}
 80042a0:	b006      	add	sp, #24
 80042a2:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80042a4:	2200      	movs	r2, #0
 80042a6:	4669      	mov	r1, sp
 80042a8:	480c      	ldr	r0, [pc, #48]	@ (80042dc <rtcSetTime+0x5c>)
 80042aa:	f009 fc82 	bl	800dbb2 <HAL_RTC_GetDate>
 80042ae:	b108      	cbz	r0, 80042b4 <rtcSetTime+0x34>
    return false;
 80042b0:	2000      	movs	r0, #0
 80042b2:	e7f5      	b.n	80042a0 <rtcSetTime+0x20>
  sTime.Hours = rtc_time->hours;
 80042b4:	7823      	ldrb	r3, [r4, #0]
 80042b6:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = rtc_time->minutes;
 80042ba:	7863      	ldrb	r3, [r4, #1]
 80042bc:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = rtc_time->seconds;
 80042c0:	78a3      	ldrb	r3, [r4, #2]
 80042c2:	f88d 3006 	strb.w	r3, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80042c6:	2200      	movs	r2, #0
 80042c8:	a901      	add	r1, sp, #4
 80042ca:	4804      	ldr	r0, [pc, #16]	@ (80042dc <rtcSetTime+0x5c>)
 80042cc:	f009 fb8c 	bl	800d9e8 <HAL_RTC_SetTime>
 80042d0:	b908      	cbnz	r0, 80042d6 <rtcSetTime+0x56>
  return true;
 80042d2:	2001      	movs	r0, #1
 80042d4:	e7e4      	b.n	80042a0 <rtcSetTime+0x20>
    return false;
 80042d6:	2000      	movs	r0, #0
 80042d8:	e7e2      	b.n	80042a0 <rtcSetTime+0x20>
 80042da:	bf00      	nop
 80042dc:	24002ba4 	.word	0x24002ba4

080042e0 <rtcSetDate>:

bool rtcSetDate(rtc_date_t *rtc_date)
{
 80042e0:	b510      	push	{r4, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	4604      	mov	r4, r0
  RTC_TimeTypeDef sTime = {0};
 80042e6:	2200      	movs	r2, #0
 80042e8:	9201      	str	r2, [sp, #4]
 80042ea:	9202      	str	r2, [sp, #8]
 80042ec:	9203      	str	r2, [sp, #12]
 80042ee:	9204      	str	r2, [sp, #16]
 80042f0:	9205      	str	r2, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 80042f2:	9200      	str	r2, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80042f4:	a901      	add	r1, sp, #4
 80042f6:	4811      	ldr	r0, [pc, #68]	@ (800433c <rtcSetDate+0x5c>)
 80042f8:	f009 fc35 	bl	800db66 <HAL_RTC_GetTime>
 80042fc:	b110      	cbz	r0, 8004304 <rtcSetDate+0x24>
    return false;
 80042fe:	2000      	movs	r0, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
    return false;

  return true;
}
 8004300:	b006      	add	sp, #24
 8004302:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004304:	2200      	movs	r2, #0
 8004306:	4669      	mov	r1, sp
 8004308:	480c      	ldr	r0, [pc, #48]	@ (800433c <rtcSetDate+0x5c>)
 800430a:	f009 fc52 	bl	800dbb2 <HAL_RTC_GetDate>
 800430e:	b108      	cbz	r0, 8004314 <rtcSetDate+0x34>
    return false;
 8004310:	2000      	movs	r0, #0
 8004312:	e7f5      	b.n	8004300 <rtcSetDate+0x20>
  sDate.Year = rtc_date->year;
 8004314:	7823      	ldrb	r3, [r4, #0]
 8004316:	f88d 3003 	strb.w	r3, [sp, #3]
  sDate.Month = rtc_date->month;
 800431a:	7863      	ldrb	r3, [r4, #1]
 800431c:	f88d 3001 	strb.w	r3, [sp, #1]
  sDate.Date = rtc_date->day;
 8004320:	78a3      	ldrb	r3, [r4, #2]
 8004322:	f88d 3002 	strb.w	r3, [sp, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004326:	2200      	movs	r2, #0
 8004328:	4669      	mov	r1, sp
 800432a:	4804      	ldr	r0, [pc, #16]	@ (800433c <rtcSetDate+0x5c>)
 800432c:	f009 fbc0 	bl	800dab0 <HAL_RTC_SetDate>
 8004330:	b908      	cbnz	r0, 8004336 <rtcSetDate+0x56>
  return true;
 8004332:	2001      	movs	r0, #1
 8004334:	e7e4      	b.n	8004300 <rtcSetDate+0x20>
    return false;
 8004336:	2000      	movs	r0, #0
 8004338:	e7e2      	b.n	8004300 <rtcSetDate+0x20>
 800433a:	bf00      	nop
 800433c:	24002ba4 	.word	0x24002ba4

08004340 <cliRtc>:
  }
}

#ifdef _USE_HW_CLI
void cliRtc(cli_args_t *args)
{
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	4604      	mov	r4, r0
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info"))
 8004346:	8803      	ldrh	r3, [r0, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d00e      	beq.n	800436a <cliRtc+0x2a>
  bool ret = false;
 800434c:	2500      	movs	r5, #0
  {
    cliPrintf("is_init : %d\n", is_init);
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "get") && args->isStr(1, "info"))
 800434e:	8823      	ldrh	r3, [r4, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d017      	beq.n	8004384 <cliRtc+0x44>
      delay(1000);
    }
    ret = true;
  }

  if (args->argc == 5 && args->isStr(0, "set") && args->isStr(1, "time"))
 8004354:	8823      	ldrh	r3, [r4, #0]
 8004356:	2b05      	cmp	r3, #5
 8004358:	d040      	beq.n	80043dc <cliRtc+0x9c>
              rtc_time.minutes,
              rtc_time.seconds);
    ret = true;
  }

  if (args->argc == 5 && args->isStr(0, "set") && args->isStr(1, "date"))
 800435a:	8823      	ldrh	r3, [r4, #0]
 800435c:	2b05      	cmp	r3, #5
 800435e:	d067      	beq.n	8004430 <cliRtc+0xf0>
              rtc_date.day);
    ret = true;
  }


  if (ret == false)
 8004360:	2d00      	cmp	r5, #0
 8004362:	f000 808d 	beq.w	8004480 <cliRtc+0x140>
    cliPrintf("rtc info\n");
    cliPrintf("rtc get info\n");
    cliPrintf("rtc set time [h] [m] [s]\n");
    cliPrintf("rtc set date [y] [m] [d]\n");
  }
}
 8004366:	b006      	add	sp, #24
 8004368:	bd70      	pop	{r4, r5, r6, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 800436a:	6943      	ldr	r3, [r0, #20]
 800436c:	494b      	ldr	r1, [pc, #300]	@ (800449c <cliRtc+0x15c>)
 800436e:	2000      	movs	r0, #0
 8004370:	4798      	blx	r3
 8004372:	4605      	mov	r5, r0
 8004374:	2800      	cmp	r0, #0
 8004376:	d0ea      	beq.n	800434e <cliRtc+0xe>
    cliPrintf("is_init : %d\n", is_init);
 8004378:	4b49      	ldr	r3, [pc, #292]	@ (80044a0 <cliRtc+0x160>)
 800437a:	7819      	ldrb	r1, [r3, #0]
 800437c:	4849      	ldr	r0, [pc, #292]	@ (80044a4 <cliRtc+0x164>)
 800437e:	f7fc fdc1 	bl	8000f04 <cliPrintf>
    ret = true;
 8004382:	e7e4      	b.n	800434e <cliRtc+0xe>
  if (args->argc == 2 && args->isStr(0, "get") && args->isStr(1, "info"))
 8004384:	6963      	ldr	r3, [r4, #20]
 8004386:	4948      	ldr	r1, [pc, #288]	@ (80044a8 <cliRtc+0x168>)
 8004388:	2000      	movs	r0, #0
 800438a:	4798      	blx	r3
 800438c:	2800      	cmp	r0, #0
 800438e:	d0e1      	beq.n	8004354 <cliRtc+0x14>
 8004390:	6963      	ldr	r3, [r4, #20]
 8004392:	4942      	ldr	r1, [pc, #264]	@ (800449c <cliRtc+0x15c>)
 8004394:	2001      	movs	r0, #1
 8004396:	4798      	blx	r3
 8004398:	4606      	mov	r6, r0
 800439a:	b9c8      	cbnz	r0, 80043d0 <cliRtc+0x90>
 800439c:	e7da      	b.n	8004354 <cliRtc+0x14>
      rtcGetInfo(&rtc_info);
 800439e:	a804      	add	r0, sp, #16
 80043a0:	f7ff ff3e 	bl	8004220 <rtcGetInfo>
                rtc_info.time.hours,
 80043a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
                rtc_info.time.minutes,
 80043a8:	f89d 2011 	ldrb.w	r2, [sp, #17]
                rtc_info.time.seconds);
 80043ac:	f89d 1012 	ldrb.w	r1, [sp, #18]
      cliPrintf("Y:%02d M:%02d D:%02d, H:%02d M:%02d S:%02d\n",
 80043b0:	9102      	str	r1, [sp, #8]
 80043b2:	9201      	str	r2, [sp, #4]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80043ba:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80043be:	f89d 1013 	ldrb.w	r1, [sp, #19]
 80043c2:	483a      	ldr	r0, [pc, #232]	@ (80044ac <cliRtc+0x16c>)
 80043c4:	f7fc fd9e 	bl	8000f04 <cliPrintf>
      delay(1000);
 80043c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043cc:	f7fc fb96 	bl	8000afc <delay>
    while(cliKeepLoop())
 80043d0:	f7fd f83a 	bl	8001448 <cliKeepLoop>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d1e2      	bne.n	800439e <cliRtc+0x5e>
    ret = true;
 80043d8:	4635      	mov	r5, r6
 80043da:	e7bb      	b.n	8004354 <cliRtc+0x14>
  if (args->argc == 5 && args->isStr(0, "set") && args->isStr(1, "time"))
 80043dc:	6963      	ldr	r3, [r4, #20]
 80043de:	4934      	ldr	r1, [pc, #208]	@ (80044b0 <cliRtc+0x170>)
 80043e0:	2000      	movs	r0, #0
 80043e2:	4798      	blx	r3
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d0b8      	beq.n	800435a <cliRtc+0x1a>
 80043e8:	6963      	ldr	r3, [r4, #20]
 80043ea:	4932      	ldr	r1, [pc, #200]	@ (80044b4 <cliRtc+0x174>)
 80043ec:	2001      	movs	r0, #1
 80043ee:	4798      	blx	r3
 80043f0:	4606      	mov	r6, r0
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d0b1      	beq.n	800435a <cliRtc+0x1a>
    rtc_time.hours = args->getData(2);
 80043f6:	68a3      	ldr	r3, [r4, #8]
 80043f8:	2002      	movs	r0, #2
 80043fa:	4798      	blx	r3
 80043fc:	f88d 0010 	strb.w	r0, [sp, #16]
    rtc_time.minutes = args->getData(3);
 8004400:	68a3      	ldr	r3, [r4, #8]
 8004402:	2003      	movs	r0, #3
 8004404:	4798      	blx	r3
 8004406:	f88d 0011 	strb.w	r0, [sp, #17]
    rtc_time.seconds = args->getData(4);
 800440a:	68a3      	ldr	r3, [r4, #8]
 800440c:	2004      	movs	r0, #4
 800440e:	4798      	blx	r3
 8004410:	f88d 0012 	strb.w	r0, [sp, #18]
    rtcSetTime(&rtc_time);
 8004414:	a804      	add	r0, sp, #16
 8004416:	f7ff ff33 	bl	8004280 <rtcSetTime>
    cliPrintf("H:%02d M:%02d S:%02d\n",
 800441a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800441e:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8004422:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8004426:	4824      	ldr	r0, [pc, #144]	@ (80044b8 <cliRtc+0x178>)
 8004428:	f7fc fd6c 	bl	8000f04 <cliPrintf>
    ret = true;
 800442c:	4635      	mov	r5, r6
 800442e:	e794      	b.n	800435a <cliRtc+0x1a>
  if (args->argc == 5 && args->isStr(0, "set") && args->isStr(1, "date"))
 8004430:	6963      	ldr	r3, [r4, #20]
 8004432:	491f      	ldr	r1, [pc, #124]	@ (80044b0 <cliRtc+0x170>)
 8004434:	2000      	movs	r0, #0
 8004436:	4798      	blx	r3
 8004438:	2800      	cmp	r0, #0
 800443a:	d091      	beq.n	8004360 <cliRtc+0x20>
 800443c:	6963      	ldr	r3, [r4, #20]
 800443e:	491f      	ldr	r1, [pc, #124]	@ (80044bc <cliRtc+0x17c>)
 8004440:	2001      	movs	r0, #1
 8004442:	4798      	blx	r3
 8004444:	2800      	cmp	r0, #0
 8004446:	d08b      	beq.n	8004360 <cliRtc+0x20>
    rtc_date.year = args->getData(2);
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	2002      	movs	r0, #2
 800444c:	4798      	blx	r3
 800444e:	f88d 0010 	strb.w	r0, [sp, #16]
    rtc_date.month = args->getData(3);
 8004452:	68a3      	ldr	r3, [r4, #8]
 8004454:	2003      	movs	r0, #3
 8004456:	4798      	blx	r3
 8004458:	f88d 0011 	strb.w	r0, [sp, #17]
    rtc_date.day = args->getData(4);
 800445c:	68a3      	ldr	r3, [r4, #8]
 800445e:	2004      	movs	r0, #4
 8004460:	4798      	blx	r3
 8004462:	f88d 0012 	strb.w	r0, [sp, #18]
    rtcSetDate(&rtc_date);
 8004466:	a804      	add	r0, sp, #16
 8004468:	f7ff ff3a 	bl	80042e0 <rtcSetDate>
    cliPrintf("Y:%02d M:%02d D:%02d\n",
 800446c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004470:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8004474:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8004478:	4811      	ldr	r0, [pc, #68]	@ (80044c0 <cliRtc+0x180>)
 800447a:	f7fc fd43 	bl	8000f04 <cliPrintf>
  if (ret == false)
 800447e:	e772      	b.n	8004366 <cliRtc+0x26>
    cliPrintf("rtc info\n");
 8004480:	4810      	ldr	r0, [pc, #64]	@ (80044c4 <cliRtc+0x184>)
 8004482:	f7fc fd3f 	bl	8000f04 <cliPrintf>
    cliPrintf("rtc get info\n");
 8004486:	4810      	ldr	r0, [pc, #64]	@ (80044c8 <cliRtc+0x188>)
 8004488:	f7fc fd3c 	bl	8000f04 <cliPrintf>
    cliPrintf("rtc set time [h] [m] [s]\n");
 800448c:	480f      	ldr	r0, [pc, #60]	@ (80044cc <cliRtc+0x18c>)
 800448e:	f7fc fd39 	bl	8000f04 <cliPrintf>
    cliPrintf("rtc set date [y] [m] [d]\n");
 8004492:	480f      	ldr	r0, [pc, #60]	@ (80044d0 <cliRtc+0x190>)
 8004494:	f7fc fd36 	bl	8000f04 <cliPrintf>
}
 8004498:	e765      	b.n	8004366 <cliRtc+0x26>
 800449a:	bf00      	nop
 800449c:	080280ec 	.word	0x080280ec
 80044a0:	24002821 	.word	0x24002821
 80044a4:	08028b70 	.word	0x08028b70
 80044a8:	08028824 	.word	0x08028824
 80044ac:	08028b80 	.word	0x08028b80
 80044b0:	08028810 	.word	0x08028810
 80044b4:	08028114 	.word	0x08028114
 80044b8:	08028bac 	.word	0x08028bac
 80044bc:	08028bc4 	.word	0x08028bc4
 80044c0:	08028bcc 	.word	0x08028bcc
 80044c4:	08028be4 	.word	0x08028be4
 80044c8:	08028bf0 	.word	0x08028bf0
 80044cc:	08028c00 	.word	0x08028c00
 80044d0:	08028c1c 	.word	0x08028c1c

080044d4 <cliSdram>:
//  fmcDeInit();
//}

#ifdef _USE_HW_CLI
void cliSdram(cli_args_t *args)
{
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	4604      	mov	r4, r0
  uint32_t i;
  uint32_t pre_time;
  uint32_t exe_time;


  if(args->argc == 1 && args->isStr(0, "info") == true)
 80044da:	8803      	ldrh	r3, [r0, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d008      	beq.n	80044f2 <cliSdram+0x1e>
  bool ret = false;
 80044e0:	2500      	movs	r5, #0
    cliPrintf("sdram addr : 0x%X\n", SDRAM_MEM_ADDR);
    cliPrintf("sdram size : %dMB\n", SDRAM_MEM_SIZE/1024/1024);
    ret = true;
  }

  if(args->argc == 2 && args->isStr(0, "test") == true)
 80044e2:	8823      	ldrh	r3, [r4, #0]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d01e      	beq.n	8004526 <cliSdram+0x52>

    ret = true;
  }


  if (ret == false)
 80044e8:	2d00      	cmp	r5, #0
 80044ea:	f000 8081 	beq.w	80045f0 <cliSdram+0x11c>
  {
    cliPrintf("sdram info\n");
    cliPrintf("sdram test 1~100 \n");
  }
}
 80044ee:	b002      	add	sp, #8
 80044f0:	bd70      	pop	{r4, r5, r6, pc}
  if(args->argc == 1 && args->isStr(0, "info") == true)
 80044f2:	6943      	ldr	r3, [r0, #20]
 80044f4:	4942      	ldr	r1, [pc, #264]	@ (8004600 <cliSdram+0x12c>)
 80044f6:	2000      	movs	r0, #0
 80044f8:	4798      	blx	r3
 80044fa:	4605      	mov	r5, r0
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d0f0      	beq.n	80044e2 <cliSdram+0xe>
    cliPrintf("sdram init : %s\n", is_init ? "True":"False");
 8004500:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <cliSdram+0x130>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b16b      	cbz	r3, 8004522 <cliSdram+0x4e>
 8004506:	4940      	ldr	r1, [pc, #256]	@ (8004608 <cliSdram+0x134>)
 8004508:	4840      	ldr	r0, [pc, #256]	@ (800460c <cliSdram+0x138>)
 800450a:	f7fc fcfb 	bl	8000f04 <cliPrintf>
    cliPrintf("sdram addr : 0x%X\n", SDRAM_MEM_ADDR);
 800450e:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004512:	483f      	ldr	r0, [pc, #252]	@ (8004610 <cliSdram+0x13c>)
 8004514:	f7fc fcf6 	bl	8000f04 <cliPrintf>
    cliPrintf("sdram size : %dMB\n", SDRAM_MEM_SIZE/1024/1024);
 8004518:	2120      	movs	r1, #32
 800451a:	483e      	ldr	r0, [pc, #248]	@ (8004614 <cliSdram+0x140>)
 800451c:	f7fc fcf2 	bl	8000f04 <cliPrintf>
    ret = true;
 8004520:	e7df      	b.n	80044e2 <cliSdram+0xe>
    cliPrintf("sdram init : %s\n", is_init ? "True":"False");
 8004522:	493d      	ldr	r1, [pc, #244]	@ (8004618 <cliSdram+0x144>)
 8004524:	e7f0      	b.n	8004508 <cliSdram+0x34>
  if(args->argc == 2 && args->isStr(0, "test") == true)
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	493c      	ldr	r1, [pc, #240]	@ (800461c <cliSdram+0x148>)
 800452a:	2000      	movs	r0, #0
 800452c:	4798      	blx	r3
 800452e:	2800      	cmp	r0, #0
 8004530:	d0da      	beq.n	80044e8 <cliSdram+0x14>
    number = (uint8_t)args->getData(1);
 8004532:	68a3      	ldr	r3, [r4, #8]
 8004534:	2001      	movs	r0, #1
 8004536:	4798      	blx	r3
 8004538:	b2c5      	uxtb	r5, r0
    while(number > 0)
 800453a:	e045      	b.n	80045c8 <cliSdram+0xf4>
        p_data[i] = i;
 800453c:	009a      	lsls	r2, r3, #2
 800453e:	f102 4240 	add.w	r2, r2, #3221225472	@ 0xc0000000
 8004542:	6013      	str	r3, [r2, #0]
      for (i=0; i<SDRAM_MEM_SIZE/4; i++)
 8004544:	3301      	adds	r3, #1
 8004546:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800454a:	d3f7      	bcc.n	800453c <cliSdram+0x68>
      exe_time = millis()-pre_time;
 800454c:	f7fc fada 	bl	8000b04 <millis>
 8004550:	1b02      	subs	r2, r0, r4
      cliPrintf("Write : %d MB/s, %d ms\n", ((SDRAM_MEM_SIZE/1024/1024) * 1000 / exe_time), exe_time);
 8004552:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8004556:	fbb1 f1f2 	udiv	r1, r1, r2
 800455a:	4831      	ldr	r0, [pc, #196]	@ (8004620 <cliSdram+0x14c>)
 800455c:	f7fc fcd2 	bl	8000f04 <cliPrintf>
      volatile uint32_t data_sum = 0;
 8004560:	2400      	movs	r4, #0
 8004562:	9401      	str	r4, [sp, #4]
      pre_time = millis();
 8004564:	f7fc face 	bl	8000b04 <millis>
 8004568:	4606      	mov	r6, r0
      for (i=0; i<SDRAM_MEM_SIZE/4; i++)
 800456a:	4623      	mov	r3, r4
 800456c:	e007      	b.n	800457e <cliSdram+0xaa>
        data_sum += p_data[i];
 800456e:	009a      	lsls	r2, r3, #2
 8004570:	f102 4240 	add.w	r2, r2, #3221225472	@ 0xc0000000
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	9901      	ldr	r1, [sp, #4]
 8004578:	440a      	add	r2, r1
 800457a:	9201      	str	r2, [sp, #4]
      for (i=0; i<SDRAM_MEM_SIZE/4; i++)
 800457c:	3301      	adds	r3, #1
 800457e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004582:	d3f4      	bcc.n	800456e <cliSdram+0x9a>
      exe_time = millis()-pre_time;
 8004584:	f7fc fabe 	bl	8000b04 <millis>
 8004588:	1b82      	subs	r2, r0, r6
      cliPrintf("Read  : %d MB/s, %d ms\n", ((SDRAM_MEM_SIZE/1024/1024) * 1000 / exe_time), exe_time);
 800458a:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 800458e:	fbb1 f1f2 	udiv	r1, r1, r2
 8004592:	4824      	ldr	r0, [pc, #144]	@ (8004624 <cliSdram+0x150>)
 8004594:	f7fc fcb6 	bl	8000f04 <cliPrintf>
      for (i=0; i<SDRAM_MEM_SIZE/4; i++)
 8004598:	2400      	movs	r4, #0
 800459a:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 800459e:	d20b      	bcs.n	80045b8 <cliSdram+0xe4>
        if (p_data[i] != i)
 80045a0:	00a3      	lsls	r3, r4, #2
 80045a2:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	42a2      	cmp	r2, r4
 80045aa:	d101      	bne.n	80045b0 <cliSdram+0xdc>
      for (i=0; i<SDRAM_MEM_SIZE/4; i++)
 80045ac:	3401      	adds	r4, #1
 80045ae:	e7f4      	b.n	800459a <cliSdram+0xc6>
          cliPrintf( "%d : 0x%X fail\n", i, p_data[i]);
 80045b0:	4621      	mov	r1, r4
 80045b2:	481d      	ldr	r0, [pc, #116]	@ (8004628 <cliSdram+0x154>)
 80045b4:	f7fc fca6 	bl	8000f04 <cliPrintf>
      if (i == SDRAM_MEM_SIZE/4)
 80045b8:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 80045bc:	d00b      	beq.n	80045d6 <cliSdram+0x102>
      number--;
 80045be:	3d01      	subs	r5, #1
 80045c0:	b2ed      	uxtb	r5, r5
      if (cliAvailable() > 0)
 80045c2:	f7fc fc85 	bl	8000ed0 <cliAvailable>
 80045c6:	b978      	cbnz	r0, 80045e8 <cliSdram+0x114>
    while(number > 0)
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	d090      	beq.n	80044ee <cliSdram+0x1a>
      pre_time = millis();
 80045cc:	f7fc fa9a 	bl	8000b04 <millis>
 80045d0:	4604      	mov	r4, r0
      for (i=0; i<SDRAM_MEM_SIZE/4; i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	e7b7      	b.n	8004546 <cliSdram+0x72>
        cliPrintf( "Count %d\n", number);
 80045d6:	4629      	mov	r1, r5
 80045d8:	4814      	ldr	r0, [pc, #80]	@ (800462c <cliSdram+0x158>)
 80045da:	f7fc fc93 	bl	8000f04 <cliPrintf>
        cliPrintf( "Sdram %d MB OK\n\n", SDRAM_MEM_SIZE/1024/1024);
 80045de:	2120      	movs	r1, #32
 80045e0:	4813      	ldr	r0, [pc, #76]	@ (8004630 <cliSdram+0x15c>)
 80045e2:	f7fc fc8f 	bl	8000f04 <cliPrintf>
 80045e6:	e7ea      	b.n	80045be <cliSdram+0xea>
        cliPrintf( "Stop test...\n");
 80045e8:	4812      	ldr	r0, [pc, #72]	@ (8004634 <cliSdram+0x160>)
 80045ea:	f7fc fc8b 	bl	8000f04 <cliPrintf>
        break;
 80045ee:	e77e      	b.n	80044ee <cliSdram+0x1a>
    cliPrintf("sdram info\n");
 80045f0:	4811      	ldr	r0, [pc, #68]	@ (8004638 <cliSdram+0x164>)
 80045f2:	f7fc fc87 	bl	8000f04 <cliPrintf>
    cliPrintf("sdram test 1~100 \n");
 80045f6:	4811      	ldr	r0, [pc, #68]	@ (800463c <cliSdram+0x168>)
 80045f8:	f7fc fc84 	bl	8000f04 <cliPrintf>
}
 80045fc:	e777      	b.n	80044ee <cliSdram+0x1a>
 80045fe:	bf00      	nop
 8004600:	080280ec 	.word	0x080280ec
 8004604:	24002834 	.word	0x24002834
 8004608:	08028904 	.word	0x08028904
 800460c:	08028c38 	.word	0x08028c38
 8004610:	08028c4c 	.word	0x08028c4c
 8004614:	08028c60 	.word	0x08028c60
 8004618:	0802890c 	.word	0x0802890c
 800461c:	08028a2c 	.word	0x08028a2c
 8004620:	08028c74 	.word	0x08028c74
 8004624:	08028c8c 	.word	0x08028c8c
 8004628:	08028ca4 	.word	0x08028ca4
 800462c:	08028cb4 	.word	0x08028cb4
 8004630:	08028cc0 	.word	0x08028cc0
 8004634:	08028cd4 	.word	0x08028cd4
 8004638:	08028ce4 	.word	0x08028ce4
 800463c:	08028cf0 	.word	0x08028cf0

08004640 <sdramMemInit>:
{
 8004640:	b510      	push	{r4, lr}
 8004642:	4604      	mov	r4, r0
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004644:	492f      	ldr	r1, [pc, #188]	@ (8004704 <sdramMemInit+0xc4>)
 8004646:	2301      	movs	r3, #1
 8004648:	600b      	str	r3, [r1, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800464a:	2210      	movs	r2, #16
 800464c:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 800464e:	608b      	str	r3, [r1, #8]
  Command.ModeRegisterDefinition = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	60cb      	str	r3, [r1, #12]
  if(HAL_SDRAM_SendCommand(p_sdram, &Command, SDRAM_TIMEOUT) != HAL_OK) 
 8004654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004658:	f009 faf2 	bl	800dc40 <HAL_SDRAM_SendCommand>
 800465c:	2800      	cmp	r0, #0
 800465e:	d138      	bne.n	80046d2 <sdramMemInit+0x92>
  delay(1);  
 8004660:	2001      	movs	r0, #1
 8004662:	f7fc fa4b 	bl	8000afc <delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004666:	4927      	ldr	r1, [pc, #156]	@ (8004704 <sdramMemInit+0xc4>)
 8004668:	2302      	movs	r3, #2
 800466a:	600b      	str	r3, [r1, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800466c:	2310      	movs	r3, #16
 800466e:	604b      	str	r3, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8004670:	2301      	movs	r3, #1
 8004672:	608b      	str	r3, [r1, #8]
  Command.ModeRegisterDefinition = 0;  
 8004674:	2300      	movs	r3, #0
 8004676:	60cb      	str	r3, [r1, #12]
  if(HAL_SDRAM_SendCommand(p_sdram, &Command, SDRAM_TIMEOUT) != HAL_OK) 
 8004678:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800467c:	4620      	mov	r0, r4
 800467e:	f009 fadf 	bl	800dc40 <HAL_SDRAM_SendCommand>
 8004682:	bb58      	cbnz	r0, 80046dc <sdramMemInit+0x9c>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004684:	491f      	ldr	r1, [pc, #124]	@ (8004704 <sdramMemInit+0xc4>)
 8004686:	2303      	movs	r3, #3
 8004688:	600b      	str	r3, [r1, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800468a:	2310      	movs	r3, #16
 800468c:	604b      	str	r3, [r1, #4]
  Command.AutoRefreshNumber      = 8;
 800468e:	2308      	movs	r3, #8
 8004690:	608b      	str	r3, [r1, #8]
  Command.ModeRegisterDefinition = 0; 
 8004692:	2300      	movs	r3, #0
 8004694:	60cb      	str	r3, [r1, #12]
  if(HAL_SDRAM_SendCommand(p_sdram, &Command, SDRAM_TIMEOUT) != HAL_OK) 
 8004696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800469a:	4620      	mov	r0, r4
 800469c:	f009 fad0 	bl	800dc40 <HAL_SDRAM_SendCommand>
 80046a0:	bb08      	cbnz	r0, 80046e6 <sdramMemInit+0xa6>
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80046a2:	4918      	ldr	r1, [pc, #96]	@ (8004704 <sdramMemInit+0xc4>)
 80046a4:	2304      	movs	r3, #4
 80046a6:	600b      	str	r3, [r1, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80046a8:	2310      	movs	r3, #16
 80046aa:	604b      	str	r3, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80046ac:	2301      	movs	r3, #1
 80046ae:	608b      	str	r3, [r1, #8]
  Command.ModeRegisterDefinition = mode_reg; 
 80046b0:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80046b4:	60cb      	str	r3, [r1, #12]
  if(HAL_SDRAM_SendCommand(p_sdram, &Command, SDRAM_TIMEOUT) != HAL_OK) 
 80046b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046ba:	4620      	mov	r0, r4
 80046bc:	f009 fac0 	bl	800dc40 <HAL_SDRAM_SendCommand>
 80046c0:	b9b0      	cbnz	r0, 80046f0 <sdramMemInit+0xb0>
  if(HAL_SDRAM_ProgramRefreshRate(p_sdram, refresh_count) != HAL_OK)
 80046c2:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80046c6:	4620      	mov	r0, r4
 80046c8:	f009 fadb 	bl	800dc82 <HAL_SDRAM_ProgramRefreshRate>
 80046cc:	b9a8      	cbnz	r0, 80046fa <sdramMemInit+0xba>
  return true;
 80046ce:	2001      	movs	r0, #1
 80046d0:	e003      	b.n	80046da <sdramMemInit+0x9a>
    logPrintf("[  ] sdram step 1 fail\n");
 80046d2:	480d      	ldr	r0, [pc, #52]	@ (8004708 <sdramMemInit+0xc8>)
 80046d4:	f7fe fe78 	bl	80033c8 <logPrintf>
    return false;
 80046d8:	2000      	movs	r0, #0
}
 80046da:	bd10      	pop	{r4, pc}
    logPrintf("[  ] sdram step 3 fail\n");
 80046dc:	480b      	ldr	r0, [pc, #44]	@ (800470c <sdramMemInit+0xcc>)
 80046de:	f7fe fe73 	bl	80033c8 <logPrintf>
    return false;
 80046e2:	2000      	movs	r0, #0
 80046e4:	e7f9      	b.n	80046da <sdramMemInit+0x9a>
    logPrintf("[  ] sdram step 4 fail\n");
 80046e6:	480a      	ldr	r0, [pc, #40]	@ (8004710 <sdramMemInit+0xd0>)
 80046e8:	f7fe fe6e 	bl	80033c8 <logPrintf>
    return false;
 80046ec:	2000      	movs	r0, #0
 80046ee:	e7f4      	b.n	80046da <sdramMemInit+0x9a>
    logPrintf("[  ] sdram step 5 fail\n");
 80046f0:	4808      	ldr	r0, [pc, #32]	@ (8004714 <sdramMemInit+0xd4>)
 80046f2:	f7fe fe69 	bl	80033c8 <logPrintf>
    return false;
 80046f6:	2000      	movs	r0, #0
 80046f8:	e7ef      	b.n	80046da <sdramMemInit+0x9a>
    logPrintf("[  ] sdram step 5 fail\n");
 80046fa:	4806      	ldr	r0, [pc, #24]	@ (8004714 <sdramMemInit+0xd4>)
 80046fc:	f7fe fe64 	bl	80033c8 <logPrintf>
    return false;
 8004700:	2000      	movs	r0, #0
 8004702:	e7ea      	b.n	80046da <sdramMemInit+0x9a>
 8004704:	24002824 	.word	0x24002824
 8004708:	08028d04 	.word	0x08028d04
 800470c:	08028d1c 	.word	0x08028d1c
 8004710:	08028d34 	.word	0x08028d34
 8004714:	08028d4c 	.word	0x08028d4c

08004718 <sdramInit>:
{
 8004718:	b510      	push	{r4, lr}
  ret = sdramMemInit(&hsdram1);
 800471a:	480f      	ldr	r0, [pc, #60]	@ (8004758 <sdramInit+0x40>)
 800471c:	f7ff ff90 	bl	8004640 <sdramMemInit>
  logPrintf("[%s] sdramInit()\n", ret ? "OK":"NG");
 8004720:	4604      	mov	r4, r0
 8004722:	b160      	cbz	r0, 800473e <sdramInit+0x26>
 8004724:	490d      	ldr	r1, [pc, #52]	@ (800475c <sdramInit+0x44>)
 8004726:	480e      	ldr	r0, [pc, #56]	@ (8004760 <sdramInit+0x48>)
 8004728:	f7fe fe4e 	bl	80033c8 <logPrintf>
  if (ret == true)
 800472c:	b94c      	cbnz	r4, 8004742 <sdramInit+0x2a>
  cliAdd("sdram", cliSdram);
 800472e:	490d      	ldr	r1, [pc, #52]	@ (8004764 <sdramInit+0x4c>)
 8004730:	480d      	ldr	r0, [pc, #52]	@ (8004768 <sdramInit+0x50>)
 8004732:	f7fc fe95 	bl	8001460 <cliAdd>
  is_init = ret;
 8004736:	4b0d      	ldr	r3, [pc, #52]	@ (800476c <sdramInit+0x54>)
 8004738:	701c      	strb	r4, [r3, #0]
}
 800473a:	4620      	mov	r0, r4
 800473c:	bd10      	pop	{r4, pc}
  logPrintf("[%s] sdramInit()\n", ret ? "OK":"NG");
 800473e:	490c      	ldr	r1, [pc, #48]	@ (8004770 <sdramInit+0x58>)
 8004740:	e7f1      	b.n	8004726 <sdramInit+0xe>
    logPrintf("     addr : 0x%X\n", SDRAM_MEM_ADDR);
 8004742:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004746:	480b      	ldr	r0, [pc, #44]	@ (8004774 <sdramInit+0x5c>)
 8004748:	f7fe fe3e 	bl	80033c8 <logPrintf>
    logPrintf("     size : %dMB\n", (int)(SDRAM_MEM_SIZE/1024/1024));
 800474c:	2120      	movs	r1, #32
 800474e:	480a      	ldr	r0, [pc, #40]	@ (8004778 <sdramInit+0x60>)
 8004750:	f7fe fe3a 	bl	80033c8 <logPrintf>
 8004754:	e7eb      	b.n	800472e <sdramInit+0x16>
 8004756:	bf00      	nop
 8004758:	240029c4 	.word	0x240029c4
 800475c:	08028188 	.word	0x08028188
 8004760:	08028d64 	.word	0x08028d64
 8004764:	080044d5 	.word	0x080044d5
 8004768:	08028da0 	.word	0x08028da0
 800476c:	24002834 	.word	0x24002834
 8004770:	0802818c 	.word	0x0802818c
 8004774:	08028d78 	.word	0x08028d78
 8004778:	08028d8c 	.word	0x08028d8c

0800477c <spiBegin>:
bool spiBegin(uint8_t ch)
{
  bool ret = false;
  spi_t *p_spi = &spi_tbl[ch];

  switch(ch)
 800477c:	b108      	cbz	r0, 8004782 <spiBegin+0x6>
  bool ret = false;
 800477e:	2000      	movs	r0, #0
      }
      break;
  }

  return ret;
}
 8004780:	4770      	bx	lr
{
 8004782:	b530      	push	{r4, r5, lr}
 8004784:	b083      	sub	sp, #12
 8004786:	4604      	mov	r4, r0
      p_spi->h_spi = &hspi2;
 8004788:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800478c:	4d21      	ldr	r5, [pc, #132]	@ (8004814 <spiBegin+0x98>)
 800478e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8004792:	4821      	ldr	r0, [pc, #132]	@ (8004818 <spiBegin+0x9c>)
 8004794:	60a8      	str	r0, [r5, #8]
      p_spi->h_dma_rx = &hdma_spi2_rx;
 8004796:	4b21      	ldr	r3, [pc, #132]	@ (800481c <spiBegin+0xa0>)
 8004798:	612b      	str	r3, [r5, #16]
      p_spi->h_spi->Instance              = SPI2;
 800479a:	4b21      	ldr	r3, [pc, #132]	@ (8004820 <spiBegin+0xa4>)
 800479c:	6003      	str	r3, [r0, #0]
      p_spi->h_spi->Init.Mode             = SPI_MODE_MASTER;
 800479e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80047a2:	6043      	str	r3, [r0, #4]
      p_spi->h_spi->Init.Direction        = SPI_DIRECTION_2LINES;
 80047a4:	2300      	movs	r3, #0
 80047a6:	6083      	str	r3, [r0, #8]
      p_spi->h_spi->Init.DataSize         = SPI_DATASIZE_8BIT;
 80047a8:	2207      	movs	r2, #7
 80047aa:	60c2      	str	r2, [r0, #12]
      p_spi->h_spi->Init.CLKPolarity      = SPI_POLARITY_LOW;
 80047ac:	6103      	str	r3, [r0, #16]
      p_spi->h_spi->Init.CLKPhase         = SPI_PHASE_1EDGE;
 80047ae:	6143      	str	r3, [r0, #20]
      p_spi->h_spi->Init.NSS              = SPI_NSS_SOFT;
 80047b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80047b4:	6182      	str	r2, [r0, #24]
      p_spi->h_spi->Init.BaudRatePrescaler= SPI_BAUDRATEPRESCALER_2;
 80047b6:	61c3      	str	r3, [r0, #28]
      p_spi->h_spi->Init.FirstBit         = SPI_FIRSTBIT_MSB;
 80047b8:	6203      	str	r3, [r0, #32]
      p_spi->h_spi->Init.TIMode           = SPI_TIMODE_DISABLE;
 80047ba:	6243      	str	r3, [r0, #36]	@ 0x24
      p_spi->h_spi->Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 80047bc:	6283      	str	r3, [r0, #40]	@ 0x28
      p_spi->h_spi->Init.CRCPolynomial    = 0;
 80047be:	62c3      	str	r3, [r0, #44]	@ 0x2c
      p_spi->h_spi->Init.NSSPMode                   = SPI_NSS_PULSE_DISABLE;
 80047c0:	6343      	str	r3, [r0, #52]	@ 0x34
      p_spi->h_spi->Init.NSSPolarity                = SPI_NSS_POLARITY_LOW;
 80047c2:	6383      	str	r3, [r0, #56]	@ 0x38
      p_spi->h_spi->Init.FifoThreshold              = SPI_FIFO_THRESHOLD_01DATA;
 80047c4:	63c3      	str	r3, [r0, #60]	@ 0x3c
      p_spi->h_spi->Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80047c6:	6403      	str	r3, [r0, #64]	@ 0x40
      p_spi->h_spi->Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80047c8:	6443      	str	r3, [r0, #68]	@ 0x44
      p_spi->h_spi->Init.MasterSSIdleness           = SPI_MASTER_SS_IDLENESS_01CYCLE;
 80047ca:	2201      	movs	r2, #1
 80047cc:	6482      	str	r2, [r0, #72]	@ 0x48
      p_spi->h_spi->Init.MasterInterDataIdleness    = SPI_MASTER_INTERDATA_IDLENESS_01CYCLE;
 80047ce:	2210      	movs	r2, #16
 80047d0:	64c2      	str	r2, [r0, #76]	@ 0x4c
      p_spi->h_spi->Init.MasterReceiverAutoSusp     = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80047d2:	6503      	str	r3, [r0, #80]	@ 0x50
      p_spi->h_spi->Init.MasterKeepIOState          = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80047d4:	6543      	str	r3, [r0, #84]	@ 0x54
      p_spi->h_spi->Init.IOSwap                     = SPI_IO_SWAP_DISABLE;
 80047d6:	6583      	str	r3, [r0, #88]	@ 0x58
      __HAL_RCC_DMA1_CLK_ENABLE();
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <spiBegin+0xa8>)
 80047da:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80047e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	9b01      	ldr	r3, [sp, #4]
      HAL_SPI_DeInit(p_spi->h_spi);
 80047f2:	f009 fbbb 	bl	800df6c <HAL_SPI_DeInit>
      if (HAL_SPI_Init(p_spi->h_spi) == HAL_OK)
 80047f6:	68a8      	ldr	r0, [r5, #8]
 80047f8:	f009 faf0 	bl	800dddc <HAL_SPI_Init>
 80047fc:	b938      	cbnz	r0, 800480e <spiBegin+0x92>
        p_spi->is_open = true;
 80047fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004802:	2001      	movs	r0, #1
 8004804:	4b03      	ldr	r3, [pc, #12]	@ (8004814 <spiBegin+0x98>)
 8004806:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
}
 800480a:	b003      	add	sp, #12
 800480c:	bd30      	pop	{r4, r5, pc}
  bool ret = false;
 800480e:	2000      	movs	r0, #0
 8004810:	e7fb      	b.n	800480a <spiBegin+0x8e>
 8004812:	bf00      	nop
 8004814:	24002838 	.word	0x24002838
 8004818:	24002c40 	.word	0x24002c40
 800481c:	24002bc8 	.word	0x24002bc8
 8004820:	40003800 	.word	0x40003800
 8004824:	58024400 	.word	0x58024400

08004828 <spiTransferDMA>:

  return ret;
}

bool spiTransferDMA(uint8_t ch, uint8_t *tx_buf, uint8_t *rx_buf, uint32_t length, uint32_t timeout)
{
 8004828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	4604      	mov	r4, r0
 8004830:	9e08      	ldr	r6, [sp, #32]
  bool ret = false;
  HAL_StatusTypeDef status;
  spi_t  *p_spi = &spi_tbl[ch];
  bool is_dma = false;

  if (p_spi->is_open == false) return false;
 8004832:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 8004836:	4d24      	ldr	r5, [pc, #144]	@ (80048c8 <spiTransferDMA+0xa0>)
 8004838:	f815 5027 	ldrb.w	r5, [r5, r7, lsl #2]
 800483c:	b195      	cbz	r5, 8004864 <spiTransferDMA+0x3c>
 800483e:	4610      	mov	r0, r2
 8004840:	461a      	mov	r2, r3

  if (rx_buf == NULL)
 8004842:	b198      	cbz	r0, 800486c <spiTransferDMA+0x44>
  {
    status = HAL_SPI_Transmit(p_spi->h_spi, tx_buf, length, timeout);
  }
  else if (tx_buf == NULL)
 8004844:	b1e9      	cbz	r1, 8004882 <spiTransferDMA+0x5a>
    status = HAL_SPI_Receive_DMA(p_spi->h_spi, rx_buf, length);
    is_dma = true;
  }
  else
  {
    status = HAL_SPI_TransmitReceive(p_spi->h_spi, tx_buf, rx_buf, length, timeout);
 8004846:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800484a:	4f1f      	ldr	r7, [pc, #124]	@ (80048c8 <spiTransferDMA+0xa0>)
 800484c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8004850:	9600      	str	r6, [sp, #0]
 8004852:	b293      	uxth	r3, r2
 8004854:	4602      	mov	r2, r0
 8004856:	68b8      	ldr	r0, [r7, #8]
 8004858:	f009 fd02 	bl	800e260 <HAL_SPI_TransmitReceive>
  bool is_dma = false;
 800485c:	f04f 0800 	mov.w	r8, #0
  }

  if (status == HAL_OK)
 8004860:	b1e8      	cbz	r0, 800489e <spiTransferDMA+0x76>
  bool ret = false;
 8004862:	2500      	movs	r5, #0
      }
    }
  }

  return ret;
}
 8004864:	4628      	mov	r0, r5
 8004866:	b002      	add	sp, #8
 8004868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_SPI_Transmit(p_spi->h_spi, tx_buf, length, timeout);
 800486c:	4816      	ldr	r0, [pc, #88]	@ (80048c8 <spiTransferDMA+0xa0>)
 800486e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8004872:	4633      	mov	r3, r6
 8004874:	b292      	uxth	r2, r2
 8004876:	6880      	ldr	r0, [r0, #8]
 8004878:	f009 fb90 	bl	800df9c <HAL_SPI_Transmit>
  bool is_dma = false;
 800487c:	f04f 0800 	mov.w	r8, #0
 8004880:	e7ee      	b.n	8004860 <spiTransferDMA+0x38>
    p_spi->is_rx_done = false;
 8004882:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <spiTransferDMA+0xa0>)
 8004888:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800488c:	2100      	movs	r1, #0
 800488e:	7099      	strb	r1, [r3, #2]
    status = HAL_SPI_Receive_DMA(p_spi->h_spi, rx_buf, length);
 8004890:	b292      	uxth	r2, r2
 8004892:	4601      	mov	r1, r0
 8004894:	6898      	ldr	r0, [r3, #8]
 8004896:	f009 ff2d 	bl	800e6f4 <HAL_SPI_Receive_DMA>
    is_dma = true;
 800489a:	46a8      	mov	r8, r5
 800489c:	e7e0      	b.n	8004860 <spiTransferDMA+0x38>
    pre_time = millis();
 800489e:	f7fc f931 	bl	8000b04 <millis>
 80048a2:	4607      	mov	r7, r0
    if (is_dma == true)
 80048a4:	f1b8 0f00 	cmp.w	r8, #0
 80048a8:	d0dc      	beq.n	8004864 <spiTransferDMA+0x3c>
        if(p_spi->is_rx_done == true)
 80048aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80048ae:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <spiTransferDMA+0xa0>)
 80048b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80048b4:	789d      	ldrb	r5, [r3, #2]
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	d1d4      	bne.n	8004864 <spiTransferDMA+0x3c>
        if((millis()-pre_time) >= timeout)
 80048ba:	f7fc f923 	bl	8000b04 <millis>
 80048be:	1bc0      	subs	r0, r0, r7
 80048c0:	42b0      	cmp	r0, r6
 80048c2:	d3f2      	bcc.n	80048aa <spiTransferDMA+0x82>
 80048c4:	e7ce      	b.n	8004864 <spiTransferDMA+0x3c>
 80048c6:	bf00      	nop
 80048c8:	24002838 	.word	0x24002838

080048cc <HAL_SPI_RxCpltCallback>:
}


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80048cc:	6802      	ldr	r2, [r0, #0]
 80048ce:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_SPI_RxCpltCallback+0x18>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d000      	beq.n	80048da <HAL_SPI_RxCpltCallback+0xe>
  {
    spi_tbl[_DEF_SPI1].is_rx_done = true;
  }  
}
 80048d8:	4770      	bx	lr
    spi_tbl[_DEF_SPI1].is_rx_done = true;
 80048da:	4b02      	ldr	r3, [pc, #8]	@ (80048e4 <HAL_SPI_RxCpltCallback+0x18>)
 80048dc:	2201      	movs	r2, #1
 80048de:	709a      	strb	r2, [r3, #2]
}
 80048e0:	e7fa      	b.n	80048d8 <HAL_SPI_RxCpltCallback+0xc>
 80048e2:	bf00      	nop
 80048e4:	24002838 	.word	0x24002838

080048e8 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80048e8:	6802      	ldr	r2, [r0, #0]
 80048ea:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_SPI_ErrorCallback+0x18>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d000      	beq.n	80048f6 <HAL_SPI_ErrorCallback+0xe>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
  }
}
 80048f4:	4770      	bx	lr
    spi_tbl[_DEF_SPI1].is_error = true;
 80048f6:	4b02      	ldr	r3, [pc, #8]	@ (8004900 <HAL_SPI_ErrorCallback+0x18>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	70da      	strb	r2, [r3, #3]
}
 80048fc:	e7fa      	b.n	80048f4 <HAL_SPI_ErrorCallback+0xc>
 80048fe:	bf00      	nop
 8004900:	24002838 	.word	0x24002838

08004904 <spiFlashTransfer>:

  return ret;
}

bool spiFlashTransfer(uint8_t *tx_buf, uint8_t *rx_buf, uint32_t length, uint32_t timeout)
{
 8004904:	b500      	push	{lr}
 8004906:	b083      	sub	sp, #12
  bool ret = true;

  ret = spiTransferDMA(spi_ch, tx_buf, rx_buf, length, timeout);
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4613      	mov	r3, r2
 800490c:	460a      	mov	r2, r1
 800490e:	4601      	mov	r1, r0
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff ff89 	bl	8004828 <spiTransferDMA>

  return ret;
}
 8004916:	b003      	add	sp, #12
 8004918:	f85d fb04 	ldr.w	pc, [sp], #4

0800491c <spiFlashGetID>:
{
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	4606      	mov	r6, r0
 8004922:	460c      	mov	r4, r1
  tx_buf[0] = READ_ID_CMD;
 8004924:	239f      	movs	r3, #159	@ 0x9f
 8004926:	f88d 3004 	strb.w	r3, [sp, #4]
  SPI_CS_L();
 800492a:	2100      	movs	r1, #0
 800492c:	2002      	movs	r0, #2
 800492e:	f7fe f897 	bl	8002a60 <gpioPinWrite>
  ret &= spiFlashTransfer(tx_buf, rx_buf, 4, 10);
 8004932:	230a      	movs	r3, #10
 8004934:	2204      	movs	r2, #4
 8004936:	4669      	mov	r1, sp
 8004938:	eb0d 0002 	add.w	r0, sp, r2
 800493c:	f7ff ffe2 	bl	8004904 <spiFlashTransfer>
 8004940:	4605      	mov	r5, r0
  SPI_CS_H();
 8004942:	2101      	movs	r1, #1
 8004944:	2002      	movs	r0, #2
 8004946:	f7fe f88b 	bl	8002a60 <gpioPinWrite>
  if (ret == true)
 800494a:	b16d      	cbz	r5, 8004968 <spiFlashGetID+0x4c>
    if (length > 4)
 800494c:	2c04      	cmp	r4, #4
 800494e:	d900      	bls.n	8004952 <spiFlashGetID+0x36>
      length = 4;
 8004950:	2404      	movs	r4, #4
    for (int i=0; i<length; i++)
 8004952:	2300      	movs	r3, #0
 8004954:	e006      	b.n	8004964 <spiFlashGetID+0x48>
      p_id_tbl[i] = rx_buf[i];
 8004956:	f103 0208 	add.w	r2, r3, #8
 800495a:	446a      	add	r2, sp
 800495c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8004960:	54f2      	strb	r2, [r6, r3]
    for (int i=0; i<length; i++)
 8004962:	3301      	adds	r3, #1
 8004964:	42a3      	cmp	r3, r4
 8004966:	d3f6      	bcc.n	8004956 <spiFlashGetID+0x3a>
}
 8004968:	4628      	mov	r0, r5
 800496a:	b002      	add	sp, #8
 800496c:	bd70      	pop	{r4, r5, r6, pc}

0800496e <spiFlashWriteEnable>:
{
 800496e:	b530      	push	{r4, r5, lr}
 8004970:	b083      	sub	sp, #12
  SPI_CS_L();
 8004972:	2100      	movs	r1, #0
 8004974:	2002      	movs	r0, #2
 8004976:	f7fe f873 	bl	8002a60 <gpioPinWrite>
  tx_buf[0] = WRITE_ENABLE_CMD;
 800497a:	2306      	movs	r3, #6
 800497c:	f88d 3004 	strb.w	r3, [sp, #4]
  ret &= spiFlashTransfer(tx_buf, NULL, 1, 10);
 8004980:	230a      	movs	r3, #10
 8004982:	2201      	movs	r2, #1
 8004984:	2100      	movs	r1, #0
 8004986:	a801      	add	r0, sp, #4
 8004988:	f7ff ffbc 	bl	8004904 <spiFlashTransfer>
 800498c:	4604      	mov	r4, r0
  SPI_CS_H();
 800498e:	2101      	movs	r1, #1
 8004990:	2002      	movs	r0, #2
 8004992:	f7fe f865 	bl	8002a60 <gpioPinWrite>
  pre_time = millis();
 8004996:	f7fc f8b5 	bl	8000b04 <millis>
 800499a:	4605      	mov	r5, r0
 800499c:	e004      	b.n	80049a8 <spiFlashWriteEnable+0x3a>
    if (millis()-pre_time >= 100)
 800499e:	f7fc f8b1 	bl	8000b04 <millis>
 80049a2:	1b40      	subs	r0, r0, r5
 80049a4:	2863      	cmp	r0, #99	@ 0x63
 80049a6:	d81a      	bhi.n	80049de <spiFlashWriteEnable+0x70>
    SPI_CS_L();
 80049a8:	2100      	movs	r1, #0
 80049aa:	2002      	movs	r0, #2
 80049ac:	f7fe f858 	bl	8002a60 <gpioPinWrite>
    tx_buf[0] = READ_STATUS_REG_CMD;
 80049b0:	2305      	movs	r3, #5
 80049b2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret &= spiFlashTransfer(tx_buf, rx_buf, 2, 10);
 80049b6:	230a      	movs	r3, #10
 80049b8:	2202      	movs	r2, #2
 80049ba:	4669      	mov	r1, sp
 80049bc:	a801      	add	r0, sp, #4
 80049be:	f7ff ffa1 	bl	8004904 <spiFlashTransfer>
 80049c2:	4004      	ands	r4, r0
 80049c4:	b2e4      	uxtb	r4, r4
    SPI_CS_H();
 80049c6:	2101      	movs	r1, #1
 80049c8:	2002      	movs	r0, #2
 80049ca:	f7fe f849 	bl	8002a60 <gpioPinWrite>
    if (ret == true)
 80049ce:	2c00      	cmp	r4, #0
 80049d0:	d0e5      	beq.n	800499e <spiFlashWriteEnable+0x30>
      if (rx_buf[1] & W25Q128FV_SR_WREN)
 80049d2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80049d6:	f013 0f02 	tst.w	r3, #2
 80049da:	d0e0      	beq.n	800499e <spiFlashWriteEnable+0x30>
 80049dc:	e000      	b.n	80049e0 <spiFlashWriteEnable+0x72>
      ret = false;
 80049de:	2400      	movs	r4, #0
}
 80049e0:	4620      	mov	r0, r4
 80049e2:	b003      	add	sp, #12
 80049e4:	bd30      	pop	{r4, r5, pc}

080049e6 <spiFlashWaitBusy>:
{
 80049e6:	b570      	push	{r4, r5, r6, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	4606      	mov	r6, r0
  pre_time = millis();
 80049ec:	f7fc f88a 	bl	8000b04 <millis>
 80049f0:	4605      	mov	r5, r0
  bool ret = true;
 80049f2:	2401      	movs	r4, #1
    if (millis()-pre_time >= timeout)
 80049f4:	f7fc f886 	bl	8000b04 <millis>
 80049f8:	1b40      	subs	r0, r0, r5
 80049fa:	42b0      	cmp	r0, r6
 80049fc:	d219      	bcs.n	8004a32 <spiFlashWaitBusy+0x4c>
    SPI_CS_L();
 80049fe:	2100      	movs	r1, #0
 8004a00:	2002      	movs	r0, #2
 8004a02:	f7fe f82d 	bl	8002a60 <gpioPinWrite>
    tx_buf[0] = READ_STATUS_REG_CMD;
 8004a06:	2305      	movs	r3, #5
 8004a08:	f88d 3004 	strb.w	r3, [sp, #4]
    ret &= spiFlashTransfer(tx_buf, rx_buf, 2, 10);
 8004a0c:	230a      	movs	r3, #10
 8004a0e:	2202      	movs	r2, #2
 8004a10:	4669      	mov	r1, sp
 8004a12:	a801      	add	r0, sp, #4
 8004a14:	f7ff ff76 	bl	8004904 <spiFlashTransfer>
 8004a18:	4004      	ands	r4, r0
    SPI_CS_H();
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	2002      	movs	r0, #2
 8004a1e:	f7fe f81f 	bl	8002a60 <gpioPinWrite>
    if (ret == true)
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	d0e6      	beq.n	80049f4 <spiFlashWaitBusy+0xe>
      busy_bit = rx_buf[1] & W25Q128FV_SR_WIP;
 8004a26:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (busy_bit == 0)
 8004a2a:	f013 0f01 	tst.w	r3, #1
 8004a2e:	d1e1      	bne.n	80049f4 <spiFlashWaitBusy+0xe>
 8004a30:	e000      	b.n	8004a34 <spiFlashWaitBusy+0x4e>
      ret = false;
 8004a32:	2400      	movs	r4, #0
}
 8004a34:	4620      	mov	r0, r4
 8004a36:	b002      	add	sp, #8
 8004a38:	bd70      	pop	{r4, r5, r6, pc}

08004a3a <spiFlashReset>:
{
 8004a3a:	b510      	push	{r4, lr}
 8004a3c:	b082      	sub	sp, #8
  if (spiBegin(spi_ch) == false)
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f7ff fe9c 	bl	800477c <spiBegin>
 8004a44:	4604      	mov	r4, r0
 8004a46:	b910      	cbnz	r0, 8004a4e <spiFlashReset+0x14>
}
 8004a48:	4620      	mov	r0, r4
 8004a4a:	b002      	add	sp, #8
 8004a4c:	bd10      	pop	{r4, pc}
  tx_buf[0] = RESET_ENABLE_CMD;
 8004a4e:	2366      	movs	r3, #102	@ 0x66
 8004a50:	f88d 3004 	strb.w	r3, [sp, #4]
  SPI_CS_L();
 8004a54:	2100      	movs	r1, #0
 8004a56:	2002      	movs	r0, #2
 8004a58:	f7fe f802 	bl	8002a60 <gpioPinWrite>
  ret &= spiFlashTransfer(tx_buf, NULL, 1, 10);
 8004a5c:	230a      	movs	r3, #10
 8004a5e:	2201      	movs	r2, #1
 8004a60:	2100      	movs	r1, #0
 8004a62:	a801      	add	r0, sp, #4
 8004a64:	f7ff ff4e 	bl	8004904 <spiFlashTransfer>
 8004a68:	4604      	mov	r4, r0
  SPI_CS_H();
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	2002      	movs	r0, #2
 8004a6e:	f7fd fff7 	bl	8002a60 <gpioPinWrite>
  tx_buf[0] = RESET_MEMORY_CMD;
 8004a72:	2399      	movs	r3, #153	@ 0x99
 8004a74:	f88d 3004 	strb.w	r3, [sp, #4]
  SPI_CS_L();
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	f7fd fff0 	bl	8002a60 <gpioPinWrite>
  ret &= spiFlashTransfer(tx_buf, NULL, 1, 10);
 8004a80:	230a      	movs	r3, #10
 8004a82:	2201      	movs	r2, #1
 8004a84:	2100      	movs	r1, #0
 8004a86:	a801      	add	r0, sp, #4
 8004a88:	f7ff ff3c 	bl	8004904 <spiFlashTransfer>
 8004a8c:	4004      	ands	r4, r0
 8004a8e:	b2e4      	uxtb	r4, r4
  SPI_CS_H();
 8004a90:	2101      	movs	r1, #1
 8004a92:	2002      	movs	r0, #2
 8004a94:	f7fd ffe4 	bl	8002a60 <gpioPinWrite>
  delay(10);
 8004a98:	200a      	movs	r0, #10
 8004a9a:	f7fc f82f 	bl	8000afc <delay>
  if (ret != true) return false;
 8004a9e:	e7d3      	b.n	8004a48 <spiFlashReset+0xe>

08004aa0 <spiFlashInit>:
{
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	b082      	sub	sp, #8
  ret = spiFlashReset();
 8004aa4:	f7ff ffc9 	bl	8004a3a <spiFlashReset>
  if (spiFlashGetID(id_tbl, 4) == true)
 8004aa8:	2104      	movs	r1, #4
 8004aaa:	eb0d 0001 	add.w	r0, sp, r1
 8004aae:	f7ff ff35 	bl	800491c <spiFlashGetID>
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	b340      	cbz	r0, 8004b08 <spiFlashInit+0x68>
    if (id_tbl[1] == 0xEF && id_tbl[2] == 0x40 && id_tbl[3] == 0x19)
 8004ab6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004aba:	2bef      	cmp	r3, #239	@ 0xef
 8004abc:	d103      	bne.n	8004ac6 <spiFlashInit+0x26>
 8004abe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004ac2:	2b40      	cmp	r3, #64	@ 0x40
 8004ac4:	d015      	beq.n	8004af2 <spiFlashInit+0x52>
      logPrintf("[NG] spiFlashInit()\n");
 8004ac6:	4812      	ldr	r0, [pc, #72]	@ (8004b10 <spiFlashInit+0x70>)
 8004ac8:	f7fe fc7e 	bl	80033c8 <logPrintf>
      logPrintf("     W25Q256JV Not Found %X %X %X\r\n", id_tbl[1], id_tbl[2], id_tbl[3]);      
 8004acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ad0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8004ad4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004ad8:	480e      	ldr	r0, [pc, #56]	@ (8004b14 <spiFlashInit+0x74>)
 8004ada:	f7fe fc75 	bl	80033c8 <logPrintf>
      ret = false;
 8004ade:	2400      	movs	r4, #0
  is_init = ret;
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <spiFlashInit+0x78>)
 8004ae2:	701c      	strb	r4, [r3, #0]
  cliAdd("spiFlash", cliCmd);
 8004ae4:	490d      	ldr	r1, [pc, #52]	@ (8004b1c <spiFlashInit+0x7c>)
 8004ae6:	480e      	ldr	r0, [pc, #56]	@ (8004b20 <spiFlashInit+0x80>)
 8004ae8:	f7fc fcba 	bl	8001460 <cliAdd>
}
 8004aec:	4620      	mov	r0, r4
 8004aee:	b002      	add	sp, #8
 8004af0:	bd10      	pop	{r4, pc}
    if (id_tbl[1] == 0xEF && id_tbl[2] == 0x40 && id_tbl[3] == 0x19)
 8004af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004af6:	2b19      	cmp	r3, #25
 8004af8:	d1e5      	bne.n	8004ac6 <spiFlashInit+0x26>
      logPrintf("[OK] spiFlashInit()\n");
 8004afa:	480a      	ldr	r0, [pc, #40]	@ (8004b24 <spiFlashInit+0x84>)
 8004afc:	f7fe fc64 	bl	80033c8 <logPrintf>
      logPrintf("     W25Q256JV Found\r\n");
 8004b00:	4809      	ldr	r0, [pc, #36]	@ (8004b28 <spiFlashInit+0x88>)
 8004b02:	f7fe fc61 	bl	80033c8 <logPrintf>
      ret = true;
 8004b06:	e7eb      	b.n	8004ae0 <spiFlashInit+0x40>
    logPrintf("spiFlash            \t: Fail\r\n");
 8004b08:	4808      	ldr	r0, [pc, #32]	@ (8004b2c <spiFlashInit+0x8c>)
 8004b0a:	f7fe fc5d 	bl	80033c8 <logPrintf>
    ret = false;
 8004b0e:	e7e7      	b.n	8004ae0 <spiFlashInit+0x40>
 8004b10:	08028dc0 	.word	0x08028dc0
 8004b14:	080288c4 	.word	0x080288c4
 8004b18:	2400284c 	.word	0x2400284c
 8004b1c:	08004cd5 	.word	0x08004cd5
 8004b20:	08028df8 	.word	0x08028df8
 8004b24:	08028da8 	.word	0x08028da8
 8004b28:	080288ac 	.word	0x080288ac
 8004b2c:	08028dd8 	.word	0x08028dd8

08004b30 <spiFlashRead>:
{
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	460c      	mov	r4, r1
 8004b36:	4615      	mov	r5, r2
  tx_buf[0] = READ_CMD;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	f88d 3004 	strb.w	r3, [sp, #4]
  tx_buf[1] = addr >> 16;
 8004b3e:	0c03      	lsrs	r3, r0, #16
 8004b40:	f88d 3005 	strb.w	r3, [sp, #5]
  tx_buf[2] = addr >> 8;
 8004b44:	0a03      	lsrs	r3, r0, #8
 8004b46:	f88d 3006 	strb.w	r3, [sp, #6]
  tx_buf[3] = addr >> 0;
 8004b4a:	f88d 0007 	strb.w	r0, [sp, #7]
  SPI_CS_L();
 8004b4e:	2100      	movs	r1, #0
 8004b50:	2002      	movs	r0, #2
 8004b52:	f7fd ff85 	bl	8002a60 <gpioPinWrite>
  ret &= spiFlashTransfer(tx_buf, NULL, 4, 10);
 8004b56:	230a      	movs	r3, #10
 8004b58:	2204      	movs	r2, #4
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	eb0d 0002 	add.w	r0, sp, r2
 8004b60:	f7ff fed0 	bl	8004904 <spiFlashTransfer>
  if (ret == true)
 8004b64:	4606      	mov	r6, r0
 8004b66:	b930      	cbnz	r0, 8004b76 <spiFlashRead+0x46>
  SPI_CS_H();
 8004b68:	2101      	movs	r1, #1
 8004b6a:	2002      	movs	r0, #2
 8004b6c:	f7fd ff78 	bl	8002a60 <gpioPinWrite>
}
 8004b70:	4630      	mov	r0, r6
 8004b72:	b002      	add	sp, #8
 8004b74:	bd70      	pop	{r4, r5, r6, pc}
    ret &= spiFlashTransfer(NULL, p_data, length, 500);
 8004b76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7ff fec0 	bl	8004904 <spiFlashTransfer>
 8004b84:	4006      	ands	r6, r0
 8004b86:	b2f6      	uxtb	r6, r6
 8004b88:	e7ee      	b.n	8004b68 <spiFlashRead+0x38>

08004b8a <spiFlashEraseBlock>:
{
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	4604      	mov	r4, r0
  if (spiFlashWriteEnable() == false)
 8004b90:	f7ff feed 	bl	800496e <spiFlashWriteEnable>
 8004b94:	4603      	mov	r3, r0
 8004b96:	b910      	cbnz	r0, 8004b9e <spiFlashEraseBlock+0x14>
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	b002      	add	sp, #8
 8004b9c:	bd10      	pop	{r4, pc}
  SPI_CS_L();
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	2002      	movs	r0, #2
 8004ba2:	f7fd ff5d 	bl	8002a60 <gpioPinWrite>
  tx_buf[0] = SECTOR_ERASE_CMD;
 8004ba6:	23d8      	movs	r3, #216	@ 0xd8
 8004ba8:	f88d 3004 	strb.w	r3, [sp, #4]
  tx_buf[1] = block_addr >> 16;
 8004bac:	0c23      	lsrs	r3, r4, #16
 8004bae:	f88d 3005 	strb.w	r3, [sp, #5]
  tx_buf[2] = block_addr >> 8;
 8004bb2:	0a23      	lsrs	r3, r4, #8
 8004bb4:	f88d 3006 	strb.w	r3, [sp, #6]
  tx_buf[3] = block_addr >> 0;
 8004bb8:	f88d 4007 	strb.w	r4, [sp, #7]
  ret &= spiFlashTransfer(tx_buf, NULL, 4, 10);
 8004bbc:	230a      	movs	r3, #10
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	eb0d 0002 	add.w	r0, sp, r2
 8004bc6:	f7ff fe9d 	bl	8004904 <spiFlashTransfer>
 8004bca:	4604      	mov	r4, r0
  SPI_CS_H();
 8004bcc:	2101      	movs	r1, #1
 8004bce:	2002      	movs	r0, #2
 8004bd0:	f7fd ff46 	bl	8002a60 <gpioPinWrite>
  ret &= spiFlashWaitBusy(W25Q128FV_SECTOR_ERASE_MAX_TIME);
 8004bd4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004bd8:	f7ff ff05 	bl	80049e6 <spiFlashWaitBusy>
 8004bdc:	ea04 0300 	and.w	r3, r4, r0
 8004be0:	b2db      	uxtb	r3, r3
  return ret;
 8004be2:	e7d9      	b.n	8004b98 <spiFlashEraseBlock+0xe>

08004be4 <spiFlashErase>:
{
 8004be4:	b538      	push	{r3, r4, r5, lr}
  if ((addr > flash_length) || ((addr+length) > flash_length))
 8004be6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004bea:	d811      	bhi.n	8004c10 <spiFlashErase+0x2c>
 8004bec:	1845      	adds	r5, r0, r1
 8004bee:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
 8004bf2:	d810      	bhi.n	8004c16 <spiFlashErase+0x32>
  if (length == 0)
 8004bf4:	b189      	cbz	r1, 8004c1a <spiFlashErase+0x36>
  block_begin = addr / block_size;
 8004bf6:	0c04      	lsrs	r4, r0, #16
  block_end   = (addr + length - 1) / block_size;
 8004bf8:	3d01      	subs	r5, #1
 8004bfa:	0c2d      	lsrs	r5, r5, #16
  bool ret = true;
 8004bfc:	2301      	movs	r3, #1
  for (i=block_begin; i<=block_end; i++)
 8004bfe:	42ac      	cmp	r4, r5
 8004c00:	d807      	bhi.n	8004c12 <spiFlashErase+0x2e>
    ret = spiFlashEraseBlock(block_size*i);
 8004c02:	0420      	lsls	r0, r4, #16
 8004c04:	f7ff ffc1 	bl	8004b8a <spiFlashEraseBlock>
    if (ret == false)
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b110      	cbz	r0, 8004c12 <spiFlashErase+0x2e>
  for (i=block_begin; i<=block_end; i++)
 8004c0c:	3401      	adds	r4, #1
 8004c0e:	e7f6      	b.n	8004bfe <spiFlashErase+0x1a>
    return false;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	bd38      	pop	{r3, r4, r5, pc}
    return false;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e7fb      	b.n	8004c12 <spiFlashErase+0x2e>
    return false;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e7f9      	b.n	8004c12 <spiFlashErase+0x2e>

08004c1e <spiFlashGetAddr>:
}
 8004c1e:	f04f 4012 	mov.w	r0, #2449473536	@ 0x92000000
 8004c22:	4770      	bx	lr

08004c24 <spiFlashGetLength>:
}
 8004c24:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8004c28:	4770      	bx	lr

08004c2a <spiFlashWrite>:
{
 8004c2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	4605      	mov	r5, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	4616      	mov	r6, r2
  if (addr+length > spiFlashGetLength())
 8004c36:	eb00 0902 	add.w	r9, r0, r2
 8004c3a:	f7ff fff3 	bl	8004c24 <spiFlashGetLength>
 8004c3e:	4581      	cmp	r9, r0
 8004c40:	d841      	bhi.n	8004cc6 <spiFlashWrite+0x9c>
  current_size = W25Q128FV_PAGE_SIZE - (addr % W25Q128FV_PAGE_SIZE);
 8004c42:	b2eb      	uxtb	r3, r5
 8004c44:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
  if (current_size > length)
 8004c48:	429e      	cmp	r6, r3
 8004c4a:	d300      	bcc.n	8004c4e <spiFlashWrite+0x24>
  current_size = W25Q128FV_PAGE_SIZE - (addr % W25Q128FV_PAGE_SIZE);
 8004c4c:	461e      	mov	r6, r3
 8004c4e:	2401      	movs	r4, #1
 8004c50:	e003      	b.n	8004c5a <spiFlashWrite+0x30>
    current_size = ((current_addr + W25Q128FV_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q128FV_PAGE_SIZE;
 8004c52:	f44f 7680 	mov.w	r6, #256	@ 0x100
  } while (current_addr < end_addr);
 8004c56:	45a9      	cmp	r9, r5
 8004c58:	d936      	bls.n	8004cc8 <spiFlashWrite+0x9e>
    if (spiFlashWriteEnable() == false)
 8004c5a:	f7ff fe88 	bl	800496e <spiFlashWriteEnable>
 8004c5e:	b3b8      	cbz	r0, 8004cd0 <spiFlashWrite+0xa6>
    SPI_CS_L();
 8004c60:	2100      	movs	r1, #0
 8004c62:	2002      	movs	r0, #2
 8004c64:	f7fd fefc 	bl	8002a60 <gpioPinWrite>
    tx_buf[0] = PAGE_PROG_CMD;
 8004c68:	f04f 0802 	mov.w	r8, #2
 8004c6c:	f88d 8004 	strb.w	r8, [sp, #4]
    tx_buf[1] = current_addr >> 16;
 8004c70:	0c2b      	lsrs	r3, r5, #16
 8004c72:	f88d 3005 	strb.w	r3, [sp, #5]
    tx_buf[2] = current_addr >> 8;
 8004c76:	0a2b      	lsrs	r3, r5, #8
 8004c78:	f88d 3006 	strb.w	r3, [sp, #6]
    tx_buf[3] = current_addr >> 0;
 8004c7c:	f88d 5007 	strb.w	r5, [sp, #7]
    ret &= spiFlashTransfer(tx_buf, NULL, 4, 10);
 8004c80:	230a      	movs	r3, #10
 8004c82:	2204      	movs	r2, #4
 8004c84:	2100      	movs	r1, #0
 8004c86:	eb0d 0002 	add.w	r0, sp, r2
 8004c8a:	f7ff fe3b 	bl	8004904 <spiFlashTransfer>
 8004c8e:	4004      	ands	r4, r0
 8004c90:	b2e4      	uxtb	r4, r4
    ret &= spiFlashTransfer(p_data, NULL, current_size, 10);
 8004c92:	230a      	movs	r3, #10
 8004c94:	4632      	mov	r2, r6
 8004c96:	2100      	movs	r1, #0
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff fe33 	bl	8004904 <spiFlashTransfer>
 8004c9e:	4004      	ands	r4, r0
    SPI_CS_H();
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	f7fd fedc 	bl	8002a60 <gpioPinWrite>
    ret &= spiFlashWaitBusy(2000);
 8004ca8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004cac:	f7ff fe9b 	bl	80049e6 <spiFlashWaitBusy>
    if (ret == false)
 8004cb0:	4004      	ands	r4, r0
 8004cb2:	d009      	beq.n	8004cc8 <spiFlashWrite+0x9e>
    current_addr += current_size;
 8004cb4:	4435      	add	r5, r6
    p_data += current_size;
 8004cb6:	4437      	add	r7, r6
    current_size = ((current_addr + W25Q128FV_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q128FV_PAGE_SIZE;
 8004cb8:	f505 7380 	add.w	r3, r5, #256	@ 0x100
 8004cbc:	4599      	cmp	r9, r3
 8004cbe:	d2c8      	bcs.n	8004c52 <spiFlashWrite+0x28>
 8004cc0:	eba9 0605 	sub.w	r6, r9, r5
 8004cc4:	e7c7      	b.n	8004c56 <spiFlashWrite+0x2c>
    return false;
 8004cc6:	2400      	movs	r4, #0
}
 8004cc8:	4620      	mov	r0, r4
 8004cca:	b003      	add	sp, #12
 8004ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	e7f9      	b.n	8004cc8 <spiFlashWrite+0x9e>

08004cd4 <cliCmd>:



#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 8004cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd6:	b0c3      	sub	sp, #268	@ 0x10c
 8004cd8:	4604      	mov	r4, r0
  uint8_t  data;
  uint32_t pre_time;
  bool flash_ret;


  if (args->argc == 1)
 8004cda:	8803      	ldrh	r3, [r0, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d012      	beq.n	8004d06 <cliCmd+0x32>
    else
    {
      ret = false;
    }
  }
  else if (args->argc == 3)
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d035      	beq.n	8004d50 <cliCmd+0x7c>
  }


  if (ret == false)
  {
    cliPrintf( "spiFlash info\n");
 8004ce4:	4856      	ldr	r0, [pc, #344]	@ (8004e40 <cliCmd+0x16c>)
 8004ce6:	f7fc f90d 	bl	8000f04 <cliPrintf>
    cliPrintf( "spiFlash test\n");
 8004cea:	4856      	ldr	r0, [pc, #344]	@ (8004e44 <cliCmd+0x170>)
 8004cec:	f7fc f90a 	bl	8000f04 <cliPrintf>
    cliPrintf( "spiFlash read  [addr] [length]\n");
 8004cf0:	4855      	ldr	r0, [pc, #340]	@ (8004e48 <cliCmd+0x174>)
 8004cf2:	f7fc f907 	bl	8000f04 <cliPrintf>
    cliPrintf( "spiFlash erase [addr] [length]\n");
 8004cf6:	4855      	ldr	r0, [pc, #340]	@ (8004e4c <cliCmd+0x178>)
 8004cf8:	f7fc f904 	bl	8000f04 <cliPrintf>
    cliPrintf( "spiFlash write [addr] [data]\n");
 8004cfc:	4854      	ldr	r0, [pc, #336]	@ (8004e50 <cliCmd+0x17c>)
 8004cfe:	f7fc f901 	bl	8000f04 <cliPrintf>
  }

}
 8004d02:	b043      	add	sp, #268	@ 0x10c
 8004d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(args->isStr(0, "info") == true)
 8004d06:	6943      	ldr	r3, [r0, #20]
 8004d08:	4952      	ldr	r1, [pc, #328]	@ (8004e54 <cliCmd+0x180>)
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	4798      	blx	r3
 8004d0e:	b9a8      	cbnz	r0, 8004d3c <cliCmd+0x68>
    else if(args->isStr(0, "test") == true)
 8004d10:	6963      	ldr	r3, [r4, #20]
 8004d12:	4951      	ldr	r1, [pc, #324]	@ (8004e58 <cliCmd+0x184>)
 8004d14:	2000      	movs	r0, #0
 8004d16:	4798      	blx	r3
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d0e3      	beq.n	8004ce4 <cliCmd+0x10>
      for (int i=0; i<100; i++)
 8004d1c:	2400      	movs	r4, #0
 8004d1e:	2c63      	cmp	r4, #99	@ 0x63
 8004d20:	dcef      	bgt.n	8004d02 <cliCmd+0x2e>
        if (spiFlashRead(0x1000*i, rx_buf, 256))
 8004d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d26:	a901      	add	r1, sp, #4
 8004d28:	0320      	lsls	r0, r4, #12
 8004d2a:	f7ff ff01 	bl	8004b30 <spiFlashRead>
 8004d2e:	b150      	cbz	r0, 8004d46 <cliCmd+0x72>
          cliPrintf("%d : OK\n", i);
 8004d30:	4621      	mov	r1, r4
 8004d32:	484a      	ldr	r0, [pc, #296]	@ (8004e5c <cliCmd+0x188>)
 8004d34:	f7fc f8e6 	bl	8000f04 <cliPrintf>
      for (int i=0; i<100; i++)
 8004d38:	3401      	adds	r4, #1
 8004d3a:	e7f0      	b.n	8004d1e <cliCmd+0x4a>
      cliPrintf("flash addr  : 0x%X\n", 0x0000000);
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4848      	ldr	r0, [pc, #288]	@ (8004e60 <cliCmd+0x18c>)
 8004d40:	f7fc f8e0 	bl	8000f04 <cliPrintf>
  if (ret == false)
 8004d44:	e7dd      	b.n	8004d02 <cliCmd+0x2e>
          cliPrintf("%d : FAIL\n", i);
 8004d46:	4621      	mov	r1, r4
 8004d48:	4846      	ldr	r0, [pc, #280]	@ (8004e64 <cliCmd+0x190>)
 8004d4a:	f7fc f8db 	bl	8000f04 <cliPrintf>
          break;
 8004d4e:	e7d8      	b.n	8004d02 <cliCmd+0x2e>
    if(args->isStr(0, "read") == true)
 8004d50:	6943      	ldr	r3, [r0, #20]
 8004d52:	4945      	ldr	r1, [pc, #276]	@ (8004e68 <cliCmd+0x194>)
 8004d54:	2000      	movs	r0, #0
 8004d56:	4798      	blx	r3
 8004d58:	b300      	cbz	r0, 8004d9c <cliCmd+0xc8>
      addr   = (uint32_t)args->getData(1);
 8004d5a:	68a3      	ldr	r3, [r4, #8]
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	4798      	blx	r3
 8004d60:	4607      	mov	r7, r0
      length = (uint32_t)args->getData(2);
 8004d62:	68a3      	ldr	r3, [r4, #8]
 8004d64:	2002      	movs	r0, #2
 8004d66:	4798      	blx	r3
 8004d68:	4606      	mov	r6, r0
      for (i=0; i<length; i++)
 8004d6a:	2400      	movs	r4, #0
 8004d6c:	e004      	b.n	8004d78 <cliCmd+0xa4>
          cliPrintf( "addr : 0x%X\t Fail\n", addr+i);
 8004d6e:	4629      	mov	r1, r5
 8004d70:	483e      	ldr	r0, [pc, #248]	@ (8004e6c <cliCmd+0x198>)
 8004d72:	f7fc f8c7 	bl	8000f04 <cliPrintf>
      for (i=0; i<length; i++)
 8004d76:	3401      	adds	r4, #1
 8004d78:	42b4      	cmp	r4, r6
 8004d7a:	d2c2      	bcs.n	8004d02 <cliCmd+0x2e>
        flash_ret = spiFlashRead(addr+i, &data, 1);
 8004d7c:	19e5      	adds	r5, r4, r7
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f20d 1107 	addw	r1, sp, #263	@ 0x107
 8004d84:	4628      	mov	r0, r5
 8004d86:	f7ff fed3 	bl	8004b30 <spiFlashRead>
        if (flash_ret == true)
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d0ef      	beq.n	8004d6e <cliCmd+0x9a>
          cliPrintf( "addr : 0x%X\t 0x%02X\n", addr+i, data);
 8004d8e:	f89d 2107 	ldrb.w	r2, [sp, #263]	@ 0x107
 8004d92:	4629      	mov	r1, r5
 8004d94:	4836      	ldr	r0, [pc, #216]	@ (8004e70 <cliCmd+0x19c>)
 8004d96:	f7fc f8b5 	bl	8000f04 <cliPrintf>
 8004d9a:	e7ec      	b.n	8004d76 <cliCmd+0xa2>
    else if(args->isStr(0, "erase") == true)
 8004d9c:	6963      	ldr	r3, [r4, #20]
 8004d9e:	4935      	ldr	r1, [pc, #212]	@ (8004e74 <cliCmd+0x1a0>)
 8004da0:	2000      	movs	r0, #0
 8004da2:	4798      	blx	r3
 8004da4:	b300      	cbz	r0, 8004de8 <cliCmd+0x114>
      addr   = (uint32_t)args->getData(1);
 8004da6:	68a3      	ldr	r3, [r4, #8]
 8004da8:	2001      	movs	r0, #1
 8004daa:	4798      	blx	r3
 8004dac:	4605      	mov	r5, r0
      length = (uint32_t)args->getData(2);
 8004dae:	68a3      	ldr	r3, [r4, #8]
 8004db0:	2002      	movs	r0, #2
 8004db2:	4798      	blx	r3
 8004db4:	4604      	mov	r4, r0
      pre_time = millis();
 8004db6:	f7fb fea5 	bl	8000b04 <millis>
 8004dba:	4607      	mov	r7, r0
      flash_ret = spiFlashErase(addr, length);
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f7ff ff10 	bl	8004be4 <spiFlashErase>
 8004dc4:	4606      	mov	r6, r0
      cliPrintf( "addr : 0x%X\t len : %d %d ms\n", addr, length, (millis()-pre_time));
 8004dc6:	f7fb fe9d 	bl	8000b04 <millis>
 8004dca:	1bc3      	subs	r3, r0, r7
 8004dcc:	4622      	mov	r2, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	4829      	ldr	r0, [pc, #164]	@ (8004e78 <cliCmd+0x1a4>)
 8004dd2:	f7fc f897 	bl	8000f04 <cliPrintf>
      if (flash_ret)
 8004dd6:	b11e      	cbz	r6, 8004de0 <cliCmd+0x10c>
        cliPrintf("OK\n");
 8004dd8:	4828      	ldr	r0, [pc, #160]	@ (8004e7c <cliCmd+0x1a8>)
 8004dda:	f7fc f893 	bl	8000f04 <cliPrintf>
  if (ret == false)
 8004dde:	e790      	b.n	8004d02 <cliCmd+0x2e>
        cliPrintf("FAIL\n");
 8004de0:	4827      	ldr	r0, [pc, #156]	@ (8004e80 <cliCmd+0x1ac>)
 8004de2:	f7fc f88f 	bl	8000f04 <cliPrintf>
  if (ret == false)
 8004de6:	e78c      	b.n	8004d02 <cliCmd+0x2e>
    else if(args->isStr(0, "write") == true)
 8004de8:	6963      	ldr	r3, [r4, #20]
 8004dea:	4926      	ldr	r1, [pc, #152]	@ (8004e84 <cliCmd+0x1b0>)
 8004dec:	2000      	movs	r0, #0
 8004dee:	4798      	blx	r3
 8004df0:	2800      	cmp	r0, #0
 8004df2:	f43f af77 	beq.w	8004ce4 <cliCmd+0x10>
      addr = (uint32_t)args->getData(1);
 8004df6:	68a3      	ldr	r3, [r4, #8]
 8004df8:	2001      	movs	r0, #1
 8004dfa:	4798      	blx	r3
 8004dfc:	4605      	mov	r5, r0
      flash_data = (uint32_t )args->getData(2);
 8004dfe:	68a3      	ldr	r3, [r4, #8]
 8004e00:	2002      	movs	r0, #2
 8004e02:	4798      	blx	r3
 8004e04:	9001      	str	r0, [sp, #4]
      pre_time = millis();
 8004e06:	f7fb fe7d 	bl	8000b04 <millis>
 8004e0a:	4606      	mov	r6, r0
      flash_ret = spiFlashWrite(addr, (uint8_t *)&flash_data, 4);
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	eb0d 0102 	add.w	r1, sp, r2
 8004e12:	4628      	mov	r0, r5
 8004e14:	f7ff ff09 	bl	8004c2a <spiFlashWrite>
 8004e18:	4604      	mov	r4, r0
      cliPrintf( "addr : 0x%X\t 0x%X %dms\n", addr, flash_data, millis()-pre_time);
 8004e1a:	9f01      	ldr	r7, [sp, #4]
 8004e1c:	f7fb fe72 	bl	8000b04 <millis>
 8004e20:	1b83      	subs	r3, r0, r6
 8004e22:	463a      	mov	r2, r7
 8004e24:	4629      	mov	r1, r5
 8004e26:	4818      	ldr	r0, [pc, #96]	@ (8004e88 <cliCmd+0x1b4>)
 8004e28:	f7fc f86c 	bl	8000f04 <cliPrintf>
      if (flash_ret)
 8004e2c:	b11c      	cbz	r4, 8004e36 <cliCmd+0x162>
        cliPrintf("OK\n");
 8004e2e:	4813      	ldr	r0, [pc, #76]	@ (8004e7c <cliCmd+0x1a8>)
 8004e30:	f7fc f868 	bl	8000f04 <cliPrintf>
 8004e34:	e765      	b.n	8004d02 <cliCmd+0x2e>
        cliPrintf("FAIL\n");
 8004e36:	4812      	ldr	r0, [pc, #72]	@ (8004e80 <cliCmd+0x1ac>)
 8004e38:	f7fc f864 	bl	8000f04 <cliPrintf>
  if (ret == false)
 8004e3c:	e761      	b.n	8004d02 <cliCmd+0x2e>
 8004e3e:	bf00      	nop
 8004e40:	08028e04 	.word	0x08028e04
 8004e44:	08028e14 	.word	0x08028e14
 8004e48:	08028e24 	.word	0x08028e24
 8004e4c:	08028e44 	.word	0x08028e44
 8004e50:	08028e64 	.word	0x08028e64
 8004e54:	080280ec 	.word	0x080280ec
 8004e58:	08028a2c 	.word	0x08028a2c
 8004e5c:	08028a34 	.word	0x08028a34
 8004e60:	080282fc 	.word	0x080282fc
 8004e64:	08028a40 	.word	0x08028a40
 8004e68:	08028214 	.word	0x08028214
 8004e6c:	08028350 	.word	0x08028350
 8004e70:	08028338 	.word	0x08028338
 8004e74:	08028364 	.word	0x08028364
 8004e78:	0802836c 	.word	0x0802836c
 8004e7c:	08028278 	.word	0x08028278
 8004e80:	0802827c 	.word	0x0802827c
 8004e84:	08028258 	.word	0x08028258
 8004e88:	0802838c 	.word	0x0802838c

08004e8c <swtimerInit>:
{
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <swtimerInit+0x3c>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d017      	beq.n	8004ec4 <swtimerInit+0x38>
    return false;  // 이미 한번 실행했다면 정지.
  }


  // 구조체 초기화
  for(i=0; i<_HW_DEF_SW_TIMER_MAX; i++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	e00f      	b.n	8004eb8 <swtimerInit+0x2c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 8004e98:	4a0c      	ldr	r2, [pc, #48]	@ (8004ecc <swtimerInit+0x40>)
 8004e9a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004e9e:	0088      	lsls	r0, r1, #2
 8004ea0:	eb02 0c00 	add.w	ip, r2, r0
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	5411      	strb	r1, [r2, r0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 8004ea8:	f8cc 1004 	str.w	r1, [ip, #4]
    swtimer_tbl[i].Timer_Init = 0;
 8004eac:	f8cc 1008 	str.w	r1, [ip, #8]
    swtimer_tbl[i].TmrFnct    = NULL;
 8004eb0:	4402      	add	r2, r0
 8004eb2:	60d1      	str	r1, [r2, #12]
  for(i=0; i<_HW_DEF_SW_TIMER_MAX; i++)
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b07      	cmp	r3, #7
 8004eba:	d9ed      	bls.n	8004e98 <swtimerInit+0xc>
  }

  excute = 1;
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	4b02      	ldr	r3, [pc, #8]	@ (8004ec8 <swtimerInit+0x3c>)
 8004ec0:	7018      	strb	r0, [r3, #0]

  return true;
 8004ec2:	4770      	bx	lr
    return false;  // 이미 한번 실행했다면 정지.
 8004ec4:	2000      	movs	r0, #0
}
 8004ec6:	4770      	bx	lr
 8004ec8:	2400284d 	.word	0x2400284d
 8004ecc:	24002850 	.word	0x24002850

08004ed0 <swtimerISR>:

void swtimerISR(void)
{
 8004ed0:	b510      	push	{r4, lr}
  uint8_t i;


  sw_timer_counter++;
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <swtimerISR+0x78>)
 8004ed4:	6813      	ldr	r3, [r2, #0]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6013      	str	r3, [r2, #0]


  for (i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++)     // 타이머 갯수만큼
 8004eda:	2400      	movs	r4, #0
 8004edc:	e00b      	b.n	8004ef6 <swtimerISR+0x26>
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME)               // 한번만 실행하는거면
        {
          swtimer_tbl[i].Timer_En = OFF;                        // 타이머 OFF 한다.
        }

        swtimer_tbl[i].Timer_Ctn = swtimer_tbl[i].Timer_Init;   // 타이머 초기화
 8004ede:	4a1b      	ldr	r2, [pc, #108]	@ (8004f4c <swtimerISR+0x7c>)
 8004ee0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8004ee4:	0083      	lsls	r3, r0, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	6898      	ldr	r0, [r3, #8]
 8004eea:	6058      	str	r0, [r3, #4]

        (*swtimer_tbl[i].TmrFnct)(swtimer_tbl[i].TmrFnctArg);   // 함수 실행
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	6918      	ldr	r0, [r3, #16]
 8004ef0:	4790      	blx	r2
  for (i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++)     // 타이머 갯수만큼
 8004ef2:	3401      	adds	r4, #1
 8004ef4:	b2e4      	uxtb	r4, r4
 8004ef6:	2c07      	cmp	r4, #7
 8004ef8:	d825      	bhi.n	8004f46 <swtimerISR+0x76>
 8004efa:	4b15      	ldr	r3, [pc, #84]	@ (8004f50 <swtimerISR+0x80>)
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	429c      	cmp	r4, r3
 8004f02:	d220      	bcs.n	8004f46 <swtimerISR+0x76>
    if ( swtimer_tbl[i].Timer_En == ON)                         // 타이머가 활성화 됬니?
 8004f04:	4621      	mov	r1, r4
 8004f06:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004f0a:	0093      	lsls	r3, r2, #2
 8004f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8004f4c <swtimerISR+0x7c>)
 8004f0e:	5cd3      	ldrb	r3, [r2, r3]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d1ee      	bne.n	8004ef2 <swtimerISR+0x22>
      swtimer_tbl[i].Timer_Ctn--;                               // 타이머값 감소
 8004f14:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004f18:	0093      	lsls	r3, r2, #2
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f4c <swtimerISR+0x7c>)
 8004f1c:	441a      	add	r2, r3
 8004f1e:	6853      	ldr	r3, [r2, #4]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	6053      	str	r3, [r2, #4]
      if (swtimer_tbl[i].Timer_Ctn == 0)                        // 타이머 오버플로어
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e4      	bne.n	8004ef2 <swtimerISR+0x22>
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME)               // 한번만 실행하는거면
 8004f28:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004f2c:	009a      	lsls	r2, r3, #2
 8004f2e:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <swtimerISR+0x7c>)
 8004f30:	4413      	add	r3, r2
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d1d2      	bne.n	8004ede <swtimerISR+0xe>
          swtimer_tbl[i].Timer_En = OFF;                        // 타이머 OFF 한다.
 8004f38:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004f3c:	0093      	lsls	r3, r2, #2
 8004f3e:	4a03      	ldr	r2, [pc, #12]	@ (8004f4c <swtimerISR+0x7c>)
 8004f40:	2000      	movs	r0, #0
 8004f42:	54d0      	strb	r0, [r2, r3]
 8004f44:	e7cb      	b.n	8004ede <swtimerISR+0xe>
      }
    }
  }

}
 8004f46:	bd10      	pop	{r4, pc}
 8004f48:	240028f4 	.word	0x240028f4
 8004f4c:	24002850 	.word	0x24002850
 8004f50:	240028f0 	.word	0x240028f0

08004f54 <swtimerSet>:

void swtimerSet(swtimer_handle_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *),void *arg)
{
  if(TmrNum < 0) return;
 8004f54:	2800      	cmp	r0, #0
 8004f56:	db13      	blt.n	8004f80 <swtimerSet+0x2c>
{
 8004f58:	b410      	push	{r4}

  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;    // 모드설정
 8004f5a:	4c0a      	ldr	r4, [pc, #40]	@ (8004f84 <swtimerSet+0x30>)
 8004f5c:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 8004f60:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8004f64:	f88c 2001 	strb.w	r2, [ip, #1]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8004f68:	f8cc 300c 	str.w	r3, [ip, #12]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8004f6c:	9b01      	ldr	r3, [sp, #4]
 8004f6e:	f8cc 3010 	str.w	r3, [ip, #16]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 8004f72:	f8cc 1004 	str.w	r1, [ip, #4]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 8004f76:	f8cc 1008 	str.w	r1, [ip, #8]
}
 8004f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	24002850 	.word	0x24002850

08004f88 <swtimerStart>:

void swtimerStart(swtimer_handle_t TmrNum)
{
  if(TmrNum < 0) return;
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	db0b      	blt.n	8004fa4 <swtimerStart+0x1c>

  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 8004f8c:	4a06      	ldr	r2, [pc, #24]	@ (8004fa8 <swtimerStart+0x20>)
 8004f8e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f96:	6899      	ldr	r1, [r3, #8]
 8004f98:	6059      	str	r1, [r3, #4]
  swtimer_tbl[TmrNum].Timer_En  = ON;
 8004f9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f802 3020 	strb.w	r3, [r2, r0, lsl #2]
}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	24002850 	.word	0x24002850

08004fac <swtimerGetHandle>:
  swtimer_tbl[TmrNum].Timer_Ctn  = swtimer_tbl[TmrNum].Timer_Init;
}

swtimer_handle_t swtimerGetHandle(void)
{
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 8004fac:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <swtimerGetHandle+0x20>)
 8004fae:	8818      	ldrh	r0, [r3, #0]
 8004fb0:	b200      	sxth	r0, r0

  if (TmrIndex < _HW_DEF_SW_TIMER_MAX)
 8004fb2:	2807      	cmp	r0, #7
 8004fb4:	dc06      	bgt.n	8004fc4 <swtimerGetHandle+0x18>
    sw_timer_handle_index++;
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]
 8004fc2:	4770      	bx	lr
  else
    TmrIndex = -1;
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295

  return TmrIndex;
}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	240028f0 	.word	0x240028f0

08004fd0 <touchInit>:
#define ic_get_info   ak4183GetInfo
#endif


bool touchInit(void)
{
 8004fd0:	b510      	push	{r4, lr}
  bool ret = false;


  ret = ic_init();
 8004fd2:	f000 fe51 	bl	8005c78 <ak4183Init>
  if (ret == true)
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	b170      	cbz	r0, 8004ff8 <touchInit+0x28>
  {
    is_init = true;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4a07      	ldr	r2, [pc, #28]	@ (8004ffc <touchInit+0x2c>)
 8004fde:	7013      	strb	r3, [r2, #0]
    is_enable = true;
 8004fe0:	4a07      	ldr	r2, [pc, #28]	@ (8005000 <touchInit+0x30>)
 8004fe2:	7013      	strb	r3, [r2, #0]
  }


  logPrintf("[%s] touchInit()\n", ret ? "OK":"NG");
 8004fe4:	4907      	ldr	r1, [pc, #28]	@ (8005004 <touchInit+0x34>)
 8004fe6:	4808      	ldr	r0, [pc, #32]	@ (8005008 <touchInit+0x38>)
 8004fe8:	f7fe f9ee 	bl	80033c8 <logPrintf>

  cliAdd("touch", cliCmd);
 8004fec:	4907      	ldr	r1, [pc, #28]	@ (800500c <touchInit+0x3c>)
 8004fee:	4808      	ldr	r0, [pc, #32]	@ (8005010 <touchInit+0x40>)
 8004ff0:	f7fc fa36 	bl	8001460 <cliAdd>

  return ret;
}
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	bd10      	pop	{r4, pc}
  logPrintf("[%s] touchInit()\n", ret ? "OK":"NG");
 8004ff8:	4906      	ldr	r1, [pc, #24]	@ (8005014 <touchInit+0x44>)
 8004ffa:	e7f4      	b.n	8004fe6 <touchInit+0x16>
 8004ffc:	240028f9 	.word	0x240028f9
 8005000:	240028f8 	.word	0x240028f8
 8005004:	08028188 	.word	0x08028188
 8005008:	08028e84 	.word	0x08028e84
 800500c:	08005091 	.word	0x08005091
 8005010:	08028e98 	.word	0x08028e98
 8005014:	0802818c 	.word	0x0802818c

08005018 <touchGetInfo>:
  
  return true;
}

bool touchGetInfo(touch_info_t *p_info)
{
 8005018:	b510      	push	{r4, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	4604      	mov	r4, r0
  bool ret;
  ic_info_t ts_info = {
 800501e:	2300      	movs	r3, #0
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	9302      	str	r3, [sp, #8]
 8005024:	f8ad 300c 	strh.w	r3, [sp, #12]
      .count = 0,
  };

  if (is_init == false) return false;
 8005028:	4b17      	ldr	r3, [pc, #92]	@ (8005088 <touchGetInfo+0x70>)
 800502a:	7818      	ldrb	r0, [r3, #0]
 800502c:	b120      	cbz	r0, 8005038 <touchGetInfo+0x20>
  if (is_enable == false)
 800502e:	4b17      	ldr	r3, [pc, #92]	@ (800508c <touchGetInfo+0x74>)
 8005030:	7818      	ldrb	r0, [r3, #0]
 8005032:	b918      	cbnz	r0, 800503c <touchGetInfo+0x24>
  {
    p_info->count = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	7023      	strb	r3, [r4, #0]
      p_info->point[i].w     = ts_info.point[i].area;
    }
  }

  return ret;
}
 8005038:	b004      	add	sp, #16
 800503a:	bd10      	pop	{r4, pc}
  ret = ic_get_info(&ts_info);
 800503c:	a801      	add	r0, sp, #4
 800503e:	f000 fe5b 	bl	8005cf8 <ak4183GetInfo>
  if (ret == true)
 8005042:	2800      	cmp	r0, #0
 8005044:	d0f8      	beq.n	8005038 <touchGetInfo+0x20>
    p_info->count = ts_info.count;
 8005046:	f89d c005 	ldrb.w	ip, [sp, #5]
 800504a:	f884 c000 	strb.w	ip, [r4]
    for (int i=0; i<ts_info.count; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	459c      	cmp	ip, r3
 8005052:	ddf1      	ble.n	8005038 <touchGetInfo+0x20>
      p_info->point[i].event = ts_info.point[i].event;
 8005054:	aa04      	add	r2, sp, #16
 8005056:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800505a:	f811 ec09 	ldrb.w	lr, [r1, #-9]
 800505e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8005062:	f882 e002 	strb.w	lr, [r2, #2]
      p_info->point[i].id    = ts_info.point[i].id;
 8005066:	f811 ec0a 	ldrb.w	lr, [r1, #-10]
 800506a:	f882 e003 	strb.w	lr, [r2, #3]
      p_info->point[i].x     = ts_info.point[i].x;
 800506e:	f931 ec08 	ldrsh.w	lr, [r1, #-8]
 8005072:	f8a2 e004 	strh.w	lr, [r2, #4]
      p_info->point[i].y     = ts_info.point[i].y;
 8005076:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 800507a:	f8a2 e006 	strh.w	lr, [r2, #6]
      p_info->point[i].w     = ts_info.point[i].area;
 800507e:	f811 1c03 	ldrb.w	r1, [r1, #-3]
 8005082:	8111      	strh	r1, [r2, #8]
    for (int i=0; i<ts_info.count; i++)
 8005084:	3301      	adds	r3, #1
 8005086:	e7e3      	b.n	8005050 <touchGetInfo+0x38>
 8005088:	240028f9 	.word	0x240028f9
 800508c:	240028f8 	.word	0x240028f8

08005090 <cliCmd>:
{
  return is_enable;
}

void cliCmd(cli_args_t *args)
{
 8005090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005094:	b098      	sub	sp, #96	@ 0x60
 8005096:	4605      	mov	r5, r0
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info"))
 8005098:	8803      	ldrh	r3, [r0, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d00c      	beq.n	80050b8 <cliCmd+0x28>
  bool ret = false;
 800509e:	2400      	movs	r4, #0
    cliPrintf("touch width  : %d\n", touch_width);
    cliPrintf("touch height : %d\n", touch_height);
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "get") && args->isStr(1, "info"))
 80050a0:	882b      	ldrh	r3, [r5, #0]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d027      	beq.n	80050f6 <cliCmd+0x66>
      delay(10);
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "gui"))
 80050a6:	882b      	ldrh	r3, [r5, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d06a      	beq.n	8005182 <cliCmd+0xf2>

    cliGui()->closeScreen();    
    ret = true;
  }

  if (ret == false)
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	f000 812b 	beq.w	8005308 <cliCmd+0x278>
  {
    cliPrintf("touch info\n");
    cliPrintf("touch get info\n");
    cliPrintf("touch gui\n");
  }
}
 80050b2:	b018      	add	sp, #96	@ 0x60
 80050b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 80050b8:	6943      	ldr	r3, [r0, #20]
 80050ba:	4998      	ldr	r1, [pc, #608]	@ (800531c <cliCmd+0x28c>)
 80050bc:	2000      	movs	r0, #0
 80050be:	4798      	blx	r3
 80050c0:	4604      	mov	r4, r0
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d0ec      	beq.n	80050a0 <cliCmd+0x10>
    cliPrintf("is_init      : %s\n", is_init ? "True" : "False");
 80050c6:	4b96      	ldr	r3, [pc, #600]	@ (8005320 <cliCmd+0x290>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	b193      	cbz	r3, 80050f2 <cliCmd+0x62>
 80050cc:	4995      	ldr	r1, [pc, #596]	@ (8005324 <cliCmd+0x294>)
 80050ce:	4896      	ldr	r0, [pc, #600]	@ (8005328 <cliCmd+0x298>)
 80050d0:	f7fb ff18 	bl	8000f04 <cliPrintf>
    cliPrintf("touch max ch : %d\n", TOUCH_MAX_CH);
 80050d4:	2105      	movs	r1, #5
 80050d6:	4895      	ldr	r0, [pc, #596]	@ (800532c <cliCmd+0x29c>)
 80050d8:	f7fb ff14 	bl	8000f04 <cliPrintf>
    cliPrintf("touch width  : %d\n", touch_width);
 80050dc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80050e0:	4893      	ldr	r0, [pc, #588]	@ (8005330 <cliCmd+0x2a0>)
 80050e2:	f7fb ff0f 	bl	8000f04 <cliPrintf>
    cliPrintf("touch height : %d\n", touch_height);
 80050e6:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80050ea:	4892      	ldr	r0, [pc, #584]	@ (8005334 <cliCmd+0x2a4>)
 80050ec:	f7fb ff0a 	bl	8000f04 <cliPrintf>
    ret = true;
 80050f0:	e7d6      	b.n	80050a0 <cliCmd+0x10>
    cliPrintf("is_init      : %s\n", is_init ? "True" : "False");
 80050f2:	4991      	ldr	r1, [pc, #580]	@ (8005338 <cliCmd+0x2a8>)
 80050f4:	e7eb      	b.n	80050ce <cliCmd+0x3e>
  if (args->argc == 2 && args->isStr(0, "get") && args->isStr(1, "info"))
 80050f6:	696b      	ldr	r3, [r5, #20]
 80050f8:	4990      	ldr	r1, [pc, #576]	@ (800533c <cliCmd+0x2ac>)
 80050fa:	2000      	movs	r0, #0
 80050fc:	4798      	blx	r3
 80050fe:	2800      	cmp	r0, #0
 8005100:	d0d1      	beq.n	80050a6 <cliCmd+0x16>
 8005102:	696b      	ldr	r3, [r5, #20]
 8005104:	4985      	ldr	r1, [pc, #532]	@ (800531c <cliCmd+0x28c>)
 8005106:	2001      	movs	r0, #1
 8005108:	4798      	blx	r3
 800510a:	4606      	mov	r6, r0
 800510c:	bb00      	cbnz	r0, 8005150 <cliCmd+0xc0>
 800510e:	e7ca      	b.n	80050a6 <cliCmd+0x16>
          cliPrintf(" - ");
 8005110:	488b      	ldr	r0, [pc, #556]	@ (8005340 <cliCmd+0x2b0>)
 8005112:	f7fb fef7 	bl	8000f04 <cliPrintf>
            info.point[i].id,      
 8005116:	ab18      	add	r3, sp, #96	@ 0x60
 8005118:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
            info.point[i].y, 
 800511c:	f931 3c26 	ldrsh.w	r3, [r1, #-38]
            info.point[i].w 
 8005120:	f931 2c24 	ldrsh.w	r2, [r1, #-36]
          cliPrintf("id=%d evt=%2d x=%3d y=%3d w=%3d ", 
 8005124:	9201      	str	r2, [sp, #4]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 800512c:	f811 2c2a 	ldrb.w	r2, [r1, #-42]
 8005130:	f811 1c29 	ldrb.w	r1, [r1, #-41]
 8005134:	4883      	ldr	r0, [pc, #524]	@ (8005344 <cliCmd+0x2b4>)
 8005136:	f7fb fee5 	bl	8000f04 <cliPrintf>
        for (int i=0; i<info.count; i++)
 800513a:	3401      	adds	r4, #1
 800513c:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8005140:	42a3      	cmp	r3, r4
 8005142:	dce5      	bgt.n	8005110 <cliCmd+0x80>
        cliPrintf("\n");
 8005144:	4880      	ldr	r0, [pc, #512]	@ (8005348 <cliCmd+0x2b8>)
 8005146:	f7fb fedd 	bl	8000f04 <cliPrintf>
      delay(10);
 800514a:	200a      	movs	r0, #10
 800514c:	f7fb fcd6 	bl	8000afc <delay>
    while(cliKeepLoop())
 8005150:	f7fc f97a 	bl	8001448 <cliKeepLoop>
 8005154:	b198      	cbz	r0, 800517e <cliCmd+0xee>
      pre_time = millis();
 8005156:	f7fb fcd5 	bl	8000b04 <millis>
 800515a:	4604      	mov	r4, r0
      if (touchGetInfo(&info) == true)
 800515c:	a80d      	add	r0, sp, #52	@ 0x34
 800515e:	f7ff ff5b 	bl	8005018 <touchGetInfo>
 8005162:	b148      	cbz	r0, 8005178 <cliCmd+0xe8>
        exe_time = millis()-pre_time;
 8005164:	f7fb fcce 	bl	8000b04 <millis>
        cliPrintf("cnt : %d %3dms, ", info.count, exe_time);
 8005168:	1b02      	subs	r2, r0, r4
 800516a:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800516e:	4877      	ldr	r0, [pc, #476]	@ (800534c <cliCmd+0x2bc>)
 8005170:	f7fb fec8 	bl	8000f04 <cliPrintf>
        for (int i=0; i<info.count; i++)
 8005174:	2400      	movs	r4, #0
 8005176:	e7e1      	b.n	800513c <cliCmd+0xac>
        cliPrintf("touchGetInfo() Fail\n");
 8005178:	4875      	ldr	r0, [pc, #468]	@ (8005350 <cliCmd+0x2c0>)
 800517a:	f7fb fec3 	bl	8000f04 <cliPrintf>
    ret = true;
 800517e:	4634      	mov	r4, r6
 8005180:	e791      	b.n	80050a6 <cliCmd+0x16>
  if (args->argc == 1 && args->isStr(0, "gui"))
 8005182:	696b      	ldr	r3, [r5, #20]
 8005184:	4973      	ldr	r1, [pc, #460]	@ (8005354 <cliCmd+0x2c4>)
 8005186:	2000      	movs	r0, #0
 8005188:	4798      	blx	r3
 800518a:	2800      	cmp	r0, #0
 800518c:	d08e      	beq.n	80050ac <cliCmd+0x1c>
    info.count = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	f88d 3008 	strb.w	r3, [sp, #8]
    info_pre.count = 0;
 8005194:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
    cliGui()->initScreen(80, 24);
 8005198:	f7fc fbbc 	bl	8001914 <cliGui>
 800519c:	6803      	ldr	r3, [r0, #0]
 800519e:	2118      	movs	r1, #24
 80051a0:	2050      	movs	r0, #80	@ 0x50
 80051a2:	4798      	blx	r3
    while(cliKeepLoop())
 80051a4:	e097      	b.n	80052d6 <cliCmd+0x246>
            x = info_pre.point[i].x/10;
 80051a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005358 <cliCmd+0x2c8>)
 80051a8:	fb82 0103 	smull	r0, r1, r2, r3
 80051ac:	17dd      	asrs	r5, r3, #31
 80051ae:	ebc5 05a1 	rsb	r5, r5, r1, asr #2
 80051b2:	b22d      	sxth	r5, r5
            y = info_pre.point[i].y/20;          
 80051b4:	ab18      	add	r3, sp, #96	@ 0x60
 80051b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80051ba:	f933 4c26 	ldrsh.w	r4, [r3, #-38]
 80051be:	fb82 3204 	smull	r3, r2, r2, r4
 80051c2:	17e4      	asrs	r4, r4, #31
 80051c4:	ebc4 04e2 	rsb	r4, r4, r2, asr #3
 80051c8:	b224      	sxth	r4, r4
            cliGui()->eraseBox(x, y, 6, 3);
 80051ca:	f7fc fba3 	bl	8001914 <cliGui>
 80051ce:	6e07      	ldr	r7, [r0, #96]	@ 0x60
 80051d0:	b2ed      	uxtb	r5, r5
 80051d2:	b2e4      	uxtb	r4, r4
 80051d4:	2303      	movs	r3, #3
 80051d6:	2206      	movs	r2, #6
 80051d8:	4621      	mov	r1, r4
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
            cliGui()->movePrintf(x+2, y+1, " ");
 80051de:	f7fc fb99 	bl	8001914 <cliGui>
 80051e2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80051e4:	1c61      	adds	r1, r4, #1
 80051e6:	1ca8      	adds	r0, r5, #2
 80051e8:	4a5c      	ldr	r2, [pc, #368]	@ (800535c <cliCmd+0x2cc>)
 80051ea:	b2c9      	uxtb	r1, r1
 80051ec:	b2c0      	uxtb	r0, r0
 80051ee:	4798      	blx	r3
            cliGui()->movePrintf(x, y+3, "       ");
 80051f0:	f7fc fb90 	bl	8001914 <cliGui>
 80051f4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80051f6:	1ce1      	adds	r1, r4, #3
 80051f8:	4a59      	ldr	r2, [pc, #356]	@ (8005360 <cliCmd+0x2d0>)
 80051fa:	b2c9      	uxtb	r1, r1
 80051fc:	4628      	mov	r0, r5
 80051fe:	4798      	blx	r3
        for (int i=0; i<info_pre.count; i++)
 8005200:	3601      	adds	r6, #1
 8005202:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
 8005206:	42b2      	cmp	r2, r6
 8005208:	dd16      	ble.n	8005238 <cliCmd+0x1a8>
          if (info.point[i].x != info_pre.point[i].x || 
 800520a:	ab18      	add	r3, sp, #96	@ 0x60
 800520c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005210:	f933 1c54 	ldrsh.w	r1, [r3, #-84]
 8005214:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8005218:	4299      	cmp	r1, r3
 800521a:	d1c4      	bne.n	80051a6 <cliCmd+0x116>
              info.point[i].y != info_pre.point[i].y ||
 800521c:	a918      	add	r1, sp, #96	@ 0x60
 800521e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005222:	f931 0c52 	ldrsh.w	r0, [r1, #-82]
 8005226:	f931 1c26 	ldrsh.w	r1, [r1, #-38]
          if (info.point[i].x != info_pre.point[i].x || 
 800522a:	4288      	cmp	r0, r1
 800522c:	d1bb      	bne.n	80051a6 <cliCmd+0x116>
              info.count != info_pre.count)
 800522e:	f89d 1008 	ldrb.w	r1, [sp, #8]
              info.point[i].y != info_pre.point[i].y ||
 8005232:	4291      	cmp	r1, r2
 8005234:	d1b7      	bne.n	80051a6 <cliCmd+0x116>
 8005236:	e7e3      	b.n	8005200 <cliCmd+0x170>
        for (int i=0; i<info.count; i++)
 8005238:	2600      	movs	r6, #0
 800523a:	e03b      	b.n	80052b4 <cliCmd+0x224>
          x = info.point[i].x/10;
 800523c:	ab18      	add	r3, sp, #96	@ 0x60
 800523e:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
 8005242:	f935 3c54 	ldrsh.w	r3, [r5, #-84]
 8005246:	4a44      	ldr	r2, [pc, #272]	@ (8005358 <cliCmd+0x2c8>)
 8005248:	fb82 0103 	smull	r0, r1, r2, r3
 800524c:	17db      	asrs	r3, r3, #31
 800524e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8005252:	b21f      	sxth	r7, r3
          y = info.point[i].y/20;
 8005254:	f935 4c52 	ldrsh.w	r4, [r5, #-82]
 8005258:	fb82 3204 	smull	r3, r2, r2, r4
 800525c:	17e4      	asrs	r4, r4, #31
 800525e:	ebc4 04e2 	rsb	r4, r4, r2, asr #3
 8005262:	b224      	sxth	r4, r4
          cliGui()->drawBox(x, y, 6, 3, "");
 8005264:	f7fc fb56 	bl	8001914 <cliGui>
 8005268:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
 800526c:	b2ff      	uxtb	r7, r7
 800526e:	b2e4      	uxtb	r4, r4
 8005270:	4b3c      	ldr	r3, [pc, #240]	@ (8005364 <cliCmd+0x2d4>)
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2303      	movs	r3, #3
 8005276:	2206      	movs	r2, #6
 8005278:	4621      	mov	r1, r4
 800527a:	4638      	mov	r0, r7
 800527c:	47c0      	blx	r8
          cliGui()->movePrintf(x+2, y+1, "%d", info.point[i].id);
 800527e:	f7fc fb49 	bl	8001914 <cliGui>
 8005282:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 8005286:	1c61      	adds	r1, r4, #1
 8005288:	1cb8      	adds	r0, r7, #2
 800528a:	f815 3c55 	ldrb.w	r3, [r5, #-85]
 800528e:	4a36      	ldr	r2, [pc, #216]	@ (8005368 <cliCmd+0x2d8>)
 8005290:	b2c9      	uxtb	r1, r1
 8005292:	b2c0      	uxtb	r0, r0
 8005294:	47c0      	blx	r8
          cliGui()->movePrintf(x, y+3, "%3d:%3d", info.point[i].x, info.point[i].y);
 8005296:	f7fc fb3d 	bl	8001914 <cliGui>
 800529a:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 800529e:	f935 3c52 	ldrsh.w	r3, [r5, #-82]
 80052a2:	1ce1      	adds	r1, r4, #3
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	f935 3c54 	ldrsh.w	r3, [r5, #-84]
 80052aa:	4a30      	ldr	r2, [pc, #192]	@ (800536c <cliCmd+0x2dc>)
 80052ac:	b2c9      	uxtb	r1, r1
 80052ae:	4638      	mov	r0, r7
 80052b0:	47c0      	blx	r8
        for (int i=0; i<info.count; i++)
 80052b2:	3601      	adds	r6, #1
 80052b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80052b8:	42b3      	cmp	r3, r6
 80052ba:	dcbf      	bgt.n	800523c <cliCmd+0x1ac>
        info_pre = info;
 80052bc:	ac0d      	add	r4, sp, #52	@ 0x34
 80052be:	ad02      	add	r5, sp, #8
 80052c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052cc:	c403      	stmia	r4!, {r0, r1}
 80052ce:	8022      	strh	r2, [r4, #0]
      delay(10);
 80052d0:	200a      	movs	r0, #10
 80052d2:	f7fb fc13 	bl	8000afc <delay>
    while(cliKeepLoop())
 80052d6:	f7fc f8b7 	bl	8001448 <cliKeepLoop>
 80052da:	b180      	cbz	r0, 80052fe <cliCmd+0x26e>
      cliGui()->drawBox(0, 0, touch_width/10 + 1, touch_height/20 + 1, "");
 80052dc:	f7fc fb1a 	bl	8001914 <cliGui>
 80052e0:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 80052e2:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <cliCmd+0x2d4>)
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	2319      	movs	r3, #25
 80052e8:	2251      	movs	r2, #81	@ 0x51
 80052ea:	2100      	movs	r1, #0
 80052ec:	4608      	mov	r0, r1
 80052ee:	47a0      	blx	r4
      if (touchGetInfo(&info) == true)
 80052f0:	a802      	add	r0, sp, #8
 80052f2:	f7ff fe91 	bl	8005018 <touchGetInfo>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d0ea      	beq.n	80052d0 <cliCmd+0x240>
        for (int i=0; i<info_pre.count; i++)
 80052fa:	2600      	movs	r6, #0
 80052fc:	e781      	b.n	8005202 <cliCmd+0x172>
    cliGui()->closeScreen();    
 80052fe:	f7fc fb09 	bl	8001914 <cliGui>
 8005302:	6843      	ldr	r3, [r0, #4]
 8005304:	4798      	blx	r3
  if (ret == false)
 8005306:	e6d4      	b.n	80050b2 <cliCmd+0x22>
    cliPrintf("touch info\n");
 8005308:	4819      	ldr	r0, [pc, #100]	@ (8005370 <cliCmd+0x2e0>)
 800530a:	f7fb fdfb 	bl	8000f04 <cliPrintf>
    cliPrintf("touch get info\n");
 800530e:	4819      	ldr	r0, [pc, #100]	@ (8005374 <cliCmd+0x2e4>)
 8005310:	f7fb fdf8 	bl	8000f04 <cliPrintf>
    cliPrintf("touch gui\n");
 8005314:	4818      	ldr	r0, [pc, #96]	@ (8005378 <cliCmd+0x2e8>)
 8005316:	f7fb fdf5 	bl	8000f04 <cliPrintf>
}
 800531a:	e6ca      	b.n	80050b2 <cliCmd+0x22>
 800531c:	080280ec 	.word	0x080280ec
 8005320:	240028f9 	.word	0x240028f9
 8005324:	08028904 	.word	0x08028904
 8005328:	08028ea0 	.word	0x08028ea0
 800532c:	08028eb4 	.word	0x08028eb4
 8005330:	08028ec8 	.word	0x08028ec8
 8005334:	08028edc 	.word	0x08028edc
 8005338:	0802890c 	.word	0x0802890c
 800533c:	08028824 	.word	0x08028824
 8005340:	08028f04 	.word	0x08028f04
 8005344:	08028f08 	.word	0x08028f08
 8005348:	0802921c 	.word	0x0802921c
 800534c:	08028ef0 	.word	0x08028ef0
 8005350:	08028f2c 	.word	0x08028f2c
 8005354:	08028f44 	.word	0x08028f44
 8005358:	66666667 	.word	0x66666667
 800535c:	08028030 	.word	0x08028030
 8005360:	08028f48 	.word	0x08028f48
 8005364:	08028cd0 	.word	0x08028cd0
 8005368:	0802810c 	.word	0x0802810c
 800536c:	08028f50 	.word	0x08028f50
 8005370:	08028f58 	.word	0x08028f58
 8005374:	08028f64 	.word	0x08028f64
 8005378:	08028f74 	.word	0x08028f74

0800537c <uartInit>:
    {"USART1 SWD   ", USART1, &huart1, &hdma_usart1_rx, NULL, false},
    {"USART2 MAIN  ", USART2, &huart2, &hdma_usart2_rx, NULL, false},
  };

bool uartInit(void)
{
 800537c:	b510      	push	{r4, lr}
  for (int i=0; i<UART_MAX_CH; i++)
 800537e:	2300      	movs	r3, #0
 8005380:	e00f      	b.n	80053a2 <uartInit+0x26>
  {
    uart_tbl[i].is_open = false;
 8005382:	4c0d      	ldr	r4, [pc, #52]	@ (80053b8 <uartInit+0x3c>)
 8005384:	f240 422c 	movw	r2, #1068	@ 0x42c
 8005388:	fb03 f202 	mul.w	r2, r3, r2
 800538c:	18a1      	adds	r1, r4, r2
 800538e:	2000      	movs	r0, #0
 8005390:	54a0      	strb	r0, [r4, r2]
    uart_tbl[i].baud = 57600;
 8005392:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005396:	604a      	str	r2, [r1, #4]
    uart_tbl[i].rx_cnt = 0;
 8005398:	f8c1 0424 	str.w	r0, [r1, #1060]	@ 0x424
    uart_tbl[i].tx_cnt = 0;    
 800539c:	f8c1 0428 	str.w	r0, [r1, #1064]	@ 0x428
  for (int i=0; i<UART_MAX_CH; i++)
 80053a0:	3301      	adds	r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	dded      	ble.n	8005382 <uartInit+0x6>
  }

  is_init = true;
 80053a6:	2401      	movs	r4, #1
 80053a8:	4b04      	ldr	r3, [pc, #16]	@ (80053bc <uartInit+0x40>)
 80053aa:	701c      	strb	r4, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("uart", cliUart);
 80053ac:	4904      	ldr	r1, [pc, #16]	@ (80053c0 <uartInit+0x44>)
 80053ae:	4805      	ldr	r0, [pc, #20]	@ (80053c4 <uartInit+0x48>)
 80053b0:	f7fc f856 	bl	8001460 <cliAdd>
#endif

  return true;
}
 80053b4:	4620      	mov	r0, r4
 80053b6:	bd10      	pop	{r4, pc}
 80053b8:	38000000 	.word	0x38000000
 80053bc:	240028fa 	.word	0x240028fa
 80053c0:	08005655 	.word	0x08005655
 80053c4:	08028f80 	.word	0x08028f80

080053c8 <uartOpen>:
{
  bool ret = false;
  HAL_StatusTypeDef ret_hal;


  if (ch >= UART_MAX_CH) return false;
 80053c8:	2801      	cmp	r0, #1
 80053ca:	f200 80af 	bhi.w	800552c <uartOpen+0x164>
{
 80053ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d0:	b083      	sub	sp, #12
 80053d2:	4604      	mov	r4, r0

  if (uart_tbl[ch].is_open == true && uart_tbl[ch].baud == baud)
 80053d4:	f240 432c 	movw	r3, #1068	@ 0x42c
 80053d8:	fb00 f303 	mul.w	r3, r0, r3
 80053dc:	4a54      	ldr	r2, [pc, #336]	@ (8005530 <uartOpen+0x168>)
 80053de:	5cd0      	ldrb	r0, [r2, r3]
 80053e0:	b138      	cbz	r0, 80053f2 <uartOpen+0x2a>
 80053e2:	4613      	mov	r3, r2
 80053e4:	f240 422c 	movw	r2, #1068	@ 0x42c
 80053e8:	fb02 3304 	mla	r3, r2, r4, r3
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	428b      	cmp	r3, r1
 80053f0:	d00e      	beq.n	8005410 <uartOpen+0x48>
  {
    return true;
  }


  switch(ch)
 80053f2:	2c01      	cmp	r4, #1
 80053f4:	d90e      	bls.n	8005414 <uartOpen+0x4c>
 80053f6:	2c02      	cmp	r4, #2
 80053f8:	d109      	bne.n	800540e <uartOpen+0x46>
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
      }
      break;

    case _DEF_UART3:
      uart_tbl[ch].baud    = baud;
 80053fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005530 <uartOpen+0x168>)
 80053fc:	f240 422c 	movw	r2, #1068	@ 0x42c
 8005400:	fb02 f404 	mul.w	r4, r2, r4
 8005404:	191a      	adds	r2, r3, r4
 8005406:	6051      	str	r1, [r2, #4]
      uart_tbl[ch].is_open = true;
 8005408:	2001      	movs	r0, #1
 800540a:	5518      	strb	r0, [r3, r4]
      ret = true;
      break;      
 800540c:	e000      	b.n	8005410 <uartOpen+0x48>
  switch(ch)
 800540e:	2000      	movs	r0, #0
  }

  return ret;
}
 8005410:	b003      	add	sp, #12
 8005412:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uart_tbl[ch].baud      = baud;
 8005414:	4846      	ldr	r0, [pc, #280]	@ (8005530 <uartOpen+0x168>)
 8005416:	f240 432c 	movw	r3, #1068	@ 0x42c
 800541a:	fb04 f303 	mul.w	r3, r4, r3
 800541e:	18c5      	adds	r5, r0, r3
 8005420:	6069      	str	r1, [r5, #4]
      uart_tbl[ch].p_huart   = uart_hw_tbl[ch].p_huart;
 8005422:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005426:	4e43      	ldr	r6, [pc, #268]	@ (8005534 <uartOpen+0x16c>)
 8005428:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 800542c:	68b2      	ldr	r2, [r6, #8]
 800542e:	f8c5 241c 	str.w	r2, [r5, #1052]	@ 0x41c
      uart_tbl[ch].p_hdma_rx = uart_hw_tbl[ch].p_hdma_rx;
 8005432:	68f7      	ldr	r7, [r6, #12]
 8005434:	f8c5 7420 	str.w	r7, [r5, #1056]	@ 0x420
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;    
 8005438:	6877      	ldr	r7, [r6, #4]
 800543a:	6017      	str	r7, [r2, #0]
      uart_tbl[ch].p_huart->Init.BaudRate       = baud;
 800543c:	f8d5 241c 	ldr.w	r2, [r5, #1052]	@ 0x41c
 8005440:	6051      	str	r1, [r2, #4]
      uart_tbl[ch].p_huart->Init.WordLength     = UART_WORDLENGTH_8B;
 8005442:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 8005446:	2200      	movs	r2, #0
 8005448:	608a      	str	r2, [r1, #8]
      uart_tbl[ch].p_huart->Init.StopBits       = UART_STOPBITS_1;
 800544a:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 800544e:	60ca      	str	r2, [r1, #12]
      uart_tbl[ch].p_huart->Init.Parity         = UART_PARITY_NONE;
 8005450:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 8005454:	610a      	str	r2, [r1, #16]
      uart_tbl[ch].p_huart->Init.Mode           = UART_MODE_TX_RX;
 8005456:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 800545a:	270c      	movs	r7, #12
 800545c:	614f      	str	r7, [r1, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 800545e:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 8005462:	618a      	str	r2, [r1, #24]
      uart_tbl[ch].p_huart->Init.OverSampling   = UART_OVERSAMPLING_16;
 8005464:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 8005468:	61ca      	str	r2, [r1, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800546a:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 800546e:	620a      	str	r2, [r1, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005470:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 8005474:	624a      	str	r2, [r1, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005476:	f8d5 141c 	ldr.w	r1, [r5, #1052]	@ 0x41c
 800547a:	628a      	str	r2, [r1, #40]	@ 0x28
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 800547c:	f103 0708 	add.w	r7, r3, #8
 8005480:	4407      	add	r7, r0
 8005482:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005486:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800548a:	4639      	mov	r1, r7
 800548c:	4418      	add	r0, r3
 800548e:	f7fb fb3d 	bl	8000b0c <qbufferCreate>
      __HAL_RCC_DMA1_CLK_ENABLE();
 8005492:	4b29      	ldr	r3, [pc, #164]	@ (8005538 <uartOpen+0x170>)
 8005494:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80054a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	9b01      	ldr	r3, [sp, #4]
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 80054ac:	f8d5 041c 	ldr.w	r0, [r5, #1052]	@ 0x41c
 80054b0:	f009 ffa8 	bl	800f404 <HAL_UART_DeInit>
      if (uart_hw_tbl[ch].is_rs485 == true)
 80054b4:	7d33      	ldrb	r3, [r6, #20]
 80054b6:	b14b      	cbz	r3, 80054cc <uartOpen+0x104>
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 80054b8:	2300      	movs	r3, #0
 80054ba:	461a      	mov	r2, r3
 80054bc:	4619      	mov	r1, r3
 80054be:	f8d5 041c 	ldr.w	r0, [r5, #1052]	@ 0x41c
 80054c2:	f00a fe03 	bl	80100cc <HAL_RS485Ex_Init>
      if (ret_hal == HAL_OK)
 80054c6:	b158      	cbz	r0, 80054e0 <uartOpen+0x118>
  bool ret = false;
 80054c8:	2000      	movs	r0, #0
 80054ca:	e7a1      	b.n	8005410 <uartOpen+0x48>
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 80054cc:	4b18      	ldr	r3, [pc, #96]	@ (8005530 <uartOpen+0x168>)
 80054ce:	f240 422c 	movw	r2, #1068	@ 0x42c
 80054d2:	fb02 3304 	mla	r3, r2, r4, r3
 80054d6:	f8d3 041c 	ldr.w	r0, [r3, #1052]	@ 0x41c
 80054da:	f00a fd20 	bl	800ff1e <HAL_UART_Init>
 80054de:	e7f2      	b.n	80054c6 <uartOpen+0xfe>
        uart_tbl[ch].is_open = true;
 80054e0:	4a13      	ldr	r2, [pc, #76]	@ (8005530 <uartOpen+0x168>)
 80054e2:	f240 432c 	movw	r3, #1068	@ 0x42c
 80054e6:	fb04 f303 	mul.w	r3, r4, r3
 80054ea:	18d0      	adds	r0, r2, r3
 80054ec:	2101      	movs	r1, #1
 80054ee:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 80054f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054f4:	4639      	mov	r1, r7
 80054f6:	f8d0 041c 	ldr.w	r0, [r0, #1052]	@ 0x41c
 80054fa:	f00a fd9b 	bl	8010034 <HAL_UART_Receive_DMA>
 80054fe:	b998      	cbnz	r0, 8005528 <uartOpen+0x160>
        ret = true;
 8005500:	2001      	movs	r0, #1
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Stream_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->NDTR;
 8005502:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <uartOpen+0x168>)
 8005504:	f240 422c 	movw	r2, #1068	@ 0x42c
 8005508:	fb02 3304 	mla	r3, r2, r4, r3
 800550c:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 8005510:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8005514:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 8005518:	6809      	ldr	r1, [r1, #0]
 800551a:	6849      	ldr	r1, [r1, #4]
 800551c:	1a52      	subs	r2, r2, r1
 800551e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8005522:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
 8005526:	e773      	b.n	8005410 <uartOpen+0x48>
          ret = false;
 8005528:	2000      	movs	r0, #0
 800552a:	e7ea      	b.n	8005502 <uartOpen+0x13a>
  if (ch >= UART_MAX_CH) return false;
 800552c:	2000      	movs	r0, #0
}
 800552e:	4770      	bx	lr
 8005530:	38000000 	.word	0x38000000
 8005534:	08029030 	.word	0x08029030
 8005538:	58024400 	.word	0x58024400

0800553c <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;


  switch(ch)
 800553c:	2801      	cmp	r0, #1
 800553e:	d901      	bls.n	8005544 <uartAvailable+0x8>
  uint32_t ret = 0;
 8005540:	2000      	movs	r0, #0
      #endif
      break;      
  }

  return ret;
}
 8005542:	4770      	bx	lr
{
 8005544:	b510      	push	{r4, lr}
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Stream_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->NDTR);
 8005546:	490a      	ldr	r1, [pc, #40]	@ (8005570 <uartAvailable+0x34>)
 8005548:	f240 432c 	movw	r3, #1068	@ 0x42c
 800554c:	fb03 f000 	mul.w	r0, r3, r0
 8005550:	180b      	adds	r3, r1, r0
 8005552:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 8005556:	f8d3 4420 	ldr.w	r4, [r3, #1056]	@ 0x420
 800555a:	6824      	ldr	r4, [r4, #0]
 800555c:	6864      	ldr	r4, [r4, #4]
 800555e:	1b12      	subs	r2, r2, r4
 8005560:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);      
 8005564:	f500 6081 	add.w	r0, r0, #1032	@ 0x408
 8005568:	4408      	add	r0, r1
 800556a:	f7fb fb05 	bl	8000b78 <qbufferAvailable>
}
 800556e:	bd10      	pop	{r4, pc}
 8005570:	38000000 	.word	0x38000000

08005574 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8005574:	b510      	push	{r4, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	4604      	mov	r4, r0
  uint8_t ret = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	f88d 3007 	strb.w	r3, [sp, #7]


  switch(ch)
 8005580:	2801      	cmp	r0, #1
 8005582:	d90d      	bls.n	80055a0 <uartRead+0x2c>
      #ifdef _USE_HW_USB
      ret = cdcRead();
      #endif
      break;      
  }
  uart_tbl[ch].rx_cnt++;
 8005584:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <uartRead+0x48>)
 8005586:	f240 422c 	movw	r2, #1068	@ 0x42c
 800558a:	fb02 3304 	mla	r3, r2, r4, r3
 800558e:	f8d3 2424 	ldr.w	r2, [r3, #1060]	@ 0x424
 8005592:	3201      	adds	r2, #1
 8005594:	f8c3 2424 	str.w	r2, [r3, #1060]	@ 0x424

  return ret;
}
 8005598:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800559c:	b002      	add	sp, #8
 800559e:	bd10      	pop	{r4, pc}
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 80055a0:	f240 432c 	movw	r3, #1068	@ 0x42c
 80055a4:	fb00 f303 	mul.w	r3, r0, r3
 80055a8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80055ac:	2201      	movs	r2, #1
 80055ae:	f10d 0107 	add.w	r1, sp, #7
 80055b2:	4802      	ldr	r0, [pc, #8]	@ (80055bc <uartRead+0x48>)
 80055b4:	4418      	add	r0, r3
 80055b6:	f7fb fab2 	bl	8000b1e <qbufferRead>
      break;
 80055ba:	e7e3      	b.n	8005584 <uartRead+0x10>
 80055bc:	38000000 	.word	0x38000000

080055c0 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4605      	mov	r5, r0
  uint32_t ret = 0;


  switch(ch)
 80055c4:	2801      	cmp	r0, #1
 80055c6:	d90b      	bls.n	80055e0 <uartWrite+0x20>
  uint32_t ret = 0;
 80055c8:	2000      	movs	r0, #0
      #ifdef _USE_HW_USB
      ret = cdcWrite(p_data, length);
      #endif
      break;      
  }
  uart_tbl[ch].tx_cnt += ret;
 80055ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <uartWrite+0x44>)
 80055cc:	f240 422c 	movw	r2, #1068	@ 0x42c
 80055d0:	fb02 3305 	mla	r3, r2, r5, r3
 80055d4:	f8d3 2428 	ldr.w	r2, [r3, #1064]	@ 0x428
 80055d8:	4402      	add	r2, r0
 80055da:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428

  return ret;
}
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	4614      	mov	r4, r2
      if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 80055e2:	4808      	ldr	r0, [pc, #32]	@ (8005604 <uartWrite+0x44>)
 80055e4:	f240 432c 	movw	r3, #1068	@ 0x42c
 80055e8:	fb03 0005 	mla	r0, r3, r5, r0
 80055ec:	2364      	movs	r3, #100	@ 0x64
 80055ee:	b292      	uxth	r2, r2
 80055f0:	f8d0 041c 	ldr.w	r0, [r0, #1052]	@ 0x41c
 80055f4:	f00a fbc6 	bl	800fd84 <HAL_UART_Transmit>
 80055f8:	b108      	cbz	r0, 80055fe <uartWrite+0x3e>
  uint32_t ret = 0;
 80055fa:	2000      	movs	r0, #0
 80055fc:	e7e5      	b.n	80055ca <uartWrite+0xa>
        ret = length;
 80055fe:	4620      	mov	r0, r4
 8005600:	e7e3      	b.n	80055ca <uartWrite+0xa>
 8005602:	bf00      	nop
 8005604:	38000000 	.word	0x38000000

08005608 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8005608:	b40e      	push	{r1, r2, r3}
 800560a:	b510      	push	{r4, lr}
 800560c:	b0c3      	sub	sp, #268	@ 0x10c
 800560e:	4604      	mov	r4, r0
 8005610:	ab45      	add	r3, sp, #276	@ 0x114
 8005612:	f853 2b04 	ldr.w	r2, [r3], #4
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8005616:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8005618:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800561c:	a802      	add	r0, sp, #8
 800561e:	f020 fbe5 	bl	8025dec <vsniprintf>
 8005622:	4602      	mov	r2, r0

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8005624:	a902      	add	r1, sp, #8
 8005626:	4620      	mov	r0, r4
 8005628:	f7ff ffca 	bl	80055c0 <uartWrite>

  va_end(args);


  return ret;
}
 800562c:	b043      	add	sp, #268	@ 0x10c
 800562e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005632:	b003      	add	sp, #12
 8005634:	4770      	bx	lr
	...

08005638 <uartGetBaud>:
uint32_t uartGetBaud(uint8_t ch)
{
  uint32_t ret = 0;


  if (ch >= UART_MAX_CH) return 0;
 8005638:	2801      	cmp	r0, #1
 800563a:	d806      	bhi.n	800564a <uartGetBaud+0x12>
  if (ch == HW_UART_CH_USB)
    ret = cdcGetBaud();
  else
    ret = uart_tbl[ch].baud;
  #else
  ret = uart_tbl[ch].baud;
 800563c:	4b04      	ldr	r3, [pc, #16]	@ (8005650 <uartGetBaud+0x18>)
 800563e:	f240 422c 	movw	r2, #1068	@ 0x42c
 8005642:	fb02 3300 	mla	r3, r2, r0, r3
 8005646:	6858      	ldr	r0, [r3, #4]
  #endif
  
  return ret;
 8005648:	4770      	bx	lr
  if (ch >= UART_MAX_CH) return 0;
 800564a:	2000      	movs	r0, #0
}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	38000000 	.word	0x38000000

08005654 <cliUart>:
  return uart_tbl[ch].tx_cnt;
}

#ifdef _USE_HW_CLI
void cliUart(cli_args_t *args)
{
 8005654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005656:	b083      	sub	sp, #12
 8005658:	4604      	mov	r4, r0
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info"))
 800565a:	8803      	ldrh	r3, [r0, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d007      	beq.n	8005670 <cliUart+0x1c>
  bool ret = false;
 8005660:	2500      	movs	r5, #0
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
    }
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "test"))
 8005662:	8823      	ldrh	r3, [r4, #0]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d01f      	beq.n	80056a8 <cliUart+0x54>
      cliPrintf("This is cliPort\n");
    }
    ret = true;
  }

  if (ret == false)
 8005668:	2d00      	cmp	r5, #0
 800566a:	d065      	beq.n	8005738 <cliUart+0xe4>
  {
    cliPrintf("uart info\n");
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
  }
}
 800566c:	b003      	add	sp, #12
 800566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 8005670:	6943      	ldr	r3, [r0, #20]
 8005672:	4935      	ldr	r1, [pc, #212]	@ (8005748 <cliUart+0xf4>)
 8005674:	2000      	movs	r0, #0
 8005676:	4798      	blx	r3
 8005678:	4605      	mov	r5, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d0f1      	beq.n	8005662 <cliUart+0xe>
    for (int i=0; i<UART_MAX_CH; i++)
 800567e:	2000      	movs	r0, #0
 8005680:	e00f      	b.n	80056a2 <cliUart+0x4e>
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
 8005682:	1c46      	adds	r6, r0, #1
 8005684:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8005688:	4b30      	ldr	r3, [pc, #192]	@ (800574c <cliUart+0xf8>)
 800568a:	f853 7032 	ldr.w	r7, [r3, r2, lsl #3]
 800568e:	b2c0      	uxtb	r0, r0
 8005690:	f7ff ffd2 	bl	8005638 <uartGetBaud>
 8005694:	4603      	mov	r3, r0
 8005696:	463a      	mov	r2, r7
 8005698:	4631      	mov	r1, r6
 800569a:	482d      	ldr	r0, [pc, #180]	@ (8005750 <cliUart+0xfc>)
 800569c:	f7fb fc32 	bl	8000f04 <cliPrintf>
    for (int i=0; i<UART_MAX_CH; i++)
 80056a0:	4630      	mov	r0, r6
 80056a2:	2801      	cmp	r0, #1
 80056a4:	dded      	ble.n	8005682 <cliUart+0x2e>
 80056a6:	e7dc      	b.n	8005662 <cliUart+0xe>
  if (args->argc == 2 && args->isStr(0, "test"))
 80056a8:	6963      	ldr	r3, [r4, #20]
 80056aa:	492a      	ldr	r1, [pc, #168]	@ (8005754 <cliUart+0x100>)
 80056ac:	2000      	movs	r0, #0
 80056ae:	4798      	blx	r3
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d0d9      	beq.n	8005668 <cliUart+0x14>
    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 80056b4:	68a3      	ldr	r3, [r4, #8]
 80056b6:	2001      	movs	r0, #1
 80056b8:	4798      	blx	r3
 80056ba:	2800      	cmp	r0, #0
 80056bc:	dd0b      	ble.n	80056d6 <cliUart+0x82>
 80056be:	68a3      	ldr	r3, [r4, #8]
 80056c0:	2001      	movs	r0, #1
 80056c2:	4798      	blx	r3
 80056c4:	2802      	cmp	r0, #2
 80056c6:	dc0f      	bgt.n	80056e8 <cliUart+0x94>
 80056c8:	68a3      	ldr	r3, [r4, #8]
 80056ca:	2001      	movs	r0, #1
 80056cc:	4798      	blx	r3
 80056ce:	b2c4      	uxtb	r4, r0
 80056d0:	3c01      	subs	r4, #1
 80056d2:	b2e4      	uxtb	r4, r4
 80056d4:	e000      	b.n	80056d8 <cliUart+0x84>
 80056d6:	2400      	movs	r4, #0
    if (uart_ch != cliGetPort())
 80056d8:	f7fb fb98 	bl	8000e0c <cliGetPort>
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d108      	bne.n	80056f2 <cliUart+0x9e>
      cliPrintf("This is cliPort\n");
 80056e0:	481d      	ldr	r0, [pc, #116]	@ (8005758 <cliUart+0x104>)
 80056e2:	f7fb fc0f 	bl	8000f04 <cliPrintf>
 80056e6:	e7c1      	b.n	800566c <cliUart+0x18>
    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 80056e8:	2401      	movs	r4, #1
 80056ea:	e7f5      	b.n	80056d8 <cliUart+0x84>
        if (cliAvailable() > 0)
 80056ec:	f7fb fbf0 	bl	8000ed0 <cliAvailable>
 80056f0:	b978      	cbnz	r0, 8005712 <cliUart+0xbe>
        if (uartAvailable(uart_ch) > 0)
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff ff22 	bl	800553c <uartAvailable>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d0f7      	beq.n	80056ec <cliUart+0x98>
          rx_data = uartRead(uart_ch);
 80056fc:	4620      	mov	r0, r4
 80056fe:	f7ff ff39 	bl	8005574 <uartRead>
 8005702:	4602      	mov	r2, r0
 8005704:	f88d 0007 	strb.w	r0, [sp, #7]
          cliPrintf("<- _DEF_UART%d RX : 0x%X\n", uart_ch + 1, rx_data);
 8005708:	1c61      	adds	r1, r4, #1
 800570a:	4814      	ldr	r0, [pc, #80]	@ (800575c <cliUart+0x108>)
 800570c:	f7fb fbfa 	bl	8000f04 <cliPrintf>
 8005710:	e7ec      	b.n	80056ec <cliUart+0x98>
          rx_data = cliRead();
 8005712:	f7fb fbe5 	bl	8000ee0 <cliRead>
 8005716:	f88d 0007 	strb.w	r0, [sp, #7]
          if (rx_data == 'q')
 800571a:	2871      	cmp	r0, #113	@ 0x71
 800571c:	d0a6      	beq.n	800566c <cliUart+0x18>
            uartWrite(uart_ch, &rx_data, 1);
 800571e:	2201      	movs	r2, #1
 8005720:	f10d 0107 	add.w	r1, sp, #7
 8005724:	4620      	mov	r0, r4
 8005726:	f7ff ff4b 	bl	80055c0 <uartWrite>
            cliPrintf("-> _DEF_UART%d TX : 0x%X\n", uart_ch + 1, rx_data);            
 800572a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800572e:	1c61      	adds	r1, r4, #1
 8005730:	480b      	ldr	r0, [pc, #44]	@ (8005760 <cliUart+0x10c>)
 8005732:	f7fb fbe7 	bl	8000f04 <cliPrintf>
 8005736:	e7dc      	b.n	80056f2 <cliUart+0x9e>
    cliPrintf("uart info\n");
 8005738:	480a      	ldr	r0, [pc, #40]	@ (8005764 <cliUart+0x110>)
 800573a:	f7fb fbe3 	bl	8000f04 <cliPrintf>
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
 800573e:	2102      	movs	r1, #2
 8005740:	4809      	ldr	r0, [pc, #36]	@ (8005768 <cliUart+0x114>)
 8005742:	f7fb fbdf 	bl	8000f04 <cliPrintf>
}
 8005746:	e791      	b.n	800566c <cliUart+0x18>
 8005748:	080280ec 	.word	0x080280ec
 800574c:	08029030 	.word	0x08029030
 8005750:	08028f88 	.word	0x08028f88
 8005754:	08028a2c 	.word	0x08028a2c
 8005758:	08028fdc 	.word	0x08028fdc
 800575c:	08028fa4 	.word	0x08028fa4
 8005760:	08028fc0 	.word	0x08028fc0
 8005764:	08028ff0 	.word	0x08028ff0
 8005768:	08028ffc 	.word	0x08028ffc

0800576c <do_calibration>:



// do calibration for point(Px, Py) using the calculated coefficients 
void do_calibration(int touch_x, int touch_y, int *px, int *py)
{
 800576c:	ee05 0a10 	vmov	s10, r0
 8005770:	ee07 1a10 	vmov	s14, r1
  *px = (unsigned int)(KX1 * (touch_x) + KX2 * (touch_y) + KX3 + 0.5);
 8005774:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8005778:	4917      	ldr	r1, [pc, #92]	@ (80057d8 <do_calibration+0x6c>)
 800577a:	ed91 4b00 	vldr	d4, [r1]
 800577e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8005782:	4916      	ldr	r1, [pc, #88]	@ (80057dc <do_calibration+0x70>)
 8005784:	ed91 6b00 	vldr	d6, [r1]
 8005788:	ee27 6b06 	vmul.f64	d6, d7, d6
 800578c:	ee05 6b04 	vmla.f64	d6, d5, d4
 8005790:	4913      	ldr	r1, [pc, #76]	@ (80057e0 <do_calibration+0x74>)
 8005792:	ed91 4b00 	vldr	d4, [r1]
 8005796:	ee36 6b04 	vadd.f64	d6, d6, d4
 800579a:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800579e:	ee36 6b04 	vadd.f64	d6, d6, d4
 80057a2:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80057a6:	ed82 6a00 	vstr	s12, [r2]
  *py = (unsigned int)(KY1 * (touch_x) + KY2 * (touch_y) + KY3 + 0.5);
 80057aa:	4a0e      	ldr	r2, [pc, #56]	@ (80057e4 <do_calibration+0x78>)
 80057ac:	ed92 6b00 	vldr	d6, [r2]
 80057b0:	4a0d      	ldr	r2, [pc, #52]	@ (80057e8 <do_calibration+0x7c>)
 80057b2:	ed92 3b00 	vldr	d3, [r2]
 80057b6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80057ba:	ee05 7b06 	vmla.f64	d7, d5, d6
 80057be:	4a0b      	ldr	r2, [pc, #44]	@ (80057ec <do_calibration+0x80>)
 80057c0:	ed92 6b00 	vldr	d6, [r2]
 80057c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057c8:	ee37 7b04 	vadd.f64	d7, d7, d4
 80057cc:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80057d0:	ed83 7a00 	vstr	s14, [r3]
}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	24002928 	.word	0x24002928
 80057dc:	24002920 	.word	0x24002920
 80057e0:	24002918 	.word	0x24002918
 80057e4:	24002910 	.word	0x24002910
 80057e8:	24002908 	.word	0x24002908
 80057ec:	24002900 	.word	0x24002900

080057f0 <readRegs>:
{
 80057f0:	b500      	push	{lr}
 80057f2:	b083      	sub	sp, #12
 80057f4:	460b      	mov	r3, r1
  ret = i2cReadBytes(i2c_ch, i2c_addr, reg_addr, p_data, length, 50);
 80057f6:	2132      	movs	r1, #50	@ 0x32
 80057f8:	9101      	str	r1, [sp, #4]
 80057fa:	9200      	str	r2, [sp, #0]
 80057fc:	4602      	mov	r2, r0
 80057fe:	2148      	movs	r1, #72	@ 0x48
 8005800:	2000      	movs	r0, #0
 8005802:	f7fd fb8b 	bl	8002f1c <i2cReadBytes>
}
 8005806:	b003      	add	sp, #12
 8005808:	f85d fb04 	ldr.w	pc, [sp], #4

0800580c <ak4183ReadAdc>:
    return check_error_analysis(points, screen_x, screen_y, cali_x, cali_y);
  }
}

bool ak4183ReadAdc(ak4183_adc_t *p_adc)
{
 800580c:	b510      	push	{r4, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	4604      	mov	r4, r0
  bool ret;
  uint8_t rx_buf[2];

  // x-axis
  ret = i2cReadBytes(i2c_ch, i2c_addr, 0xC4, rx_buf, 2, 50);
 8005812:	2332      	movs	r3, #50	@ 0x32
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	2302      	movs	r3, #2
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	ab03      	add	r3, sp, #12
 800581c:	22c4      	movs	r2, #196	@ 0xc4
 800581e:	2148      	movs	r1, #72	@ 0x48
 8005820:	2000      	movs	r0, #0
 8005822:	f7fd fb7b 	bl	8002f1c <i2cReadBytes>
  if (!ret)
 8005826:	b908      	cbnz	r0, 800582c <ak4183ReadAdc+0x20>
  if (!ret)
    return false;
  p_adc->y_adc = (rx_buf[0]<<4) | (rx_buf[1]>>4);

  return true;
}
 8005828:	b004      	add	sp, #16
 800582a:	bd10      	pop	{r4, pc}
  p_adc->x_adc = (rx_buf[0]<<4) | (rx_buf[1]>>4);
 800582c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8005830:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800583a:	8023      	strh	r3, [r4, #0]
  ret = i2cReadBytes(i2c_ch, i2c_addr, 0xD4, rx_buf, 2, 50);
 800583c:	2332      	movs	r3, #50	@ 0x32
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	2302      	movs	r3, #2
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	ab03      	add	r3, sp, #12
 8005846:	22d4      	movs	r2, #212	@ 0xd4
 8005848:	2148      	movs	r1, #72	@ 0x48
 800584a:	2000      	movs	r0, #0
 800584c:	f7fd fb66 	bl	8002f1c <i2cReadBytes>
  if (!ret)
 8005850:	2800      	cmp	r0, #0
 8005852:	d0e9      	beq.n	8005828 <ak4183ReadAdc+0x1c>
  p_adc->y_adc = (rx_buf[0]<<4) | (rx_buf[1]>>4);
 8005854:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8005858:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005862:	8063      	strh	r3, [r4, #2]
  return true;
 8005864:	e7e0      	b.n	8005828 <ak4183ReadAdc+0x1c>

08005866 <ak4183IsReady>:

bool ak4183IsReady(void)
{
 8005866:	b508      	push	{r3, lr}
  return gpioPinRead(_PIN_GPIO_LCD_TS_INT) == _DEF_LOW;
 8005868:	2001      	movs	r0, #1
 800586a:	f7fd f985 	bl	8002b78 <gpioPinRead>
 800586e:	f080 0001 	eor.w	r0, r0, #1
}
 8005872:	b2c0      	uxtb	r0, r0
 8005874:	bd08      	pop	{r3, pc}
	...

08005878 <check_error_analysis>:
{
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	4606      	mov	r6, r0
 8005880:	4689      	mov	r9, r1
 8005882:	4690      	mov	r8, r2
 8005884:	461f      	mov	r7, r3
 8005886:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
  maxErr = 0;
 800588a:	2500      	movs	r5, #0
  for (i = 0; i < points; i++)
 800588c:	462c      	mov	r4, r5
 800588e:	e000      	b.n	8005892 <check_error_analysis+0x1a>
 8005890:	3401      	adds	r4, #1
 8005892:	42a6      	cmp	r6, r4
 8005894:	dd18      	ble.n	80058c8 <check_error_analysis+0x50>
    do_calibration(cali_x[i], cali_y[i], &x, &y);
 8005896:	466b      	mov	r3, sp
 8005898:	aa01      	add	r2, sp, #4
 800589a:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800589e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 80058a2:	f7ff ff63 	bl	800576c <do_calibration>
    dx = x - screen_x[i];
 80058a6:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 80058aa:	9b01      	ldr	r3, [sp, #4]
 80058ac:	eba3 0c02 	sub.w	ip, r3, r2
    dy = y - screen_y[i];
 80058b0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80058b4:	9b00      	ldr	r3, [sp, #0]
 80058b6:	1a9b      	subs	r3, r3, r2
    err = dx * dx + dy * dy;
 80058b8:	fb03 f303 	mul.w	r3, r3, r3
 80058bc:	fb0c 3c0c 	mla	ip, ip, ip, r3
    if (err > maxErr)
 80058c0:	4565      	cmp	r5, ip
 80058c2:	d2e5      	bcs.n	8005890 <check_error_analysis+0x18>
      maxErr = err;
 80058c4:	4665      	mov	r5, ip
 80058c6:	e7e3      	b.n	8005890 <check_error_analysis+0x18>
  logPrintf("Calibration error rate: %ld\r\n", maxErr);
 80058c8:	4629      	mov	r1, r5
 80058ca:	4805      	ldr	r0, [pc, #20]	@ (80058e0 <check_error_analysis+0x68>)
 80058cc:	f7fd fd7c 	bl	80033c8 <logPrintf>
  if (maxErr < (errThreshold * errThreshold))
 80058d0:	2d63      	cmp	r5, #99	@ 0x63
 80058d2:	d803      	bhi.n	80058dc <check_error_analysis+0x64>
    return true;
 80058d4:	2001      	movs	r0, #1
}
 80058d6:	b002      	add	sp, #8
 80058d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80058dc:	2000      	movs	r0, #0
 80058de:	e7fa      	b.n	80058d6 <check_error_analysis+0x5e>
 80058e0:	08029060 	.word	0x08029060
 80058e4:	00000000 	.word	0x00000000

080058e8 <calculate_calibration_coefficient>:
{
 80058e8:	b530      	push	{r4, r5, lr}
 80058ea:	ed2d 8b10 	vpush	{d8-d15}
 80058ee:	b09b      	sub	sp, #108	@ 0x6c
 80058f0:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
  if (points < 3)
 80058f2:	2802      	cmp	r0, #2
 80058f4:	f240 8183 	bls.w	8005bfe <calculate_calibration_coefficient+0x316>
    if (points == 3)
 80058f8:	2803      	cmp	r0, #3
 80058fa:	f000 8090 	beq.w	8005a1e <calculate_calibration_coefficient+0x136>
    else if (points > 3)
 80058fe:	2803      	cmp	r0, #3
 8005900:	f200 80cd 	bhi.w	8005a9e <calculate_calibration_coefficient+0x1b6>
    k = (a[0] - a[2]) * (b[1] - b[2]) - (a[1] - a[2]) * (b[0] - b[2]);
 8005904:	ed9d bb14 	vldr	d11, [sp, #80]	@ 0x50
 8005908:	ed9d 7b18 	vldr	d7, [sp, #96]	@ 0x60
 800590c:	ee3b 0b47 	vsub.f64	d0, d11, d7
 8005910:	ed9d db12 	vldr	d13, [sp, #72]	@ 0x48
 8005914:	ed9d 6b10 	vldr	d6, [sp, #64]	@ 0x40
 8005918:	ee36 8b4d 	vsub.f64	d8, d6, d13
 800591c:	ed9d cb16 	vldr	d12, [sp, #88]	@ 0x58
 8005920:	ee3c 5b47 	vsub.f64	d5, d12, d7
 8005924:	ed9d 6b0e 	vldr	d6, [sp, #56]	@ 0x38
 8005928:	ee36 4b4d 	vsub.f64	d4, d6, d13
 800592c:	ee25 6b04 	vmul.f64	d6, d5, d4
 8005930:	ee10 6b08 	vnmls.f64	d6, d0, d8
    KX1 = ((c[0] - c[2]) * (b[1] - b[2]) - (c[1] - c[2]) * (b[0] - b[2])) / k;
 8005934:	ed9d fb08 	vldr	d15, [sp, #32]
 8005938:	ed9d ab0c 	vldr	d10, [sp, #48]	@ 0x30
 800593c:	ee3f 3b4a 	vsub.f64	d3, d15, d10
 8005940:	ed9d eb0a 	vldr	d14, [sp, #40]	@ 0x28
 8005944:	ee3e 9b4a 	vsub.f64	d9, d14, d10
 8005948:	ee24 2b09 	vmul.f64	d2, d4, d9
 800594c:	ee18 2b03 	vnmls.f64	d2, d8, d3
 8005950:	ee82 1b06 	vdiv.f64	d1, d2, d6
 8005954:	4dae      	ldr	r5, [pc, #696]	@ (8005c10 <calculate_calibration_coefficient+0x328>)
 8005956:	ed85 1b00 	vstr	d1, [r5]
    KX2 = ((c[1] - c[2]) * (a[0] - a[2]) - (c[0] - c[2]) * (a[1] - a[2])) / k;
 800595a:	ee25 3b03 	vmul.f64	d3, d5, d3
 800595e:	ee10 3b09 	vnmls.f64	d3, d0, d9
 8005962:	ee83 2b06 	vdiv.f64	d2, d3, d6
 8005966:	4dab      	ldr	r5, [pc, #684]	@ (8005c14 <calculate_calibration_coefficient+0x32c>)
 8005968:	ed85 2b00 	vstr	d2, [r5]
    KX3 = (b[0] * (a[2] * c[1] - a[1] * c[2]) + b[1] * (a[0] * c[2] - a[2] * c[0]) + b[2] * (a[1] * c[0] - a[0] * c[1])) / k;
 800596c:	ee2c 2b0a 	vmul.f64	d2, d12, d10
 8005970:	ee17 2b0e 	vnmls.f64	d2, d7, d14
 8005974:	ee27 3b0f 	vmul.f64	d3, d7, d15
 8005978:	ee1b 3b0a 	vnmls.f64	d3, d11, d10
 800597c:	ed9d 1b10 	vldr	d1, [sp, #64]	@ 0x40
 8005980:	ee21 3b03 	vmul.f64	d3, d1, d3
 8005984:	ed9d 1b0e 	vldr	d1, [sp, #56]	@ 0x38
 8005988:	ee01 3b02 	vmla.f64	d3, d1, d2
 800598c:	ee2b eb0e 	vmul.f64	d14, d11, d14
 8005990:	ee1c eb0f 	vnmls.f64	d14, d12, d15
 8005994:	ee0d 3b0e 	vmla.f64	d3, d13, d14
 8005998:	ee83 2b06 	vdiv.f64	d2, d3, d6
 800599c:	4d9e      	ldr	r5, [pc, #632]	@ (8005c18 <calculate_calibration_coefficient+0x330>)
 800599e:	ed85 2b00 	vstr	d2, [r5]
    KY1 = ((d[0] - d[2]) * (b[1] - b[2]) - (d[1] - d[2]) * (b[0] - b[2])) / k;
 80059a2:	ed9d 2b02 	vldr	d2, [sp, #8]
 80059a6:	ed9d 3b06 	vldr	d3, [sp, #24]
 80059aa:	ee32 ab43 	vsub.f64	d10, d2, d3
 80059ae:	ed9d 1b04 	vldr	d1, [sp, #16]
 80059b2:	ee31 9b43 	vsub.f64	d9, d1, d3
 80059b6:	ee24 4b09 	vmul.f64	d4, d4, d9
 80059ba:	ee18 4b0a 	vnmls.f64	d4, d8, d10
 80059be:	ee84 8b06 	vdiv.f64	d8, d4, d6
 80059c2:	4d96      	ldr	r5, [pc, #600]	@ (8005c1c <calculate_calibration_coefficient+0x334>)
 80059c4:	ed85 8b00 	vstr	d8, [r5]
    KY2 = ((d[1] - d[2]) * (a[0] - a[2]) - (d[0] - d[2]) * (a[1] - a[2])) / k;
 80059c8:	ee25 5b0a 	vmul.f64	d5, d5, d10
 80059cc:	ee10 5b09 	vnmls.f64	d5, d0, d9
 80059d0:	ee85 4b06 	vdiv.f64	d4, d5, d6
 80059d4:	4d92      	ldr	r5, [pc, #584]	@ (8005c20 <calculate_calibration_coefficient+0x338>)
 80059d6:	ed85 4b00 	vstr	d4, [r5]
    KY3 = (b[0] * (a[2] * d[1] - a[1] * d[2]) + b[1] * (a[0] * d[2] - a[2] * d[0]) + b[2] * (a[1] * d[0] - a[0] * d[1])) / k;
 80059da:	ee2c 5b03 	vmul.f64	d5, d12, d3
 80059de:	ee17 5b01 	vnmls.f64	d5, d7, d1
 80059e2:	ee27 7b02 	vmul.f64	d7, d7, d2
 80059e6:	ee1b 7b03 	vnmls.f64	d7, d11, d3
 80059ea:	ed9d 4b10 	vldr	d4, [sp, #64]	@ 0x40
 80059ee:	ee24 7b07 	vmul.f64	d7, d4, d7
 80059f2:	ed9d 4b0e 	vldr	d4, [sp, #56]	@ 0x38
 80059f6:	ee04 7b05 	vmla.f64	d7, d4, d5
 80059fa:	ee2b bb01 	vmul.f64	d11, d11, d1
 80059fe:	ee1c bb02 	vnmls.f64	d11, d12, d2
 8005a02:	ee0d 7b0b 	vmla.f64	d7, d13, d11
 8005a06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005a0a:	4d86      	ldr	r5, [pc, #536]	@ (8005c24 <calculate_calibration_coefficient+0x33c>)
 8005a0c:	ed85 5b00 	vstr	d5, [r5]
    return check_error_analysis(points, screen_x, screen_y, cali_x, cali_y);
 8005a10:	9400      	str	r4, [sp, #0]
 8005a12:	f7ff ff31 	bl	8005878 <check_error_analysis>
}
 8005a16:	b01b      	add	sp, #108	@ 0x6c
 8005a18:	ecbd 8b10 	vpop	{d8-d15}
 8005a1c:	bd30      	pop	{r4, r5, pc}
      for (i = 0; i < points; i++)
 8005a1e:	f04f 0c00 	mov.w	ip, #0
 8005a22:	4560      	cmp	r0, ip
 8005a24:	f77f af6e 	ble.w	8005904 <calculate_calibration_coefficient+0x1c>
        a[i] = (double)(cali_x[i]);
 8005a28:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8005a2c:	ee07 5a90 	vmov	s15, r5
 8005a30:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005a34:	ad1a      	add	r5, sp, #104	@ 0x68
 8005a36:	eb05 0ecc 	add.w	lr, r5, ip, lsl #3
 8005a3a:	ed0e 7b06 	vstr	d7, [lr, #-24]	@ 0xffffffe8
        b[i] = (double)(cali_y[i]);
 8005a3e:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8005a42:	ee07 5a90 	vmov	s15, r5
 8005a46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005a4a:	ed0e 7b0c 	vstr	d7, [lr, #-48]	@ 0xffffffd0
        c[i] = (double)(screen_x[i]);
 8005a4e:	f851 502c 	ldr.w	r5, [r1, ip, lsl #2]
 8005a52:	ee07 5a90 	vmov	s15, r5
 8005a56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005a5a:	ed0e 7b12 	vstr	d7, [lr, #-72]	@ 0xffffffb8
        d[i] = (double)(screen_y[i]);
 8005a5e:	f852 502c 	ldr.w	r5, [r2, ip, lsl #2]
 8005a62:	ee07 5a90 	vmov	s15, r5
 8005a66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005a6a:	ed0e 7b18 	vstr	d7, [lr, #-96]	@ 0xffffffa0
      for (i = 0; i < points; i++)
 8005a6e:	f10c 0c01 	add.w	ip, ip, #1
 8005a72:	e7d6      	b.n	8005a22 <calculate_calibration_coefficient+0x13a>
        a[i] = 0;
 8005a74:	ad1a      	add	r5, sp, #104	@ 0x68
 8005a76:	eb05 0cce 	add.w	ip, r5, lr, lsl #3
 8005a7a:	ed9f 7b63 	vldr	d7, [pc, #396]	@ 8005c08 <calculate_calibration_coefficient+0x320>
 8005a7e:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
        b[i] = 0;
 8005a82:	ed0c 7b0c 	vstr	d7, [ip, #-48]	@ 0xffffffd0
        c[i] = 0;
 8005a86:	ed0c 7b12 	vstr	d7, [ip, #-72]	@ 0xffffffb8
        d[i] = 0;
 8005a8a:	ed0c 7b18 	vstr	d7, [ip, #-96]	@ 0xffffffa0
      for (i = 0; i < 3; i++)
 8005a8e:	f10e 0e01 	add.w	lr, lr, #1
 8005a92:	f1be 0f02 	cmp.w	lr, #2
 8005a96:	dded      	ble.n	8005a74 <calculate_calibration_coefficient+0x18c>
      for (i = 0; i < points; i++)
 8005a98:	f04f 0c00 	mov.w	ip, #0
 8005a9c:	e060      	b.n	8005b60 <calculate_calibration_coefficient+0x278>
      for (i = 0; i < 3; i++)
 8005a9e:	f04f 0e00 	mov.w	lr, #0
 8005aa2:	e7f6      	b.n	8005a92 <calculate_calibration_coefficient+0x1aa>
        a[2] = a[2] + (double)(cali_x[i]);
 8005aa4:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8005aa8:	ee07 5a90 	vmov	s15, r5
 8005aac:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005ab0:	ed9d 7b18 	vldr	d7, [sp, #96]	@ 0x60
 8005ab4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ab8:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
        b[2] = b[2] + (double)(cali_y[i]);
 8005abc:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8005ac0:	ee07 5a90 	vmov	s15, r5
 8005ac4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005ac8:	ed9d 5b12 	vldr	d5, [sp, #72]	@ 0x48
 8005acc:	ee35 5b07 	vadd.f64	d5, d5, d7
 8005ad0:	ed8d 5b12 	vstr	d5, [sp, #72]	@ 0x48
        c[2] = c[2] + (double)(screen_x[i]);
 8005ad4:	f851 502c 	ldr.w	r5, [r1, ip, lsl #2]
 8005ad8:	ee05 5a90 	vmov	s11, r5
 8005adc:	eeb8 4b65 	vcvt.f64.u32	d4, s11
 8005ae0:	ed9d 5b0c 	vldr	d5, [sp, #48]	@ 0x30
 8005ae4:	ee35 5b04 	vadd.f64	d5, d5, d4
 8005ae8:	ed8d 5b0c 	vstr	d5, [sp, #48]	@ 0x30
        d[2] = d[2] + (double)(screen_y[i]);
 8005aec:	f852 502c 	ldr.w	r5, [r2, ip, lsl #2]
 8005af0:	ee05 5a90 	vmov	s11, r5
 8005af4:	eeb8 5b65 	vcvt.f64.u32	d5, s11
 8005af8:	ed9d 3b06 	vldr	d3, [sp, #24]
 8005afc:	ee33 3b05 	vadd.f64	d3, d3, d5
 8005b00:	ed8d 3b06 	vstr	d3, [sp, #24]
        a[0] = a[0] + (double)(cali_x[i]) * (double)(cali_x[i]);
 8005b04:	ed9d 3b14 	vldr	d3, [sp, #80]	@ 0x50
 8005b08:	ee06 3b06 	vmla.f64	d3, d6, d6
 8005b0c:	ed8d 3b14 	vstr	d3, [sp, #80]	@ 0x50
        a[1] = a[1] + (double)(cali_x[i]) * (double)(cali_y[i]);
 8005b10:	ed9d 3b16 	vldr	d3, [sp, #88]	@ 0x58
 8005b14:	ee06 3b07 	vmla.f64	d3, d6, d7
 8005b18:	ed8d 3b16 	vstr	d3, [sp, #88]	@ 0x58
        b[0] = a[1];
 8005b1c:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
        b[1] = b[1] + (double)(cali_y[i]) * (double)(cali_y[i]);
 8005b20:	ed9d 3b10 	vldr	d3, [sp, #64]	@ 0x40
 8005b24:	ee07 3b07 	vmla.f64	d3, d7, d7
 8005b28:	ed8d 3b10 	vstr	d3, [sp, #64]	@ 0x40
        c[0] = c[0] + (double)(cali_x[i]) * (double)(screen_x[i]);
 8005b2c:	ed9d 3b08 	vldr	d3, [sp, #32]
 8005b30:	ee06 3b04 	vmla.f64	d3, d6, d4
 8005b34:	ed8d 3b08 	vstr	d3, [sp, #32]
        c[1] = c[1] + (double)(cali_y[i]) * (double)(screen_x[i]);
 8005b38:	ed9d 3b0a 	vldr	d3, [sp, #40]	@ 0x28
 8005b3c:	ee07 3b04 	vmla.f64	d3, d7, d4
 8005b40:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
        d[0] = d[0] + (double)(cali_x[i]) * (double)(screen_y[i]);
 8005b44:	ed9d 4b02 	vldr	d4, [sp, #8]
 8005b48:	ee06 4b05 	vmla.f64	d4, d6, d5
 8005b4c:	ed8d 4b02 	vstr	d4, [sp, #8]
        d[1] = d[1] + (double)(cali_y[i]) * (double)(screen_y[i]);
 8005b50:	ed9d 6b04 	vldr	d6, [sp, #16]
 8005b54:	ee07 6b05 	vmla.f64	d6, d7, d5
 8005b58:	ed8d 6b04 	vstr	d6, [sp, #16]
      for (i = 0; i < points; i++)
 8005b5c:	f10c 0c01 	add.w	ip, ip, #1
 8005b60:	4560      	cmp	r0, ip
 8005b62:	dc9f      	bgt.n	8005aa4 <calculate_calibration_coefficient+0x1bc>
      a[0] = a[0] / a[2];
 8005b64:	ed9d 6b18 	vldr	d6, [sp, #96]	@ 0x60
 8005b68:	ed9d 5b14 	vldr	d5, [sp, #80]	@ 0x50
 8005b6c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b70:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
      a[1] = a[1] / b[2];
 8005b74:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8005b78:	ed9d 4b16 	vldr	d4, [sp, #88]	@ 0x58
 8005b7c:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8005b80:	ed8d 5b16 	vstr	d5, [sp, #88]	@ 0x58
      b[0] = b[0] / a[2];
 8005b84:	ed9d 4b0e 	vldr	d4, [sp, #56]	@ 0x38
 8005b88:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8005b8c:	ed8d 5b0e 	vstr	d5, [sp, #56]	@ 0x38
      b[1] = b[1] / b[2];
 8005b90:	ed9d 4b10 	vldr	d4, [sp, #64]	@ 0x40
 8005b94:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8005b98:	ed8d 5b10 	vstr	d5, [sp, #64]	@ 0x40
      c[0] = c[0] / a[2];
 8005b9c:	ed9d 4b08 	vldr	d4, [sp, #32]
 8005ba0:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8005ba4:	ed8d 5b08 	vstr	d5, [sp, #32]
      c[1] = c[1] / b[2];
 8005ba8:	ed9d 4b0a 	vldr	d4, [sp, #40]	@ 0x28
 8005bac:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8005bb0:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
      d[0] = d[0] / a[2];
 8005bb4:	ed9d 4b02 	vldr	d4, [sp, #8]
 8005bb8:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8005bbc:	ed8d 5b02 	vstr	d5, [sp, #8]
      d[1] = d[1] / b[2];
 8005bc0:	ed9d 4b04 	vldr	d4, [sp, #16]
 8005bc4:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8005bc8:	ed8d 5b04 	vstr	d5, [sp, #16]
      a[2] = a[2] / points;
 8005bcc:	ee05 0a90 	vmov	s11, r0
 8005bd0:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 8005bd4:	ee86 4b05 	vdiv.f64	d4, d6, d5
 8005bd8:	ed8d 4b18 	vstr	d4, [sp, #96]	@ 0x60
      b[2] = b[2] / points;
 8005bdc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005be0:	ed8d 6b12 	vstr	d6, [sp, #72]	@ 0x48
      c[2] = c[2] / points;
 8005be4:	ed9d 6b0c 	vldr	d6, [sp, #48]	@ 0x30
 8005be8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005bec:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
      d[2] = d[2] / points;
 8005bf0:	ed9d 6b06 	vldr	d6, [sp, #24]
 8005bf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005bf8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005bfc:	e682      	b.n	8005904 <calculate_calibration_coefficient+0x1c>
    return 0;
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e709      	b.n	8005a16 <calculate_calibration_coefficient+0x12e>
 8005c02:	bf00      	nop
 8005c04:	f3af 8000 	nop.w
	...
 8005c10:	24002928 	.word	0x24002928
 8005c14:	24002920 	.word	0x24002920
 8005c18:	24002918 	.word	0x24002918
 8005c1c:	24002910 	.word	0x24002910
 8005c20:	24002908 	.word	0x24002908
 8005c24:	24002900 	.word	0x24002900

08005c28 <ak4183InitRegs>:
{
 8005c28:	b500      	push	{lr}
 8005c2a:	b083      	sub	sp, #12
  if(calculate_calibration_coefficient(5, x_scr_ref, y_scr_ref, x_buf, y_buf) == 0)
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <ak4183InitRegs+0x34>)
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <ak4183InitRegs+0x38>)
 8005c32:	4a0c      	ldr	r2, [pc, #48]	@ (8005c64 <ak4183InitRegs+0x3c>)
 8005c34:	490c      	ldr	r1, [pc, #48]	@ (8005c68 <ak4183InitRegs+0x40>)
 8005c36:	2005      	movs	r0, #5
 8005c38:	f7ff fe56 	bl	80058e8 <calculate_calibration_coefficient>
 8005c3c:	b930      	cbnz	r0, 8005c4c <ak4183InitRegs+0x24>
    logPrintf("[  ] no cali\n");
 8005c3e:	480b      	ldr	r0, [pc, #44]	@ (8005c6c <ak4183InitRegs+0x44>)
 8005c40:	f7fd fbc2 	bl	80033c8 <logPrintf>
}
 8005c44:	2001      	movs	r0, #1
 8005c46:	b003      	add	sp, #12
 8005c48:	f85d fb04 	ldr.w	pc, [sp], #4
    is_cali = true;
 8005c4c:	4b08      	ldr	r3, [pc, #32]	@ (8005c70 <ak4183InitRegs+0x48>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
    logPrintf("[  ] cali ok\n");
 8005c52:	4808      	ldr	r0, [pc, #32]	@ (8005c74 <ak4183InitRegs+0x4c>)
 8005c54:	f7fd fbb8 	bl	80033c8 <logPrintf>
 8005c58:	e7f4      	b.n	8005c44 <ak4183InitRegs+0x1c>
 8005c5a:	bf00      	nop
 8005c5c:	24000078 	.word	0x24000078
 8005c60:	2400008c 	.word	0x2400008c
 8005c64:	240000a0 	.word	0x240000a0
 8005c68:	240000b4 	.word	0x240000b4
 8005c6c:	08029080 	.word	0x08029080
 8005c70:	24002932 	.word	0x24002932
 8005c74:	08029090 	.word	0x08029090

08005c78 <ak4183Init>:
{
 8005c78:	b538      	push	{r3, r4, r5, lr}
  gpioPinMode(_PIN_GPIO_LCD_TS_INT, _DEF_INPUT);
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7fc feb9 	bl	80029f4 <gpioPinMode>
  if (i2cIsBegin(i2c_ch) == true)
 8005c82:	2000      	movs	r0, #0
 8005c84:	f7fd f87a 	bl	8002d7c <i2cIsBegin>
 8005c88:	4605      	mov	r5, r0
 8005c8a:	b928      	cbnz	r0, 8005c98 <ak4183Init+0x20>
    ret = i2cBegin(i2c_ch, 400);
 8005c8c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005c90:	f7fd f8f6 	bl	8002e80 <i2cBegin>
  if (ret == true && i2cIsDeviceReady(i2c_ch, i2c_addr))
 8005c94:	4605      	mov	r5, r0
 8005c96:	b1c8      	cbz	r0, 8005ccc <ak4183Init+0x54>
 8005c98:	2148      	movs	r1, #72	@ 0x48
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f7fd f92a 	bl	8002ef4 <i2cIsDeviceReady>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	b118      	cbz	r0, 8005cac <ak4183Init+0x34>
    is_detected = true;
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8005cdc <ak4183Init+0x64>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	462c      	mov	r4, r5
  if (is_detected == true)
 8005cac:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <ak4183Init+0x64>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	b973      	cbnz	r3, 8005cd0 <ak4183Init+0x58>
  is_init = ret;
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce0 <ak4183Init+0x68>)
 8005cb4:	701c      	strb	r4, [r3, #0]
  logPrintf("[%s] ak4183Init()\n", ret ? "OK":"NG");
 8005cb6:	b17c      	cbz	r4, 8005cd8 <ak4183Init+0x60>
 8005cb8:	490a      	ldr	r1, [pc, #40]	@ (8005ce4 <ak4183Init+0x6c>)
 8005cba:	480b      	ldr	r0, [pc, #44]	@ (8005ce8 <ak4183Init+0x70>)
 8005cbc:	f7fd fb84 	bl	80033c8 <logPrintf>
  cliAdd("ak4183", cliCmd);
 8005cc0:	490a      	ldr	r1, [pc, #40]	@ (8005cec <ak4183Init+0x74>)
 8005cc2:	480b      	ldr	r0, [pc, #44]	@ (8005cf0 <ak4183Init+0x78>)
 8005cc4:	f7fb fbcc 	bl	8001460 <cliAdd>
}
 8005cc8:	4620      	mov	r0, r4
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
    ret = false;
 8005ccc:	4604      	mov	r4, r0
 8005cce:	e7ed      	b.n	8005cac <ak4183Init+0x34>
    ret = ak4183InitRegs();
 8005cd0:	f7ff ffaa 	bl	8005c28 <ak4183InitRegs>
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	e7ec      	b.n	8005cb2 <ak4183Init+0x3a>
  logPrintf("[%s] ak4183Init()\n", ret ? "OK":"NG");
 8005cd8:	4906      	ldr	r1, [pc, #24]	@ (8005cf4 <ak4183Init+0x7c>)
 8005cda:	e7ee      	b.n	8005cba <ak4183Init+0x42>
 8005cdc:	24002930 	.word	0x24002930
 8005ce0:	24002931 	.word	0x24002931
 8005ce4:	08028188 	.word	0x08028188
 8005ce8:	080290a0 	.word	0x080290a0
 8005cec:	08005d7d 	.word	0x08005d7d
 8005cf0:	080290b4 	.word	0x080290b4
 8005cf4:	0802818c 	.word	0x0802818c

08005cf8 <ak4183GetInfo>:
{
  return AK4183_TOUCH_HEIGTH;
}

bool ak4183GetInfo(ak4183_info_t *p_info)
{
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	4604      	mov	r4, r0
  bool ret;

  if (is_init == false)
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005d74 <ak4183GetInfo+0x7c>)
 8005d00:	781d      	ldrb	r5, [r3, #0]
 8005d02:	b12d      	cbz	r5, 8005d10 <ak4183GetInfo+0x18>
  {
    p_info->count = 0;
    return false;
  }

  if (is_cali == false)
 8005d04:	4b1c      	ldr	r3, [pc, #112]	@ (8005d78 <ak4183GetInfo+0x80>)
 8005d06:	781d      	ldrb	r5, [r3, #0]
 8005d08:	b93d      	cbnz	r5, 8005d1a <ak4183GetInfo+0x22>
  {
    p_info->count = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	7043      	strb	r3, [r0, #1]
    return false;
 8005d0e:	e001      	b.n	8005d14 <ak4183GetInfo+0x1c>
    p_info->count = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	7043      	strb	r3, [r0, #1]
      p_info->point[i].y = cal_y;
    }
  }

  return ret;
}
 8005d14:	4628      	mov	r0, r5
 8005d16:	b004      	add	sp, #16
 8005d18:	bd70      	pop	{r4, r5, r6, pc}
  p_info->count = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	7043      	strb	r3, [r0, #1]
  if (gpioPinRead(_PIN_GPIO_LCD_TS_INT) == _DEF_HIGH)
 8005d1e:	2001      	movs	r0, #1
 8005d20:	f7fc ff2a 	bl	8002b78 <gpioPinRead>
 8005d24:	4605      	mov	r5, r0
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d1f4      	bne.n	8005d14 <ak4183GetInfo+0x1c>
  ret = ak4183ReadAdc(&adc_data);
 8005d2a:	a803      	add	r0, sp, #12
 8005d2c:	f7ff fd6e 	bl	800580c <ak4183ReadAdc>
  if (ret == true)
 8005d30:	4605      	mov	r5, r0
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d0ee      	beq.n	8005d14 <ak4183GetInfo+0x1c>
    p_info->gest_id = 0;
 8005d36:	2600      	movs	r6, #0
 8005d38:	7026      	strb	r6, [r4, #0]
    p_info->count   = 1;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	7063      	strb	r3, [r4, #1]
    for (int i=0; i<p_info->count; i++)
 8005d3e:	e014      	b.n	8005d6a <ak4183GetInfo+0x72>
      do_calibration(adc_data.x_adc, adc_data.y_adc,  (int*)&cal_x,  (int*)&cal_y);
 8005d40:	ab02      	add	r3, sp, #8
 8005d42:	aa01      	add	r2, sp, #4
 8005d44:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8005d48:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8005d4c:	f7ff fd0e 	bl	800576c <do_calibration>
      p_info->point[i].id     = 0;
 8005d50:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005d54:	2200      	movs	r2, #0
 8005d56:	709a      	strb	r2, [r3, #2]
      p_info->point[i].event  = 0;
 8005d58:	70da      	strb	r2, [r3, #3]
      p_info->point[i].weight = 20;
 8005d5a:	2214      	movs	r2, #20
 8005d5c:	721a      	strb	r2, [r3, #8]
      p_info->point[i].area   = 20;
 8005d5e:	725a      	strb	r2, [r3, #9]
      p_info->point[i].x = cal_x;
 8005d60:	9a01      	ldr	r2, [sp, #4]
 8005d62:	809a      	strh	r2, [r3, #4]
      p_info->point[i].y = cal_y;
 8005d64:	9a02      	ldr	r2, [sp, #8]
 8005d66:	80da      	strh	r2, [r3, #6]
    for (int i=0; i<p_info->count; i++)
 8005d68:	3601      	adds	r6, #1
 8005d6a:	7863      	ldrb	r3, [r4, #1]
 8005d6c:	42b3      	cmp	r3, r6
 8005d6e:	dce7      	bgt.n	8005d40 <ak4183GetInfo+0x48>
 8005d70:	e7d0      	b.n	8005d14 <ak4183GetInfo+0x1c>
 8005d72:	bf00      	nop
 8005d74:	24002931 	.word	0x24002931
 8005d78:	24002932 	.word	0x24002932

08005d7c <cliCmd>:

void cliCmd(cli_args_t *args)
{
 8005d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d80:	b08e      	sub	sp, #56	@ 0x38
 8005d82:	4604      	mov	r4, r0
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info"))
 8005d84:	8803      	ldrh	r3, [r0, #0]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d018      	beq.n	8005dbc <cliCmd+0x40>
  bool ret = false;
 8005d8a:	2500      	movs	r5, #0
    cliPrintf("is_init     : %s\n", is_init ? "True" : "False");
    cliPrintf("is_detected : %s\n", is_detected ? "True" : "False");
    ret = true;
  }

  if (args->argc == 3 && args->isStr(0, "read"))
 8005d8c:	8823      	ldrh	r3, [r4, #0]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d02e      	beq.n	8005df0 <cliCmd+0x74>
    }

    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "get") && args->isStr(1, "adc"))
 8005d92:	8823      	ldrh	r3, [r4, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d056      	beq.n	8005e46 <cliCmd+0xca>
      delay(10);
    }
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "get") && args->isStr(1, "info"))
 8005d98:	8823      	ldrh	r3, [r4, #0]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	f000 8083 	beq.w	8005ea6 <cliCmd+0x12a>
      delay(10);
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "gui"))
 8005da0:	8823      	ldrh	r3, [r4, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	f000 80ce 	beq.w	8005f44 <cliCmd+0x1c8>
    cliGui()->closeScreen();    
    ret = true;
  }


  if (args->argc == 1 && args->isStr(0, "cali"))
 8005da8:	8823      	ldrh	r3, [r4, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	f000 81b3 	beq.w	8006116 <cliCmd+0x39a>
  }




  if (ret == false)
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	f000 81d5 	beq.w	8006160 <cliCmd+0x3e4>
    cliPrintf("ak4183 info\n");
    cliPrintf("ak4183 get adc\n");
    cliPrintf("ak4183 get info\n");
    cliPrintf("ak4183 gui\n");
  }
}
 8005db6:	b00e      	add	sp, #56	@ 0x38
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 8005dbc:	6943      	ldr	r3, [r0, #20]
 8005dbe:	499f      	ldr	r1, [pc, #636]	@ (800603c <cliCmd+0x2c0>)
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	4798      	blx	r3
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d0e0      	beq.n	8005d8c <cliCmd+0x10>
    cliPrintf("is_init     : %s\n", is_init ? "True" : "False");
 8005dca:	4b9d      	ldr	r3, [pc, #628]	@ (8006040 <cliCmd+0x2c4>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	b15b      	cbz	r3, 8005de8 <cliCmd+0x6c>
 8005dd0:	499c      	ldr	r1, [pc, #624]	@ (8006044 <cliCmd+0x2c8>)
 8005dd2:	489d      	ldr	r0, [pc, #628]	@ (8006048 <cliCmd+0x2cc>)
 8005dd4:	f7fb f896 	bl	8000f04 <cliPrintf>
    cliPrintf("is_detected : %s\n", is_detected ? "True" : "False");
 8005dd8:	4b9c      	ldr	r3, [pc, #624]	@ (800604c <cliCmd+0x2d0>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	b133      	cbz	r3, 8005dec <cliCmd+0x70>
 8005dde:	4999      	ldr	r1, [pc, #612]	@ (8006044 <cliCmd+0x2c8>)
 8005de0:	489b      	ldr	r0, [pc, #620]	@ (8006050 <cliCmd+0x2d4>)
 8005de2:	f7fb f88f 	bl	8000f04 <cliPrintf>
    ret = true;
 8005de6:	e7d1      	b.n	8005d8c <cliCmd+0x10>
    cliPrintf("is_init     : %s\n", is_init ? "True" : "False");
 8005de8:	499a      	ldr	r1, [pc, #616]	@ (8006054 <cliCmd+0x2d8>)
 8005dea:	e7f2      	b.n	8005dd2 <cliCmd+0x56>
    cliPrintf("is_detected : %s\n", is_detected ? "True" : "False");
 8005dec:	4999      	ldr	r1, [pc, #612]	@ (8006054 <cliCmd+0x2d8>)
 8005dee:	e7f7      	b.n	8005de0 <cliCmd+0x64>
  if (args->argc == 3 && args->isStr(0, "read"))
 8005df0:	6963      	ldr	r3, [r4, #20]
 8005df2:	4999      	ldr	r1, [pc, #612]	@ (8006058 <cliCmd+0x2dc>)
 8005df4:	2000      	movs	r0, #0
 8005df6:	4798      	blx	r3
 8005df8:	4681      	mov	r9, r0
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d0c9      	beq.n	8005d92 <cliCmd+0x16>
    addr = args->getData(1);
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	2001      	movs	r0, #1
 8005e02:	4798      	blx	r3
 8005e04:	4607      	mov	r7, r0
 8005e06:	fa5f f880 	uxtb.w	r8, r0
    len  = args->getData(2);
 8005e0a:	68a3      	ldr	r3, [r4, #8]
 8005e0c:	2002      	movs	r0, #2
 8005e0e:	4798      	blx	r3
 8005e10:	4606      	mov	r6, r0
    for (int i=0; i<len; i++)
 8005e12:	2500      	movs	r5, #0
 8005e14:	b2f3      	uxtb	r3, r6
 8005e16:	429d      	cmp	r5, r3
 8005e18:	da13      	bge.n	8005e42 <cliCmd+0xc6>
      if (readRegs(addr + i, &data, 1) == true)
 8005e1a:	eb08 0005 	add.w	r0, r8, r5
 8005e1e:	2201      	movs	r2, #1
 8005e20:	a909      	add	r1, sp, #36	@ 0x24
 8005e22:	b2c0      	uxtb	r0, r0
 8005e24:	f7ff fce4 	bl	80057f0 <readRegs>
 8005e28:	b140      	cbz	r0, 8005e3c <cliCmd+0xc0>
        cliPrintf("0x%02x : 0x%02X\n", addr + i, data);
 8005e2a:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8005e2e:	fa55 f187 	uxtab	r1, r5, r7
 8005e32:	488a      	ldr	r0, [pc, #552]	@ (800605c <cliCmd+0x2e0>)
 8005e34:	f7fb f866 	bl	8000f04 <cliPrintf>
    for (int i=0; i<len; i++)
 8005e38:	3501      	adds	r5, #1
 8005e3a:	e7eb      	b.n	8005e14 <cliCmd+0x98>
        cliPrintf("readRegs() Fail\n");
 8005e3c:	4888      	ldr	r0, [pc, #544]	@ (8006060 <cliCmd+0x2e4>)
 8005e3e:	f7fb f861 	bl	8000f04 <cliPrintf>
    ret = true;
 8005e42:	464d      	mov	r5, r9
 8005e44:	e7a5      	b.n	8005d92 <cliCmd+0x16>
  if (args->argc == 2 && args->isStr(0, "get") && args->isStr(1, "adc"))
 8005e46:	6963      	ldr	r3, [r4, #20]
 8005e48:	4986      	ldr	r1, [pc, #536]	@ (8006064 <cliCmd+0x2e8>)
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	4798      	blx	r3
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0a2      	beq.n	8005d98 <cliCmd+0x1c>
 8005e52:	6963      	ldr	r3, [r4, #20]
 8005e54:	4984      	ldr	r1, [pc, #528]	@ (8006068 <cliCmd+0x2ec>)
 8005e56:	2001      	movs	r0, #1
 8005e58:	4798      	blx	r3
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	b940      	cbnz	r0, 8005e70 <cliCmd+0xf4>
 8005e5e:	e79b      	b.n	8005d98 <cliCmd+0x1c>
          cliPrintf("ak4183GetAdc() Fail\n");
 8005e60:	4882      	ldr	r0, [pc, #520]	@ (800606c <cliCmd+0x2f0>)
 8005e62:	f7fb f84f 	bl	8000f04 <cliPrintf>
    ret = true;
 8005e66:	4635      	mov	r5, r6
 8005e68:	e796      	b.n	8005d98 <cliCmd+0x1c>
      delay(10);
 8005e6a:	200a      	movs	r0, #10
 8005e6c:	f7fa fe46 	bl	8000afc <delay>
    while(cliKeepLoop())
 8005e70:	f7fb faea 	bl	8001448 <cliKeepLoop>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d0f6      	beq.n	8005e66 <cliCmd+0xea>
      pre_time = millis();
 8005e78:	f7fa fe44 	bl	8000b04 <millis>
 8005e7c:	4605      	mov	r5, r0
      if (ak4183IsReady())
 8005e7e:	f7ff fcf2 	bl	8005866 <ak4183IsReady>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d0f1      	beq.n	8005e6a <cliCmd+0xee>
        if (ak4183ReadAdc(&adc_info) == true)
 8005e86:	a809      	add	r0, sp, #36	@ 0x24
 8005e88:	f7ff fcc0 	bl	800580c <ak4183ReadAdc>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d0e7      	beq.n	8005e60 <cliCmd+0xe4>
          exe_time = millis()-pre_time;
 8005e90:	f7fa fe38 	bl	8000b04 <millis>
          cliPrintf("x_adc : %d , y_adc : %d,  %3d ms\n", adc_info.x_adc, adc_info.y_adc, exe_time);
 8005e94:	1b43      	subs	r3, r0, r5
 8005e96:	f8bd 2026 	ldrh.w	r2, [sp, #38]	@ 0x26
 8005e9a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8005e9e:	4874      	ldr	r0, [pc, #464]	@ (8006070 <cliCmd+0x2f4>)
 8005ea0:	f7fb f830 	bl	8000f04 <cliPrintf>
 8005ea4:	e7e1      	b.n	8005e6a <cliCmd+0xee>
  if (args->argc == 2 && args->isStr(0, "get") && args->isStr(1, "info"))
 8005ea6:	6963      	ldr	r3, [r4, #20]
 8005ea8:	496e      	ldr	r1, [pc, #440]	@ (8006064 <cliCmd+0x2e8>)
 8005eaa:	2000      	movs	r0, #0
 8005eac:	4798      	blx	r3
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f43f af76 	beq.w	8005da0 <cliCmd+0x24>
 8005eb4:	6963      	ldr	r3, [r4, #20]
 8005eb6:	4961      	ldr	r1, [pc, #388]	@ (800603c <cliCmd+0x2c0>)
 8005eb8:	2001      	movs	r0, #1
 8005eba:	4798      	blx	r3
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f43f af6e 	beq.w	8005da0 <cliCmd+0x24>
    while(cliKeepLoop())
 8005ec4:	f7fb fac0 	bl	8001448 <cliKeepLoop>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d039      	beq.n	8005f40 <cliCmd+0x1c4>
      pre_time = millis();
 8005ecc:	f7fa fe1a 	bl	8000b04 <millis>
 8005ed0:	4605      	mov	r5, r0
      if (ak4183GetInfo(&info) == true)
 8005ed2:	a809      	add	r0, sp, #36	@ 0x24
 8005ed4:	f7ff ff10 	bl	8005cf8 <ak4183GetInfo>
 8005ed8:	b378      	cbz	r0, 8005f3a <cliCmd+0x1be>
        exe_time = millis()-pre_time;
 8005eda:	f7fa fe13 	bl	8000b04 <millis>
        cliPrintf("cnt : %d %3dms, g=%d ", info.count, exe_time, info.gest_id);
 8005ede:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8005ee2:	1b42      	subs	r2, r0, r5
 8005ee4:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 8005ee8:	4862      	ldr	r0, [pc, #392]	@ (8006074 <cliCmd+0x2f8>)
 8005eea:	f7fb f80b 	bl	8000f04 <cliPrintf>
        for (int i=0; i<info.count; i++)
 8005eee:	2500      	movs	r5, #0
 8005ef0:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dc06      	bgt.n	8005f06 <cliCmd+0x18a>
        cliPrintf("\n");
 8005ef8:	485f      	ldr	r0, [pc, #380]	@ (8006078 <cliCmd+0x2fc>)
 8005efa:	f7fb f803 	bl	8000f04 <cliPrintf>
      delay(10);
 8005efe:	200a      	movs	r0, #10
 8005f00:	f7fa fdfc 	bl	8000afc <delay>
 8005f04:	e7de      	b.n	8005ec4 <cliCmd+0x148>
          cliPrintf(" - ");
 8005f06:	485d      	ldr	r0, [pc, #372]	@ (800607c <cliCmd+0x300>)
 8005f08:	f7fa fffc 	bl	8000f04 <cliPrintf>
            info.point[i].id,      
 8005f0c:	ab0e      	add	r3, sp, #56	@ 0x38
 8005f0e:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
            info.point[i].y, 
 8005f12:	f831 3c0e 	ldrh.w	r3, [r1, #-14]
            info.point[i].weight, 
 8005f16:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
            info.point[i].area
 8005f1a:	f811 0c0b 	ldrb.w	r0, [r1, #-11]
          cliPrintf("id=%d evt=%2d x=%3d y=%3d w=%3d a=%3d ", 
 8005f1e:	9002      	str	r0, [sp, #8]
 8005f20:	9201      	str	r2, [sp, #4]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	f831 3c10 	ldrh.w	r3, [r1, #-16]
 8005f28:	f811 2c11 	ldrb.w	r2, [r1, #-17]
 8005f2c:	f811 1c12 	ldrb.w	r1, [r1, #-18]
 8005f30:	4853      	ldr	r0, [pc, #332]	@ (8006080 <cliCmd+0x304>)
 8005f32:	f7fa ffe7 	bl	8000f04 <cliPrintf>
        for (int i=0; i<info.count; i++)
 8005f36:	3501      	adds	r5, #1
 8005f38:	e7da      	b.n	8005ef0 <cliCmd+0x174>
        cliPrintf("ak4183GetInfo() Fail\n");
 8005f3a:	4852      	ldr	r0, [pc, #328]	@ (8006084 <cliCmd+0x308>)
 8005f3c:	f7fa ffe2 	bl	8000f04 <cliPrintf>
    ret = true;
 8005f40:	4635      	mov	r5, r6
 8005f42:	e72d      	b.n	8005da0 <cliCmd+0x24>
  if (args->argc == 1 && args->isStr(0, "gui"))
 8005f44:	6963      	ldr	r3, [r4, #20]
 8005f46:	4950      	ldr	r1, [pc, #320]	@ (8006088 <cliCmd+0x30c>)
 8005f48:	2000      	movs	r0, #0
 8005f4a:	4798      	blx	r3
 8005f4c:	4682      	mov	sl, r0
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f43f af2a 	beq.w	8005da8 <cliCmd+0x2c>
    info.count = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	f88d 3011 	strb.w	r3, [sp, #17]
    info_pre.count = 0;
 8005f5a:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
    cliGui()->initScreen(80, 24);
 8005f5e:	f7fb fcd9 	bl	8001914 <cliGui>
 8005f62:	6803      	ldr	r3, [r0, #0]
 8005f64:	2118      	movs	r1, #24
 8005f66:	2050      	movs	r0, #80	@ 0x50
 8005f68:	4798      	blx	r3
    while(cliKeepLoop())
 8005f6a:	e04d      	b.n	8006008 <cliCmd+0x28c>
          if (info.point[i].x != info_pre.point[i].x || 
 8005f6c:	ab0e      	add	r3, sp, #56	@ 0x38
 8005f6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f72:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005f76:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	d108      	bne.n	8005f90 <cliCmd+0x214>
              info.point[i].y != info_pre.point[i].y ||
 8005f7e:	a90e      	add	r1, sp, #56	@ 0x38
 8005f80:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005f84:	f831 0c22 	ldrh.w	r0, [r1, #-34]
 8005f88:	f831 1c0e 	ldrh.w	r1, [r1, #-14]
          if (info.point[i].x != info_pre.point[i].x || 
 8005f8c:	4288      	cmp	r0, r1
 8005f8e:	d050      	beq.n	8006032 <cliCmd+0x2b6>
            x = info_pre.point[i].x/10;
 8005f90:	4a3e      	ldr	r2, [pc, #248]	@ (800608c <cliCmd+0x310>)
 8005f92:	fba2 1303 	umull	r1, r3, r2, r3
 8005f96:	ea4f 08d3 	mov.w	r8, r3, lsr #3
            y = info_pre.point[i].y/20;          
 8005f9a:	ab0e      	add	r3, sp, #56	@ 0x38
 8005f9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fa0:	f833 5c0e 	ldrh.w	r5, [r3, #-14]
 8005fa4:	fba2 2505 	umull	r2, r5, r2, r5
 8005fa8:	092d      	lsrs	r5, r5, #4
            cliGui()->eraseBox(x, y, 6, 3);
 8005faa:	f7fb fcb3 	bl	8001914 <cliGui>
 8005fae:	6e06      	ldr	r6, [r0, #96]	@ 0x60
 8005fb0:	fa5f f888 	uxtb.w	r8, r8
 8005fb4:	b2ed      	uxtb	r5, r5
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	2206      	movs	r2, #6
 8005fba:	4629      	mov	r1, r5
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	47b0      	blx	r6
            cliGui()->movePrintf(x+2, y+1, " ");
 8005fc0:	f7fb fca8 	bl	8001914 <cliGui>
 8005fc4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8005fc6:	1c69      	adds	r1, r5, #1
 8005fc8:	f108 0002 	add.w	r0, r8, #2
 8005fcc:	4a30      	ldr	r2, [pc, #192]	@ (8006090 <cliCmd+0x314>)
 8005fce:	b2c9      	uxtb	r1, r1
 8005fd0:	b2c0      	uxtb	r0, r0
 8005fd2:	4798      	blx	r3
            cliGui()->movePrintf(x, y+3, "       ");
 8005fd4:	f7fb fc9e 	bl	8001914 <cliGui>
 8005fd8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8005fda:	1ce9      	adds	r1, r5, #3
 8005fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8006094 <cliCmd+0x318>)
 8005fde:	b2c9      	uxtb	r1, r1
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	4798      	blx	r3
        for (int i=0; i<info_pre.count; i++)
 8005fe4:	3701      	adds	r7, #1
 8005fe6:	f89d 2025 	ldrb.w	r2, [sp, #37]	@ 0x25
 8005fea:	42ba      	cmp	r2, r7
 8005fec:	dcbe      	bgt.n	8005f6c <cliCmd+0x1f0>
        for (int i=0; i<info.count; i++)
 8005fee:	2700      	movs	r7, #0
 8005ff0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8005ff4:	42bb      	cmp	r3, r7
 8005ff6:	dc51      	bgt.n	800609c <cliCmd+0x320>
        info_pre = info;
 8005ff8:	ab09      	add	r3, sp, #36	@ 0x24
 8005ffa:	aa04      	add	r2, sp, #16
 8005ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ffe:	c303      	stmia	r3!, {r0, r1}
 8006000:	801a      	strh	r2, [r3, #0]
      delay(10);
 8006002:	200a      	movs	r0, #10
 8006004:	f7fa fd7a 	bl	8000afc <delay>
    while(cliKeepLoop())
 8006008:	f7fb fa1e 	bl	8001448 <cliKeepLoop>
 800600c:	2800      	cmp	r0, #0
 800600e:	d07c      	beq.n	800610a <cliCmd+0x38e>
      cliGui()->drawBox(0, 0, 480/10 + 1, 320/20 + 1, "");
 8006010:	f7fb fc80 	bl	8001914 <cliGui>
 8006014:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8006016:	4b20      	ldr	r3, [pc, #128]	@ (8006098 <cliCmd+0x31c>)
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	2311      	movs	r3, #17
 800601c:	2231      	movs	r2, #49	@ 0x31
 800601e:	2100      	movs	r1, #0
 8006020:	4608      	mov	r0, r1
 8006022:	47a8      	blx	r5
      if (ak4183GetInfo(&info) == true)
 8006024:	a804      	add	r0, sp, #16
 8006026:	f7ff fe67 	bl	8005cf8 <ak4183GetInfo>
 800602a:	2800      	cmp	r0, #0
 800602c:	d0e9      	beq.n	8006002 <cliCmd+0x286>
        for (int i=0; i<info_pre.count; i++)
 800602e:	2700      	movs	r7, #0
 8006030:	e7d9      	b.n	8005fe6 <cliCmd+0x26a>
              info.count != info_pre.count)
 8006032:	f89d 1011 	ldrb.w	r1, [sp, #17]
              info.point[i].y != info_pre.point[i].y ||
 8006036:	4291      	cmp	r1, r2
 8006038:	d1aa      	bne.n	8005f90 <cliCmd+0x214>
 800603a:	e7d3      	b.n	8005fe4 <cliCmd+0x268>
 800603c:	080280ec 	.word	0x080280ec
 8006040:	24002931 	.word	0x24002931
 8006044:	08028904 	.word	0x08028904
 8006048:	080290bc 	.word	0x080290bc
 800604c:	24002930 	.word	0x24002930
 8006050:	080290d0 	.word	0x080290d0
 8006054:	0802890c 	.word	0x0802890c
 8006058:	08028214 	.word	0x08028214
 800605c:	080290e4 	.word	0x080290e4
 8006060:	080290f8 	.word	0x080290f8
 8006064:	08028824 	.word	0x08028824
 8006068:	0802910c 	.word	0x0802910c
 800606c:	08029134 	.word	0x08029134
 8006070:	08029110 	.word	0x08029110
 8006074:	0802914c 	.word	0x0802914c
 8006078:	0802921c 	.word	0x0802921c
 800607c:	08028f04 	.word	0x08028f04
 8006080:	08029164 	.word	0x08029164
 8006084:	0802918c 	.word	0x0802918c
 8006088:	08028f44 	.word	0x08028f44
 800608c:	cccccccd 	.word	0xcccccccd
 8006090:	08028030 	.word	0x08028030
 8006094:	08028f48 	.word	0x08028f48
 8006098:	08028cd0 	.word	0x08028cd0
          x = info.point[i].x/10;
 800609c:	ab0e      	add	r3, sp, #56	@ 0x38
 800609e:	eb03 08c7 	add.w	r8, r3, r7, lsl #3
 80060a2:	f838 9c24 	ldrh.w	r9, [r8, #-36]
 80060a6:	4b35      	ldr	r3, [pc, #212]	@ (800617c <cliCmd+0x400>)
 80060a8:	fba3 2909 	umull	r2, r9, r3, r9
 80060ac:	ea4f 09d9 	mov.w	r9, r9, lsr #3
          y = info.point[i].y/20;
 80060b0:	f838 5c22 	ldrh.w	r5, [r8, #-34]
 80060b4:	fba3 3505 	umull	r3, r5, r3, r5
 80060b8:	092d      	lsrs	r5, r5, #4
          cliGui()->drawBox(x, y, 6, 3, "");
 80060ba:	f7fb fc2b 	bl	8001914 <cliGui>
 80060be:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 80060c0:	fa5f f989 	uxtb.w	r9, r9
 80060c4:	b2ed      	uxtb	r5, r5
 80060c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006180 <cliCmd+0x404>)
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	2303      	movs	r3, #3
 80060cc:	2206      	movs	r2, #6
 80060ce:	4629      	mov	r1, r5
 80060d0:	4648      	mov	r0, r9
 80060d2:	47b0      	blx	r6
          cliGui()->movePrintf(x+2, y+1, "%d", info.point[i].id);
 80060d4:	f7fb fc1e 	bl	8001914 <cliGui>
 80060d8:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 80060da:	1c69      	adds	r1, r5, #1
 80060dc:	f109 0002 	add.w	r0, r9, #2
 80060e0:	f818 3c26 	ldrb.w	r3, [r8, #-38]
 80060e4:	4a27      	ldr	r2, [pc, #156]	@ (8006184 <cliCmd+0x408>)
 80060e6:	b2c9      	uxtb	r1, r1
 80060e8:	b2c0      	uxtb	r0, r0
 80060ea:	47b0      	blx	r6
          cliGui()->movePrintf(x, y+3, "%3d:%3d", info.point[i].x, info.point[i].y);
 80060ec:	f7fb fc12 	bl	8001914 <cliGui>
 80060f0:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 80060f2:	f838 3c22 	ldrh.w	r3, [r8, #-34]
 80060f6:	1ce9      	adds	r1, r5, #3
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	f838 3c24 	ldrh.w	r3, [r8, #-36]
 80060fe:	4a22      	ldr	r2, [pc, #136]	@ (8006188 <cliCmd+0x40c>)
 8006100:	b2c9      	uxtb	r1, r1
 8006102:	4648      	mov	r0, r9
 8006104:	47b0      	blx	r6
        for (int i=0; i<info.count; i++)
 8006106:	3701      	adds	r7, #1
 8006108:	e772      	b.n	8005ff0 <cliCmd+0x274>
    cliGui()->closeScreen();    
 800610a:	f7fb fc03 	bl	8001914 <cliGui>
 800610e:	6843      	ldr	r3, [r0, #4]
 8006110:	4798      	blx	r3
    ret = true;
 8006112:	4655      	mov	r5, sl
 8006114:	e648      	b.n	8005da8 <cliCmd+0x2c>
  if (args->argc == 1 && args->isStr(0, "cali"))
 8006116:	6963      	ldr	r3, [r4, #20]
 8006118:	491c      	ldr	r1, [pc, #112]	@ (800618c <cliCmd+0x410>)
 800611a:	2000      	movs	r0, #0
 800611c:	4798      	blx	r3
 800611e:	2800      	cmp	r0, #0
 8006120:	f43f ae46 	beq.w	8005db0 <cliCmd+0x34>
    uint32_t x_buf[5] = {512,  529,  3535, 3535, 2087};
 8006124:	4c1a      	ldr	r4, [pc, #104]	@ (8006190 <cliCmd+0x414>)
 8006126:	ad04      	add	r5, sp, #16
 8006128:	4626      	mov	r6, r4
 800612a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800612c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800612e:	6833      	ldr	r3, [r6, #0]
 8006130:	602b      	str	r3, [r5, #0]
    uint32_t y_buf[5] = {1011, 3376, 3367, 993,  2243};
 8006132:	ad09      	add	r5, sp, #36	@ 0x24
 8006134:	3414      	adds	r4, #20
 8006136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	602b      	str	r3, [r5, #0]
		if(calculate_calibration_coefficient(5, x_scr_ref, y_scr_ref, x_buf, y_buf) == 0)
 800613e:	ab09      	add	r3, sp, #36	@ 0x24
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	ab04      	add	r3, sp, #16
 8006144:	4a13      	ldr	r2, [pc, #76]	@ (8006194 <cliCmd+0x418>)
 8006146:	4914      	ldr	r1, [pc, #80]	@ (8006198 <cliCmd+0x41c>)
 8006148:	2005      	movs	r0, #5
 800614a:	f7ff fbcd 	bl	80058e8 <calculate_calibration_coefficient>
 800614e:	b918      	cbnz	r0, 8006158 <cliCmd+0x3dc>
      cliPrintf("no cali\n");
 8006150:	4812      	ldr	r0, [pc, #72]	@ (800619c <cliCmd+0x420>)
 8006152:	f7fa fed7 	bl	8000f04 <cliPrintf>
 8006156:	e62e      	b.n	8005db6 <cliCmd+0x3a>
      cliPrintf("cali ok\n");
 8006158:	4811      	ldr	r0, [pc, #68]	@ (80061a0 <cliCmd+0x424>)
 800615a:	f7fa fed3 	bl	8000f04 <cliPrintf>
  if (ret == false)
 800615e:	e62a      	b.n	8005db6 <cliCmd+0x3a>
    cliPrintf("ak4183 info\n");
 8006160:	4810      	ldr	r0, [pc, #64]	@ (80061a4 <cliCmd+0x428>)
 8006162:	f7fa fecf 	bl	8000f04 <cliPrintf>
    cliPrintf("ak4183 get adc\n");
 8006166:	4810      	ldr	r0, [pc, #64]	@ (80061a8 <cliCmd+0x42c>)
 8006168:	f7fa fecc 	bl	8000f04 <cliPrintf>
    cliPrintf("ak4183 get info\n");
 800616c:	480f      	ldr	r0, [pc, #60]	@ (80061ac <cliCmd+0x430>)
 800616e:	f7fa fec9 	bl	8000f04 <cliPrintf>
    cliPrintf("ak4183 gui\n");
 8006172:	480f      	ldr	r0, [pc, #60]	@ (80061b0 <cliCmd+0x434>)
 8006174:	f7fa fec6 	bl	8000f04 <cliPrintf>
}
 8006178:	e61d      	b.n	8005db6 <cliCmd+0x3a>
 800617a:	bf00      	nop
 800617c:	cccccccd 	.word	0xcccccccd
 8006180:	08028cd0 	.word	0x08028cd0
 8006184:	0802810c 	.word	0x0802810c
 8006188:	08028f50 	.word	0x08028f50
 800618c:	080291a4 	.word	0x080291a4
 8006190:	08027e80 	.word	0x08027e80
 8006194:	240000a0 	.word	0x240000a0
 8006198:	240000b4 	.word	0x240000b4
 800619c:	080291ac 	.word	0x080291ac
 80061a0:	080291b8 	.word	0x080291b8
 80061a4:	080291c4 	.word	0x080291c4
 80061a8:	080291d4 	.word	0x080291d4
 80061ac:	080291e4 	.word	0x080291e4
 80061b0:	080291f8 	.word	0x080291f8

080061b4 <hwInit>:




bool hwInit(void)
{
 80061b4:	b510      	push	{r4, lr}
  cliInit();
 80061b6:	f7fb f97b 	bl	80014b0 <cliInit>
  logInit();
 80061ba:	f7fd f88d 	bl	80032d8 <logInit>
  swtimerInit();
 80061be:	f7fe fe65 	bl	8004e8c <swtimerInit>
  ledInit();
 80061c2:	f7fc ffea 	bl	800319a <ledInit>
  buttonInit();
 80061c6:	f7fb fea1 	bl	8001f0c <buttonInit>
  gpioInit();
 80061ca:	f7fc fc69 	bl	8002aa0 <gpioInit>
  i2cInit();
 80061ce:	f7fc fdb1 	bl	8002d34 <i2cInit>
  uartInit();
 80061d2:	f7ff f8d3 	bl	800537c <uartInit>
  for (int i=0; i<HW_UART_MAX_CH; i++)
 80061d6:	2400      	movs	r4, #0
 80061d8:	e005      	b.n	80061e6 <hwInit+0x32>
  {
    uartOpen(i, 57600);
 80061da:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80061de:	b2e0      	uxtb	r0, r4
 80061e0:	f7ff f8f2 	bl	80053c8 <uartOpen>
  for (int i=0; i<HW_UART_MAX_CH; i++)
 80061e4:	3401      	adds	r4, #1
 80061e6:	2c01      	cmp	r4, #1
 80061e8:	ddf7      	ble.n	80061da <hwInit+0x26>
  }
  logOpen(HW_LOG_CH, 57600);
 80061ea:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80061ee:	2000      	movs	r0, #0
 80061f0:	f7fd f8a6 	bl	8003340 <logOpen>
  logPrintf("\r\n[ Firmware Begin... ]\r\n");
 80061f4:	4819      	ldr	r0, [pc, #100]	@ (800625c <hwInit+0xa8>)
 80061f6:	f7fd f8e7 	bl	80033c8 <logPrintf>
  logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 80061fa:	4919      	ldr	r1, [pc, #100]	@ (8006260 <hwInit+0xac>)
 80061fc:	4819      	ldr	r0, [pc, #100]	@ (8006264 <hwInit+0xb0>)
 80061fe:	f7fd f8e3 	bl	80033c8 <logPrintf>
  logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8006202:	4919      	ldr	r1, [pc, #100]	@ (8006268 <hwInit+0xb4>)
 8006204:	4819      	ldr	r0, [pc, #100]	@ (800626c <hwInit+0xb8>)
 8006206:	f7fd f8df 	bl	80033c8 <logPrintf>
  logPrintf("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq()/1000000);
 800620a:	f006 f883 	bl	800c314 <HAL_RCC_GetSysClockFreq>
 800620e:	4918      	ldr	r1, [pc, #96]	@ (8006270 <hwInit+0xbc>)
 8006210:	fb81 3100 	smull	r3, r1, r1, r0
 8006214:	17c0      	asrs	r0, r0, #31
 8006216:	ebc0 41a1 	rsb	r1, r0, r1, asr #18
 800621a:	4816      	ldr	r0, [pc, #88]	@ (8006274 <hwInit+0xc0>)
 800621c:	f7fd f8d4 	bl	80033c8 <logPrintf>
  logPrintf("\n");
 8006220:	4815      	ldr	r0, [pc, #84]	@ (8006278 <hwInit+0xc4>)
 8006222:	f7fd f8d1 	bl	80033c8 <logPrintf>

  rtcInit();
 8006226:	f7fd ffc9 	bl	80041bc <rtcInit>
  eepromInit();
 800622a:	f7fb ffc3 	bl	80021b4 <eepromInit>
  sdramInit();
 800622e:	f7fe fa73 	bl	8004718 <sdramInit>
  qspiInit();
 8006232:	f7fd fced 	bl	8003c10 <qspiInit>
  qspiEnableMemoryMappedMode();
 8006236:	f7fd fd7d 	bl	8003d34 <qspiEnableMemoryMappedMode>
  spiFlashInit();
 800623a:	f7fe fc31 	bl	8004aa0 <spiFlashInit>
  flashInit();
 800623e:	f7fc f8e9 	bl	8002414 <flashInit>
  touchInit();
 8006242:	f7fe fec5 	bl	8004fd0 <touchInit>
  pwmInit();
 8006246:	f7fd f8ff 	bl	8003448 <pwmInit>
  pwmWrite(_DEF_PWM1, 255);
 800624a:	21ff      	movs	r1, #255	@ 0xff
 800624c:	2000      	movs	r0, #0
 800624e:	f7fd f987 	bl	8003560 <pwmWrite>

  MX_LTDC_Init();
 8006252:	f000 fb63 	bl	800691c <MX_LTDC_Init>
  return true;
}
 8006256:	2001      	movs	r0, #1
 8006258:	bd10      	pop	{r4, pc}
 800625a:	bf00      	nop
 800625c:	08029204 	.word	0x08029204
 8006260:	08029220 	.word	0x08029220
 8006264:	08029234 	.word	0x08029234
 8006268:	0802924c 	.word	0x0802924c
 800626c:	08029258 	.word	0x08029258
 8006270:	431bde83 	.word	0x431bde83
 8006274:	08029270 	.word	0x08029270
 8006278:	0802921c 	.word	0x0802921c

0800627c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800627c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800627e:	4808      	ldr	r0, [pc, #32]	@ (80062a0 <MX_CRC_Init+0x24>)
 8006280:	4b08      	ldr	r3, [pc, #32]	@ (80062a4 <MX_CRC_Init+0x28>)
 8006282:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006284:	2300      	movs	r3, #0
 8006286:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006288:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800628a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800628c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800628e:	2301      	movs	r3, #1
 8006290:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006292:	f001 fc95 	bl	8007bc0 <HAL_CRC_Init>
 8006296:	b900      	cbnz	r0, 800629a <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006298:	bd08      	pop	{r3, pc}
    Error_Handler();
 800629a:	f000 fd50 	bl	8006d3e <Error_Handler>
}
 800629e:	e7fb      	b.n	8006298 <MX_CRC_Init+0x1c>
 80062a0:	24002934 	.word	0x24002934
 80062a4:	58024c00 	.word	0x58024c00

080062a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80062a8:	6802      	ldr	r2, [r0, #0]
 80062aa:	4b0a      	ldr	r3, [pc, #40]	@ (80062d4 <HAL_CRC_MspInit+0x2c>)
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d000      	beq.n	80062b2 <HAL_CRC_MspInit+0xa>
 80062b0:	4770      	bx	lr
{
 80062b2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80062b4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80062b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80062bc:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80062c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80062c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80062d0:	b002      	add	sp, #8
 80062d2:	4770      	bx	lr
 80062d4:	58024c00 	.word	0x58024c00

080062d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80062d8:	b500      	push	{lr}
 80062da:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80062dc:	4b0b      	ldr	r3, [pc, #44]	@ (800630c <MX_DMA_Init+0x34>)
 80062de:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80062ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80062f6:	2200      	movs	r2, #0
 80062f8:	2105      	movs	r1, #5
 80062fa:	200d      	movs	r0, #13
 80062fc:	f001 fbea 	bl	8007ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8006300:	200d      	movs	r0, #13
 8006302:	f001 fbf7 	bl	8007af4 <HAL_NVIC_EnableIRQ>

}
 8006306:	b003      	add	sp, #12
 8006308:	f85d fb04 	ldr.w	pc, [sp], #4
 800630c:	58024400 	.word	0x58024400

08006310 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8006310:	b508      	push	{r3, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8006312:	480f      	ldr	r0, [pc, #60]	@ (8006350 <MX_DMA2D_Init+0x40>)
 8006314:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <MX_DMA2D_Init+0x44>)
 8006316:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006318:	2300      	movs	r3, #0
 800631a:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800631c:	2202      	movs	r2, #2
 800631e:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8006320:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006322:	6443      	str	r3, [r0, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8006324:	6482      	str	r2, [r0, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006326:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006328:	6503      	str	r3, [r0, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800632a:	6543      	str	r3, [r0, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800632c:	6583      	str	r3, [r0, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800632e:	65c3      	str	r3, [r0, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006330:	f002 ffae 	bl	8009290 <HAL_DMA2D_Init>
 8006334:	b928      	cbnz	r0, 8006342 <MX_DMA2D_Init+0x32>
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006336:	2101      	movs	r1, #1
 8006338:	4805      	ldr	r0, [pc, #20]	@ (8006350 <MX_DMA2D_Init+0x40>)
 800633a:	f002 ffeb 	bl	8009314 <HAL_DMA2D_ConfigLayer>
 800633e:	b918      	cbnz	r0, 8006348 <MX_DMA2D_Init+0x38>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8006340:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006342:	f000 fcfc 	bl	8006d3e <Error_Handler>
 8006346:	e7f6      	b.n	8006336 <MX_DMA2D_Init+0x26>
    Error_Handler();
 8006348:	f000 fcf9 	bl	8006d3e <Error_Handler>
}
 800634c:	e7f8      	b.n	8006340 <MX_DMA2D_Init+0x30>
 800634e:	bf00      	nop
 8006350:	24002958 	.word	0x24002958
 8006354:	52001000 	.word	0x52001000

08006358 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8006358:	6802      	ldr	r2, [r0, #0]
 800635a:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <HAL_DMA2D_MspInit+0x2c>)
 800635c:	429a      	cmp	r2, r3
 800635e:	d000      	beq.n	8006362 <HAL_DMA2D_MspInit+0xa>
 8006360:	4770      	bx	lr
{
 8006362:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006364:	4b08      	ldr	r3, [pc, #32]	@ (8006388 <HAL_DMA2D_MspInit+0x30>)
 8006366:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800636a:	f042 0210 	orr.w	r2, r2, #16
 800636e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006372:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800637e:	b002      	add	sp, #8
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	52001000 	.word	0x52001000
 8006388:	58024400 	.word	0x58024400

0800638c <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800638c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638e:	b0b7      	sub	sp, #220	@ 0xdc
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006390:	2300      	movs	r3, #0
 8006392:	9331      	str	r3, [sp, #196]	@ 0xc4
 8006394:	9332      	str	r3, [sp, #200]	@ 0xc8
 8006396:	9333      	str	r3, [sp, #204]	@ 0xcc
 8006398:	9334      	str	r3, [sp, #208]	@ 0xd0
 800639a:	9335      	str	r3, [sp, #212]	@ 0xd4
  if (FMC_Initialized) {
 800639c:	4b30      	ldr	r3, [pc, #192]	@ (8006460 <HAL_FMC_MspInit+0xd4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	b10b      	cbz	r3, 80063a6 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80063a2:	b037      	add	sp, #220	@ 0xdc
 80063a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80063a6:	4b2e      	ldr	r3, [pc, #184]	@ (8006460 <HAL_FMC_MspInit+0xd4>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063ac:	22b8      	movs	r2, #184	@ 0xb8
 80063ae:	2100      	movs	r1, #0
 80063b0:	a802      	add	r0, sp, #8
 80063b2:	f01f fd29 	bl	8025e08 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80063b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063ba:	2300      	movs	r3, #0
 80063bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063c0:	a802      	add	r0, sp, #8
 80063c2:	f006 fb3d 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d147      	bne.n	800645a <HAL_FMC_MspInit+0xce>
  __HAL_RCC_FMC_CLK_ENABLE();
 80063ca:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <HAL_FMC_MspInit+0xd8>)
 80063cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80063d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063d4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80063d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80063dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80063e4:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80063e8:	9331      	str	r3, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ea:	2702      	movs	r7, #2
 80063ec:	9732      	str	r7, [sp, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ee:	2600      	movs	r6, #0
 80063f0:	9633      	str	r6, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f2:	2503      	movs	r5, #3
 80063f4:	9534      	str	r5, [sp, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80063f6:	240c      	movs	r4, #12
 80063f8:	9435      	str	r4, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80063fa:	a931      	add	r1, sp, #196	@ 0xc4
 80063fc:	481a      	ldr	r0, [pc, #104]	@ (8006468 <HAL_FMC_MspInit+0xdc>)
 80063fe:	f003 f943 	bl	8009688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8006402:	2331      	movs	r3, #49	@ 0x31
 8006404:	9331      	str	r3, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006406:	9732      	str	r7, [sp, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006408:	9633      	str	r6, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800640a:	9534      	str	r5, [sp, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800640c:	9435      	str	r4, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800640e:	a931      	add	r1, sp, #196	@ 0xc4
 8006410:	4816      	ldr	r0, [pc, #88]	@ (800646c <HAL_FMC_MspInit+0xe0>)
 8006412:	f003 f939 	bl	8009688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8006416:	f248 1337 	movw	r3, #33079	@ 0x8137
 800641a:	9331      	str	r3, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641c:	9732      	str	r7, [sp, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641e:	9633      	str	r6, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006420:	9534      	str	r5, [sp, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006422:	9435      	str	r4, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006424:	a931      	add	r1, sp, #196	@ 0xc4
 8006426:	4812      	ldr	r0, [pc, #72]	@ (8006470 <HAL_FMC_MspInit+0xe4>)
 8006428:	f003 f92e 	bl	8009688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800642c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8006430:	9331      	str	r3, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006432:	9732      	str	r7, [sp, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006434:	9633      	str	r6, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006436:	9534      	str	r5, [sp, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006438:	9435      	str	r4, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800643a:	a931      	add	r1, sp, #196	@ 0xc4
 800643c:	480d      	ldr	r0, [pc, #52]	@ (8006474 <HAL_FMC_MspInit+0xe8>)
 800643e:	f003 f923 	bl	8009688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8006442:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8006446:	9331      	str	r3, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006448:	9732      	str	r7, [sp, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644a:	9633      	str	r6, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800644c:	9534      	str	r5, [sp, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800644e:	9435      	str	r4, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006450:	a931      	add	r1, sp, #196	@ 0xc4
 8006452:	4809      	ldr	r0, [pc, #36]	@ (8006478 <HAL_FMC_MspInit+0xec>)
 8006454:	f003 f918 	bl	8009688 <HAL_GPIO_Init>
 8006458:	e7a3      	b.n	80063a2 <HAL_FMC_MspInit+0x16>
      Error_Handler();
 800645a:	f000 fc70 	bl	8006d3e <Error_Handler>
 800645e:	e7b4      	b.n	80063ca <HAL_FMC_MspInit+0x3e>
 8006460:	240029c0 	.word	0x240029c0
 8006464:	58024400 	.word	0x58024400
 8006468:	58021400 	.word	0x58021400
 800646c:	58020800 	.word	0x58020800
 8006470:	58021800 	.word	0x58021800
 8006474:	58021000 	.word	0x58021000
 8006478:	58020c00 	.word	0x58020c00

0800647c <MX_FMC_Init>:
{
 800647c:	b500      	push	{lr}
 800647e:	b089      	sub	sp, #36	@ 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006480:	2300      	movs	r3, #0
 8006482:	9301      	str	r3, [sp, #4]
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	9303      	str	r3, [sp, #12]
 8006488:	9304      	str	r3, [sp, #16]
 800648a:	9305      	str	r3, [sp, #20]
 800648c:	9306      	str	r3, [sp, #24]
 800648e:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006490:	4815      	ldr	r0, [pc, #84]	@ (80064e8 <MX_FMC_Init+0x6c>)
 8006492:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <MX_FMC_Init+0x70>)
 8006494:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8006496:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006498:	2201      	movs	r2, #1
 800649a:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800649c:	2208      	movs	r2, #8
 800649e:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80064a0:	2210      	movs	r2, #16
 80064a2:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80064a4:	2240      	movs	r2, #64	@ 0x40
 80064a6:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80064a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064ac:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80064ae:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80064b0:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80064b4:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80064b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80064ba:	6242      	str	r2, [r0, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80064bc:	6283      	str	r3, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80064be:	2302      	movs	r3, #2
 80064c0:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80064c2:	2207      	movs	r2, #7
 80064c4:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 80064c6:	2204      	movs	r2, #4
 80064c8:	9203      	str	r2, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 80064ca:	2206      	movs	r2, #6
 80064cc:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80064ce:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 80064d0:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80064d2:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80064d4:	a901      	add	r1, sp, #4
 80064d6:	f007 fb8b 	bl	800dbf0 <HAL_SDRAM_Init>
 80064da:	b910      	cbnz	r0, 80064e2 <MX_FMC_Init+0x66>
}
 80064dc:	b009      	add	sp, #36	@ 0x24
 80064de:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80064e2:	f000 fc2c 	bl	8006d3e <Error_Handler>
}
 80064e6:	e7f9      	b.n	80064dc <MX_FMC_Init+0x60>
 80064e8:	240029c4 	.word	0x240029c4
 80064ec:	52004140 	.word	0x52004140

080064f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80064f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80064f2:	f7ff ff4b 	bl	800638c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80064f6:	bd08      	pop	{r3, pc}

080064f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80064f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	b08e      	sub	sp, #56	@ 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064fe:	2400      	movs	r4, #0
 8006500:	9409      	str	r4, [sp, #36]	@ 0x24
 8006502:	940a      	str	r4, [sp, #40]	@ 0x28
 8006504:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006506:	940c      	str	r4, [sp, #48]	@ 0x30
 8006508:	940d      	str	r4, [sp, #52]	@ 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800650a:	4b5d      	ldr	r3, [pc, #372]	@ (8006680 <MX_GPIO_Init+0x188>)
 800650c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006510:	f042 0210 	orr.w	r2, r2, #16
 8006514:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006518:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800651c:	f002 0210 	and.w	r2, r2, #16
 8006520:	9201      	str	r2, [sp, #4]
 8006522:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006524:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006528:	f042 0204 	orr.w	r2, r2, #4
 800652c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006530:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006534:	f002 0204 	and.w	r2, r2, #4
 8006538:	9202      	str	r2, [sp, #8]
 800653a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800653c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006540:	f042 0220 	orr.w	r2, r2, #32
 8006544:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006548:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800654c:	f002 0220 	and.w	r2, r2, #32
 8006550:	9203      	str	r2, [sp, #12]
 8006552:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006554:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006558:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800655c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006560:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006564:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006568:	9204      	str	r2, [sp, #16]
 800656a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800656c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006578:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800657c:	f002 0201 	and.w	r2, r2, #1
 8006580:	9205      	str	r2, [sp, #20]
 8006582:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006584:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006588:	f042 0202 	orr.w	r2, r2, #2
 800658c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006590:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006594:	f002 0202 	and.w	r2, r2, #2
 8006598:	9206      	str	r2, [sp, #24]
 800659a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800659c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80065a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065ac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80065b0:	9207      	str	r2, [sp, #28]
 80065b2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065b8:	f042 0208 	orr.w	r2, r2, #8
 80065bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80065c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	9308      	str	r3, [sp, #32]
 80065ca:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80065cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 800668c <MX_GPIO_Init+0x194>
 80065d0:	2201      	movs	r2, #1
 80065d2:	2110      	movs	r1, #16
 80065d4:	4650      	mov	r0, sl
 80065d6:	f003 fa0a 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 80065da:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 8006690 <MX_GPIO_Init+0x198>
 80065de:	2201      	movs	r2, #1
 80065e0:	2140      	movs	r1, #64	@ 0x40
 80065e2:	4648      	mov	r0, r9
 80065e4:	f003 fa03 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80065e8:	4e26      	ldr	r6, [pc, #152]	@ (8006684 <MX_GPIO_Init+0x18c>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80065f0:	4630      	mov	r0, r6
 80065f2:	f003 f9fc 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80065f6:	4f24      	ldr	r7, [pc, #144]	@ (8006688 <MX_GPIO_Init+0x190>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80065fe:	4638      	mov	r0, r7
 8006600:	f003 f9f5 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006604:	f04f 0810 	mov.w	r8, #16
 8006608:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800660c:	2501      	movs	r5, #1
 800660e:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006610:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006612:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006614:	a909      	add	r1, sp, #36	@ 0x24
 8006616:	4650      	mov	r0, sl
 8006618:	f003 f836 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800661c:	2340      	movs	r3, #64	@ 0x40
 800661e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006620:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006622:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006624:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006626:	a909      	add	r1, sp, #36	@ 0x24
 8006628:	4648      	mov	r0, r9
 800662a:	f003 f82d 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800662e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006632:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006634:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006636:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006638:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800663a:	a909      	add	r1, sp, #36	@ 0x24
 800663c:	4630      	mov	r0, r6
 800663e:	f003 f823 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006642:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006646:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006648:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800664a:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800664c:	a909      	add	r1, sp, #36	@ 0x24
 800664e:	4638      	mov	r0, r7
 8006650:	f003 f81a 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006658:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800665a:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665c:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800665e:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006660:	a909      	add	r1, sp, #36	@ 0x24
 8006662:	4638      	mov	r0, r7
 8006664:	f003 f810 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006668:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800666c:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800666e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006670:	a909      	add	r1, sp, #36	@ 0x24
 8006672:	4630      	mov	r0, r6
 8006674:	f003 f808 	bl	8009688 <HAL_GPIO_Init>

}
 8006678:	b00e      	add	sp, #56	@ 0x38
 800667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667e:	bf00      	nop
 8006680:	58024400 	.word	0x58024400
 8006684:	58020400 	.word	0x58020400
 8006688:	58021800 	.word	0x58021800
 800668c:	58021000 	.word	0x58021000
 8006690:	58021400 	.word	0x58021400

08006694 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006694:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006696:	4812      	ldr	r0, [pc, #72]	@ (80066e0 <MX_I2C1_Init+0x4c>)
 8006698:	4b12      	ldr	r3, [pc, #72]	@ (80066e4 <MX_I2C1_Init+0x50>)
 800669a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 800669c:	4b12      	ldr	r3, [pc, #72]	@ (80066e8 <MX_I2C1_Init+0x54>)
 800669e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80066a4:	2201      	movs	r2, #1
 80066a6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80066a8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80066aa:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80066ac:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80066ae:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80066b0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80066b2:	f003 fbb7 	bl	8009e24 <HAL_I2C_Init>
 80066b6:	b950      	cbnz	r0, 80066ce <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80066b8:	2100      	movs	r1, #0
 80066ba:	4809      	ldr	r0, [pc, #36]	@ (80066e0 <MX_I2C1_Init+0x4c>)
 80066bc:	f004 fa51 	bl	800ab62 <HAL_I2CEx_ConfigAnalogFilter>
 80066c0:	b940      	cbnz	r0, 80066d4 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80066c2:	2100      	movs	r1, #0
 80066c4:	4806      	ldr	r0, [pc, #24]	@ (80066e0 <MX_I2C1_Init+0x4c>)
 80066c6:	f004 fa7a 	bl	800abbe <HAL_I2CEx_ConfigDigitalFilter>
 80066ca:	b930      	cbnz	r0, 80066da <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80066cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80066ce:	f000 fb36 	bl	8006d3e <Error_Handler>
 80066d2:	e7f1      	b.n	80066b8 <MX_I2C1_Init+0x24>
    Error_Handler();
 80066d4:	f000 fb33 	bl	8006d3e <Error_Handler>
 80066d8:	e7f3      	b.n	80066c2 <MX_I2C1_Init+0x2e>
    Error_Handler();
 80066da:	f000 fb30 	bl	8006d3e <Error_Handler>
}
 80066de:	e7f5      	b.n	80066cc <MX_I2C1_Init+0x38>
 80066e0:	24002a4c 	.word	0x24002a4c
 80066e4:	40005400 	.word	0x40005400
 80066e8:	00d049fb 	.word	0x00d049fb

080066ec <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80066ec:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80066ee:	4812      	ldr	r0, [pc, #72]	@ (8006738 <MX_I2C4_Init+0x4c>)
 80066f0:	4b12      	ldr	r3, [pc, #72]	@ (800673c <MX_I2C4_Init+0x50>)
 80066f2:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x00D049FB;
 80066f4:	4b12      	ldr	r3, [pc, #72]	@ (8006740 <MX_I2C4_Init+0x54>)
 80066f6:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80066fc:	2201      	movs	r2, #1
 80066fe:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006700:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8006702:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006704:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006706:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006708:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800670a:	f003 fb8b 	bl	8009e24 <HAL_I2C_Init>
 800670e:	b950      	cbnz	r0, 8006726 <MX_I2C4_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006710:	2100      	movs	r1, #0
 8006712:	4809      	ldr	r0, [pc, #36]	@ (8006738 <MX_I2C4_Init+0x4c>)
 8006714:	f004 fa25 	bl	800ab62 <HAL_I2CEx_ConfigAnalogFilter>
 8006718:	b940      	cbnz	r0, 800672c <MX_I2C4_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800671a:	2100      	movs	r1, #0
 800671c:	4806      	ldr	r0, [pc, #24]	@ (8006738 <MX_I2C4_Init+0x4c>)
 800671e:	f004 fa4e 	bl	800abbe <HAL_I2CEx_ConfigDigitalFilter>
 8006722:	b930      	cbnz	r0, 8006732 <MX_I2C4_Init+0x46>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8006724:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006726:	f000 fb0a 	bl	8006d3e <Error_Handler>
 800672a:	e7f1      	b.n	8006710 <MX_I2C4_Init+0x24>
    Error_Handler();
 800672c:	f000 fb07 	bl	8006d3e <Error_Handler>
 8006730:	e7f3      	b.n	800671a <MX_I2C4_Init+0x2e>
    Error_Handler();
 8006732:	f000 fb04 	bl	8006d3e <Error_Handler>
}
 8006736:	e7f5      	b.n	8006724 <MX_I2C4_Init+0x38>
 8006738:	240029f8 	.word	0x240029f8
 800673c:	58001c00 	.word	0x58001c00
 8006740:	00d049fb 	.word	0x00d049fb

08006744 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006744:	b530      	push	{r4, r5, lr}
 8006746:	b0b9      	sub	sp, #228	@ 0xe4
 8006748:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800674a:	2100      	movs	r1, #0
 800674c:	9133      	str	r1, [sp, #204]	@ 0xcc
 800674e:	9134      	str	r1, [sp, #208]	@ 0xd0
 8006750:	9135      	str	r1, [sp, #212]	@ 0xd4
 8006752:	9136      	str	r1, [sp, #216]	@ 0xd8
 8006754:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006756:	22b8      	movs	r2, #184	@ 0xb8
 8006758:	a804      	add	r0, sp, #16
 800675a:	f01f fb55 	bl	8025e08 <memset>
  if(i2cHandle->Instance==I2C1)
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	4a47      	ldr	r2, [pc, #284]	@ (8006880 <HAL_I2C_MspInit+0x13c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d004      	beq.n	8006770 <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 8006766:	4a47      	ldr	r2, [pc, #284]	@ (8006884 <HAL_I2C_MspInit+0x140>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d044      	beq.n	80067f6 <HAL_I2C_MspInit+0xb2>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800676c:	b039      	add	sp, #228	@ 0xe4
 800676e:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006770:	2208      	movs	r2, #8
 8006772:	2300      	movs	r3, #0
 8006774:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006778:	a804      	add	r0, sp, #16
 800677a:	f006 f961 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 800677e:	2800      	cmp	r0, #0
 8006780:	d136      	bne.n	80067f0 <HAL_I2C_MspInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006782:	4c41      	ldr	r4, [pc, #260]	@ (8006888 <HAL_I2C_MspInit+0x144>)
 8006784:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8006790:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800679c:	23c0      	movs	r3, #192	@ 0xc0
 800679e:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067a0:	2312      	movs	r3, #18
 80067a2:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a4:	2500      	movs	r5, #0
 80067a6:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067a8:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80067aa:	2304      	movs	r3, #4
 80067ac:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ae:	a933      	add	r1, sp, #204	@ 0xcc
 80067b0:	4836      	ldr	r0, [pc, #216]	@ (800688c <HAL_I2C_MspInit+0x148>)
 80067b2:	f002 ff69 	bl	8009688 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80067b6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80067ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80067be:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 80067c2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80067c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80067ce:	462a      	mov	r2, r5
 80067d0:	2105      	movs	r1, #5
 80067d2:	201f      	movs	r0, #31
 80067d4:	f001 f97e 	bl	8007ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80067d8:	201f      	movs	r0, #31
 80067da:	f001 f98b 	bl	8007af4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80067de:	462a      	mov	r2, r5
 80067e0:	2105      	movs	r1, #5
 80067e2:	2020      	movs	r0, #32
 80067e4:	f001 f976 	bl	8007ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80067e8:	2020      	movs	r0, #32
 80067ea:	f001 f983 	bl	8007af4 <HAL_NVIC_EnableIRQ>
 80067ee:	e7bd      	b.n	800676c <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80067f0:	f000 faa5 	bl	8006d3e <Error_Handler>
 80067f4:	e7c5      	b.n	8006782 <HAL_I2C_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80067f6:	2210      	movs	r2, #16
 80067f8:	2300      	movs	r3, #0
 80067fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067fe:	a804      	add	r0, sp, #16
 8006800:	f006 f91e 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 8006804:	2800      	cmp	r0, #0
 8006806:	d137      	bne.n	8006878 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006808:	4c1f      	ldr	r4, [pc, #124]	@ (8006888 <HAL_I2C_MspInit+0x144>)
 800680a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800680e:	f043 0308 	orr.w	r3, r3, #8
 8006812:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8006816:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006822:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006826:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006828:	2312      	movs	r3, #18
 800682a:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682c:	2500      	movs	r5, #0
 800682e:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006830:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006832:	2304      	movs	r3, #4
 8006834:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006836:	a933      	add	r1, sp, #204	@ 0xcc
 8006838:	4815      	ldr	r0, [pc, #84]	@ (8006890 <HAL_I2C_MspInit+0x14c>)
 800683a:	f002 ff25 	bl	8009688 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800683e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8006842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006846:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 800684a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800684e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006852:	9303      	str	r3, [sp, #12]
 8006854:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8006856:	462a      	mov	r2, r5
 8006858:	2105      	movs	r1, #5
 800685a:	205f      	movs	r0, #95	@ 0x5f
 800685c:	f001 f93a 	bl	8007ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8006860:	205f      	movs	r0, #95	@ 0x5f
 8006862:	f001 f947 	bl	8007af4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8006866:	462a      	mov	r2, r5
 8006868:	2105      	movs	r1, #5
 800686a:	2060      	movs	r0, #96	@ 0x60
 800686c:	f001 f932 	bl	8007ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8006870:	2060      	movs	r0, #96	@ 0x60
 8006872:	f001 f93f 	bl	8007af4 <HAL_NVIC_EnableIRQ>
}
 8006876:	e779      	b.n	800676c <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8006878:	f000 fa61 	bl	8006d3e <Error_Handler>
 800687c:	e7c4      	b.n	8006808 <HAL_I2C_MspInit+0xc4>
 800687e:	bf00      	nop
 8006880:	40005400 	.word	0x40005400
 8006884:	58001c00 	.word	0x58001c00
 8006888:	58024400 	.word	0x58024400
 800688c:	58020400 	.word	0x58020400
 8006890:	58020c00 	.word	0x58020c00

08006894 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006894:	b510      	push	{r4, lr}

  if(i2cHandle->Instance==I2C1)
 8006896:	6803      	ldr	r3, [r0, #0]
 8006898:	4a1b      	ldr	r2, [pc, #108]	@ (8006908 <HAL_I2C_MspDeInit+0x74>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <HAL_I2C_MspDeInit+0x12>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 800689e:	4a1b      	ldr	r2, [pc, #108]	@ (800690c <HAL_I2C_MspDeInit+0x78>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d017      	beq.n	80068d4 <HAL_I2C_MspDeInit+0x40>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 80068a4:	bd10      	pop	{r4, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 80068a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006910 <HAL_I2C_MspDeInit+0x7c>)
 80068a8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80068ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80068b4:	4c17      	ldr	r4, [pc, #92]	@ (8006914 <HAL_I2C_MspDeInit+0x80>)
 80068b6:	2140      	movs	r1, #64	@ 0x40
 80068b8:	4620      	mov	r0, r4
 80068ba:	f002 ffef 	bl	800989c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80068be:	2180      	movs	r1, #128	@ 0x80
 80068c0:	4620      	mov	r0, r4
 80068c2:	f002 ffeb 	bl	800989c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80068c6:	201f      	movs	r0, #31
 80068c8:	f001 f918 	bl	8007afc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80068cc:	2020      	movs	r0, #32
 80068ce:	f001 f915 	bl	8007afc <HAL_NVIC_DisableIRQ>
 80068d2:	e7e7      	b.n	80068a4 <HAL_I2C_MspDeInit+0x10>
    __HAL_RCC_I2C4_CLK_DISABLE();
 80068d4:	f502 320a 	add.w	r2, r2, #141312	@ 0x22800
 80068d8:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80068dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 80068e4:	4c0c      	ldr	r4, [pc, #48]	@ (8006918 <HAL_I2C_MspDeInit+0x84>)
 80068e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80068ea:	4620      	mov	r0, r4
 80068ec:	f002 ffd6 	bl	800989c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 80068f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80068f4:	4620      	mov	r0, r4
 80068f6:	f002 ffd1 	bl	800989c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80068fa:	205f      	movs	r0, #95	@ 0x5f
 80068fc:	f001 f8fe 	bl	8007afc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 8006900:	2060      	movs	r0, #96	@ 0x60
 8006902:	f001 f8fb 	bl	8007afc <HAL_NVIC_DisableIRQ>
}
 8006906:	e7cd      	b.n	80068a4 <HAL_I2C_MspDeInit+0x10>
 8006908:	40005400 	.word	0x40005400
 800690c:	58001c00 	.word	0x58001c00
 8006910:	58024400 	.word	0x58024400
 8006914:	58020400 	.word	0x58020400
 8006918:	58020c00 	.word	0x58020c00

0800691c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800691c:	b500      	push	{lr}
 800691e:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006920:	2234      	movs	r2, #52	@ 0x34
 8006922:	2100      	movs	r1, #0
 8006924:	a801      	add	r0, sp, #4
 8006926:	f01f fa6f 	bl	8025e08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800692a:	4828      	ldr	r0, [pc, #160]	@ (80069cc <MX_LTDC_Init+0xb0>)
 800692c:	4b28      	ldr	r3, [pc, #160]	@ (80069d0 <MX_LTDC_Init+0xb4>)
 800692e:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006930:	2300      	movs	r3, #0
 8006932:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006934:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006936:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006938:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 7;
 800693a:	2207      	movs	r2, #7
 800693c:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 7;
 800693e:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 57;
 8006940:	2239      	movs	r2, #57	@ 0x39
 8006942:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 27;
 8006944:	221b      	movs	r2, #27
 8006946:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 857;
 8006948:	f240 3259 	movw	r2, #857	@ 0x359
 800694c:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 507;
 800694e:	f240 12fb 	movw	r2, #507	@ 0x1fb
 8006952:	6282      	str	r2, [r0, #40]	@ 0x28
  hltdc.Init.TotalWidth = 867;
 8006954:	f240 3263 	movw	r2, #867	@ 0x363
 8006958:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 517;
 800695a:	f240 2205 	movw	r2, #517	@ 0x205
 800695e:	6302      	str	r2, [r0, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006960:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006964:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006968:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800696c:	f004 fa2c 	bl	800adc8 <HAL_LTDC_Init>
 8006970:	bb28      	cbnz	r0, 80069be <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 8006972:	2200      	movs	r2, #0
 8006974:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 800;
 8006976:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800697a:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 800697c:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 480;
 800697e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006982:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8006984:	2002      	movs	r0, #2
 8006986:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8006988:	20ff      	movs	r0, #255	@ 0xff
 800698a:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 800698c:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800698e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8006992:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006994:	2007      	movs	r0, #7
 8006996:	9009      	str	r0, [sp, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8006998:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 800699c:	900a      	str	r0, [sp, #40]	@ 0x28
  pLayerCfg.ImageWidth = 800;
 800699e:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 80069a0:	930c      	str	r3, [sp, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80069a2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80069a6:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80069aa:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80069ae:	a901      	add	r1, sp, #4
 80069b0:	4806      	ldr	r0, [pc, #24]	@ (80069cc <MX_LTDC_Init+0xb0>)
 80069b2:	f004 faf2 	bl	800af9a <HAL_LTDC_ConfigLayer>
 80069b6:	b928      	cbnz	r0, 80069c4 <MX_LTDC_Init+0xa8>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80069b8:	b00f      	add	sp, #60	@ 0x3c
 80069ba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80069be:	f000 f9be 	bl	8006d3e <Error_Handler>
 80069c2:	e7d6      	b.n	8006972 <MX_LTDC_Init+0x56>
    Error_Handler();
 80069c4:	f000 f9bb 	bl	8006d3e <Error_Handler>
}
 80069c8:	e7f6      	b.n	80069b8 <MX_LTDC_Init+0x9c>
 80069ca:	bf00      	nop
 80069cc:	24002aa0 	.word	0x24002aa0
 80069d0:	50001000 	.word	0x50001000

080069d4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	b0bd      	sub	sp, #244	@ 0xf4
 80069da:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069dc:	2100      	movs	r1, #0
 80069de:	9137      	str	r1, [sp, #220]	@ 0xdc
 80069e0:	9138      	str	r1, [sp, #224]	@ 0xe0
 80069e2:	9139      	str	r1, [sp, #228]	@ 0xe4
 80069e4:	913a      	str	r1, [sp, #232]	@ 0xe8
 80069e6:	913b      	str	r1, [sp, #236]	@ 0xec
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069e8:	22b8      	movs	r2, #184	@ 0xb8
 80069ea:	a808      	add	r0, sp, #32
 80069ec:	f01f fa0c 	bl	8025e08 <memset>
  if(ltdcHandle->Instance==LTDC)
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006c20 <HAL_LTDC_MspInit+0x24c>)
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d002      	beq.n	80069fe <HAL_LTDC_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80069f8:	b03d      	add	sp, #244	@ 0xf4
 80069fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80069fe:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006a02:	2300      	movs	r3, #0
 8006a04:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8006a08:	2320      	movs	r3, #32
 8006a0a:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8006a0c:	2381      	movs	r3, #129	@ 0x81
 8006a0e:	9313      	str	r3, [sp, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006a10:	2302      	movs	r3, #2
 8006a12:	9314      	str	r3, [sp, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8006a14:	9315      	str	r3, [sp, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8006a16:	2304      	movs	r3, #4
 8006a18:	9316      	str	r3, [sp, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8006a1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006a1e:	9317      	str	r3, [sp, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a20:	a808      	add	r0, sp, #32
 8006a22:	f006 f80d 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 80f6 	bne.w	8006c18 <HAL_LTDC_MspInit+0x244>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8006c24 <HAL_LTDC_MspInit+0x250>)
 8006a2e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8006a32:	f042 0208 	orr.w	r2, r2, #8
 8006a36:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8006a3a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8006a3e:	f002 0208 	and.w	r2, r2, #8
 8006a42:	9201      	str	r2, [sp, #4]
 8006a44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a4a:	f042 0220 	orr.w	r2, r2, #32
 8006a4e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006a52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a56:	f002 0220 	and.w	r2, r2, #32
 8006a5a:	9202      	str	r2, [sp, #8]
 8006a5c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006a6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a6e:	f002 0201 	and.w	r2, r2, #1
 8006a72:	9203      	str	r2, [sp, #12]
 8006a74:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a7a:	f042 0202 	orr.w	r2, r2, #2
 8006a7e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006a82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a86:	f002 0202 	and.w	r2, r2, #2
 8006a8a:	9204      	str	r2, [sp, #16]
 8006a8c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a96:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006a9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a9e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006aa2:	9205      	str	r2, [sp, #20]
 8006aa4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006aa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006aaa:	f042 0204 	orr.w	r2, r2, #4
 8006aae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006ab2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ab6:	f002 0204 	and.w	r2, r2, #4
 8006aba:	9206      	str	r2, [sp, #24]
 8006abc:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006abe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ac2:	f042 0208 	orr.w	r2, r2, #8
 8006ac6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	9307      	str	r3, [sp, #28]
 8006ad4:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ad6:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 8006ada:	f8cd a0dc 	str.w	sl, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ade:	2602      	movs	r6, #2
 8006ae0:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae2:	2400      	movs	r4, #0
 8006ae4:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae6:	2503      	movs	r5, #3
 8006ae8:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006aea:	270e      	movs	r7, #14
 8006aec:	973b      	str	r7, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006aee:	a937      	add	r1, sp, #220	@ 0xdc
 8006af0:	484d      	ldr	r0, [pc, #308]	@ (8006c28 <HAL_LTDC_MspInit+0x254>)
 8006af2:	f002 fdc9 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8006af6:	f248 23e0 	movw	r3, #33504	@ 0x82e0
 8006afa:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006afc:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afe:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b00:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b02:	973b      	str	r7, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b04:	f8df 9128 	ldr.w	r9, [pc, #296]	@ 8006c30 <HAL_LTDC_MspInit+0x25c>
 8006b08:	a937      	add	r1, sp, #220	@ 0xdc
 8006b0a:	4648      	mov	r0, r9
 8006b0c:	f002 fdbc 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b10:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b12:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b14:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b16:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006b18:	2309      	movs	r3, #9
 8006b1a:	933b      	str	r3, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b1c:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8006c34 <HAL_LTDC_MspInit+0x260>
 8006b20:	a937      	add	r1, sp, #220	@ 0xdc
 8006b22:	4640      	mov	r0, r8
 8006b24:	f002 fdb0 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006b28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006b2c:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2e:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b30:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b32:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b34:	973b      	str	r7, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b36:	a937      	add	r1, sp, #220	@ 0xdc
 8006b38:	4640      	mov	r0, r8
 8006b3a:	f002 fda5 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b3e:	f04f 0bc0 	mov.w	fp, #192	@ 0xc0
 8006b42:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b46:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b48:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b4a:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b4c:	973b      	str	r7, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b4e:	a937      	add	r1, sp, #220	@ 0xdc
 8006b50:	4836      	ldr	r0, [pc, #216]	@ (8006c2c <HAL_LTDC_MspInit+0x258>)
 8006b52:	f002 fd99 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b56:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b5a:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b5c:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b5e:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b60:	973b      	str	r7, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b62:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8006c38 <HAL_LTDC_MspInit+0x264>
 8006b66:	a937      	add	r1, sp, #220	@ 0xdc
 8006b68:	4658      	mov	r0, fp
 8006b6a:	f002 fd8d 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b72:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b74:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b76:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b78:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 8006b7a:	230a      	movs	r3, #10
 8006b7c:	933b      	str	r3, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b7e:	a937      	add	r1, sp, #220	@ 0xdc
 8006b80:	4658      	mov	r0, fp
 8006b82:	f002 fd81 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b8a:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b8c:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8e:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b90:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8006b92:	230d      	movs	r3, #13
 8006b94:	933b      	str	r3, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b96:	a937      	add	r1, sp, #220	@ 0xdc
 8006b98:	4648      	mov	r0, r9
 8006b9a:	f002 fd75 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b9e:	f8cd a0dc 	str.w	sl, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba2:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba4:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ba6:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
 8006ba8:	230c      	movs	r3, #12
 8006baa:	933b      	str	r3, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bac:	a937      	add	r1, sp, #220	@ 0xdc
 8006bae:	4648      	mov	r0, r9
 8006bb0:	f002 fd6a 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb8:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bba:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bbc:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006bbe:	2309      	movs	r3, #9
 8006bc0:	933b      	str	r3, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bc2:	f509 6940 	add.w	r9, r9, #3072	@ 0xc00
 8006bc6:	a937      	add	r1, sp, #220	@ 0xdc
 8006bc8:	4648      	mov	r0, r9
 8006bca:	f002 fd5d 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006bce:	2308      	movs	r3, #8
 8006bd0:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd2:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd4:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd6:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006bd8:	973b      	str	r7, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bda:	a937      	add	r1, sp, #220	@ 0xdc
 8006bdc:	4648      	mov	r0, r9
 8006bde:	f002 fd53 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006be2:	2320      	movs	r3, #32
 8006be4:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be6:	9638      	str	r6, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be8:	9439      	str	r4, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bea:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_LTDC;
 8006bec:	953b      	str	r5, [sp, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bee:	a937      	add	r1, sp, #220	@ 0xdc
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	f002 fd49 	bl	8009688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	2105      	movs	r1, #5
 8006bfa:	2058      	movs	r0, #88	@ 0x58
 8006bfc:	f000 ff6a 	bl	8007ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006c00:	2058      	movs	r0, #88	@ 0x58
 8006c02:	f000 ff77 	bl	8007af4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 8006c06:	4622      	mov	r2, r4
 8006c08:	2105      	movs	r1, #5
 8006c0a:	2059      	movs	r0, #89	@ 0x59
 8006c0c:	f000 ff62 	bl	8007ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8006c10:	2059      	movs	r0, #89	@ 0x59
 8006c12:	f000 ff6f 	bl	8007af4 <HAL_NVIC_EnableIRQ>
}
 8006c16:	e6ef      	b.n	80069f8 <HAL_LTDC_MspInit+0x24>
      Error_Handler();
 8006c18:	f000 f891 	bl	8006d3e <Error_Handler>
 8006c1c:	e706      	b.n	8006a2c <HAL_LTDC_MspInit+0x58>
 8006c1e:	bf00      	nop
 8006c20:	50001000 	.word	0x50001000
 8006c24:	58024400 	.word	0x58024400
 8006c28:	58021400 	.word	0x58021400
 8006c2c:	58021800 	.word	0x58021800
 8006c30:	58020000 	.word	0x58020000
 8006c34:	58020400 	.word	0x58020400
 8006c38:	58020800 	.word	0x58020800

08006c3c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8006c40:	2400      	movs	r4, #0
 8006c42:	9400      	str	r4, [sp, #0]
 8006c44:	9401      	str	r4, [sp, #4]
 8006c46:	9402      	str	r4, [sp, #8]
 8006c48:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8006c4a:	f000 ff6f 	bl	8007b2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006c4e:	2501      	movs	r5, #1
 8006c50:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8006c54:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8006c58:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8006c5a:	231f      	movs	r3, #31
 8006c5c:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8006c60:	2387      	movs	r3, #135	@ 0x87
 8006c62:	f88d 3009 	strb.w	r3, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8006c66:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006c6a:	2603      	movs	r6, #3
 8006c6c:	f88d 600b 	strb.w	r6, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8006c70:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8006c74:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8006c78:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8006c7c:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006c80:	4668      	mov	r0, sp
 8006c82:	f000 ff71 	bl	8007b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8006c86:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8006c8a:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8006c8e:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8006c90:	2317      	movs	r3, #23
 8006c92:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8006c96:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006c9a:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8006c9e:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8006ca2:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006ca6:	4668      	mov	r0, sp
 8006ca8:	f000 ff5e 	bl	8007b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8006cac:	2302      	movs	r3, #2
 8006cae:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8006cb2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8006cb6:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8006cb8:	230d      	movs	r3, #13
 8006cba:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8006cbe:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8006cc2:	f88d 400e 	strb.w	r4, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006cc6:	4668      	mov	r0, sp
 8006cc8:	f000 ff4e 	bl	8007b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8006ccc:	f88d 6001 	strb.w	r6, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8006cd0:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8006cd4:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8006cd6:	2313      	movs	r3, #19
 8006cd8:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8006cdc:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8006ce0:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006ce4:	4668      	mov	r0, sp
 8006ce6:	f000 ff3f 	bl	8007b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8006cea:	2604      	movs	r6, #4
 8006cec:	f88d 6001 	strb.w	r6, [sp, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8006cf0:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8006cf4:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8006cf6:	2318      	movs	r3, #24
 8006cf8:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8006cfc:	f88d 500a 	strb.w	r5, [sp, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8006d00:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006d04:	4668      	mov	r0, sp
 8006d06:	f000 ff2f 	bl	8007b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8006d0a:	2305      	movs	r3, #5
 8006d0c:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8006d10:	2316      	movs	r3, #22
 8006d12:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8006d16:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8006d1a:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006d1e:	4668      	mov	r0, sp
 8006d20:	f000 ff22 	bl	8007b68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8006d24:	4630      	mov	r0, r6
 8006d26:	f000 ff0f 	bl	8007b48 <HAL_MPU_Enable>

}
 8006d2a:	b004      	add	sp, #16
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}

08006d2e <touchgfxInit>:
{
 8006d2e:	b508      	push	{r3, lr}
  MX_TouchGFX_Init();
 8006d30:	f009 fb2a 	bl	8010388 <MX_TouchGFX_Init>
}
 8006d34:	bd08      	pop	{r3, pc}

08006d36 <touchgfxUpdate>:
{
 8006d36:	b508      	push	{r3, lr}
  MX_TouchGFX_Process();
 8006d38:	f009 fb2c 	bl	8010394 <MX_TouchGFX_Process>
}
 8006d3c:	bd08      	pop	{r3, pc}

08006d3e <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006d3e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d40:	e7fe      	b.n	8006d40 <Error_Handler+0x2>
	...

08006d44 <SystemClock_Config>:
{
 8006d44:	b500      	push	{lr}
 8006d46:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d48:	224c      	movs	r2, #76	@ 0x4c
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	a809      	add	r0, sp, #36	@ 0x24
 8006d4e:	f01f f85b 	bl	8025e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d52:	2220      	movs	r2, #32
 8006d54:	2100      	movs	r1, #0
 8006d56:	a801      	add	r0, sp, #4
 8006d58:	f01f f856 	bl	8025e08 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006d5c:	2002      	movs	r0, #2
 8006d5e:	f004 ffb9 	bl	800bcd4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006d62:	2300      	movs	r3, #0
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4b24      	ldr	r3, [pc, #144]	@ (8006df8 <SystemClock_Config+0xb4>)
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006d6e:	619a      	str	r2, [r3, #24]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006df8 <SystemClock_Config+0xb4>)
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006d82:	d0fa      	beq.n	8006d7a <SystemClock_Config+0x36>
  HAL_PWR_EnableBkUpAccess();
 8006d84:	f004 ff9e 	bl	800bcc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006d88:	4a1c      	ldr	r2, [pc, #112]	@ (8006dfc <SystemClock_Config+0xb8>)
 8006d8a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006d8c:	f023 0318 	bic.w	r3, r3, #24
 8006d90:	6713      	str	r3, [r2, #112]	@ 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006d92:	2205      	movs	r2, #5
 8006d94:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006d96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006d9a:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006da0:	2302      	movs	r3, #2
 8006da2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006da4:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8006da6:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8006da8:	202c      	movs	r0, #44	@ 0x2c
 8006daa:	9015      	str	r0, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006dac:	9116      	str	r1, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8006dae:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006db0:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006db2:	230c      	movs	r3, #12
 8006db4:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006dba:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006dbc:	a809      	add	r0, sp, #36	@ 0x24
 8006dbe:	f004 ffb3 	bl	800bd28 <HAL_RCC_OscConfig>
 8006dc2:	b9a8      	cbnz	r0, 8006df0 <SystemClock_Config+0xac>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006dc4:	233f      	movs	r3, #63	@ 0x3f
 8006dc6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006dc8:	2103      	movs	r1, #3
 8006dca:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006dd4:	2340      	movs	r3, #64	@ 0x40
 8006dd6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006dd8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006dde:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006de0:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006de2:	a801      	add	r0, sp, #4
 8006de4:	f005 fb90 	bl	800c508 <HAL_RCC_ClockConfig>
 8006de8:	b920      	cbnz	r0, 8006df4 <SystemClock_Config+0xb0>
}
 8006dea:	b01d      	add	sp, #116	@ 0x74
 8006dec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006df0:	f7ff ffa5 	bl	8006d3e <Error_Handler>
    Error_Handler();
 8006df4:	f7ff ffa3 	bl	8006d3e <Error_Handler>
 8006df8:	58024800 	.word	0x58024800
 8006dfc:	58024400 	.word	0x58024400

08006e00 <main>:
{
 8006e00:	b508      	push	{r3, lr}
  MPU_Config();
 8006e02:	f7ff ff1b 	bl	8006c3c <MPU_Config>
  HAL_Init();
 8006e06:	f000 fdad 	bl	8007964 <HAL_Init>
  SystemClock_Config();
 8006e0a:	f7ff ff9b 	bl	8006d44 <SystemClock_Config>
  MX_GPIO_Init();
 8006e0e:	f7ff fb73 	bl	80064f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006e12:	f7ff fa61 	bl	80062d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8006e16:	f000 fbef 	bl	80075f8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8006e1a:	f000 f933 	bl	8007084 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8006e1e:	f000 fc1f 	bl	8007660 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8006e22:	f7ff fc37 	bl	8006694 <MX_I2C1_Init>
  MX_I2C4_Init();
 8006e26:	f7ff fc61 	bl	80066ec <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8006e2a:	f000 f813 	bl	8006e54 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 8006e2e:	f000 f96b 	bl	8007108 <MX_SPI2_Init>
  MX_TIM13_Init();
 8006e32:	f000 fba7 	bl	8007584 <MX_TIM13_Init>
  MX_FMC_Init();
 8006e36:	f7ff fb21 	bl	800647c <MX_FMC_Init>
  MX_CRC_Init();
 8006e3a:	f7ff fa1f 	bl	800627c <MX_CRC_Init>
  MX_DMA2D_Init();
 8006e3e:	f7ff fa67 	bl	8006310 <MX_DMA2D_Init>
  hwInit();
 8006e42:	f7ff f9b7 	bl	80061b4 <hwInit>
  apInit();
 8006e46:	f7f9 fe37 	bl	8000ab8 <apInit>
  apMain();
 8006e4a:	f7f9 fe41 	bl	8000ad0 <apMain>
  MX_TouchGFX_Process();
 8006e4e:	f009 faa1 	bl	8010394 <MX_TouchGFX_Process>
  while (1)
 8006e52:	e7fc      	b.n	8006e4e <main+0x4e>

08006e54 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8006e54:	b500      	push	{lr}
 8006e56:	b087      	sub	sp, #28

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	9302      	str	r3, [sp, #8]
 8006e60:	9303      	str	r3, [sp, #12]
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	9305      	str	r3, [sp, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8006e66:	4819      	ldr	r0, [pc, #100]	@ (8006ecc <MX_OCTOSPI1_Init+0x78>)
 8006e68:	4a19      	ldr	r2, [pc, #100]	@ (8006ed0 <MX_OCTOSPI1_Init+0x7c>)
 8006e6a:	6002      	str	r2, [r0, #0]
  hospi1.Init.FifoThreshold = 6;
 8006e6c:	2206      	movs	r2, #6
 8006e6e:	6042      	str	r2, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8006e70:	6083      	str	r3, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8006e72:	60c3      	str	r3, [r0, #12]
  hospi1.Init.DeviceSize = 25;
 8006e74:	2219      	movs	r2, #25
 8006e76:	6102      	str	r2, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 5;
 8006e78:	2205      	movs	r2, #5
 8006e7a:	6142      	str	r2, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8006e7c:	6183      	str	r3, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8006e7e:	61c3      	str	r3, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8006e80:	6203      	str	r3, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8006e82:	2203      	movs	r2, #3
 8006e84:	6242      	str	r2, [r0, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8006e86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006e8a:	6282      	str	r2, [r0, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8006e8c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8006e8e:	6303      	str	r3, [r0, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8006e90:	2208      	movs	r2, #8
 8006e92:	6342      	str	r2, [r0, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8006e94:	6383      	str	r3, [r0, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8006e96:	63c3      	str	r3, [r0, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8006e98:	f004 fc16 	bl	800b6c8 <HAL_OSPI_Init>
 8006e9c:	b978      	cbnz	r0, 8006ebe <MX_OCTOSPI1_Init+0x6a>
  {
    Error_Handler();
  }
  sOspiManagerCfg.ClkPort = 1;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	9300      	str	r3, [sp, #0]
  sOspiManagerCfg.NCSPort = 1;
 8006ea2:	9302      	str	r3, [sp, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 8006ea4:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8006ea8:	9303      	str	r3, [sp, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eae:	4669      	mov	r1, sp
 8006eb0:	4806      	ldr	r0, [pc, #24]	@ (8006ecc <MX_OCTOSPI1_Init+0x78>)
 8006eb2:	f004 fc8f 	bl	800b7d4 <HAL_OSPIM_Config>
 8006eb6:	b928      	cbnz	r0, 8006ec4 <MX_OCTOSPI1_Init+0x70>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8006eb8:	b007      	add	sp, #28
 8006eba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006ebe:	f7ff ff3e 	bl	8006d3e <Error_Handler>
 8006ec2:	e7ec      	b.n	8006e9e <MX_OCTOSPI1_Init+0x4a>
    Error_Handler();
 8006ec4:	f7ff ff3b 	bl	8006d3e <Error_Handler>
}
 8006ec8:	e7f6      	b.n	8006eb8 <MX_OCTOSPI1_Init+0x64>
 8006eca:	bf00      	nop
 8006ecc:	24002b48 	.word	0x24002b48
 8006ed0:	52005000 	.word	0x52005000

08006ed4 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8006ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed6:	b0bb      	sub	sp, #236	@ 0xec
 8006ed8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eda:	2100      	movs	r1, #0
 8006edc:	9135      	str	r1, [sp, #212]	@ 0xd4
 8006ede:	9136      	str	r1, [sp, #216]	@ 0xd8
 8006ee0:	9137      	str	r1, [sp, #220]	@ 0xdc
 8006ee2:	9138      	str	r1, [sp, #224]	@ 0xe0
 8006ee4:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ee6:	22b8      	movs	r2, #184	@ 0xb8
 8006ee8:	a806      	add	r0, sp, #24
 8006eea:	f01e ff8d 	bl	8025e08 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	4b45      	ldr	r3, [pc, #276]	@ (8007008 <HAL_OSPI_MspInit+0x134>)
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d001      	beq.n	8006efa <HAL_OSPI_MspInit+0x26>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8006ef6:	b03b      	add	sp, #236	@ 0xec
 8006ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8006efa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006efe:	2300      	movs	r3, #0
 8006f00:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f04:	a806      	add	r0, sp, #24
 8006f06:	f005 fd9b 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d178      	bne.n	8007000 <HAL_OSPI_MspInit+0x12c>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8006f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800700c <HAL_OSPI_MspInit+0x138>)
 8006f10:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006f14:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8006f18:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006f1c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006f20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006f24:	9200      	str	r2, [sp, #0]
 8006f26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8006f28:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006f2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f30:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006f34:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006f38:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006f3c:	9201      	str	r2, [sp, #4]
 8006f3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f44:	f042 0202 	orr.w	r2, r2, #2
 8006f48:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006f4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f50:	f002 0202 	and.w	r2, r2, #2
 8006f54:	9202      	str	r2, [sp, #8]
 8006f56:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f5c:	f042 0204 	orr.w	r2, r2, #4
 8006f60:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006f64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f68:	f002 0204 	and.w	r2, r2, #4
 8006f6c:	9203      	str	r2, [sp, #12]
 8006f6e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f74:	f042 0208 	orr.w	r2, r2, #8
 8006f78:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006f7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f80:	f002 0208 	and.w	r2, r2, #8
 8006f84:	9204      	str	r2, [sp, #16]
 8006f86:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006f88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9c:	9305      	str	r3, [sp, #20]
 8006f9e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa4:	2602      	movs	r6, #2
 8006fa6:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa8:	2500      	movs	r5, #0
 8006faa:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fac:	2403      	movs	r4, #3
 8006fae:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8006fb0:	2709      	movs	r7, #9
 8006fb2:	9739      	str	r7, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb4:	a935      	add	r1, sp, #212	@ 0xd4
 8006fb6:	4816      	ldr	r0, [pc, #88]	@ (8007010 <HAL_OSPI_MspInit+0x13c>)
 8006fb8:	f002 fb66 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006fbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fc0:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc2:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc4:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc6:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8006fc8:	9739      	str	r7, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fca:	a935      	add	r1, sp, #212	@ 0xd4
 8006fcc:	4811      	ldr	r0, [pc, #68]	@ (8007014 <HAL_OSPI_MspInit+0x140>)
 8006fce:	f002 fb5b 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006fd2:	2370      	movs	r3, #112	@ 0x70
 8006fd4:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd6:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd8:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fda:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8006fdc:	230a      	movs	r3, #10
 8006fde:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fe0:	a935      	add	r1, sp, #212	@ 0xd4
 8006fe2:	480d      	ldr	r0, [pc, #52]	@ (8007018 <HAL_OSPI_MspInit+0x144>)
 8006fe4:	f002 fb50 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006fe8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006fec:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fee:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff0:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff2:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8006ff4:	9739      	str	r7, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006ff6:	a935      	add	r1, sp, #212	@ 0xd4
 8006ff8:	4808      	ldr	r0, [pc, #32]	@ (800701c <HAL_OSPI_MspInit+0x148>)
 8006ffa:	f002 fb45 	bl	8009688 <HAL_GPIO_Init>
}
 8006ffe:	e77a      	b.n	8006ef6 <HAL_OSPI_MspInit+0x22>
      Error_Handler();
 8007000:	f7ff fe9d 	bl	8006d3e <Error_Handler>
 8007004:	e783      	b.n	8006f0e <HAL_OSPI_MspInit+0x3a>
 8007006:	bf00      	nop
 8007008:	52005000 	.word	0x52005000
 800700c:	58024400 	.word	0x58024400
 8007010:	58020400 	.word	0x58020400
 8007014:	58020800 	.word	0x58020800
 8007018:	58020c00 	.word	0x58020c00
 800701c:	58021800 	.word	0x58021800

08007020 <HAL_OSPI_MspDeInit>:

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
 8007020:	b508      	push	{r3, lr}

  if(ospiHandle->Instance==OCTOSPI1)
 8007022:	6802      	ldr	r2, [r0, #0]
 8007024:	4b11      	ldr	r3, [pc, #68]	@ (800706c <HAL_OSPI_MspDeInit+0x4c>)
 8007026:	429a      	cmp	r2, r3
 8007028:	d000      	beq.n	800702c <HAL_OSPI_MspDeInit+0xc>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
 800702a:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800702c:	4b10      	ldr	r3, [pc, #64]	@ (8007070 <HAL_OSPI_MspDeInit+0x50>)
 800702e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007032:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8007036:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800703a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800703e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007042:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8007046:	2104      	movs	r1, #4
 8007048:	480a      	ldr	r0, [pc, #40]	@ (8007074 <HAL_OSPI_MspDeInit+0x54>)
 800704a:	f002 fc27 	bl	800989c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 800704e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007052:	4809      	ldr	r0, [pc, #36]	@ (8007078 <HAL_OSPI_MspDeInit+0x58>)
 8007054:	f002 fc22 	bl	800989c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8007058:	2170      	movs	r1, #112	@ 0x70
 800705a:	4808      	ldr	r0, [pc, #32]	@ (800707c <HAL_OSPI_MspDeInit+0x5c>)
 800705c:	f002 fc1e 	bl	800989c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_14);
 8007060:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007064:	4806      	ldr	r0, [pc, #24]	@ (8007080 <HAL_OSPI_MspDeInit+0x60>)
 8007066:	f002 fc19 	bl	800989c <HAL_GPIO_DeInit>
}
 800706a:	e7de      	b.n	800702a <HAL_OSPI_MspDeInit+0xa>
 800706c:	52005000 	.word	0x52005000
 8007070:	58024400 	.word	0x58024400
 8007074:	58020400 	.word	0x58020400
 8007078:	58020800 	.word	0x58020800
 800707c:	58020c00 	.word	0x58020c00
 8007080:	58021800 	.word	0x58021800

08007084 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007084:	b508      	push	{r3, lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007086:	480a      	ldr	r0, [pc, #40]	@ (80070b0 <MX_RTC_Init+0x2c>)
 8007088:	4b0a      	ldr	r3, [pc, #40]	@ (80070b4 <MX_RTC_Init+0x30>)
 800708a:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800708c:	2300      	movs	r3, #0
 800708e:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007090:	227f      	movs	r2, #127	@ 0x7f
 8007092:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8007094:	22ff      	movs	r2, #255	@ 0xff
 8007096:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007098:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800709a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800709c:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800709e:	6143      	str	r3, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80070a0:	f006 fc44 	bl	800d92c <HAL_RTC_Init>
 80070a4:	b900      	cbnz	r0, 80070a8 <MX_RTC_Init+0x24>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80070a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80070a8:	f7ff fe49 	bl	8006d3e <Error_Handler>
}
 80070ac:	e7fb      	b.n	80070a6 <MX_RTC_Init+0x22>
 80070ae:	bf00      	nop
 80070b0:	24002ba4 	.word	0x24002ba4
 80070b4:	58004000 	.word	0x58004000

080070b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80070b8:	b510      	push	{r4, lr}
 80070ba:	b0ae      	sub	sp, #184	@ 0xb8
 80070bc:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80070be:	22b8      	movs	r2, #184	@ 0xb8
 80070c0:	2100      	movs	r1, #0
 80070c2:	4668      	mov	r0, sp
 80070c4:	f01e fea0 	bl	8025e08 <memset>
  if(rtcHandle->Instance==RTC)
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <HAL_RTC_MspInit+0x48>)
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d001      	beq.n	80070d4 <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80070d0:	b02e      	add	sp, #184	@ 0xb8
 80070d2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80070d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80070d8:	2300      	movs	r3, #0
 80070da:	e9cd 2300 	strd	r2, r3, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80070de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80070e2:	932c      	str	r3, [sp, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070e4:	4668      	mov	r0, sp
 80070e6:	f005 fcab 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 80070ea:	b928      	cbnz	r0, 80070f8 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 80070ec:	4a05      	ldr	r2, [pc, #20]	@ (8007104 <HAL_RTC_MspInit+0x4c>)
 80070ee:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80070f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f4:	6713      	str	r3, [r2, #112]	@ 0x70
}
 80070f6:	e7eb      	b.n	80070d0 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80070f8:	f7ff fe21 	bl	8006d3e <Error_Handler>
 80070fc:	e7f6      	b.n	80070ec <HAL_RTC_MspInit+0x34>
 80070fe:	bf00      	nop
 8007100:	58004000 	.word	0x58004000
 8007104:	58024400 	.word	0x58024400

08007108 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007108:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800710a:	4813      	ldr	r0, [pc, #76]	@ (8007158 <MX_SPI2_Init+0x50>)
 800710c:	4b13      	ldr	r3, [pc, #76]	@ (800715c <MX_SPI2_Init+0x54>)
 800710e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007110:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007114:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007116:	2300      	movs	r3, #0
 8007118:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800711a:	2207      	movs	r2, #7
 800711c:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800711e:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007120:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007122:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007126:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007128:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800712a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800712c:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800712e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007130:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007132:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007136:	6342      	str	r2, [r0, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007138:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800713a:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800713c:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800713e:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007140:	6483      	str	r3, [r0, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007142:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007144:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007146:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007148:	6583      	str	r3, [r0, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800714a:	f006 fe47 	bl	800dddc <HAL_SPI_Init>
 800714e:	b900      	cbnz	r0, 8007152 <MX_SPI2_Init+0x4a>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007150:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007152:	f7ff fdf4 	bl	8006d3e <Error_Handler>
}
 8007156:	e7fb      	b.n	8007150 <MX_SPI2_Init+0x48>
 8007158:	24002c40 	.word	0x24002c40
 800715c:	40003800 	.word	0x40003800

08007160 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007164:	b0b8      	sub	sp, #224	@ 0xe0
 8007166:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007168:	2100      	movs	r1, #0
 800716a:	9133      	str	r1, [sp, #204]	@ 0xcc
 800716c:	9134      	str	r1, [sp, #208]	@ 0xd0
 800716e:	9135      	str	r1, [sp, #212]	@ 0xd4
 8007170:	9136      	str	r1, [sp, #216]	@ 0xd8
 8007172:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007174:	22b8      	movs	r2, #184	@ 0xb8
 8007176:	a804      	add	r0, sp, #16
 8007178:	f01e fe46 	bl	8025e08 <memset>
  if(spiHandle->Instance==SPI2)
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	4b3a      	ldr	r3, [pc, #232]	@ (8007268 <HAL_SPI_MspInit+0x108>)
 8007180:	429a      	cmp	r2, r3
 8007182:	d002      	beq.n	800718a <HAL_SPI_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007184:	b038      	add	sp, #224	@ 0xe0
 8007186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800718a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800718e:	2300      	movs	r3, #0
 8007190:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007194:	a804      	add	r0, sp, #16
 8007196:	f005 fc53 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 800719a:	2800      	cmp	r0, #0
 800719c:	d15e      	bne.n	800725c <HAL_SPI_MspInit+0xfc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800719e:	4b33      	ldr	r3, [pc, #204]	@ (800726c <HAL_SPI_MspInit+0x10c>)
 80071a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80071a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071a8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80071ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80071b0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80071b4:	9201      	str	r2, [sp, #4]
 80071b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80071bc:	f042 0204 	orr.w	r2, r2, #4
 80071c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80071c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80071c8:	f002 0204 	and.w	r2, r2, #4
 80071cc:	9202      	str	r2, [sp, #8]
 80071ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80071d4:	f042 0202 	orr.w	r2, r2, #2
 80071d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80071dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	9303      	str	r3, [sp, #12]
 80071e6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80071e8:	230c      	movs	r3, #12
 80071ea:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ec:	f04f 0802 	mov.w	r8, #2
 80071f0:	f8cd 80d0 	str.w	r8, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f4:	2500      	movs	r5, #0
 80071f6:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f8:	2703      	movs	r7, #3
 80071fa:	9736      	str	r7, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80071fc:	2605      	movs	r6, #5
 80071fe:	9637      	str	r6, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007200:	a933      	add	r1, sp, #204	@ 0xcc
 8007202:	481b      	ldr	r0, [pc, #108]	@ (8007270 <HAL_SPI_MspInit+0x110>)
 8007204:	f002 fa40 	bl	8009688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007208:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800720c:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800720e:	f8cd 80d0 	str.w	r8, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007212:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007214:	9736      	str	r7, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007216:	9637      	str	r6, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007218:	a933      	add	r1, sp, #204	@ 0xcc
 800721a:	4816      	ldr	r0, [pc, #88]	@ (8007274 <HAL_SPI_MspInit+0x114>)
 800721c:	f002 fa34 	bl	8009688 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 8007220:	4815      	ldr	r0, [pc, #84]	@ (8007278 <HAL_SPI_MspInit+0x118>)
 8007222:	4b16      	ldr	r3, [pc, #88]	@ (800727c <HAL_SPI_MspInit+0x11c>)
 8007224:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8007226:	2327      	movs	r3, #39	@ 0x27
 8007228:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800722a:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800722c:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800722e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007232:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007234:	6145      	str	r5, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007236:	6185      	str	r5, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8007238:	61c5      	str	r5, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800723a:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800723c:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800723e:	f000 ff4d 	bl	80080dc <HAL_DMA_Init>
 8007242:	b970      	cbnz	r0, 8007262 <HAL_SPI_MspInit+0x102>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8007244:	4b0c      	ldr	r3, [pc, #48]	@ (8007278 <HAL_SPI_MspInit+0x118>)
 8007246:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8007248:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800724a:	2200      	movs	r2, #0
 800724c:	2105      	movs	r1, #5
 800724e:	2024      	movs	r0, #36	@ 0x24
 8007250:	f000 fc40 	bl	8007ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007254:	2024      	movs	r0, #36	@ 0x24
 8007256:	f000 fc4d 	bl	8007af4 <HAL_NVIC_EnableIRQ>
}
 800725a:	e793      	b.n	8007184 <HAL_SPI_MspInit+0x24>
      Error_Handler();
 800725c:	f7ff fd6f 	bl	8006d3e <Error_Handler>
 8007260:	e79d      	b.n	800719e <HAL_SPI_MspInit+0x3e>
      Error_Handler();
 8007262:	f7ff fd6c 	bl	8006d3e <Error_Handler>
 8007266:	e7ed      	b.n	8007244 <HAL_SPI_MspInit+0xe4>
 8007268:	40003800 	.word	0x40003800
 800726c:	58024400 	.word	0x58024400
 8007270:	58020800 	.word	0x58020800
 8007274:	58020400 	.word	0x58020400
 8007278:	24002bc8 	.word	0x24002bc8
 800727c:	40020040 	.word	0x40020040

08007280 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{

  if(spiHandle->Instance==SPI2)
 8007280:	6802      	ldr	r2, [r0, #0]
 8007282:	4b0e      	ldr	r3, [pc, #56]	@ (80072bc <HAL_SPI_MspDeInit+0x3c>)
 8007284:	429a      	cmp	r2, r3
 8007286:	d000      	beq.n	800728a <HAL_SPI_MspDeInit+0xa>
 8007288:	4770      	bx	lr
{
 800728a:	b510      	push	{r4, lr}
 800728c:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800728e:	4a0c      	ldr	r2, [pc, #48]	@ (80072c0 <HAL_SPI_MspDeInit+0x40>)
 8007290:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8007294:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007298:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 800729c:	210c      	movs	r1, #12
 800729e:	4809      	ldr	r0, [pc, #36]	@ (80072c4 <HAL_SPI_MspDeInit+0x44>)
 80072a0:	f002 fafc 	bl	800989c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 80072a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80072a8:	4807      	ldr	r0, [pc, #28]	@ (80072c8 <HAL_SPI_MspDeInit+0x48>)
 80072aa:	f002 faf7 	bl	800989c <HAL_GPIO_DeInit>

    /* SPI2 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmarx);
 80072ae:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80072b0:	f001 f8de 	bl	8008470 <HAL_DMA_DeInit>

    /* SPI2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80072b4:	2024      	movs	r0, #36	@ 0x24
 80072b6:	f000 fc21 	bl	8007afc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80072ba:	bd10      	pop	{r4, pc}
 80072bc:	40003800 	.word	0x40003800
 80072c0:	58024400 	.word	0x58024400
 80072c4:	58020800 	.word	0x58020800
 80072c8:	58020400 	.word	0x58020400

080072cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072cc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072ce:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <HAL_MspInit+0x20>)
 80072d0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80072d4:	f042 0202 	orr.w	r2, r2, #2
 80072d8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80072dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072e8:	b002      	add	sp, #8
 80072ea:	4770      	bx	lr
 80072ec:	58024400 	.word	0x58024400

080072f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80072f0:	e7fe      	b.n	80072f0 <NMI_Handler>

080072f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072f2:	e7fe      	b.n	80072f2 <HardFault_Handler>

080072f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072f4:	e7fe      	b.n	80072f4 <MemManage_Handler>

080072f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072f6:	e7fe      	b.n	80072f6 <BusFault_Handler>

080072f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072f8:	e7fe      	b.n	80072f8 <UsageFault_Handler>

080072fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072fa:	4770      	bx	lr

080072fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072fc:	4770      	bx	lr

080072fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072fe:	4770      	bx	lr

08007300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007300:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007302:	f000 fb5d 	bl	80079c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  swtimerISR();
 8007306:	f7fd fde3 	bl	8004ed0 <swtimerISR>
  /* USER CODE END SysTick_IRQn 1 */
}
 800730a:	bd08      	pop	{r3, pc}

0800730c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800730c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800730e:	4802      	ldr	r0, [pc, #8]	@ (8007318 <DMA1_Stream2_IRQHandler+0xc>)
 8007310:	f001 fc1c 	bl	8008b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8007314:	bd08      	pop	{r3, pc}
 8007316:	bf00      	nop
 8007318:	24002bc8 	.word	0x24002bc8

0800731c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800731c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800731e:	4802      	ldr	r0, [pc, #8]	@ (8007328 <I2C1_EV_IRQHandler+0xc>)
 8007320:	f003 f848 	bl	800a3b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007324:	bd08      	pop	{r3, pc}
 8007326:	bf00      	nop
 8007328:	24002a4c 	.word	0x24002a4c

0800732c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800732c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800732e:	4802      	ldr	r0, [pc, #8]	@ (8007338 <I2C1_ER_IRQHandler+0xc>)
 8007330:	f003 fbd5 	bl	800aade <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007334:	bd08      	pop	{r3, pc}
 8007336:	bf00      	nop
 8007338:	24002a4c 	.word	0x24002a4c

0800733c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800733c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800733e:	4802      	ldr	r0, [pc, #8]	@ (8007348 <SPI2_IRQHandler+0xc>)
 8007340:	f007 fb00 	bl	800e944 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007344:	bd08      	pop	{r3, pc}
 8007346:	bf00      	nop
 8007348:	24002c40 	.word	0x24002c40

0800734c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800734c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800734e:	4802      	ldr	r0, [pc, #8]	@ (8007358 <LTDC_IRQHandler+0xc>)
 8007350:	f003 fdb6 	bl	800aec0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8007354:	bd08      	pop	{r3, pc}
 8007356:	bf00      	nop
 8007358:	24002aa0 	.word	0x24002aa0

0800735c <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 800735c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800735e:	4802      	ldr	r0, [pc, #8]	@ (8007368 <LTDC_ER_IRQHandler+0xc>)
 8007360:	f003 fdae 	bl	800aec0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8007364:	bd08      	pop	{r3, pc}
 8007366:	bf00      	nop
 8007368:	24002aa0 	.word	0x24002aa0

0800736c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 800736c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800736e:	4802      	ldr	r0, [pc, #8]	@ (8007378 <I2C4_EV_IRQHandler+0xc>)
 8007370:	f003 f820 	bl	800a3b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8007374:	bd08      	pop	{r3, pc}
 8007376:	bf00      	nop
 8007378:	240029f8 	.word	0x240029f8

0800737c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800737c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800737e:	4802      	ldr	r0, [pc, #8]	@ (8007388 <I2C4_ER_IRQHandler+0xc>)
 8007380:	f003 fbad 	bl	800aade <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8007384:	bd08      	pop	{r3, pc}
 8007386:	bf00      	nop
 8007388:	240029f8 	.word	0x240029f8

0800738c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800738c:	2001      	movs	r0, #1
 800738e:	4770      	bx	lr

08007390 <_kill>:

int _kill(int pid, int sig)
{
 8007390:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007392:	f01e fe19 	bl	8025fc8 <__errno>
 8007396:	2316      	movs	r3, #22
 8007398:	6003      	str	r3, [r0, #0]
  return -1;
}
 800739a:	f04f 30ff 	mov.w	r0, #4294967295
 800739e:	bd08      	pop	{r3, pc}

080073a0 <_exit>:

void _exit (int status)
{
 80073a0:	b508      	push	{r3, lr}
  _kill(status, -1);
 80073a2:	f04f 31ff 	mov.w	r1, #4294967295
 80073a6:	f7ff fff3 	bl	8007390 <_kill>
  while (1) {}    /* Make sure we hang here */
 80073aa:	e7fe      	b.n	80073aa <_exit+0xa>

080073ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	460c      	mov	r4, r1
 80073b0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073b2:	2500      	movs	r5, #0
 80073b4:	e006      	b.n	80073c4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80073b6:	f3af 8000 	nop.w
 80073ba:	4621      	mov	r1, r4
 80073bc:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073c0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80073c2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073c4:	42b5      	cmp	r5, r6
 80073c6:	dbf6      	blt.n	80073b6 <_read+0xa>
  }

  return len;
}
 80073c8:	4630      	mov	r0, r6
 80073ca:	bd70      	pop	{r4, r5, r6, pc}

080073cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	460c      	mov	r4, r1
 80073d0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073d2:	2500      	movs	r5, #0
 80073d4:	e004      	b.n	80073e0 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80073d6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80073da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073de:	3501      	adds	r5, #1
 80073e0:	42b5      	cmp	r5, r6
 80073e2:	dbf8      	blt.n	80073d6 <_write+0xa>
  }
  return len;
}
 80073e4:	4630      	mov	r0, r6
 80073e6:	bd70      	pop	{r4, r5, r6, pc}

080073e8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	4770      	bx	lr

080073ee <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80073ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80073f2:	604b      	str	r3, [r1, #4]
  return 0;
}
 80073f4:	2000      	movs	r0, #0
 80073f6:	4770      	bx	lr

080073f8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80073f8:	2001      	movs	r0, #1
 80073fa:	4770      	bx	lr

080073fc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80073fc:	2000      	movs	r0, #0
 80073fe:	4770      	bx	lr

08007400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007400:	b510      	push	{r4, lr}
 8007402:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007404:	4a0c      	ldr	r2, [pc, #48]	@ (8007438 <_sbrk+0x38>)
 8007406:	490d      	ldr	r1, [pc, #52]	@ (800743c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007408:	480d      	ldr	r0, [pc, #52]	@ (8007440 <_sbrk+0x40>)
 800740a:	6800      	ldr	r0, [r0, #0]
 800740c:	b140      	cbz	r0, 8007420 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800740e:	480c      	ldr	r0, [pc, #48]	@ (8007440 <_sbrk+0x40>)
 8007410:	6800      	ldr	r0, [r0, #0]
 8007412:	4403      	add	r3, r0
 8007414:	1a52      	subs	r2, r2, r1
 8007416:	4293      	cmp	r3, r2
 8007418:	d806      	bhi.n	8007428 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800741a:	4a09      	ldr	r2, [pc, #36]	@ (8007440 <_sbrk+0x40>)
 800741c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800741e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007420:	4807      	ldr	r0, [pc, #28]	@ (8007440 <_sbrk+0x40>)
 8007422:	4c08      	ldr	r4, [pc, #32]	@ (8007444 <_sbrk+0x44>)
 8007424:	6004      	str	r4, [r0, #0]
 8007426:	e7f2      	b.n	800740e <_sbrk+0xe>
    errno = ENOMEM;
 8007428:	f01e fdce 	bl	8025fc8 <__errno>
 800742c:	230c      	movs	r3, #12
 800742e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	e7f3      	b.n	800741e <_sbrk+0x1e>
 8007436:	bf00      	nop
 8007438:	24050000 	.word	0x24050000
 800743c:	00000400 	.word	0x00000400
 8007440:	24002cc8 	.word	0x24002cc8
 8007444:	24004ea8 	.word	0x24004ea8

08007448 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007448:	4a22      	ldr	r2, [pc, #136]	@ (80074d4 <SystemInit+0x8c>)
 800744a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800744e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007452:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007456:	4b20      	ldr	r3, [pc, #128]	@ (80074d8 <SystemInit+0x90>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	2b06      	cmp	r3, #6
 8007460:	d806      	bhi.n	8007470 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007462:	4a1d      	ldr	r2, [pc, #116]	@ (80074d8 <SystemInit+0x90>)
 8007464:	6813      	ldr	r3, [r2, #0]
 8007466:	f023 030f 	bic.w	r3, r3, #15
 800746a:	f043 0307 	orr.w	r3, r3, #7
 800746e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007470:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <SystemInit+0x94>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	f042 0201 	orr.w	r2, r2, #1
 8007478:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800747a:	2200      	movs	r2, #0
 800747c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	4a17      	ldr	r2, [pc, #92]	@ (80074e0 <SystemInit+0x98>)
 8007482:	400a      	ands	r2, r1
 8007484:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007486:	4b14      	ldr	r3, [pc, #80]	@ (80074d8 <SystemInit+0x90>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f013 0f08 	tst.w	r3, #8
 800748e:	d006      	beq.n	800749e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007490:	4a11      	ldr	r2, [pc, #68]	@ (80074d8 <SystemInit+0x90>)
 8007492:	6813      	ldr	r3, [r2, #0]
 8007494:	f023 030f 	bic.w	r3, r3, #15
 8007498:	f043 0307 	orr.w	r3, r3, #7
 800749c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800749e:	4b0f      	ldr	r3, [pc, #60]	@ (80074dc <SystemInit+0x94>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80074a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80074a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80074a8:	490e      	ldr	r1, [pc, #56]	@ (80074e4 <SystemInit+0x9c>)
 80074aa:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80074ac:	490e      	ldr	r1, [pc, #56]	@ (80074e8 <SystemInit+0xa0>)
 80074ae:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80074b0:	490e      	ldr	r1, [pc, #56]	@ (80074ec <SystemInit+0xa4>)
 80074b2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80074b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80074b6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80074b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80074ba:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80074bc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80074c4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80074c6:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80074c8:	4b09      	ldr	r3, [pc, #36]	@ (80074f0 <SystemInit+0xa8>)
 80074ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80074ce:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	e000ed00 	.word	0xe000ed00
 80074d8:	52002000 	.word	0x52002000
 80074dc:	58024400 	.word	0x58024400
 80074e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80074e4:	02020200 	.word	0x02020200
 80074e8:	01ff0000 	.word	0x01ff0000
 80074ec:	01010280 	.word	0x01010280
 80074f0:	52004000 	.word	0x52004000

080074f4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM13)
 80074f4:	6802      	ldr	r2, [r0, #0]
 80074f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <HAL_TIM_Base_MspInit+0x2c>)
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d000      	beq.n	80074fe <HAL_TIM_Base_MspInit+0xa>
 80074fc:	4770      	bx	lr
{
 80074fe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007500:	4b08      	ldr	r3, [pc, #32]	@ (8007524 <HAL_TIM_Base_MspInit+0x30>)
 8007502:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8007506:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800750a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800750e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800751a:	b002      	add	sp, #8
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40001c00 	.word	0x40001c00
 8007524:	58024400 	.word	0x58024400

08007528 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007528:	b500      	push	{lr}
 800752a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800752c:	2300      	movs	r3, #0
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	9302      	str	r3, [sp, #8]
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM13)
 8007538:	6802      	ldr	r2, [r0, #0]
 800753a:	4b0f      	ldr	r3, [pc, #60]	@ (8007578 <HAL_TIM_MspPostInit+0x50>)
 800753c:	429a      	cmp	r2, r3
 800753e:	d002      	beq.n	8007546 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8007540:	b007      	add	sp, #28
 8007542:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007546:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <HAL_TIM_MspPostInit+0x54>)
 8007548:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800754c:	f042 0220 	orr.w	r2, r2, #32
 8007550:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007564:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007566:	2302      	movs	r3, #2
 8007568:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800756a:	2309      	movs	r3, #9
 800756c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800756e:	a901      	add	r1, sp, #4
 8007570:	4803      	ldr	r0, [pc, #12]	@ (8007580 <HAL_TIM_MspPostInit+0x58>)
 8007572:	f002 f889 	bl	8009688 <HAL_GPIO_Init>
}
 8007576:	e7e3      	b.n	8007540 <HAL_TIM_MspPostInit+0x18>
 8007578:	40001c00 	.word	0x40001c00
 800757c:	58024400 	.word	0x58024400
 8007580:	58021400 	.word	0x58021400

08007584 <MX_TIM13_Init>:
{
 8007584:	b500      	push	{lr}
 8007586:	b089      	sub	sp, #36	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007588:	2300      	movs	r3, #0
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	9302      	str	r3, [sp, #8]
 800758e:	9303      	str	r3, [sp, #12]
 8007590:	9304      	str	r3, [sp, #16]
 8007592:	9305      	str	r3, [sp, #20]
 8007594:	9306      	str	r3, [sp, #24]
 8007596:	9307      	str	r3, [sp, #28]
  htim13.Instance = TIM13;
 8007598:	4815      	ldr	r0, [pc, #84]	@ (80075f0 <MX_TIM13_Init+0x6c>)
 800759a:	4a16      	ldr	r2, [pc, #88]	@ (80075f4 <MX_TIM13_Init+0x70>)
 800759c:	6002      	str	r2, [r0, #0]
  htim13.Init.Prescaler = 274;
 800759e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80075a2:	6042      	str	r2, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075a4:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 99;
 80075a6:	2263      	movs	r2, #99	@ 0x63
 80075a8:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075aa:	6103      	str	r3, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80075ac:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80075ae:	f007 fccd 	bl	800ef4c <HAL_TIM_Base_Init>
 80075b2:	b9a0      	cbnz	r0, 80075de <MX_TIM13_Init+0x5a>
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80075b4:	480e      	ldr	r0, [pc, #56]	@ (80075f0 <MX_TIM13_Init+0x6c>)
 80075b6:	f007 fcf9 	bl	800efac <HAL_TIM_PWM_Init>
 80075ba:	b998      	cbnz	r0, 80075e4 <MX_TIM13_Init+0x60>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075bc:	2360      	movs	r3, #96	@ 0x60
 80075be:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80075c0:	2200      	movs	r2, #0
 80075c2:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075c4:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075c6:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075c8:	a901      	add	r1, sp, #4
 80075ca:	4809      	ldr	r0, [pc, #36]	@ (80075f0 <MX_TIM13_Init+0x6c>)
 80075cc:	f007 fd68 	bl	800f0a0 <HAL_TIM_PWM_ConfigChannel>
 80075d0:	b958      	cbnz	r0, 80075ea <MX_TIM13_Init+0x66>
  HAL_TIM_MspPostInit(&htim13);
 80075d2:	4807      	ldr	r0, [pc, #28]	@ (80075f0 <MX_TIM13_Init+0x6c>)
 80075d4:	f7ff ffa8 	bl	8007528 <HAL_TIM_MspPostInit>
}
 80075d8:	b009      	add	sp, #36	@ 0x24
 80075da:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80075de:	f7ff fbae 	bl	8006d3e <Error_Handler>
 80075e2:	e7e7      	b.n	80075b4 <MX_TIM13_Init+0x30>
    Error_Handler();
 80075e4:	f7ff fbab 	bl	8006d3e <Error_Handler>
 80075e8:	e7e8      	b.n	80075bc <MX_TIM13_Init+0x38>
    Error_Handler();
 80075ea:	f7ff fba8 	bl	8006d3e <Error_Handler>
 80075ee:	e7f0      	b.n	80075d2 <MX_TIM13_Init+0x4e>
 80075f0:	24002ccc 	.word	0x24002ccc
 80075f4:	40001c00 	.word	0x40001c00

080075f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80075f8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80075fa:	4817      	ldr	r0, [pc, #92]	@ (8007658 <MX_USART1_UART_Init+0x60>)
 80075fc:	4b17      	ldr	r3, [pc, #92]	@ (800765c <MX_USART1_UART_Init+0x64>)
 80075fe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8007600:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8007604:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007606:	2300      	movs	r3, #0
 8007608:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800760a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800760c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800760e:	220c      	movs	r2, #12
 8007610:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007612:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007614:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007616:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007618:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800761a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800761c:	f008 fc7f 	bl	800ff1e <HAL_UART_Init>
 8007620:	b970      	cbnz	r0, 8007640 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007622:	2100      	movs	r1, #0
 8007624:	480c      	ldr	r0, [pc, #48]	@ (8007658 <MX_USART1_UART_Init+0x60>)
 8007626:	f008 fdb4 	bl	8010192 <HAL_UARTEx_SetTxFifoThreshold>
 800762a:	b960      	cbnz	r0, 8007646 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800762c:	2100      	movs	r1, #0
 800762e:	480a      	ldr	r0, [pc, #40]	@ (8007658 <MX_USART1_UART_Init+0x60>)
 8007630:	f008 fdd4 	bl	80101dc <HAL_UARTEx_SetRxFifoThreshold>
 8007634:	b950      	cbnz	r0, 800764c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007636:	4808      	ldr	r0, [pc, #32]	@ (8007658 <MX_USART1_UART_Init+0x60>)
 8007638:	f008 fd8c 	bl	8010154 <HAL_UARTEx_DisableFifoMode>
 800763c:	b948      	cbnz	r0, 8007652 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800763e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007640:	f7ff fb7d 	bl	8006d3e <Error_Handler>
 8007644:	e7ed      	b.n	8007622 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8007646:	f7ff fb7a 	bl	8006d3e <Error_Handler>
 800764a:	e7ef      	b.n	800762c <MX_USART1_UART_Init+0x34>
    Error_Handler();
 800764c:	f7ff fb77 	bl	8006d3e <Error_Handler>
 8007650:	e7f1      	b.n	8007636 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8007652:	f7ff fb74 	bl	8006d3e <Error_Handler>
}
 8007656:	e7f2      	b.n	800763e <MX_USART1_UART_Init+0x46>
 8007658:	24002e9c 	.word	0x24002e9c
 800765c:	40011000 	.word	0x40011000

08007660 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007660:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007662:	4817      	ldr	r0, [pc, #92]	@ (80076c0 <MX_USART2_UART_Init+0x60>)
 8007664:	4b17      	ldr	r3, [pc, #92]	@ (80076c4 <MX_USART2_UART_Init+0x64>)
 8007666:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8007668:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800766c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800766e:	2300      	movs	r3, #0
 8007670:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007672:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007674:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007676:	220c      	movs	r2, #12
 8007678:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800767a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800767c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800767e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007680:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007682:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007684:	f008 fc4b 	bl	800ff1e <HAL_UART_Init>
 8007688:	b970      	cbnz	r0, 80076a8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800768a:	2100      	movs	r1, #0
 800768c:	480c      	ldr	r0, [pc, #48]	@ (80076c0 <MX_USART2_UART_Init+0x60>)
 800768e:	f008 fd80 	bl	8010192 <HAL_UARTEx_SetTxFifoThreshold>
 8007692:	b960      	cbnz	r0, 80076ae <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007694:	2100      	movs	r1, #0
 8007696:	480a      	ldr	r0, [pc, #40]	@ (80076c0 <MX_USART2_UART_Init+0x60>)
 8007698:	f008 fda0 	bl	80101dc <HAL_UARTEx_SetRxFifoThreshold>
 800769c:	b950      	cbnz	r0, 80076b4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800769e:	4808      	ldr	r0, [pc, #32]	@ (80076c0 <MX_USART2_UART_Init+0x60>)
 80076a0:	f008 fd58 	bl	8010154 <HAL_UARTEx_DisableFifoMode>
 80076a4:	b948      	cbnz	r0, 80076ba <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80076a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80076a8:	f7ff fb49 	bl	8006d3e <Error_Handler>
 80076ac:	e7ed      	b.n	800768a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80076ae:	f7ff fb46 	bl	8006d3e <Error_Handler>
 80076b2:	e7ef      	b.n	8007694 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80076b4:	f7ff fb43 	bl	8006d3e <Error_Handler>
 80076b8:	e7f1      	b.n	800769e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80076ba:	f7ff fb40 	bl	8006d3e <Error_Handler>
}
 80076be:	e7f2      	b.n	80076a6 <MX_USART2_UART_Init+0x46>
 80076c0:	24002e08 	.word	0x24002e08
 80076c4:	40004400 	.word	0x40004400

080076c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80076c8:	b530      	push	{r4, r5, lr}
 80076ca:	b0b9      	sub	sp, #228	@ 0xe4
 80076cc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076ce:	2100      	movs	r1, #0
 80076d0:	9133      	str	r1, [sp, #204]	@ 0xcc
 80076d2:	9134      	str	r1, [sp, #208]	@ 0xd0
 80076d4:	9135      	str	r1, [sp, #212]	@ 0xd4
 80076d6:	9136      	str	r1, [sp, #216]	@ 0xd8
 80076d8:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80076da:	22b8      	movs	r2, #184	@ 0xb8
 80076dc:	a804      	add	r0, sp, #16
 80076de:	f01e fb93 	bl	8025e08 <memset>
  if(uartHandle->Instance==USART1)
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	4a52      	ldr	r2, [pc, #328]	@ (8007830 <HAL_UART_MspInit+0x168>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d004      	beq.n	80076f4 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80076ea:	4a52      	ldr	r2, [pc, #328]	@ (8007834 <HAL_UART_MspInit+0x16c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d050      	beq.n	8007792 <HAL_UART_MspInit+0xca>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80076f0:	b039      	add	sp, #228	@ 0xe4
 80076f2:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80076f4:	2201      	movs	r2, #1
 80076f6:	2300      	movs	r3, #0
 80076f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076fc:	a804      	add	r0, sp, #16
 80076fe:	f005 f99f 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 8007702:	2800      	cmp	r0, #0
 8007704:	d13f      	bne.n	8007786 <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007706:	4b4c      	ldr	r3, [pc, #304]	@ (8007838 <HAL_UART_MspInit+0x170>)
 8007708:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800770c:	f042 0210 	orr.w	r2, r2, #16
 8007710:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8007714:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007718:	f002 0210 	and.w	r2, r2, #16
 800771c:	9200      	str	r2, [sp, #0]
 800771e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007720:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007724:	f042 0202 	orr.w	r2, r2, #2
 8007728:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800772c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007738:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800773c:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800773e:	2302      	movs	r3, #2
 8007740:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007742:	2500      	movs	r5, #0
 8007744:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007746:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007748:	2304      	movs	r3, #4
 800774a:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800774c:	a933      	add	r1, sp, #204	@ 0xcc
 800774e:	483b      	ldr	r0, [pc, #236]	@ (800783c <HAL_UART_MspInit+0x174>)
 8007750:	f001 ff9a 	bl	8009688 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8007754:	483a      	ldr	r0, [pc, #232]	@ (8007840 <HAL_UART_MspInit+0x178>)
 8007756:	4b3b      	ldr	r3, [pc, #236]	@ (8007844 <HAL_UART_MspInit+0x17c>)
 8007758:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800775a:	2329      	movs	r3, #41	@ 0x29
 800775c:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800775e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007760:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007766:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007768:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800776a:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800776c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007770:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007772:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007774:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007776:	f000 fcb1 	bl	80080dc <HAL_DMA_Init>
 800777a:	b938      	cbnz	r0, 800778c <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800777c:	4b30      	ldr	r3, [pc, #192]	@ (8007840 <HAL_UART_MspInit+0x178>)
 800777e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8007782:	639c      	str	r4, [r3, #56]	@ 0x38
 8007784:	e7b4      	b.n	80076f0 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8007786:	f7ff fada 	bl	8006d3e <Error_Handler>
 800778a:	e7bc      	b.n	8007706 <HAL_UART_MspInit+0x3e>
      Error_Handler();
 800778c:	f7ff fad7 	bl	8006d3e <Error_Handler>
 8007790:	e7f4      	b.n	800777c <HAL_UART_MspInit+0xb4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007792:	2202      	movs	r2, #2
 8007794:	2300      	movs	r3, #0
 8007796:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800779a:	a804      	add	r0, sp, #16
 800779c:	f005 f950 	bl	800ca40 <HAL_RCCEx_PeriphCLKConfig>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d13e      	bne.n	8007822 <HAL_UART_MspInit+0x15a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80077a4:	4b24      	ldr	r3, [pc, #144]	@ (8007838 <HAL_UART_MspInit+0x170>)
 80077a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80077aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80077ae:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80077b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80077b6:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80077ba:	9202      	str	r2, [sp, #8]
 80077bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80077ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80077d6:	230c      	movs	r3, #12
 80077d8:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077da:	2302      	movs	r3, #2
 80077dc:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077de:	2500      	movs	r5, #0
 80077e0:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e2:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077e4:	2307      	movs	r3, #7
 80077e6:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e8:	a933      	add	r1, sp, #204	@ 0xcc
 80077ea:	4817      	ldr	r0, [pc, #92]	@ (8007848 <HAL_UART_MspInit+0x180>)
 80077ec:	f001 ff4c 	bl	8009688 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream1;
 80077f0:	4816      	ldr	r0, [pc, #88]	@ (800784c <HAL_UART_MspInit+0x184>)
 80077f2:	4b17      	ldr	r3, [pc, #92]	@ (8007850 <HAL_UART_MspInit+0x188>)
 80077f4:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80077f6:	232b      	movs	r3, #43	@ 0x2b
 80077f8:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077fa:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077fc:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80077fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007802:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007804:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007806:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800780c:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800780e:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007810:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007812:	f000 fc63 	bl	80080dc <HAL_DMA_Init>
 8007816:	b938      	cbnz	r0, 8007828 <HAL_UART_MspInit+0x160>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007818:	4b0c      	ldr	r3, [pc, #48]	@ (800784c <HAL_UART_MspInit+0x184>)
 800781a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 800781e:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8007820:	e766      	b.n	80076f0 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8007822:	f7ff fa8c 	bl	8006d3e <Error_Handler>
 8007826:	e7bd      	b.n	80077a4 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8007828:	f7ff fa89 	bl	8006d3e <Error_Handler>
 800782c:	e7f4      	b.n	8007818 <HAL_UART_MspInit+0x150>
 800782e:	bf00      	nop
 8007830:	40011000 	.word	0x40011000
 8007834:	40004400 	.word	0x40004400
 8007838:	58024400 	.word	0x58024400
 800783c:	58020400 	.word	0x58020400
 8007840:	24002d90 	.word	0x24002d90
 8007844:	40020010 	.word	0x40020010
 8007848:	58020000 	.word	0x58020000
 800784c:	24002d18 	.word	0x24002d18
 8007850:	40020028 	.word	0x40020028

08007854 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8007854:	b510      	push	{r4, lr}
 8007856:	4604      	mov	r4, r0

  if(uartHandle->Instance==USART1)
 8007858:	6803      	ldr	r3, [r0, #0]
 800785a:	4a14      	ldr	r2, [pc, #80]	@ (80078ac <HAL_UART_MspDeInit+0x58>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d003      	beq.n	8007868 <HAL_UART_MspDeInit+0x14>
    HAL_DMA_DeInit(uartHandle->hdmarx);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8007860:	4a13      	ldr	r2, [pc, #76]	@ (80078b0 <HAL_UART_MspDeInit+0x5c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d011      	beq.n	800788a <HAL_UART_MspDeInit+0x36>
    HAL_DMA_DeInit(uartHandle->hdmarx);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8007866:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8007868:	4a12      	ldr	r2, [pc, #72]	@ (80078b4 <HAL_UART_MspDeInit+0x60>)
 800786a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800786e:	f023 0310 	bic.w	r3, r3, #16
 8007872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14|GPIO_PIN_15);
 8007876:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800787a:	480f      	ldr	r0, [pc, #60]	@ (80078b8 <HAL_UART_MspDeInit+0x64>)
 800787c:	f002 f80e 	bl	800989c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8007880:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007884:	f000 fdf4 	bl	8008470 <HAL_DMA_DeInit>
 8007888:	e7ed      	b.n	8007866 <HAL_UART_MspDeInit+0x12>
    __HAL_RCC_USART2_CLK_DISABLE();
 800788a:	4a0a      	ldr	r2, [pc, #40]	@ (80078b4 <HAL_UART_MspDeInit+0x60>)
 800788c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8007890:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007894:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007898:	210c      	movs	r1, #12
 800789a:	4808      	ldr	r0, [pc, #32]	@ (80078bc <HAL_UART_MspDeInit+0x68>)
 800789c:	f001 fffe 	bl	800989c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80078a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80078a4:	f000 fde4 	bl	8008470 <HAL_DMA_DeInit>
}
 80078a8:	e7dd      	b.n	8007866 <HAL_UART_MspDeInit+0x12>
 80078aa:	bf00      	nop
 80078ac:	40011000 	.word	0x40011000
 80078b0:	40004400 	.word	0x40004400
 80078b4:	58024400 	.word	0x58024400
 80078b8:	58020400 	.word	0x58020400
 80078bc:	58020000 	.word	0x58020000

080078c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80078c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80078f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80078c4:	f7ff fdc0 	bl	8007448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80078c8:	480c      	ldr	r0, [pc, #48]	@ (80078fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80078ca:	490d      	ldr	r1, [pc, #52]	@ (8007900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80078cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80078ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078d0:	e002      	b.n	80078d8 <LoopCopyDataInit>

080078d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078d6:	3304      	adds	r3, #4

080078d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078dc:	d3f9      	bcc.n	80078d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078de:	4a0a      	ldr	r2, [pc, #40]	@ (8007908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80078e0:	4c0a      	ldr	r4, [pc, #40]	@ (800790c <LoopFillZerobss+0x22>)
  movs r3, #0
 80078e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078e4:	e001      	b.n	80078ea <LoopFillZerobss>

080078e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078e8:	3204      	adds	r2, #4

080078ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078ec:	d3fb      	bcc.n	80078e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80078ee:	f01e fb71 	bl	8025fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80078f2:	f7ff fa85 	bl	8006e00 <main>
  bx  lr
 80078f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80078f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80078fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007900:	24000328 	.word	0x24000328
  ldr r2, =_sidata
 8007904:	0802c5f0 	.word	0x0802c5f0
  ldr r2, =_sbss
 8007908:	24000328 	.word	0x24000328
  ldr r4, =_ebss
 800790c:	24004ea8 	.word	0x24004ea8

08007910 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007910:	e7fe      	b.n	8007910 <ADC3_IRQHandler>
	...

08007914 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007914:	4b10      	ldr	r3, [pc, #64]	@ (8007958 <HAL_InitTick+0x44>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	b90b      	cbnz	r3, 800791e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800791a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800791c:	4770      	bx	lr
{
 800791e:	b510      	push	{r4, lr}
 8007920:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007922:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007926:	fbb0 f3f3 	udiv	r3, r0, r3
 800792a:	4a0c      	ldr	r2, [pc, #48]	@ (800795c <HAL_InitTick+0x48>)
 800792c:	6810      	ldr	r0, [r2, #0]
 800792e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007932:	f000 f8e7 	bl	8007b04 <HAL_SYSTICK_Config>
 8007936:	b968      	cbnz	r0, 8007954 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007938:	2c0f      	cmp	r4, #15
 800793a:	d901      	bls.n	8007940 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800793c:	2001      	movs	r0, #1
 800793e:	e00a      	b.n	8007956 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007940:	2200      	movs	r2, #0
 8007942:	4621      	mov	r1, r4
 8007944:	f04f 30ff 	mov.w	r0, #4294967295
 8007948:	f000 f8c4 	bl	8007ad4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800794c:	4b04      	ldr	r3, [pc, #16]	@ (8007960 <HAL_InitTick+0x4c>)
 800794e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8007950:	2000      	movs	r0, #0
 8007952:	e000      	b.n	8007956 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8007954:	2001      	movs	r0, #1
}
 8007956:	bd10      	pop	{r4, pc}
 8007958:	240000d0 	.word	0x240000d0
 800795c:	240000cc 	.word	0x240000cc
 8007960:	240000d4 	.word	0x240000d4

08007964 <HAL_Init>:
{
 8007964:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007966:	2003      	movs	r0, #3
 8007968:	f000 f8a2 	bl	8007ab0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800796c:	f004 fcd2 	bl	800c314 <HAL_RCC_GetSysClockFreq>
 8007970:	490f      	ldr	r1, [pc, #60]	@ (80079b0 <HAL_Init+0x4c>)
 8007972:	698b      	ldr	r3, [r1, #24]
 8007974:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007978:	4a0e      	ldr	r2, [pc, #56]	@ (80079b4 <HAL_Init+0x50>)
 800797a:	5cd3      	ldrb	r3, [r2, r3]
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007982:	698b      	ldr	r3, [r1, #24]
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	5cd3      	ldrb	r3, [r2, r3]
 800798a:	f003 031f 	and.w	r3, r3, #31
 800798e:	fa20 f303 	lsr.w	r3, r0, r3
 8007992:	4a09      	ldr	r2, [pc, #36]	@ (80079b8 <HAL_Init+0x54>)
 8007994:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007996:	4b09      	ldr	r3, [pc, #36]	@ (80079bc <HAL_Init+0x58>)
 8007998:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800799a:	200f      	movs	r0, #15
 800799c:	f7ff ffba 	bl	8007914 <HAL_InitTick>
 80079a0:	b110      	cbz	r0, 80079a8 <HAL_Init+0x44>
    return HAL_ERROR;
 80079a2:	2401      	movs	r4, #1
}
 80079a4:	4620      	mov	r0, r4
 80079a6:	bd10      	pop	{r4, pc}
 80079a8:	4604      	mov	r4, r0
  HAL_MspInit();
 80079aa:	f7ff fc8f 	bl	80072cc <HAL_MspInit>
  return HAL_OK;
 80079ae:	e7f9      	b.n	80079a4 <HAL_Init+0x40>
 80079b0:	58024400 	.word	0x58024400
 80079b4:	0802928c 	.word	0x0802928c
 80079b8:	240000c8 	.word	0x240000c8
 80079bc:	240000cc 	.word	0x240000cc

080079c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80079c0:	4b03      	ldr	r3, [pc, #12]	@ (80079d0 <HAL_IncTick+0x10>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	4a03      	ldr	r2, [pc, #12]	@ (80079d4 <HAL_IncTick+0x14>)
 80079c6:	6811      	ldr	r1, [r2, #0]
 80079c8:	440b      	add	r3, r1
 80079ca:	6013      	str	r3, [r2, #0]
}
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	240000d0 	.word	0x240000d0
 80079d4:	24002f30 	.word	0x24002f30

080079d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80079d8:	4b01      	ldr	r3, [pc, #4]	@ (80079e0 <HAL_GetTick+0x8>)
 80079da:	6818      	ldr	r0, [r3, #0]
}
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	24002f30 	.word	0x24002f30

080079e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80079e8:	f7ff fff6 	bl	80079d8 <HAL_GetTick>
 80079ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079ee:	f1b4 3fff 	cmp.w	r4, #4294967295
 80079f2:	d002      	beq.n	80079fa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80079f4:	4b04      	ldr	r3, [pc, #16]	@ (8007a08 <HAL_Delay+0x24>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80079fa:	f7ff ffed 	bl	80079d8 <HAL_GetTick>
 80079fe:	1b40      	subs	r0, r0, r5
 8007a00:	42a0      	cmp	r0, r4
 8007a02:	d3fa      	bcc.n	80079fa <HAL_Delay+0x16>
  {
  }
}
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	240000d0 	.word	0x240000d0

08007a0c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	db07      	blt.n	8007a20 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a10:	f000 021f 	and.w	r2, r0, #31
 8007a14:	0940      	lsrs	r0, r0, #5
 8007a16:	2301      	movs	r3, #1
 8007a18:	4093      	lsls	r3, r2
 8007a1a:	4a02      	ldr	r2, [pc, #8]	@ (8007a24 <__NVIC_EnableIRQ+0x18>)
 8007a1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	e000e100 	.word	0xe000e100

08007a28 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	db0c      	blt.n	8007a46 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a2c:	f000 021f 	and.w	r2, r0, #31
 8007a30:	0940      	lsrs	r0, r0, #5
 8007a32:	2301      	movs	r3, #1
 8007a34:	4093      	lsls	r3, r2
 8007a36:	3020      	adds	r0, #32
 8007a38:	4a03      	ldr	r2, [pc, #12]	@ (8007a48 <__NVIC_DisableIRQ+0x20>)
 8007a3a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007a42:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8007a46:	4770      	bx	lr
 8007a48:	e000e100 	.word	0xe000e100

08007a4c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	db04      	blt.n	8007a5a <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a50:	0109      	lsls	r1, r1, #4
 8007a52:	b2c9      	uxtb	r1, r1
 8007a54:	4b04      	ldr	r3, [pc, #16]	@ (8007a68 <__NVIC_SetPriority+0x1c>)
 8007a56:	5419      	strb	r1, [r3, r0]
 8007a58:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a5a:	f000 000f 	and.w	r0, r0, #15
 8007a5e:	0109      	lsls	r1, r1, #4
 8007a60:	b2c9      	uxtb	r1, r1
 8007a62:	4b02      	ldr	r3, [pc, #8]	@ (8007a6c <__NVIC_SetPriority+0x20>)
 8007a64:	5419      	strb	r1, [r3, r0]
  }
}
 8007a66:	4770      	bx	lr
 8007a68:	e000e400 	.word	0xe000e400
 8007a6c:	e000ed14 	.word	0xe000ed14

08007a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a70:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a72:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a76:	f1c0 0c07 	rsb	ip, r0, #7
 8007a7a:	f1bc 0f04 	cmp.w	ip, #4
 8007a7e:	bf28      	it	cs
 8007a80:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a84:	1d03      	adds	r3, r0, #4
 8007a86:	2b06      	cmp	r3, #6
 8007a88:	d90f      	bls.n	8007aaa <NVIC_EncodePriority+0x3a>
 8007a8a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a8c:	f04f 3eff 	mov.w	lr, #4294967295
 8007a90:	fa0e f00c 	lsl.w	r0, lr, ip
 8007a94:	ea21 0100 	bic.w	r1, r1, r0
 8007a98:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a9a:	fa0e fe03 	lsl.w	lr, lr, r3
 8007a9e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8007aa2:	ea41 0002 	orr.w	r0, r1, r2
 8007aa6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e7ee      	b.n	8007a8c <NVIC_EncodePriority+0x1c>
	...

08007ab0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ab0:	4906      	ldr	r1, [pc, #24]	@ (8007acc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8007ab2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ab4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007abc:	0200      	lsls	r0, r0, #8
 8007abe:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ac2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8007ac4:	4a02      	ldr	r2, [pc, #8]	@ (8007ad0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007ac6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8007ac8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007aca:	4770      	bx	lr
 8007acc:	e000ed00 	.word	0xe000ed00
 8007ad0:	05fa0000 	.word	0x05fa0000

08007ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <HAL_NVIC_SetPriority+0x1c>)
 8007ada:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007adc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8007ae0:	f7ff ffc6 	bl	8007a70 <NVIC_EncodePriority>
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f7ff ffb0 	bl	8007a4c <__NVIC_SetPriority>
}
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	bf00      	nop
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007af4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007af6:	f7ff ff89 	bl	8007a0c <__NVIC_EnableIRQ>
}
 8007afa:	bd08      	pop	{r3, pc}

08007afc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007afc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007afe:	f7ff ff93 	bl	8007a28 <__NVIC_DisableIRQ>
}
 8007b02:	bd08      	pop	{r3, pc}

08007b04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b04:	3801      	subs	r0, #1
 8007b06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8007b0a:	d20b      	bcs.n	8007b24 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b10:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b12:	4a05      	ldr	r2, [pc, #20]	@ (8007b28 <HAL_SYSTICK_Config+0x24>)
 8007b14:	21f0      	movs	r1, #240	@ 0xf0
 8007b16:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b1e:	2207      	movs	r2, #7
 8007b20:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b22:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007b24:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007b26:	4770      	bx	lr
 8007b28:	e000ed00 	.word	0xe000ed00

08007b2c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8007b2c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007b30:	4b04      	ldr	r3, [pc, #16]	@ (8007b44 <HAL_MPU_Disable+0x18>)
 8007b32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b34:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007b38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	e000ed00 	.word	0xe000ed00

08007b48 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007b48:	f040 0001 	orr.w	r0, r0, #1
 8007b4c:	4b05      	ldr	r3, [pc, #20]	@ (8007b64 <HAL_MPU_Enable+0x1c>)
 8007b4e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007b52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b54:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007b58:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007b5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007b5e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007b62:	4770      	bx	lr
 8007b64:	e000ed00 	.word	0xe000ed00

08007b68 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007b68:	7843      	ldrb	r3, [r0, #1]
 8007b6a:	4a14      	ldr	r2, [pc, #80]	@ (8007bbc <HAL_MPU_ConfigRegion+0x54>)
 8007b6c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007b70:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8007b74:	f023 0301 	bic.w	r3, r3, #1
 8007b78:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007b7c:	6843      	ldr	r3, [r0, #4]
 8007b7e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007b82:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007b84:	7ac3      	ldrb	r3, [r0, #11]
 8007b86:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007b88:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007b8c:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007b8e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007b92:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007b94:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007b98:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007b9a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007b9e:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007ba0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007ba4:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007ba6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007baa:	7a01      	ldrb	r1, [r0, #8]
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007bac:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007bb0:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007bb2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007bb4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	e000ed00 	.word	0xe000ed00

08007bc0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d038      	beq.n	8007c36 <HAL_CRC_Init+0x76>
{
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007bc8:	7f43      	ldrb	r3, [r0, #29]
 8007bca:	b31b      	cbz	r3, 8007c14 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007bd0:	7923      	ldrb	r3, [r4, #4]
 8007bd2:	bb1b      	cbnz	r3, 8007c1c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	4a19      	ldr	r2, [pc, #100]	@ (8007c3c <HAL_CRC_Init+0x7c>)
 8007bd8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	6893      	ldr	r3, [r2, #8]
 8007bde:	f023 0318 	bic.w	r3, r3, #24
 8007be2:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007be4:	7963      	ldrb	r3, [r4, #5]
 8007be6:	bb13      	cbnz	r3, 8007c2e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295
 8007bee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007bf0:	6822      	ldr	r2, [r4, #0]
 8007bf2:	6893      	ldr	r3, [r2, #8]
 8007bf4:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8007bf8:	6961      	ldr	r1, [r4, #20]
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	6893      	ldr	r3, [r2, #8]
 8007c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c06:	69a1      	ldr	r1, [r4, #24]
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8007c10:	2000      	movs	r0, #0
}
 8007c12:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8007c14:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007c16:	f7fe fb47 	bl	80062a8 <HAL_CRC_MspInit>
 8007c1a:	e7d7      	b.n	8007bcc <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007c1c:	68e2      	ldr	r2, [r4, #12]
 8007c1e:	68a1      	ldr	r1, [r4, #8]
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 f80d 	bl	8007c40 <HAL_CRCEx_Polynomial_Set>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d0dc      	beq.n	8007be4 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	e7f1      	b.n	8007c12 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	6922      	ldr	r2, [r4, #16]
 8007c32:	611a      	str	r2, [r3, #16]
 8007c34:	e7dc      	b.n	8007bf0 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8007c36:	2001      	movs	r0, #1
}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	04c11db7 	.word	0x04c11db7

08007c40 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007c40:	f011 0f01 	tst.w	r1, #1
 8007c44:	d030      	beq.n	8007ca8 <HAL_CRCEx_Polynomial_Set+0x68>
{
 8007c46:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007c48:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b134      	cbz	r4, 8007c5e <HAL_CRCEx_Polynomial_Set+0x1e>
 8007c50:	f003 0c1f 	and.w	ip, r3, #31
 8007c54:	fa21 fc0c 	lsr.w	ip, r1, ip
 8007c58:	f01c 0f01 	tst.w	ip, #1
 8007c5c:	d0f5      	beq.n	8007c4a <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
 8007c5e:	2a18      	cmp	r2, #24
 8007c60:	d824      	bhi.n	8007cac <HAL_CRCEx_Polynomial_Set+0x6c>
 8007c62:	e8df f002 	tbb	[pc, r2]
 8007c66:	230f      	.short	0x230f
 8007c68:	23232323 	.word	0x23232323
 8007c6c:	231d2323 	.word	0x231d2323
 8007c70:	23232323 	.word	0x23232323
 8007c74:	23192323 	.word	0x23192323
 8007c78:	23232323 	.word	0x23232323
 8007c7c:	2323      	.short	0x2323
 8007c7e:	0d          	.byte	0x0d
 8007c7f:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007c80:	2b06      	cmp	r3, #6
 8007c82:	d817      	bhi.n	8007cb4 <HAL_CRCEx_Polynomial_Set+0x74>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007c84:	6803      	ldr	r3, [r0, #0]
 8007c86:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007c88:	6801      	ldr	r1, [r0, #0]
 8007c8a:	688b      	ldr	r3, [r1, #8]
 8007c8c:	f023 0318 	bic.w	r3, r3, #24
 8007c90:	4313      	orrs	r3, r2
 8007c92:	608b      	str	r3, [r1, #8]
 8007c94:	2000      	movs	r0, #0
 8007c96:	e00a      	b.n	8007cae <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_8B)
 8007c98:	2b07      	cmp	r3, #7
 8007c9a:	d9f3      	bls.n	8007c84 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	e006      	b.n	8007cae <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_16B)
 8007ca0:	2b0f      	cmp	r3, #15
 8007ca2:	d9ef      	bls.n	8007c84 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	e002      	b.n	8007cae <HAL_CRCEx_Polynomial_Set+0x6e>
    status =  HAL_ERROR;
 8007ca8:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8007caa:	4770      	bx	lr
    switch (PolyLength)
 8007cac:	2001      	movs	r0, #1
}
 8007cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cb2:	4770      	bx	lr
          status =   HAL_ERROR;
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	e7fa      	b.n	8007cae <HAL_CRCEx_Polynomial_Set+0x6e>

08007cb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cb8:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cba:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cbc:	6804      	ldr	r4, [r0, #0]
 8007cbe:	4e66      	ldr	r6, [pc, #408]	@ (8007e58 <DMA_SetConfig+0x1a0>)
 8007cc0:	4d66      	ldr	r5, [pc, #408]	@ (8007e5c <DMA_SetConfig+0x1a4>)
 8007cc2:	42ac      	cmp	r4, r5
 8007cc4:	bf18      	it	ne
 8007cc6:	42b4      	cmpne	r4, r6
 8007cc8:	d042      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007cca:	3518      	adds	r5, #24
 8007ccc:	42ac      	cmp	r4, r5
 8007cce:	d03f      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007cd0:	3518      	adds	r5, #24
 8007cd2:	42ac      	cmp	r4, r5
 8007cd4:	d03c      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007cd6:	3518      	adds	r5, #24
 8007cd8:	42ac      	cmp	r4, r5
 8007cda:	d039      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007cdc:	3518      	adds	r5, #24
 8007cde:	42ac      	cmp	r4, r5
 8007ce0:	d036      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007ce2:	3518      	adds	r5, #24
 8007ce4:	42ac      	cmp	r4, r5
 8007ce6:	d033      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007ce8:	3518      	adds	r5, #24
 8007cea:	42ac      	cmp	r4, r5
 8007cec:	d030      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007cee:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8007cf2:	42ac      	cmp	r4, r5
 8007cf4:	d02c      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007cf6:	3518      	adds	r5, #24
 8007cf8:	42ac      	cmp	r4, r5
 8007cfa:	d029      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007cfc:	3518      	adds	r5, #24
 8007cfe:	42ac      	cmp	r4, r5
 8007d00:	d026      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d02:	3518      	adds	r5, #24
 8007d04:	42ac      	cmp	r4, r5
 8007d06:	d023      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d08:	3518      	adds	r5, #24
 8007d0a:	42ac      	cmp	r4, r5
 8007d0c:	d020      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d0e:	3518      	adds	r5, #24
 8007d10:	42ac      	cmp	r4, r5
 8007d12:	d01d      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d14:	3518      	adds	r5, #24
 8007d16:	42ac      	cmp	r4, r5
 8007d18:	d01a      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d1a:	3518      	adds	r5, #24
 8007d1c:	42ac      	cmp	r4, r5
 8007d1e:	d017      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d20:	4d4f      	ldr	r5, [pc, #316]	@ (8007e60 <DMA_SetConfig+0x1a8>)
 8007d22:	42ac      	cmp	r4, r5
 8007d24:	d014      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d26:	3514      	adds	r5, #20
 8007d28:	42ac      	cmp	r4, r5
 8007d2a:	d011      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d2c:	3514      	adds	r5, #20
 8007d2e:	42ac      	cmp	r4, r5
 8007d30:	d00e      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d32:	3514      	adds	r5, #20
 8007d34:	42ac      	cmp	r4, r5
 8007d36:	d00b      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d38:	3514      	adds	r5, #20
 8007d3a:	42ac      	cmp	r4, r5
 8007d3c:	d008      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d3e:	3514      	adds	r5, #20
 8007d40:	42ac      	cmp	r4, r5
 8007d42:	d005      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d44:	3514      	adds	r5, #20
 8007d46:	42ac      	cmp	r4, r5
 8007d48:	d002      	beq.n	8007d50 <DMA_SetConfig+0x98>
 8007d4a:	3514      	adds	r5, #20
 8007d4c:	42ac      	cmp	r4, r5
 8007d4e:	d107      	bne.n	8007d60 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d50:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 8007d52:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8007d54:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007d56:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
 8007d58:	b114      	cbz	r4, 8007d60 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d5a:	6f04      	ldr	r4, [r0, #112]	@ 0x70
 8007d5c:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8007d5e:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d60:	6804      	ldr	r4, [r0, #0]
 8007d62:	4e3d      	ldr	r6, [pc, #244]	@ (8007e58 <DMA_SetConfig+0x1a0>)
 8007d64:	4d3d      	ldr	r5, [pc, #244]	@ (8007e5c <DMA_SetConfig+0x1a4>)
 8007d66:	42ac      	cmp	r4, r5
 8007d68:	bf18      	it	ne
 8007d6a:	42b4      	cmpne	r4, r6
 8007d6c:	d052      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007d6e:	3518      	adds	r5, #24
 8007d70:	42ac      	cmp	r4, r5
 8007d72:	d04f      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007d74:	3518      	adds	r5, #24
 8007d76:	42ac      	cmp	r4, r5
 8007d78:	d04c      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007d7a:	3518      	adds	r5, #24
 8007d7c:	42ac      	cmp	r4, r5
 8007d7e:	d049      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007d80:	3518      	adds	r5, #24
 8007d82:	42ac      	cmp	r4, r5
 8007d84:	d046      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007d86:	3518      	adds	r5, #24
 8007d88:	42ac      	cmp	r4, r5
 8007d8a:	d043      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007d8c:	3518      	adds	r5, #24
 8007d8e:	42ac      	cmp	r4, r5
 8007d90:	d040      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007d92:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8007d96:	42ac      	cmp	r4, r5
 8007d98:	d03c      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007d9a:	3518      	adds	r5, #24
 8007d9c:	42ac      	cmp	r4, r5
 8007d9e:	d039      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007da0:	3518      	adds	r5, #24
 8007da2:	42ac      	cmp	r4, r5
 8007da4:	d036      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007da6:	3518      	adds	r5, #24
 8007da8:	42ac      	cmp	r4, r5
 8007daa:	d033      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007dac:	3518      	adds	r5, #24
 8007dae:	42ac      	cmp	r4, r5
 8007db0:	d030      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007db2:	3518      	adds	r5, #24
 8007db4:	42ac      	cmp	r4, r5
 8007db6:	d02d      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007db8:	3518      	adds	r5, #24
 8007dba:	42ac      	cmp	r4, r5
 8007dbc:	d02a      	beq.n	8007e14 <DMA_SetConfig+0x15c>
 8007dbe:	3518      	adds	r5, #24
 8007dc0:	42ac      	cmp	r4, r5
 8007dc2:	d027      	beq.n	8007e14 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007dc4:	4e26      	ldr	r6, [pc, #152]	@ (8007e60 <DMA_SetConfig+0x1a8>)
 8007dc6:	4d27      	ldr	r5, [pc, #156]	@ (8007e64 <DMA_SetConfig+0x1ac>)
 8007dc8:	42ac      	cmp	r4, r5
 8007dca:	bf18      	it	ne
 8007dcc:	42b4      	cmpne	r4, r6
 8007dce:	d011      	beq.n	8007df4 <DMA_SetConfig+0x13c>
 8007dd0:	4d25      	ldr	r5, [pc, #148]	@ (8007e68 <DMA_SetConfig+0x1b0>)
 8007dd2:	42ac      	cmp	r4, r5
 8007dd4:	d00e      	beq.n	8007df4 <DMA_SetConfig+0x13c>
 8007dd6:	3514      	adds	r5, #20
 8007dd8:	42ac      	cmp	r4, r5
 8007dda:	d00b      	beq.n	8007df4 <DMA_SetConfig+0x13c>
 8007ddc:	3514      	adds	r5, #20
 8007dde:	42ac      	cmp	r4, r5
 8007de0:	d008      	beq.n	8007df4 <DMA_SetConfig+0x13c>
 8007de2:	3514      	adds	r5, #20
 8007de4:	42ac      	cmp	r4, r5
 8007de6:	d005      	beq.n	8007df4 <DMA_SetConfig+0x13c>
 8007de8:	3514      	adds	r5, #20
 8007dea:	42ac      	cmp	r4, r5
 8007dec:	d002      	beq.n	8007df4 <DMA_SetConfig+0x13c>
 8007dee:	3514      	adds	r5, #20
 8007df0:	42ac      	cmp	r4, r5
 8007df2:	d124      	bne.n	8007e3e <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007df4:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8007df6:	f004 051f 	and.w	r5, r4, #31
 8007dfa:	2401      	movs	r4, #1
 8007dfc:	40ac      	lsls	r4, r5
 8007dfe:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007e00:	6804      	ldr	r4, [r0, #0]
 8007e02:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e04:	6883      	ldr	r3, [r0, #8]
 8007e06:	2b40      	cmp	r3, #64	@ 0x40
 8007e08:	d020      	beq.n	8007e4c <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007e0a:	6803      	ldr	r3, [r0, #0]
 8007e0c:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007e0e:	6803      	ldr	r3, [r0, #0]
 8007e10:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e12:	e014      	b.n	8007e3e <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e14:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8007e16:	f004 0c1f 	and.w	ip, r4, #31
 8007e1a:	243f      	movs	r4, #63	@ 0x3f
 8007e1c:	fa04 f40c 	lsl.w	r4, r4, ip
 8007e20:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e22:	6805      	ldr	r5, [r0, #0]
 8007e24:	682c      	ldr	r4, [r5, #0]
 8007e26:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8007e2a:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007e2c:	6804      	ldr	r4, [r0, #0]
 8007e2e:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e30:	6883      	ldr	r3, [r0, #8]
 8007e32:	2b40      	cmp	r3, #64	@ 0x40
 8007e34:	d005      	beq.n	8007e42 <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007e36:	6803      	ldr	r3, [r0, #0]
 8007e38:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007e3a:	6803      	ldr	r3, [r0, #0]
 8007e3c:	60da      	str	r2, [r3, #12]
}
 8007e3e:	bcf0      	pop	{r4, r5, r6, r7}
 8007e40:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007e42:	6803      	ldr	r3, [r0, #0]
 8007e44:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007e46:	6803      	ldr	r3, [r0, #0]
 8007e48:	60d9      	str	r1, [r3, #12]
 8007e4a:	e7f8      	b.n	8007e3e <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007e4c:	6803      	ldr	r3, [r0, #0]
 8007e4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007e50:	6803      	ldr	r3, [r0, #0]
 8007e52:	60d9      	str	r1, [r3, #12]
 8007e54:	e7f3      	b.n	8007e3e <DMA_SetConfig+0x186>
 8007e56:	bf00      	nop
 8007e58:	40020010 	.word	0x40020010
 8007e5c:	40020028 	.word	0x40020028
 8007e60:	58025408 	.word	0x58025408
 8007e64:	5802541c 	.word	0x5802541c
 8007e68:	58025430 	.word	0x58025430

08007e6c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e6c:	6803      	ldr	r3, [r0, #0]
 8007e6e:	4927      	ldr	r1, [pc, #156]	@ (8007f0c <DMA_CalcBaseAndBitshift+0xa0>)
 8007e70:	4a27      	ldr	r2, [pc, #156]	@ (8007f10 <DMA_CalcBaseAndBitshift+0xa4>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	bf18      	it	ne
 8007e76:	428b      	cmpne	r3, r1
 8007e78:	d02f      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007e7a:	3218      	adds	r2, #24
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d02c      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007e80:	3218      	adds	r2, #24
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d029      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007e86:	3218      	adds	r2, #24
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d026      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007e8c:	3218      	adds	r2, #24
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d023      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007e92:	3218      	adds	r2, #24
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d020      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007e98:	3218      	adds	r2, #24
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d01d      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007e9e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d019      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007ea6:	3218      	adds	r2, #24
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d016      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007eac:	3218      	adds	r2, #24
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d013      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007eb2:	3218      	adds	r2, #24
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d010      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007eb8:	3218      	adds	r2, #24
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d00d      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007ebe:	3218      	adds	r2, #24
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00a      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007ec4:	3218      	adds	r2, #24
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d007      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
 8007eca:	3218      	adds	r2, #24
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d004      	beq.n	8007eda <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ed0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ed4:	6583      	str	r3, [r0, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8007ed6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8007ed8:	4770      	bx	lr
{
 8007eda:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007edc:	b2d9      	uxtb	r1, r3
 8007ede:	3910      	subs	r1, #16
 8007ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8007f14 <DMA_CalcBaseAndBitshift+0xa8>)
 8007ee2:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007ee6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007eea:	4c0b      	ldr	r4, [pc, #44]	@ (8007f18 <DMA_CalcBaseAndBitshift+0xac>)
 8007eec:	5ca2      	ldrb	r2, [r4, r2]
 8007eee:	65c2      	str	r2, [r0, #92]	@ 0x5c
    if (stream_number > 3U)
 8007ef0:	295f      	cmp	r1, #95	@ 0x5f
 8007ef2:	d907      	bls.n	8007f04 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007ef4:	4a09      	ldr	r2, [pc, #36]	@ (8007f1c <DMA_CalcBaseAndBitshift+0xb0>)
 8007ef6:	401a      	ands	r2, r3
 8007ef8:	3204      	adds	r2, #4
 8007efa:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8007efc:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8007efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f02:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007f04:	4a05      	ldr	r2, [pc, #20]	@ (8007f1c <DMA_CalcBaseAndBitshift+0xb0>)
 8007f06:	401a      	ands	r2, r3
 8007f08:	6582      	str	r2, [r0, #88]	@ 0x58
 8007f0a:	e7f7      	b.n	8007efc <DMA_CalcBaseAndBitshift+0x90>
 8007f0c:	40020010 	.word	0x40020010
 8007f10:	40020028 	.word	0x40020028
 8007f14:	aaaaaaab 	.word	0xaaaaaaab
 8007f18:	0802929c 	.word	0x0802929c
 8007f1c:	fffffc00 	.word	0xfffffc00

08007f20 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f20:	6983      	ldr	r3, [r0, #24]
 8007f22:	b99b      	cbnz	r3, 8007f4c <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f24:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d00a      	beq.n	8007f40 <DMA_CheckFifoParam+0x20>
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d002      	beq.n	8007f34 <DMA_CheckFifoParam+0x14>
 8007f2e:	b10b      	cbz	r3, 8007f34 <DMA_CheckFifoParam+0x14>
 8007f30:	2000      	movs	r0, #0
 8007f32:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f34:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f36:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007f3a:	d12a      	bne.n	8007f92 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f40:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007f46:	d026      	beq.n	8007f96 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8007f48:	2000      	movs	r0, #0
 8007f4a:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f50:	d00a      	beq.n	8007f68 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007f52:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d926      	bls.n	8007fa6 <DMA_CheckFifoParam+0x86>
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d126      	bne.n	8007faa <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f5c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f5e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007f62:	d124      	bne.n	8007fae <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8007f64:	2000      	movs	r0, #0
 8007f66:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8007f68:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d803      	bhi.n	8007f76 <DMA_CheckFifoParam+0x56>
 8007f6e:	e8df f003 	tbb	[pc, r3]
 8007f72:	0414      	.short	0x0414
 8007f74:	0a14      	.short	0x0a14
 8007f76:	2000      	movs	r0, #0
 8007f78:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f7a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f7c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007f80:	d10d      	bne.n	8007f9e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8007f82:	2000      	movs	r0, #0
 8007f84:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f86:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007f8c:	d009      	beq.n	8007fa2 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8007f8e:	2000      	movs	r0, #0
 8007f90:	4770      	bx	lr
          status = HAL_ERROR;
 8007f92:	2001      	movs	r0, #1
 8007f94:	4770      	bx	lr
          status = HAL_ERROR;
 8007f96:	2001      	movs	r0, #1
 8007f98:	4770      	bx	lr
        status = HAL_ERROR;
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	4770      	bx	lr
          status = HAL_ERROR;
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	4770      	bx	lr
          status = HAL_ERROR;
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	4770      	bx	lr
        status = HAL_ERROR;
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8007faa:	2000      	movs	r0, #0
 8007fac:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8007fae:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8007fb0:	4770      	bx	lr
	...

08007fb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007fb4:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fb6:	4921      	ldr	r1, [pc, #132]	@ (800803c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8007fb8:	4a21      	ldr	r2, [pc, #132]	@ (8008040 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	bf18      	it	ne
 8007fbe:	428b      	cmpne	r3, r1
 8007fc0:	d027      	beq.n	8008012 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fc2:	3214      	adds	r2, #20
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d024      	beq.n	8008012 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fc8:	3214      	adds	r2, #20
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d021      	beq.n	8008012 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fce:	3214      	adds	r2, #20
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d01e      	beq.n	8008012 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fd4:	3214      	adds	r2, #20
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d01b      	beq.n	8008012 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fda:	3214      	adds	r2, #20
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d018      	beq.n	8008012 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fe0:	3214      	adds	r2, #20
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d015      	beq.n	8008012 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	3a10      	subs	r2, #16
 8007fea:	4916      	ldr	r1, [pc, #88]	@ (8008044 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8007fec:	fba1 1202 	umull	r1, r2, r1, r2
 8007ff0:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007ff2:	4915      	ldr	r1, [pc, #84]	@ (8008048 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8007ff4:	4419      	add	r1, r3
 8007ff6:	29a8      	cmp	r1, #168	@ 0xa8
 8007ff8:	d91e      	bls.n	8008038 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007ffa:	4b14      	ldr	r3, [pc, #80]	@ (800804c <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	6603      	str	r3, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008002:	4b13      	ldr	r3, [pc, #76]	@ (8008050 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8008004:	6643      	str	r3, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008006:	f002 021f 	and.w	r2, r2, #31
 800800a:	2301      	movs	r3, #1
 800800c:	4093      	lsls	r3, r2
 800800e:	6683      	str	r3, [r0, #104]	@ 0x68
  }
}
 8008010:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008012:	b2db      	uxtb	r3, r3
 8008014:	3b08      	subs	r3, #8
 8008016:	4a0f      	ldr	r2, [pc, #60]	@ (8008054 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8008018:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800801c:	4a0e      	ldr	r2, [pc, #56]	@ (8008058 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 800801e:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8008022:	0092      	lsls	r2, r2, #2
 8008024:	6602      	str	r2, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008026:	4a0d      	ldr	r2, [pc, #52]	@ (800805c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8008028:	6642      	str	r2, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800802a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800802e:	2201      	movs	r2, #1
 8008030:	fa02 f303 	lsl.w	r3, r2, r3
 8008034:	6683      	str	r3, [r0, #104]	@ 0x68
 8008036:	4770      	bx	lr
      stream_number += 8U;
 8008038:	3208      	adds	r2, #8
 800803a:	e7de      	b.n	8007ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 800803c:	58025408 	.word	0x58025408
 8008040:	5802541c 	.word	0x5802541c
 8008044:	aaaaaaab 	.word	0xaaaaaaab
 8008048:	bffdfbf0 	.word	0xbffdfbf0
 800804c:	10008200 	.word	0x10008200
 8008050:	40020880 	.word	0x40020880
 8008054:	cccccccd 	.word	0xcccccccd
 8008058:	16009600 	.word	0x16009600
 800805c:	58025880 	.word	0x58025880

08008060 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008060:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008062:	1e4a      	subs	r2, r1, #1
 8008064:	2a07      	cmp	r2, #7
 8008066:	d82b      	bhi.n	80080c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 8008068:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800806a:	6803      	ldr	r3, [r0, #0]
 800806c:	4d15      	ldr	r5, [pc, #84]	@ (80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 800806e:	4c16      	ldr	r4, [pc, #88]	@ (80080c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8008070:	42a3      	cmp	r3, r4
 8008072:	bf18      	it	ne
 8008074:	42ab      	cmpne	r3, r5
 8008076:	d018      	beq.n	80080aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8008078:	3414      	adds	r4, #20
 800807a:	42a3      	cmp	r3, r4
 800807c:	d015      	beq.n	80080aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800807e:	3414      	adds	r4, #20
 8008080:	42a3      	cmp	r3, r4
 8008082:	d012      	beq.n	80080aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8008084:	3414      	adds	r4, #20
 8008086:	42a3      	cmp	r3, r4
 8008088:	d00f      	beq.n	80080aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800808a:	3414      	adds	r4, #20
 800808c:	42a3      	cmp	r3, r4
 800808e:	d00c      	beq.n	80080aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8008090:	3414      	adds	r4, #20
 8008092:	42a3      	cmp	r3, r4
 8008094:	d009      	beq.n	80080aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8008096:	3414      	adds	r4, #20
 8008098:	42a3      	cmp	r3, r4
 800809a:	d006      	beq.n	80080aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800809c:	4b0b      	ldr	r3, [pc, #44]	@ (80080cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 800809e:	440b      	add	r3, r1
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	66c3      	str	r3, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80080a4:	4b0a      	ldr	r3, [pc, #40]	@ (80080d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 80080a6:	6703      	str	r3, [r0, #112]	@ 0x70
 80080a8:	e005      	b.n	80080b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80080aa:	4b0a      	ldr	r3, [pc, #40]	@ (80080d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 80080ac:	440b      	add	r3, r1
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	66c3      	str	r3, [r0, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80080b2:	4b09      	ldr	r3, [pc, #36]	@ (80080d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 80080b4:	6703      	str	r3, [r0, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80080b6:	2301      	movs	r3, #1
 80080b8:	4093      	lsls	r3, r2
 80080ba:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 80080bc:	bc30      	pop	{r4, r5}
 80080be:	4770      	bx	lr
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	58025408 	.word	0x58025408
 80080c8:	5802541c 	.word	0x5802541c
 80080cc:	1000823f 	.word	0x1000823f
 80080d0:	40020940 	.word	0x40020940
 80080d4:	1600963f 	.word	0x1600963f
 80080d8:	58025940 	.word	0x58025940

080080dc <HAL_DMA_Init>:
{
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80080e0:	f7ff fc7a 	bl	80079d8 <HAL_GetTick>
  if(hdma == NULL)
 80080e4:	2c00      	cmp	r4, #0
 80080e6:	f000 81b3 	beq.w	8008450 <HAL_DMA_Init+0x374>
 80080ea:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	4953      	ldr	r1, [pc, #332]	@ (800823c <HAL_DMA_Init+0x160>)
 80080f0:	4a53      	ldr	r2, [pc, #332]	@ (8008240 <HAL_DMA_Init+0x164>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	bf18      	it	ne
 80080f6:	428b      	cmpne	r3, r1
 80080f8:	bf0c      	ite	eq
 80080fa:	2101      	moveq	r1, #1
 80080fc:	2100      	movne	r1, #0
 80080fe:	d050      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008100:	3218      	adds	r2, #24
 8008102:	4293      	cmp	r3, r2
 8008104:	d04d      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008106:	3218      	adds	r2, #24
 8008108:	4293      	cmp	r3, r2
 800810a:	d04a      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 800810c:	3218      	adds	r2, #24
 800810e:	4293      	cmp	r3, r2
 8008110:	d047      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008112:	3218      	adds	r2, #24
 8008114:	4293      	cmp	r3, r2
 8008116:	d044      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008118:	3218      	adds	r2, #24
 800811a:	4293      	cmp	r3, r2
 800811c:	d041      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 800811e:	3218      	adds	r2, #24
 8008120:	4293      	cmp	r3, r2
 8008122:	d03e      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008124:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008128:	4293      	cmp	r3, r2
 800812a:	d03a      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 800812c:	3218      	adds	r2, #24
 800812e:	4293      	cmp	r3, r2
 8008130:	d037      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008132:	3218      	adds	r2, #24
 8008134:	4293      	cmp	r3, r2
 8008136:	d034      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008138:	3218      	adds	r2, #24
 800813a:	4293      	cmp	r3, r2
 800813c:	d031      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 800813e:	3218      	adds	r2, #24
 8008140:	4293      	cmp	r3, r2
 8008142:	d02e      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008144:	3218      	adds	r2, #24
 8008146:	4293      	cmp	r3, r2
 8008148:	d02b      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 800814a:	3218      	adds	r2, #24
 800814c:	4293      	cmp	r3, r2
 800814e:	d028      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
 8008150:	3218      	adds	r2, #24
 8008152:	4293      	cmp	r3, r2
 8008154:	d025      	beq.n	80081a2 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008156:	493b      	ldr	r1, [pc, #236]	@ (8008244 <HAL_DMA_Init+0x168>)
 8008158:	4a3b      	ldr	r2, [pc, #236]	@ (8008248 <HAL_DMA_Init+0x16c>)
 800815a:	4293      	cmp	r3, r2
 800815c:	bf18      	it	ne
 800815e:	428b      	cmpne	r3, r1
 8008160:	f000 812e 	beq.w	80083c0 <HAL_DMA_Init+0x2e4>
 8008164:	4a39      	ldr	r2, [pc, #228]	@ (800824c <HAL_DMA_Init+0x170>)
 8008166:	4293      	cmp	r3, r2
 8008168:	f000 812a 	beq.w	80083c0 <HAL_DMA_Init+0x2e4>
 800816c:	3214      	adds	r2, #20
 800816e:	4293      	cmp	r3, r2
 8008170:	f000 8126 	beq.w	80083c0 <HAL_DMA_Init+0x2e4>
 8008174:	3214      	adds	r2, #20
 8008176:	4293      	cmp	r3, r2
 8008178:	f000 8122 	beq.w	80083c0 <HAL_DMA_Init+0x2e4>
 800817c:	3214      	adds	r2, #20
 800817e:	4293      	cmp	r3, r2
 8008180:	f000 811e 	beq.w	80083c0 <HAL_DMA_Init+0x2e4>
 8008184:	3214      	adds	r2, #20
 8008186:	4293      	cmp	r3, r2
 8008188:	f000 811a 	beq.w	80083c0 <HAL_DMA_Init+0x2e4>
 800818c:	3214      	adds	r2, #20
 800818e:	4293      	cmp	r3, r2
 8008190:	f000 8116 	beq.w	80083c0 <HAL_DMA_Init+0x2e4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008194:	2340      	movs	r3, #64	@ 0x40
 8008196:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008198:	2303      	movs	r3, #3
 800819a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800819e:	2001      	movs	r0, #1
 80081a0:	e04a      	b.n	8008238 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80081a2:	2202      	movs	r2, #2
 80081a4:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80081a8:	2200      	movs	r2, #0
 80081aa:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80081ae:	bb79      	cbnz	r1, 8008210 <HAL_DMA_Init+0x134>
 80081b0:	4a27      	ldr	r2, [pc, #156]	@ (8008250 <HAL_DMA_Init+0x174>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d02c      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081b6:	3218      	adds	r2, #24
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d029      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081bc:	3218      	adds	r2, #24
 80081be:	4293      	cmp	r3, r2
 80081c0:	d026      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081c2:	3218      	adds	r2, #24
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d023      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081c8:	3218      	adds	r2, #24
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d020      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081ce:	3218      	adds	r2, #24
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d01d      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081d4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80081d8:	4293      	cmp	r3, r2
 80081da:	d019      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081dc:	3218      	adds	r2, #24
 80081de:	4293      	cmp	r3, r2
 80081e0:	d016      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081e2:	3218      	adds	r2, #24
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d013      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081e8:	3218      	adds	r2, #24
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d010      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081ee:	3218      	adds	r2, #24
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00d      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081f4:	3218      	adds	r2, #24
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00a      	beq.n	8008210 <HAL_DMA_Init+0x134>
 80081fa:	3218      	adds	r2, #24
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d007      	beq.n	8008210 <HAL_DMA_Init+0x134>
 8008200:	3218      	adds	r2, #24
 8008202:	4293      	cmp	r3, r2
 8008204:	d004      	beq.n	8008210 <HAL_DMA_Init+0x134>
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	f022 0201 	bic.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e003      	b.n	8008218 <HAL_DMA_Init+0x13c>
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f012 0f01 	tst.w	r2, #1
 8008220:	d018      	beq.n	8008254 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008222:	f7ff fbd9 	bl	80079d8 <HAL_GetTick>
 8008226:	1b43      	subs	r3, r0, r5
 8008228:	2b05      	cmp	r3, #5
 800822a:	d9f5      	bls.n	8008218 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800822c:	2320      	movs	r3, #32
 800822e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8008230:	2303      	movs	r3, #3
 8008232:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR;
 8008236:	2001      	movs	r0, #1
}
 8008238:	bd70      	pop	{r4, r5, r6, pc}
 800823a:	bf00      	nop
 800823c:	40020010 	.word	0x40020010
 8008240:	40020028 	.word	0x40020028
 8008244:	58025408 	.word	0x58025408
 8008248:	5802541c 	.word	0x5802541c
 800824c:	58025430 	.word	0x58025430
 8008250:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008254:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008256:	497f      	ldr	r1, [pc, #508]	@ (8008454 <HAL_DMA_Init+0x378>)
 8008258:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 800825a:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800825c:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 800825e:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008260:	6920      	ldr	r0, [r4, #16]
 8008262:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008264:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008266:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008268:	69a0      	ldr	r0, [r4, #24]
 800826a:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 800826c:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800826e:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8008270:	6a20      	ldr	r0, [r4, #32]
 8008272:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8008274:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008276:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008278:	2904      	cmp	r1, #4
 800827a:	f000 8096 	beq.w	80083aa <HAL_DMA_Init+0x2ce>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800827e:	6861      	ldr	r1, [r4, #4]
 8008280:	f1a1 0529 	sub.w	r5, r1, #41	@ 0x29
 8008284:	f1a1 003f 	sub.w	r0, r1, #63	@ 0x3f
 8008288:	2803      	cmp	r0, #3
 800828a:	bf88      	it	hi
 800828c:	2d05      	cmphi	r5, #5
 800828e:	d90a      	bls.n	80082a6 <HAL_DMA_Init+0x1ca>
 8008290:	f1a1 0047 	sub.w	r0, r1, #71	@ 0x47
 8008294:	2801      	cmp	r0, #1
 8008296:	d906      	bls.n	80082a6 <HAL_DMA_Init+0x1ca>
 8008298:	f1a1 004f 	sub.w	r0, r1, #79	@ 0x4f
 800829c:	2803      	cmp	r0, #3
 800829e:	d902      	bls.n	80082a6 <HAL_DMA_Init+0x1ca>
 80082a0:	3974      	subs	r1, #116	@ 0x74
 80082a2:	2903      	cmp	r1, #3
 80082a4:	d801      	bhi.n	80082aa <HAL_DMA_Init+0x1ce>
        registerValue |= DMA_SxCR_TRBUFF;
 80082a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80082aa:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80082ac:	6826      	ldr	r6, [r4, #0]
 80082ae:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80082b0:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80082b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082b6:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d108      	bne.n	80082ce <HAL_DMA_Init+0x1f2>
      registerValue |= hdma->Init.FIFOThreshold;
 80082bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80082be:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80082c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80082c2:	b123      	cbz	r3, 80082ce <HAL_DMA_Init+0x1f2>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7ff fe2b 	bl	8007f20 <DMA_CheckFifoParam>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d172      	bne.n	80083b4 <HAL_DMA_Init+0x2d8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80082ce:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80082d0:	4620      	mov	r0, r4
 80082d2:	f7ff fdcb 	bl	8007e6c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082d6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80082d8:	f003 021f 	and.w	r2, r3, #31
 80082dc:	233f      	movs	r3, #63	@ 0x3f
 80082de:	4093      	lsls	r3, r2
 80082e0:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	495c      	ldr	r1, [pc, #368]	@ (8008458 <HAL_DMA_Init+0x37c>)
 80082e6:	4a5d      	ldr	r2, [pc, #372]	@ (800845c <HAL_DMA_Init+0x380>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	bf18      	it	ne
 80082ec:	428b      	cmpne	r3, r1
 80082ee:	d042      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 80082f0:	3218      	adds	r2, #24
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d03f      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 80082f6:	3218      	adds	r2, #24
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d03c      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 80082fc:	3218      	adds	r2, #24
 80082fe:	4293      	cmp	r3, r2
 8008300:	d039      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008302:	3218      	adds	r2, #24
 8008304:	4293      	cmp	r3, r2
 8008306:	d036      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008308:	3218      	adds	r2, #24
 800830a:	4293      	cmp	r3, r2
 800830c:	d033      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 800830e:	3218      	adds	r2, #24
 8008310:	4293      	cmp	r3, r2
 8008312:	d030      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008314:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008318:	4293      	cmp	r3, r2
 800831a:	d02c      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 800831c:	3218      	adds	r2, #24
 800831e:	4293      	cmp	r3, r2
 8008320:	d029      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008322:	3218      	adds	r2, #24
 8008324:	4293      	cmp	r3, r2
 8008326:	d026      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008328:	3218      	adds	r2, #24
 800832a:	4293      	cmp	r3, r2
 800832c:	d023      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 800832e:	3218      	adds	r2, #24
 8008330:	4293      	cmp	r3, r2
 8008332:	d020      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008334:	3218      	adds	r2, #24
 8008336:	4293      	cmp	r3, r2
 8008338:	d01d      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 800833a:	3218      	adds	r2, #24
 800833c:	4293      	cmp	r3, r2
 800833e:	d01a      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008340:	3218      	adds	r2, #24
 8008342:	4293      	cmp	r3, r2
 8008344:	d017      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008346:	4a46      	ldr	r2, [pc, #280]	@ (8008460 <HAL_DMA_Init+0x384>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d014      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 800834c:	3214      	adds	r2, #20
 800834e:	4293      	cmp	r3, r2
 8008350:	d011      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008352:	3214      	adds	r2, #20
 8008354:	4293      	cmp	r3, r2
 8008356:	d00e      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008358:	3214      	adds	r2, #20
 800835a:	4293      	cmp	r3, r2
 800835c:	d00b      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 800835e:	3214      	adds	r2, #20
 8008360:	4293      	cmp	r3, r2
 8008362:	d008      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008364:	3214      	adds	r2, #20
 8008366:	4293      	cmp	r3, r2
 8008368:	d005      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 800836a:	3214      	adds	r2, #20
 800836c:	4293      	cmp	r3, r2
 800836e:	d002      	beq.n	8008376 <HAL_DMA_Init+0x29a>
 8008370:	3214      	adds	r2, #20
 8008372:	4293      	cmp	r3, r2
 8008374:	d113      	bne.n	800839e <HAL_DMA_Init+0x2c2>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff fe1c 	bl	8007fb4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800837c:	68a3      	ldr	r3, [r4, #8]
 800837e:	2b80      	cmp	r3, #128	@ 0x80
 8008380:	d059      	beq.n	8008436 <HAL_DMA_Init+0x35a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008382:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8008384:	7922      	ldrb	r2, [r4, #4]
 8008386:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800838a:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800838c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	3b01      	subs	r3, #1
 8008392:	2b07      	cmp	r3, #7
 8008394:	d952      	bls.n	800843c <HAL_DMA_Init+0x360>
      hdma->DMAmuxRequestGen = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800839a:	6723      	str	r3, [r4, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800839c:	6763      	str	r3, [r4, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800839e:	2000      	movs	r0, #0
 80083a0:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80083a2:	2301      	movs	r3, #1
 80083a4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80083a8:	e746      	b.n	8008238 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80083aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083ac:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80083ae:	4301      	orrs	r1, r0
 80083b0:	430a      	orrs	r2, r1
 80083b2:	e764      	b.n	800827e <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083b4:	2340      	movs	r3, #64	@ 0x40
 80083b6:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80083b8:	2001      	movs	r0, #1
 80083ba:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
          return HAL_ERROR;
 80083be:	e73b      	b.n	8008238 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80083c0:	2202      	movs	r2, #2
 80083c2:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80083c6:	2200      	movs	r2, #0
 80083c8:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80083cc:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80083ce:	4925      	ldr	r1, [pc, #148]	@ (8008464 <HAL_DMA_Init+0x388>)
 80083d0:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80083d2:	68a2      	ldr	r2, [r4, #8]
 80083d4:	2a40      	cmp	r2, #64	@ 0x40
 80083d6:	d02c      	beq.n	8008432 <HAL_DMA_Init+0x356>
 80083d8:	2a80      	cmp	r2, #128	@ 0x80
 80083da:	d027      	beq.n	800842c <HAL_DMA_Init+0x350>
 80083dc:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80083de:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80083e0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80083e4:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80083e6:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80083ea:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80083ec:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80083f0:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80083f2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80083f6:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80083f8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80083fc:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80083fe:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008402:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008404:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	4b17      	ldr	r3, [pc, #92]	@ (8008468 <HAL_DMA_Init+0x38c>)
 800840a:	4413      	add	r3, r2
 800840c:	4a17      	ldr	r2, [pc, #92]	@ (800846c <HAL_DMA_Init+0x390>)
 800840e:	fba2 2303 	umull	r2, r3, r2, r3
 8008412:	091b      	lsrs	r3, r3, #4
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	65e3      	str	r3, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008418:	4620      	mov	r0, r4
 800841a:	f7ff fd27 	bl	8007e6c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800841e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008420:	f002 011f 	and.w	r1, r2, #31
 8008424:	2201      	movs	r2, #1
 8008426:	408a      	lsls	r2, r1
 8008428:	6042      	str	r2, [r0, #4]
 800842a:	e75a      	b.n	80082e2 <HAL_DMA_Init+0x206>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800842c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008430:	e7d5      	b.n	80083de <HAL_DMA_Init+0x302>
 8008432:	2210      	movs	r2, #16
 8008434:	e7d3      	b.n	80083de <HAL_DMA_Init+0x302>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008436:	2300      	movs	r3, #0
 8008438:	6063      	str	r3, [r4, #4]
 800843a:	e7a2      	b.n	8008382 <HAL_DMA_Init+0x2a6>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800843c:	4620      	mov	r0, r4
 800843e:	f7ff fe0f 	bl	8008060 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008442:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008448:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800844a:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800844c:	605a      	str	r2, [r3, #4]
 800844e:	e7a6      	b.n	800839e <HAL_DMA_Init+0x2c2>
    return HAL_ERROR;
 8008450:	2001      	movs	r0, #1
 8008452:	e6f1      	b.n	8008238 <HAL_DMA_Init+0x15c>
 8008454:	fe10803f 	.word	0xfe10803f
 8008458:	40020010 	.word	0x40020010
 800845c:	40020028 	.word	0x40020028
 8008460:	58025408 	.word	0x58025408
 8008464:	fffe000f 	.word	0xfffe000f
 8008468:	a7fdabf8 	.word	0xa7fdabf8
 800846c:	cccccccd 	.word	0xcccccccd

08008470 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8008470:	2800      	cmp	r0, #0
 8008472:	f000 80db 	beq.w	800862c <HAL_DMA_DeInit+0x1bc>
{
 8008476:	b510      	push	{r4, lr}
 8008478:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800847a:	6803      	ldr	r3, [r0, #0]
 800847c:	496c      	ldr	r1, [pc, #432]	@ (8008630 <HAL_DMA_DeInit+0x1c0>)
 800847e:	4a6d      	ldr	r2, [pc, #436]	@ (8008634 <HAL_DMA_DeInit+0x1c4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	bf18      	it	ne
 8008484:	428b      	cmpne	r3, r1
 8008486:	d02f      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 8008488:	3218      	adds	r2, #24
 800848a:	4293      	cmp	r3, r2
 800848c:	d02c      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 800848e:	3218      	adds	r2, #24
 8008490:	4293      	cmp	r3, r2
 8008492:	d029      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 8008494:	3218      	adds	r2, #24
 8008496:	4293      	cmp	r3, r2
 8008498:	d026      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 800849a:	3218      	adds	r2, #24
 800849c:	4293      	cmp	r3, r2
 800849e:	d023      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084a0:	3218      	adds	r2, #24
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d020      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084a6:	3218      	adds	r2, #24
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d01d      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084ac:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d019      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084b4:	3218      	adds	r2, #24
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d016      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084ba:	3218      	adds	r2, #24
 80084bc:	4293      	cmp	r3, r2
 80084be:	d013      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084c0:	3218      	adds	r2, #24
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d010      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084c6:	3218      	adds	r2, #24
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00d      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084cc:	3218      	adds	r2, #24
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00a      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084d2:	3218      	adds	r2, #24
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d007      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084d8:	3218      	adds	r2, #24
 80084da:	4293      	cmp	r3, r2
 80084dc:	d004      	beq.n	80084e8 <HAL_DMA_DeInit+0x78>
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	f022 0201 	bic.w	r2, r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	e003      	b.n	80084f0 <HAL_DMA_DeInit+0x80>
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	494f      	ldr	r1, [pc, #316]	@ (8008630 <HAL_DMA_DeInit+0x1c0>)
 80084f4:	4a4f      	ldr	r2, [pc, #316]	@ (8008634 <HAL_DMA_DeInit+0x1c4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	bf18      	it	ne
 80084fa:	428b      	cmpne	r3, r1
 80084fc:	d044      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 80084fe:	3218      	adds	r2, #24
 8008500:	4293      	cmp	r3, r2
 8008502:	d041      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 8008504:	3218      	adds	r2, #24
 8008506:	4293      	cmp	r3, r2
 8008508:	d03e      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 800850a:	3218      	adds	r2, #24
 800850c:	4293      	cmp	r3, r2
 800850e:	d03b      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 8008510:	3218      	adds	r2, #24
 8008512:	4293      	cmp	r3, r2
 8008514:	d038      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 8008516:	3218      	adds	r2, #24
 8008518:	4293      	cmp	r3, r2
 800851a:	d035      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 800851c:	3218      	adds	r2, #24
 800851e:	4293      	cmp	r3, r2
 8008520:	d032      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 8008522:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008526:	4293      	cmp	r3, r2
 8008528:	d02e      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 800852a:	3218      	adds	r2, #24
 800852c:	4293      	cmp	r3, r2
 800852e:	d02b      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 8008530:	3218      	adds	r2, #24
 8008532:	4293      	cmp	r3, r2
 8008534:	d028      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 8008536:	3218      	adds	r2, #24
 8008538:	4293      	cmp	r3, r2
 800853a:	d025      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 800853c:	3218      	adds	r2, #24
 800853e:	4293      	cmp	r3, r2
 8008540:	d022      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 8008542:	3218      	adds	r2, #24
 8008544:	4293      	cmp	r3, r2
 8008546:	d01f      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 8008548:	3218      	adds	r2, #24
 800854a:	4293      	cmp	r3, r2
 800854c:	d01c      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
 800854e:	3218      	adds	r2, #24
 8008550:	4293      	cmp	r3, r2
 8008552:	d019      	beq.n	8008588 <HAL_DMA_DeInit+0x118>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008554:	4938      	ldr	r1, [pc, #224]	@ (8008638 <HAL_DMA_DeInit+0x1c8>)
 8008556:	4a39      	ldr	r2, [pc, #228]	@ (800863c <HAL_DMA_DeInit+0x1cc>)
 8008558:	4293      	cmp	r3, r2
 800855a:	bf18      	it	ne
 800855c:	428b      	cmpne	r3, r1
 800855e:	d047      	beq.n	80085f0 <HAL_DMA_DeInit+0x180>
 8008560:	4a37      	ldr	r2, [pc, #220]	@ (8008640 <HAL_DMA_DeInit+0x1d0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d044      	beq.n	80085f0 <HAL_DMA_DeInit+0x180>
 8008566:	3214      	adds	r2, #20
 8008568:	4293      	cmp	r3, r2
 800856a:	d041      	beq.n	80085f0 <HAL_DMA_DeInit+0x180>
 800856c:	3214      	adds	r2, #20
 800856e:	4293      	cmp	r3, r2
 8008570:	d03e      	beq.n	80085f0 <HAL_DMA_DeInit+0x180>
 8008572:	3214      	adds	r2, #20
 8008574:	4293      	cmp	r3, r2
 8008576:	d03b      	beq.n	80085f0 <HAL_DMA_DeInit+0x180>
 8008578:	3214      	adds	r2, #20
 800857a:	4293      	cmp	r3, r2
 800857c:	d038      	beq.n	80085f0 <HAL_DMA_DeInit+0x180>
 800857e:	3214      	adds	r2, #20
 8008580:	4293      	cmp	r3, r2
 8008582:	d035      	beq.n	80085f0 <HAL_DMA_DeInit+0x180>
    return HAL_ERROR;
 8008584:	2001      	movs	r0, #1
 8008586:	e032      	b.n	80085ee <HAL_DMA_DeInit+0x17e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	605a      	str	r2, [r3, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	609a      	str	r2, [r3, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	60da      	str	r2, [r3, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	611a      	str	r2, [r3, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	2221      	movs	r2, #33	@ 0x21
 80085a0:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085a2:	4620      	mov	r0, r4
 80085a4:	f7ff fc62 	bl	8007e6c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80085a8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80085aa:	f003 021f 	and.w	r2, r3, #31
 80085ae:	233f      	movs	r3, #63	@ 0x3f
 80085b0:	4093      	lsls	r3, r2
 80085b2:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80085b4:	4620      	mov	r0, r4
 80085b6:	f7ff fcfd 	bl	8007fb4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 80085ba:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80085bc:	b123      	cbz	r3, 80085c8 <HAL_DMA_DeInit+0x158>
      hdma->DMAmuxChannel->CCR = 0U;
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085c4:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80085c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80085c8:	6863      	ldr	r3, [r4, #4]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	2b07      	cmp	r3, #7
 80085ce:	d923      	bls.n	8008618 <HAL_DMA_DeInit+0x1a8>
    hdma->DMAmuxRequestGen = 0U;
 80085d0:	2000      	movs	r0, #0
 80085d2:	66e0      	str	r0, [r4, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80085d4:	6720      	str	r0, [r4, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80085d6:	6760      	str	r0, [r4, #116]	@ 0x74
  hdma->XferCpltCallback       = NULL;
 80085d8:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80085da:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80085dc:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80085de:	64a0      	str	r0, [r4, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80085e0:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80085e2:	6520      	str	r0, [r4, #80]	@ 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085e4:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80085e6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80085ea:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
}
 80085ee:	bd10      	pop	{r4, pc}
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	609a      	str	r2, [r3, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	60da      	str	r2, [r3, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	611a      	str	r2, [r3, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008604:	4620      	mov	r0, r4
 8008606:	f7ff fc31 	bl	8007e6c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800860a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800860c:	f003 021f 	and.w	r2, r3, #31
 8008610:	2301      	movs	r3, #1
 8008612:	4093      	lsls	r3, r2
 8008614:	6043      	str	r3, [r0, #4]
 8008616:	e7cd      	b.n	80085b4 <HAL_DMA_DeInit+0x144>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008618:	4620      	mov	r0, r4
 800861a:	f7ff fd21 	bl	8008060 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800861e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008624:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8008626:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8008628:	605a      	str	r2, [r3, #4]
 800862a:	e7d1      	b.n	80085d0 <HAL_DMA_DeInit+0x160>
    return HAL_ERROR;
 800862c:	2001      	movs	r0, #1
}
 800862e:	4770      	bx	lr
 8008630:	40020010 	.word	0x40020010
 8008634:	40020028 	.word	0x40020028
 8008638:	58025408 	.word	0x58025408
 800863c:	5802541c 	.word	0x5802541c
 8008640:	58025430 	.word	0x58025430

08008644 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8008644:	2800      	cmp	r0, #0
 8008646:	f000 813e 	beq.w	80088c6 <HAL_DMA_Start_IT+0x282>
{
 800864a:	b570      	push	{r4, r5, r6, lr}
 800864c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800864e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8008652:	2801      	cmp	r0, #1
 8008654:	f000 8139 	beq.w	80088ca <HAL_DMA_Start_IT+0x286>
 8008658:	2001      	movs	r0, #1
 800865a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800865e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8008662:	b2c0      	uxtb	r0, r0
 8008664:	2801      	cmp	r0, #1
 8008666:	d007      	beq.n	8008678 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008668:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800866c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800866e:	2300      	movs	r3, #0
 8008670:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8008674:	2001      	movs	r0, #1
}
 8008676:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008678:	2002      	movs	r0, #2
 800867a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800867e:	2000      	movs	r0, #0
 8008680:	6560      	str	r0, [r4, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8008682:	6820      	ldr	r0, [r4, #0]
 8008684:	4e92      	ldr	r6, [pc, #584]	@ (80088d0 <HAL_DMA_Start_IT+0x28c>)
 8008686:	4d93      	ldr	r5, [pc, #588]	@ (80088d4 <HAL_DMA_Start_IT+0x290>)
 8008688:	42a8      	cmp	r0, r5
 800868a:	bf18      	it	ne
 800868c:	42b0      	cmpne	r0, r6
 800868e:	d02f      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 8008690:	3518      	adds	r5, #24
 8008692:	42a8      	cmp	r0, r5
 8008694:	d02c      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 8008696:	3518      	adds	r5, #24
 8008698:	42a8      	cmp	r0, r5
 800869a:	d029      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 800869c:	3518      	adds	r5, #24
 800869e:	42a8      	cmp	r0, r5
 80086a0:	d026      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086a2:	3518      	adds	r5, #24
 80086a4:	42a8      	cmp	r0, r5
 80086a6:	d023      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086a8:	3518      	adds	r5, #24
 80086aa:	42a8      	cmp	r0, r5
 80086ac:	d020      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086ae:	3518      	adds	r5, #24
 80086b0:	42a8      	cmp	r0, r5
 80086b2:	d01d      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086b4:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 80086b8:	42a8      	cmp	r0, r5
 80086ba:	d019      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086bc:	3518      	adds	r5, #24
 80086be:	42a8      	cmp	r0, r5
 80086c0:	d016      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086c2:	3518      	adds	r5, #24
 80086c4:	42a8      	cmp	r0, r5
 80086c6:	d013      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086c8:	3518      	adds	r5, #24
 80086ca:	42a8      	cmp	r0, r5
 80086cc:	d010      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086ce:	3518      	adds	r5, #24
 80086d0:	42a8      	cmp	r0, r5
 80086d2:	d00d      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086d4:	3518      	adds	r5, #24
 80086d6:	42a8      	cmp	r0, r5
 80086d8:	d00a      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086da:	3518      	adds	r5, #24
 80086dc:	42a8      	cmp	r0, r5
 80086de:	d007      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086e0:	3518      	adds	r5, #24
 80086e2:	42a8      	cmp	r0, r5
 80086e4:	d004      	beq.n	80086f0 <HAL_DMA_Start_IT+0xac>
 80086e6:	6805      	ldr	r5, [r0, #0]
 80086e8:	f025 0501 	bic.w	r5, r5, #1
 80086ec:	6005      	str	r5, [r0, #0]
 80086ee:	e003      	b.n	80086f8 <HAL_DMA_Start_IT+0xb4>
 80086f0:	6805      	ldr	r5, [r0, #0]
 80086f2:	f025 0501 	bic.w	r5, r5, #1
 80086f6:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7ff fadd 	bl	8007cb8 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	4973      	ldr	r1, [pc, #460]	@ (80088d0 <HAL_DMA_Start_IT+0x28c>)
 8008702:	4a74      	ldr	r2, [pc, #464]	@ (80088d4 <HAL_DMA_Start_IT+0x290>)
 8008704:	4293      	cmp	r3, r2
 8008706:	bf18      	it	ne
 8008708:	428b      	cmpne	r3, r1
 800870a:	d038      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 800870c:	3218      	adds	r2, #24
 800870e:	4293      	cmp	r3, r2
 8008710:	d035      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 8008712:	3218      	adds	r2, #24
 8008714:	4293      	cmp	r3, r2
 8008716:	d032      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 8008718:	3218      	adds	r2, #24
 800871a:	4293      	cmp	r3, r2
 800871c:	d02f      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 800871e:	3218      	adds	r2, #24
 8008720:	4293      	cmp	r3, r2
 8008722:	d02c      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 8008724:	3218      	adds	r2, #24
 8008726:	4293      	cmp	r3, r2
 8008728:	d029      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 800872a:	3218      	adds	r2, #24
 800872c:	4293      	cmp	r3, r2
 800872e:	d026      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 8008730:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008734:	4293      	cmp	r3, r2
 8008736:	d022      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 8008738:	3218      	adds	r2, #24
 800873a:	4293      	cmp	r3, r2
 800873c:	d01f      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 800873e:	3218      	adds	r2, #24
 8008740:	4293      	cmp	r3, r2
 8008742:	d01c      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 8008744:	3218      	adds	r2, #24
 8008746:	4293      	cmp	r3, r2
 8008748:	d019      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 800874a:	3218      	adds	r2, #24
 800874c:	4293      	cmp	r3, r2
 800874e:	d016      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 8008750:	3218      	adds	r2, #24
 8008752:	4293      	cmp	r3, r2
 8008754:	d013      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 8008756:	3218      	adds	r2, #24
 8008758:	4293      	cmp	r3, r2
 800875a:	d010      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
 800875c:	3218      	adds	r2, #24
 800875e:	4293      	cmp	r3, r2
 8008760:	d00d      	beq.n	800877e <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	f022 020e 	bic.w	r2, r2, #14
 8008768:	f042 020a 	orr.w	r2, r2, #10
 800876c:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800876e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008770:	b193      	cbz	r3, 8008798 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	6813      	ldr	r3, [r2, #0]
 8008776:	f043 0304 	orr.w	r3, r3, #4
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	e00c      	b.n	8008798 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	f022 021e 	bic.w	r2, r2, #30
 8008784:	f042 0216 	orr.w	r2, r2, #22
 8008788:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800878a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800878c:	b123      	cbz	r3, 8008798 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	6813      	ldr	r3, [r2, #0]
 8008792:	f043 0308 	orr.w	r3, r3, #8
 8008796:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	494d      	ldr	r1, [pc, #308]	@ (80088d0 <HAL_DMA_Start_IT+0x28c>)
 800879c:	4a4d      	ldr	r2, [pc, #308]	@ (80088d4 <HAL_DMA_Start_IT+0x290>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	bf18      	it	ne
 80087a2:	428b      	cmpne	r3, r1
 80087a4:	d042      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087a6:	3218      	adds	r2, #24
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d03f      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087ac:	3218      	adds	r2, #24
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d03c      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087b2:	3218      	adds	r2, #24
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d039      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087b8:	3218      	adds	r2, #24
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d036      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087be:	3218      	adds	r2, #24
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d033      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087c4:	3218      	adds	r2, #24
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d030      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087ca:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d02c      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087d2:	3218      	adds	r2, #24
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d029      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087d8:	3218      	adds	r2, #24
 80087da:	4293      	cmp	r3, r2
 80087dc:	d026      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087de:	3218      	adds	r2, #24
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d023      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087e4:	3218      	adds	r2, #24
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d020      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087ea:	3218      	adds	r2, #24
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d01d      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087f0:	3218      	adds	r2, #24
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01a      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087f6:	3218      	adds	r2, #24
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d017      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 80087fc:	4a36      	ldr	r2, [pc, #216]	@ (80088d8 <HAL_DMA_Start_IT+0x294>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d014      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 8008802:	3214      	adds	r2, #20
 8008804:	4293      	cmp	r3, r2
 8008806:	d011      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 8008808:	3214      	adds	r2, #20
 800880a:	4293      	cmp	r3, r2
 800880c:	d00e      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 800880e:	3214      	adds	r2, #20
 8008810:	4293      	cmp	r3, r2
 8008812:	d00b      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 8008814:	3214      	adds	r2, #20
 8008816:	4293      	cmp	r3, r2
 8008818:	d008      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 800881a:	3214      	adds	r2, #20
 800881c:	4293      	cmp	r3, r2
 800881e:	d005      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 8008820:	3214      	adds	r2, #20
 8008822:	4293      	cmp	r3, r2
 8008824:	d002      	beq.n	800882c <HAL_DMA_Start_IT+0x1e8>
 8008826:	3214      	adds	r2, #20
 8008828:	4293      	cmp	r3, r2
 800882a:	d10e      	bne.n	800884a <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800882c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8008834:	d003      	beq.n	800883e <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800883c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800883e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008840:	b11b      	cbz	r3, 800884a <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008848:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	4920      	ldr	r1, [pc, #128]	@ (80088d0 <HAL_DMA_Start_IT+0x28c>)
 800884e:	4a21      	ldr	r2, [pc, #132]	@ (80088d4 <HAL_DMA_Start_IT+0x290>)
 8008850:	4293      	cmp	r3, r2
 8008852:	bf18      	it	ne
 8008854:	428b      	cmpne	r3, r1
 8008856:	d030      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 8008858:	3218      	adds	r2, #24
 800885a:	4293      	cmp	r3, r2
 800885c:	d02d      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 800885e:	3218      	adds	r2, #24
 8008860:	4293      	cmp	r3, r2
 8008862:	d02a      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 8008864:	3218      	adds	r2, #24
 8008866:	4293      	cmp	r3, r2
 8008868:	d027      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 800886a:	3218      	adds	r2, #24
 800886c:	4293      	cmp	r3, r2
 800886e:	d024      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 8008870:	3218      	adds	r2, #24
 8008872:	4293      	cmp	r3, r2
 8008874:	d021      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 8008876:	3218      	adds	r2, #24
 8008878:	4293      	cmp	r3, r2
 800887a:	d01e      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 800887c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008880:	4293      	cmp	r3, r2
 8008882:	d01a      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 8008884:	3218      	adds	r2, #24
 8008886:	4293      	cmp	r3, r2
 8008888:	d017      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 800888a:	3218      	adds	r2, #24
 800888c:	4293      	cmp	r3, r2
 800888e:	d014      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 8008890:	3218      	adds	r2, #24
 8008892:	4293      	cmp	r3, r2
 8008894:	d011      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 8008896:	3218      	adds	r2, #24
 8008898:	4293      	cmp	r3, r2
 800889a:	d00e      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 800889c:	3218      	adds	r2, #24
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00b      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 80088a2:	3218      	adds	r2, #24
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d008      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 80088a8:	3218      	adds	r2, #24
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d005      	beq.n	80088ba <HAL_DMA_Start_IT+0x276>
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	f042 0201 	orr.w	r2, r2, #1
 80088b4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088b6:	2000      	movs	r0, #0
 80088b8:	e6dd      	b.n	8008676 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	f042 0201 	orr.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088c2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80088c4:	e6d7      	b.n	8008676 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 80088c6:	2001      	movs	r0, #1
}
 80088c8:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80088ca:	2002      	movs	r0, #2
 80088cc:	e6d3      	b.n	8008676 <HAL_DMA_Start_IT+0x32>
 80088ce:	bf00      	nop
 80088d0:	40020010 	.word	0x40020010
 80088d4:	40020028 	.word	0x40020028
 80088d8:	58025408 	.word	0x58025408

080088dc <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80088dc:	2800      	cmp	r0, #0
 80088de:	f000 8128 	beq.w	8008b32 <HAL_DMA_Abort_IT+0x256>
{
 80088e2:	b508      	push	{r3, lr}
 80088e4:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088e6:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d003      	beq.n	80088f8 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088f0:	2380      	movs	r3, #128	@ 0x80
 80088f2:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80088f4:	2001      	movs	r0, #1
}
 80088f6:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088f8:	6803      	ldr	r3, [r0, #0]
 80088fa:	4890      	ldr	r0, [pc, #576]	@ (8008b3c <HAL_DMA_Abort_IT+0x260>)
 80088fc:	4990      	ldr	r1, [pc, #576]	@ (8008b40 <HAL_DMA_Abort_IT+0x264>)
 80088fe:	428b      	cmp	r3, r1
 8008900:	bf18      	it	ne
 8008902:	4283      	cmpne	r3, r0
 8008904:	bf0c      	ite	eq
 8008906:	2001      	moveq	r0, #1
 8008908:	2000      	movne	r0, #0
 800890a:	d065      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 800890c:	3118      	adds	r1, #24
 800890e:	428b      	cmp	r3, r1
 8008910:	d062      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 8008912:	3118      	adds	r1, #24
 8008914:	428b      	cmp	r3, r1
 8008916:	d05f      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 8008918:	3118      	adds	r1, #24
 800891a:	428b      	cmp	r3, r1
 800891c:	d05c      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 800891e:	3118      	adds	r1, #24
 8008920:	428b      	cmp	r3, r1
 8008922:	d059      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 8008924:	3118      	adds	r1, #24
 8008926:	428b      	cmp	r3, r1
 8008928:	d056      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 800892a:	3118      	adds	r1, #24
 800892c:	428b      	cmp	r3, r1
 800892e:	d053      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 8008930:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8008934:	428b      	cmp	r3, r1
 8008936:	d04f      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 8008938:	3118      	adds	r1, #24
 800893a:	428b      	cmp	r3, r1
 800893c:	d04c      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 800893e:	3118      	adds	r1, #24
 8008940:	428b      	cmp	r3, r1
 8008942:	d049      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 8008944:	3118      	adds	r1, #24
 8008946:	428b      	cmp	r3, r1
 8008948:	d046      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 800894a:	3118      	adds	r1, #24
 800894c:	428b      	cmp	r3, r1
 800894e:	d043      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 8008950:	3118      	adds	r1, #24
 8008952:	428b      	cmp	r3, r1
 8008954:	d040      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 8008956:	3118      	adds	r1, #24
 8008958:	428b      	cmp	r3, r1
 800895a:	d03d      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
 800895c:	3118      	adds	r1, #24
 800895e:	428b      	cmp	r3, r1
 8008960:	d03a      	beq.n	80089d8 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008962:	6819      	ldr	r1, [r3, #0]
 8008964:	f021 010e 	bic.w	r1, r1, #14
 8008968:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800896a:	6813      	ldr	r3, [r2, #0]
 800896c:	4873      	ldr	r0, [pc, #460]	@ (8008b3c <HAL_DMA_Abort_IT+0x260>)
 800896e:	4974      	ldr	r1, [pc, #464]	@ (8008b40 <HAL_DMA_Abort_IT+0x264>)
 8008970:	428b      	cmp	r3, r1
 8008972:	bf18      	it	ne
 8008974:	4283      	cmpne	r3, r0
 8008976:	d06a      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 8008978:	4972      	ldr	r1, [pc, #456]	@ (8008b44 <HAL_DMA_Abort_IT+0x268>)
 800897a:	428b      	cmp	r3, r1
 800897c:	d067      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 800897e:	3118      	adds	r1, #24
 8008980:	428b      	cmp	r3, r1
 8008982:	d064      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 8008984:	3118      	adds	r1, #24
 8008986:	428b      	cmp	r3, r1
 8008988:	d061      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 800898a:	3118      	adds	r1, #24
 800898c:	428b      	cmp	r3, r1
 800898e:	d05e      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 8008990:	3118      	adds	r1, #24
 8008992:	428b      	cmp	r3, r1
 8008994:	d05b      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 8008996:	3118      	adds	r1, #24
 8008998:	428b      	cmp	r3, r1
 800899a:	d058      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 800899c:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80089a0:	428b      	cmp	r3, r1
 80089a2:	d054      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 80089a4:	3118      	adds	r1, #24
 80089a6:	428b      	cmp	r3, r1
 80089a8:	d051      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 80089aa:	3118      	adds	r1, #24
 80089ac:	428b      	cmp	r3, r1
 80089ae:	d04e      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 80089b0:	3118      	adds	r1, #24
 80089b2:	428b      	cmp	r3, r1
 80089b4:	d04b      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 80089b6:	3118      	adds	r1, #24
 80089b8:	428b      	cmp	r3, r1
 80089ba:	d048      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 80089bc:	3118      	adds	r1, #24
 80089be:	428b      	cmp	r3, r1
 80089c0:	d045      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 80089c2:	3118      	adds	r1, #24
 80089c4:	428b      	cmp	r3, r1
 80089c6:	d042      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 80089c8:	3118      	adds	r1, #24
 80089ca:	428b      	cmp	r3, r1
 80089cc:	d03f      	beq.n	8008a4e <HAL_DMA_Abort_IT+0x172>
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	f021 0101 	bic.w	r1, r1, #1
 80089d4:	6019      	str	r1, [r3, #0]
 80089d6:	e03e      	b.n	8008a56 <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 80089d8:	2104      	movs	r1, #4
 80089da:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80089de:	bb80      	cbnz	r0, 8008a42 <HAL_DMA_Abort_IT+0x166>
 80089e0:	4a58      	ldr	r2, [pc, #352]	@ (8008b44 <HAL_DMA_Abort_IT+0x268>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d02d      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 80089e6:	3218      	adds	r2, #24
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d02a      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 80089ec:	3218      	adds	r2, #24
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d027      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 80089f2:	3218      	adds	r2, #24
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d024      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 80089f8:	3218      	adds	r2, #24
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d021      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 80089fe:	3218      	adds	r2, #24
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d01e      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a04:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d01a      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a0c:	3218      	adds	r2, #24
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d017      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a12:	3218      	adds	r2, #24
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d014      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a18:	3218      	adds	r2, #24
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d011      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a1e:	3218      	adds	r2, #24
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00e      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a24:	3218      	adds	r2, #24
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00b      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a2a:	3218      	adds	r2, #24
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d008      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a30:	3218      	adds	r2, #24
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d005      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x166>
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	f022 0201 	bic.w	r2, r2, #1
 8008a3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a3e:	2000      	movs	r0, #0
 8008a40:	e759      	b.n	80088f6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	f022 0201 	bic.w	r2, r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a4a:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8008a4c:	e753      	b.n	80088f6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8008a4e:	6819      	ldr	r1, [r3, #0]
 8008a50:	f021 0101 	bic.w	r1, r1, #1
 8008a54:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a56:	6813      	ldr	r3, [r2, #0]
 8008a58:	4838      	ldr	r0, [pc, #224]	@ (8008b3c <HAL_DMA_Abort_IT+0x260>)
 8008a5a:	4939      	ldr	r1, [pc, #228]	@ (8008b40 <HAL_DMA_Abort_IT+0x264>)
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	bf18      	it	ne
 8008a60:	4283      	cmpne	r3, r0
 8008a62:	d042      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a64:	3118      	adds	r1, #24
 8008a66:	428b      	cmp	r3, r1
 8008a68:	d03f      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a6a:	3118      	adds	r1, #24
 8008a6c:	428b      	cmp	r3, r1
 8008a6e:	d03c      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a70:	3118      	adds	r1, #24
 8008a72:	428b      	cmp	r3, r1
 8008a74:	d039      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a76:	3118      	adds	r1, #24
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	d036      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a7c:	3118      	adds	r1, #24
 8008a7e:	428b      	cmp	r3, r1
 8008a80:	d033      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a82:	3118      	adds	r1, #24
 8008a84:	428b      	cmp	r3, r1
 8008a86:	d030      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a88:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8008a8c:	428b      	cmp	r3, r1
 8008a8e:	d02c      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a90:	3118      	adds	r1, #24
 8008a92:	428b      	cmp	r3, r1
 8008a94:	d029      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a96:	3118      	adds	r1, #24
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	d026      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008a9c:	3118      	adds	r1, #24
 8008a9e:	428b      	cmp	r3, r1
 8008aa0:	d023      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008aa2:	3118      	adds	r1, #24
 8008aa4:	428b      	cmp	r3, r1
 8008aa6:	d020      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008aa8:	3118      	adds	r1, #24
 8008aaa:	428b      	cmp	r3, r1
 8008aac:	d01d      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008aae:	3118      	adds	r1, #24
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	d01a      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008ab4:	3118      	adds	r1, #24
 8008ab6:	428b      	cmp	r3, r1
 8008ab8:	d017      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008aba:	4923      	ldr	r1, [pc, #140]	@ (8008b48 <HAL_DMA_Abort_IT+0x26c>)
 8008abc:	428b      	cmp	r3, r1
 8008abe:	d014      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008ac0:	3114      	adds	r1, #20
 8008ac2:	428b      	cmp	r3, r1
 8008ac4:	d011      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008ac6:	3114      	adds	r1, #20
 8008ac8:	428b      	cmp	r3, r1
 8008aca:	d00e      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008acc:	3114      	adds	r1, #20
 8008ace:	428b      	cmp	r3, r1
 8008ad0:	d00b      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008ad2:	3114      	adds	r1, #20
 8008ad4:	428b      	cmp	r3, r1
 8008ad6:	d008      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008ad8:	3114      	adds	r1, #20
 8008ada:	428b      	cmp	r3, r1
 8008adc:	d005      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008ade:	3114      	adds	r1, #20
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	d002      	beq.n	8008aea <HAL_DMA_Abort_IT+0x20e>
 8008ae4:	3114      	adds	r1, #20
 8008ae6:	428b      	cmp	r3, r1
 8008ae8:	d117      	bne.n	8008b1a <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008aea:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8008aec:	680b      	ldr	r3, [r1, #0]
 8008aee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008af2:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008af4:	6d90      	ldr	r0, [r2, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008af6:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8008af8:	f003 011f 	and.w	r1, r3, #31
 8008afc:	2301      	movs	r3, #1
 8008afe:	408b      	lsls	r3, r1
 8008b00:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b02:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8008b04:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8008b06:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8008b08:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 8008b0a:	b133      	cbz	r3, 8008b1a <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b0c:	6819      	ldr	r1, [r3, #0]
 8008b0e:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8008b12:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b14:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8008b16:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 8008b18:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8008b20:	2300      	movs	r3, #0
 8008b22:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8008b26:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008b28:	b12b      	cbz	r3, 8008b36 <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4798      	blx	r3
  return HAL_OK;
 8008b2e:	2000      	movs	r0, #0
 8008b30:	e6e1      	b.n	80088f6 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8008b32:	2001      	movs	r0, #1
}
 8008b34:	4770      	bx	lr
  return HAL_OK;
 8008b36:	2000      	movs	r0, #0
 8008b38:	e6dd      	b.n	80088f6 <HAL_DMA_Abort_IT+0x1a>
 8008b3a:	bf00      	nop
 8008b3c:	40020010 	.word	0x40020010
 8008b40:	40020028 	.word	0x40020028
 8008b44:	40020040 	.word	0x40020040
 8008b48:	58025408 	.word	0x58025408

08008b4c <HAL_DMA_IRQHandler>:
{
 8008b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b56:	4b7d      	ldr	r3, [pc, #500]	@ (8008d4c <HAL_DMA_IRQHandler+0x200>)
 8008b58:	681d      	ldr	r5, [r3, #0]
 8008b5a:	4b7d      	ldr	r3, [pc, #500]	@ (8008d50 <HAL_DMA_IRQHandler+0x204>)
 8008b5c:	fba3 3505 	umull	r3, r5, r3, r5
 8008b60:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b62:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr_dma  = regs_dma->ISR;
 8008b64:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8008b66:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008b6a:	6803      	ldr	r3, [r0, #0]
 8008b6c:	4979      	ldr	r1, [pc, #484]	@ (8008d54 <HAL_DMA_IRQHandler+0x208>)
 8008b6e:	487a      	ldr	r0, [pc, #488]	@ (8008d58 <HAL_DMA_IRQHandler+0x20c>)
 8008b70:	4283      	cmp	r3, r0
 8008b72:	bf18      	it	ne
 8008b74:	428b      	cmpne	r3, r1
 8008b76:	bf0c      	ite	eq
 8008b78:	2001      	moveq	r0, #1
 8008b7a:	2000      	movne	r0, #0
 8008b7c:	d061      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008b7e:	4a77      	ldr	r2, [pc, #476]	@ (8008d5c <HAL_DMA_IRQHandler+0x210>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d05e      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008b84:	3218      	adds	r2, #24
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d05b      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008b8a:	3218      	adds	r2, #24
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d058      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008b90:	3218      	adds	r2, #24
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d055      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008b96:	3218      	adds	r2, #24
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d052      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008b9c:	3218      	adds	r2, #24
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d04f      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008ba2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d04b      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008baa:	3218      	adds	r2, #24
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d048      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008bb0:	3218      	adds	r2, #24
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d045      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008bb6:	3218      	adds	r2, #24
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d042      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008bbc:	3218      	adds	r2, #24
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d03f      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008bc2:	3218      	adds	r2, #24
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d03c      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008bc8:	3218      	adds	r2, #24
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d039      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
 8008bce:	3218      	adds	r2, #24
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d036      	beq.n	8008c42 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008bd4:	4962      	ldr	r1, [pc, #392]	@ (8008d60 <HAL_DMA_IRQHandler+0x214>)
 8008bd6:	4a63      	ldr	r2, [pc, #396]	@ (8008d64 <HAL_DMA_IRQHandler+0x218>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	bf18      	it	ne
 8008bdc:	428b      	cmpne	r3, r1
 8008bde:	d012      	beq.n	8008c06 <HAL_DMA_IRQHandler+0xba>
 8008be0:	4a61      	ldr	r2, [pc, #388]	@ (8008d68 <HAL_DMA_IRQHandler+0x21c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00f      	beq.n	8008c06 <HAL_DMA_IRQHandler+0xba>
 8008be6:	3214      	adds	r2, #20
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d00c      	beq.n	8008c06 <HAL_DMA_IRQHandler+0xba>
 8008bec:	3214      	adds	r2, #20
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d009      	beq.n	8008c06 <HAL_DMA_IRQHandler+0xba>
 8008bf2:	3214      	adds	r2, #20
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d006      	beq.n	8008c06 <HAL_DMA_IRQHandler+0xba>
 8008bf8:	3214      	adds	r2, #20
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d003      	beq.n	8008c06 <HAL_DMA_IRQHandler+0xba>
 8008bfe:	3214      	adds	r2, #20
 8008c00:	4293      	cmp	r3, r2
 8008c02:	f040 8261 	bne.w	80090c8 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008c06:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008c08:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8008c0a:	f001 011f 	and.w	r1, r1, #31
 8008c0e:	2004      	movs	r0, #4
 8008c10:	4088      	lsls	r0, r1
 8008c12:	ea10 0f0c 	tst.w	r0, ip
 8008c16:	f000 82a7 	beq.w	8009168 <HAL_DMA_IRQHandler+0x61c>
 8008c1a:	f012 0f04 	tst.w	r2, #4
 8008c1e:	f000 82a3 	beq.w	8009168 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008c22:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c24:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8008c28:	f000 825a 	beq.w	80090e0 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008c2c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8008c30:	f040 8250 	bne.w	80090d4 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008c34:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 8246 	beq.w	80090c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4798      	blx	r3
 8008c40:	e242      	b.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c42:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008c44:	f002 011f 	and.w	r1, r2, #31
 8008c48:	2208      	movs	r2, #8
 8008c4a:	408a      	lsls	r2, r1
 8008c4c:	4232      	tst	r2, r6
 8008c4e:	d041      	beq.n	8008cd4 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008c50:	bb70      	cbnz	r0, 8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c52:	4a42      	ldr	r2, [pc, #264]	@ (8008d5c <HAL_DMA_IRQHandler+0x210>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d02b      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c58:	3218      	adds	r2, #24
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d028      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c5e:	3218      	adds	r2, #24
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d025      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c64:	3218      	adds	r2, #24
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d022      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c6a:	3218      	adds	r2, #24
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d01f      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c70:	3218      	adds	r2, #24
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d01c      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c76:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d018      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c7e:	3218      	adds	r2, #24
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d015      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c84:	3218      	adds	r2, #24
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d012      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c8a:	3218      	adds	r2, #24
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d00f      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c90:	3218      	adds	r2, #24
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00c      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c96:	3218      	adds	r2, #24
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d009      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008c9c:	3218      	adds	r2, #24
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d006      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008ca2:	3218      	adds	r2, #24
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x164>
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8008cae:	e002      	b.n	8008cb6 <HAL_DMA_IRQHandler+0x16a>
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8008cb6:	b16a      	cbz	r2, 8008cd4 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	f022 0204 	bic.w	r2, r2, #4
 8008cbe:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008cc0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8008cc2:	f003 021f 	and.w	r2, r3, #31
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	4093      	lsls	r3, r2
 8008cca:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ccc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cd4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008cd6:	f002 021f 	and.w	r2, r2, #31
 8008cda:	fa26 f302 	lsr.w	r3, r6, r2
 8008cde:	f013 0f01 	tst.w	r3, #1
 8008ce2:	d047      	beq.n	8008d74 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	481b      	ldr	r0, [pc, #108]	@ (8008d54 <HAL_DMA_IRQHandler+0x208>)
 8008ce8:	491b      	ldr	r1, [pc, #108]	@ (8008d58 <HAL_DMA_IRQHandler+0x20c>)
 8008cea:	428b      	cmp	r3, r1
 8008cec:	bf18      	it	ne
 8008cee:	4283      	cmpne	r3, r0
 8008cf0:	d03c      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008cf2:	3118      	adds	r1, #24
 8008cf4:	428b      	cmp	r3, r1
 8008cf6:	d039      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008cf8:	3118      	adds	r1, #24
 8008cfa:	428b      	cmp	r3, r1
 8008cfc:	d036      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008cfe:	3118      	adds	r1, #24
 8008d00:	428b      	cmp	r3, r1
 8008d02:	d033      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d04:	3118      	adds	r1, #24
 8008d06:	428b      	cmp	r3, r1
 8008d08:	d030      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d0a:	3118      	adds	r1, #24
 8008d0c:	428b      	cmp	r3, r1
 8008d0e:	d02d      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d10:	3118      	adds	r1, #24
 8008d12:	428b      	cmp	r3, r1
 8008d14:	d02a      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d16:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8008d1a:	428b      	cmp	r3, r1
 8008d1c:	d026      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d1e:	3118      	adds	r1, #24
 8008d20:	428b      	cmp	r3, r1
 8008d22:	d023      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d24:	3118      	adds	r1, #24
 8008d26:	428b      	cmp	r3, r1
 8008d28:	d020      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d2a:	3118      	adds	r1, #24
 8008d2c:	428b      	cmp	r3, r1
 8008d2e:	d01d      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d30:	3118      	adds	r1, #24
 8008d32:	428b      	cmp	r3, r1
 8008d34:	d01a      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d36:	3118      	adds	r1, #24
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	d017      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d3c:	3118      	adds	r1, #24
 8008d3e:	428b      	cmp	r3, r1
 8008d40:	d014      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d42:	3118      	adds	r1, #24
 8008d44:	428b      	cmp	r3, r1
 8008d46:	d011      	beq.n	8008d6c <HAL_DMA_IRQHandler+0x220>
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	e013      	b.n	8008d74 <HAL_DMA_IRQHandler+0x228>
 8008d4c:	240000cc 	.word	0x240000cc
 8008d50:	1b4e81b5 	.word	0x1b4e81b5
 8008d54:	40020010 	.word	0x40020010
 8008d58:	40020028 	.word	0x40020028
 8008d5c:	40020040 	.word	0x40020040
 8008d60:	58025408 	.word	0x58025408
 8008d64:	5802541c 	.word	0x5802541c
 8008d68:	58025430 	.word	0x58025430
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d72:	d13b      	bne.n	8008dec <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d74:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8008d76:	f003 031f 	and.w	r3, r3, #31
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	4233      	tst	r3, r6
 8008d82:	d03f      	beq.n	8008e04 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	4896      	ldr	r0, [pc, #600]	@ (8008fe0 <HAL_DMA_IRQHandler+0x494>)
 8008d88:	4996      	ldr	r1, [pc, #600]	@ (8008fe4 <HAL_DMA_IRQHandler+0x498>)
 8008d8a:	428a      	cmp	r2, r1
 8008d8c:	bf18      	it	ne
 8008d8e:	4282      	cmpne	r2, r0
 8008d90:	d034      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008d92:	3118      	adds	r1, #24
 8008d94:	428a      	cmp	r2, r1
 8008d96:	d031      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008d98:	3118      	adds	r1, #24
 8008d9a:	428a      	cmp	r2, r1
 8008d9c:	d02e      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008d9e:	3118      	adds	r1, #24
 8008da0:	428a      	cmp	r2, r1
 8008da2:	d02b      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008da4:	3118      	adds	r1, #24
 8008da6:	428a      	cmp	r2, r1
 8008da8:	d028      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008daa:	3118      	adds	r1, #24
 8008dac:	428a      	cmp	r2, r1
 8008dae:	d025      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008db0:	3118      	adds	r1, #24
 8008db2:	428a      	cmp	r2, r1
 8008db4:	d022      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008db6:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8008dba:	428a      	cmp	r2, r1
 8008dbc:	d01e      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008dbe:	3118      	adds	r1, #24
 8008dc0:	428a      	cmp	r2, r1
 8008dc2:	d01b      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008dc4:	3118      	adds	r1, #24
 8008dc6:	428a      	cmp	r2, r1
 8008dc8:	d018      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008dca:	3118      	adds	r1, #24
 8008dcc:	428a      	cmp	r2, r1
 8008dce:	d015      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008dd0:	3118      	adds	r1, #24
 8008dd2:	428a      	cmp	r2, r1
 8008dd4:	d012      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008dd6:	3118      	adds	r1, #24
 8008dd8:	428a      	cmp	r2, r1
 8008dda:	d00f      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008ddc:	3118      	adds	r1, #24
 8008dde:	428a      	cmp	r2, r1
 8008de0:	d00c      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008de2:	3118      	adds	r1, #24
 8008de4:	428a      	cmp	r2, r1
 8008de6:	d009      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x2b0>
 8008de8:	6813      	ldr	r3, [r2, #0]
 8008dea:	e00b      	b.n	8008e04 <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008dec:	2301      	movs	r3, #1
 8008dee:	4093      	lsls	r3, r2
 8008df0:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008df2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008df4:	f043 0302 	orr.w	r3, r3, #2
 8008df8:	6563      	str	r3, [r4, #84]	@ 0x54
 8008dfa:	e7bb      	b.n	8008d74 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008dfc:	6812      	ldr	r2, [r2, #0]
 8008dfe:	f012 0f02 	tst.w	r2, #2
 8008e02:	d13d      	bne.n	8008e80 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e04:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8008e06:	f003 031f 	and.w	r3, r3, #31
 8008e0a:	2210      	movs	r2, #16
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	4233      	tst	r3, r6
 8008e12:	d05f      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008e14:	6822      	ldr	r2, [r4, #0]
 8008e16:	4872      	ldr	r0, [pc, #456]	@ (8008fe0 <HAL_DMA_IRQHandler+0x494>)
 8008e18:	4972      	ldr	r1, [pc, #456]	@ (8008fe4 <HAL_DMA_IRQHandler+0x498>)
 8008e1a:	428a      	cmp	r2, r1
 8008e1c:	bf18      	it	ne
 8008e1e:	4282      	cmpne	r2, r0
 8008e20:	d034      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e22:	3118      	adds	r1, #24
 8008e24:	428a      	cmp	r2, r1
 8008e26:	d031      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e28:	3118      	adds	r1, #24
 8008e2a:	428a      	cmp	r2, r1
 8008e2c:	d02e      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e2e:	3118      	adds	r1, #24
 8008e30:	428a      	cmp	r2, r1
 8008e32:	d02b      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e34:	3118      	adds	r1, #24
 8008e36:	428a      	cmp	r2, r1
 8008e38:	d028      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e3a:	3118      	adds	r1, #24
 8008e3c:	428a      	cmp	r2, r1
 8008e3e:	d025      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e40:	3118      	adds	r1, #24
 8008e42:	428a      	cmp	r2, r1
 8008e44:	d022      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e46:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8008e4a:	428a      	cmp	r2, r1
 8008e4c:	d01e      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e4e:	3118      	adds	r1, #24
 8008e50:	428a      	cmp	r2, r1
 8008e52:	d01b      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e54:	3118      	adds	r1, #24
 8008e56:	428a      	cmp	r2, r1
 8008e58:	d018      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e5a:	3118      	adds	r1, #24
 8008e5c:	428a      	cmp	r2, r1
 8008e5e:	d015      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e60:	3118      	adds	r1, #24
 8008e62:	428a      	cmp	r2, r1
 8008e64:	d012      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e66:	3118      	adds	r1, #24
 8008e68:	428a      	cmp	r2, r1
 8008e6a:	d00f      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e6c:	3118      	adds	r1, #24
 8008e6e:	428a      	cmp	r2, r1
 8008e70:	d00c      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e72:	3118      	adds	r1, #24
 8008e74:	428a      	cmp	r2, r1
 8008e76:	d009      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x340>
 8008e78:	6812      	ldr	r2, [r2, #0]
 8008e7a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8008e7e:	e008      	b.n	8008e92 <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e80:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e82:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008e84:	f043 0304 	orr.w	r3, r3, #4
 8008e88:	6563      	str	r3, [r4, #84]	@ 0x54
 8008e8a:	e7bb      	b.n	8008e04 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8008e92:	b1fa      	cbz	r2, 8008ed4 <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e94:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8008e9e:	d00d      	beq.n	8008ebc <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8008ea6:	d104      	bne.n	8008eb2 <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 8008ea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008eaa:	b19b      	cbz	r3, 8008ed4 <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 8008eac:	4620      	mov	r0, r4
 8008eae:	4798      	blx	r3
 8008eb0:	e010      	b.n	8008ed4 <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008eb2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008eb4:	b173      	cbz	r3, 8008ed4 <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4798      	blx	r3
 8008eba:	e00b      	b.n	8008ed4 <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008ec2:	d103      	bne.n	8008ecc <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	f022 0208 	bic.w	r2, r2, #8
 8008eca:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8008ecc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ece:	b10b      	cbz	r3, 8008ed4 <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ed4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	2220      	movs	r2, #32
 8008edc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee0:	4233      	tst	r3, r6
 8008ee2:	f000 8093 	beq.w	800900c <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	483d      	ldr	r0, [pc, #244]	@ (8008fe0 <HAL_DMA_IRQHandler+0x494>)
 8008eea:	493e      	ldr	r1, [pc, #248]	@ (8008fe4 <HAL_DMA_IRQHandler+0x498>)
 8008eec:	428a      	cmp	r2, r1
 8008eee:	bf18      	it	ne
 8008ef0:	4282      	cmpne	r2, r0
 8008ef2:	d02e      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008ef4:	3118      	adds	r1, #24
 8008ef6:	428a      	cmp	r2, r1
 8008ef8:	d02b      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008efa:	3118      	adds	r1, #24
 8008efc:	428a      	cmp	r2, r1
 8008efe:	d028      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f00:	3118      	adds	r1, #24
 8008f02:	428a      	cmp	r2, r1
 8008f04:	d025      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f06:	3118      	adds	r1, #24
 8008f08:	428a      	cmp	r2, r1
 8008f0a:	d022      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f0c:	3118      	adds	r1, #24
 8008f0e:	428a      	cmp	r2, r1
 8008f10:	d01f      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f12:	3118      	adds	r1, #24
 8008f14:	428a      	cmp	r2, r1
 8008f16:	d01c      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f18:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8008f1c:	428a      	cmp	r2, r1
 8008f1e:	d018      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f20:	3118      	adds	r1, #24
 8008f22:	428a      	cmp	r2, r1
 8008f24:	d015      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f26:	3118      	adds	r1, #24
 8008f28:	428a      	cmp	r2, r1
 8008f2a:	d012      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f2c:	3118      	adds	r1, #24
 8008f2e:	428a      	cmp	r2, r1
 8008f30:	d00f      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f32:	3118      	adds	r1, #24
 8008f34:	428a      	cmp	r2, r1
 8008f36:	d00c      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f38:	3118      	adds	r1, #24
 8008f3a:	428a      	cmp	r2, r1
 8008f3c:	d009      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f3e:	3118      	adds	r1, #24
 8008f40:	428a      	cmp	r2, r1
 8008f42:	d006      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f44:	3118      	adds	r1, #24
 8008f46:	428a      	cmp	r2, r1
 8008f48:	d003      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x406>
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8008f50:	e002      	b.n	8008f58 <HAL_DMA_IRQHandler+0x40c>
 8008f52:	6812      	ldr	r2, [r2, #0]
 8008f54:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	d057      	beq.n	800900c <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f5c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f5e:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d00e      	beq.n	8008f86 <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8008f70:	d03a      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8008f78:	d12d      	bne.n	8008fd6 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 8008f7a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d045      	beq.n	800900c <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 8008f80:	4620      	mov	r0, r4
 8008f82:	4798      	blx	r3
 8008f84:	e042      	b.n	800900c <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	6813      	ldr	r3, [r2, #0]
 8008f8a:	f023 0316 	bic.w	r3, r3, #22
 8008f8e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008f90:	6822      	ldr	r2, [r4, #0]
 8008f92:	6953      	ldr	r3, [r2, #20]
 8008f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f98:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f9c:	b1bb      	cbz	r3, 8008fce <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f9e:	6822      	ldr	r2, [r4, #0]
 8008fa0:	6813      	ldr	r3, [r2, #0]
 8008fa2:	f023 0308 	bic.w	r3, r3, #8
 8008fa6:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008fa8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8008faa:	f003 021f 	and.w	r2, r3, #31
 8008fae:	233f      	movs	r3, #63	@ 0x3f
 8008fb0:	4093      	lsls	r3, r2
 8008fb2:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8008fc0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 8080 	beq.w	80090c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8008fc8:	4620      	mov	r0, r4
 8008fca:	4798      	blx	r3
          return;
 8008fcc:	e07c      	b.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008fce:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e4      	bne.n	8008f9e <HAL_DMA_IRQHandler+0x452>
 8008fd4:	e7e8      	b.n	8008fa8 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 8008fd6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008fd8:	b1c3      	cbz	r3, 800900c <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8008fda:	4620      	mov	r0, r4
 8008fdc:	4798      	blx	r3
 8008fde:	e015      	b.n	800900c <HAL_DMA_IRQHandler+0x4c0>
 8008fe0:	40020010 	.word	0x40020010
 8008fe4:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008fee:	d109      	bne.n	8009004 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	f022 0210 	bic.w	r2, r2, #16
 8008ff6:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8008ffe:	2300      	movs	r3, #0
 8009000:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 8009004:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009006:	b10b      	cbz	r3, 800900c <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8009008:	4620      	mov	r0, r4
 800900a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800900c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800900e:	2b00      	cmp	r3, #0
 8009010:	d05a      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009012:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009014:	f013 0f01 	tst.w	r3, #1
 8009018:	d052      	beq.n	80090c0 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 800901a:	2304      	movs	r3, #4
 800901c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	4996      	ldr	r1, [pc, #600]	@ (800927c <HAL_DMA_IRQHandler+0x730>)
 8009024:	4a96      	ldr	r2, [pc, #600]	@ (8009280 <HAL_DMA_IRQHandler+0x734>)
 8009026:	4293      	cmp	r3, r2
 8009028:	bf18      	it	ne
 800902a:	428b      	cmpne	r3, r1
 800902c:	d02f      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 800902e:	3218      	adds	r2, #24
 8009030:	4293      	cmp	r3, r2
 8009032:	d02c      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009034:	3218      	adds	r2, #24
 8009036:	4293      	cmp	r3, r2
 8009038:	d029      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 800903a:	3218      	adds	r2, #24
 800903c:	4293      	cmp	r3, r2
 800903e:	d026      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009040:	3218      	adds	r2, #24
 8009042:	4293      	cmp	r3, r2
 8009044:	d023      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009046:	3218      	adds	r2, #24
 8009048:	4293      	cmp	r3, r2
 800904a:	d020      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 800904c:	3218      	adds	r2, #24
 800904e:	4293      	cmp	r3, r2
 8009050:	d01d      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009052:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8009056:	4293      	cmp	r3, r2
 8009058:	d019      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 800905a:	3218      	adds	r2, #24
 800905c:	4293      	cmp	r3, r2
 800905e:	d016      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009060:	3218      	adds	r2, #24
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009066:	3218      	adds	r2, #24
 8009068:	4293      	cmp	r3, r2
 800906a:	d010      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 800906c:	3218      	adds	r2, #24
 800906e:	4293      	cmp	r3, r2
 8009070:	d00d      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009072:	3218      	adds	r2, #24
 8009074:	4293      	cmp	r3, r2
 8009076:	d00a      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009078:	3218      	adds	r2, #24
 800907a:	4293      	cmp	r3, r2
 800907c:	d007      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 800907e:	3218      	adds	r2, #24
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_DMA_IRQHandler+0x542>
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e003      	b.n	8009096 <HAL_DMA_IRQHandler+0x54a>
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	f022 0201 	bic.w	r2, r2, #1
 8009094:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8009096:	9b01      	ldr	r3, [sp, #4]
 8009098:	3301      	adds	r3, #1
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	42ab      	cmp	r3, r5
 800909e:	d804      	bhi.n	80090aa <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f013 0f01 	tst.w	r3, #1
 80090a8:	d1f5      	bne.n	8009096 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f013 0f01 	tst.w	r3, #1
 80090b2:	d00b      	beq.n	80090cc <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 80090b4:	2303      	movs	r3, #3
 80090b6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80090ba:	2300      	movs	r3, #0
 80090bc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 80090c0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80090c2:	b10b      	cbz	r3, 80090c8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80090c4:	4620      	mov	r0, r4
 80090c6:	4798      	blx	r3
}
 80090c8:	b003      	add	sp, #12
 80090ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80090cc:	2301      	movs	r3, #1
 80090ce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 80090d2:	e7f2      	b.n	80090ba <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 80090d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0f6      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 80090da:	4620      	mov	r0, r4
 80090dc:	4798      	blx	r3
 80090de:	e7f3      	b.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80090e0:	f012 0f20 	tst.w	r2, #32
 80090e4:	d13a      	bne.n	800915c <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	4964      	ldr	r1, [pc, #400]	@ (800927c <HAL_DMA_IRQHandler+0x730>)
 80090ea:	4a65      	ldr	r2, [pc, #404]	@ (8009280 <HAL_DMA_IRQHandler+0x734>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	bf18      	it	ne
 80090f0:	428b      	cmpne	r3, r1
 80090f2:	d02f      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 80090f4:	3218      	adds	r2, #24
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d02c      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 80090fa:	3218      	adds	r2, #24
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d029      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009100:	3218      	adds	r2, #24
 8009102:	4293      	cmp	r3, r2
 8009104:	d026      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009106:	3218      	adds	r2, #24
 8009108:	4293      	cmp	r3, r2
 800910a:	d023      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 800910c:	3218      	adds	r2, #24
 800910e:	4293      	cmp	r3, r2
 8009110:	d020      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009112:	3218      	adds	r2, #24
 8009114:	4293      	cmp	r3, r2
 8009116:	d01d      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009118:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800911c:	4293      	cmp	r3, r2
 800911e:	d019      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009120:	3218      	adds	r2, #24
 8009122:	4293      	cmp	r3, r2
 8009124:	d016      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009126:	3218      	adds	r2, #24
 8009128:	4293      	cmp	r3, r2
 800912a:	d013      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 800912c:	3218      	adds	r2, #24
 800912e:	4293      	cmp	r3, r2
 8009130:	d010      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009132:	3218      	adds	r2, #24
 8009134:	4293      	cmp	r3, r2
 8009136:	d00d      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009138:	3218      	adds	r2, #24
 800913a:	4293      	cmp	r3, r2
 800913c:	d00a      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 800913e:	3218      	adds	r2, #24
 8009140:	4293      	cmp	r3, r2
 8009142:	d007      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 8009144:	3218      	adds	r2, #24
 8009146:	4293      	cmp	r3, r2
 8009148:	d004      	beq.n	8009154 <HAL_DMA_IRQHandler+0x608>
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	f022 0204 	bic.w	r2, r2, #4
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	e003      	b.n	800915c <HAL_DMA_IRQHandler+0x610>
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	f022 0208 	bic.w	r2, r2, #8
 800915a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800915c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0b2      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8009162:	4620      	mov	r0, r4
 8009164:	4798      	blx	r3
 8009166:	e7af      	b.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009168:	2002      	movs	r0, #2
 800916a:	4088      	lsls	r0, r1
 800916c:	ea10 0f0c 	tst.w	r0, ip
 8009170:	d060      	beq.n	8009234 <HAL_DMA_IRQHandler+0x6e8>
 8009172:	f012 0f02 	tst.w	r2, #2
 8009176:	d05d      	beq.n	8009234 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009178:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800917a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800917e:	d00e      	beq.n	800919e <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009180:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8009184:	d105      	bne.n	8009192 <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8009186:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009188:	2b00      	cmp	r3, #0
 800918a:	d09d      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 800918c:	4620      	mov	r0, r4
 800918e:	4798      	blx	r3
 8009190:	e79a      	b.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8009192:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009194:	2b00      	cmp	r3, #0
 8009196:	d097      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8009198:	4620      	mov	r0, r4
 800919a:	4798      	blx	r3
 800919c:	e794      	b.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800919e:	f012 0f20 	tst.w	r2, #32
 80091a2:	d140      	bne.n	8009226 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	4935      	ldr	r1, [pc, #212]	@ (800927c <HAL_DMA_IRQHandler+0x730>)
 80091a8:	4a35      	ldr	r2, [pc, #212]	@ (8009280 <HAL_DMA_IRQHandler+0x734>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	bf18      	it	ne
 80091ae:	428b      	cmpne	r3, r1
 80091b0:	d02f      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091b2:	3218      	adds	r2, #24
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d02c      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091b8:	3218      	adds	r2, #24
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d029      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091be:	3218      	adds	r2, #24
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d026      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091c4:	3218      	adds	r2, #24
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d023      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091ca:	3218      	adds	r2, #24
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d020      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091d0:	3218      	adds	r2, #24
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d01d      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091d6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80091da:	4293      	cmp	r3, r2
 80091dc:	d019      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091de:	3218      	adds	r2, #24
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d016      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091e4:	3218      	adds	r2, #24
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d013      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091ea:	3218      	adds	r2, #24
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d010      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091f0:	3218      	adds	r2, #24
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00d      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091f6:	3218      	adds	r2, #24
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d00a      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 80091fc:	3218      	adds	r2, #24
 80091fe:	4293      	cmp	r3, r2
 8009200:	d007      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 8009202:	3218      	adds	r2, #24
 8009204:	4293      	cmp	r3, r2
 8009206:	d004      	beq.n	8009212 <HAL_DMA_IRQHandler+0x6c6>
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	f022 020a 	bic.w	r2, r2, #10
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e003      	b.n	800921a <HAL_DMA_IRQHandler+0x6ce>
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	f022 0214 	bic.w	r2, r2, #20
 8009218:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800921a:	2301      	movs	r3, #1
 800921c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8009220:	2300      	movs	r3, #0
 8009222:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8009226:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009228:	2b00      	cmp	r3, #0
 800922a:	f43f af4d 	beq.w	80090c8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 800922e:	4620      	mov	r0, r4
 8009230:	4798      	blx	r3
 8009232:	e749      	b.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009234:	2008      	movs	r0, #8
 8009236:	fa00 f101 	lsl.w	r1, r0, r1
 800923a:	ea11 0f0c 	tst.w	r1, ip
 800923e:	f43f af43 	beq.w	80090c8 <HAL_DMA_IRQHandler+0x57c>
 8009242:	f012 0f08 	tst.w	r2, #8
 8009246:	f43f af3f 	beq.w	80090c8 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	f022 020e 	bic.w	r2, r2, #14
 8009250:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009252:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	2201      	movs	r2, #1
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009260:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8009262:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8009266:	2300      	movs	r3, #0
 8009268:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 800926c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800926e:	2b00      	cmp	r3, #0
 8009270:	f43f af2a 	beq.w	80090c8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8009274:	4620      	mov	r0, r4
 8009276:	4798      	blx	r3
  }
 8009278:	e726      	b.n	80090c8 <HAL_DMA_IRQHandler+0x57c>
 800927a:	bf00      	nop
 800927c:	40020010 	.word	0x40020010
 8009280:	40020028 	.word	0x40020028

08009284 <HAL_DMA_GetState>:
  return hdma->State;
 8009284:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8009288:	4770      	bx	lr

0800928a <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800928a:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 800928c:	4770      	bx	lr
	...

08009290 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009290:	2800      	cmp	r0, #0
 8009292:	d037      	beq.n	8009304 <HAL_DMA2D_Init+0x74>
{
 8009294:	b510      	push	{r4, lr}
 8009296:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8009298:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800929c:	2b00      	cmp	r3, #0
 800929e:	d02c      	beq.n	80092fa <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80092a0:	2302      	movs	r3, #2
 80092a2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80092a6:	6821      	ldr	r1, [r4, #0]
 80092a8:	680a      	ldr	r2, [r1, #0]
 80092aa:	4b17      	ldr	r3, [pc, #92]	@ (8009308 <HAL_DMA2D_Init+0x78>)
 80092ac:	4013      	ands	r3, r2
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	69e0      	ldr	r0, [r4, #28]
 80092b2:	4302      	orrs	r2, r0
 80092b4:	4313      	orrs	r3, r2
 80092b6:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80092b8:	6821      	ldr	r1, [r4, #0]
 80092ba:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 80092bc:	4b13      	ldr	r3, [pc, #76]	@ (800930c <HAL_DMA2D_Init+0x7c>)
 80092be:	4013      	ands	r3, r2
 80092c0:	68a2      	ldr	r2, [r4, #8]
 80092c2:	69a0      	ldr	r0, [r4, #24]
 80092c4:	4302      	orrs	r2, r0
 80092c6:	4313      	orrs	r3, r2
 80092c8:	634b      	str	r3, [r1, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80092ca:	6822      	ldr	r2, [r4, #0]
 80092cc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80092ce:	4b10      	ldr	r3, [pc, #64]	@ (8009310 <HAL_DMA2D_Init+0x80>)
 80092d0:	400b      	ands	r3, r1
 80092d2:	68e1      	ldr	r1, [r4, #12]
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80092d8:	6821      	ldr	r1, [r4, #0]
 80092da:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80092dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092e0:	6920      	ldr	r0, [r4, #16]
 80092e2:	6962      	ldr	r2, [r4, #20]
 80092e4:	0552      	lsls	r2, r2, #21
 80092e6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 80092ea:	4313      	orrs	r3, r2
 80092ec:	634b      	str	r3, [r1, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80092ee:	2000      	movs	r0, #0
 80092f0:	6660      	str	r0, [r4, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 80092f8:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80092fa:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 80092fe:	f7fd f82b 	bl	8006358 <HAL_DMA2D_MspInit>
 8009302:	e7cd      	b.n	80092a0 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8009304:	2001      	movs	r0, #1
}
 8009306:	4770      	bx	lr
 8009308:	fff8ffbf 	.word	0xfff8ffbf
 800930c:	fffffef8 	.word	0xfffffef8
 8009310:	ffff0000 	.word	0xffff0000

08009314 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8009314:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 8009318:	2a01      	cmp	r2, #1
 800931a:	d074      	beq.n	8009406 <HAL_DMA2D_ConfigLayer+0xf2>
{
 800931c:	b430      	push	{r4, r5}
 800931e:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 8009320:	2201      	movs	r2, #1
 8009322:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009326:	2202      	movs	r2, #2
 8009328:	f880 2061 	strb.w	r2, [r0, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800932c:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 8009330:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009334:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8009336:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8009338:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800933c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800933e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8009342:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8009344:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009348:	f1a4 0009 	sub.w	r0, r4, #9
 800934c:	2801      	cmp	r0, #1
 800934e:	d920      	bls.n	8009392 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009350:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 8009354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009358:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800935a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800935e:	bb59      	cbnz	r1, 80093b8 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009360:	681c      	ldr	r4, [r3, #0]
 8009362:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009364:	4829      	ldr	r0, [pc, #164]	@ (800940c <HAL_DMA2D_ConfigLayer+0xf8>)
 8009366:	4028      	ands	r0, r5
 8009368:	4310      	orrs	r0, r2
 800936a:	6260      	str	r0, [r4, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8009372:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009376:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 8009378:	6184      	str	r4, [r0, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800937a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800937c:	3a09      	subs	r2, #9
 800937e:	2a01      	cmp	r2, #1
 8009380:	d910      	bls.n	80093a4 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009388:	2000      	movs	r0, #0
 800938a:	f883 0060 	strb.w	r0, [r3, #96]	@ 0x60

  return HAL_OK;
}
 800938e:	bc30      	pop	{r4, r5}
 8009390:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009392:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 8009396:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800939a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800939c:	f000 407f 	and.w	r0, r0, #4278190080	@ 0xff000000
 80093a0:	4302      	orrs	r2, r0
 80093a2:	e7dc      	b.n	800935e <HAL_DMA2D_ConfigLayer+0x4a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80093a4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80093a8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80093ac:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 80093ae:	6819      	ldr	r1, [r3, #0]
 80093b0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80093b4:	628a      	str	r2, [r1, #40]	@ 0x28
 80093b6:	e7e4      	b.n	8009382 <HAL_DMA2D_ConfigLayer+0x6e>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80093b8:	2c0b      	cmp	r4, #11
 80093ba:	d01b      	beq.n	80093f4 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80093bc:	4d14      	ldr	r5, [pc, #80]	@ (8009410 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80093be:	681c      	ldr	r4, [r3, #0]
 80093c0:	69e0      	ldr	r0, [r4, #28]
 80093c2:	ea20 0005 	bic.w	r0, r0, r5
 80093c6:	4302      	orrs	r2, r0
 80093c8:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80093d0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80093d4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80093d6:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80093d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80093da:	3a09      	subs	r2, #9
 80093dc:	2a01      	cmp	r2, #1
 80093de:	d8d0      	bhi.n	8009382 <HAL_DMA2D_ConfigLayer+0x6e>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80093e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80093e4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80093e8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 80093ea:	6819      	ldr	r1, [r3, #0]
 80093ec:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80093f0:	620a      	str	r2, [r1, #32]
 80093f2:	e7c6      	b.n	8009382 <HAL_DMA2D_ConfigLayer+0x6e>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80093f4:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 80093f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093fc:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80093fe:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 8009402:	4d04      	ldr	r5, [pc, #16]	@ (8009414 <HAL_DMA2D_ConfigLayer+0x100>)
 8009404:	e7db      	b.n	80093be <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 8009406:	2002      	movs	r0, #2
}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	00ccfff0 	.word	0x00ccfff0
 8009410:	ff33000f 	.word	0xff33000f
 8009414:	ff3f000f 	.word	0xff3f000f

08009418 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009418:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <HAL_FLASH_Unlock+0x2c>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f013 0f01 	tst.w	r3, #1
 8009420:	d00b      	beq.n	800943a <HAL_FLASH_Unlock+0x22>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009422:	4b08      	ldr	r3, [pc, #32]	@ (8009444 <HAL_FLASH_Unlock+0x2c>)
 8009424:	4a08      	ldr	r2, [pc, #32]	@ (8009448 <HAL_FLASH_Unlock+0x30>)
 8009426:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009428:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800942c:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f013 0f01 	tst.w	r3, #1
 8009434:	d103      	bne.n	800943e <HAL_FLASH_Unlock+0x26>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009436:	2000      	movs	r0, #0
 8009438:	4770      	bx	lr
 800943a:	2000      	movs	r0, #0
 800943c:	4770      	bx	lr
      return HAL_ERROR;
 800943e:	2001      	movs	r0, #1
}
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	52002000 	.word	0x52002000
 8009448:	45670123 	.word	0x45670123

0800944c <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800944c:	4b06      	ldr	r3, [pc, #24]	@ (8009468 <HAL_FLASH_Lock+0x1c>)
 800944e:	68da      	ldr	r2, [r3, #12]
 8009450:	f042 0201 	orr.w	r2, r2, #1
 8009454:	60da      	str	r2, [r3, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f013 0f01 	tst.w	r3, #1
 800945c:	d001      	beq.n	8009462 <HAL_FLASH_Lock+0x16>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800945e:	2000      	movs	r0, #0
 8009460:	4770      	bx	lr
    return HAL_ERROR;
 8009462:	2001      	movs	r0, #1
}
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	52002000 	.word	0x52002000

0800946c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	4604      	mov	r4, r0
 8009470:	460d      	mov	r5, r1
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
  uint32_t errorflag = 0;
  uint32_t tickstart = HAL_GetTick();
 8009472:	f7fe fab1 	bl	80079d8 <HAL_GetTick>
 8009476:	4606      	mov	r6, r0
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009478:	4b1b      	ldr	r3, [pc, #108]	@ (80094e8 <FLASH_WaitForLastOperation+0x7c>)
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	f013 0304 	ands.w	r3, r3, #4
 8009480:	d00b      	beq.n	800949a <FLASH_WaitForLastOperation+0x2e>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009482:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009486:	d0f7      	beq.n	8009478 <FLASH_WaitForLastOperation+0xc>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009488:	f7fe faa6 	bl	80079d8 <HAL_GetTick>
 800948c:	1b80      	subs	r0, r0, r6
 800948e:	42a0      	cmp	r0, r4
 8009490:	d826      	bhi.n	80094e0 <FLASH_WaitForLastOperation+0x74>
 8009492:	2c00      	cmp	r4, #0
 8009494:	d1f0      	bne.n	8009478 <FLASH_WaitForLastOperation+0xc>
      {
        return HAL_TIMEOUT;
 8009496:	2003      	movs	r0, #3
 8009498:	e005      	b.n	80094a6 <FLASH_WaitForLastOperation+0x3a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800949a:	2d01      	cmp	r5, #1
 800949c:	d004      	beq.n	80094a8 <FLASH_WaitForLastOperation+0x3c>
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800949e:	b963      	cbnz	r3, 80094ba <FLASH_WaitForLastOperation+0x4e>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80094a0:	2d01      	cmp	r5, #1
 80094a2:	d012      	beq.n	80094ca <FLASH_WaitForLastOperation+0x5e>
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80094a4:	2000      	movs	r0, #0
}
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80094a8:	4b0f      	ldr	r3, [pc, #60]	@ (80094e8 <FLASH_WaitForLastOperation+0x7c>)
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	f023 4368 	bic.w	r3, r3, #3892314112	@ 0xe8000000
 80094b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80094b4:	0c5b      	lsrs	r3, r3, #17
 80094b6:	045b      	lsls	r3, r3, #17
 80094b8:	e7f1      	b.n	800949e <FLASH_WaitForLastOperation+0x32>
    pFlash.ErrorCode |= errorflag;
 80094ba:	490c      	ldr	r1, [pc, #48]	@ (80094ec <FLASH_WaitForLastOperation+0x80>)
 80094bc:	698a      	ldr	r2, [r1, #24]
 80094be:	431a      	orrs	r2, r3
 80094c0:	618a      	str	r2, [r1, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80094c2:	4a09      	ldr	r2, [pc, #36]	@ (80094e8 <FLASH_WaitForLastOperation+0x7c>)
 80094c4:	6153      	str	r3, [r2, #20]
    return HAL_ERROR;
 80094c6:	2001      	movs	r0, #1
 80094c8:	e7ed      	b.n	80094a6 <FLASH_WaitForLastOperation+0x3a>
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80094ca:	4b07      	ldr	r3, [pc, #28]	@ (80094e8 <FLASH_WaitForLastOperation+0x7c>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80094d2:	d007      	beq.n	80094e4 <FLASH_WaitForLastOperation+0x78>
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80094d4:	4b04      	ldr	r3, [pc, #16]	@ (80094e8 <FLASH_WaitForLastOperation+0x7c>)
 80094d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80094da:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 80094dc:	2000      	movs	r0, #0
 80094de:	e7e2      	b.n	80094a6 <FLASH_WaitForLastOperation+0x3a>
        return HAL_TIMEOUT;
 80094e0:	2003      	movs	r0, #3
 80094e2:	e7e0      	b.n	80094a6 <FLASH_WaitForLastOperation+0x3a>
  return HAL_OK;
 80094e4:	2000      	movs	r0, #0
 80094e6:	e7de      	b.n	80094a6 <FLASH_WaitForLastOperation+0x3a>
 80094e8:	52002000 	.word	0x52002000
 80094ec:	24002f34 	.word	0x24002f34

080094f0 <HAL_FLASH_Program>:
{
 80094f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 80094f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009570 <HAL_FLASH_Program+0x80>)
 80094f4:	7d1b      	ldrb	r3, [r3, #20]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d037      	beq.n	800956a <HAL_FLASH_Program+0x7a>
 80094fa:	460d      	mov	r5, r1
 80094fc:	4614      	mov	r4, r2
 80094fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009570 <HAL_FLASH_Program+0x80>)
 8009500:	2201      	movs	r2, #1
 8009502:	751a      	strb	r2, [r3, #20]
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009504:	f101 4178 	add.w	r1, r1, #4160749568	@ 0xf8000000
 8009508:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800950c:	d301      	bcc.n	8009512 <HAL_FLASH_Program+0x22>
    return HAL_ERROR;
 800950e:	2001      	movs	r0, #1
}
 8009510:	bd38      	pop	{r3, r4, r5, pc}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009512:	2200      	movs	r2, #0
 8009514:	619a      	str	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009516:	2101      	movs	r1, #1
 8009518:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800951c:	f7ff ffa6 	bl	800946c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8009520:	b9f8      	cbnz	r0, 8009562 <HAL_FLASH_Program+0x72>
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009522:	4a14      	ldr	r2, [pc, #80]	@ (8009574 <HAL_FLASH_Program+0x84>)
 8009524:	68d3      	ldr	r3, [r2, #12]
 8009526:	f043 0302 	orr.w	r3, r3, #2
 800952a:	60d3      	str	r3, [r2, #12]
 800952c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8009530:	f3bf 8f4f 	dsb	sy
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009534:	2308      	movs	r3, #8
        *dest_addr = *src_addr;
 8009536:	f854 2b04 	ldr.w	r2, [r4], #4
 800953a:	f845 2b04 	str.w	r2, [r5], #4
        row_index--;
 800953e:	3b01      	subs	r3, #1
     } while (row_index != 0U);
 8009540:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8009544:	d1f7      	bne.n	8009536 <HAL_FLASH_Program+0x46>
  __ASM volatile ("isb 0xF":::"memory");
 8009546:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 800954a:	f3bf 8f4f 	dsb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800954e:	2101      	movs	r1, #1
 8009550:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009554:	f7ff ff8a 	bl	800946c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009558:	4a06      	ldr	r2, [pc, #24]	@ (8009574 <HAL_FLASH_Program+0x84>)
 800955a:	68d3      	ldr	r3, [r2, #12]
 800955c:	f023 0302 	bic.w	r3, r3, #2
 8009560:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8009562:	4b03      	ldr	r3, [pc, #12]	@ (8009570 <HAL_FLASH_Program+0x80>)
 8009564:	2200      	movs	r2, #0
 8009566:	751a      	strb	r2, [r3, #20]
  return status;
 8009568:	e7d2      	b.n	8009510 <HAL_FLASH_Program+0x20>
  __HAL_LOCK(&pFlash);
 800956a:	2002      	movs	r0, #2
 800956c:	e7d0      	b.n	8009510 <HAL_FLASH_Program+0x20>
 800956e:	bf00      	nop
 8009570:	24002f34 	.word	0x24002f34
 8009574:	52002000 	.word	0x52002000

08009578 <FLASH_MassErase>:
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8009578:	f011 0f01 	tst.w	r1, #1
 800957c:	d00b      	beq.n	8009596 <FLASH_MassErase+0x1e>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800957e:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <FLASH_MassErase+0x20>)
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8009586:	60da      	str	r2, [r3, #12]
      FLASH->CR1 |=  VoltageRange;
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	4302      	orrs	r2, r0
 800958c:	60da      	str	r2, [r3, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800958e:	68da      	ldr	r2, [r3, #12]
 8009590:	f042 0288 	orr.w	r2, r2, #136	@ 0x88
 8009594:	60da      	str	r2, [r3, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8009596:	4770      	bx	lr
 8009598:	52002000 	.word	0x52002000

0800959c <FLASH_Erase_Sector>:
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800959c:	f011 0f01 	tst.w	r1, #1
 80095a0:	d00b      	beq.n	80095ba <FLASH_Erase_Sector+0x1e>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80095a2:	4906      	ldr	r1, [pc, #24]	@ (80095bc <FLASH_Erase_Sector+0x20>)
 80095a4:	68cb      	ldr	r3, [r1, #12]
 80095a6:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80095aa:	60cb      	str	r3, [r1, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80095ac:	68cb      	ldr	r3, [r1, #12]
 80095ae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80095b8:	60cb      	str	r3, [r1, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80095ba:	4770      	bx	lr
 80095bc:	52002000 	.word	0x52002000

080095c0 <HAL_FLASHEx_Erase>:
{
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80095c2:	4b2e      	ldr	r3, [pc, #184]	@ (800967c <HAL_FLASHEx_Erase+0xbc>)
 80095c4:	7d1b      	ldrb	r3, [r3, #20]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d056      	beq.n	8009678 <HAL_FLASHEx_Erase+0xb8>
 80095ca:	4604      	mov	r4, r0
 80095cc:	460f      	mov	r7, r1
 80095ce:	4b2b      	ldr	r3, [pc, #172]	@ (800967c <HAL_FLASHEx_Erase+0xbc>)
 80095d0:	2201      	movs	r2, #1
 80095d2:	751a      	strb	r2, [r3, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80095d4:	2200      	movs	r2, #0
 80095d6:	619a      	str	r2, [r3, #24]
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80095d8:	6843      	ldr	r3, [r0, #4]
 80095da:	f013 0f01 	tst.w	r3, #1
 80095de:	d108      	bne.n	80095f2 <HAL_FLASHEx_Erase+0x32>
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d00e      	beq.n	8009604 <HAL_FLASHEx_Erase+0x44>
      *SectorError = 0xFFFFFFFFU;
 80095e6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ea:	603b      	str	r3, [r7, #0]
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80095ec:	68a5      	ldr	r5, [r4, #8]
 80095ee:	2600      	movs	r6, #0
 80095f0:	e022      	b.n	8009638 <HAL_FLASHEx_Erase+0x78>
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80095f2:	2101      	movs	r1, #1
 80095f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80095f8:	f7ff ff38 	bl	800946c <FLASH_WaitForLastOperation>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d0ef      	beq.n	80095e0 <HAL_FLASHEx_Erase+0x20>
      status = HAL_ERROR;
 8009600:	2601      	movs	r6, #1
 8009602:	e034      	b.n	800966e <HAL_FLASHEx_Erase+0xae>
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8009604:	6861      	ldr	r1, [r4, #4]
 8009606:	6920      	ldr	r0, [r4, #16]
 8009608:	f7ff ffb6 	bl	8009578 <FLASH_MassErase>
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800960c:	6863      	ldr	r3, [r4, #4]
 800960e:	f013 0f01 	tst.w	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_FLASHEx_Erase+0x58>
 8009614:	2600      	movs	r6, #0
 8009616:	e02a      	b.n	800966e <HAL_FLASHEx_Erase+0xae>
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8009618:	2101      	movs	r1, #1
 800961a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800961e:	f7ff ff25 	bl	800946c <FLASH_WaitForLastOperation>
 8009622:	4606      	mov	r6, r0
 8009624:	b100      	cbz	r0, 8009628 <HAL_FLASHEx_Erase+0x68>
          status = HAL_ERROR;
 8009626:	2601      	movs	r6, #1
        FLASH->CR1 &= (~FLASH_CR_BER);
 8009628:	4a15      	ldr	r2, [pc, #84]	@ (8009680 <HAL_FLASHEx_Erase+0xc0>)
 800962a:	68d3      	ldr	r3, [r2, #12]
 800962c:	f023 0308 	bic.w	r3, r3, #8
 8009630:	60d3      	str	r3, [r2, #12]
 8009632:	e01c      	b.n	800966e <HAL_FLASHEx_Erase+0xae>
        if(status != HAL_OK)
 8009634:	b9d6      	cbnz	r6, 800966c <HAL_FLASHEx_Erase+0xac>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8009636:	3501      	adds	r5, #1
 8009638:	68e3      	ldr	r3, [r4, #12]
 800963a:	68a2      	ldr	r2, [r4, #8]
 800963c:	4413      	add	r3, r2
 800963e:	42ab      	cmp	r3, r5
 8009640:	d915      	bls.n	800966e <HAL_FLASHEx_Erase+0xae>
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8009642:	6922      	ldr	r2, [r4, #16]
 8009644:	6861      	ldr	r1, [r4, #4]
 8009646:	4628      	mov	r0, r5
 8009648:	f7ff ffa8 	bl	800959c <FLASH_Erase_Sector>
        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	f013 0f01 	tst.w	r3, #1
 8009652:	d0ef      	beq.n	8009634 <HAL_FLASHEx_Erase+0x74>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8009654:	2101      	movs	r1, #1
 8009656:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800965a:	f7ff ff07 	bl	800946c <FLASH_WaitForLastOperation>
 800965e:	4606      	mov	r6, r0
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8009660:	4a07      	ldr	r2, [pc, #28]	@ (8009680 <HAL_FLASHEx_Erase+0xc0>)
 8009662:	68d1      	ldr	r1, [r2, #12]
 8009664:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <HAL_FLASHEx_Erase+0xc4>)
 8009666:	400b      	ands	r3, r1
 8009668:	60d3      	str	r3, [r2, #12]
 800966a:	e7e3      	b.n	8009634 <HAL_FLASHEx_Erase+0x74>
          *SectorError = sector_index;
 800966c:	603d      	str	r5, [r7, #0]
  __HAL_UNLOCK(&pFlash);
 800966e:	4b03      	ldr	r3, [pc, #12]	@ (800967c <HAL_FLASHEx_Erase+0xbc>)
 8009670:	2200      	movs	r2, #0
 8009672:	751a      	strb	r2, [r3, #20]
}
 8009674:	4630      	mov	r0, r6
 8009676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8009678:	2602      	movs	r6, #2
 800967a:	e7fb      	b.n	8009674 <HAL_FLASHEx_Erase+0xb4>
 800967c:	24002f34 	.word	0x24002f34
 8009680:	52002000 	.word	0x52002000
 8009684:	fffff8fb 	.word	0xfffff8fb

08009688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800968a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800968c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800968e:	e06b      	b.n	8009768 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009690:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009692:	005e      	lsls	r6, r3, #1
 8009694:	2403      	movs	r4, #3
 8009696:	40b4      	lsls	r4, r6
 8009698:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800969c:	68cc      	ldr	r4, [r1, #12]
 800969e:	40b4      	lsls	r4, r6
 80096a0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80096a2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096a4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096a6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096aa:	684c      	ldr	r4, [r1, #4]
 80096ac:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80096b0:	409c      	lsls	r4, r3
 80096b2:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80096b4:	6044      	str	r4, [r0, #4]
 80096b6:	e069      	b.n	800978c <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80096b8:	08dd      	lsrs	r5, r3, #3
 80096ba:	3508      	adds	r5, #8
 80096bc:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80096c0:	f003 0c07 	and.w	ip, r3, #7
 80096c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80096c8:	f04f 0e0f 	mov.w	lr, #15
 80096cc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80096d0:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80096d4:	690c      	ldr	r4, [r1, #16]
 80096d6:	fa04 f40c 	lsl.w	r4, r4, ip
 80096da:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80096de:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80096e2:	e06b      	b.n	80097bc <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80096e4:	2409      	movs	r4, #9
 80096e6:	e000      	b.n	80096ea <HAL_GPIO_Init+0x62>
 80096e8:	2400      	movs	r4, #0
 80096ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80096ee:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096f0:	f10c 0c02 	add.w	ip, ip, #2
 80096f4:	4d66      	ldr	r5, [pc, #408]	@ (8009890 <HAL_GPIO_Init+0x208>)
 80096f6:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80096fa:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80096fe:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8009700:	43d4      	mvns	r4, r2
 8009702:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009706:	684f      	ldr	r7, [r1, #4]
 8009708:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800970c:	d001      	beq.n	8009712 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800970e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8009712:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8009716:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8009718:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800971a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800971e:	684f      	ldr	r7, [r1, #4]
 8009720:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8009724:	d001      	beq.n	800972a <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8009726:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800972a:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800972e:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009730:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 8009734:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009738:	684f      	ldr	r7, [r1, #4]
 800973a:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800973e:	d001      	beq.n	8009744 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8009740:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009744:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8009748:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800974c:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 8009750:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009752:	684e      	ldr	r6, [r1, #4]
 8009754:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8009758:	d001      	beq.n	800975e <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800975a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800975e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009762:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 8009766:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009768:	680a      	ldr	r2, [r1, #0]
 800976a:	fa32 f403 	lsrs.w	r4, r2, r3
 800976e:	f000 808c 	beq.w	800988a <HAL_GPIO_Init+0x202>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009772:	f04f 0c01 	mov.w	ip, #1
 8009776:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800977a:	ea1c 0202 	ands.w	r2, ip, r2
 800977e:	d0f2      	beq.n	8009766 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009780:	684c      	ldr	r4, [r1, #4]
 8009782:	f004 0403 	and.w	r4, r4, #3
 8009786:	3c01      	subs	r4, #1
 8009788:	2c01      	cmp	r4, #1
 800978a:	d981      	bls.n	8009690 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800978c:	684c      	ldr	r4, [r1, #4]
 800978e:	f004 0403 	and.w	r4, r4, #3
 8009792:	2c03      	cmp	r4, #3
 8009794:	d00c      	beq.n	80097b0 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8009796:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009798:	005d      	lsls	r5, r3, #1
 800979a:	f04f 0c03 	mov.w	ip, #3
 800979e:	fa0c fc05 	lsl.w	ip, ip, r5
 80097a2:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80097a6:	688c      	ldr	r4, [r1, #8]
 80097a8:	40ac      	lsls	r4, r5
 80097aa:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80097ae:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097b0:	684c      	ldr	r4, [r1, #4]
 80097b2:	f004 0403 	and.w	r4, r4, #3
 80097b6:	2c02      	cmp	r4, #2
 80097b8:	f43f af7e 	beq.w	80096b8 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80097bc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80097be:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80097c2:	f04f 0c03 	mov.w	ip, #3
 80097c6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80097ca:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097ce:	684c      	ldr	r4, [r1, #4]
 80097d0:	f004 0403 	and.w	r4, r4, #3
 80097d4:	fa04 f40e 	lsl.w	r4, r4, lr
 80097d8:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80097dc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097de:	684c      	ldr	r4, [r1, #4]
 80097e0:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80097e4:	d0bf      	beq.n	8009766 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097e6:	4c2b      	ldr	r4, [pc, #172]	@ (8009894 <HAL_GPIO_Init+0x20c>)
 80097e8:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 80097ec:	f045 0502 	orr.w	r5, r5, #2
 80097f0:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 80097f4:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 80097f8:	f004 0402 	and.w	r4, r4, #2
 80097fc:	9401      	str	r4, [sp, #4]
 80097fe:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009800:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8009804:	f10c 0502 	add.w	r5, ip, #2
 8009808:	4c21      	ldr	r4, [pc, #132]	@ (8009890 <HAL_GPIO_Init+0x208>)
 800980a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800980e:	f003 0e03 	and.w	lr, r3, #3
 8009812:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009816:	240f      	movs	r4, #15
 8009818:	fa04 f40e 	lsl.w	r4, r4, lr
 800981c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009820:	4c1d      	ldr	r4, [pc, #116]	@ (8009898 <HAL_GPIO_Init+0x210>)
 8009822:	42a0      	cmp	r0, r4
 8009824:	f43f af60 	beq.w	80096e8 <HAL_GPIO_Init+0x60>
 8009828:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800982c:	42a0      	cmp	r0, r4
 800982e:	d01e      	beq.n	800986e <HAL_GPIO_Init+0x1e6>
 8009830:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009834:	42a0      	cmp	r0, r4
 8009836:	d01c      	beq.n	8009872 <HAL_GPIO_Init+0x1ea>
 8009838:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800983c:	42a0      	cmp	r0, r4
 800983e:	d01a      	beq.n	8009876 <HAL_GPIO_Init+0x1ee>
 8009840:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009844:	42a0      	cmp	r0, r4
 8009846:	d018      	beq.n	800987a <HAL_GPIO_Init+0x1f2>
 8009848:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800984c:	42a0      	cmp	r0, r4
 800984e:	d016      	beq.n	800987e <HAL_GPIO_Init+0x1f6>
 8009850:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009854:	42a0      	cmp	r0, r4
 8009856:	d014      	beq.n	8009882 <HAL_GPIO_Init+0x1fa>
 8009858:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800985c:	42a0      	cmp	r0, r4
 800985e:	d012      	beq.n	8009886 <HAL_GPIO_Init+0x1fe>
 8009860:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8009864:	42a0      	cmp	r0, r4
 8009866:	f43f af3d 	beq.w	80096e4 <HAL_GPIO_Init+0x5c>
 800986a:	240a      	movs	r4, #10
 800986c:	e73d      	b.n	80096ea <HAL_GPIO_Init+0x62>
 800986e:	2401      	movs	r4, #1
 8009870:	e73b      	b.n	80096ea <HAL_GPIO_Init+0x62>
 8009872:	2402      	movs	r4, #2
 8009874:	e739      	b.n	80096ea <HAL_GPIO_Init+0x62>
 8009876:	2403      	movs	r4, #3
 8009878:	e737      	b.n	80096ea <HAL_GPIO_Init+0x62>
 800987a:	2404      	movs	r4, #4
 800987c:	e735      	b.n	80096ea <HAL_GPIO_Init+0x62>
 800987e:	2405      	movs	r4, #5
 8009880:	e733      	b.n	80096ea <HAL_GPIO_Init+0x62>
 8009882:	2406      	movs	r4, #6
 8009884:	e731      	b.n	80096ea <HAL_GPIO_Init+0x62>
 8009886:	2407      	movs	r4, #7
 8009888:	e72f      	b.n	80096ea <HAL_GPIO_Init+0x62>
  }
}
 800988a:	b003      	add	sp, #12
 800988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988e:	bf00      	nop
 8009890:	58000400 	.word	0x58000400
 8009894:	58024400 	.word	0x58024400
 8009898:	58020000 	.word	0x58020000

0800989c <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 800989c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800989e:	fa31 f203 	lsrs.w	r2, r1, r3
 80098a2:	f000 8097 	beq.w	80099d4 <HAL_GPIO_DeInit+0x138>
{
 80098a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098a8:	e02e      	b.n	8009908 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80098aa:	2509      	movs	r5, #9
 80098ac:	e000      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
 80098ae:	2500      	movs	r5, #0
 80098b0:	fa05 f50c 	lsl.w	r5, r5, ip
 80098b4:	42a5      	cmp	r5, r4
 80098b6:	d06c      	beq.n	8009992 <HAL_GPIO_DeInit+0xf6>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80098b8:	6804      	ldr	r4, [r0, #0]
 80098ba:	005d      	lsls	r5, r3, #1
 80098bc:	f04f 0c03 	mov.w	ip, #3
 80098c0:	fa0c fc05 	lsl.w	ip, ip, r5
 80098c4:	ea44 040c 	orr.w	r4, r4, ip
 80098c8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80098ca:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80098ce:	f10e 0e08 	add.w	lr, lr, #8
 80098d2:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80098d6:	f003 0607 	and.w	r6, r3, #7
 80098da:	00b6      	lsls	r6, r6, #2
 80098dc:	250f      	movs	r5, #15
 80098de:	40b5      	lsls	r5, r6
 80098e0:	ea24 0405 	bic.w	r4, r4, r5
 80098e4:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80098e8:	68c4      	ldr	r4, [r0, #12]
 80098ea:	ea24 040c 	bic.w	r4, r4, ip
 80098ee:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80098f0:	6844      	ldr	r4, [r0, #4]
 80098f2:	ea24 0202 	bic.w	r2, r4, r2
 80098f6:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80098f8:	6882      	ldr	r2, [r0, #8]
 80098fa:	ea22 020c 	bic.w	r2, r2, ip
 80098fe:	6082      	str	r2, [r0, #8]
    }

    position++;
 8009900:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8009902:	fa31 f203 	lsrs.w	r2, r1, r3
 8009906:	d064      	beq.n	80099d2 <HAL_GPIO_DeInit+0x136>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009908:	2201      	movs	r2, #1
 800990a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800990c:	ea12 0e01 	ands.w	lr, r2, r1
 8009910:	d0f6      	beq.n	8009900 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009912:	089e      	lsrs	r6, r3, #2
 8009914:	1cb5      	adds	r5, r6, #2
 8009916:	4c30      	ldr	r4, [pc, #192]	@ (80099d8 <HAL_GPIO_DeInit+0x13c>)
 8009918:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800991c:	f003 0c03 	and.w	ip, r3, #3
 8009920:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8009924:	250f      	movs	r5, #15
 8009926:	fa05 f70c 	lsl.w	r7, r5, ip
 800992a:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800992c:	4d2b      	ldr	r5, [pc, #172]	@ (80099dc <HAL_GPIO_DeInit+0x140>)
 800992e:	42a8      	cmp	r0, r5
 8009930:	d0bd      	beq.n	80098ae <HAL_GPIO_DeInit+0x12>
 8009932:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009936:	42a8      	cmp	r0, r5
 8009938:	d01d      	beq.n	8009976 <HAL_GPIO_DeInit+0xda>
 800993a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800993e:	42a8      	cmp	r0, r5
 8009940:	d01b      	beq.n	800997a <HAL_GPIO_DeInit+0xde>
 8009942:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009946:	42a8      	cmp	r0, r5
 8009948:	d019      	beq.n	800997e <HAL_GPIO_DeInit+0xe2>
 800994a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800994e:	42a8      	cmp	r0, r5
 8009950:	d017      	beq.n	8009982 <HAL_GPIO_DeInit+0xe6>
 8009952:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009956:	42a8      	cmp	r0, r5
 8009958:	d015      	beq.n	8009986 <HAL_GPIO_DeInit+0xea>
 800995a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800995e:	42a8      	cmp	r0, r5
 8009960:	d013      	beq.n	800998a <HAL_GPIO_DeInit+0xee>
 8009962:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009966:	42a8      	cmp	r0, r5
 8009968:	d011      	beq.n	800998e <HAL_GPIO_DeInit+0xf2>
 800996a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800996e:	42a8      	cmp	r0, r5
 8009970:	d09b      	beq.n	80098aa <HAL_GPIO_DeInit+0xe>
 8009972:	250a      	movs	r5, #10
 8009974:	e79c      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
 8009976:	2501      	movs	r5, #1
 8009978:	e79a      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
 800997a:	2502      	movs	r5, #2
 800997c:	e798      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
 800997e:	2503      	movs	r5, #3
 8009980:	e796      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
 8009982:	2504      	movs	r5, #4
 8009984:	e794      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
 8009986:	2505      	movs	r5, #5
 8009988:	e792      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
 800998a:	2506      	movs	r5, #6
 800998c:	e790      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
 800998e:	2507      	movs	r5, #7
 8009990:	e78e      	b.n	80098b0 <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009992:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 8009996:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800999a:	ea25 050e 	bic.w	r5, r5, lr
 800999e:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80099a2:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 80099a6:	ea25 050e 	bic.w	r5, r5, lr
 80099aa:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80099ae:	6865      	ldr	r5, [r4, #4]
 80099b0:	ea25 050e 	bic.w	r5, r5, lr
 80099b4:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80099b6:	6825      	ldr	r5, [r4, #0]
 80099b8:	ea25 050e 	bic.w	r5, r5, lr
 80099bc:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80099be:	f8df c018 	ldr.w	ip, [pc, #24]	@ 80099d8 <HAL_GPIO_DeInit+0x13c>
 80099c2:	1cb4      	adds	r4, r6, #2
 80099c4:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 80099c8:	ea25 0507 	bic.w	r5, r5, r7
 80099cc:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 80099d0:	e772      	b.n	80098b8 <HAL_GPIO_DeInit+0x1c>
  }
}
 80099d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	58000400 	.word	0x58000400
 80099dc:	58020000 	.word	0x58020000

080099e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80099e0:	6903      	ldr	r3, [r0, #16]
 80099e2:	4219      	tst	r1, r3
 80099e4:	d001      	beq.n	80099ea <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80099e6:	2001      	movs	r0, #1
 80099e8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80099ea:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80099ec:	4770      	bx	lr

080099ee <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80099ee:	b10a      	cbz	r2, 80099f4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80099f0:	6181      	str	r1, [r0, #24]
 80099f2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80099f4:	0409      	lsls	r1, r1, #16
 80099f6:	6181      	str	r1, [r0, #24]
  }
}
 80099f8:	4770      	bx	lr

080099fa <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80099fa:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80099fc:	ea01 0203 	and.w	r2, r1, r3
 8009a00:	ea21 0103 	bic.w	r1, r1, r3
 8009a04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a08:	6181      	str	r1, [r0, #24]
}
 8009a0a:	4770      	bx	lr

08009a0c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009a0c:	6803      	ldr	r3, [r0, #0]
 8009a0e:	699a      	ldr	r2, [r3, #24]
 8009a10:	f012 0f02 	tst.w	r2, #2
 8009a14:	d001      	beq.n	8009a1a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009a16:	2200      	movs	r2, #0
 8009a18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a1a:	6803      	ldr	r3, [r0, #0]
 8009a1c:	699a      	ldr	r2, [r3, #24]
 8009a1e:	f012 0f01 	tst.w	r2, #1
 8009a22:	d103      	bne.n	8009a2c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	f042 0201 	orr.w	r2, r2, #1
 8009a2a:	619a      	str	r2, [r3, #24]
  }
}
 8009a2c:	4770      	bx	lr

08009a2e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009a2e:	b410      	push	{r4}
 8009a30:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a32:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009a36:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a3a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a3c:	4321      	orrs	r1, r4
 8009a3e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a42:	6802      	ldr	r2, [r0, #0]
 8009a44:	6853      	ldr	r3, [r2, #4]
 8009a46:	0d64      	lsrs	r4, r4, #21
 8009a48:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8009a4c:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8009a50:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8009a54:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8009a58:	f044 0403 	orr.w	r4, r4, #3
 8009a5c:	ea23 0304 	bic.w	r3, r3, r4
 8009a60:	430b      	orrs	r3, r1
 8009a62:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a6a:	f011 0f01 	tst.w	r1, #1
 8009a6e:	d009      	beq.n	8009a84 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a70:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009a74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a78:	2b28      	cmp	r3, #40	@ 0x28
 8009a7a:	d001      	beq.n	8009a80 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a7c:	23f2      	movs	r3, #242	@ 0xf2
 8009a7e:	e002      	b.n	8009a86 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009a80:	2342      	movs	r3, #66	@ 0x42
 8009a82:	e000      	b.n	8009a86 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8009a84:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a86:	f011 0f02 	tst.w	r1, #2
 8009a8a:	d009      	beq.n	8009aa0 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009a8c:	f043 0c44 	orr.w	ip, r3, #68	@ 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a90:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8009a94:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8009a98:	2a28      	cmp	r2, #40	@ 0x28
 8009a9a:	d010      	beq.n	8009abe <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a9c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009aa0:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8009aa4:	d10d      	bne.n	8009ac2 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009aa6:	2910      	cmp	r1, #16
 8009aa8:	d00e      	beq.n	8009ac8 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009aaa:	2920      	cmp	r1, #32
 8009aac:	d00f      	beq.n	8009ace <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009aae:	2940      	cmp	r1, #64	@ 0x40
 8009ab0:	d010      	beq.n	8009ad4 <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009ab2:	6801      	ldr	r1, [r0, #0]
 8009ab4:	680a      	ldr	r2, [r1, #0]
 8009ab6:	ea22 0303 	bic.w	r3, r2, r3
 8009aba:	600b      	str	r3, [r1, #0]
}
 8009abc:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009abe:	4663      	mov	r3, ip
 8009ac0:	e7ee      	b.n	8009aa0 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ac2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009ac6:	e7ee      	b.n	8009aa6 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009ac8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009acc:	e7ed      	b.n	8009aaa <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8009ace:	f043 0320 	orr.w	r3, r3, #32
 8009ad2:	e7ec      	b.n	8009aae <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8009ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ad8:	e7eb      	b.n	8009ab2 <I2C_Disable_IRQ+0x48>

08009ada <I2C_IsErrorOccurred>:
{
 8009ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ade:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8009ae0:	6803      	ldr	r3, [r0, #0]
 8009ae2:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ae4:	f016 0610 	ands.w	r6, r6, #16
 8009ae8:	d07e      	beq.n	8009be8 <I2C_IsErrorOccurred+0x10e>
 8009aea:	460d      	mov	r5, r1
 8009aec:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009aee:	2210      	movs	r2, #16
 8009af0:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8009af2:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009af4:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	6998      	ldr	r0, [r3, #24]
 8009afa:	f010 0f20 	tst.w	r0, #32
 8009afe:	d132      	bne.n	8009b66 <I2C_IsErrorOccurred+0x8c>
 8009b00:	bb8f      	cbnz	r7, 8009b66 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8009b02:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009b06:	d0f6      	beq.n	8009af6 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b08:	f7fd ff66 	bl	80079d8 <HAL_GetTick>
 8009b0c:	eba0 0008 	sub.w	r0, r0, r8
 8009b10:	42a8      	cmp	r0, r5
 8009b12:	d801      	bhi.n	8009b18 <I2C_IsErrorOccurred+0x3e>
 8009b14:	2d00      	cmp	r5, #0
 8009b16:	d1ee      	bne.n	8009af6 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b18:	6821      	ldr	r1, [r4, #0]
 8009b1a:	684a      	ldr	r2, [r1, #4]
 8009b1c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8009b20:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8009b24:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b26:	6988      	ldr	r0, [r1, #24]
 8009b28:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8009b2c:	d004      	beq.n	8009b38 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8009b2e:	3b20      	subs	r3, #32
 8009b30:	bf18      	it	ne
 8009b32:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8009b34:	b902      	cbnz	r2, 8009b38 <I2C_IsErrorOccurred+0x5e>
 8009b36:	b973      	cbnz	r3, 8009b56 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	f013 0f20 	tst.w	r3, #32
 8009b40:	d1d9      	bne.n	8009af6 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b42:	f7fd ff49 	bl	80079d8 <HAL_GetTick>
 8009b46:	eba0 0008 	sub.w	r0, r0, r8
 8009b4a:	2819      	cmp	r0, #25
 8009b4c:	d9f4      	bls.n	8009b38 <I2C_IsErrorOccurred+0x5e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b4e:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8009b52:	2701      	movs	r7, #1
              break;
 8009b54:	e7cf      	b.n	8009af6 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b56:	684b      	ldr	r3, [r1, #4]
 8009b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b5c:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8009b5e:	f7fd ff3b 	bl	80079d8 <HAL_GetTick>
 8009b62:	4680      	mov	r8, r0
 8009b64:	e7e8      	b.n	8009b38 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8009b66:	b90f      	cbnz	r7, 8009b6c <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b68:	2220      	movs	r2, #32
 8009b6a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8009b6c:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8009b70:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8009b72:	6822      	ldr	r2, [r4, #0]
 8009b74:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b76:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009b7a:	d005      	beq.n	8009b88 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8009b7c:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b84:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8009b86:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b88:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009b8c:	d006      	beq.n	8009b9c <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 8009b8e:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009b98:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8009b9a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b9c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8009ba0:	d024      	beq.n	8009bec <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ba2:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bac:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8009bae:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f7ff ff2b 	bl	8009a0c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	6853      	ldr	r3, [r2, #4]
 8009bba:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8009bbe:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8009bc2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8009bc6:	f023 0301 	bic.w	r3, r3, #1
 8009bca:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8009bcc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009bce:	4333      	orrs	r3, r6
 8009bd0:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bd2:	2320      	movs	r3, #32
 8009bd4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8009bde:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009be2:	4628      	mov	r0, r5
 8009be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8009be8:	2500      	movs	r5, #0
 8009bea:	e7c2      	b.n	8009b72 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	d0f8      	beq.n	8009be2 <I2C_IsErrorOccurred+0x108>
 8009bf0:	e7de      	b.n	8009bb0 <I2C_IsErrorOccurred+0xd6>

08009bf2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009bf2:	b570      	push	{r4, r5, r6, lr}
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	f013 0f02 	tst.w	r3, #2
 8009c02:	d122      	bne.n	8009c4a <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c04:	4632      	mov	r2, r6
 8009c06:	4629      	mov	r1, r5
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f7ff ff66 	bl	8009ada <I2C_IsErrorOccurred>
 8009c0e:	b9f0      	cbnz	r0, 8009c4e <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8009c10:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009c14:	d0f1      	beq.n	8009bfa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c16:	f7fd fedf 	bl	80079d8 <HAL_GetTick>
 8009c1a:	1b80      	subs	r0, r0, r6
 8009c1c:	42a8      	cmp	r0, r5
 8009c1e:	d801      	bhi.n	8009c24 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	d1ea      	bne.n	8009bfa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f013 0f02 	tst.w	r3, #2
 8009c2c:	d1e5      	bne.n	8009bfa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c2e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c30:	f043 0320 	orr.w	r3, r3, #32
 8009c34:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c36:	2320      	movs	r3, #32
 8009c38:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8009c42:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8009c46:	2001      	movs	r0, #1
 8009c48:	e000      	b.n	8009c4c <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8009c4a:	2000      	movs	r0, #0
}
 8009c4c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009c4e:	2001      	movs	r0, #1
 8009c50:	e7fc      	b.n	8009c4c <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08009c52 <I2C_WaitOnFlagUntilTimeout>:
{
 8009c52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c56:	4605      	mov	r5, r0
 8009c58:	4688      	mov	r8, r1
 8009c5a:	4617      	mov	r7, r2
 8009c5c:	461e      	mov	r6, r3
 8009c5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	699c      	ldr	r4, [r3, #24]
 8009c66:	ea38 0404 	bics.w	r4, r8, r4
 8009c6a:	bf0c      	ite	eq
 8009c6c:	2301      	moveq	r3, #1
 8009c6e:	2300      	movne	r3, #0
 8009c70:	42bb      	cmp	r3, r7
 8009c72:	d127      	bne.n	8009cc4 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c74:	464a      	mov	r2, r9
 8009c76:	4631      	mov	r1, r6
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f7ff ff2e 	bl	8009ada <I2C_IsErrorOccurred>
 8009c7e:	bb20      	cbnz	r0, 8009cca <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8009c80:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009c84:	d0ed      	beq.n	8009c62 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c86:	f7fd fea7 	bl	80079d8 <HAL_GetTick>
 8009c8a:	eba0 0009 	sub.w	r0, r0, r9
 8009c8e:	42b0      	cmp	r0, r6
 8009c90:	d801      	bhi.n	8009c96 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009c92:	2e00      	cmp	r6, #0
 8009c94:	d1e5      	bne.n	8009c62 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c96:	682b      	ldr	r3, [r5, #0]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	ea38 0303 	bics.w	r3, r8, r3
 8009c9e:	bf0c      	ite	eq
 8009ca0:	2301      	moveq	r3, #1
 8009ca2:	2300      	movne	r3, #0
 8009ca4:	42bb      	cmp	r3, r7
 8009ca6:	d1dc      	bne.n	8009c62 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ca8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8009caa:	f043 0320 	orr.w	r3, r3, #32
 8009cae:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8009cbc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8009cc0:	2001      	movs	r0, #1
 8009cc2:	e000      	b.n	8009cc6 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 8009cc4:	2000      	movs	r0, #0
}
 8009cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8009cca:	2001      	movs	r0, #1
 8009ccc:	e7fb      	b.n	8009cc6 <I2C_WaitOnFlagUntilTimeout+0x74>
	...

08009cd0 <I2C_RequestMemoryWrite>:
{
 8009cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4690      	mov	r8, r2
 8009cda:	461d      	mov	r5, r3
 8009cdc:	9e08      	ldr	r6, [sp, #32]
 8009cde:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ce0:	4b19      	ldr	r3, [pc, #100]	@ (8009d48 <I2C_RequestMemoryWrite+0x78>)
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ce8:	b2ea      	uxtb	r2, r5
 8009cea:	f7ff fea0 	bl	8009a2e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cee:	463a      	mov	r2, r7
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f7ff ff7d 	bl	8009bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009cf8:	b9f8      	cbnz	r0, 8009d3a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cfa:	2d01      	cmp	r5, #1
 8009cfc:	d10e      	bne.n	8009d1c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	fa5f f288 	uxtb.w	r2, r8
 8009d04:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009d06:	9700      	str	r7, [sp, #0]
 8009d08:	4633      	mov	r3, r6
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2180      	movs	r1, #128	@ 0x80
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff ff9f 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 8009d14:	b9a8      	cbnz	r0, 8009d42 <I2C_RequestMemoryWrite+0x72>
}
 8009d16:	b002      	add	sp, #8
 8009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8009d22:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d24:	463a      	mov	r2, r7
 8009d26:	4631      	mov	r1, r6
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f7ff ff62 	bl	8009bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d2e:	b930      	cbnz	r0, 8009d3e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	fa5f f288 	uxtb.w	r2, r8
 8009d36:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d38:	e7e5      	b.n	8009d06 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8009d3a:	2001      	movs	r0, #1
 8009d3c:	e7eb      	b.n	8009d16 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8009d3e:	2001      	movs	r0, #1
 8009d40:	e7e9      	b.n	8009d16 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8009d42:	2001      	movs	r0, #1
 8009d44:	e7e7      	b.n	8009d16 <I2C_RequestMemoryWrite+0x46>
 8009d46:	bf00      	nop
 8009d48:	80002000 	.word	0x80002000

08009d4c <I2C_RequestMemoryRead>:
{
 8009d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	4604      	mov	r4, r0
 8009d54:	4690      	mov	r8, r2
 8009d56:	461d      	mov	r5, r3
 8009d58:	9e08      	ldr	r6, [sp, #32]
 8009d5a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d5c:	4b18      	ldr	r3, [pc, #96]	@ (8009dc0 <I2C_RequestMemoryRead+0x74>)
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	2300      	movs	r3, #0
 8009d62:	b2ea      	uxtb	r2, r5
 8009d64:	f7ff fe63 	bl	8009a2e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d68:	463a      	mov	r2, r7
 8009d6a:	4631      	mov	r1, r6
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7ff ff40 	bl	8009bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d72:	b9f8      	cbnz	r0, 8009db4 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d74:	2d01      	cmp	r5, #1
 8009d76:	d10e      	bne.n	8009d96 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	fa5f f288 	uxtb.w	r2, r8
 8009d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009d80:	9700      	str	r7, [sp, #0]
 8009d82:	4633      	mov	r3, r6
 8009d84:	2200      	movs	r2, #0
 8009d86:	2140      	movs	r1, #64	@ 0x40
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f7ff ff62 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 8009d8e:	b9a8      	cbnz	r0, 8009dbc <I2C_RequestMemoryRead+0x70>
}
 8009d90:	b002      	add	sp, #8
 8009d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8009d9c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d9e:	463a      	mov	r2, r7
 8009da0:	4631      	mov	r1, r6
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff ff25 	bl	8009bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009da8:	b930      	cbnz	r0, 8009db8 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	fa5f f288 	uxtb.w	r2, r8
 8009db0:	629a      	str	r2, [r3, #40]	@ 0x28
 8009db2:	e7e5      	b.n	8009d80 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8009db4:	2001      	movs	r0, #1
 8009db6:	e7eb      	b.n	8009d90 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8009db8:	2001      	movs	r0, #1
 8009dba:	e7e9      	b.n	8009d90 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	e7e7      	b.n	8009d90 <I2C_RequestMemoryRead+0x44>
 8009dc0:	80002000 	.word	0x80002000

08009dc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	460d      	mov	r5, r1
 8009dca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dcc:	e004      	b.n	8009dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	f013 0f20 	tst.w	r3, #32
 8009dd6:	d012      	beq.n	8009dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	f013 0f20 	tst.w	r3, #32
 8009de0:	d11b      	bne.n	8009e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009de2:	4632      	mov	r2, r6
 8009de4:	4629      	mov	r1, r5
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff fe77 	bl	8009ada <I2C_IsErrorOccurred>
 8009dec:	b9b8      	cbnz	r0, 8009e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dee:	f7fd fdf3 	bl	80079d8 <HAL_GetTick>
 8009df2:	1b80      	subs	r0, r0, r6
 8009df4:	42a8      	cmp	r0, r5
 8009df6:	d8ea      	bhi.n	8009dce <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	d1ed      	bne.n	8009dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8009dfc:	e7e7      	b.n	8009dce <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009dfe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009e00:	f043 0320 	orr.w	r3, r3, #32
 8009e04:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e06:	2320      	movs	r3, #32
 8009e08:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8009e12:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8009e16:	2001      	movs	r0, #1
 8009e18:	e000      	b.n	8009e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8009e1a:	2000      	movs	r0, #0
}
 8009e1c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009e1e:	2001      	movs	r0, #1
 8009e20:	e7fc      	b.n	8009e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
	...

08009e24 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d05d      	beq.n	8009ee4 <HAL_I2C_Init+0xc0>
{
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e2c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d046      	beq.n	8009ec2 <HAL_I2C_Init+0x9e>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e34:	2324      	movs	r3, #36	@ 0x24
 8009e36:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009e3a:	6822      	ldr	r2, [r4, #0]
 8009e3c:	6813      	ldr	r3, [r2, #0]
 8009e3e:	f023 0301 	bic.w	r3, r3, #1
 8009e42:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009e44:	6863      	ldr	r3, [r4, #4]
 8009e46:	6822      	ldr	r2, [r4, #0]
 8009e48:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8009e4c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	6893      	ldr	r3, [r2, #8]
 8009e52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e56:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e58:	68e3      	ldr	r3, [r4, #12]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d036      	beq.n	8009ecc <HAL_I2C_Init+0xa8>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	6822      	ldr	r2, [r4, #0]
 8009e62:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8009e66:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e68:	68e3      	ldr	r3, [r4, #12]
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d034      	beq.n	8009ed8 <HAL_I2C_Init+0xb4>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	6853      	ldr	r3, [r2, #4]
 8009e72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e76:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e78:	6822      	ldr	r2, [r4, #0]
 8009e7a:	6851      	ldr	r1, [r2, #4]
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee8 <HAL_I2C_Init+0xc4>)
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e82:	6822      	ldr	r2, [r4, #0]
 8009e84:	68d3      	ldr	r3, [r2, #12]
 8009e86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e8a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	6962      	ldr	r2, [r4, #20]
 8009e90:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009e92:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009e9a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e9c:	69e3      	ldr	r3, [r4, #28]
 8009e9e:	6a21      	ldr	r1, [r4, #32]
 8009ea0:	6822      	ldr	r2, [r4, #0]
 8009ea2:	430b      	orrs	r3, r1
 8009ea4:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009ea6:	6822      	ldr	r2, [r4, #0]
 8009ea8:	6813      	ldr	r3, [r2, #0]
 8009eaa:	f043 0301 	orr.w	r3, r3, #1
 8009eae:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009eba:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ebc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009ec0:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8009ec2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8009ec6:	f7fc fc3d 	bl	8006744 <HAL_I2C_MspInit>
 8009eca:	e7b3      	b.n	8009e34 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ecc:	68a3      	ldr	r3, [r4, #8]
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ed4:	6093      	str	r3, [r2, #8]
 8009ed6:	e7c7      	b.n	8009e68 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009ed8:	6822      	ldr	r2, [r4, #0]
 8009eda:	6853      	ldr	r3, [r2, #4]
 8009edc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009ee0:	6053      	str	r3, [r2, #4]
 8009ee2:	e7c9      	b.n	8009e78 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8009ee4:	2001      	movs	r0, #1
}
 8009ee6:	4770      	bx	lr
 8009ee8:	02008000 	.word	0x02008000

08009eec <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8009eec:	b1a8      	cbz	r0, 8009f1a <HAL_I2C_DeInit+0x2e>
{
 8009eee:	b510      	push	{r4, lr}
 8009ef0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ef2:	2324      	movs	r3, #36	@ 0x24
 8009ef4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009ef8:	6802      	ldr	r2, [r0, #0]
 8009efa:	6813      	ldr	r3, [r2, #0]
 8009efc:	f023 0301 	bic.w	r3, r3, #1
 8009f00:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8009f02:	f7fc fcc7 	bl	8006894 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f06:	2000      	movs	r0, #0
 8009f08:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009f0a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f0e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f10:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  __HAL_UNLOCK(hi2c);
 8009f14:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8009f18:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009f1a:	2001      	movs	r0, #1
}
 8009f1c:	4770      	bx	lr

08009f1e <HAL_I2C_Mem_Write>:
{
 8009f1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f22:	b083      	sub	sp, #12
 8009f24:	460d      	mov	r5, r1
 8009f26:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009f2a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f2c:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8009f30:	b2c9      	uxtb	r1, r1
 8009f32:	2920      	cmp	r1, #32
 8009f34:	f040 80bc 	bne.w	800a0b0 <HAL_I2C_Mem_Write+0x192>
 8009f38:	4604      	mov	r4, r0
 8009f3a:	4690      	mov	r8, r2
 8009f3c:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8009f3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f40:	f1ba 0f00 	cmp.w	sl, #0
 8009f44:	bf18      	it	ne
 8009f46:	2b00      	cmpne	r3, #0
 8009f48:	d016      	beq.n	8009f78 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8009f4a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	f000 80b2 	beq.w	800a0b8 <HAL_I2C_Mem_Write+0x19a>
 8009f54:	f04f 0b01 	mov.w	fp, #1
 8009f58:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009f5c:	f7fd fd3c 	bl	80079d8 <HAL_GetTick>
 8009f60:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009f62:	9000      	str	r0, [sp, #0]
 8009f64:	2319      	movs	r3, #25
 8009f66:	465a      	mov	r2, fp
 8009f68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f7ff fe70 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 8009f72:	b130      	cbz	r0, 8009f82 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8009f74:	2001      	movs	r0, #1
 8009f76:	e09c      	b.n	800a0b2 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f7c:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 8009f7e:	2001      	movs	r0, #1
 8009f80:	e097      	b.n	800a0b2 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f82:	2321      	movs	r3, #33	@ 0x21
 8009f84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f88:	2340      	movs	r3, #64	@ 0x40
 8009f8a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8009f92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f94:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009f96:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009f9a:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f9c:	9601      	str	r6, [sp, #4]
 8009f9e:	9700      	str	r7, [sp, #0]
 8009fa0:	464b      	mov	r3, r9
 8009fa2:	4642      	mov	r2, r8
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f7ff fe92 	bl	8009cd0 <I2C_RequestMemoryWrite>
 8009fac:	b970      	cbnz	r0, 8009fcc <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	2bff      	cmp	r3, #255	@ 0xff
 8009fb4:	d90f      	bls.n	8009fd6 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009fb6:	22ff      	movs	r2, #255	@ 0xff
 8009fb8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009fba:	2300      	movs	r3, #0
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7ff fd32 	bl	8009a2e <I2C_TransferConfig>
 8009fca:	e021      	b.n	800a010 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009fd2:	4658      	mov	r0, fp
 8009fd4:	e06d      	b.n	800a0b2 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8009fd6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009fd8:	b292      	uxth	r2, r2
 8009fda:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009fe4:	b2d2      	uxtb	r2, r2
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7ff fd20 	bl	8009a2e <I2C_TransferConfig>
 8009fee:	e00f      	b.n	800a010 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8009ff0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009ff2:	b292      	uxth	r2, r2
 8009ff4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ffe:	b2d2      	uxtb	r2, r2
 800a000:	4629      	mov	r1, r5
 800a002:	4620      	mov	r0, r4
 800a004:	f7ff fd13 	bl	8009a2e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a008:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d033      	beq.n	800a078 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a010:	4632      	mov	r2, r6
 800a012:	4639      	mov	r1, r7
 800a014:	4620      	mov	r0, r4
 800a016:	f7ff fdec 	bl	8009bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d14e      	bne.n	800a0bc <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a01e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	7812      	ldrb	r2, [r2, #0]
 800a024:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800a026:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a028:	3301      	adds	r3, #1
 800a02a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800a02c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a02e:	b29b      	uxth	r3, r3
 800a030:	3b01      	subs	r3, #1
 800a032:	b29b      	uxth	r3, r3
 800a034:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800a036:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800a038:	3b01      	subs	r3, #1
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a03e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800a040:	b292      	uxth	r2, r2
 800a042:	2a00      	cmp	r2, #0
 800a044:	d0e0      	beq.n	800a008 <HAL_I2C_Mem_Write+0xea>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1de      	bne.n	800a008 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a04a:	9600      	str	r6, [sp, #0]
 800a04c:	463b      	mov	r3, r7
 800a04e:	2200      	movs	r2, #0
 800a050:	2180      	movs	r1, #128	@ 0x80
 800a052:	4620      	mov	r0, r4
 800a054:	f7ff fdfd 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 800a058:	bb90      	cbnz	r0, 800a0c0 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a05a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	2bff      	cmp	r3, #255	@ 0xff
 800a060:	d9c6      	bls.n	8009ff0 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a062:	22ff      	movs	r2, #255	@ 0xff
 800a064:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a066:	2300      	movs	r3, #0
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a06e:	4629      	mov	r1, r5
 800a070:	4620      	mov	r0, r4
 800a072:	f7ff fcdc 	bl	8009a2e <I2C_TransferConfig>
 800a076:	e7c7      	b.n	800a008 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a078:	4632      	mov	r2, r6
 800a07a:	4639      	mov	r1, r7
 800a07c:	4620      	mov	r0, r4
 800a07e:	f7ff fea1 	bl	8009dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a082:	b9f8      	cbnz	r0, 800a0c4 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	2220      	movs	r2, #32
 800a088:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a08a:	6821      	ldr	r1, [r4, #0]
 800a08c:	684b      	ldr	r3, [r1, #4]
 800a08e:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800a092:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800a096:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800a09a:	f023 0301 	bic.w	r3, r3, #1
 800a09e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a0a0:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800a0aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800a0ae:	e000      	b.n	800a0b2 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800a0b0:	2002      	movs	r0, #2
}
 800a0b2:	b003      	add	sp, #12
 800a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a0b8:	2002      	movs	r0, #2
 800a0ba:	e7fa      	b.n	800a0b2 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800a0bc:	2001      	movs	r0, #1
 800a0be:	e7f8      	b.n	800a0b2 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	e7f6      	b.n	800a0b2 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800a0c4:	2001      	movs	r0, #1
 800a0c6:	e7f4      	b.n	800a0b2 <HAL_I2C_Mem_Write+0x194>

0800a0c8 <HAL_I2C_Mem_Read>:
{
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	460d      	mov	r5, r1
 800a0d0:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800a0d4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0d6:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800a0da:	b2c9      	uxtb	r1, r1
 800a0dc:	2920      	cmp	r1, #32
 800a0de:	f040 80bd 	bne.w	800a25c <HAL_I2C_Mem_Read+0x194>
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4690      	mov	r8, r2
 800a0e6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800a0e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0ea:	f1ba 0f00 	cmp.w	sl, #0
 800a0ee:	bf18      	it	ne
 800a0f0:	2b00      	cmpne	r3, #0
 800a0f2:	d016      	beq.n	800a122 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 800a0f4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	f000 80b3 	beq.w	800a264 <HAL_I2C_Mem_Read+0x19c>
 800a0fe:	f04f 0b01 	mov.w	fp, #1
 800a102:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800a106:	f7fd fc67 	bl	80079d8 <HAL_GetTick>
 800a10a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a10c:	9000      	str	r0, [sp, #0]
 800a10e:	2319      	movs	r3, #25
 800a110:	465a      	mov	r2, fp
 800a112:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff fd9b 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 800a11c:	b130      	cbz	r0, 800a12c <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800a11e:	2001      	movs	r0, #1
 800a120:	e09d      	b.n	800a25e <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a126:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 800a128:	2001      	movs	r0, #1
 800a12a:	e098      	b.n	800a25e <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a12c:	2322      	movs	r3, #34	@ 0x22
 800a12e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a132:	2340      	movs	r3, #64	@ 0x40
 800a134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a138:	2300      	movs	r3, #0
 800a13a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800a13c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a13e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a140:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a144:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a146:	9601      	str	r6, [sp, #4]
 800a148:	9700      	str	r7, [sp, #0]
 800a14a:	464b      	mov	r3, r9
 800a14c:	4642      	mov	r2, r8
 800a14e:	4629      	mov	r1, r5
 800a150:	4620      	mov	r0, r4
 800a152:	f7ff fdfb 	bl	8009d4c <I2C_RequestMemoryRead>
 800a156:	b970      	cbnz	r0, 800a176 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a158:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	2bff      	cmp	r3, #255	@ 0xff
 800a15e:	d90f      	bls.n	800a180 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a160:	22ff      	movs	r2, #255	@ 0xff
 800a162:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a164:	4b43      	ldr	r3, [pc, #268]	@ (800a274 <HAL_I2C_Mem_Read+0x1ac>)
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a16c:	4629      	mov	r1, r5
 800a16e:	4620      	mov	r0, r4
 800a170:	f7ff fc5d 	bl	8009a2e <I2C_TransferConfig>
 800a174:	e021      	b.n	800a1ba <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800a176:	2300      	movs	r3, #0
 800a178:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800a17c:	4658      	mov	r0, fp
 800a17e:	e06e      	b.n	800a25e <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800a180:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800a182:	b292      	uxth	r2, r2
 800a184:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a186:	4b3b      	ldr	r3, [pc, #236]	@ (800a274 <HAL_I2C_Mem_Read+0x1ac>)
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a18e:	b2d2      	uxtb	r2, r2
 800a190:	4629      	mov	r1, r5
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff fc4b 	bl	8009a2e <I2C_TransferConfig>
 800a198:	e00f      	b.n	800a1ba <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800a19a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800a19c:	b292      	uxth	r2, r2
 800a19e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1a8:	b2d2      	uxtb	r2, r2
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f7ff fc3e 	bl	8009a2e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a1b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d034      	beq.n	800a224 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a1ba:	9600      	str	r6, [sp, #0]
 800a1bc:	463b      	mov	r3, r7
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2104      	movs	r1, #4
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7ff fd45 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d14d      	bne.n	800a268 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a1d2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a1d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800a1da:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800a1dc:	3a01      	subs	r2, #1
 800a1de:	b292      	uxth	r2, r2
 800a1e0:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800a1e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0de      	beq.n	800a1b2 <HAL_I2C_Mem_Read+0xea>
 800a1f4:	2a00      	cmp	r2, #0
 800a1f6:	d1dc      	bne.n	800a1b2 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a1f8:	9600      	str	r6, [sp, #0]
 800a1fa:	463b      	mov	r3, r7
 800a1fc:	2180      	movs	r1, #128	@ 0x80
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7ff fd27 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 800a204:	bb90      	cbnz	r0, 800a26c <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a206:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2bff      	cmp	r3, #255	@ 0xff
 800a20c:	d9c5      	bls.n	800a19a <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a20e:	22ff      	movs	r2, #255	@ 0xff
 800a210:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a212:	2300      	movs	r3, #0
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a21a:	4629      	mov	r1, r5
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7ff fc06 	bl	8009a2e <I2C_TransferConfig>
 800a222:	e7c6      	b.n	800a1b2 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a224:	4632      	mov	r2, r6
 800a226:	4639      	mov	r1, r7
 800a228:	4620      	mov	r0, r4
 800a22a:	f7ff fdcb 	bl	8009dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a22e:	b9f8      	cbnz	r0, 800a270 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	2220      	movs	r2, #32
 800a234:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a236:	6821      	ldr	r1, [r4, #0]
 800a238:	684b      	ldr	r3, [r1, #4]
 800a23a:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800a23e:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800a242:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800a246:	f023 0301 	bic.w	r3, r3, #1
 800a24a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a24c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a250:	2300      	movs	r3, #0
 800a252:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800a256:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800a25a:	e000      	b.n	800a25e <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800a25c:	2002      	movs	r0, #2
}
 800a25e:	b003      	add	sp, #12
 800a260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a264:	2002      	movs	r0, #2
 800a266:	e7fa      	b.n	800a25e <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 800a268:	2001      	movs	r0, #1
 800a26a:	e7f8      	b.n	800a25e <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 800a26c:	2001      	movs	r0, #1
 800a26e:	e7f6      	b.n	800a25e <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800a270:	2001      	movs	r0, #1
 800a272:	e7f4      	b.n	800a25e <HAL_I2C_Mem_Read+0x196>
 800a274:	80002400 	.word	0x80002400

0800a278 <HAL_I2C_IsDeviceReady>:
{
 800a278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a27c:	b085      	sub	sp, #20
 800a27e:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 800a280:	2300      	movs	r3, #0
 800a282:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a284:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	f040 8083 	bne.w	800a396 <HAL_I2C_IsDeviceReady+0x11e>
 800a290:	4606      	mov	r6, r0
 800a292:	4688      	mov	r8, r1
 800a294:	4691      	mov	r9, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a296:	6803      	ldr	r3, [r0, #0]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800a29e:	d17c      	bne.n	800a39a <HAL_I2C_IsDeviceReady+0x122>
    __HAL_LOCK(hi2c);
 800a2a0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d07a      	beq.n	800a39e <HAL_I2C_IsDeviceReady+0x126>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2ae:	2324      	movs	r3, #36	@ 0x24
 800a2b0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a2b8:	68f3      	ldr	r3, [r6, #12]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d010      	beq.n	800a2e0 <HAL_I2C_IsDeviceReady+0x68>
 800a2be:	f3c8 0209 	ubfx	r2, r8, #0, #10
 800a2c2:	4b3a      	ldr	r3, [pc, #232]	@ (800a3ac <HAL_I2C_IsDeviceReady+0x134>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	6832      	ldr	r2, [r6, #0]
 800a2c8:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800a2ca:	f7fd fb85 	bl	80079d8 <HAL_GetTick>
 800a2ce:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2d0:	6832      	ldr	r2, [r6, #0]
 800a2d2:	6993      	ldr	r3, [r2, #24]
 800a2d4:	f3c3 1c40 	ubfx	ip, r3, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a2d8:	6993      	ldr	r3, [r2, #24]
 800a2da:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a2de:	e00b      	b.n	800a2f8 <HAL_I2C_IsDeviceReady+0x80>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a2e0:	f3c8 0209 	ubfx	r2, r8, #0, #10
 800a2e4:	4b32      	ldr	r3, [pc, #200]	@ (800a3b0 <HAL_I2C_IsDeviceReady+0x138>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	e7ed      	b.n	800a2c6 <HAL_I2C_IsDeviceReady+0x4e>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2ea:	6833      	ldr	r3, [r6, #0]
 800a2ec:	699c      	ldr	r4, [r3, #24]
 800a2ee:	f3c4 1c40 	ubfx	ip, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a2f8:	ea5c 0c03 	orrs.w	ip, ip, r3
 800a2fc:	d117      	bne.n	800a32e <HAL_I2C_IsDeviceReady+0xb6>
        if (Timeout != HAL_MAX_DELAY)
 800a2fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a302:	d0f2      	beq.n	800a2ea <HAL_I2C_IsDeviceReady+0x72>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a304:	f7fd fb68 	bl	80079d8 <HAL_GetTick>
 800a308:	1bc0      	subs	r0, r0, r7
 800a30a:	42a8      	cmp	r0, r5
 800a30c:	d801      	bhi.n	800a312 <HAL_I2C_IsDeviceReady+0x9a>
 800a30e:	2d00      	cmp	r5, #0
 800a310:	d1eb      	bne.n	800a2ea <HAL_I2C_IsDeviceReady+0x72>
            hi2c->State = HAL_I2C_STATE_READY;
 800a312:	2320      	movs	r3, #32
 800a314:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a318:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800a31a:	f043 0320 	orr.w	r3, r3, #32
 800a31e:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 800a320:	2300      	movs	r3, #0
 800a322:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 800a326:	2001      	movs	r0, #1
}
 800a328:	b005      	add	sp, #20
 800a32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a32e:	6833      	ldr	r3, [r6, #0]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	f013 0f10 	tst.w	r3, #16
 800a336:	d01d      	beq.n	800a374 <HAL_I2C_IsDeviceReady+0xfc>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a338:	9700      	str	r7, [sp, #0]
 800a33a:	462b      	mov	r3, r5
 800a33c:	2200      	movs	r2, #0
 800a33e:	2120      	movs	r1, #32
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff fc86 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 800a346:	bb70      	cbnz	r0, 800a3a6 <HAL_I2C_IsDeviceReady+0x12e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a348:	6833      	ldr	r3, [r6, #0]
 800a34a:	2210      	movs	r2, #16
 800a34c:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a34e:	6833      	ldr	r3, [r6, #0]
 800a350:	2220      	movs	r2, #32
 800a352:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	454b      	cmp	r3, r9
 800a35e:	d3ab      	bcc.n	800a2b8 <HAL_I2C_IsDeviceReady+0x40>
    hi2c->State = HAL_I2C_STATE_READY;
 800a360:	f886 2041 	strb.w	r2, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a364:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800a366:	4313      	orrs	r3, r2
 800a368:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 800a36a:	2300      	movs	r3, #0
 800a36c:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 800a370:	2001      	movs	r0, #1
 800a372:	e7d9      	b.n	800a328 <HAL_I2C_IsDeviceReady+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a374:	9700      	str	r7, [sp, #0]
 800a376:	462b      	mov	r3, r5
 800a378:	2200      	movs	r2, #0
 800a37a:	2120      	movs	r1, #32
 800a37c:	4630      	mov	r0, r6
 800a37e:	f7ff fc68 	bl	8009c52 <I2C_WaitOnFlagUntilTimeout>
 800a382:	b970      	cbnz	r0, 800a3a2 <HAL_I2C_IsDeviceReady+0x12a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a384:	6832      	ldr	r2, [r6, #0]
 800a386:	2320      	movs	r3, #32
 800a388:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800a38a:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800a38e:	2300      	movs	r3, #0
 800a390:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 800a394:	e7c8      	b.n	800a328 <HAL_I2C_IsDeviceReady+0xb0>
    return HAL_BUSY;
 800a396:	2002      	movs	r0, #2
 800a398:	e7c6      	b.n	800a328 <HAL_I2C_IsDeviceReady+0xb0>
      return HAL_BUSY;
 800a39a:	2002      	movs	r0, #2
 800a39c:	e7c4      	b.n	800a328 <HAL_I2C_IsDeviceReady+0xb0>
    __HAL_LOCK(hi2c);
 800a39e:	2002      	movs	r0, #2
 800a3a0:	e7c2      	b.n	800a328 <HAL_I2C_IsDeviceReady+0xb0>
          return HAL_ERROR;
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	e7c0      	b.n	800a328 <HAL_I2C_IsDeviceReady+0xb0>
          return HAL_ERROR;
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	e7be      	b.n	800a328 <HAL_I2C_IsDeviceReady+0xb0>
 800a3aa:	bf00      	nop
 800a3ac:	02002800 	.word	0x02002800
 800a3b0:	02002000 	.word	0x02002000

0800a3b4 <HAL_I2C_EV_IRQHandler>:
{
 800a3b4:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a3b6:	6803      	ldr	r3, [r0, #0]
 800a3b8:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a3ba:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800a3bc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a3be:	b103      	cbz	r3, 800a3c2 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 800a3c0:	4798      	blx	r3
}
 800a3c2:	bd08      	pop	{r3, pc}

0800a3c4 <HAL_I2C_SlaveTxCpltCallback>:
}
 800a3c4:	4770      	bx	lr

0800a3c6 <HAL_I2C_SlaveRxCpltCallback>:
}
 800a3c6:	4770      	bx	lr

0800a3c8 <I2C_ITSlaveSeqCplt>:
{
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a3cc:	6803      	ldr	r3, [r0, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a3d6:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800a3da:	d00e      	beq.n	800a3fa <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a3e2:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a3e4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b29      	cmp	r3, #41	@ 0x29
 800a3ec:	d00d      	beq.n	800a40a <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a3ee:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3f6:	d018      	beq.n	800a42a <I2C_ITSlaveSeqCplt+0x62>
}
 800a3f8:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a3fa:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800a3fe:	d0f1      	beq.n	800a3e4 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e7ec      	b.n	800a3e4 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a40a:	2328      	movs	r3, #40	@ 0x28
 800a40c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a410:	2321      	movs	r3, #33	@ 0x21
 800a412:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a414:	2101      	movs	r1, #1
 800a416:	4620      	mov	r0, r4
 800a418:	f7ff fb27 	bl	8009a6a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a41c:	2300      	movs	r3, #0
 800a41e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a422:	4620      	mov	r0, r4
 800a424:	f7ff ffce 	bl	800a3c4 <HAL_I2C_SlaveTxCpltCallback>
 800a428:	e7e6      	b.n	800a3f8 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a42a:	2328      	movs	r3, #40	@ 0x28
 800a42c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a430:	2322      	movs	r3, #34	@ 0x22
 800a432:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a434:	2102      	movs	r1, #2
 800a436:	4620      	mov	r0, r4
 800a438:	f7ff fb17 	bl	8009a6a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a43c:	2300      	movs	r3, #0
 800a43e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a442:	4620      	mov	r0, r4
 800a444:	f7ff ffbf 	bl	800a3c6 <HAL_I2C_SlaveRxCpltCallback>
}
 800a448:	e7d6      	b.n	800a3f8 <I2C_ITSlaveSeqCplt+0x30>

0800a44a <HAL_I2C_AddrCallback>:
}
 800a44a:	4770      	bx	lr

0800a44c <I2C_ITAddrCplt>:
{
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a450:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a454:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a458:	2b28      	cmp	r3, #40	@ 0x28
 800a45a:	d006      	beq.n	800a46a <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a45c:	6803      	ldr	r3, [r0, #0]
 800a45e:	2208      	movs	r2, #8
 800a460:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a462:	2300      	movs	r3, #0
 800a464:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 800a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 800a46a:	6803      	ldr	r3, [r0, #0]
 800a46c:	699e      	ldr	r6, [r3, #24]
 800a46e:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a472:	699a      	ldr	r2, [r3, #24]
 800a474:	0c12      	lsrs	r2, r2, #16
 800a476:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a47a:	689a      	ldr	r2, [r3, #8]
 800a47c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a480:	68df      	ldr	r7, [r3, #12]
 800a482:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a486:	68c1      	ldr	r1, [r0, #12]
 800a488:	2902      	cmp	r1, #2
 800a48a:	d122      	bne.n	800a4d2 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a48c:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800a490:	f015 0f06 	tst.w	r5, #6
 800a494:	d110      	bne.n	800a4b8 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 800a496:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800a498:	3101      	adds	r1, #1
 800a49a:	6481      	str	r1, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a49c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800a49e:	2902      	cmp	r1, #2
 800a4a0:	d1e2      	bne.n	800a468 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	6481      	str	r1, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a4a6:	2008      	movs	r0, #8
 800a4a8:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800a4aa:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f7ff ffca 	bl	800a44a <HAL_I2C_AddrCallback>
 800a4b6:	e7d7      	b.n	800a468 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a4b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a4bc:	f7ff fad5 	bl	8009a6a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a4c6:	463a      	mov	r2, r7
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f7ff ffbd 	bl	800a44a <HAL_I2C_AddrCallback>
 800a4d0:	e7ca      	b.n	800a468 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a4d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a4d6:	f7ff fac8 	bl	8009a6a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a4e0:	462a      	mov	r2, r5
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f7ff ffb0 	bl	800a44a <HAL_I2C_AddrCallback>
 800a4ea:	e7bd      	b.n	800a468 <I2C_ITAddrCplt+0x1c>

0800a4ec <HAL_I2C_ListenCpltCallback>:
}
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <I2C_ITListenCplt>:
{
 800a4f0:	b510      	push	{r4, lr}
 800a4f2:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4f4:	4b17      	ldr	r3, [pc, #92]	@ (800a554 <I2C_ITListenCplt+0x64>)
 800a4f6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	6303      	str	r3, [r0, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a502:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a506:	6343      	str	r3, [r0, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a508:	f011 0f04 	tst.w	r1, #4
 800a50c:	d013      	beq.n	800a536 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a50e:	6803      	ldr	r3, [r0, #0]
 800a510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a512:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a514:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a516:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a518:	3301      	adds	r3, #1
 800a51a:	6243      	str	r3, [r0, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800a51c:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 800a51e:	b153      	cbz	r3, 800a536 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 800a520:	3b01      	subs	r3, #1
 800a522:	8503      	strh	r3, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 800a524:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800a526:	b29b      	uxth	r3, r3
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	8543      	strh	r3, [r0, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a52e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a530:	f043 0304 	orr.w	r3, r3, #4
 800a534:	6443      	str	r3, [r0, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a536:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7ff fa95 	bl	8009a6a <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	2210      	movs	r2, #16
 800a544:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800a546:	2300      	movs	r3, #0
 800a548:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800a54c:	4620      	mov	r0, r4
 800a54e:	f7ff ffcd 	bl	800a4ec <HAL_I2C_ListenCpltCallback>
}
 800a552:	bd10      	pop	{r4, pc}
 800a554:	ffff0000 	.word	0xffff0000

0800a558 <HAL_I2C_AbortCpltCallback>:
}
 800a558:	4770      	bx	lr

0800a55a <I2C_TreatErrorCallback>:
{
 800a55a:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a55c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b60      	cmp	r3, #96	@ 0x60
 800a564:	d006      	beq.n	800a574 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a566:	2300      	movs	r3, #0
 800a568:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a56a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a56e:	f7f8 fe13 	bl	8003198 <HAL_I2C_ErrorCallback>
}
 800a572:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800a574:	2320      	movs	r3, #32
 800a576:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a57e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800a582:	f7ff ffe9 	bl	800a558 <HAL_I2C_AbortCpltCallback>
 800a586:	e7f4      	b.n	800a572 <I2C_TreatErrorCallback+0x18>

0800a588 <I2C_ITError>:
{
 800a588:	b510      	push	{r4, lr}
 800a58a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a58c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a590:	2200      	movs	r2, #0
 800a592:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a596:	4845      	ldr	r0, [pc, #276]	@ (800a6ac <I2C_ITError+0x124>)
 800a598:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800a59a:	8562      	strh	r2, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800a59c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	6462      	str	r2, [r4, #68]	@ 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a5a2:	3b28      	subs	r3, #40	@ 0x28
 800a5a4:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d82d      	bhi.n	800a606 <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a5aa:	2103      	movs	r1, #3
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f7ff fa5c 	bl	8009a6a <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a5b2:	2328      	movs	r3, #40	@ 0x28
 800a5b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a5b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a6b0 <I2C_ITError+0x128>)
 800a5ba:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 800a5bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a5be:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a5c0:	2a00      	cmp	r2, #0
 800a5c2:	d049      	beq.n	800a658 <I2C_ITError+0xd0>
 800a5c4:	2b21      	cmp	r3, #33	@ 0x21
 800a5c6:	bf18      	it	ne
 800a5c8:	2b11      	cmpne	r3, #17
 800a5ca:	d145      	bne.n	800a658 <I2C_ITError+0xd0>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800a5d4:	d003      	beq.n	800a5de <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a5dc:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a5de:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a5e0:	f7fe fe50 	bl	8009284 <HAL_DMA_GetState>
 800a5e4:	2801      	cmp	r0, #1
 800a5e6:	d033      	beq.n	800a650 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a5e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a5ea:	4a32      	ldr	r2, [pc, #200]	@ (800a6b4 <I2C_ITError+0x12c>)
 800a5ec:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a5f4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a5f6:	f7fe f971 	bl	80088dc <HAL_DMA_Abort_IT>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d055      	beq.n	800a6aa <I2C_ITError+0x122>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a5fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a600:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800a602:	4798      	blx	r3
 800a604:	e051      	b.n	800a6aa <I2C_ITError+0x122>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a606:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a60a:	4620      	mov	r0, r4
 800a60c:	f7ff fa2d 	bl	8009a6a <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 800a610:	4620      	mov	r0, r4
 800a612:	f7ff f9fb 	bl	8009a0c <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a616:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b60      	cmp	r3, #96	@ 0x60
 800a61e:	d014      	beq.n	800a64a <I2C_ITError+0xc2>
      hi2c->State         = HAL_I2C_STATE_READY;
 800a620:	2320      	movs	r3, #32
 800a622:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	f012 0f20 	tst.w	r2, #32
 800a62e:	d00c      	beq.n	800a64a <I2C_ITError+0xc2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	f012 0f10 	tst.w	r2, #16
 800a636:	d005      	beq.n	800a644 <I2C_ITError+0xbc>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a638:	2210      	movs	r2, #16
 800a63a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a63c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a63e:	f043 0304 	orr.w	r3, r3, #4
 800a642:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	2220      	movs	r2, #32
 800a648:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a64e:	e7b5      	b.n	800a5bc <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
 800a650:	4620      	mov	r0, r4
 800a652:	f7ff ff82 	bl	800a55a <I2C_TreatErrorCallback>
 800a656:	e028      	b.n	800a6aa <I2C_ITError+0x122>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a658:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a65a:	b31a      	cbz	r2, 800a6a4 <I2C_ITError+0x11c>
 800a65c:	2b22      	cmp	r3, #34	@ 0x22
 800a65e:	bf18      	it	ne
 800a660:	2b12      	cmpne	r3, #18
 800a662:	d11f      	bne.n	800a6a4 <I2C_ITError+0x11c>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800a66c:	d003      	beq.n	800a676 <I2C_ITError+0xee>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a674:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a676:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a678:	f7fe fe04 	bl	8009284 <HAL_DMA_GetState>
 800a67c:	2801      	cmp	r0, #1
 800a67e:	d00d      	beq.n	800a69c <I2C_ITError+0x114>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a680:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a682:	4a0c      	ldr	r2, [pc, #48]	@ (800a6b4 <I2C_ITError+0x12c>)
 800a684:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 800a686:	2300      	movs	r3, #0
 800a688:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a68c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a68e:	f7fe f925 	bl	80088dc <HAL_DMA_Abort_IT>
 800a692:	b150      	cbz	r0, 800a6aa <I2C_ITError+0x122>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a694:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a696:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800a698:	4798      	blx	r3
 800a69a:	e006      	b.n	800a6aa <I2C_ITError+0x122>
      I2C_TreatErrorCallback(hi2c);
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff ff5c 	bl	800a55a <I2C_TreatErrorCallback>
 800a6a2:	e002      	b.n	800a6aa <I2C_ITError+0x122>
    I2C_TreatErrorCallback(hi2c);
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f7ff ff58 	bl	800a55a <I2C_TreatErrorCallback>
}
 800a6aa:	bd10      	pop	{r4, pc}
 800a6ac:	ffff0000 	.word	0xffff0000
 800a6b0:	0800a995 	.word	0x0800a995
 800a6b4:	0800ab49 	.word	0x0800ab49

0800a6b8 <I2C_ITSlaveCplt>:
{
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a6be:	6802      	ldr	r2, [r0, #0]
 800a6c0:	6816      	ldr	r6, [r2, #0]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a6c2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a6c4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a6c8:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6ca:	2120      	movs	r1, #32
 800a6cc:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a6ce:	2b29      	cmp	r3, #41	@ 0x29
 800a6d0:	bf18      	it	ne
 800a6d2:	2b21      	cmpne	r3, #33	@ 0x21
 800a6d4:	d059      	beq.n	800a78a <I2C_ITSlaveCplt+0xd2>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a6d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d8:	bf18      	it	ne
 800a6da:	2b22      	cmpne	r3, #34	@ 0x22
 800a6dc:	d05c      	beq.n	800a798 <I2C_ITSlaveCplt+0xe0>
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a6de:	2b28      	cmp	r3, #40	@ 0x28
 800a6e0:	d061      	beq.n	800a7a6 <I2C_ITSlaveCplt+0xee>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	6853      	ldr	r3, [r2, #4]
 800a6e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6ea:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800a6ec:	6822      	ldr	r2, [r4, #0]
 800a6ee:	6853      	ldr	r3, [r2, #4]
 800a6f0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800a6f4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800a6f8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800a6fc:	f023 0301 	bic.w	r3, r3, #1
 800a700:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 800a702:	4620      	mov	r0, r4
 800a704:	f7ff f982 	bl	8009a0c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a708:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 800a70c:	f000 80a7 	beq.w	800a85e <I2C_ITSlaveCplt+0x1a6>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	6813      	ldr	r3, [r2, #0]
 800a714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a718:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800a71a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d04c      	beq.n	800a7ba <I2C_ITSlaveCplt+0x102>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4999      	ldr	r1, [pc, #612]	@ (800a988 <I2C_ITSlaveCplt+0x2d0>)
 800a724:	4a99      	ldr	r2, [pc, #612]	@ (800a98c <I2C_ITSlaveCplt+0x2d4>)
 800a726:	4293      	cmp	r3, r2
 800a728:	bf18      	it	ne
 800a72a:	428b      	cmpne	r3, r1
 800a72c:	d042      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a72e:	3218      	adds	r2, #24
 800a730:	4293      	cmp	r3, r2
 800a732:	d03f      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a734:	3218      	adds	r2, #24
 800a736:	4293      	cmp	r3, r2
 800a738:	d03c      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a73a:	3218      	adds	r2, #24
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d039      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a740:	3218      	adds	r2, #24
 800a742:	4293      	cmp	r3, r2
 800a744:	d036      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a746:	3218      	adds	r2, #24
 800a748:	4293      	cmp	r3, r2
 800a74a:	d033      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a74c:	3218      	adds	r2, #24
 800a74e:	4293      	cmp	r3, r2
 800a750:	d030      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a752:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800a756:	4293      	cmp	r3, r2
 800a758:	d02c      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a75a:	3218      	adds	r2, #24
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d029      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a760:	3218      	adds	r2, #24
 800a762:	4293      	cmp	r3, r2
 800a764:	d026      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a766:	3218      	adds	r2, #24
 800a768:	4293      	cmp	r3, r2
 800a76a:	d023      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a76c:	3218      	adds	r2, #24
 800a76e:	4293      	cmp	r3, r2
 800a770:	d020      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a772:	3218      	adds	r2, #24
 800a774:	4293      	cmp	r3, r2
 800a776:	d01d      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a778:	3218      	adds	r2, #24
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d01a      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a77e:	3218      	adds	r2, #24
 800a780:	4293      	cmp	r3, r2
 800a782:	d017      	beq.n	800a7b4 <I2C_ITSlaveCplt+0xfc>
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	b29b      	uxth	r3, r3
 800a788:	e016      	b.n	800a7b8 <I2C_ITSlaveCplt+0x100>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a78a:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a78e:	f7ff f96c 	bl	8009a6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a792:	2321      	movs	r3, #33	@ 0x21
 800a794:	6323      	str	r3, [r4, #48]	@ 0x30
 800a796:	e7a4      	b.n	800a6e2 <I2C_ITSlaveCplt+0x2a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a798:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a79c:	f7ff f965 	bl	8009a6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a7a0:	2322      	movs	r3, #34	@ 0x22
 800a7a2:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7a4:	e79d      	b.n	800a6e2 <I2C_ITSlaveCplt+0x2a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a7a6:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a7aa:	f7ff f95e 	bl	8009a6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7b2:	e796      	b.n	800a6e2 <I2C_ITSlaveCplt+0x2a>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a7ba:	f015 0f04 	tst.w	r5, #4
 800a7be:	d011      	beq.n	800a7e4 <I2C_ITSlaveCplt+0x12c>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a7c0:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a7c4:	6823      	ldr	r3, [r4, #0]
 800a7c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a7ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a7cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800a7d2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800a7d4:	b133      	cbz	r3, 800a7e4 <I2C_ITSlaveCplt+0x12c>
      hi2c->XferSize--;
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800a7da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (hi2c->XferCount != 0U)
 800a7e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	b11b      	cbz	r3, 800a7f2 <I2C_ITSlaveCplt+0x13a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a7ec:	f043 0304 	orr.w	r3, r3, #4
 800a7f0:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a7f2:	f015 0f10 	tst.w	r5, #16
 800a7f6:	d014      	beq.n	800a822 <I2C_ITSlaveCplt+0x16a>
 800a7f8:	f016 0f10 	tst.w	r6, #16
 800a7fc:	d011      	beq.n	800a822 <I2C_ITSlaveCplt+0x16a>
    if (hi2c->XferCount == 0U)
 800a7fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a800:	b29b      	uxth	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 8084 	bne.w	800a910 <I2C_ITSlaveCplt+0x258>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a808:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b28      	cmp	r3, #40	@ 0x28
 800a810:	d069      	beq.n	800a8e6 <I2C_ITSlaveCplt+0x22e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a812:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b29      	cmp	r3, #41	@ 0x29
 800a81a:	d06c      	beq.n	800a8f6 <I2C_ITSlaveCplt+0x23e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	2210      	movs	r2, #16
 800a820:	61da      	str	r2, [r3, #28]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a822:	2300      	movs	r3, #0
 800a824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a828:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a82a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f040 8081 	bne.w	800a934 <I2C_ITSlaveCplt+0x27c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a832:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a834:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a838:	f040 808a 	bne.w	800a950 <I2C_ITSlaveCplt+0x298>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a83c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b22      	cmp	r3, #34	@ 0x22
 800a844:	f000 8094 	beq.w	800a970 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a848:	2320      	movs	r3, #32
 800a84a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a84e:	2300      	movs	r3, #0
 800a850:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a852:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a856:	4620      	mov	r0, r4
 800a858:	f7ff fdb4 	bl	800a3c4 <HAL_I2C_SlaveTxCpltCallback>
}
 800a85c:	e087      	b.n	800a96e <I2C_ITSlaveCplt+0x2b6>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a85e:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
 800a862:	d0aa      	beq.n	800a7ba <I2C_ITSlaveCplt+0x102>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a864:	6822      	ldr	r2, [r4, #0]
 800a866:	6813      	ldr	r3, [r2, #0]
 800a868:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a86c:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800a86e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d0a2      	beq.n	800a7ba <I2C_ITSlaveCplt+0x102>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4944      	ldr	r1, [pc, #272]	@ (800a988 <I2C_ITSlaveCplt+0x2d0>)
 800a878:	4a44      	ldr	r2, [pc, #272]	@ (800a98c <I2C_ITSlaveCplt+0x2d4>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	bf18      	it	ne
 800a87e:	428b      	cmpne	r3, r1
 800a880:	d02d      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a882:	3218      	adds	r2, #24
 800a884:	4293      	cmp	r3, r2
 800a886:	d02a      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a888:	3218      	adds	r2, #24
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d027      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a88e:	3218      	adds	r2, #24
 800a890:	4293      	cmp	r3, r2
 800a892:	d024      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a894:	3218      	adds	r2, #24
 800a896:	4293      	cmp	r3, r2
 800a898:	d021      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a89a:	3218      	adds	r2, #24
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d01e      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8a0:	3218      	adds	r2, #24
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d01b      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8a6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d017      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8ae:	3218      	adds	r2, #24
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d014      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8b4:	3218      	adds	r2, #24
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d011      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8ba:	3218      	adds	r2, #24
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d00e      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8c0:	3218      	adds	r2, #24
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00b      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8c6:	3218      	adds	r2, #24
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d008      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8cc:	3218      	adds	r2, #24
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d005      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8d2:	3218      	adds	r2, #24
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d002      	beq.n	800a8de <I2C_ITSlaveCplt+0x226>
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	e001      	b.n	800a8e2 <I2C_ITSlaveCplt+0x22a>
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800a8e4:	e769      	b.n	800a7ba <I2C_ITSlaveCplt+0x102>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a8e6:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 800a8ea:	d192      	bne.n	800a812 <I2C_ITSlaveCplt+0x15a>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7ff fdfe 	bl	800a4f0 <I2C_ITListenCplt>
 800a8f4:	e795      	b.n	800a822 <I2C_ITSlaveCplt+0x16a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a8f6:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 800a8fa:	d08f      	beq.n	800a81c <I2C_ITSlaveCplt+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	2210      	movs	r2, #16
 800a900:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800a902:	4620      	mov	r0, r4
 800a904:	f7ff f882 	bl	8009a0c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800a908:	4620      	mov	r0, r4
 800a90a:	f7ff fd5d 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
 800a90e:	e788      	b.n	800a822 <I2C_ITSlaveCplt+0x16a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	2210      	movs	r2, #16
 800a914:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a916:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a918:	f043 0304 	orr.w	r3, r3, #4
 800a91c:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a91e:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 800a922:	bf18      	it	ne
 800a924:	2f00      	cmpne	r7, #0
 800a926:	f47f af7c 	bne.w	800a822 <I2C_ITSlaveCplt+0x16a>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a92a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a92c:	4620      	mov	r0, r4
 800a92e:	f7ff fe2b 	bl	800a588 <I2C_ITError>
 800a932:	e776      	b.n	800a822 <I2C_ITSlaveCplt+0x16a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a934:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a936:	4620      	mov	r0, r4
 800a938:	f7ff fe26 	bl	800a588 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a93c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b28      	cmp	r3, #40	@ 0x28
 800a944:	d113      	bne.n	800a96e <I2C_ITSlaveCplt+0x2b6>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a946:	4629      	mov	r1, r5
 800a948:	4620      	mov	r0, r4
 800a94a:	f7ff fdd1 	bl	800a4f0 <I2C_ITListenCplt>
 800a94e:	e00e      	b.n	800a96e <I2C_ITSlaveCplt+0x2b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800a950:	4620      	mov	r0, r4
 800a952:	f7ff fd39 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a956:	4b0e      	ldr	r3, [pc, #56]	@ (800a990 <I2C_ITSlaveCplt+0x2d8>)
 800a958:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a95a:	2320      	movs	r3, #32
 800a95c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a960:	2300      	movs	r3, #0
 800a962:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a964:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a968:	4620      	mov	r0, r4
 800a96a:	f7ff fdbf 	bl	800a4ec <HAL_I2C_ListenCpltCallback>
}
 800a96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800a970:	2320      	movs	r3, #32
 800a972:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a976:	2300      	movs	r3, #0
 800a978:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a97a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a97e:	4620      	mov	r0, r4
 800a980:	f7ff fd21 	bl	800a3c6 <HAL_I2C_SlaveRxCpltCallback>
 800a984:	e7f3      	b.n	800a96e <I2C_ITSlaveCplt+0x2b6>
 800a986:	bf00      	nop
 800a988:	40020010 	.word	0x40020010
 800a98c:	40020028 	.word	0x40020028
 800a990:	ffff0000 	.word	0xffff0000

0800a994 <I2C_Slave_ISR_IT>:
{
 800a994:	b510      	push	{r4, lr}
 800a996:	4604      	mov	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800a998:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 800a99a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	f000 809b 	beq.w	800aada <I2C_Slave_ISR_IT+0x146>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a9aa:	f011 0f20 	tst.w	r1, #32
 800a9ae:	d002      	beq.n	800a9b6 <I2C_Slave_ISR_IT+0x22>
 800a9b0:	f012 0f20 	tst.w	r2, #32
 800a9b4:	d116      	bne.n	800a9e4 <I2C_Slave_ISR_IT+0x50>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a9b6:	f011 0f10 	tst.w	r1, #16
 800a9ba:	d03f      	beq.n	800aa3c <I2C_Slave_ISR_IT+0xa8>
 800a9bc:	f012 0f10 	tst.w	r2, #16
 800a9c0:	d03c      	beq.n	800aa3c <I2C_Slave_ISR_IT+0xa8>
    if (hi2c->XferCount == 0U)
 800a9c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	bb43      	cbnz	r3, 800aa1a <I2C_Slave_ISR_IT+0x86>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a9c8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b28      	cmp	r3, #40	@ 0x28
 800a9d0:	d00f      	beq.n	800a9f2 <I2C_Slave_ISR_IT+0x5e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a9d2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b29      	cmp	r3, #41	@ 0x29
 800a9da:	d011      	beq.n	800aa00 <I2C_Slave_ISR_IT+0x6c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	2210      	movs	r2, #16
 800a9e0:	61da      	str	r2, [r3, #28]
 800a9e2:	e002      	b.n	800a9ea <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7ff fe67 	bl	800a6b8 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800a9f0:	bd10      	pop	{r4, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a9f2:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 800a9f6:	d1ec      	bne.n	800a9d2 <I2C_Slave_ISR_IT+0x3e>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f7ff fd79 	bl	800a4f0 <I2C_ITListenCplt>
 800a9fe:	e7f4      	b.n	800a9ea <I2C_Slave_ISR_IT+0x56>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aa00:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 800aa04:	d0ea      	beq.n	800a9dc <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	2210      	movs	r2, #16
 800aa0a:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7fe fffd 	bl	8009a0c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800aa12:	4620      	mov	r0, r4
 800aa14:	f7ff fcd8 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
 800aa18:	e7e7      	b.n	800a9ea <I2C_Slave_ISR_IT+0x56>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	2210      	movs	r2, #16
 800aa1e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa20:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800aa22:	f043 0304 	orr.w	r3, r3, #4
 800aa26:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800aa28:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800aa2c:	bf18      	it	ne
 800aa2e:	2800      	cmpne	r0, #0
 800aa30:	d1db      	bne.n	800a9ea <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800aa32:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800aa34:	4620      	mov	r0, r4
 800aa36:	f7ff fda7 	bl	800a588 <I2C_ITError>
 800aa3a:	e7d6      	b.n	800a9ea <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aa3c:	f011 0f04 	tst.w	r1, #4
 800aa40:	d01f      	beq.n	800aa82 <I2C_Slave_ISR_IT+0xee>
 800aa42:	f012 0f04 	tst.w	r2, #4
 800aa46:	d01c      	beq.n	800aa82 <I2C_Slave_ISR_IT+0xee>
    if (hi2c->XferCount > 0U)
 800aa48:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	b173      	cbz	r3, 800aa6c <I2C_Slave_ISR_IT+0xd8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa54:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800aa56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa58:	3301      	adds	r3, #1
 800aa5a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800aa5c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800aa62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	3b01      	subs	r3, #1
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 800aa6c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1ba      	bne.n	800a9ea <I2C_Slave_ISR_IT+0x56>
 800aa74:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 800aa78:	d0b7      	beq.n	800a9ea <I2C_Slave_ISR_IT+0x56>
      I2C_ITSlaveSeqCplt(hi2c);
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f7ff fca4 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
 800aa80:	e7b3      	b.n	800a9ea <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800aa82:	f011 0f08 	tst.w	r1, #8
 800aa86:	d002      	beq.n	800aa8e <I2C_Slave_ISR_IT+0xfa>
 800aa88:	f012 0f08 	tst.w	r2, #8
 800aa8c:	d118      	bne.n	800aac0 <I2C_Slave_ISR_IT+0x12c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aa8e:	f011 0f02 	tst.w	r1, #2
 800aa92:	d0aa      	beq.n	800a9ea <I2C_Slave_ISR_IT+0x56>
 800aa94:	f012 0f02 	tst.w	r2, #2
 800aa98:	d0a7      	beq.n	800a9ea <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
 800aa9a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	b19b      	cbz	r3, 800aac8 <I2C_Slave_ISR_IT+0x134>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aaa0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	7812      	ldrb	r2, [r2, #0]
 800aaa6:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800aaa8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aaaa:	3301      	adds	r3, #1
 800aaac:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800aaae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800aab8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800aaba:	3b01      	subs	r3, #1
 800aabc:	8523      	strh	r3, [r4, #40]	@ 0x28
 800aabe:	e794      	b.n	800a9ea <I2C_Slave_ISR_IT+0x56>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800aac0:	4620      	mov	r0, r4
 800aac2:	f7ff fcc3 	bl	800a44c <I2C_ITAddrCplt>
 800aac6:	e790      	b.n	800a9ea <I2C_Slave_ISR_IT+0x56>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800aac8:	2800      	cmp	r0, #0
 800aaca:	bf18      	it	ne
 800aacc:	f1b0 7f80 	cmpne.w	r0, #16777216	@ 0x1000000
 800aad0:	d18b      	bne.n	800a9ea <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7ff fc78 	bl	800a3c8 <I2C_ITSlaveSeqCplt>
 800aad8:	e787      	b.n	800a9ea <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
 800aada:	2002      	movs	r0, #2
 800aadc:	e788      	b.n	800a9f0 <I2C_Slave_ISR_IT+0x5c>

0800aade <HAL_I2C_ER_IRQHandler>:
{
 800aade:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800aae0:	6802      	ldr	r2, [r0, #0]
 800aae2:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aae4:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aae6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800aaea:	d009      	beq.n	800ab00 <HAL_I2C_ER_IRQHandler+0x22>
 800aaec:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800aaf0:	d006      	beq.n	800ab00 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800aaf2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800aaf4:	f044 0401 	orr.w	r4, r4, #1
 800aaf8:	6444      	str	r4, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aafa:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800aafe:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ab00:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800ab04:	d00a      	beq.n	800ab1c <HAL_I2C_ER_IRQHandler+0x3e>
 800ab06:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800ab0a:	d007      	beq.n	800ab1c <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ab0c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800ab0e:	f042 0208 	orr.w	r2, r2, #8
 800ab12:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ab14:	6802      	ldr	r2, [r0, #0]
 800ab16:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800ab1a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ab1c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800ab20:	d00a      	beq.n	800ab38 <HAL_I2C_ER_IRQHandler+0x5a>
 800ab22:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800ab26:	d007      	beq.n	800ab38 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ab28:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800ab2a:	f043 0302 	orr.w	r3, r3, #2
 800ab2e:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ab30:	6803      	ldr	r3, [r0, #0]
 800ab32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab36:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800ab38:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ab3a:	f011 0f0b 	tst.w	r1, #11
 800ab3e:	d100      	bne.n	800ab42 <HAL_I2C_ER_IRQHandler+0x64>
}
 800ab40:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800ab42:	f7ff fd21 	bl	800a588 <I2C_ITError>
}
 800ab46:	e7fb      	b.n	800ab40 <HAL_I2C_ER_IRQHandler+0x62>

0800ab48 <I2C_DMAAbort>:
{
 800ab48:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ab4a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hi2c->hdmatx != NULL)
 800ab4c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab4e:	b10b      	cbz	r3, 800ab54 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ab50:	2200      	movs	r2, #0
 800ab52:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 800ab54:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ab56:	b10b      	cbz	r3, 800ab5c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ab58:	2200      	movs	r2, #0
 800ab5a:	651a      	str	r2, [r3, #80]	@ 0x50
  I2C_TreatErrorCallback(hi2c);
 800ab5c:	f7ff fcfd 	bl	800a55a <I2C_TreatErrorCallback>
}
 800ab60:	bd08      	pop	{r3, pc}

0800ab62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab62:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab64:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800ab68:	b2d2      	uxtb	r2, r2
 800ab6a:	2a20      	cmp	r2, #32
 800ab6c:	d123      	bne.n	800abb6 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab6e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800ab72:	2a01      	cmp	r2, #1
 800ab74:	d021      	beq.n	800abba <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800ab76:	2201      	movs	r2, #1
 800ab78:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab7c:	2224      	movs	r2, #36	@ 0x24
 800ab7e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab82:	6800      	ldr	r0, [r0, #0]
 800ab84:	6802      	ldr	r2, [r0, #0]
 800ab86:	f022 0201 	bic.w	r2, r2, #1
 800ab8a:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab8c:	6818      	ldr	r0, [r3, #0]
 800ab8e:	6802      	ldr	r2, [r0, #0]
 800ab90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ab94:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab96:	6818      	ldr	r0, [r3, #0]
 800ab98:	6802      	ldr	r2, [r0, #0]
 800ab9a:	4311      	orrs	r1, r2
 800ab9c:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab9e:	6819      	ldr	r1, [r3, #0]
 800aba0:	680a      	ldr	r2, [r1, #0]
 800aba2:	f042 0201 	orr.w	r2, r2, #1
 800aba6:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aba8:	2220      	movs	r2, #32
 800abaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abae:	2000      	movs	r0, #0
 800abb0:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800abb4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800abb6:	2002      	movs	r0, #2
 800abb8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800abba:	2002      	movs	r0, #2
  }
}
 800abbc:	4770      	bx	lr

0800abbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800abbe:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abc0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800abc4:	b2d2      	uxtb	r2, r2
 800abc6:	2a20      	cmp	r2, #32
 800abc8:	d121      	bne.n	800ac0e <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abca:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800abce:	2a01      	cmp	r2, #1
 800abd0:	d01f      	beq.n	800ac12 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800abd2:	2201      	movs	r2, #1
 800abd4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abd8:	2224      	movs	r2, #36	@ 0x24
 800abda:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abde:	6800      	ldr	r0, [r0, #0]
 800abe0:	6802      	ldr	r2, [r0, #0]
 800abe2:	f022 0201 	bic.w	r2, r2, #1
 800abe6:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800abe8:	6818      	ldr	r0, [r3, #0]
 800abea:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800abec:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800abf0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800abf4:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abf6:	6819      	ldr	r1, [r3, #0]
 800abf8:	680a      	ldr	r2, [r1, #0]
 800abfa:	f042 0201 	orr.w	r2, r2, #1
 800abfe:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac06:	2000      	movs	r0, #0
 800ac08:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800ac0c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800ac0e:	2002      	movs	r0, #2
 800ac10:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800ac12:	2002      	movs	r0, #2
  }
}
 800ac14:	4770      	bx	lr
	...

0800ac18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ac18:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ac1a:	684d      	ldr	r5, [r1, #4]
 800ac1c:	6803      	ldr	r3, [r0, #0]
 800ac1e:	68dc      	ldr	r4, [r3, #12]
 800ac20:	f3c4 440b 	ubfx	r4, r4, #16, #12
 800ac24:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ac26:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 800ac2a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800ac2e:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 800ac32:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 800ac36:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ac3a:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ac3c:	6804      	ldr	r4, [r0, #0]
 800ac3e:	68e6      	ldr	r6, [r4, #12]
 800ac40:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ac44:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ac46:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ac48:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ac4c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ac50:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ac54:	68cd      	ldr	r5, [r1, #12]
 800ac56:	6803      	ldr	r3, [r0, #0]
 800ac58:	68dc      	ldr	r4, [r3, #12]
 800ac5a:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800ac5e:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ac60:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800ac64:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 800ac68:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 800ac6c:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ac70:	688b      	ldr	r3, [r1, #8]
 800ac72:	6804      	ldr	r4, [r0, #0]
 800ac74:	68e6      	ldr	r6, [r4, #12]
 800ac76:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800ac7a:	4473      	add	r3, lr
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800ac82:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800ac86:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ac8a:	6803      	ldr	r3, [r0, #0]
 800ac8c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800ac90:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 800ac94:	f024 0407 	bic.w	r4, r4, #7
 800ac98:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ac9c:	6803      	ldr	r3, [r0, #0]
 800ac9e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800aca2:	690c      	ldr	r4, [r1, #16]
 800aca4:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800aca8:	f891 e031 	ldrb.w	lr, [r1, #49]	@ 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800acac:	f891 6032 	ldrb.w	r6, [r1, #50]	@ 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800acb0:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800acb2:	6803      	ldr	r3, [r0, #0]
 800acb4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800acb8:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 800acbc:	2400      	movs	r4, #0
 800acbe:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800acc2:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 800acc6:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800acca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800acce:	6806      	ldr	r6, [r0, #0]
 800acd0:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 800acd4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800acd8:	f8ce 309c 	str.w	r3, [lr, #156]	@ 0x9c
 800acdc:	f10e 0e84 	add.w	lr, lr, #132	@ 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ace0:	6803      	ldr	r3, [r0, #0]
 800ace2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800ace6:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800acea:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800acee:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800acf2:	6803      	ldr	r3, [r0, #0]
 800acf4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800acf8:	694d      	ldr	r5, [r1, #20]
 800acfa:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800acfe:	6803      	ldr	r3, [r0, #0]
 800ad00:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800ad04:	f8d3 60a0 	ldr.w	r6, [r3, #160]	@ 0xa0
 800ad08:	4d2d      	ldr	r5, [pc, #180]	@ (800adc0 <LTDC_SetConfig+0x1a8>)
 800ad0a:	4035      	ands	r5, r6
 800ad0c:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ad10:	6a0d      	ldr	r5, [r1, #32]
 800ad12:	6803      	ldr	r3, [r0, #0]
 800ad14:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800ad18:	69ce      	ldr	r6, [r1, #28]
 800ad1a:	4335      	orrs	r5, r6
 800ad1c:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ad20:	6803      	ldr	r3, [r0, #0]
 800ad22:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800ad26:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 800ad2a:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ad2e:	6803      	ldr	r3, [r0, #0]
 800ad30:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800ad34:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800ad36:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ad3a:	690b      	ldr	r3, [r1, #16]
 800ad3c:	b183      	cbz	r3, 800ad60 <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	2b06      	cmp	r3, #6
 800ad42:	d805      	bhi.n	800ad50 <LTDC_SetConfig+0x138>
 800ad44:	e8df f003 	tbb	[pc, r3]
 800ad48:	0608063a 	.word	0x0608063a
 800ad4c:	0404      	.short	0x0404
 800ad4e:	0a          	.byte	0x0a
 800ad4f:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ad50:	2501      	movs	r5, #1
 800ad52:	e006      	b.n	800ad62 <LTDC_SetConfig+0x14a>
 800ad54:	2502      	movs	r5, #2
 800ad56:	e004      	b.n	800ad62 <LTDC_SetConfig+0x14a>
 800ad58:	2502      	movs	r5, #2
 800ad5a:	e002      	b.n	800ad62 <LTDC_SetConfig+0x14a>
 800ad5c:	2502      	movs	r5, #2
 800ad5e:	e000      	b.n	800ad62 <LTDC_SetConfig+0x14a>
    tmp = 4U;
 800ad60:	2504      	movs	r5, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ad62:	6803      	ldr	r3, [r0, #0]
 800ad64:	4463      	add	r3, ip
 800ad66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad6a:	f002 22e0 	and.w	r2, r2, #3758153728	@ 0xe000e000
 800ad6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800ad72:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800ad74:	fb05 f403 	mul.w	r4, r5, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ad78:	684b      	ldr	r3, [r1, #4]
 800ad7a:	680a      	ldr	r2, [r1, #0]
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	fb05 f303 	mul.w	r3, r5, r3
 800ad82:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800ad84:	6802      	ldr	r2, [r0, #0]
 800ad86:	4462      	add	r2, ip
 800ad88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad8c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ad90:	6803      	ldr	r3, [r0, #0]
 800ad92:	4463      	add	r3, ip
 800ad94:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800ad98:	4a0a      	ldr	r2, [pc, #40]	@ (800adc4 <LTDC_SetConfig+0x1ac>)
 800ad9a:	4022      	ands	r2, r4
 800ad9c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ada0:	6803      	ldr	r3, [r0, #0]
 800ada2:	4463      	add	r3, ip
 800ada4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800ada6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800adaa:	6803      	ldr	r3, [r0, #0]
 800adac:	4463      	add	r3, ip
 800adae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800adb2:	f042 0201 	orr.w	r2, r2, #1
 800adb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800adba:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800adbc:	2503      	movs	r5, #3
 800adbe:	e7d0      	b.n	800ad62 <LTDC_SetConfig+0x14a>
 800adc0:	fffff8f8 	.word	0xfffff8f8
 800adc4:	fffff800 	.word	0xfffff800

0800adc8 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800adc8:	2800      	cmp	r0, #0
 800adca:	d072      	beq.n	800aeb2 <HAL_LTDC_Init+0xea>
{
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800add0:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d067      	beq.n	800aea8 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800add8:	2302      	movs	r3, #2
 800adda:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800adde:	6822      	ldr	r2, [r4, #0]
 800ade0:	6993      	ldr	r3, [r2, #24]
 800ade2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ade6:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ade8:	6821      	ldr	r1, [r4, #0]
 800adea:	698a      	ldr	r2, [r1, #24]
 800adec:	6863      	ldr	r3, [r4, #4]
 800adee:	68a0      	ldr	r0, [r4, #8]
 800adf0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800adf2:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800adf4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800adf6:	6920      	ldr	r0, [r4, #16]
 800adf8:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800adfa:	4313      	orrs	r3, r2
 800adfc:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800adfe:	6821      	ldr	r1, [r4, #0]
 800ae00:	688a      	ldr	r2, [r1, #8]
 800ae02:	4b2d      	ldr	r3, [pc, #180]	@ (800aeb8 <HAL_LTDC_Init+0xf0>)
 800ae04:	401a      	ands	r2, r3
 800ae06:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	6882      	ldr	r2, [r0, #8]
 800ae0c:	69a1      	ldr	r1, [r4, #24]
 800ae0e:	6965      	ldr	r5, [r4, #20]
 800ae10:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800ae14:	430a      	orrs	r2, r1
 800ae16:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ae18:	6821      	ldr	r1, [r4, #0]
 800ae1a:	68ca      	ldr	r2, [r1, #12]
 800ae1c:	401a      	ands	r2, r3
 800ae1e:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	68c2      	ldr	r2, [r0, #12]
 800ae24:	6a21      	ldr	r1, [r4, #32]
 800ae26:	69e5      	ldr	r5, [r4, #28]
 800ae28:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ae30:	6821      	ldr	r1, [r4, #0]
 800ae32:	690a      	ldr	r2, [r1, #16]
 800ae34:	401a      	ands	r2, r3
 800ae36:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ae38:	6820      	ldr	r0, [r4, #0]
 800ae3a:	6902      	ldr	r2, [r0, #16]
 800ae3c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ae3e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800ae40:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800ae44:	430a      	orrs	r2, r1
 800ae46:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ae48:	6821      	ldr	r1, [r4, #0]
 800ae4a:	694a      	ldr	r2, [r1, #20]
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ae50:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ae52:	6821      	ldr	r1, [r4, #0]
 800ae54:	694b      	ldr	r3, [r1, #20]
 800ae56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ae58:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ae60:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ae64:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800ae68:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ae6a:	6821      	ldr	r1, [r4, #0]
 800ae6c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800ae6e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800ae72:	62ca      	str	r2, [r1, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ae74:	6821      	ldr	r1, [r4, #0]
 800ae76:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800ae78:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ae7c:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800ae80:	4303      	orrs	r3, r0
 800ae82:	4313      	orrs	r3, r2
 800ae84:	62cb      	str	r3, [r1, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ae86:	6822      	ldr	r2, [r4, #0]
 800ae88:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800ae8a:	f043 0306 	orr.w	r3, r3, #6
 800ae8e:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800ae90:	6822      	ldr	r2, [r4, #0]
 800ae92:	6993      	ldr	r3, [r2, #24]
 800ae94:	f043 0301 	orr.w	r3, r3, #1
 800ae98:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800aea0:	2301      	movs	r3, #1
 800aea2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800aea8:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800aeac:	f7fb fd92 	bl	80069d4 <HAL_LTDC_MspInit>
 800aeb0:	e792      	b.n	800add8 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800aeb2:	2001      	movs	r0, #1
}
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	f000f800 	.word	0xf000f800

0800aebc <HAL_LTDC_ErrorCallback>:
}
 800aebc:	4770      	bx	lr

0800aebe <HAL_LTDC_ReloadEventCallback>:
}
 800aebe:	4770      	bx	lr

0800aec0 <HAL_LTDC_IRQHandler>:
{
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800aec4:	6803      	ldr	r3, [r0, #0]
 800aec6:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800aec8:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800aeca:	f015 0f04 	tst.w	r5, #4
 800aece:	d002      	beq.n	800aed6 <HAL_LTDC_IRQHandler+0x16>
 800aed0:	f016 0f04 	tst.w	r6, #4
 800aed4:	d112      	bne.n	800aefc <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800aed6:	f015 0f02 	tst.w	r5, #2
 800aeda:	d002      	beq.n	800aee2 <HAL_LTDC_IRQHandler+0x22>
 800aedc:	f016 0f02 	tst.w	r6, #2
 800aee0:	d121      	bne.n	800af26 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800aee2:	f015 0f01 	tst.w	r5, #1
 800aee6:	d002      	beq.n	800aeee <HAL_LTDC_IRQHandler+0x2e>
 800aee8:	f016 0f01 	tst.w	r6, #1
 800aeec:	d132      	bne.n	800af54 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800aeee:	f015 0f08 	tst.w	r5, #8
 800aef2:	d002      	beq.n	800aefa <HAL_LTDC_IRQHandler+0x3a>
 800aef4:	f016 0f08 	tst.w	r6, #8
 800aef8:	d13d      	bne.n	800af76 <HAL_LTDC_IRQHandler+0xb6>
}
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800aefc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aefe:	f022 0204 	bic.w	r2, r2, #4
 800af02:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800af04:	6803      	ldr	r3, [r0, #0]
 800af06:	2204      	movs	r2, #4
 800af08:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800af0a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800af0e:	f043 0301 	orr.w	r3, r3, #1
 800af12:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af16:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800af1a:	2300      	movs	r3, #0
 800af1c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800af20:	f7ff ffcc 	bl	800aebc <HAL_LTDC_ErrorCallback>
 800af24:	e7d7      	b.n	800aed6 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800af26:	6822      	ldr	r2, [r4, #0]
 800af28:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800af2a:	f023 0302 	bic.w	r3, r3, #2
 800af2e:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	2202      	movs	r2, #2
 800af34:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800af36:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af40:	2304      	movs	r3, #4
 800af42:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800af46:	2300      	movs	r3, #0
 800af48:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800af4c:	4620      	mov	r0, r4
 800af4e:	f7ff ffb5 	bl	800aebc <HAL_LTDC_ErrorCallback>
 800af52:	e7c6      	b.n	800aee2 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800af54:	6822      	ldr	r2, [r4, #0]
 800af56:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800af5e:	6822      	ldr	r2, [r4, #0]
 800af60:	2301      	movs	r3, #1
 800af62:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800af64:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800af68:	2300      	movs	r3, #0
 800af6a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800af6e:	4620      	mov	r0, r4
 800af70:	f007 fac0 	bl	80124f4 <HAL_LTDC_LineEventCallback>
 800af74:	e7bb      	b.n	800aeee <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800af7a:	f023 0308 	bic.w	r3, r3, #8
 800af7e:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	2208      	movs	r2, #8
 800af84:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800af86:	2301      	movs	r3, #1
 800af88:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800af8c:	2300      	movs	r3, #0
 800af8e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800af92:	4620      	mov	r0, r4
 800af94:	f7ff ff93 	bl	800aebe <HAL_LTDC_ReloadEventCallback>
}
 800af98:	e7af      	b.n	800aefa <HAL_LTDC_IRQHandler+0x3a>

0800af9a <HAL_LTDC_ConfigLayer>:
{
 800af9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800af9c:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d02c      	beq.n	800affe <HAL_LTDC_ConfigLayer+0x64>
 800afa4:	4604      	mov	r4, r0
 800afa6:	460d      	mov	r5, r1
 800afa8:	4616      	mov	r6, r2
 800afaa:	2701      	movs	r7, #1
 800afac:	f880 70a0 	strb.w	r7, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800afb0:	2302      	movs	r3, #2
 800afb2:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800afb6:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 800afba:	fb0c 0c02 	mla	ip, ip, r2, r0
 800afbe:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 800afc2:	468e      	mov	lr, r1
 800afc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800afc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800afd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800afd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afdc:	f8de 3000 	ldr.w	r3, [lr]
 800afe0:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800afe4:	4632      	mov	r2, r6
 800afe6:	4629      	mov	r1, r5
 800afe8:	4620      	mov	r0, r4
 800afea:	f7ff fe15 	bl	800ac18 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	625f      	str	r7, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800aff2:	f884 70a1 	strb.w	r7, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800aff6:	2000      	movs	r0, #0
 800aff8:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 800affc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800affe:	2002      	movs	r0, #2
 800b000:	e7fc      	b.n	800affc <HAL_LTDC_ConfigLayer+0x62>
	...

0800b004 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800b004:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 800b008:	2a01      	cmp	r2, #1
 800b00a:	d01a      	beq.n	800b042 <HAL_LTDC_ProgramLineEvent+0x3e>
{
 800b00c:	b410      	push	{r4}
 800b00e:	4603      	mov	r3, r0
  __HAL_LOCK(hltdc);
 800b010:	2001      	movs	r0, #1
 800b012:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b016:	2202      	movs	r2, #2
 800b018:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b01c:	681c      	ldr	r4, [r3, #0]
 800b01e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b020:	f022 0201 	bic.w	r2, r2, #1
 800b024:	6362      	str	r2, [r4, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800b026:	4a08      	ldr	r2, [pc, #32]	@ (800b048 <HAL_LTDC_ProgramLineEvent+0x44>)
 800b028:	6411      	str	r1, [r2, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800b02a:	6819      	ldr	r1, [r3, #0]
 800b02c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800b02e:	4302      	orrs	r2, r0
 800b030:	634a      	str	r2, [r1, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800b032:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b036:	2000      	movs	r0, #0
 800b038:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 800b03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b040:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800b042:	2002      	movs	r0, #2
}
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	50001000 	.word	0x50001000

0800b04c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800b04c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800b04e:	6802      	ldr	r2, [r0, #0]
 800b050:	6813      	ldr	r3, [r2, #0]
 800b052:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800b056:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800b058:	6883      	ldr	r3, [r0, #8]
 800b05a:	b933      	cbnz	r3, 800b06a <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800b05c:	6802      	ldr	r2, [r0, #0]
 800b05e:	6813      	ldr	r3, [r2, #0]
 800b060:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b064:	684c      	ldr	r4, [r1, #4]
 800b066:	4323      	orrs	r3, r4
 800b068:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b06a:	680b      	ldr	r3, [r1, #0]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d04d      	beq.n	800b10c <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800b070:	2b03      	cmp	r3, #3
 800b072:	d055      	beq.n	800b120 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800b074:	6803      	ldr	r3, [r0, #0]
 800b076:	f503 7280 	add.w	r2, r3, #256	@ 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800b07a:	f503 7e84 	add.w	lr, r3, #264	@ 0x108
    ir_reg  = &(hospi->Instance->IR);
 800b07e:	f503 7c88 	add.w	ip, r3, #272	@ 0x110
    abr_reg = &(hospi->Instance->ABR);
 800b082:	f503 7390 	add.w	r3, r3, #288	@ 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800b086:	6ccc      	ldr	r4, [r1, #76]	@ 0x4c
 800b088:	6c8d      	ldr	r5, [r1, #72]	@ 0x48
 800b08a:	432c      	orrs	r4, r5
 800b08c:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800b08e:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800b090:	b15c      	cbz	r4, 800b0aa <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800b092:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800b094:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800b096:	6813      	ldr	r3, [r2, #0]
 800b098:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800b09c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800b09e:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800b0a0:	432c      	orrs	r4, r5
 800b0a2:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 800b0a4:	432c      	orrs	r4, r5
 800b0a6:	4323      	orrs	r3, r4
 800b0a8:	6013      	str	r3, [r2, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800b0aa:	f8de 3000 	ldr.w	r3, [lr]
 800b0ae:	f023 031f 	bic.w	r3, r3, #31
 800b0b2:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 800b0b4:	4323      	orrs	r3, r4
 800b0b6:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b0ba:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b0bc:	b12b      	cbz	r3, 800b0ca <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b0be:	680b      	ldr	r3, [r1, #0]
 800b0c0:	b91b      	cbnz	r3, 800b0ca <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800b0c2:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800b0c4:	6804      	ldr	r4, [r0, #0]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	6423      	str	r3, [r4, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800b0ca:	68cb      	ldr	r3, [r1, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d073      	beq.n	800b1b8 <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b0d0:	69cc      	ldr	r4, [r1, #28]
 800b0d2:	2c00      	cmp	r4, #0
 800b0d4:	d048      	beq.n	800b168 <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b0d6:	6b8d      	ldr	r5, [r1, #56]	@ 0x38
 800b0d8:	b365      	cbz	r5, 800b134 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b0da:	6817      	ldr	r7, [r2, #0]
 800b0dc:	4e48      	ldr	r6, [pc, #288]	@ (800b200 <OSPI_ConfigCmd+0x1b4>)
 800b0de:	403e      	ands	r6, r7
 800b0e0:	694f      	ldr	r7, [r1, #20]
 800b0e2:	433b      	orrs	r3, r7
 800b0e4:	690f      	ldr	r7, [r1, #16]
 800b0e6:	433b      	orrs	r3, r7
 800b0e8:	4323      	orrs	r3, r4
 800b0ea:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800b0ec:	4323      	orrs	r3, r4
 800b0ee:	6a0c      	ldr	r4, [r1, #32]
 800b0f0:	4323      	orrs	r3, r4
 800b0f2:	431d      	orrs	r5, r3
 800b0f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0f6:	431d      	orrs	r5, r3
 800b0f8:	432e      	orrs	r6, r5
 800b0fa:	6016      	str	r6, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b0fc:	688b      	ldr	r3, [r1, #8]
 800b0fe:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800b102:	6803      	ldr	r3, [r0, #0]
 800b104:	698a      	ldr	r2, [r1, #24]
 800b106:	649a      	str	r2, [r3, #72]	@ 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800b108:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 800b10c:	6803      	ldr	r3, [r0, #0]
 800b10e:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800b112:	f503 7ec4 	add.w	lr, r3, #392	@ 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800b116:	f503 7cc8 	add.w	ip, r3, #400	@ 0x190
    abr_reg = &(hospi->Instance->WABR);
 800b11a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b11e:	e7b2      	b.n	800b086 <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 800b120:	6803      	ldr	r3, [r0, #0]
 800b122:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800b126:	f503 7ea4 	add.w	lr, r3, #328	@ 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800b12a:	f503 7ca8 	add.w	ip, r3, #336	@ 0x150
    abr_reg = &(hospi->Instance->WPABR);
 800b12e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b132:	e7a8      	b.n	800b086 <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b134:	6816      	ldr	r6, [r2, #0]
 800b136:	4d33      	ldr	r5, [pc, #204]	@ (800b204 <OSPI_ConfigCmd+0x1b8>)
 800b138:	4035      	ands	r5, r6
 800b13a:	694e      	ldr	r6, [r1, #20]
 800b13c:	431e      	orrs	r6, r3
 800b13e:	690b      	ldr	r3, [r1, #16]
 800b140:	431e      	orrs	r6, r3
 800b142:	4334      	orrs	r4, r6
 800b144:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800b146:	431c      	orrs	r4, r3
 800b148:	6a0b      	ldr	r3, [r1, #32]
 800b14a:	431c      	orrs	r4, r3
 800b14c:	4325      	orrs	r5, r4
 800b14e:	6015      	str	r5, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b150:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800b152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b156:	d1d1      	bne.n	800b0fc <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b158:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b15a:	2b08      	cmp	r3, #8
 800b15c:	d1ce      	bne.n	800b0fc <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b15e:	6813      	ldr	r3, [r2, #0]
 800b160:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b164:	6013      	str	r3, [r2, #0]
 800b166:	e7c9      	b.n	800b0fc <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b168:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
 800b16a:	b184      	cbz	r4, 800b18e <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b16c:	6815      	ldr	r5, [r2, #0]
 800b16e:	4826      	ldr	r0, [pc, #152]	@ (800b208 <OSPI_ConfigCmd+0x1bc>)
 800b170:	4028      	ands	r0, r5
 800b172:	694d      	ldr	r5, [r1, #20]
 800b174:	431d      	orrs	r5, r3
 800b176:	690b      	ldr	r3, [r1, #16]
 800b178:	431d      	orrs	r5, r3
 800b17a:	432c      	orrs	r4, r5
 800b17c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b17e:	431c      	orrs	r4, r3
 800b180:	4320      	orrs	r0, r4
 800b182:	6010      	str	r0, [r2, #0]
      *ir_reg = cmd->Instruction;
 800b184:	688b      	ldr	r3, [r1, #8]
 800b186:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 800b18a:	2000      	movs	r0, #0
 800b18c:	e7bd      	b.n	800b10a <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b18e:	6814      	ldr	r4, [r2, #0]
 800b190:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 800b194:	694d      	ldr	r5, [r1, #20]
 800b196:	432b      	orrs	r3, r5
 800b198:	690d      	ldr	r5, [r1, #16]
 800b19a:	432b      	orrs	r3, r5
 800b19c:	4323      	orrs	r3, r4
 800b19e:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b1a0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800b1a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1a6:	d1ed      	bne.n	800b184 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b1a8:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b1aa:	2b08      	cmp	r3, #8
 800b1ac:	d1ea      	bne.n	800b184 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b1ae:	6813      	ldr	r3, [r2, #0]
 800b1b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	e7e5      	b.n	800b184 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b1b8:	69cb      	ldr	r3, [r1, #28]
 800b1ba:	b1e3      	cbz	r3, 800b1f6 <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b1bc:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
 800b1be:	b184      	cbz	r4, 800b1e2 <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b1c0:	6816      	ldr	r6, [r2, #0]
 800b1c2:	4d12      	ldr	r5, [pc, #72]	@ (800b20c <OSPI_ConfigCmd+0x1c0>)
 800b1c4:	4035      	ands	r5, r6
 800b1c6:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800b1c8:	4333      	orrs	r3, r6
 800b1ca:	6a0e      	ldr	r6, [r1, #32]
 800b1cc:	4333      	orrs	r3, r6
 800b1ce:	431c      	orrs	r4, r3
 800b1d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1d2:	431c      	orrs	r4, r3
 800b1d4:	4325      	orrs	r5, r4
 800b1d6:	6015      	str	r5, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 800b1d8:	6803      	ldr	r3, [r0, #0]
 800b1da:	698a      	ldr	r2, [r1, #24]
 800b1dc:	649a      	str	r2, [r3, #72]	@ 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800b1de:	2000      	movs	r0, #0
 800b1e0:	e793      	b.n	800b10a <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b1e2:	6814      	ldr	r4, [r2, #0]
 800b1e4:	f424 547c 	bic.w	r4, r4, #16128	@ 0x3f00
 800b1e8:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b1ea:	432b      	orrs	r3, r5
 800b1ec:	6a0d      	ldr	r5, [r1, #32]
 800b1ee:	432b      	orrs	r3, r5
 800b1f0:	4323      	orrs	r3, r4
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	e7f0      	b.n	800b1d8 <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	6543      	str	r3, [r0, #84]	@ 0x54
      status = HAL_ERROR;
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	e785      	b.n	800b10a <OSPI_ConfigCmd+0xbe>
 800b1fe:	bf00      	nop
 800b200:	f0ffc0c0 	.word	0xf0ffc0c0
 800b204:	ffffc0c0 	.word	0xffffc0c0
 800b208:	f0ffffc0 	.word	0xf0ffffc0
 800b20c:	f0ffc0ff 	.word	0xf0ffc0ff

0800b210 <OSPIM_GetConfig>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t reg;
  uint32_t value = 0U;
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800b210:	1e43      	subs	r3, r0, #1
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b01      	cmp	r3, #1
 800b216:	d901      	bls.n	800b21c <OSPIM_GetConfig+0xc>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800b218:	2001      	movs	r0, #1
 800b21a:	4770      	bx	lr
  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800b21c:	2900      	cmp	r1, #0
 800b21e:	d065      	beq.n	800b2ec <OSPIM_GetConfig+0xdc>
{
 800b220:	b410      	push	{r4}
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	600b      	str	r3, [r1, #0]
    cfg->DQSPort    = 0U;
 800b226:	604b      	str	r3, [r1, #4]
    cfg->NCSPort    = 0U;
 800b228:	608b      	str	r3, [r1, #8]
    cfg->IOLowPort  = 0U;
 800b22a:	60cb      	str	r3, [r1, #12]
    cfg->IOHighPort = 0U;
 800b22c:	610b      	str	r3, [r1, #16]

    if (instance_nb == 2U)
 800b22e:	2802      	cmp	r0, #2
 800b230:	d002      	beq.n	800b238 <OSPIM_GetConfig+0x28>
  uint32_t value = 0U;
 800b232:	2400      	movs	r4, #0
        value = OCTOSPIM_PCR_NCSSRC;
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b234:	2200      	movs	r2, #0
 800b236:	e013      	b.n	800b260 <OSPIM_GetConfig+0x50>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800b238:	4b2d      	ldr	r3, [pc, #180]	@ (800b2f0 <OSPIM_GetConfig+0xe0>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f013 0f01 	tst.w	r3, #1
 800b240:	d101      	bne.n	800b246 <OSPIM_GetConfig+0x36>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800b242:	4c2c      	ldr	r4, [pc, #176]	@ (800b2f4 <OSPIM_GetConfig+0xe4>)
 800b244:	e7f6      	b.n	800b234 <OSPIM_GetConfig+0x24>
        value = OCTOSPIM_PCR_NCSSRC;
 800b246:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b24a:	e7f3      	b.n	800b234 <OSPIM_GetConfig+0x24>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b24c:	1c50      	adds	r0, r2, #1
 800b24e:	f040 7080 	orr.w	r0, r0, #16777216	@ 0x1000000
 800b252:	60c8      	str	r0, [r1, #12]
 800b254:	e036      	b.n	800b2c4 <OSPIM_GetConfig+0xb4>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b256:	1c53      	adds	r3, r2, #1
 800b258:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b25c:	610b      	str	r3, [r1, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b25e:	3201      	adds	r2, #1
 800b260:	2a01      	cmp	r2, #1
 800b262:	d83f      	bhi.n	800b2e4 <OSPIM_GetConfig+0xd4>
      reg = OCTOSPIM->PCR[index];
 800b264:	0090      	lsls	r0, r2, #2
 800b266:	4b24      	ldr	r3, [pc, #144]	@ (800b2f8 <OSPIM_GetConfig+0xe8>)
 800b268:	581b      	ldr	r3, [r3, r0]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800b26a:	f013 0f01 	tst.w	r3, #1
 800b26e:	d006      	beq.n	800b27e <OSPIM_GetConfig+0x6e>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800b270:	ea84 0003 	eor.w	r0, r4, r3
 800b274:	f010 0f02 	tst.w	r0, #2
 800b278:	d101      	bne.n	800b27e <OSPIM_GetConfig+0x6e>
          cfg->ClkPort = index + 1U;
 800b27a:	1c50      	adds	r0, r2, #1
 800b27c:	6008      	str	r0, [r1, #0]
      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800b27e:	f013 0f10 	tst.w	r3, #16
 800b282:	d006      	beq.n	800b292 <OSPIM_GetConfig+0x82>
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800b284:	ea84 0003 	eor.w	r0, r4, r3
 800b288:	f010 0f20 	tst.w	r0, #32
 800b28c:	d101      	bne.n	800b292 <OSPIM_GetConfig+0x82>
          cfg->DQSPort = index + 1U;
 800b28e:	1c50      	adds	r0, r2, #1
 800b290:	6048      	str	r0, [r1, #4]
      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800b292:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800b296:	d006      	beq.n	800b2a6 <OSPIM_GetConfig+0x96>
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800b298:	ea84 0003 	eor.w	r0, r4, r3
 800b29c:	f410 7f00 	tst.w	r0, #512	@ 0x200
 800b2a0:	d101      	bne.n	800b2a6 <OSPIM_GetConfig+0x96>
          cfg->NCSPort = index + 1U;
 800b2a2:	1c50      	adds	r0, r2, #1
 800b2a4:	6088      	str	r0, [r1, #8]
      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800b2a6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800b2aa:	d00b      	beq.n	800b2c4 <OSPIM_GetConfig+0xb4>
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800b2ac:	ea84 0003 	eor.w	r0, r4, r3
 800b2b0:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 800b2b4:	d106      	bne.n	800b2c4 <OSPIM_GetConfig+0xb4>
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800b2b6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800b2ba:	d1c7      	bne.n	800b24c <OSPIM_GetConfig+0x3c>
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b2bc:	1c50      	adds	r0, r2, #1
 800b2be:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800b2c2:	60c8      	str	r0, [r1, #12]
      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800b2c4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800b2c8:	d0c9      	beq.n	800b25e <OSPIM_GetConfig+0x4e>
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800b2ca:	ea84 0003 	eor.w	r0, r4, r3
 800b2ce:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 800b2d2:	d1c4      	bne.n	800b25e <OSPIM_GetConfig+0x4e>
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800b2d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800b2d8:	d1bd      	bne.n	800b256 <OSPIM_GetConfig+0x46>
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b2da:	1c53      	adds	r3, r2, #1
 800b2dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2e0:	610b      	str	r3, [r1, #16]
 800b2e2:	e7bc      	b.n	800b25e <OSPIM_GetConfig+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 800b2e4:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800b2e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ea:	4770      	bx	lr
    status = HAL_ERROR;
 800b2ec:	2001      	movs	r0, #1
}
 800b2ee:	4770      	bx	lr
 800b2f0:	5200b400 	.word	0x5200b400
 800b2f4:	04040222 	.word	0x04040222
 800b2f8:	5200b404 	.word	0x5200b404

0800b2fc <OSPI_WaitFlagStateUntilTimeout>:
{
 800b2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b300:	4605      	mov	r5, r0
 800b302:	460f      	mov	r7, r1
 800b304:	4616      	mov	r6, r2
 800b306:	4699      	mov	r9, r3
 800b308:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b30c:	682c      	ldr	r4, [r5, #0]
 800b30e:	6a24      	ldr	r4, [r4, #32]
 800b310:	423c      	tst	r4, r7
 800b312:	bf14      	ite	ne
 800b314:	f04f 0c01 	movne.w	ip, #1
 800b318:	f04f 0c00 	moveq.w	ip, #0
 800b31c:	45b4      	cmp	ip, r6
 800b31e:	d014      	beq.n	800b34a <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800b320:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b324:	d0f2      	beq.n	800b30c <OSPI_WaitFlagStateUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b326:	f7fc fb57 	bl	80079d8 <HAL_GetTick>
 800b32a:	eba0 0009 	sub.w	r0, r0, r9
 800b32e:	4540      	cmp	r0, r8
 800b330:	d802      	bhi.n	800b338 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800b332:	f1b8 0f00 	cmp.w	r8, #0
 800b336:	d1e9      	bne.n	800b30c <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800b338:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b33c:	652b      	str	r3, [r5, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800b33e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b340:	f043 0301 	orr.w	r3, r3, #1
 800b344:	656b      	str	r3, [r5, #84]	@ 0x54
        return HAL_ERROR;
 800b346:	2001      	movs	r0, #1
 800b348:	e000      	b.n	800b34c <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 800b34a:	2000      	movs	r0, #0
}
 800b34c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b350 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 800b350:	b180      	cbz	r0, 800b374 <HAL_OSPI_DeInit+0x24>
{
 800b352:	b510      	push	{r4, lr}
 800b354:	4604      	mov	r4, r0
    __HAL_OSPI_DISABLE(hospi);
 800b356:	6802      	ldr	r2, [r0, #0]
 800b358:	6813      	ldr	r3, [r2, #0]
 800b35a:	f023 0301 	bic.w	r3, r3, #1
 800b35e:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b360:	6802      	ldr	r2, [r0, #0]
 800b362:	6893      	ldr	r3, [r2, #8]
 800b364:	f023 0302 	bic.w	r3, r3, #2
 800b368:	6093      	str	r3, [r2, #8]
    HAL_OSPI_MspDeInit(hospi);
 800b36a:	f7fb fe59 	bl	8007020 <HAL_OSPI_MspDeInit>
    hospi->State = HAL_OSPI_STATE_RESET;
 800b36e:	2000      	movs	r0, #0
 800b370:	6520      	str	r0, [r4, #80]	@ 0x50
}
 800b372:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800b374:	2001      	movs	r0, #1
}
 800b376:	4770      	bx	lr

0800b378 <HAL_OSPI_Command>:
{
 800b378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	4604      	mov	r4, r0
 800b380:	4688      	mov	r8, r1
 800b382:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800b384:	f7fc fb28 	bl	80079d8 <HAL_GetTick>
 800b388:	4606      	mov	r6, r0
  state = hospi->State;
 800b38a:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800b38c:	2d02      	cmp	r5, #2
 800b38e:	d009      	beq.n	800b3a4 <HAL_OSPI_Command+0x2c>
 800b390:	2d14      	cmp	r5, #20
 800b392:	d024      	beq.n	800b3de <HAL_OSPI_Command+0x66>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800b394:	2d24      	cmp	r5, #36	@ 0x24
 800b396:	d028      	beq.n	800b3ea <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b398:	2310      	movs	r3, #16
 800b39a:	6563      	str	r3, [r4, #84]	@ 0x54
    status = HAL_ERROR;
 800b39c:	2001      	movs	r0, #1
}
 800b39e:	b002      	add	sp, #8
 800b3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800b3a4:	68e3      	ldr	r3, [r4, #12]
 800b3a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b3aa:	d0f1      	beq.n	800b390 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b3ac:	9700      	str	r7, [sp, #0]
 800b3ae:	4633      	mov	r3, r6
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	2120      	movs	r1, #32
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f7ff ffa1 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d1ef      	bne.n	800b39e <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800b3be:	6560      	str	r0, [r4, #84]	@ 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800b3c0:	4641      	mov	r1, r8
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f7ff fe42 	bl	800b04c <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d1e8      	bne.n	800b39e <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800b3cc:	f8d8 3038 	ldr.w	r3, [r8, #56]	@ 0x38
 800b3d0:	b193      	cbz	r3, 800b3f8 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b3d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b3d6:	b9d3      	cbnz	r3, 800b40e <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800b3d8:	2304      	movs	r3, #4
 800b3da:	6523      	str	r3, [r4, #80]	@ 0x50
 800b3dc:	e7df      	b.n	800b39e <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b3de:	f8d8 3000 	ldr.w	r3, [r8]
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800b3e2:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d8d5      	bhi.n	800b394 <HAL_OSPI_Command+0x1c>
 800b3e8:	e7e0      	b.n	800b3ac <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800b3ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	bf18      	it	ne
 800b3f2:	2b01      	cmpne	r3, #1
 800b3f4:	d1d0      	bne.n	800b398 <HAL_OSPI_Command+0x20>
 800b3f6:	e7d9      	b.n	800b3ac <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b3f8:	9700      	str	r7, [sp, #0]
 800b3fa:	4633      	mov	r3, r6
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	2102      	movs	r1, #2
 800b400:	4620      	mov	r0, r4
 800b402:	f7ff ff7b 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	2202      	movs	r2, #2
 800b40a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b40c:	e7c7      	b.n	800b39e <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d007      	beq.n	800b422 <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b412:	2b02      	cmp	r3, #2
 800b414:	d1c3      	bne.n	800b39e <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800b416:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b418:	2b14      	cmp	r3, #20
 800b41a:	d00b      	beq.n	800b434 <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800b41c:	2324      	movs	r3, #36	@ 0x24
 800b41e:	6523      	str	r3, [r4, #80]	@ 0x50
 800b420:	e7bd      	b.n	800b39e <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800b422:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b424:	2b24      	cmp	r3, #36	@ 0x24
 800b426:	d002      	beq.n	800b42e <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800b428:	2314      	movs	r3, #20
 800b42a:	6523      	str	r3, [r4, #80]	@ 0x50
 800b42c:	e7b7      	b.n	800b39e <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800b42e:	2304      	movs	r3, #4
 800b430:	6523      	str	r3, [r4, #80]	@ 0x50
 800b432:	e7b4      	b.n	800b39e <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800b434:	2304      	movs	r3, #4
 800b436:	6523      	str	r3, [r4, #80]	@ 0x50
 800b438:	e7b1      	b.n	800b39e <HAL_OSPI_Command+0x26>

0800b43a <HAL_OSPI_Transmit>:
{
 800b43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	4604      	mov	r4, r0
 800b442:	4688      	mov	r8, r1
 800b444:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800b446:	f7fc fac7 	bl	80079d8 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b44a:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 800b44c:	f1b8 0f00 	cmp.w	r8, #0
 800b450:	d00a      	beq.n	800b468 <HAL_OSPI_Transmit+0x2e>
 800b452:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b454:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b456:	2b04      	cmp	r3, #4
 800b458:	d00a      	beq.n	800b470 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b45a:	2310      	movs	r3, #16
 800b45c:	6563      	str	r3, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
}
 800b460:	4618      	mov	r0, r3
 800b462:	b002      	add	sp, #8
 800b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b468:	2308      	movs	r3, #8
 800b46a:	6563      	str	r3, [r4, #84]	@ 0x54
    status = HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e7f7      	b.n	800b460 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800b470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b472:	3301      	adds	r3, #1
 800b474:	64a3      	str	r3, [r4, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800b476:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b478:	6463      	str	r3, [r4, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800b47a:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800b484:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800b486:	9600      	str	r6, [sp, #0]
 800b488:	462b      	mov	r3, r5
 800b48a:	2201      	movs	r2, #1
 800b48c:	2104      	movs	r1, #4
 800b48e:	4620      	mov	r0, r4
 800b490:	f7ff ff34 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b494:	4603      	mov	r3, r0
 800b496:	b960      	cbnz	r0, 800b4b2 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800b498:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b49a:	7812      	ldrb	r2, [r2, #0]
 800b49c:	f887 2050 	strb.w	r2, [r7, #80]	@ 0x50
        hospi->pBuffPtr++;
 800b4a0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800b4a2:	3101      	adds	r1, #1
 800b4a4:	6421      	str	r1, [r4, #64]	@ 0x40
        hospi->XferCount--;
 800b4a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b4a8:	3901      	subs	r1, #1
 800b4aa:	64a1      	str	r1, [r4, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 800b4ac:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d1e9      	bne.n	800b486 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1d4      	bne.n	800b460 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b4b6:	9600      	str	r6, [sp, #0]
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	2102      	movs	r1, #2
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f7ff ff1c 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d1ca      	bne.n	800b460 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b4ca:	6821      	ldr	r1, [r4, #0]
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	624a      	str	r2, [r1, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800b4d0:	6522      	str	r2, [r4, #80]	@ 0x50
 800b4d2:	e7c5      	b.n	800b460 <HAL_OSPI_Transmit+0x26>

0800b4d4 <HAL_OSPI_Receive>:
{
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	4604      	mov	r4, r0
 800b4dc:	4688      	mov	r8, r1
 800b4de:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800b4e0:	f7fc fa7a 	bl	80079d8 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b4e4:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 800b4e6:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800b4e8:	f8d5 1110 	ldr.w	r1, [r5, #272]	@ 0x110
  if (pData == NULL)
 800b4ec:	f1b8 0f00 	cmp.w	r8, #0
 800b4f0:	d00a      	beq.n	800b508 <HAL_OSPI_Receive+0x34>
 800b4f2:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b4f4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d00a      	beq.n	800b510 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b4fa:	2310      	movs	r3, #16
 800b4fc:	6563      	str	r3, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
}
 800b500:	4618      	mov	r0, r3
 800b502:	b002      	add	sp, #8
 800b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b508:	2308      	movs	r3, #8
 800b50a:	6563      	str	r3, [r4, #84]	@ 0x54
    status = HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e7f7      	b.n	800b500 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800b510:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800b512:	3301      	adds	r3, #1
 800b514:	64a3      	str	r3, [r4, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800b516:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b518:	6463      	str	r3, [r4, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800b51a:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b51e:	682b      	ldr	r3, [r5, #0]
 800b520:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800b524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b528:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b52a:	68e3      	ldr	r3, [r4, #12]
 800b52c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b530:	d007      	beq.n	800b542 <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	f8d3 0100 	ldr.w	r0, [r3, #256]	@ 0x100
 800b538:	f410 6fe0 	tst.w	r0, #1792	@ 0x700
 800b53c:	d02a      	beq.n	800b594 <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b53e:	649a      	str	r2, [r3, #72]	@ 0x48
 800b540:	e001      	b.n	800b546 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	649a      	str	r2, [r3, #72]	@ 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800b546:	9700      	str	r7, [sp, #0]
 800b548:	4633      	mov	r3, r6
 800b54a:	2201      	movs	r2, #1
 800b54c:	2106      	movs	r1, #6
 800b54e:	4620      	mov	r0, r4
 800b550:	f7ff fed4 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b554:	4603      	mov	r3, r0
 800b556:	b960      	cbnz	r0, 800b572 <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b558:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b55a:	f895 1050 	ldrb.w	r1, [r5, #80]	@ 0x50
 800b55e:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800b560:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800b562:	3101      	adds	r1, #1
 800b564:	6421      	str	r1, [r4, #64]	@ 0x40
        hospi->XferCount--;
 800b566:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b568:	3901      	subs	r1, #1
 800b56a:	64a1      	str	r1, [r4, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 800b56c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b56e:	2a00      	cmp	r2, #0
 800b570:	d1e9      	bne.n	800b546 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1c4      	bne.n	800b500 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b576:	9700      	str	r7, [sp, #0]
 800b578:	4633      	mov	r3, r6
 800b57a:	2201      	movs	r2, #1
 800b57c:	2102      	movs	r1, #2
 800b57e:	4620      	mov	r0, r4
 800b580:	f7ff febc 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b584:	4603      	mov	r3, r0
 800b586:	2800      	cmp	r0, #0
 800b588:	d1ba      	bne.n	800b500 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b58a:	6821      	ldr	r1, [r4, #0]
 800b58c:	2202      	movs	r2, #2
 800b58e:	624a      	str	r2, [r1, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800b590:	6522      	str	r2, [r4, #80]	@ 0x50
 800b592:	e7b5      	b.n	800b500 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b594:	f8c3 1110 	str.w	r1, [r3, #272]	@ 0x110
 800b598:	e7d5      	b.n	800b546 <HAL_OSPI_Receive+0x72>

0800b59a <HAL_OSPI_AutoPolling>:
{
 800b59a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800b5a6:	f7fc fa17 	bl	80079d8 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800b5aa:	6821      	ldr	r1, [r4, #0]
 800b5ac:	6c8f      	ldr	r7, [r1, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800b5ae:	f8d1 6110 	ldr.w	r6, [r1, #272]	@ 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800b5b2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800b5b4:	2904      	cmp	r1, #4
 800b5b6:	d005      	beq.n	800b5c4 <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b5b8:	2310      	movs	r3, #16
 800b5ba:	6563      	str	r3, [r4, #84]	@ 0x54
    status = HAL_ERROR;
 800b5bc:	2001      	movs	r0, #1
}
 800b5be:	b003      	add	sp, #12
 800b5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c4:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800b5c6:	68eb      	ldr	r3, [r5, #12]
 800b5c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5cc:	d1f4      	bne.n	800b5b8 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b5ce:	f8cd 9000 	str.w	r9, [sp]
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2120      	movs	r1, #32
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7ff fe8f 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d1ed      	bne.n	800b5be <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	682a      	ldr	r2, [r5, #0]
 800b5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	686a      	ldr	r2, [r5, #4]
 800b5ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	692a      	ldr	r2, [r5, #16]
 800b5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800b5fa:	6821      	ldr	r1, [r4, #0]
 800b5fc:	680b      	ldr	r3, [r1, #0]
 800b5fe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
 800b602:	68aa      	ldr	r2, [r5, #8]
 800b604:	68e8      	ldr	r0, [r5, #12]
 800b606:	4302      	orrs	r2, r0
 800b608:	4313      	orrs	r3, r2
 800b60a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b60e:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b610:	68e3      	ldr	r3, [r4, #12]
 800b612:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b616:	d007      	beq.n	800b628 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800b61e:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 800b622:	d013      	beq.n	800b64c <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b624:	649f      	str	r7, [r3, #72]	@ 0x48
 800b626:	e001      	b.n	800b62c <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	649f      	str	r7, [r3, #72]	@ 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800b62c:	f8cd 9000 	str.w	r9, [sp]
 800b630:	4643      	mov	r3, r8
 800b632:	2201      	movs	r2, #1
 800b634:	2108      	movs	r1, #8
 800b636:	4620      	mov	r0, r4
 800b638:	f7ff fe60 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d1be      	bne.n	800b5be <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	2208      	movs	r2, #8
 800b644:	625a      	str	r2, [r3, #36]	@ 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800b646:	2302      	movs	r3, #2
 800b648:	6523      	str	r3, [r4, #80]	@ 0x50
 800b64a:	e7b8      	b.n	800b5be <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b64c:	f8c3 6110 	str.w	r6, [r3, #272]	@ 0x110
 800b650:	e7ec      	b.n	800b62c <HAL_OSPI_AutoPolling+0x92>
	...

0800b654 <HAL_OSPI_MemoryMapped>:
{
 800b654:	b530      	push	{r4, r5, lr}
 800b656:	b083      	sub	sp, #12
 800b658:	4604      	mov	r4, r0
 800b65a:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800b65c:	f7fc f9bc 	bl	80079d8 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b660:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b662:	2b04      	cmp	r3, #4
 800b664:	d004      	beq.n	800b670 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b666:	2310      	movs	r3, #16
 800b668:	6563      	str	r3, [r4, #84]	@ 0x54
    status = HAL_ERROR;
 800b66a:	2001      	movs	r0, #1
}
 800b66c:	b003      	add	sp, #12
 800b66e:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b670:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	4603      	mov	r3, r0
 800b676:	2200      	movs	r2, #0
 800b678:	2120      	movs	r1, #32
 800b67a:	4620      	mov	r0, r4
 800b67c:	f7ff fe3e 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b680:	2800      	cmp	r0, #0
 800b682:	d1f3      	bne.n	800b66c <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800b684:	2388      	movs	r3, #136	@ 0x88
 800b686:	6523      	str	r3, [r4, #80]	@ 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	2b08      	cmp	r3, #8
 800b68c:	d009      	beq.n	800b6a2 <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800b68e:	6822      	ldr	r2, [r4, #0]
 800b690:	6811      	ldr	r1, [r2, #0]
 800b692:	4b0a      	ldr	r3, [pc, #40]	@ (800b6bc <HAL_OSPI_MemoryMapped+0x68>)
 800b694:	400b      	ands	r3, r1
 800b696:	6829      	ldr	r1, [r5, #0]
 800b698:	430b      	orrs	r3, r1
 800b69a:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	e7e4      	b.n	800b66c <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	686a      	ldr	r2, [r5, #4]
 800b6a6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	2210      	movs	r2, #16
 800b6ae:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800b6b0:	6822      	ldr	r2, [r4, #0]
 800b6b2:	6813      	ldr	r3, [r2, #0]
 800b6b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	e7e8      	b.n	800b68e <HAL_OSPI_MemoryMapped+0x3a>
 800b6bc:	cffffff7 	.word	0xcffffff7

0800b6c0 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 800b6c0:	6581      	str	r1, [r0, #88]	@ 0x58
}
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	4770      	bx	lr
	...

0800b6c8 <HAL_OSPI_Init>:
{
 800b6c8:	b530      	push	{r4, r5, lr}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b6ce:	f7fc f983 	bl	80079d8 <HAL_GetTick>
  if (hospi == NULL)
 800b6d2:	2c00      	cmp	r4, #0
 800b6d4:	d077      	beq.n	800b7c6 <HAL_OSPI_Init+0xfe>
 800b6d6:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800b6dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b6de:	b113      	cbz	r3, 800b6e6 <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 800b6e0:	2000      	movs	r0, #0
}
 800b6e2:	b003      	add	sp, #12
 800b6e4:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f7fb fbf4 	bl	8006ed4 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800b6ec:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f7ff ffe5 	bl	800b6c0 <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800b6f6:	6820      	ldr	r0, [r4, #0]
 800b6f8:	6882      	ldr	r2, [r0, #8]
 800b6fa:	4b34      	ldr	r3, [pc, #208]	@ (800b7cc <HAL_OSPI_Init+0x104>)
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	68e2      	ldr	r2, [r4, #12]
 800b700:	6921      	ldr	r1, [r4, #16]
 800b702:	3901      	subs	r1, #1
 800b704:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b708:	6961      	ldr	r1, [r4, #20]
 800b70a:	3901      	subs	r1, #1
 800b70c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b712:	430a      	orrs	r2, r1
 800b714:	69e1      	ldr	r1, [r4, #28]
 800b716:	430a      	orrs	r2, r1
 800b718:	4313      	orrs	r3, r2
 800b71a:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	68d3      	ldr	r3, [r2, #12]
 800b720:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b724:	6a21      	ldr	r1, [r4, #32]
 800b726:	430b      	orrs	r3, r1
 800b728:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b72a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800b72c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b72e:	6822      	ldr	r2, [r4, #0]
 800b730:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b734:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b73a:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800b73c:	6821      	ldr	r1, [r4, #0]
 800b73e:	680b      	ldr	r3, [r1, #0]
 800b740:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800b744:	6862      	ldr	r2, [r4, #4]
 800b746:	3a01      	subs	r2, #1
 800b748:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b74c:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b74e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	462b      	mov	r3, r5
 800b754:	2200      	movs	r2, #0
 800b756:	2120      	movs	r1, #32
 800b758:	4620      	mov	r0, r4
 800b75a:	f7ff fdcf 	bl	800b2fc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b75e:	2800      	cmp	r0, #0
 800b760:	d1bf      	bne.n	800b6e2 <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800b762:	6821      	ldr	r1, [r4, #0]
 800b764:	68cb      	ldr	r3, [r1, #12]
 800b766:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b76a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b76c:	3a01      	subs	r2, #1
 800b76e:	4313      	orrs	r3, r2
 800b770:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	6813      	ldr	r3, [r2, #0]
 800b776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b77a:	68a1      	ldr	r1, [r4, #8]
 800b77c:	430b      	orrs	r3, r1
 800b77e:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800b780:	6821      	ldr	r1, [r4, #0]
 800b782:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
 800b786:	f023 43a0 	bic.w	r3, r3, #1342177280	@ 0x50000000
 800b78a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b78c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800b78e:	432a      	orrs	r2, r5
 800b790:	4313      	orrs	r3, r2
 800b792:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
        __HAL_OSPI_ENABLE(hospi);
 800b796:	6822      	ldr	r2, [r4, #0]
 800b798:	6813      	ldr	r3, [r2, #0]
 800b79a:	f043 0301 	orr.w	r3, r3, #1
 800b79e:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800b7a0:	69a3      	ldr	r3, [r4, #24]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d006      	beq.n	800b7b4 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b7a6:	68e3      	ldr	r3, [r4, #12]
 800b7a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7ac:	d008      	beq.n	800b7c0 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	6523      	str	r3, [r4, #80]	@ 0x50
 800b7b2:	e796      	b.n	800b6e2 <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b7b4:	6822      	ldr	r2, [r4, #0]
 800b7b6:	6893      	ldr	r3, [r2, #8]
 800b7b8:	f043 0302 	orr.w	r3, r3, #2
 800b7bc:	6093      	str	r3, [r2, #8]
 800b7be:	e7f2      	b.n	800b7a6 <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	6523      	str	r3, [r4, #80]	@ 0x50
 800b7c4:	e78d      	b.n	800b6e2 <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 800b7c6:	2001      	movs	r0, #1
 800b7c8:	e78b      	b.n	800b6e2 <HAL_OSPI_Init+0x1a>
 800b7ca:	bf00      	nop
 800b7cc:	f8e0f8f4 	.word	0xf8e0f8f4

0800b7d0 <HAL_OSPI_GetState>:
  return hospi->State;
 800b7d0:	6d00      	ldr	r0, [r0, #80]	@ 0x50
}
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_OSPIM_Config>:
{
 800b7d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	b08d      	sub	sp, #52	@ 0x34
 800b7da:	4681      	mov	r9, r0
 800b7dc:	460d      	mov	r5, r1
  if (hospi->Instance == OCTOSPI1)
 800b7de:	6802      	ldr	r2, [r0, #0]
 800b7e0:	4b9a      	ldr	r3, [pc, #616]	@ (800ba4c <HAL_OSPIM_Config+0x278>)
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d005      	beq.n	800b7f2 <HAL_OSPIM_Config+0x1e>
    other_instance = 0U;
 800b7e6:	f04f 0800 	mov.w	r8, #0
    instance = 1U;
 800b7ea:	2601      	movs	r6, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800b7ec:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b7ee:	461f      	mov	r7, r3
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800b7f0:	e004      	b.n	800b7fc <HAL_OSPIM_Config+0x28>
    other_instance = 1U;
 800b7f2:	f04f 0801 	mov.w	r8, #1
    instance = 0U;
 800b7f6:	2600      	movs	r6, #0
 800b7f8:	e7f8      	b.n	800b7ec <HAL_OSPIM_Config+0x18>
      status = HAL_ERROR;
 800b7fa:	4623      	mov	r3, r4
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d80f      	bhi.n	800b820 <HAL_OSPIM_Config+0x4c>
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800b800:	1c5c      	adds	r4, r3, #1
 800b802:	b2e4      	uxtb	r4, r4
 800b804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b808:	eb0d 01c3 	add.w	r1, sp, r3, lsl #3
 800b80c:	4620      	mov	r0, r4
 800b80e:	f7ff fcff 	bl	800b210 <OSPIM_GetConfig>
 800b812:	2800      	cmp	r0, #0
 800b814:	d0f1      	beq.n	800b7fa <HAL_OSPIM_Config+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b816:	2308      	movs	r3, #8
 800b818:	f8c9 3054 	str.w	r3, [r9, #84]	@ 0x54
      status = HAL_ERROR;
 800b81c:	2701      	movs	r7, #1
 800b81e:	e7ec      	b.n	800b7fa <HAL_OSPIM_Config+0x26>
  if (status == HAL_OK)
 800b820:	2f00      	cmp	r7, #0
 800b822:	f040 810c 	bne.w	800ba3e <HAL_OSPIM_Config+0x26a>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800b826:	4b89      	ldr	r3, [pc, #548]	@ (800ba4c <HAL_OSPIM_Config+0x278>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f013 0f01 	tst.w	r3, #1
 800b82e:	f000 810a 	beq.w	800ba46 <HAL_OSPIM_Config+0x272>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800b832:	4a86      	ldr	r2, [pc, #536]	@ (800ba4c <HAL_OSPIM_Config+0x278>)
 800b834:	6813      	ldr	r3, [r2, #0]
 800b836:	f023 0301 	bic.w	r3, r3, #1
 800b83a:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800b83c:	2101      	movs	r1, #1
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800b83e:	4b84      	ldr	r3, [pc, #528]	@ (800ba50 <HAL_OSPIM_Config+0x27c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f013 0f01 	tst.w	r3, #1
 800b846:	d007      	beq.n	800b858 <HAL_OSPIM_Config+0x84>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800b848:	4a81      	ldr	r2, [pc, #516]	@ (800ba50 <HAL_OSPIM_Config+0x27c>)
 800b84a:	6813      	ldr	r3, [r2, #0]
 800b84c:	f023 0301 	bic.w	r3, r3, #1
 800b850:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800b852:	f041 0102 	orr.w	r1, r1, #2
 800b856:	b2c9      	uxtb	r1, r1
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800b858:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800b85c:	aa0c      	add	r2, sp, #48	@ 0x30
 800b85e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b862:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800b866:	3b01      	subs	r3, #1
 800b868:	487a      	ldr	r0, [pc, #488]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b86a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b874:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800b876:	6803      	ldr	r3, [r0, #0]
 800b878:	f013 0f01 	tst.w	r3, #1
 800b87c:	f000 812e 	beq.w	800badc <HAL_OSPIM_Config+0x308>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800b880:	6803      	ldr	r3, [r0, #0]
 800b882:	f023 0301 	bic.w	r3, r3, #1
 800b886:	6003      	str	r3, [r0, #0]
      if (other_instance == 1U)
 800b888:	f1b8 0f00 	cmp.w	r8, #0
 800b88c:	f040 80e4 	bne.w	800ba58 <HAL_OSPIM_Config+0x284>
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800b890:	f8d5 e000 	ldr.w	lr, [r5]
 800b894:	4643      	mov	r3, r8
 800b896:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800b89a:	a80c      	add	r0, sp, #48	@ 0x30
 800b89c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800b8a0:	f852 0c30 	ldr.w	r0, [r2, #-48]
 800b8a4:	4586      	cmp	lr, r0
 800b8a6:	d018      	beq.n	800b8da <HAL_OSPIM_Config+0x106>
 800b8a8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 800b8ac:	aa0c      	add	r2, sp, #48	@ 0x30
 800b8ae:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 800b8b2:	f858 2c2c 	ldr.w	r2, [r8, #-44]
 800b8b6:	686c      	ldr	r4, [r5, #4]
 800b8b8:	4294      	cmp	r4, r2
 800b8ba:	d00e      	beq.n	800b8da <HAL_OSPIM_Config+0x106>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800b8bc:	f858 2c28 	ldr.w	r2, [r8, #-40]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800b8c0:	68ac      	ldr	r4, [r5, #8]
 800b8c2:	4294      	cmp	r4, r2
 800b8c4:	d009      	beq.n	800b8da <HAL_OSPIM_Config+0x106>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800b8c6:	f858 2c24 	ldr.w	r2, [r8, #-36]
 800b8ca:	68ec      	ldr	r4, [r5, #12]
 800b8cc:	4294      	cmp	r4, r2
 800b8ce:	d004      	beq.n	800b8da <HAL_OSPIM_Config+0x106>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800b8d0:	f858 2c20 	ldr.w	r2, [r8, #-32]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800b8d4:	692c      	ldr	r4, [r5, #16]
 800b8d6:	4294      	cmp	r4, r2
 800b8d8:	d148      	bne.n	800b96c <HAL_OSPIM_Config+0x198>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800b8da:	4586      	cmp	lr, r0
 800b8dc:	f000 8147 	beq.w	800bb6e <HAL_OSPIM_Config+0x39a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800b8e0:	3801      	subs	r0, #1
 800b8e2:	0080      	lsls	r0, r0, #2
 800b8e4:	4a5b      	ldr	r2, [pc, #364]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b8e6:	4402      	add	r2, r0
 800b8e8:	6850      	ldr	r0, [r2, #4]
 800b8ea:	f020 0001 	bic.w	r0, r0, #1
 800b8ee:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800b8f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b8f4:	a80c      	add	r0, sp, #48	@ 0x30
 800b8f6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800b8fa:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 800b8fe:	b13a      	cbz	r2, 800b910 <HAL_OSPIM_Config+0x13c>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800b900:	3a01      	subs	r2, #1
 800b902:	0092      	lsls	r2, r2, #2
 800b904:	4853      	ldr	r0, [pc, #332]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b906:	4410      	add	r0, r2
 800b908:	6842      	ldr	r2, [r0, #4]
 800b90a:	f022 0210 	bic.w	r2, r2, #16
 800b90e:	6042      	str	r2, [r0, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800b910:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800b914:	aa0c      	add	r2, sp, #48	@ 0x30
 800b916:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800b91a:	f850 2c28 	ldr.w	r2, [r0, #-40]
 800b91e:	3a01      	subs	r2, #1
 800b920:	0092      	lsls	r2, r2, #2
 800b922:	4c4c      	ldr	r4, [pc, #304]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b924:	4414      	add	r4, r2
 800b926:	6862      	ldr	r2, [r4, #4]
 800b928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b92c:	6062      	str	r2, [r4, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800b92e:	f850 2c24 	ldr.w	r2, [r0, #-36]
 800b932:	b14a      	cbz	r2, 800b948 <HAL_OSPIM_Config+0x174>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800b934:	3a01      	subs	r2, #1
 800b936:	f002 0201 	and.w	r2, r2, #1
 800b93a:	0092      	lsls	r2, r2, #2
 800b93c:	4845      	ldr	r0, [pc, #276]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b93e:	4410      	add	r0, r2
 800b940:	6842      	ldr	r2, [r0, #4]
 800b942:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b946:	6042      	str	r2, [r0, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b948:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b94c:	aa0c      	add	r2, sp, #48	@ 0x30
 800b94e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b952:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b956:	b14b      	cbz	r3, 800b96c <HAL_OSPIM_Config+0x198>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800b958:	3b01      	subs	r3, #1
 800b95a:	f003 0301 	and.w	r3, r3, #1
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4a3c      	ldr	r2, [pc, #240]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b962:	441a      	add	r2, r3
 800b964:	6853      	ldr	r3, [r2, #4]
 800b966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b96a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800b96c:	68aa      	ldr	r2, [r5, #8]
 800b96e:	3a01      	subs	r2, #1
 800b970:	4838      	ldr	r0, [pc, #224]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b972:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b976:	6853      	ldr	r3, [r2, #4]
 800b978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b97c:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800b980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b984:	6053      	str	r3, [r2, #4]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800b986:	696b      	ldr	r3, [r5, #20]
 800b988:	3b01      	subs	r3, #1
 800b98a:	6802      	ldr	r2, [r0, #0]
 800b98c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800b990:	4293      	cmp	r3, r2
 800b992:	d905      	bls.n	800b9a0 <HAL_OSPIM_Config+0x1cc>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800b994:	6802      	ldr	r2, [r0, #0]
 800b996:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 800b99a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800b99e:	6003      	str	r3, [r0, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800b9a0:	4b2c      	ldr	r3, [pc, #176]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f013 0f01 	tst.w	r3, #1
 800b9a8:	f000 8127 	beq.w	800bbfa <HAL_OSPIM_Config+0x426>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4a28      	ldr	r2, [pc, #160]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b9b4:	441a      	add	r2, r3
 800b9b6:	6853      	ldr	r3, [r2, #4]
 800b9b8:	f023 0303 	bic.w	r3, r3, #3
 800b9bc:	f043 0301 	orr.w	r3, r3, #1
 800b9c0:	6053      	str	r3, [r2, #4]
      if (cfg->DQSPort != 0U)
 800b9c2:	686b      	ldr	r3, [r5, #4]
 800b9c4:	b14b      	cbz	r3, 800b9da <HAL_OSPIM_Config+0x206>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4a22      	ldr	r2, [pc, #136]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b9cc:	441a      	add	r2, r3
 800b9ce:	6853      	ldr	r3, [r2, #4]
 800b9d0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b9d4:	f043 0310 	orr.w	r3, r3, #16
 800b9d8:	6053      	str	r3, [r2, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b9da:	68eb      	ldr	r3, [r5, #12]
 800b9dc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800b9e0:	f000 80eb 	beq.w	800bbba <HAL_OSPIM_Config+0x3e6>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4a19      	ldr	r2, [pc, #100]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800b9ee:	441a      	add	r2, r3
 800b9f0:	6853      	ldr	r3, [r2, #4]
 800b9f2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b9f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9fa:	6053      	str	r3, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b9fc:	692b      	ldr	r3, [r5, #16]
 800b9fe:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800ba02:	f000 80ea 	beq.w	800bbda <HAL_OSPIM_Config+0x406>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ba06:	3b01      	subs	r3, #1
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4a11      	ldr	r2, [pc, #68]	@ (800ba54 <HAL_OSPIM_Config+0x280>)
 800ba10:	441a      	add	r2, r3
 800ba12:	6853      	ldr	r3, [r2, #4]
 800ba14:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800ba18:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800ba1c:	6053      	str	r3, [r2, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800ba1e:	f011 0f01 	tst.w	r1, #1
 800ba22:	d004      	beq.n	800ba2e <HAL_OSPIM_Config+0x25a>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800ba24:	4a09      	ldr	r2, [pc, #36]	@ (800ba4c <HAL_OSPIM_Config+0x278>)
 800ba26:	6813      	ldr	r3, [r2, #0]
 800ba28:	f043 0301 	orr.w	r3, r3, #1
 800ba2c:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 800ba2e:	f011 0f02 	tst.w	r1, #2
 800ba32:	d004      	beq.n	800ba3e <HAL_OSPIM_Config+0x26a>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800ba34:	4a06      	ldr	r2, [pc, #24]	@ (800ba50 <HAL_OSPIM_Config+0x27c>)
 800ba36:	6813      	ldr	r3, [r2, #0]
 800ba38:	f043 0301 	orr.w	r3, r3, #1
 800ba3c:	6013      	str	r3, [r2, #0]
}
 800ba3e:	4638      	mov	r0, r7
 800ba40:	b00d      	add	sp, #52	@ 0x34
 800ba42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint8_t ospi_enabled = 0U;
 800ba46:	4639      	mov	r1, r7
 800ba48:	e6f9      	b.n	800b83e <HAL_OSPIM_Config+0x6a>
 800ba4a:	bf00      	nop
 800ba4c:	52005000 	.word	0x52005000
 800ba50:	5200a000 	.word	0x5200a000
 800ba54:	5200b400 	.word	0x5200b400
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800ba58:	4643      	mov	r3, r8
 800ba5a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
 800ba5e:	aa0c      	add	r2, sp, #48	@ 0x30
 800ba60:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800ba64:	f850 2c30 	ldr.w	r2, [r0, #-48]
 800ba68:	3a01      	subs	r2, #1
 800ba6a:	0092      	lsls	r2, r2, #2
 800ba6c:	4c94      	ldr	r4, [pc, #592]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800ba6e:	4414      	add	r4, r2
 800ba70:	6862      	ldr	r2, [r4, #4]
 800ba72:	f042 0202 	orr.w	r2, r2, #2
 800ba76:	6062      	str	r2, [r4, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800ba78:	f850 2c2c 	ldr.w	r2, [r0, #-44]
 800ba7c:	b13a      	cbz	r2, 800ba8e <HAL_OSPIM_Config+0x2ba>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800ba7e:	3a01      	subs	r2, #1
 800ba80:	0092      	lsls	r2, r2, #2
 800ba82:	488f      	ldr	r0, [pc, #572]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800ba84:	4410      	add	r0, r2
 800ba86:	6842      	ldr	r2, [r0, #4]
 800ba88:	f042 0220 	orr.w	r2, r2, #32
 800ba8c:	6042      	str	r2, [r0, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ba8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ba92:	a80c      	add	r0, sp, #48	@ 0x30
 800ba94:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800ba98:	f852 2c24 	ldr.w	r2, [r2, #-36]
 800ba9c:	b14a      	cbz	r2, 800bab2 <HAL_OSPIM_Config+0x2de>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800ba9e:	3a01      	subs	r2, #1
 800baa0:	f002 0201 	and.w	r2, r2, #1
 800baa4:	0092      	lsls	r2, r2, #2
 800baa6:	4886      	ldr	r0, [pc, #536]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800baa8:	4410      	add	r0, r2
 800baaa:	6842      	ldr	r2, [r0, #4]
 800baac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bab0:	6042      	str	r2, [r0, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800bab2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bab6:	aa0c      	add	r2, sp, #48	@ 0x30
 800bab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800babc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f43f aee5 	beq.w	800b890 <HAL_OSPIM_Config+0xbc>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800bac6:	3b01      	subs	r3, #1
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4a7c      	ldr	r2, [pc, #496]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bad0:	441a      	add	r2, r3
 800bad2:	6853      	ldr	r3, [r2, #4]
 800bad4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bad8:	6053      	str	r3, [r2, #4]
 800bada:	e6d9      	b.n	800b890 <HAL_OSPIM_Config+0xbc>
      if (IOM_cfg[instance].ClkPort != 0U)
 800badc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800bae0:	aa0c      	add	r2, sp, #48	@ 0x30
 800bae2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bae6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800baea:	2b00      	cmp	r3, #0
 800baec:	f43f aed0 	beq.w	800b890 <HAL_OSPIM_Config+0xbc>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800baf0:	3b01      	subs	r3, #1
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4a72      	ldr	r2, [pc, #456]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800baf6:	441a      	add	r2, r3
 800baf8:	6853      	ldr	r3, [r2, #4]
 800bafa:	f023 0301 	bic.w	r3, r3, #1
 800bafe:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800bb00:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800bb04:	aa0c      	add	r2, sp, #48	@ 0x30
 800bb06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800bb0e:	b13b      	cbz	r3, 800bb20 <HAL_OSPIM_Config+0x34c>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800bb10:	3b01      	subs	r3, #1
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4a6a      	ldr	r2, [pc, #424]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bb16:	441a      	add	r2, r3
 800bb18:	6853      	ldr	r3, [r2, #4]
 800bb1a:	f023 0310 	bic.w	r3, r3, #16
 800bb1e:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800bb20:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800bb24:	aa0c      	add	r2, sp, #48	@ 0x30
 800bb26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb2a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800bb2e:	b14b      	cbz	r3, 800bb44 <HAL_OSPIM_Config+0x370>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800bb30:	3b01      	subs	r3, #1
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4a61      	ldr	r2, [pc, #388]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bb3a:	441a      	add	r2, r3
 800bb3c:	6853      	ldr	r3, [r2, #4]
 800bb3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb42:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800bb44:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800bb48:	aa0c      	add	r2, sp, #48	@ 0x30
 800bb4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb4e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f43f ae9c 	beq.w	800b890 <HAL_OSPIM_Config+0xbc>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4a57      	ldr	r2, [pc, #348]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bb62:	441a      	add	r2, r3
 800bb64:	6853      	ldr	r3, [r2, #4]
 800bb66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb6a:	6053      	str	r3, [r2, #4]
 800bb6c:	e690      	b.n	800b890 <HAL_OSPIM_Config+0xbc>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800bb6e:	686c      	ldr	r4, [r5, #4]
 800bb70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bb74:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800bb78:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
 800bb7c:	f852 2c2c 	ldr.w	r2, [r2, #-44]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800bb80:	4294      	cmp	r4, r2
 800bb82:	f47f aead 	bne.w	800b8e0 <HAL_OSPIM_Config+0x10c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800bb86:	68ec      	ldr	r4, [r5, #12]
 800bb88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bb8c:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
 800bb90:	f852 2c24 	ldr.w	r2, [r2, #-36]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800bb94:	4294      	cmp	r4, r2
 800bb96:	f47f aea3 	bne.w	800b8e0 <HAL_OSPIM_Config+0x10c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800bb9a:	692c      	ldr	r4, [r5, #16]
 800bb9c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bba0:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
 800bba4:	f852 2c20 	ldr.w	r2, [r2, #-32]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800bba8:	4294      	cmp	r4, r2
 800bbaa:	f47f ae99 	bne.w	800b8e0 <HAL_OSPIM_Config+0x10c>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800bbae:	4a44      	ldr	r2, [pc, #272]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bbb0:	6813      	ldr	r3, [r2, #0]
 800bbb2:	f043 0301 	orr.w	r3, r3, #1
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	e6d8      	b.n	800b96c <HAL_OSPIM_Config+0x198>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f43f af1e 	beq.w	800b9fc <HAL_OSPIM_Config+0x228>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4a3d      	ldr	r2, [pc, #244]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bbca:	441a      	add	r2, r3
 800bbcc:	6853      	ldr	r3, [r2, #4]
 800bbce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800bbd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bbd6:	6053      	str	r3, [r2, #4]
 800bbd8:	e710      	b.n	800b9fc <HAL_OSPIM_Config+0x228>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f43f af1f 	beq.w	800ba1e <HAL_OSPIM_Config+0x24a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4a35      	ldr	r2, [pc, #212]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bbea:	441a      	add	r2, r3
 800bbec:	6853      	ldr	r3, [r2, #4]
 800bbee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800bbf2:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800bbf6:	6053      	str	r3, [r2, #4]
 800bbf8:	e711      	b.n	800ba1e <HAL_OSPIM_Config+0x24a>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800bbfa:	682b      	ldr	r3, [r5, #0]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4a2f      	ldr	r2, [pc, #188]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bc02:	441a      	add	r2, r3
 800bc04:	6853      	ldr	r3, [r2, #4]
 800bc06:	f023 0303 	bic.w	r3, r3, #3
 800bc0a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800bc0e:	f043 0301 	orr.w	r3, r3, #1
 800bc12:	6053      	str	r3, [r2, #4]
      if (cfg->DQSPort != 0U)
 800bc14:	686b      	ldr	r3, [r5, #4]
 800bc16:	b15b      	cbz	r3, 800bc30 <HAL_OSPIM_Config+0x45c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4a28      	ldr	r2, [pc, #160]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bc1e:	441a      	add	r2, r3
 800bc20:	6853      	ldr	r3, [r2, #4]
 800bc22:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800bc26:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
 800bc2a:	f043 0310 	orr.w	r3, r3, #16
 800bc2e:	6053      	str	r3, [r2, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800bc30:	68eb      	ldr	r3, [r5, #12]
 800bc32:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800bc36:	d020      	beq.n	800bc7a <HAL_OSPIM_Config+0x4a6>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4a1f      	ldr	r2, [pc, #124]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bc42:	441a      	add	r2, r3
 800bc44:	6853      	ldr	r3, [r2, #4]
 800bc46:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800bc4a:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
 800bc4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc52:	6053      	str	r3, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800bc54:	692b      	ldr	r3, [r5, #16]
 800bc56:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800bc5a:	d01f      	beq.n	800bc9c <HAL_OSPIM_Config+0x4c8>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4a16      	ldr	r2, [pc, #88]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bc66:	441a      	add	r2, r3
 800bc68:	6853      	ldr	r3, [r2, #4]
 800bc6a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800bc6e:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
 800bc72:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800bc76:	6053      	str	r3, [r2, #4]
 800bc78:	e6d1      	b.n	800ba1e <HAL_OSPIM_Config+0x24a>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0ea      	beq.n	800bc54 <HAL_OSPIM_Config+0x480>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4a0e      	ldr	r2, [pc, #56]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bc88:	441a      	add	r2, r3
 800bc8a:	6853      	ldr	r3, [r2, #4]
 800bc8c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800bc90:	ea43 6386 	orr.w	r3, r3, r6, lsl #26
 800bc94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc98:	6053      	str	r3, [r2, #4]
 800bc9a:	e7db      	b.n	800bc54 <HAL_OSPIM_Config+0x480>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f43f aebe 	beq.w	800ba1e <HAL_OSPIM_Config+0x24a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800bca2:	3b01      	subs	r3, #1
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4a05      	ldr	r2, [pc, #20]	@ (800bcc0 <HAL_OSPIM_Config+0x4ec>)
 800bcac:	441a      	add	r2, r3
 800bcae:	6853      	ldr	r3, [r2, #4]
 800bcb0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800bcb4:	ea43 6386 	orr.w	r3, r3, r6, lsl #26
 800bcb8:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800bcbc:	6053      	str	r3, [r2, #4]
 800bcbe:	e6ae      	b.n	800ba1e <HAL_OSPIM_Config+0x24a>
 800bcc0:	5200b400 	.word	0x5200b400

0800bcc4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800bcc4:	4a02      	ldr	r2, [pc, #8]	@ (800bcd0 <HAL_PWR_EnableBkUpAccess+0xc>)
 800bcc6:	6813      	ldr	r3, [r2, #0]
 800bcc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bccc:	6013      	str	r3, [r2, #0]
}
 800bcce:	4770      	bx	lr
 800bcd0:	58024800 	.word	0x58024800

0800bcd4 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bcd4:	4b13      	ldr	r3, [pc, #76]	@ (800bd24 <HAL_PWREx_ConfigSupply+0x50>)
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	f013 0f04 	tst.w	r3, #4
 800bcdc:	d107      	bne.n	800bcee <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bcde:	4b11      	ldr	r3, [pc, #68]	@ (800bd24 <HAL_PWREx_ConfigSupply+0x50>)
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	f003 0307 	and.w	r3, r3, #7
 800bce6:	4283      	cmp	r3, r0
 800bce8:	d01a      	beq.n	800bd20 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bcea:	2001      	movs	r0, #1
 800bcec:	4770      	bx	lr
{
 800bcee:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bcf0:	4a0c      	ldr	r2, [pc, #48]	@ (800bd24 <HAL_PWREx_ConfigSupply+0x50>)
 800bcf2:	68d3      	ldr	r3, [r2, #12]
 800bcf4:	f023 0307 	bic.w	r3, r3, #7
 800bcf8:	4303      	orrs	r3, r0
 800bcfa:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bcfc:	f7fb fe6c 	bl	80079d8 <HAL_GetTick>
 800bd00:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bd02:	4b08      	ldr	r3, [pc, #32]	@ (800bd24 <HAL_PWREx_ConfigSupply+0x50>)
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800bd0a:	d107      	bne.n	800bd1c <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bd0c:	f7fb fe64 	bl	80079d8 <HAL_GetTick>
 800bd10:	1b00      	subs	r0, r0, r4
 800bd12:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800bd16:	d9f4      	bls.n	800bd02 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e000      	b.n	800bd1e <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bd1c:	2000      	movs	r0, #0
}
 800bd1e:	bd10      	pop	{r4, pc}
      return HAL_OK;
 800bd20:	2000      	movs	r0, #0
}
 800bd22:	4770      	bx	lr
 800bd24:	58024800 	.word	0x58024800

0800bd28 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f000 82d7 	beq.w	800c2dc <HAL_RCC_OscConfig+0x5b4>
{
 800bd2e:	b538      	push	{r3, r4, r5, lr}
 800bd30:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd32:	6803      	ldr	r3, [r0, #0]
 800bd34:	f013 0f01 	tst.w	r3, #1
 800bd38:	d025      	beq.n	800bd86 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd3a:	4aa0      	ldr	r2, [pc, #640]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bd3c:	6913      	ldr	r3, [r2, #16]
 800bd3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd42:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bd44:	2b10      	cmp	r3, #16
 800bd46:	d015      	beq.n	800bd74 <HAL_RCC_OscConfig+0x4c>
 800bd48:	2b18      	cmp	r3, #24
 800bd4a:	d00f      	beq.n	800bd6c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd4c:	6863      	ldr	r3, [r4, #4]
 800bd4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd52:	d03f      	beq.n	800bdd4 <HAL_RCC_OscConfig+0xac>
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d153      	bne.n	800be00 <HAL_RCC_OscConfig+0xd8>
 800bd58:	4b98      	ldr	r3, [pc, #608]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	e038      	b.n	800bdde <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bd6c:	f002 0203 	and.w	r2, r2, #3
 800bd70:	2a02      	cmp	r2, #2
 800bd72:	d1eb      	bne.n	800bd4c <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd74:	4b91      	ldr	r3, [pc, #580]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800bd7c:	d003      	beq.n	800bd86 <HAL_RCC_OscConfig+0x5e>
 800bd7e:	6863      	ldr	r3, [r4, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f000 82ad 	beq.w	800c2e0 <HAL_RCC_OscConfig+0x5b8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	f013 0f02 	tst.w	r3, #2
 800bd8c:	f000 8088 	beq.w	800bea0 <HAL_RCC_OscConfig+0x178>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd90:	4a8a      	ldr	r2, [pc, #552]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bd92:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bd96:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800bd9a:	d05a      	beq.n	800be52 <HAL_RCC_OscConfig+0x12a>
 800bd9c:	2b18      	cmp	r3, #24
 800bd9e:	d055      	beq.n	800be4c <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bda0:	68e3      	ldr	r3, [r4, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 80a9 	beq.w	800befa <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bda8:	4984      	ldr	r1, [pc, #528]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bdaa:	680a      	ldr	r2, [r1, #0]
 800bdac:	f022 0219 	bic.w	r2, r2, #25
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdb4:	f7fb fe10 	bl	80079d8 <HAL_GetTick>
 800bdb8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdba:	4b80      	ldr	r3, [pc, #512]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f013 0f04 	tst.w	r3, #4
 800bdc2:	f040 8091 	bne.w	800bee8 <HAL_RCC_OscConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdc6:	f7fb fe07 	bl	80079d8 <HAL_GetTick>
 800bdca:	1b40      	subs	r0, r0, r5
 800bdcc:	2802      	cmp	r0, #2
 800bdce:	d9f4      	bls.n	800bdba <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 800bdd0:	2003      	movs	r0, #3
 800bdd2:	e28c      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdd4:	4a79      	ldr	r2, [pc, #484]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bdd6:	6813      	ldr	r3, [r2, #0]
 800bdd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bddc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bdde:	6863      	ldr	r3, [r4, #4]
 800bde0:	b32b      	cbz	r3, 800be2e <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800bde2:	f7fb fdf9 	bl	80079d8 <HAL_GetTick>
 800bde6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bde8:	4b74      	ldr	r3, [pc, #464]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800bdf0:	d1c9      	bne.n	800bd86 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bdf2:	f7fb fdf1 	bl	80079d8 <HAL_GetTick>
 800bdf6:	1b40      	subs	r0, r0, r5
 800bdf8:	2864      	cmp	r0, #100	@ 0x64
 800bdfa:	d9f5      	bls.n	800bde8 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 800bdfc:	2003      	movs	r0, #3
 800bdfe:	e276      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be04:	d009      	beq.n	800be1a <HAL_RCC_OscConfig+0xf2>
 800be06:	4b6d      	ldr	r3, [pc, #436]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800be0e:	601a      	str	r2, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	e7e1      	b.n	800bdde <HAL_RCC_OscConfig+0xb6>
 800be1a:	4b68      	ldr	r3, [pc, #416]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800be22:	601a      	str	r2, [r3, #0]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	e7d7      	b.n	800bdde <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 800be2e:	f7fb fdd3 	bl	80079d8 <HAL_GetTick>
 800be32:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800be34:	4b61      	ldr	r3, [pc, #388]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800be3c:	d0a3      	beq.n	800bd86 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be3e:	f7fb fdcb 	bl	80079d8 <HAL_GetTick>
 800be42:	1b40      	subs	r0, r0, r5
 800be44:	2864      	cmp	r0, #100	@ 0x64
 800be46:	d9f5      	bls.n	800be34 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 800be48:	2003      	movs	r0, #3
 800be4a:	e250      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800be4c:	f012 0f03 	tst.w	r2, #3
 800be50:	d1a6      	bne.n	800bda0 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be52:	4b5a      	ldr	r3, [pc, #360]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f013 0f04 	tst.w	r3, #4
 800be5a:	d003      	beq.n	800be64 <HAL_RCC_OscConfig+0x13c>
 800be5c:	68e3      	ldr	r3, [r4, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 8240 	beq.w	800c2e4 <HAL_RCC_OscConfig+0x5bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800be64:	4a55      	ldr	r2, [pc, #340]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800be66:	6813      	ldr	r3, [r2, #0]
 800be68:	f023 0319 	bic.w	r3, r3, #25
 800be6c:	68e1      	ldr	r1, [r4, #12]
 800be6e:	430b      	orrs	r3, r1
 800be70:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800be72:	f7fb fdb1 	bl	80079d8 <HAL_GetTick>
 800be76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be78:	4b50      	ldr	r3, [pc, #320]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f013 0f04 	tst.w	r3, #4
 800be80:	d106      	bne.n	800be90 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be82:	f7fb fda9 	bl	80079d8 <HAL_GetTick>
 800be86:	1b40      	subs	r0, r0, r5
 800be88:	2802      	cmp	r0, #2
 800be8a:	d9f5      	bls.n	800be78 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 800be8c:	2003      	movs	r0, #3
 800be8e:	e22e      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be90:	4a4a      	ldr	r2, [pc, #296]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800be92:	6853      	ldr	r3, [r2, #4]
 800be94:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800be98:	6921      	ldr	r1, [r4, #16]
 800be9a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800be9e:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	f013 0f10 	tst.w	r3, #16
 800bea6:	d051      	beq.n	800bf4c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bea8:	4a44      	ldr	r2, [pc, #272]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800beaa:	6913      	ldr	r3, [r2, #16]
 800beac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800beb0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800beb2:	2b08      	cmp	r3, #8
 800beb4:	d039      	beq.n	800bf2a <HAL_RCC_OscConfig+0x202>
 800beb6:	2b18      	cmp	r3, #24
 800beb8:	d033      	beq.n	800bf22 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800beba:	69e3      	ldr	r3, [r4, #28]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d069      	beq.n	800bf94 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bec0:	4a3e      	ldr	r2, [pc, #248]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bec2:	6813      	ldr	r3, [r2, #0]
 800bec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beca:	f7fb fd85 	bl	80079d8 <HAL_GetTick>
 800bece:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bed0:	4b3a      	ldr	r3, [pc, #232]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800bed8:	d153      	bne.n	800bf82 <HAL_RCC_OscConfig+0x25a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800beda:	f7fb fd7d 	bl	80079d8 <HAL_GetTick>
 800bede:	1b40      	subs	r0, r0, r5
 800bee0:	2802      	cmp	r0, #2
 800bee2:	d9f5      	bls.n	800bed0 <HAL_RCC_OscConfig+0x1a8>
          {
            return HAL_TIMEOUT;
 800bee4:	2003      	movs	r0, #3
 800bee6:	e202      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bee8:	4a34      	ldr	r2, [pc, #208]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800beea:	6853      	ldr	r3, [r2, #4]
 800beec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bef0:	6921      	ldr	r1, [r4, #16]
 800bef2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bef6:	6053      	str	r3, [r2, #4]
 800bef8:	e7d2      	b.n	800bea0 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_DISABLE();
 800befa:	4a30      	ldr	r2, [pc, #192]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800befc:	6813      	ldr	r3, [r2, #0]
 800befe:	f023 0301 	bic.w	r3, r3, #1
 800bf02:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800bf04:	f7fb fd68 	bl	80079d8 <HAL_GetTick>
 800bf08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bf0a:	4b2c      	ldr	r3, [pc, #176]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f013 0f04 	tst.w	r3, #4
 800bf12:	d0c5      	beq.n	800bea0 <HAL_RCC_OscConfig+0x178>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf14:	f7fb fd60 	bl	80079d8 <HAL_GetTick>
 800bf18:	1b40      	subs	r0, r0, r5
 800bf1a:	2802      	cmp	r0, #2
 800bf1c:	d9f5      	bls.n	800bf0a <HAL_RCC_OscConfig+0x1e2>
            return HAL_TIMEOUT;
 800bf1e:	2003      	movs	r0, #3
 800bf20:	e1e5      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bf22:	f002 0203 	and.w	r2, r2, #3
 800bf26:	2a01      	cmp	r2, #1
 800bf28:	d1c7      	bne.n	800beba <HAL_RCC_OscConfig+0x192>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf2a:	4b24      	ldr	r3, [pc, #144]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800bf32:	d003      	beq.n	800bf3c <HAL_RCC_OscConfig+0x214>
 800bf34:	69e3      	ldr	r3, [r4, #28]
 800bf36:	2b80      	cmp	r3, #128	@ 0x80
 800bf38:	f040 81d6 	bne.w	800c2e8 <HAL_RCC_OscConfig+0x5c0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf3c:	4a1f      	ldr	r2, [pc, #124]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bf3e:	68d3      	ldr	r3, [r2, #12]
 800bf40:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800bf44:	6a21      	ldr	r1, [r4, #32]
 800bf46:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bf4a:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf4c:	6823      	ldr	r3, [r4, #0]
 800bf4e:	f013 0f08 	tst.w	r3, #8
 800bf52:	d049      	beq.n	800bfe8 <HAL_RCC_OscConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bf54:	6963      	ldr	r3, [r4, #20]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d032      	beq.n	800bfc0 <HAL_RCC_OscConfig+0x298>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf5a:	4a18      	ldr	r2, [pc, #96]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bf5c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800bf5e:	f043 0301 	orr.w	r3, r3, #1
 800bf62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf64:	f7fb fd38 	bl	80079d8 <HAL_GetTick>
 800bf68:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bf6a:	4b14      	ldr	r3, [pc, #80]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bf6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf6e:	f013 0f02 	tst.w	r3, #2
 800bf72:	d139      	bne.n	800bfe8 <HAL_RCC_OscConfig+0x2c0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf74:	f7fb fd30 	bl	80079d8 <HAL_GetTick>
 800bf78:	1b40      	subs	r0, r0, r5
 800bf7a:	2802      	cmp	r0, #2
 800bf7c:	d9f5      	bls.n	800bf6a <HAL_RCC_OscConfig+0x242>
        {
          return HAL_TIMEOUT;
 800bf7e:	2003      	movs	r0, #3
 800bf80:	e1b5      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf82:	4a0e      	ldr	r2, [pc, #56]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bf84:	68d3      	ldr	r3, [r2, #12]
 800bf86:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800bf8a:	6a21      	ldr	r1, [r4, #32]
 800bf8c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bf90:	60d3      	str	r3, [r2, #12]
 800bf92:	e7db      	b.n	800bf4c <HAL_RCC_OscConfig+0x224>
        __HAL_RCC_CSI_DISABLE();
 800bf94:	4a09      	ldr	r2, [pc, #36]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bf96:	6813      	ldr	r3, [r2, #0]
 800bf98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800bf9e:	f7fb fd1b 	bl	80079d8 <HAL_GetTick>
 800bfa2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bfa4:	4b05      	ldr	r3, [pc, #20]	@ (800bfbc <HAL_RCC_OscConfig+0x294>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800bfac:	d0ce      	beq.n	800bf4c <HAL_RCC_OscConfig+0x224>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bfae:	f7fb fd13 	bl	80079d8 <HAL_GetTick>
 800bfb2:	1b40      	subs	r0, r0, r5
 800bfb4:	2802      	cmp	r0, #2
 800bfb6:	d9f5      	bls.n	800bfa4 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 800bfb8:	2003      	movs	r0, #3
 800bfba:	e198      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800bfbc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfc0:	4a9d      	ldr	r2, [pc, #628]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800bfc2:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800bfc4:	f023 0301 	bic.w	r3, r3, #1
 800bfc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfca:	f7fb fd05 	bl	80079d8 <HAL_GetTick>
 800bfce:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bfd0:	4b99      	ldr	r3, [pc, #612]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800bfd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfd4:	f013 0f02 	tst.w	r3, #2
 800bfd8:	d006      	beq.n	800bfe8 <HAL_RCC_OscConfig+0x2c0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfda:	f7fb fcfd 	bl	80079d8 <HAL_GetTick>
 800bfde:	1b40      	subs	r0, r0, r5
 800bfe0:	2802      	cmp	r0, #2
 800bfe2:	d9f5      	bls.n	800bfd0 <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_TIMEOUT;
 800bfe4:	2003      	movs	r0, #3
 800bfe6:	e182      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	f013 0f20 	tst.w	r3, #32
 800bfee:	d029      	beq.n	800c044 <HAL_RCC_OscConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bff0:	69a3      	ldr	r3, [r4, #24]
 800bff2:	b19b      	cbz	r3, 800c01c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bff4:	4a90      	ldr	r2, [pc, #576]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800bff6:	6813      	ldr	r3, [r2, #0]
 800bff8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bffc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bffe:	f7fb fceb 	bl	80079d8 <HAL_GetTick>
 800c002:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c004:	4b8c      	ldr	r3, [pc, #560]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800c00c:	d11a      	bne.n	800c044 <HAL_RCC_OscConfig+0x31c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c00e:	f7fb fce3 	bl	80079d8 <HAL_GetTick>
 800c012:	1b40      	subs	r0, r0, r5
 800c014:	2802      	cmp	r0, #2
 800c016:	d9f5      	bls.n	800c004 <HAL_RCC_OscConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 800c018:	2003      	movs	r0, #3
 800c01a:	e168      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c01c:	4a86      	ldr	r2, [pc, #536]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c01e:	6813      	ldr	r3, [r2, #0]
 800c020:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c024:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c026:	f7fb fcd7 	bl	80079d8 <HAL_GetTick>
 800c02a:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c02c:	4b82      	ldr	r3, [pc, #520]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800c034:	d006      	beq.n	800c044 <HAL_RCC_OscConfig+0x31c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c036:	f7fb fccf 	bl	80079d8 <HAL_GetTick>
 800c03a:	1b40      	subs	r0, r0, r5
 800c03c:	2802      	cmp	r0, #2
 800c03e:	d9f5      	bls.n	800c02c <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 800c040:	2003      	movs	r0, #3
 800c042:	e154      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	f013 0f04 	tst.w	r3, #4
 800c04a:	d121      	bne.n	800c090 <HAL_RCC_OscConfig+0x368>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c04c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 814c 	beq.w	800c2ec <HAL_RCC_OscConfig+0x5c4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c054:	4a78      	ldr	r2, [pc, #480]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c056:	6912      	ldr	r2, [r2, #16]
 800c058:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c05c:	2a18      	cmp	r2, #24
 800c05e:	f000 80f3 	beq.w	800c248 <HAL_RCC_OscConfig+0x520>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c062:	2b02      	cmp	r3, #2
 800c064:	d075      	beq.n	800c152 <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c066:	4a74      	ldr	r2, [pc, #464]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c068:	6813      	ldr	r3, [r2, #0]
 800c06a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c06e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c070:	f7fb fcb2 	bl	80079d8 <HAL_GetTick>
 800c074:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c076:	4b70      	ldr	r3, [pc, #448]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c07e:	f000 80d8 	beq.w	800c232 <HAL_RCC_OscConfig+0x50a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c082:	f7fb fca9 	bl	80079d8 <HAL_GetTick>
 800c086:	1b00      	subs	r0, r0, r4
 800c088:	2802      	cmp	r0, #2
 800c08a:	d9f4      	bls.n	800c076 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800c08c:	2003      	movs	r0, #3
 800c08e:	e12e      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
    PWR->CR1 |= PWR_CR1_DBP;
 800c090:	4a6a      	ldr	r2, [pc, #424]	@ (800c23c <HAL_RCC_OscConfig+0x514>)
 800c092:	6813      	ldr	r3, [r2, #0]
 800c094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c098:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c09a:	f7fb fc9d 	bl	80079d8 <HAL_GetTick>
 800c09e:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c0a0:	4b66      	ldr	r3, [pc, #408]	@ (800c23c <HAL_RCC_OscConfig+0x514>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800c0a8:	d106      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x390>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0aa:	f7fb fc95 	bl	80079d8 <HAL_GetTick>
 800c0ae:	1b40      	subs	r0, r0, r5
 800c0b0:	2864      	cmp	r0, #100	@ 0x64
 800c0b2:	d9f5      	bls.n	800c0a0 <HAL_RCC_OscConfig+0x378>
        return HAL_TIMEOUT;
 800c0b4:	2003      	movs	r0, #3
 800c0b6:	e11a      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0b8:	68a3      	ldr	r3, [r4, #8]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d00a      	beq.n	800c0d4 <HAL_RCC_OscConfig+0x3ac>
 800c0be:	bb0b      	cbnz	r3, 800c104 <HAL_RCC_OscConfig+0x3dc>
 800c0c0:	4b5d      	ldr	r3, [pc, #372]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c0c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c0c4:	f022 0201 	bic.w	r2, r2, #1
 800c0c8:	671a      	str	r2, [r3, #112]	@ 0x70
 800c0ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c0cc:	f022 0204 	bic.w	r2, r2, #4
 800c0d0:	671a      	str	r2, [r3, #112]	@ 0x70
 800c0d2:	e004      	b.n	800c0de <HAL_RCC_OscConfig+0x3b6>
 800c0d4:	4a58      	ldr	r2, [pc, #352]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c0d6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800c0d8:	f043 0301 	orr.w	r3, r3, #1
 800c0dc:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c0de:	68a3      	ldr	r3, [r4, #8]
 800c0e0:	b333      	cbz	r3, 800c130 <HAL_RCC_OscConfig+0x408>
      tickstart = HAL_GetTick();
 800c0e2:	f7fb fc79 	bl	80079d8 <HAL_GetTick>
 800c0e6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0e8:	4b53      	ldr	r3, [pc, #332]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c0ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0ec:	f013 0f02 	tst.w	r3, #2
 800c0f0:	d1ac      	bne.n	800c04c <HAL_RCC_OscConfig+0x324>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0f2:	f7fb fc71 	bl	80079d8 <HAL_GetTick>
 800c0f6:	1b40      	subs	r0, r0, r5
 800c0f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c0fc:	4298      	cmp	r0, r3
 800c0fe:	d9f3      	bls.n	800c0e8 <HAL_RCC_OscConfig+0x3c0>
          return HAL_TIMEOUT;
 800c100:	2003      	movs	r0, #3
 800c102:	e0f4      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c104:	2b05      	cmp	r3, #5
 800c106:	d009      	beq.n	800c11c <HAL_RCC_OscConfig+0x3f4>
 800c108:	4b4b      	ldr	r3, [pc, #300]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c10a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c10c:	f022 0201 	bic.w	r2, r2, #1
 800c110:	671a      	str	r2, [r3, #112]	@ 0x70
 800c112:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c114:	f022 0204 	bic.w	r2, r2, #4
 800c118:	671a      	str	r2, [r3, #112]	@ 0x70
 800c11a:	e7e0      	b.n	800c0de <HAL_RCC_OscConfig+0x3b6>
 800c11c:	4b46      	ldr	r3, [pc, #280]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c11e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c120:	f042 0204 	orr.w	r2, r2, #4
 800c124:	671a      	str	r2, [r3, #112]	@ 0x70
 800c126:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c128:	f042 0201 	orr.w	r2, r2, #1
 800c12c:	671a      	str	r2, [r3, #112]	@ 0x70
 800c12e:	e7d6      	b.n	800c0de <HAL_RCC_OscConfig+0x3b6>
      tickstart = HAL_GetTick();
 800c130:	f7fb fc52 	bl	80079d8 <HAL_GetTick>
 800c134:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c136:	4b40      	ldr	r3, [pc, #256]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c13a:	f013 0f02 	tst.w	r3, #2
 800c13e:	d085      	beq.n	800c04c <HAL_RCC_OscConfig+0x324>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c140:	f7fb fc4a 	bl	80079d8 <HAL_GetTick>
 800c144:	1b40      	subs	r0, r0, r5
 800c146:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c14a:	4298      	cmp	r0, r3
 800c14c:	d9f3      	bls.n	800c136 <HAL_RCC_OscConfig+0x40e>
          return HAL_TIMEOUT;
 800c14e:	2003      	movs	r0, #3
 800c150:	e0cd      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_PLL_DISABLE();
 800c152:	4a39      	ldr	r2, [pc, #228]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c154:	6813      	ldr	r3, [r2, #0]
 800c156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c15a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c15c:	f7fb fc3c 	bl	80079d8 <HAL_GetTick>
 800c160:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c162:	4b35      	ldr	r3, [pc, #212]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c16a:	d006      	beq.n	800c17a <HAL_RCC_OscConfig+0x452>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c16c:	f7fb fc34 	bl	80079d8 <HAL_GetTick>
 800c170:	1b40      	subs	r0, r0, r5
 800c172:	2802      	cmp	r0, #2
 800c174:	d9f5      	bls.n	800c162 <HAL_RCC_OscConfig+0x43a>
            return HAL_TIMEOUT;
 800c176:	2003      	movs	r0, #3
 800c178:	e0b9      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c17a:	4b2f      	ldr	r3, [pc, #188]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c17c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c17e:	4a30      	ldr	r2, [pc, #192]	@ (800c240 <HAL_RCC_OscConfig+0x518>)
 800c180:	400a      	ands	r2, r1
 800c182:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c184:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800c186:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800c18a:	430a      	orrs	r2, r1
 800c18c:	629a      	str	r2, [r3, #40]	@ 0x28
 800c18e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c190:	3a01      	subs	r2, #1
 800c192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c196:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c198:	3901      	subs	r1, #1
 800c19a:	0249      	lsls	r1, r1, #9
 800c19c:	b289      	uxth	r1, r1
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c1a2:	3901      	subs	r1, #1
 800c1a4:	0409      	lsls	r1, r1, #16
 800c1a6:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800c1ae:	3901      	subs	r1, #1
 800c1b0:	0609      	lsls	r1, r1, #24
 800c1b2:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800c1ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1bc:	f022 0201 	bic.w	r2, r2, #1
 800c1c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c1c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c1c4:	4a1f      	ldr	r2, [pc, #124]	@ (800c244 <HAL_RCC_OscConfig+0x51c>)
 800c1c6:	400a      	ands	r2, r1
 800c1c8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c1ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c1ce:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d2:	f022 020c 	bic.w	r2, r2, #12
 800c1d6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c1dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1de:	f022 0202 	bic.w	r2, r2, #2
 800c1e2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c1e4:	430a      	orrs	r2, r1
 800c1e6:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c1ee:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c1f6:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c1fe:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800c200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c202:	f042 0201 	orr.w	r2, r2, #1
 800c206:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800c20e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c210:	f7fb fbe2 	bl	80079d8 <HAL_GetTick>
 800c214:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c216:	4b08      	ldr	r3, [pc, #32]	@ (800c238 <HAL_RCC_OscConfig+0x510>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c21e:	d106      	bne.n	800c22e <HAL_RCC_OscConfig+0x506>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c220:	f7fb fbda 	bl	80079d8 <HAL_GetTick>
 800c224:	1b00      	subs	r0, r0, r4
 800c226:	2802      	cmp	r0, #2
 800c228:	d9f5      	bls.n	800c216 <HAL_RCC_OscConfig+0x4ee>
            return HAL_TIMEOUT;
 800c22a:	2003      	movs	r0, #3
 800c22c:	e05f      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800c22e:	2000      	movs	r0, #0
 800c230:	e05d      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c232:	2000      	movs	r0, #0
 800c234:	e05b      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c236:	bf00      	nop
 800c238:	58024400 	.word	0x58024400
 800c23c:	58024800 	.word	0x58024800
 800c240:	fffffc0c 	.word	0xfffffc0c
 800c244:	ffff0007 	.word	0xffff0007
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c248:	4930      	ldr	r1, [pc, #192]	@ (800c30c <HAL_RCC_OscConfig+0x5e4>)
 800c24a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c24c:	6b08      	ldr	r0, [r1, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d04e      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x5c8>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c252:	f002 0303 	and.w	r3, r2, #3
 800c256:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c258:	428b      	cmp	r3, r1
 800c25a:	d14b      	bne.n	800c2f4 <HAL_RCC_OscConfig+0x5cc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c25c:	f3c2 1205 	ubfx	r2, r2, #4, #6
 800c260:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c262:	429a      	cmp	r2, r3
 800c264:	d148      	bne.n	800c2f8 <HAL_RCC_OscConfig+0x5d0>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c266:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800c26a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c26c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c26e:	429a      	cmp	r2, r3
 800c270:	d144      	bne.n	800c2fc <HAL_RCC_OscConfig+0x5d4>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c272:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800c276:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c278:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d140      	bne.n	800c300 <HAL_RCC_OscConfig+0x5d8>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c27e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800c282:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c284:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c286:	429a      	cmp	r2, r3
 800c288:	d13c      	bne.n	800c304 <HAL_RCC_OscConfig+0x5dc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c28a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800c28e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c290:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c292:	4298      	cmp	r0, r3
 800c294:	d138      	bne.n	800c308 <HAL_RCC_OscConfig+0x5e0>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c296:	4b1d      	ldr	r3, [pc, #116]	@ (800c30c <HAL_RCC_OscConfig+0x5e4>)
 800c298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c29a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c29e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d101      	bne.n	800c2a8 <HAL_RCC_OscConfig+0x580>
  return HAL_OK;
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	e022      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
          __HAL_RCC_PLLFRACN_DISABLE();
 800c2a8:	4a18      	ldr	r2, [pc, #96]	@ (800c30c <HAL_RCC_OscConfig+0x5e4>)
 800c2aa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c2ac:	f023 0301 	bic.w	r3, r3, #1
 800c2b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800c2b2:	f7fb fb91 	bl	80079d8 <HAL_GetTick>
 800c2b6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c2b8:	f7fb fb8e 	bl	80079d8 <HAL_GetTick>
 800c2bc:	42a8      	cmp	r0, r5
 800c2be:	d0fb      	beq.n	800c2b8 <HAL_RCC_OscConfig+0x590>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c2c0:	4a12      	ldr	r2, [pc, #72]	@ (800c30c <HAL_RCC_OscConfig+0x5e4>)
 800c2c2:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800c2c4:	4b12      	ldr	r3, [pc, #72]	@ (800c310 <HAL_RCC_OscConfig+0x5e8>)
 800c2c6:	400b      	ands	r3, r1
 800c2c8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c2ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c2ce:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800c2d0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c2d2:	f043 0301 	orr.w	r3, r3, #1
 800c2d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 800c2d8:	2000      	movs	r0, #0
 800c2da:	e008      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
    return HAL_ERROR;
 800c2dc:	2001      	movs	r0, #1
}
 800c2de:	4770      	bx	lr
        return HAL_ERROR;
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	e004      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
        return HAL_ERROR;
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	e002      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
        return HAL_ERROR;
 800c2e8:	2001      	movs	r0, #1
 800c2ea:	e000      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 800c2ec:	2000      	movs	r0, #0
}
 800c2ee:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800c2f0:	2001      	movs	r0, #1
 800c2f2:	e7fc      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	e7fa      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	e7f8      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c2fc:	2001      	movs	r0, #1
 800c2fe:	e7f6      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c300:	2001      	movs	r0, #1
 800c302:	e7f4      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c304:	2001      	movs	r0, #1
 800c306:	e7f2      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c308:	2001      	movs	r0, #1
 800c30a:	e7f0      	b.n	800c2ee <HAL_RCC_OscConfig+0x5c6>
 800c30c:	58024400 	.word	0x58024400
 800c310:	ffff0007 	.word	0xffff0007

0800c314 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c314:	4b74      	ldr	r3, [pc, #464]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c31c:	2b10      	cmp	r3, #16
 800c31e:	f000 80de 	beq.w	800c4de <HAL_RCC_GetSysClockFreq+0x1ca>
 800c322:	2b18      	cmp	r3, #24
 800c324:	d00f      	beq.n	800c346 <HAL_RCC_GetSysClockFreq+0x32>
 800c326:	b10b      	cbz	r3, 800c32c <HAL_RCC_GetSysClockFreq+0x18>
 800c328:	4870      	ldr	r0, [pc, #448]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0x1d8>)
 800c32a:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c32c:	4b6e      	ldr	r3, [pc, #440]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f013 0f20 	tst.w	r3, #32
 800c334:	f000 80d5 	beq.w	800c4e2 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c338:	4b6b      	ldr	r3, [pc, #428]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c340:	486b      	ldr	r0, [pc, #428]	@ (800c4f0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800c342:	40d8      	lsrs	r0, r3
 800c344:	4770      	bx	lr
{
 800c346:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c348:	4b67      	ldr	r3, [pc, #412]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c34a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c34c:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c350:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800c352:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c356:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c358:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c35c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c35e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800c362:	fb01 f303 	mul.w	r3, r1, r3
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 800c36e:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 800c372:	f000 8094 	beq.w	800c49e <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 800c376:	2a01      	cmp	r2, #1
 800c378:	d066      	beq.n	800c448 <HAL_RCC_GetSysClockFreq+0x134>
 800c37a:	2a02      	cmp	r2, #2
 800c37c:	f000 8092 	beq.w	800c4a4 <HAL_RCC_GetSysClockFreq+0x190>
 800c380:	b1e2      	cbz	r2, 800c3bc <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c382:	ee07 0a10 	vmov	s14, r0
 800c386:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800c38a:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 800c4f4 <HAL_RCC_GetSysClockFreq+0x1e0>
 800c38e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c392:	4b55      	ldr	r3, [pc, #340]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39a:	ee06 3a90 	vmov	s13, r3
 800c39e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c3a2:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800c3a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b6:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 800c3ba:	e061      	b.n	800c480 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3bc:	4b4a      	ldr	r3, [pc, #296]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f013 0f20 	tst.w	r3, #32
 800c3c4:	d023      	beq.n	800c40e <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3c6:	4948      	ldr	r1, [pc, #288]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c3c8:	680a      	ldr	r2, [r1, #0]
 800c3ca:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800c3ce:	4b48      	ldr	r3, [pc, #288]	@ (800c4f0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800c3d0:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3d2:	ee07 3a10 	vmov	s14, r3
 800c3d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800c3da:	ee07 0a10 	vmov	s14, r0
 800c3de:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800c3e2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800c3e6:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800c3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ec:	ee06 3a90 	vmov	s13, r3
 800c3f0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c3f4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800c3f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c3fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c400:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c40c:	e038      	b.n	800c480 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c40e:	ee07 0a10 	vmov	s14, r0
 800c412:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800c416:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 800c4fc <HAL_RCC_GetSysClockFreq+0x1e8>
 800c41a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c41e:	4b32      	ldr	r3, [pc, #200]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c426:	ee06 3a90 	vmov	s13, r3
 800c42a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c42e:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800c432:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c43a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c43e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c442:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c446:	e01b      	b.n	800c480 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c448:	ee07 0a10 	vmov	s14, r0
 800c44c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800c450:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 800c4f4 <HAL_RCC_GetSysClockFreq+0x1e0>
 800c454:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c458:	4b23      	ldr	r3, [pc, #140]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c460:	ee06 3a90 	vmov	s13, r3
 800c464:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c468:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800c46c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c474:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c47c:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c480:	4b19      	ldr	r3, [pc, #100]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c484:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c488:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c48a:	ee07 3a90 	vmov	s15, r3
 800c48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c492:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c496:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800c49a:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800c49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4a2:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4a4:	ee07 0a10 	vmov	s14, r0
 800c4a8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800c4ac:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800c500 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c4b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800c4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4bc:	ee06 3a90 	vmov	s13, r3
 800c4c0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c4c4:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800c4c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c4cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4d8:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 800c4dc:	e7d0      	b.n	800c480 <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 800c4de:	4809      	ldr	r0, [pc, #36]	@ (800c504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800c4e0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c4e2:	4803      	ldr	r0, [pc, #12]	@ (800c4f0 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	58024400 	.word	0x58024400
 800c4ec:	003d0900 	.word	0x003d0900
 800c4f0:	03d09000 	.word	0x03d09000
 800c4f4:	4a742400 	.word	0x4a742400
 800c4f8:	39000000 	.word	0x39000000
 800c4fc:	4c742400 	.word	0x4c742400
 800c500:	4bbebc20 	.word	0x4bbebc20
 800c504:	017d7840 	.word	0x017d7840

0800c508 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800c508:	2800      	cmp	r0, #0
 800c50a:	f000 8132 	beq.w	800c772 <HAL_RCC_ClockConfig+0x26a>
{
 800c50e:	b570      	push	{r4, r5, r6, lr}
 800c510:	460d      	mov	r5, r1
 800c512:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c514:	4b9b      	ldr	r3, [pc, #620]	@ (800c784 <HAL_RCC_ClockConfig+0x27c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 030f 	and.w	r3, r3, #15
 800c51c:	428b      	cmp	r3, r1
 800c51e:	d20b      	bcs.n	800c538 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c520:	4a98      	ldr	r2, [pc, #608]	@ (800c784 <HAL_RCC_ClockConfig+0x27c>)
 800c522:	6813      	ldr	r3, [r2, #0]
 800c524:	f023 030f 	bic.w	r3, r3, #15
 800c528:	430b      	orrs	r3, r1
 800c52a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c52c:	6813      	ldr	r3, [r2, #0]
 800c52e:	f003 030f 	and.w	r3, r3, #15
 800c532:	428b      	cmp	r3, r1
 800c534:	f040 811f 	bne.w	800c776 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	f013 0f04 	tst.w	r3, #4
 800c53e:	d00c      	beq.n	800c55a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c540:	6922      	ldr	r2, [r4, #16]
 800c542:	4b91      	ldr	r3, [pc, #580]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d905      	bls.n	800c55a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c54e:	498e      	ldr	r1, [pc, #568]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c550:	698b      	ldr	r3, [r1, #24]
 800c552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c556:	431a      	orrs	r2, r3
 800c558:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	f013 0f08 	tst.w	r3, #8
 800c560:	d00c      	beq.n	800c57c <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c562:	6962      	ldr	r2, [r4, #20]
 800c564:	4b88      	ldr	r3, [pc, #544]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d905      	bls.n	800c57c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c570:	4985      	ldr	r1, [pc, #532]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c572:	69cb      	ldr	r3, [r1, #28]
 800c574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c578:	431a      	orrs	r2, r3
 800c57a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	f013 0f10 	tst.w	r3, #16
 800c582:	d00c      	beq.n	800c59e <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c584:	69a2      	ldr	r2, [r4, #24]
 800c586:	4b80      	ldr	r3, [pc, #512]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c588:	69db      	ldr	r3, [r3, #28]
 800c58a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c58e:	429a      	cmp	r2, r3
 800c590:	d905      	bls.n	800c59e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c592:	497d      	ldr	r1, [pc, #500]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c594:	69cb      	ldr	r3, [r1, #28]
 800c596:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c59a:	431a      	orrs	r2, r3
 800c59c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	f013 0f20 	tst.w	r3, #32
 800c5a4:	d00c      	beq.n	800c5c0 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c5a6:	69e2      	ldr	r2, [r4, #28]
 800c5a8:	4b77      	ldr	r3, [pc, #476]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c5aa:	6a1b      	ldr	r3, [r3, #32]
 800c5ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d905      	bls.n	800c5c0 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c5b4:	4974      	ldr	r1, [pc, #464]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c5b6:	6a0b      	ldr	r3, [r1, #32]
 800c5b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	f013 0f02 	tst.w	r3, #2
 800c5c6:	d00c      	beq.n	800c5e2 <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c5c8:	68e2      	ldr	r2, [r4, #12]
 800c5ca:	4b6f      	ldr	r3, [pc, #444]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c5cc:	699b      	ldr	r3, [r3, #24]
 800c5ce:	f003 030f 	and.w	r3, r3, #15
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d905      	bls.n	800c5e2 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5d6:	496c      	ldr	r1, [pc, #432]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c5d8:	698b      	ldr	r3, [r1, #24]
 800c5da:	f023 030f 	bic.w	r3, r3, #15
 800c5de:	431a      	orrs	r2, r3
 800c5e0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	f013 0f01 	tst.w	r3, #1
 800c5e8:	d041      	beq.n	800c66e <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c5ea:	4a67      	ldr	r2, [pc, #412]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c5ec:	6993      	ldr	r3, [r2, #24]
 800c5ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c5f2:	68a1      	ldr	r1, [r4, #8]
 800c5f4:	430b      	orrs	r3, r1
 800c5f6:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5f8:	6863      	ldr	r3, [r4, #4]
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d00a      	beq.n	800c614 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d027      	beq.n	800c652 <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c602:	2b01      	cmp	r3, #1
 800c604:	d02c      	beq.n	800c660 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c606:	4a60      	ldr	r2, [pc, #384]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c608:	6812      	ldr	r2, [r2, #0]
 800c60a:	f012 0f04 	tst.w	r2, #4
 800c60e:	d106      	bne.n	800c61e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 800c610:	2001      	movs	r0, #1
 800c612:	e0ad      	b.n	800c770 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c614:	6812      	ldr	r2, [r2, #0]
 800c616:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800c61a:	f000 80ae 	beq.w	800c77a <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c61e:	495a      	ldr	r1, [pc, #360]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c620:	690a      	ldr	r2, [r1, #16]
 800c622:	f022 0207 	bic.w	r2, r2, #7
 800c626:	4313      	orrs	r3, r2
 800c628:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 800c62a:	f7fb f9d5 	bl	80079d8 <HAL_GetTick>
 800c62e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c630:	4b55      	ldr	r3, [pc, #340]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c638:	6862      	ldr	r2, [r4, #4]
 800c63a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800c63e:	d016      	beq.n	800c66e <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c640:	f7fb f9ca 	bl	80079d8 <HAL_GetTick>
 800c644:	1b80      	subs	r0, r0, r6
 800c646:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c64a:	4298      	cmp	r0, r3
 800c64c:	d9f0      	bls.n	800c630 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 800c64e:	2003      	movs	r0, #3
 800c650:	e08e      	b.n	800c770 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c652:	4a4d      	ldr	r2, [pc, #308]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c654:	6812      	ldr	r2, [r2, #0]
 800c656:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800c65a:	d1e0      	bne.n	800c61e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 800c65c:	2001      	movs	r0, #1
 800c65e:	e087      	b.n	800c770 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c660:	4a49      	ldr	r2, [pc, #292]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c662:	6812      	ldr	r2, [r2, #0]
 800c664:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800c668:	d1d9      	bne.n	800c61e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 800c66a:	2001      	movs	r0, #1
 800c66c:	e080      	b.n	800c770 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	f013 0f02 	tst.w	r3, #2
 800c674:	d00c      	beq.n	800c690 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c676:	68e2      	ldr	r2, [r4, #12]
 800c678:	4b43      	ldr	r3, [pc, #268]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	429a      	cmp	r2, r3
 800c682:	d205      	bcs.n	800c690 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c684:	4940      	ldr	r1, [pc, #256]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c686:	698b      	ldr	r3, [r1, #24]
 800c688:	f023 030f 	bic.w	r3, r3, #15
 800c68c:	431a      	orrs	r2, r3
 800c68e:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c690:	4b3c      	ldr	r3, [pc, #240]	@ (800c784 <HAL_RCC_ClockConfig+0x27c>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 030f 	and.w	r3, r3, #15
 800c698:	42ab      	cmp	r3, r5
 800c69a:	d90a      	bls.n	800c6b2 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c69c:	4a39      	ldr	r2, [pc, #228]	@ (800c784 <HAL_RCC_ClockConfig+0x27c>)
 800c69e:	6813      	ldr	r3, [r2, #0]
 800c6a0:	f023 030f 	bic.w	r3, r3, #15
 800c6a4:	432b      	orrs	r3, r5
 800c6a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6a8:	6813      	ldr	r3, [r2, #0]
 800c6aa:	f003 030f 	and.w	r3, r3, #15
 800c6ae:	42ab      	cmp	r3, r5
 800c6b0:	d165      	bne.n	800c77e <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	f013 0f04 	tst.w	r3, #4
 800c6b8:	d00c      	beq.n	800c6d4 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c6ba:	6922      	ldr	r2, [r4, #16]
 800c6bc:	4b32      	ldr	r3, [pc, #200]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d205      	bcs.n	800c6d4 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c6c8:	492f      	ldr	r1, [pc, #188]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c6ca:	698b      	ldr	r3, [r1, #24]
 800c6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	f013 0f08 	tst.w	r3, #8
 800c6da:	d00c      	beq.n	800c6f6 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c6dc:	6962      	ldr	r2, [r4, #20]
 800c6de:	4b2a      	ldr	r3, [pc, #168]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d205      	bcs.n	800c6f6 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c6ea:	4927      	ldr	r1, [pc, #156]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c6ec:	69cb      	ldr	r3, [r1, #28]
 800c6ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	f013 0f10 	tst.w	r3, #16
 800c6fc:	d00c      	beq.n	800c718 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c6fe:	69a2      	ldr	r2, [r4, #24]
 800c700:	4b21      	ldr	r3, [pc, #132]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c708:	429a      	cmp	r2, r3
 800c70a:	d205      	bcs.n	800c718 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c70c:	491e      	ldr	r1, [pc, #120]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c70e:	69cb      	ldr	r3, [r1, #28]
 800c710:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c714:	431a      	orrs	r2, r3
 800c716:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c718:	6823      	ldr	r3, [r4, #0]
 800c71a:	f013 0f20 	tst.w	r3, #32
 800c71e:	d00c      	beq.n	800c73a <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c720:	69e2      	ldr	r2, [r4, #28]
 800c722:	4b19      	ldr	r3, [pc, #100]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d205      	bcs.n	800c73a <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c72e:	4916      	ldr	r1, [pc, #88]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c730:	6a0b      	ldr	r3, [r1, #32]
 800c732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c736:	431a      	orrs	r2, r3
 800c738:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c73a:	f7ff fdeb 	bl	800c314 <HAL_RCC_GetSysClockFreq>
 800c73e:	4912      	ldr	r1, [pc, #72]	@ (800c788 <HAL_RCC_ClockConfig+0x280>)
 800c740:	698b      	ldr	r3, [r1, #24]
 800c742:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c746:	4a11      	ldr	r2, [pc, #68]	@ (800c78c <HAL_RCC_ClockConfig+0x284>)
 800c748:	5cd3      	ldrb	r3, [r2, r3]
 800c74a:	f003 031f 	and.w	r3, r3, #31
 800c74e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c750:	698b      	ldr	r3, [r1, #24]
 800c752:	f003 030f 	and.w	r3, r3, #15
 800c756:	5cd3      	ldrb	r3, [r2, r3]
 800c758:	f003 031f 	and.w	r3, r3, #31
 800c75c:	fa20 f303 	lsr.w	r3, r0, r3
 800c760:	4a0b      	ldr	r2, [pc, #44]	@ (800c790 <HAL_RCC_ClockConfig+0x288>)
 800c762:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800c764:	4b0b      	ldr	r3, [pc, #44]	@ (800c794 <HAL_RCC_ClockConfig+0x28c>)
 800c766:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800c768:	4b0b      	ldr	r3, [pc, #44]	@ (800c798 <HAL_RCC_ClockConfig+0x290>)
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	f7fb f8d2 	bl	8007914 <HAL_InitTick>
}
 800c770:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800c772:	2001      	movs	r0, #1
}
 800c774:	4770      	bx	lr
      return HAL_ERROR;
 800c776:	2001      	movs	r0, #1
 800c778:	e7fa      	b.n	800c770 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 800c77a:	2001      	movs	r0, #1
 800c77c:	e7f8      	b.n	800c770 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800c77e:	2001      	movs	r0, #1
 800c780:	e7f6      	b.n	800c770 <HAL_RCC_ClockConfig+0x268>
 800c782:	bf00      	nop
 800c784:	52002000 	.word	0x52002000
 800c788:	58024400 	.word	0x58024400
 800c78c:	0802928c 	.word	0x0802928c
 800c790:	240000c8 	.word	0x240000c8
 800c794:	240000cc 	.word	0x240000cc
 800c798:	240000d4 	.word	0x240000d4

0800c79c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c79c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c79e:	f7ff fdb9 	bl	800c314 <HAL_RCC_GetSysClockFreq>
 800c7a2:	4a0b      	ldr	r2, [pc, #44]	@ (800c7d0 <HAL_RCC_GetHCLKFreq+0x34>)
 800c7a4:	6993      	ldr	r3, [r2, #24]
 800c7a6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c7aa:	490a      	ldr	r1, [pc, #40]	@ (800c7d4 <HAL_RCC_GetHCLKFreq+0x38>)
 800c7ac:	5ccb      	ldrb	r3, [r1, r3]
 800c7ae:	f003 031f 	and.w	r3, r3, #31
 800c7b2:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c7b6:	6992      	ldr	r2, [r2, #24]
 800c7b8:	f002 020f 	and.w	r2, r2, #15
 800c7bc:	5c88      	ldrb	r0, [r1, r2]
 800c7be:	f000 001f 	and.w	r0, r0, #31
 800c7c2:	fa23 f000 	lsr.w	r0, r3, r0
 800c7c6:	4a04      	ldr	r2, [pc, #16]	@ (800c7d8 <HAL_RCC_GetHCLKFreq+0x3c>)
 800c7c8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c7ca:	4a04      	ldr	r2, [pc, #16]	@ (800c7dc <HAL_RCC_GetHCLKFreq+0x40>)
 800c7cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800c7ce:	bd08      	pop	{r3, pc}
 800c7d0:	58024400 	.word	0x58024400
 800c7d4:	0802928c 	.word	0x0802928c
 800c7d8:	240000c8 	.word	0x240000c8
 800c7dc:	240000cc 	.word	0x240000cc

0800c7e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7e0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c7e2:	f7ff ffdb 	bl	800c79c <HAL_RCC_GetHCLKFreq>
 800c7e6:	4b05      	ldr	r3, [pc, #20]	@ (800c7fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c7e8:	69db      	ldr	r3, [r3, #28]
 800c7ea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c7ee:	4a04      	ldr	r2, [pc, #16]	@ (800c800 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7f0:	5cd3      	ldrb	r3, [r2, r3]
 800c7f2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c7f6:	40d8      	lsrs	r0, r3
 800c7f8:	bd08      	pop	{r3, pc}
 800c7fa:	bf00      	nop
 800c7fc:	58024400 	.word	0x58024400
 800c800:	0802928c 	.word	0x0802928c

0800c804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c804:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c806:	f7ff ffc9 	bl	800c79c <HAL_RCC_GetHCLKFreq>
 800c80a:	4b05      	ldr	r3, [pc, #20]	@ (800c820 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c812:	4a04      	ldr	r2, [pc, #16]	@ (800c824 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c814:	5cd3      	ldrb	r3, [r2, r3]
 800c816:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c81a:	40d8      	lsrs	r0, r3
 800c81c:	bd08      	pop	{r3, pc}
 800c81e:	bf00      	nop
 800c820:	58024400 	.word	0x58024400
 800c824:	0802928c 	.word	0x0802928c

0800c828 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c828:	4b40      	ldr	r3, [pc, #256]	@ (800c92c <RCCEx_PLL2_Config+0x104>)
 800c82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c82c:	f003 0303 	and.w	r3, r3, #3
 800c830:	2b03      	cmp	r3, #3
 800c832:	d079      	beq.n	800c928 <RCCEx_PLL2_Config+0x100>
{
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	4605      	mov	r5, r0
 800c838:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c83a:	4a3c      	ldr	r2, [pc, #240]	@ (800c92c <RCCEx_PLL2_Config+0x104>)
 800c83c:	6813      	ldr	r3, [r2, #0]
 800c83e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c844:	f7fb f8c8 	bl	80079d8 <HAL_GetTick>
 800c848:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c84a:	4b38      	ldr	r3, [pc, #224]	@ (800c92c <RCCEx_PLL2_Config+0x104>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800c852:	d006      	beq.n	800c862 <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c854:	f7fb f8c0 	bl	80079d8 <HAL_GetTick>
 800c858:	1b03      	subs	r3, r0, r4
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d9f5      	bls.n	800c84a <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800c85e:	2003      	movs	r0, #3

  }


  return status;
}
 800c860:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c862:	4b32      	ldr	r3, [pc, #200]	@ (800c92c <RCCEx_PLL2_Config+0x104>)
 800c864:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c866:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 800c86a:	6829      	ldr	r1, [r5, #0]
 800c86c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800c870:	629a      	str	r2, [r3, #40]	@ 0x28
 800c872:	686a      	ldr	r2, [r5, #4]
 800c874:	3a01      	subs	r2, #1
 800c876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c87a:	68a9      	ldr	r1, [r5, #8]
 800c87c:	3901      	subs	r1, #1
 800c87e:	0249      	lsls	r1, r1, #9
 800c880:	b289      	uxth	r1, r1
 800c882:	430a      	orrs	r2, r1
 800c884:	68e9      	ldr	r1, [r5, #12]
 800c886:	3901      	subs	r1, #1
 800c888:	0409      	lsls	r1, r1, #16
 800c88a:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800c88e:	430a      	orrs	r2, r1
 800c890:	6929      	ldr	r1, [r5, #16]
 800c892:	3901      	subs	r1, #1
 800c894:	0609      	lsls	r1, r1, #24
 800c896:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800c89a:	430a      	orrs	r2, r1
 800c89c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8a0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800c8a4:	6969      	ldr	r1, [r5, #20]
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ac:	f022 0220 	bic.w	r2, r2, #32
 800c8b0:	69a9      	ldr	r1, [r5, #24]
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b8:	f022 0210 	bic.w	r2, r2, #16
 800c8bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c8be:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c8c0:	4a1b      	ldr	r2, [pc, #108]	@ (800c930 <RCCEx_PLL2_Config+0x108>)
 800c8c2:	400a      	ands	r2, r1
 800c8c4:	69e9      	ldr	r1, [r5, #28]
 800c8c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c8ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ce:	f042 0210 	orr.w	r2, r2, #16
 800c8d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c8d4:	b9c6      	cbnz	r6, 800c908 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c8de:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800c8e0:	4a12      	ldr	r2, [pc, #72]	@ (800c92c <RCCEx_PLL2_Config+0x104>)
 800c8e2:	6813      	ldr	r3, [r2, #0]
 800c8e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c8e8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c8ea:	f7fb f875 	bl	80079d8 <HAL_GetTick>
 800c8ee:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c8f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c92c <RCCEx_PLL2_Config+0x104>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800c8f8:	d114      	bne.n	800c924 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c8fa:	f7fb f86d 	bl	80079d8 <HAL_GetTick>
 800c8fe:	1b00      	subs	r0, r0, r4
 800c900:	2802      	cmp	r0, #2
 800c902:	d9f5      	bls.n	800c8f0 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 800c904:	2003      	movs	r0, #3
 800c906:	e7ab      	b.n	800c860 <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 800c908:	2e01      	cmp	r6, #1
 800c90a:	d005      	beq.n	800c918 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c90c:	4a07      	ldr	r2, [pc, #28]	@ (800c92c <RCCEx_PLL2_Config+0x104>)
 800c90e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c914:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c916:	e7e3      	b.n	800c8e0 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c918:	4a04      	ldr	r2, [pc, #16]	@ (800c92c <RCCEx_PLL2_Config+0x104>)
 800c91a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c91c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c920:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c922:	e7dd      	b.n	800c8e0 <RCCEx_PLL2_Config+0xb8>
  return status;
 800c924:	2000      	movs	r0, #0
 800c926:	e79b      	b.n	800c860 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800c928:	2001      	movs	r0, #1
}
 800c92a:	4770      	bx	lr
 800c92c:	58024400 	.word	0x58024400
 800c930:	ffff0007 	.word	0xffff0007

0800c934 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c934:	4b40      	ldr	r3, [pc, #256]	@ (800ca38 <RCCEx_PLL3_Config+0x104>)
 800c936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c938:	f003 0303 	and.w	r3, r3, #3
 800c93c:	2b03      	cmp	r3, #3
 800c93e:	d079      	beq.n	800ca34 <RCCEx_PLL3_Config+0x100>
{
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	4605      	mov	r5, r0
 800c944:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c946:	4a3c      	ldr	r2, [pc, #240]	@ (800ca38 <RCCEx_PLL3_Config+0x104>)
 800c948:	6813      	ldr	r3, [r2, #0]
 800c94a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c94e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c950:	f7fb f842 	bl	80079d8 <HAL_GetTick>
 800c954:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c956:	4b38      	ldr	r3, [pc, #224]	@ (800ca38 <RCCEx_PLL3_Config+0x104>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800c95e:	d006      	beq.n	800c96e <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c960:	f7fb f83a 	bl	80079d8 <HAL_GetTick>
 800c964:	1b03      	subs	r3, r0, r4
 800c966:	2b02      	cmp	r3, #2
 800c968:	d9f5      	bls.n	800c956 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800c96a:	2003      	movs	r0, #3

  }


  return status;
}
 800c96c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c96e:	4b32      	ldr	r3, [pc, #200]	@ (800ca38 <RCCEx_PLL3_Config+0x104>)
 800c970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c972:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 800c976:	6829      	ldr	r1, [r5, #0]
 800c978:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c97c:	629a      	str	r2, [r3, #40]	@ 0x28
 800c97e:	686a      	ldr	r2, [r5, #4]
 800c980:	3a01      	subs	r2, #1
 800c982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c986:	68a9      	ldr	r1, [r5, #8]
 800c988:	3901      	subs	r1, #1
 800c98a:	0249      	lsls	r1, r1, #9
 800c98c:	b289      	uxth	r1, r1
 800c98e:	430a      	orrs	r2, r1
 800c990:	68e9      	ldr	r1, [r5, #12]
 800c992:	3901      	subs	r1, #1
 800c994:	0409      	lsls	r1, r1, #16
 800c996:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800c99a:	430a      	orrs	r2, r1
 800c99c:	6929      	ldr	r1, [r5, #16]
 800c99e:	3901      	subs	r1, #1
 800c9a0:	0609      	lsls	r1, r1, #24
 800c9a2:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800c9a6:	430a      	orrs	r2, r1
 800c9a8:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c9aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ac:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c9b0:	6969      	ldr	r1, [r5, #20]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c9b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c9bc:	69a9      	ldr	r1, [r5, #24]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c9c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c9c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c9ca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800c9cc:	4a1b      	ldr	r2, [pc, #108]	@ (800ca3c <RCCEx_PLL3_Config+0x108>)
 800c9ce:	400a      	ands	r2, r1
 800c9d0:	69e9      	ldr	r1, [r5, #28]
 800c9d2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c9d6:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c9de:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c9e0:	b9c6      	cbnz	r6, 800ca14 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c9ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 800c9ec:	4a12      	ldr	r2, [pc, #72]	@ (800ca38 <RCCEx_PLL3_Config+0x104>)
 800c9ee:	6813      	ldr	r3, [r2, #0]
 800c9f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c9f4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c9f6:	f7fa ffef 	bl	80079d8 <HAL_GetTick>
 800c9fa:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9fc:	4b0e      	ldr	r3, [pc, #56]	@ (800ca38 <RCCEx_PLL3_Config+0x104>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800ca04:	d114      	bne.n	800ca30 <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ca06:	f7fa ffe7 	bl	80079d8 <HAL_GetTick>
 800ca0a:	1b00      	subs	r0, r0, r4
 800ca0c:	2802      	cmp	r0, #2
 800ca0e:	d9f5      	bls.n	800c9fc <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800ca10:	2003      	movs	r0, #3
 800ca12:	e7ab      	b.n	800c96c <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 800ca14:	2e01      	cmp	r6, #1
 800ca16:	d005      	beq.n	800ca24 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ca18:	4a07      	ldr	r2, [pc, #28]	@ (800ca38 <RCCEx_PLL3_Config+0x104>)
 800ca1a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ca1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ca20:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ca22:	e7e3      	b.n	800c9ec <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ca24:	4a04      	ldr	r2, [pc, #16]	@ (800ca38 <RCCEx_PLL3_Config+0x104>)
 800ca26:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ca28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ca2e:	e7dd      	b.n	800c9ec <RCCEx_PLL3_Config+0xb8>
  return status;
 800ca30:	2000      	movs	r0, #0
 800ca32:	e79b      	b.n	800c96c <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 800ca34:	2001      	movs	r0, #1
}
 800ca36:	4770      	bx	lr
 800ca38:	58024400 	.word	0x58024400
 800ca3c:	ffff0007 	.word	0xffff0007

0800ca40 <HAL_RCCEx_PeriphCLKConfig>:
{
 800ca40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca42:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ca44:	6803      	ldr	r3, [r0, #0]
 800ca46:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800ca4a:	d030      	beq.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ca4c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800ca4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ca52:	d026      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800ca54:	d80e      	bhi.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800ca56:	b1eb      	cbz	r3, 800ca94 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800ca58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca5c:	d107      	bne.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca5e:	2102      	movs	r1, #2
 800ca60:	3008      	adds	r0, #8
 800ca62:	f7ff fee1 	bl	800c828 <RCCEx_PLL2_Config>
 800ca66:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ca68:	b145      	cbz	r5, 800ca7c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800ca6a:	462e      	mov	r6, r5
 800ca6c:	e021      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ca6e:	2601      	movs	r6, #1
 800ca70:	4635      	mov	r5, r6
 800ca72:	e01e      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800ca74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ca78:	d109      	bne.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800ca7a:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ca7c:	4a9f      	ldr	r2, [pc, #636]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ca7e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ca80:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ca84:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800ca86:	430b      	orrs	r3, r1
 800ca88:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ca8a:	2600      	movs	r6, #0
 800ca8c:	e011      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ca8e:	2601      	movs	r6, #1
 800ca90:	4635      	mov	r5, r6
 800ca92:	e00e      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca94:	4a99      	ldr	r2, [pc, #612]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ca96:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ca98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ca9e:	2500      	movs	r5, #0
 800caa0:	e7ec      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800caa2:	2102      	movs	r1, #2
 800caa4:	3028      	adds	r0, #40	@ 0x28
 800caa6:	f7ff ff45 	bl	800c934 <RCCEx_PLL3_Config>
 800caaa:	4605      	mov	r5, r0
        break;
 800caac:	e7dc      	b.n	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800caae:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cab0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800cab8:	d027      	beq.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 800caba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cabc:	2b04      	cmp	r3, #4
 800cabe:	d820      	bhi.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800cac0:	e8df f003 	tbb	[pc, r3]
 800cac4:	08181103 	.word	0x08181103
 800cac8:	08          	.byte	0x08
 800cac9:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800caca:	4a8c      	ldr	r2, [pc, #560]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cacc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cad2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800cad4:	b9c5      	cbnz	r5, 800cb08 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cad6:	4a89      	ldr	r2, [pc, #548]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cad8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cada:	f023 0307 	bic.w	r3, r3, #7
 800cade:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800cae0:	430b      	orrs	r3, r1
 800cae2:	6513      	str	r3, [r2, #80]	@ 0x50
 800cae4:	e011      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0xca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cae6:	2100      	movs	r1, #0
 800cae8:	f104 0008 	add.w	r0, r4, #8
 800caec:	f7ff fe9c 	bl	800c828 <RCCEx_PLL2_Config>
 800caf0:	4605      	mov	r5, r0
        break;
 800caf2:	e7ef      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800caf4:	2100      	movs	r1, #0
 800caf6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cafa:	f7ff ff1b 	bl	800c934 <RCCEx_PLL3_Config>
 800cafe:	4605      	mov	r5, r0
        break;
 800cb00:	e7e8      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 800cb02:	2601      	movs	r6, #1
 800cb04:	4635      	mov	r5, r6
 800cb06:	e000      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800cb08:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800cb10:	d022      	beq.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch (PeriphClkInit->Sai4AClockSelection)
 800cb12:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800cb16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb1a:	d03f      	beq.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800cb1c:	d80d      	bhi.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800cb1e:	b3bb      	cbz	r3, 800cb90 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800cb20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cb24:	d106      	bne.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb26:	2100      	movs	r1, #0
 800cb28:	f104 0008 	add.w	r0, r4, #8
 800cb2c:	f7ff fe7c 	bl	800c828 <RCCEx_PLL2_Config>
 800cb30:	4605      	mov	r5, r0
        break;
 800cb32:	e008      	b.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    switch (PeriphClkInit->Sai4AClockSelection)
 800cb34:	2601      	movs	r6, #1
 800cb36:	4635      	mov	r5, r6
 800cb38:	e00e      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x118>
 800cb3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cb3e:	d002      	beq.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cb40:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cb44:	d11e      	bne.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x144>
    if (ret == HAL_OK)
 800cb46:	bb85      	cbnz	r5, 800cbaa <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cb48:	4a6c      	ldr	r2, [pc, #432]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cb4a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cb4c:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800cb50:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 800cb54:	430b      	orrs	r3, r1
 800cb56:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800cb5e:	d039      	beq.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    switch (PeriphClkInit->Sai4BClockSelection)
 800cb60:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800cb64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb68:	d05a      	beq.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800cb6a:	d823      	bhi.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d051      	beq.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800cb70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb74:	d11b      	bne.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb76:	2100      	movs	r1, #0
 800cb78:	f104 0008 	add.w	r0, r4, #8
 800cb7c:	f7ff fe54 	bl	800c828 <RCCEx_PLL2_Config>
 800cb80:	4605      	mov	r5, r0
        break;
 800cb82:	e01d      	b.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch (PeriphClkInit->Sai4AClockSelection)
 800cb84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cb88:	d0dd      	beq.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cb8a:	2601      	movs	r6, #1
 800cb8c:	4635      	mov	r5, r6
 800cb8e:	e7e3      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x118>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb90:	4a5a      	ldr	r2, [pc, #360]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cb92:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cb94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cb9a:	e7d4      	b.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x106>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cba2:	f7ff fec7 	bl	800c934 <RCCEx_PLL3_Config>
 800cba6:	4605      	mov	r5, r0
        break;
 800cba8:	e7cd      	b.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cbaa:	462e      	mov	r6, r5
 800cbac:	e7d4      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch (PeriphClkInit->Sai4BClockSelection)
 800cbae:	2601      	movs	r6, #1
 800cbb0:	4635      	mov	r5, r6
 800cbb2:	e00f      	b.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 800cbb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cbb8:	d002      	beq.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800cbba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800cbbe:	d123      	bne.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    if (ret == HAL_OK)
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	d134      	bne.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cbc4:	4a4d      	ldr	r2, [pc, #308]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cbc6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cbc8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800cbcc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800cbd0:	430b      	orrs	r3, r1
 800cbd2:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800cbda:	d031      	beq.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->OspiClockSelection)
 800cbdc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cbde:	2b20      	cmp	r3, #32
 800cbe0:	d042      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800cbe2:	d829      	bhi.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800cbe4:	b133      	cbz	r3, 800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800cbe6:	2b10      	cmp	r3, #16
 800cbe8:	d123      	bne.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbea:	4a44      	ldr	r2, [pc, #272]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cbec:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cbee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800cbf4:	2d00      	cmp	r5, #0
 800cbf6:	d13e      	bne.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800cbf8:	4a40      	ldr	r2, [pc, #256]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cbfa:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800cbfc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800cc00:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800cc02:	430b      	orrs	r3, r1
 800cc04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cc06:	e01b      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Sai4BClockSelection)
 800cc08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cc0c:	d0d8      	beq.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800cc0e:	2601      	movs	r6, #1
 800cc10:	4635      	mov	r5, r6
 800cc12:	e7df      	b.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc14:	4a39      	ldr	r2, [pc, #228]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cc16:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cc18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cc1e:	e7cf      	b.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc20:	2100      	movs	r1, #0
 800cc22:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cc26:	f7ff fe85 	bl	800c934 <RCCEx_PLL3_Config>
 800cc2a:	4605      	mov	r5, r0
        break;
 800cc2c:	e7c8      	b.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800cc2e:	462e      	mov	r6, r5
 800cc30:	e7d0      	b.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    switch (PeriphClkInit->OspiClockSelection)
 800cc32:	2601      	movs	r6, #1
 800cc34:	4635      	mov	r5, r6
 800cc36:	e003      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800cc38:	2b30      	cmp	r3, #48	@ 0x30
 800cc3a:	d0db      	beq.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800cc3c:	2601      	movs	r6, #1
 800cc3e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800cc46:	d03b      	beq.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    switch (PeriphClkInit->Spi123ClockSelection)
 800cc48:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800cc4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc4e:	d02f      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x270>
 800cc50:	d816      	bhi.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800cc52:	b33b      	cbz	r3, 800cca4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800cc54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc58:	d10f      	bne.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x23a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	f104 0008 	add.w	r0, r4, #8
 800cc60:	f7ff fde2 	bl	800c828 <RCCEx_PLL2_Config>
 800cc64:	4605      	mov	r5, r0
        break;
 800cc66:	e011      	b.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x24c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc68:	2102      	movs	r1, #2
 800cc6a:	f104 0008 	add.w	r0, r4, #8
 800cc6e:	f7ff fddb 	bl	800c828 <RCCEx_PLL2_Config>
 800cc72:	4605      	mov	r5, r0
        break;
 800cc74:	e7be      	b.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800cc76:	462e      	mov	r6, r5
 800cc78:	e7e2      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi123ClockSelection)
 800cc7a:	2601      	movs	r6, #1
 800cc7c:	4635      	mov	r5, r6
 800cc7e:	e01f      	b.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800cc80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cc84:	d002      	beq.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800cc86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc8a:	d108      	bne.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    if (ret == HAL_OK)
 800cc8c:	b9bd      	cbnz	r5, 800ccbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cc8e:	4a1b      	ldr	r2, [pc, #108]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cc90:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cc92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc96:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	6513      	str	r3, [r2, #80]	@ 0x50
 800cc9c:	e010      	b.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    switch (PeriphClkInit->Spi123ClockSelection)
 800cc9e:	2601      	movs	r6, #1
 800cca0:	4635      	mov	r5, r6
 800cca2:	e00d      	b.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cca4:	4a15      	ldr	r2, [pc, #84]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800cca6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ccae:	e7ed      	b.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x24c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ccb6:	f7ff fe3d 	bl	800c934 <RCCEx_PLL3_Config>
 800ccba:	4605      	mov	r5, r0
        break;
 800ccbc:	e7e6      	b.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800ccbe:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ccc0:	6823      	ldr	r3, [r4, #0]
 800ccc2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800ccc6:	d029      	beq.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800ccc8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800ccca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccce:	d044      	beq.n	800cd5a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800ccd0:	d819      	bhi.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 800ccd2:	b143      	cbz	r3, 800cce6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ccd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccd8:	d112      	bne.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccda:	2101      	movs	r1, #1
 800ccdc:	f104 0008 	add.w	r0, r4, #8
 800cce0:	f7ff fda2 	bl	800c828 <RCCEx_PLL2_Config>
 800cce4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cce6:	2d00      	cmp	r5, #0
 800cce8:	d13e      	bne.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x328>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ccea:	4a04      	ldr	r2, [pc, #16]	@ (800ccfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ccec:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ccee:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800ccf2:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800ccf4:	430b      	orrs	r3, r1
 800ccf6:	6513      	str	r3, [r2, #80]	@ 0x50
 800ccf8:	e010      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800ccfa:	bf00      	nop
 800ccfc:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi45ClockSelection)
 800cd00:	2601      	movs	r6, #1
 800cd02:	4635      	mov	r5, r6
 800cd04:	e00a      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800cd06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cd0a:	d0ec      	beq.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800cd0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cd10:	d0e9      	beq.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800cd12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cd16:	d0e6      	beq.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800cd18:	2601      	movs	r6, #1
 800cd1a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800cd22:	d031      	beq.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x348>
    switch (PeriphClkInit->Spi6ClockSelection)
 800cd24:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800cd28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd2c:	d045      	beq.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800cd2e:	d820      	bhi.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800cd30:	b143      	cbz	r3, 800cd44 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800cd32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd36:	d119      	bne.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x32c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd38:	2101      	movs	r1, #1
 800cd3a:	f104 0008 	add.w	r0, r4, #8
 800cd3e:	f7ff fd73 	bl	800c828 <RCCEx_PLL2_Config>
 800cd42:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cd44:	2d00      	cmp	r5, #0
 800cd46:	d13f      	bne.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cd48:	4a8f      	ldr	r2, [pc, #572]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd4a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cd4c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800cd50:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800cd54:	430b      	orrs	r3, r1
 800cd56:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd58:	e016      	b.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x348>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cd60:	f7ff fde8 	bl	800c934 <RCCEx_PLL3_Config>
 800cd64:	4605      	mov	r5, r0
        break;
 800cd66:	e7be      	b.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800cd68:	462e      	mov	r6, r5
 800cd6a:	e7d7      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (PeriphClkInit->Spi6ClockSelection)
 800cd6c:	2601      	movs	r6, #1
 800cd6e:	4635      	mov	r5, r6
 800cd70:	e00a      	b.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800cd72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd76:	d0e5      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800cd78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd7c:	d0e2      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800cd7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd82:	d0df      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800cd84:	2601      	movs	r6, #1
 800cd86:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800cd8e:	d009      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x364>
    switch (PeriphClkInit->FdcanClockSelection)
 800cd90:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cd92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd96:	d019      	beq.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800cd98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd9c:	d024      	beq.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800cd9e:	b1d3      	cbz	r3, 800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 800cda0:	2601      	movs	r6, #1
 800cda2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cda4:	6823      	ldr	r3, [r4, #0]
 800cda6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800cdaa:	d033      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
 800cdac:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d85b      	bhi.n	800ce6a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800cdb2:	e8df f003 	tbb	[pc, r3]
 800cdb6:	2227      	.short	0x2227
 800cdb8:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cdba:	2101      	movs	r1, #1
 800cdbc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cdc0:	f7ff fdb8 	bl	800c934 <RCCEx_PLL3_Config>
 800cdc4:	4605      	mov	r5, r0
        break;
 800cdc6:	e7bd      	b.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800cdc8:	462e      	mov	r6, r5
 800cdca:	e7dd      	b.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x348>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdcc:	4a6e      	ldr	r2, [pc, #440]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cdce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cdd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800cdd6:	b975      	cbnz	r5, 800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cdd8:	4a6b      	ldr	r2, [pc, #428]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cdda:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cddc:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800cde0:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800cde2:	430b      	orrs	r3, r1
 800cde4:	6513      	str	r3, [r2, #80]	@ 0x50
 800cde6:	e7dd      	b.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x364>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cde8:	2101      	movs	r1, #1
 800cdea:	f104 0008 	add.w	r0, r4, #8
 800cdee:	f7ff fd1b 	bl	800c828 <RCCEx_PLL2_Config>
 800cdf2:	4605      	mov	r5, r0
        break;
 800cdf4:	e7ef      	b.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 800cdf6:	462e      	mov	r6, r5
 800cdf8:	e7d4      	b.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdfa:	4a63      	ldr	r2, [pc, #396]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cdfc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cdfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce02:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ce04:	bba5      	cbnz	r5, 800ce70 <HAL_RCCEx_PeriphCLKConfig+0x430>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ce06:	4a60      	ldr	r2, [pc, #384]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ce08:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ce0a:	f023 0303 	bic.w	r3, r3, #3
 800ce0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ce10:	430b      	orrs	r3, r1
 800ce12:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800ce1a:	d12b      	bne.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x434>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	f013 0f01 	tst.w	r3, #1
 800ce22:	f000 80a3 	beq.w	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    switch (PeriphClkInit->Usart16ClockSelection)
 800ce26:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ce28:	2b28      	cmp	r3, #40	@ 0x28
 800ce2a:	f200 809d 	bhi.w	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ce2e:	e8df f003 	tbb	[pc, r3]
 800ce32:	9b8b      	.short	0x9b8b
 800ce34:	9b9b9b9b 	.word	0x9b9b9b9b
 800ce38:	9b859b9b 	.word	0x9b859b9b
 800ce3c:	9b9b9b9b 	.word	0x9b9b9b9b
 800ce40:	9b949b9b 	.word	0x9b949b9b
 800ce44:	9b9b9b9b 	.word	0x9b9b9b9b
 800ce48:	9b8b9b9b 	.word	0x9b8b9b9b
 800ce4c:	9b9b9b9b 	.word	0x9b9b9b9b
 800ce50:	9b8b9b9b 	.word	0x9b8b9b9b
 800ce54:	9b9b9b9b 	.word	0x9b9b9b9b
 800ce58:	9b9b      	.short	0x9b9b
 800ce5a:	8b          	.byte	0x8b
 800ce5b:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce5c:	2102      	movs	r1, #2
 800ce5e:	f104 0008 	add.w	r0, r4, #8
 800ce62:	f7ff fce1 	bl	800c828 <RCCEx_PLL2_Config>
 800ce66:	4605      	mov	r5, r0
        break;
 800ce68:	e7cc      	b.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FmcClockSelection)
 800ce6a:	2601      	movs	r6, #1
 800ce6c:	4635      	mov	r5, r6
 800ce6e:	e7d1      	b.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800ce70:	462e      	mov	r6, r5
 800ce72:	e7cf      	b.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce74:	4a45      	ldr	r2, [pc, #276]	@ (800cf8c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800ce76:	6813      	ldr	r3, [r2, #0]
 800ce78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce7c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ce7e:	f7fa fdab 	bl	80079d8 <HAL_GetTick>
 800ce82:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce84:	4b41      	ldr	r3, [pc, #260]	@ (800cf8c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800ce8c:	d105      	bne.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x45a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce8e:	f7fa fda3 	bl	80079d8 <HAL_GetTick>
 800ce92:	1bc0      	subs	r0, r0, r7
 800ce94:	2864      	cmp	r0, #100	@ 0x64
 800ce96:	d9f5      	bls.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        ret = HAL_TIMEOUT;
 800ce98:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 800ce9a:	2d00      	cmp	r5, #0
 800ce9c:	d14a      	bne.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ce9e:	4b3a      	ldr	r3, [pc, #232]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cea2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 800cea6:	4053      	eors	r3, r2
 800cea8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ceac:	d00c      	beq.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x488>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ceae:	4b36      	ldr	r3, [pc, #216]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ceb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ceb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800ceb6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ceb8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800cebc:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cebe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cec0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800cec4:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800cec6:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cec8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800cecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ced0:	d015      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if (ret == HAL_OK)
 800ced2:	bb8d      	cbnz	r5, 800cf38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ced4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800ced8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800cedc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800cee0:	d01e      	beq.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800cee2:	4a29      	ldr	r2, [pc, #164]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cee4:	6913      	ldr	r3, [r2, #16]
 800cee6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ceea:	6113      	str	r3, [r2, #16]
 800ceec:	4926      	ldr	r1, [pc, #152]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ceee:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 800cef0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 800cef4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800cef8:	4313      	orrs	r3, r2
 800cefa:	670b      	str	r3, [r1, #112]	@ 0x70
 800cefc:	e78e      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        tickstart = HAL_GetTick();
 800cefe:	f7fa fd6b 	bl	80079d8 <HAL_GetTick>
 800cf02:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf04:	4b20      	ldr	r3, [pc, #128]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cf06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf08:	f013 0f02 	tst.w	r3, #2
 800cf0c:	d1e1      	bne.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf0e:	f7fa fd63 	bl	80079d8 <HAL_GetTick>
 800cf12:	1bc0      	subs	r0, r0, r7
 800cf14:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cf18:	4298      	cmp	r0, r3
 800cf1a:	d9f3      	bls.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
            ret = HAL_TIMEOUT;
 800cf1c:	2503      	movs	r5, #3
 800cf1e:	e7d8      	b.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x492>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf20:	4819      	ldr	r0, [pc, #100]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cf22:	6902      	ldr	r2, [r0, #16]
 800cf24:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800cf28:	4919      	ldr	r1, [pc, #100]	@ (800cf90 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800cf2a:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	6103      	str	r3, [r0, #16]
 800cf32:	e7db      	b.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      status = ret;
 800cf34:	462e      	mov	r6, r5
 800cf36:	e771      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        status = ret;
 800cf38:	462e      	mov	r6, r5
 800cf3a:	e76f      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf3c:	2101      	movs	r1, #1
 800cf3e:	f104 0008 	add.w	r0, r4, #8
 800cf42:	f7ff fc71 	bl	800c828 <RCCEx_PLL2_Config>
 800cf46:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cf48:	b9e5      	cbnz	r5, 800cf84 <HAL_RCCEx_PeriphCLKConfig+0x544>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cf4a:	4a0f      	ldr	r2, [pc, #60]	@ (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cf4c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cf4e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800cf52:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800cf54:	430b      	orrs	r3, r1
 800cf56:	6553      	str	r3, [r2, #84]	@ 0x54
 800cf58:	e008      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf5a:	2101      	movs	r1, #1
 800cf5c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cf60:	f7ff fce8 	bl	800c934 <RCCEx_PLL3_Config>
 800cf64:	4605      	mov	r5, r0
        break;
 800cf66:	e7ef      	b.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x508>
    switch (PeriphClkInit->Usart16ClockSelection)
 800cf68:	2601      	movs	r6, #1
 800cf6a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	f013 0f02 	tst.w	r3, #2
 800cf72:	d01d      	beq.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cf74:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800cf76:	2b05      	cmp	r3, #5
 800cf78:	d82e      	bhi.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800cf7a:	e8df f003 	tbb	[pc, r3]
 800cf7e:	0b11      	.short	0x0b11
 800cf80:	11111126 	.word	0x11111126
 800cf84:	462e      	mov	r6, r5
 800cf86:	e7f1      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800cf88:	58024400 	.word	0x58024400
 800cf8c:	58024800 	.word	0x58024800
 800cf90:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf94:	2101      	movs	r1, #1
 800cf96:	f104 0008 	add.w	r0, r4, #8
 800cf9a:	f7ff fc45 	bl	800c828 <RCCEx_PLL2_Config>
 800cf9e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cfa0:	b9ed      	cbnz	r5, 800cfde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cfa2:	4aa9      	ldr	r2, [pc, #676]	@ (800d248 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800cfa4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cfa6:	f023 0307 	bic.w	r3, r3, #7
 800cfaa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800cfac:	430b      	orrs	r3, r1
 800cfae:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cfb0:	6823      	ldr	r3, [r4, #0]
 800cfb2:	f013 0f04 	tst.w	r3, #4
 800cfb6:	d023      	beq.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cfb8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800cfbc:	2b05      	cmp	r3, #5
 800cfbe:	d845      	bhi.n	800d04c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800cfc0:	e8df f003 	tbb	[pc, r3]
 800cfc4:	153d0f15 	.word	0x153d0f15
 800cfc8:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfca:	2101      	movs	r1, #1
 800cfcc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cfd0:	f7ff fcb0 	bl	800c934 <RCCEx_PLL3_Config>
 800cfd4:	4605      	mov	r5, r0
        break;
 800cfd6:	e7e3      	b.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cfd8:	2601      	movs	r6, #1
 800cfda:	4635      	mov	r5, r6
 800cfdc:	e7e8      	b.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800cfde:	462e      	mov	r6, r5
 800cfe0:	e7e6      	b.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfe2:	2101      	movs	r1, #1
 800cfe4:	f104 0008 	add.w	r0, r4, #8
 800cfe8:	f7ff fc1e 	bl	800c828 <RCCEx_PLL2_Config>
 800cfec:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cfee:	bb85      	cbnz	r5, 800d052 <HAL_RCCEx_PeriphCLKConfig+0x612>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cff0:	4a95      	ldr	r2, [pc, #596]	@ (800d248 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800cff2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cff4:	f023 0307 	bic.w	r3, r3, #7
 800cff8:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800cffc:	430b      	orrs	r3, r1
 800cffe:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	f013 0f20 	tst.w	r3, #32
 800d006:	d034      	beq.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x632>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d008:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d00c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d010:	d04e      	beq.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800d012:	d823      	bhi.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800d014:	b143      	cbz	r3, 800d028 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800d016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d01a:	d11c      	bne.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d01c:	2100      	movs	r1, #0
 800d01e:	f104 0008 	add.w	r0, r4, #8
 800d022:	f7ff fc01 	bl	800c828 <RCCEx_PLL2_Config>
 800d026:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d028:	2d00      	cmp	r5, #0
 800d02a:	d148      	bne.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d02c:	4a86      	ldr	r2, [pc, #536]	@ (800d248 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800d02e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d030:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800d034:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800d038:	430b      	orrs	r3, r1
 800d03a:	6553      	str	r3, [r2, #84]	@ 0x54
 800d03c:	e019      	b.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x632>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d03e:	2101      	movs	r1, #1
 800d040:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d044:	f7ff fc76 	bl	800c934 <RCCEx_PLL3_Config>
 800d048:	4605      	mov	r5, r0
        break;
 800d04a:	e7d0      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d04c:	2601      	movs	r6, #1
 800d04e:	4635      	mov	r5, r6
 800d050:	e7d6      	b.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d052:	462e      	mov	r6, r5
 800d054:	e7d4      	b.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d056:	2601      	movs	r6, #1
 800d058:	4635      	mov	r5, r6
 800d05a:	e00a      	b.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x632>
 800d05c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d060:	d0e2      	beq.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800d062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d066:	d0df      	beq.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800d068:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d06c:	d0dc      	beq.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800d06e:	2601      	movs	r6, #1
 800d070:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d072:	6823      	ldr	r3, [r4, #0]
 800d074:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800d078:	d031      	beq.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x69e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d07a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800d07e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d082:	d04d      	beq.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800d084:	d820      	bhi.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800d086:	b143      	cbz	r3, 800d09a <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800d088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d08c:	d119      	bne.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d08e:	2100      	movs	r1, #0
 800d090:	f104 0008 	add.w	r0, r4, #8
 800d094:	f7ff fbc8 	bl	800c828 <RCCEx_PLL2_Config>
 800d098:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d09a:	2d00      	cmp	r5, #0
 800d09c:	d147      	bne.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d09e:	4a6a      	ldr	r2, [pc, #424]	@ (800d248 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800d0a0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d0a2:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800d0a6:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800d0aa:	430b      	orrs	r3, r1
 800d0ac:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0ae:	e016      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x69e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0b0:	2102      	movs	r1, #2
 800d0b2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d0b6:	f7ff fc3d 	bl	800c934 <RCCEx_PLL3_Config>
 800d0ba:	4605      	mov	r5, r0
        break;
 800d0bc:	e7b4      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800d0be:	462e      	mov	r6, r5
 800d0c0:	e7d7      	b.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x632>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d0c2:	2601      	movs	r6, #1
 800d0c4:	4635      	mov	r5, r6
 800d0c6:	e00a      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x69e>
 800d0c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0cc:	d0e5      	beq.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800d0ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d0d2:	d0e2      	beq.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800d0d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d0d8:	d0df      	beq.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800d0da:	2601      	movs	r6, #1
 800d0dc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0e4:	d033      	beq.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d0e6:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800d0ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d0ee:	f000 80a1 	beq.w	800d234 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 800d0f2:	d821      	bhi.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800d0f4:	b143      	cbz	r3, 800d108 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800d0f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0fa:	d11a      	bne.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	f104 0008 	add.w	r0, r4, #8
 800d102:	f7ff fb91 	bl	800c828 <RCCEx_PLL2_Config>
 800d106:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d108:	2d00      	cmp	r5, #0
 800d10a:	f040 809a 	bne.w	800d242 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d10e:	4a4e      	ldr	r2, [pc, #312]	@ (800d248 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800d110:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d112:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800d116:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800d11a:	430b      	orrs	r3, r1
 800d11c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d11e:	e016      	b.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x70e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d120:	2102      	movs	r1, #2
 800d122:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d126:	f7ff fc05 	bl	800c934 <RCCEx_PLL3_Config>
 800d12a:	4605      	mov	r5, r0
        break;
 800d12c:	e7b5      	b.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800d12e:	462e      	mov	r6, r5
 800d130:	e7d5      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x69e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d132:	2601      	movs	r6, #1
 800d134:	4635      	mov	r5, r6
 800d136:	e00a      	b.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800d138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d13c:	d0e4      	beq.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800d13e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d142:	d0e1      	beq.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800d144:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d148:	d0de      	beq.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800d14a:	2601      	movs	r6, #1
 800d14c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	f013 0f08 	tst.w	r3, #8
 800d154:	d00c      	beq.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x730>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d156:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d15a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d15e:	d075      	beq.n	800d24c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d160:	4a39      	ldr	r2, [pc, #228]	@ (800d248 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800d162:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d164:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800d168:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800d16c:	430b      	orrs	r3, r1
 800d16e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	f013 0f10 	tst.w	r3, #16
 800d176:	d00c      	beq.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x752>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d178:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800d17c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d180:	d06d      	beq.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x81e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d182:	4a31      	ldr	r2, [pc, #196]	@ (800d248 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800d184:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d18a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d18e:	430b      	orrs	r3, r1
 800d190:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800d198:	d00b      	beq.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x772>
    switch (PeriphClkInit->AdcClockSelection)
 800d19a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800d19e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1a2:	d075      	beq.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800d1a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1a8:	d068      	beq.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d060      	beq.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d1ae:	2601      	movs	r6, #1
 800d1b0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d1b2:	6823      	ldr	r3, [r4, #0]
 800d1b4:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800d1b8:	d00c      	beq.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch (PeriphClkInit->UsbClockSelection)
 800d1ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d1be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d1c2:	d07d      	beq.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x880>
 800d1c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d1c8:	d070      	beq.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800d1ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1ce:	d068      	beq.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x862>
 800d1d0:	2601      	movs	r6, #1
 800d1d2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d1d4:	6823      	ldr	r3, [r4, #0]
 800d1d6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800d1da:	d008      	beq.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    switch (PeriphClkInit->SdmmcClockSelection)
 800d1dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d077      	beq.n	800d2d2 <HAL_RCCEx_PeriphCLKConfig+0x892>
 800d1e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1e6:	f000 8082 	beq.w	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 800d1ea:	2601      	movs	r6, #1
 800d1ec:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d1ee:	6823      	ldr	r3, [r4, #0]
 800d1f0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800d1f4:	f040 8084 	bne.w	800d300 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d1f8:	6823      	ldr	r3, [r4, #0]
 800d1fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800d1fe:	f000 808c 	beq.w	800d31a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    switch (PeriphClkInit->RngClockSelection)
 800d202:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800d204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d208:	f000 80df 	beq.w	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800d20c:	f240 8082 	bls.w	800d314 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 800d210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d214:	d003      	beq.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800d216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d21a:	f040 80d4 	bne.w	800d3c6 <HAL_RCCEx_PeriphCLKConfig+0x986>
    if (ret == HAL_OK)
 800d21e:	2d00      	cmp	r5, #0
 800d220:	f040 80d9 	bne.w	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d224:	4a08      	ldr	r2, [pc, #32]	@ (800d248 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800d226:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d22c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800d22e:	430b      	orrs	r3, r1
 800d230:	6553      	str	r3, [r2, #84]	@ 0x54
 800d232:	e072      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x8da>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d234:	2102      	movs	r1, #2
 800d236:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d23a:	f7ff fb7b 	bl	800c934 <RCCEx_PLL3_Config>
 800d23e:	4605      	mov	r5, r0
        break;
 800d240:	e762      	b.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800d242:	462e      	mov	r6, r5
 800d244:	e783      	b.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800d246:	bf00      	nop
 800d248:	58024400 	.word	0x58024400
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d24c:	2102      	movs	r1, #2
 800d24e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d252:	f7ff fb6f 	bl	800c934 <RCCEx_PLL3_Config>
 800d256:	2800      	cmp	r0, #0
 800d258:	d082      	beq.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x720>
        status = HAL_ERROR;
 800d25a:	2601      	movs	r6, #1
 800d25c:	e780      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x720>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d25e:	2102      	movs	r1, #2
 800d260:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d264:	f7ff fb66 	bl	800c934 <RCCEx_PLL3_Config>
 800d268:	2800      	cmp	r0, #0
 800d26a:	d08a      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x742>
        status = HAL_ERROR;
 800d26c:	2601      	movs	r6, #1
 800d26e:	e788      	b.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x742>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d270:	2100      	movs	r1, #0
 800d272:	f104 0008 	add.w	r0, r4, #8
 800d276:	f7ff fad7 	bl	800c828 <RCCEx_PLL2_Config>
 800d27a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d27c:	b97d      	cbnz	r5, 800d29e <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d27e:	4a72      	ldr	r2, [pc, #456]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d280:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d282:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800d286:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800d28a:	430b      	orrs	r3, r1
 800d28c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d28e:	e790      	b.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x772>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d290:	2102      	movs	r1, #2
 800d292:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d296:	f7ff fb4d 	bl	800c934 <RCCEx_PLL3_Config>
 800d29a:	4605      	mov	r5, r0
        break;
 800d29c:	e7ee      	b.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800d29e:	462e      	mov	r6, r5
 800d2a0:	e787      	b.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x772>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2a2:	4a69      	ldr	r2, [pc, #420]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d2a4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d2a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d2ac:	b97d      	cbnz	r5, 800d2ce <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d2ae:	4a66      	ldr	r2, [pc, #408]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d2b0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d2b2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d2b6:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800d2ba:	430b      	orrs	r3, r1
 800d2bc:	6553      	str	r3, [r2, #84]	@ 0x54
 800d2be:	e789      	b.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d2c6:	f7ff fb35 	bl	800c934 <RCCEx_PLL3_Config>
 800d2ca:	4605      	mov	r5, r0
        break;
 800d2cc:	e7ee      	b.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800d2ce:	462e      	mov	r6, r5
 800d2d0:	e780      	b.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2d2:	4a5d      	ldr	r2, [pc, #372]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d2d4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d2d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2da:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d2dc:	b975      	cbnz	r5, 800d2fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d2de:	4a5a      	ldr	r2, [pc, #360]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d2e0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d2e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2e6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800d2e8:	430b      	orrs	r3, r1
 800d2ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d2ec:	e77f      	b.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d2ee:	2102      	movs	r1, #2
 800d2f0:	f104 0008 	add.w	r0, r4, #8
 800d2f4:	f7ff fa98 	bl	800c828 <RCCEx_PLL2_Config>
 800d2f8:	4605      	mov	r5, r0
        break;
 800d2fa:	e7ef      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800d2fc:	462e      	mov	r6, r5
 800d2fe:	e776      	b.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d300:	2102      	movs	r1, #2
 800d302:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d306:	f7ff fb15 	bl	800c934 <RCCEx_PLL3_Config>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	f43f af74 	beq.w	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      status = HAL_ERROR;
 800d310:	2601      	movs	r6, #1
 800d312:	e771      	b.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch (PeriphClkInit->RngClockSelection)
 800d314:	2b00      	cmp	r3, #0
 800d316:	d082      	beq.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800d318:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800d320:	d006      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d322:	4a49      	ldr	r2, [pc, #292]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d324:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d326:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d32a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800d32c:	430b      	orrs	r3, r1
 800d32e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d330:	6823      	ldr	r3, [r4, #0]
 800d332:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800d336:	d006      	beq.n	800d346 <HAL_RCCEx_PeriphCLKConfig+0x906>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d338:	4a43      	ldr	r2, [pc, #268]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d33a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d33c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d340:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d342:	430b      	orrs	r3, r1
 800d344:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d34c:	d009      	beq.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0x922>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d34e:	4b3e      	ldr	r3, [pc, #248]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d350:	691a      	ldr	r2, [r3, #16]
 800d352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d356:	611a      	str	r2, [r3, #16]
 800d358:	691a      	ldr	r2, [r3, #16]
 800d35a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 800d35e:	430a      	orrs	r2, r1
 800d360:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	da06      	bge.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x936>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d368:	4a37      	ldr	r2, [pc, #220]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d36a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d36c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800d370:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d372:	430b      	orrs	r3, r1
 800d374:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800d37c:	d007      	beq.n	800d38e <HAL_RCCEx_PeriphCLKConfig+0x94e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d37e:	4a32      	ldr	r2, [pc, #200]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d380:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d382:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800d386:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800d38a:	430b      	orrs	r3, r1
 800d38c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d38e:	6863      	ldr	r3, [r4, #4]
 800d390:	f013 0f01 	tst.w	r3, #1
 800d394:	d121      	bne.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x99a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d396:	6863      	ldr	r3, [r4, #4]
 800d398:	f013 0f02 	tst.w	r3, #2
 800d39c:	d126      	bne.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d39e:	6863      	ldr	r3, [r4, #4]
 800d3a0:	f013 0f04 	tst.w	r3, #4
 800d3a4:	d12b      	bne.n	800d3fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d3a6:	6863      	ldr	r3, [r4, #4]
 800d3a8:	f013 0f08 	tst.w	r3, #8
 800d3ac:	d130      	bne.n	800d410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d3ae:	6863      	ldr	r3, [r4, #4]
 800d3b0:	f013 0f10 	tst.w	r3, #16
 800d3b4:	d135      	bne.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d3b6:	6863      	ldr	r3, [r4, #4]
 800d3b8:	f013 0f20 	tst.w	r3, #32
 800d3bc:	d13a      	bne.n	800d434 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  if (status == HAL_OK)
 800d3be:	b106      	cbz	r6, 800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  return HAL_ERROR;
 800d3c0:	2601      	movs	r6, #1
}
 800d3c2:	4630      	mov	r0, r6
 800d3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 800d3c6:	2601      	movs	r6, #1
 800d3c8:	e7a7      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x8da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d3ca:	4a1f      	ldr	r2, [pc, #124]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800d3cc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d3ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d3d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800d3d4:	e723      	b.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800d3d6:	462e      	mov	r6, r5
 800d3d8:	e79f      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3da:	2100      	movs	r1, #0
 800d3dc:	f104 0008 	add.w	r0, r4, #8
 800d3e0:	f7ff fa22 	bl	800c828 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d0d6      	beq.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x956>
      status = ret;
 800d3e8:	4606      	mov	r6, r0
 800d3ea:	e7d4      	b.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x956>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	f104 0008 	add.w	r0, r4, #8
 800d3f2:	f7ff fa19 	bl	800c828 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d0d1      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x95e>
      status = ret;
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	e7cf      	b.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x95e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d3fe:	2102      	movs	r1, #2
 800d400:	f104 0008 	add.w	r0, r4, #8
 800d404:	f7ff fa10 	bl	800c828 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d408:	2800      	cmp	r0, #0
 800d40a:	d0cc      	beq.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0x966>
      status = ret;
 800d40c:	4606      	mov	r6, r0
 800d40e:	e7ca      	b.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0x966>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d410:	2100      	movs	r1, #0
 800d412:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d416:	f7ff fa8d 	bl	800c934 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d0c7      	beq.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
      status = ret;
 800d41e:	4606      	mov	r6, r0
 800d420:	e7c5      	b.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d422:	2101      	movs	r1, #1
 800d424:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d428:	f7ff fa84 	bl	800c934 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d0c2      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      status = ret;
 800d430:	4606      	mov	r6, r0
 800d432:	e7c0      	b.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d434:	2102      	movs	r1, #2
 800d436:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d43a:	f7ff fa7b 	bl	800c934 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d43e:	2800      	cmp	r0, #0
 800d440:	d0bd      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x97e>
  return HAL_ERROR;
 800d442:	2601      	movs	r6, #1
 800d444:	e7bd      	b.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x982>
 800d446:	bf00      	nop
 800d448:	58024400 	.word	0x58024400

0800d44c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800d44c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d44e:	f7ff f9a5 	bl	800c79c <HAL_RCC_GetHCLKFreq>
 800d452:	4b05      	ldr	r3, [pc, #20]	@ (800d468 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d45a:	4a04      	ldr	r2, [pc, #16]	@ (800d46c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800d45c:	5cd3      	ldrb	r3, [r2, r3]
 800d45e:	f003 031f 	and.w	r3, r3, #31
}
 800d462:	40d8      	lsrs	r0, r3
 800d464:	bd08      	pop	{r3, pc}
 800d466:	bf00      	nop
 800d468:	58024400 	.word	0x58024400
 800d46c:	0802928c 	.word	0x0802928c

0800d470 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800d470:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d472:	4b78      	ldr	r3, [pc, #480]	@ (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800d474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d476:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800d478:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d47c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d47e:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d484:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800d488:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 800d48c:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 800d490:	f000 80db 	beq.w	800d64a <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 800d494:	f002 0203 	and.w	r2, r2, #3
 800d498:	ee07 3a90 	vmov	s15, r3
 800d49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800d4a0:	2a01      	cmp	r2, #1
 800d4a2:	d066      	beq.n	800d572 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 800d4a4:	2a02      	cmp	r2, #2
 800d4a6:	f000 80b3 	beq.w	800d610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d4aa:	b1e2      	cbz	r2, 800d4e6 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4ac:	ee07 ca10 	vmov	s14, ip
 800d4b0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d4b4:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800d658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800d4b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d4bc:	4b65      	ldr	r3, [pc, #404]	@ (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800d4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c4:	ee06 3a90 	vmov	s13, r3
 800d4c8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d4cc:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800d4d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d4d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4e0:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800d4e4:	e061      	b.n	800d5aa <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4e6:	4b5b      	ldr	r3, [pc, #364]	@ (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f013 0f20 	tst.w	r3, #32
 800d4ee:	d023      	beq.n	800d538 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4f0:	4958      	ldr	r1, [pc, #352]	@ (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800d4f2:	680a      	ldr	r2, [r1, #0]
 800d4f4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800d4f8:	4b59      	ldr	r3, [pc, #356]	@ (800d660 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 800d4fa:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4fc:	ee07 3a10 	vmov	s14, r3
 800d500:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d504:	ee07 ca10 	vmov	s14, ip
 800d508:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800d50c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800d510:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800d512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d516:	ee06 3a90 	vmov	s13, r3
 800d51a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d51e:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800d522:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d52a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d532:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d536:	e038      	b.n	800d5aa <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d538:	ee07 ca10 	vmov	s14, ip
 800d53c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d540:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 800d664 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800d544:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d548:	4b42      	ldr	r3, [pc, #264]	@ (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800d54a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d54c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d550:	ee06 3a90 	vmov	s13, r3
 800d554:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d558:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800d55c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d564:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d56c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d570:	e01b      	b.n	800d5aa <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d572:	ee07 ca10 	vmov	s14, ip
 800d576:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d57a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800d658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800d57e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d582:	4b34      	ldr	r3, [pc, #208]	@ (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800d584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d58a:	ee06 3a90 	vmov	s13, r3
 800d58e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d592:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800d596:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d59e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5a6:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d5aa:	4a2a      	ldr	r2, [pc, #168]	@ (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800d5ac:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800d5ae:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d5b2:	ee07 3a90 	vmov	s15, r3
 800d5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800d5c6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800d5ca:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d5ce:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800d5d0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d5d4:	ee07 3a90 	vmov	s15, r3
 800d5d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800d5e4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800d5e8:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d5ec:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800d5ee:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d5f2:	ee07 3a90 	vmov	s15, r3
 800d5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d602:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d606:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800d60a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d60e:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d610:	ee07 ca10 	vmov	s14, ip
 800d614:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d618:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d668 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 800d61c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d620:	4b0c      	ldr	r3, [pc, #48]	@ (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800d622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d628:	ee06 3a90 	vmov	s13, r3
 800d62c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d630:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800d634:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d63c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d644:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800d648:	e7af      	b.n	800d5aa <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d64e:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d650:	6083      	str	r3, [r0, #8]
}
 800d652:	e7da      	b.n	800d60a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800d654:	58024400 	.word	0x58024400
 800d658:	4a742400 	.word	0x4a742400
 800d65c:	39000000 	.word	0x39000000
 800d660:	03d09000 	.word	0x03d09000
 800d664:	4c742400 	.word	0x4c742400
 800d668:	4bbebc20 	.word	0x4bbebc20

0800d66c <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800d66c:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d66e:	4b78      	ldr	r3, [pc, #480]	@ (800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800d670:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d672:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800d674:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d678:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d67a:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d67e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d680:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800d684:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 800d688:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 800d68c:	f000 80db 	beq.w	800d846 <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 800d690:	f002 0203 	and.w	r2, r2, #3
 800d694:	ee07 3a90 	vmov	s15, r3
 800d698:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800d69c:	2a01      	cmp	r2, #1
 800d69e:	d066      	beq.n	800d76e <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 800d6a0:	2a02      	cmp	r2, #2
 800d6a2:	f000 80b3 	beq.w	800d80c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d6a6:	b1e2      	cbz	r2, 800d6e2 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6a8:	ee07 ca10 	vmov	s14, ip
 800d6ac:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d6b0:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800d854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800d6b4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d6b8:	4b65      	ldr	r3, [pc, #404]	@ (800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800d6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c0:	ee06 3a90 	vmov	s13, r3
 800d6c4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d6c8:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800d858 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800d6cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d6d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6dc:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800d6e0:	e061      	b.n	800d7a6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6e2:	4b5b      	ldr	r3, [pc, #364]	@ (800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f013 0f20 	tst.w	r3, #32
 800d6ea:	d023      	beq.n	800d734 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6ec:	4958      	ldr	r1, [pc, #352]	@ (800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800d6ee:	680a      	ldr	r2, [r1, #0]
 800d6f0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800d6f4:	4b59      	ldr	r3, [pc, #356]	@ (800d85c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 800d6f6:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6f8:	ee07 3a10 	vmov	s14, r3
 800d6fc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d700:	ee07 ca10 	vmov	s14, ip
 800d704:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800d708:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800d70c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d712:	ee06 3a90 	vmov	s13, r3
 800d716:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d71a:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800d858 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800d71e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d72e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d732:	e038      	b.n	800d7a6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d734:	ee07 ca10 	vmov	s14, ip
 800d738:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d73c:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800d740:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d744:	4b42      	ldr	r3, [pc, #264]	@ (800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800d746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d74c:	ee06 3a90 	vmov	s13, r3
 800d750:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d754:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800d858 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800d758:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d75c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d760:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d76c:	e01b      	b.n	800d7a6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d76e:	ee07 ca10 	vmov	s14, ip
 800d772:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d776:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800d854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800d77a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d77e:	4b34      	ldr	r3, [pc, #208]	@ (800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800d780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d786:	ee06 3a90 	vmov	s13, r3
 800d78a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d78e:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800d858 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800d792:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a2:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d7a6:	4a2a      	ldr	r2, [pc, #168]	@ (800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800d7a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d7aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d7ae:	ee07 3a90 	vmov	s15, r3
 800d7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7be:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800d7c2:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800d7c6:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d7ca:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d7cc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d7d0:	ee07 3a90 	vmov	s15, r3
 800d7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7dc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800d7e0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800d7e4:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d7e8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d7ea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d7ee:	ee07 3a90 	vmov	s15, r3
 800d7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d7fe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d802:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800d806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d80a:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d80c:	ee07 ca10 	vmov	s14, ip
 800d810:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d814:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d864 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 800d818:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d81c:	4b0c      	ldr	r3, [pc, #48]	@ (800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800d81e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d824:	ee06 3a90 	vmov	s13, r3
 800d828:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d82c:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800d858 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800d830:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d838:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d83c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d840:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800d844:	e7af      	b.n	800d7a6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d84a:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d84c:	6083      	str	r3, [r0, #8]
}
 800d84e:	e7da      	b.n	800d806 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800d850:	58024400 	.word	0x58024400
 800d854:	4a742400 	.word	0x4a742400
 800d858:	39000000 	.word	0x39000000
 800d85c:	03d09000 	.word	0x03d09000
 800d860:	4c742400 	.word	0x4c742400
 800d864:	4bbebc20 	.word	0x4bbebc20

0800d868 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4604      	mov	r4, r0

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d86c:	6803      	ldr	r3, [r0, #0]
 800d86e:	4a0a      	ldr	r2, [pc, #40]	@ (800d898 <HAL_RTC_WaitForSynchro+0x30>)
 800d870:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d872:	f7fa f8b1 	bl	80079d8 <HAL_GetTick>
 800d876:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	f013 0f20 	tst.w	r3, #32
 800d880:	d107      	bne.n	800d892 <HAL_RTC_WaitForSynchro+0x2a>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d882:	f7fa f8a9 	bl	80079d8 <HAL_GetTick>
 800d886:	1b40      	subs	r0, r0, r5
 800d888:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d88c:	d9f4      	bls.n	800d878 <HAL_RTC_WaitForSynchro+0x10>
      {
        return HAL_TIMEOUT;
 800d88e:	2003      	movs	r0, #3
 800d890:	e000      	b.n	800d894 <HAL_RTC_WaitForSynchro+0x2c>
      }
    }

  return HAL_OK;
 800d892:	2000      	movs	r0, #0
}
 800d894:	bd38      	pop	{r3, r4, r5, pc}
 800d896:	bf00      	nop
 800d898:	0003ff5f 	.word	0x0003ff5f

0800d89c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d89c:	b570      	push	{r4, r5, r6, lr}
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d89e:	6803      	ldr	r3, [r0, #0]
 800d8a0:	68da      	ldr	r2, [r3, #12]
 800d8a2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800d8a6:	d002      	beq.n	800d8ae <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800d8a8:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	bd70      	pop	{r4, r5, r6, pc}
 800d8ae:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800d8b6:	f7fa f88f 	bl	80079d8 <HAL_GetTick>
 800d8ba:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 800d8bc:	2500      	movs	r5, #0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800d8c6:	d1f0      	bne.n	800d8aa <RTC_EnterInitMode+0xe>
 800d8c8:	2d03      	cmp	r5, #3
 800d8ca:	d0ee      	beq.n	800d8aa <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d8cc:	f7fa f884 	bl	80079d8 <HAL_GetTick>
 800d8d0:	1b83      	subs	r3, r0, r6
 800d8d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d8d6:	d9f2      	bls.n	800d8be <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8d8:	2503      	movs	r5, #3
 800d8da:	f884 5021 	strb.w	r5, [r4, #33]	@ 0x21
 800d8de:	e7ee      	b.n	800d8be <RTC_EnterInitMode+0x22>

0800d8e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	4604      	mov	r4, r0

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d8e4:	4b10      	ldr	r3, [pc, #64]	@ (800d928 <RTC_ExitInitMode+0x48>)
 800d8e6:	68da      	ldr	r2, [r3, #12]
 800d8e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d8ec:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	f013 0f20 	tst.w	r3, #32
 800d8f4:	d106      	bne.n	800d904 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8f6:	f7ff ffb7 	bl	800d868 <HAL_RTC_WaitForSynchro>
 800d8fa:	b198      	cbz	r0, 800d924 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8fc:	2003      	movs	r0, #3
 800d8fe:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800d902:	e00f      	b.n	800d924 <RTC_ExitInitMode+0x44>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d904:	4a08      	ldr	r2, [pc, #32]	@ (800d928 <RTC_ExitInitMode+0x48>)
 800d906:	6893      	ldr	r3, [r2, #8]
 800d908:	f023 0320 	bic.w	r3, r3, #32
 800d90c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d90e:	f7ff ffab 	bl	800d868 <HAL_RTC_WaitForSynchro>
 800d912:	b110      	cbz	r0, 800d91a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d914:	2003      	movs	r0, #3
 800d916:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d91a:	4a03      	ldr	r2, [pc, #12]	@ (800d928 <RTC_ExitInitMode+0x48>)
 800d91c:	6893      	ldr	r3, [r2, #8]
 800d91e:	f043 0320 	orr.w	r3, r3, #32
 800d922:	6093      	str	r3, [r2, #8]
  }

  return status;
}
 800d924:	bd10      	pop	{r4, pc}
 800d926:	bf00      	nop
 800d928:	58004000 	.word	0x58004000

0800d92c <HAL_RTC_Init>:
  if(hrtc != NULL)
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d04b      	beq.n	800d9c8 <HAL_RTC_Init+0x9c>
{
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4604      	mov	r4, r0
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d934:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d938:	b163      	cbz	r3, 800d954 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d93a:	2302      	movs	r3, #2
 800d93c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d940:	6823      	ldr	r3, [r4, #0]
 800d942:	68da      	ldr	r2, [r3, #12]
 800d944:	f012 0f10 	tst.w	r2, #16
 800d948:	d009      	beq.n	800d95e <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800d94a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 800d94c:	2301      	movs	r3, #1
 800d94e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800d952:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800d954:	f880 3020 	strb.w	r3, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800d958:	f7f9 fbae 	bl	80070b8 <HAL_RTC_MspInit>
 800d95c:	e7ed      	b.n	800d93a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d95e:	22ca      	movs	r2, #202	@ 0xca
 800d960:	625a      	str	r2, [r3, #36]	@ 0x24
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	2253      	movs	r2, #83	@ 0x53
 800d966:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 800d968:	4620      	mov	r0, r4
 800d96a:	f7ff ff97 	bl	800d89c <RTC_EnterInitMode>
      if (status == HAL_OK)
 800d96e:	b128      	cbz	r0, 800d97c <HAL_RTC_Init+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d970:	6823      	ldr	r3, [r4, #0]
 800d972:	22ff      	movs	r2, #255	@ 0xff
 800d974:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800d976:	2800      	cmp	r0, #0
 800d978:	d1eb      	bne.n	800d952 <HAL_RTC_Init+0x26>
 800d97a:	e7e7      	b.n	800d94c <HAL_RTC_Init+0x20>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d97c:	6822      	ldr	r2, [r4, #0]
 800d97e:	6891      	ldr	r1, [r2, #8]
 800d980:	4b12      	ldr	r3, [pc, #72]	@ (800d9cc <HAL_RTC_Init+0xa0>)
 800d982:	400b      	ands	r3, r1
 800d984:	6093      	str	r3, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d986:	6821      	ldr	r1, [r4, #0]
 800d988:	688a      	ldr	r2, [r1, #8]
 800d98a:	6863      	ldr	r3, [r4, #4]
 800d98c:	6920      	ldr	r0, [r4, #16]
 800d98e:	4303      	orrs	r3, r0
 800d990:	69a0      	ldr	r0, [r4, #24]
 800d992:	4303      	orrs	r3, r0
 800d994:	4313      	orrs	r3, r2
 800d996:	608b      	str	r3, [r1, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d998:	68a1      	ldr	r1, [r4, #8]
 800d99a:	68e3      	ldr	r3, [r4, #12]
 800d99c:	6822      	ldr	r2, [r4, #0]
 800d99e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d9a2:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f7ff ff9b 	bl	800d8e0 <RTC_ExitInitMode>
      if(status == HAL_OK)
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d1e0      	bne.n	800d970 <HAL_RTC_Init+0x44>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d9ae:	6822      	ldr	r2, [r4, #0]
 800d9b0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d9b2:	f023 0303 	bic.w	r3, r3, #3
 800d9b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d9b8:	6821      	ldr	r1, [r4, #0]
 800d9ba:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800d9bc:	69e2      	ldr	r2, [r4, #28]
 800d9be:	6965      	ldr	r5, [r4, #20]
 800d9c0:	432a      	orrs	r2, r5
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800d9c6:	e7d3      	b.n	800d970 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 800d9c8:	2001      	movs	r0, #1
}
 800d9ca:	4770      	bx	lr
 800d9cc:	ff8fffbf 	.word	0xff8fffbf

0800d9d0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800d9d0:	2300      	movs	r3, #0
  uint8_t  bcdlow  = Value;

  while (bcdlow >= 10U)
 800d9d2:	e002      	b.n	800d9da <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800d9d4:	3301      	adds	r3, #1
    bcdlow -= 10U;
 800d9d6:	380a      	subs	r0, #10
 800d9d8:	b2c0      	uxtb	r0, r0
  while (bcdlow >= 10U)
 800d9da:	2809      	cmp	r0, #9
 800d9dc:	d8fa      	bhi.n	800d9d4 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d9de:	011b      	lsls	r3, r3, #4
 800d9e0:	b2db      	uxtb	r3, r3
}
 800d9e2:	4318      	orrs	r0, r3
 800d9e4:	4770      	bx	lr
	...

0800d9e8 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 800d9e8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d05b      	beq.n	800daa8 <HAL_RTC_SetTime+0xc0>
{
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	460d      	mov	r5, r1
 800d9f6:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9fe:	2302      	movs	r3, #2
 800da00:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da04:	6803      	ldr	r3, [r0, #0]
 800da06:	22ca      	movs	r2, #202	@ 0xca
 800da08:	625a      	str	r2, [r3, #36]	@ 0x24
 800da0a:	6803      	ldr	r3, [r0, #0]
 800da0c:	2253      	movs	r2, #83	@ 0x53
 800da0e:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800da10:	f7ff ff44 	bl	800d89c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800da14:	bb58      	cbnz	r0, 800da6e <HAL_RTC_SetTime+0x86>
    if(Format == RTC_FORMAT_BIN)
 800da16:	2e00      	cmp	r6, #0
 800da18:	d134      	bne.n	800da84 <HAL_RTC_SetTime+0x9c>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800da22:	d101      	bne.n	800da28 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 800da24:	2300      	movs	r3, #0
 800da26:	70eb      	strb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da28:	7828      	ldrb	r0, [r5, #0]
 800da2a:	f7ff ffd1 	bl	800d9d0 <RTC_ByteToBcd2>
 800da2e:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da30:	7868      	ldrb	r0, [r5, #1]
 800da32:	f7ff ffcd 	bl	800d9d0 <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da36:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800da3a:	78a8      	ldrb	r0, [r5, #2]
 800da3c:	f7ff ffc8 	bl	800d9d0 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da40:	4330      	orrs	r0, r6
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800da42:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da44:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800da48:	6822      	ldr	r2, [r4, #0]
 800da4a:	4b18      	ldr	r3, [pc, #96]	@ (800daac <HAL_RTC_SetTime+0xc4>)
 800da4c:	4003      	ands	r3, r0
 800da4e:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800da50:	6822      	ldr	r2, [r4, #0]
 800da52:	6893      	ldr	r3, [r2, #8]
 800da54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800da58:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800da5a:	6821      	ldr	r1, [r4, #0]
 800da5c:	688b      	ldr	r3, [r1, #8]
 800da5e:	68ea      	ldr	r2, [r5, #12]
 800da60:	6928      	ldr	r0, [r5, #16]
 800da62:	4302      	orrs	r2, r0
 800da64:	4313      	orrs	r3, r2
 800da66:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 800da68:	4620      	mov	r0, r4
 800da6a:	f7ff ff39 	bl	800d8e0 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	22ff      	movs	r2, #255	@ 0xff
 800da72:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800da74:	b910      	cbnz	r0, 800da7c <HAL_RTC_SetTime+0x94>
    hrtc->State = HAL_RTC_STATE_READY;
 800da76:	2301      	movs	r3, #1
 800da78:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  __HAL_UNLOCK(hrtc);
 800da7c:	2300      	movs	r3, #0
 800da7e:	f884 3020 	strb.w	r3, [r4, #32]
}
 800da82:	bd70      	pop	{r4, r5, r6, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800da8c:	d101      	bne.n	800da92 <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 800da8e:	2300      	movs	r3, #0
 800da90:	70eb      	strb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da92:	782b      	ldrb	r3, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da94:	7868      	ldrb	r0, [r5, #1]
 800da96:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da98:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800da9c:	78ab      	ldrb	r3, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da9e:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800daa0:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800daa2:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800daa6:	e7cf      	b.n	800da48 <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 800daa8:	2002      	movs	r0, #2
}
 800daaa:	4770      	bx	lr
 800daac:	007f7f7f 	.word	0x007f7f7f

0800dab0 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 800dab0:	f890 3020 	ldrb.w	r3, [r0, #32]
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d049      	beq.n	800db4c <HAL_RTC_SetDate+0x9c>
{
 800dab8:	b570      	push	{r4, r5, r6, lr}
 800daba:	4604      	mov	r4, r0
 800dabc:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 800dabe:	2301      	movs	r3, #1
 800dac0:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800dac4:	2302      	movs	r3, #2
 800dac6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800daca:	b1f2      	cbz	r2, 800db0a <HAL_RTC_SetDate+0x5a>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dacc:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dace:	784d      	ldrb	r5, [r1, #1]
 800dad0:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dad2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dad6:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dad8:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dada:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dadc:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	22ca      	movs	r2, #202	@ 0xca
 800dae4:	625a      	str	r2, [r3, #36]	@ 0x24
 800dae6:	6823      	ldr	r3, [r4, #0]
 800dae8:	2253      	movs	r2, #83	@ 0x53
 800daea:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800daec:	4620      	mov	r0, r4
 800daee:	f7ff fed5 	bl	800d89c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800daf2:	b318      	cbz	r0, 800db3c <HAL_RTC_SetDate+0x8c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800daf4:	6823      	ldr	r3, [r4, #0]
 800daf6:	22ff      	movs	r2, #255	@ 0xff
 800daf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800dafa:	b910      	cbnz	r0, 800db02 <HAL_RTC_SetDate+0x52>
    hrtc->State = HAL_RTC_STATE_READY;
 800dafc:	2301      	movs	r3, #1
 800dafe:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  __HAL_UNLOCK(hrtc);
 800db02:	2300      	movs	r3, #0
 800db04:	f884 3020 	strb.w	r3, [r4, #32]
}
 800db08:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db0a:	784b      	ldrb	r3, [r1, #1]
 800db0c:	f013 0f10 	tst.w	r3, #16
 800db10:	d003      	beq.n	800db1a <HAL_RTC_SetDate+0x6a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db12:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800db16:	330a      	adds	r3, #10
 800db18:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db1a:	78f0      	ldrb	r0, [r6, #3]
 800db1c:	f7ff ff58 	bl	800d9d0 <RTC_ByteToBcd2>
 800db20:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db22:	7870      	ldrb	r0, [r6, #1]
 800db24:	f7ff ff54 	bl	800d9d0 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db28:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800db2c:	78b0      	ldrb	r0, [r6, #2]
 800db2e:	f7ff ff4f 	bl	800d9d0 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db32:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800db34:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db36:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 800db3a:	e7d1      	b.n	800dae0 <HAL_RTC_SetDate+0x30>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800db3c:	6822      	ldr	r2, [r4, #0]
 800db3e:	4b04      	ldr	r3, [pc, #16]	@ (800db50 <HAL_RTC_SetDate+0xa0>)
 800db40:	402b      	ands	r3, r5
 800db42:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 800db44:	4620      	mov	r0, r4
 800db46:	f7ff fecb 	bl	800d8e0 <RTC_ExitInitMode>
 800db4a:	e7d3      	b.n	800daf4 <HAL_RTC_SetDate+0x44>
  __HAL_LOCK(hrtc);
 800db4c:	2002      	movs	r0, #2
}
 800db4e:	4770      	bx	lr
 800db50:	00ffff3f 	.word	0x00ffff3f

0800db54 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800db54:	0903      	lsrs	r3, r0, #4
 800db56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800db5a:	f000 000f 	and.w	r0, r0, #15
 800db5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800db62:	b2c0      	uxtb	r0, r0
 800db64:	4770      	bx	lr

0800db66 <HAL_RTC_GetTime>:
{
 800db66:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800db68:	6803      	ldr	r3, [r0, #0]
 800db6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db6c:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800db6e:	6803      	ldr	r3, [r0, #0]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800db76:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800db78:	6803      	ldr	r3, [r0, #0]
 800db7a:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800db7c:	f3c3 4005 	ubfx	r0, r3, #16, #6
 800db80:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800db82:	f3c3 2606 	ubfx	r6, r3, #8, #7
 800db86:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800db88:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 800db8c:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800db8e:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800db92:	70cb      	strb	r3, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800db94:	b95a      	cbnz	r2, 800dbae <HAL_RTC_GetTime+0x48>
 800db96:	460c      	mov	r4, r1
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800db98:	f7ff ffdc 	bl	800db54 <RTC_Bcd2ToByte>
 800db9c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800db9e:	4630      	mov	r0, r6
 800dba0:	f7ff ffd8 	bl	800db54 <RTC_Bcd2ToByte>
 800dba4:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dba6:	4628      	mov	r0, r5
 800dba8:	f7ff ffd4 	bl	800db54 <RTC_Bcd2ToByte>
 800dbac:	70a0      	strb	r0, [r4, #2]
}
 800dbae:	2000      	movs	r0, #0
 800dbb0:	bd70      	pop	{r4, r5, r6, pc}

0800dbb2 <HAL_RTC_GetDate>:
{
 800dbb2:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dbb4:	6803      	ldr	r3, [r0, #0]
 800dbb6:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dbb8:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800dbbc:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dbbe:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800dbc2:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dbc4:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 800dbc8:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dbca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800dbce:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800dbd0:	b95a      	cbnz	r2, 800dbea <HAL_RTC_GetDate+0x38>
 800dbd2:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dbd4:	f7ff ffbe 	bl	800db54 <RTC_Bcd2ToByte>
 800dbd8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7ff ffba 	bl	800db54 <RTC_Bcd2ToByte>
 800dbe0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	f7ff ffb6 	bl	800db54 <RTC_Bcd2ToByte>
 800dbe8:	70a0      	strb	r0, [r4, #2]
}
 800dbea:	2000      	movs	r0, #0
 800dbec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dbf0 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800dbf0:	b308      	cbz	r0, 800dc36 <HAL_SDRAM_Init+0x46>
{
 800dbf2:	b538      	push	{r3, r4, r5, lr}
 800dbf4:	460d      	mov	r5, r1
 800dbf6:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800dbf8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800dbfc:	b1b3      	cbz	r3, 800dc2c <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dbfe:	2302      	movs	r3, #2
 800dc00:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800dc04:	4621      	mov	r1, r4
 800dc06:	f851 0b04 	ldr.w	r0, [r1], #4
 800dc0a:	f002 fb0d 	bl	8010228 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800dc0e:	6862      	ldr	r2, [r4, #4]
 800dc10:	4629      	mov	r1, r5
 800dc12:	6820      	ldr	r0, [r4, #0]
 800dc14:	f002 fb42 	bl	801029c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800dc18:	4a08      	ldr	r2, [pc, #32]	@ (800dc3c <HAL_SDRAM_Init+0x4c>)
 800dc1a:	6813      	ldr	r3, [r2, #0]
 800dc1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dc20:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800dc22:	2301      	movs	r3, #1
 800dc24:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 800dc28:	2000      	movs	r0, #0
}
 800dc2a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800dc2c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800dc30:	f7f8 fc5e 	bl	80064f0 <HAL_SDRAM_MspInit>
 800dc34:	e7e3      	b.n	800dbfe <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800dc36:	2001      	movs	r0, #1
}
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	52004000 	.word	0x52004000

0800dc40 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800dc44:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800dc48:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800dc4a:	2802      	cmp	r0, #2
 800dc4c:	d005      	beq.n	800dc5a <HAL_SDRAM_SendCommand+0x1a>
 800dc4e:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800dc50:	2805      	cmp	r0, #5
 800dc52:	bf18      	it	ne
 800dc54:	2801      	cmpne	r0, #1
 800dc56:	d001      	beq.n	800dc5c <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800dc58:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dc5c:	2302      	movs	r3, #2
 800dc5e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800dc62:	6820      	ldr	r0, [r4, #0]
 800dc64:	f002 fb6e 	bl	8010344 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800dc68:	682b      	ldr	r3, [r5, #0]
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d004      	beq.n	800dc78 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 800dc74:	2000      	movs	r0, #0
 800dc76:	e7f0      	b.n	800dc5a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800dc78:	2305      	movs	r3, #5
 800dc7a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 800dc7e:	2000      	movs	r0, #0
 800dc80:	e7eb      	b.n	800dc5a <HAL_SDRAM_SendCommand+0x1a>

0800dc82 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800dc82:	b510      	push	{r4, lr}
 800dc84:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800dc86:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800dc8a:	b2d8      	uxtb	r0, r3
 800dc8c:	2802      	cmp	r0, #2
 800dc8e:	d005      	beq.n	800dc9c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800dc90:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d001      	beq.n	800dc9e <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800dc9a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800dc9c:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dc9e:	2302      	movs	r3, #2
 800dca0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800dca4:	6820      	ldr	r0, [r4, #0]
 800dca6:	f002 fb65 	bl	8010374 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	e7f3      	b.n	800dc9c <HAL_SDRAM_ProgramRefreshRate+0x1a>

0800dcb4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800dcb4:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800dcb6:	6802      	ldr	r2, [r0, #0]
 800dcb8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800dcba:	6991      	ldr	r1, [r2, #24]
 800dcbc:	f041 0108 	orr.w	r1, r1, #8
 800dcc0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800dcc2:	6801      	ldr	r1, [r0, #0]
 800dcc4:	698a      	ldr	r2, [r1, #24]
 800dcc6:	f042 0210 	orr.w	r2, r2, #16
 800dcca:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dccc:	6801      	ldr	r1, [r0, #0]
 800dcce:	680a      	ldr	r2, [r1, #0]
 800dcd0:	f022 0201 	bic.w	r2, r2, #1
 800dcd4:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800dcd6:	6801      	ldr	r1, [r0, #0]
 800dcd8:	690c      	ldr	r4, [r1, #16]
 800dcda:	4a29      	ldr	r2, [pc, #164]	@ (800dd80 <SPI_CloseTransfer+0xcc>)
 800dcdc:	4022      	ands	r2, r4
 800dcde:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dce0:	6801      	ldr	r1, [r0, #0]
 800dce2:	688a      	ldr	r2, [r1, #8]
 800dce4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800dce8:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dcea:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800dcee:	b2d2      	uxtb	r2, r2
 800dcf0:	2a04      	cmp	r2, #4
 800dcf2:	d00d      	beq.n	800dd10 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dcf4:	f013 0f20 	tst.w	r3, #32
 800dcf8:	d00a      	beq.n	800dd10 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dcfa:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800dcfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dd02:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dd06:	6801      	ldr	r1, [r0, #0]
 800dd08:	698a      	ldr	r2, [r1, #24]
 800dd0a:	f042 0220 	orr.w	r2, r2, #32
 800dd0e:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dd10:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800dd14:	b2d2      	uxtb	r2, r2
 800dd16:	2a03      	cmp	r2, #3
 800dd18:	d00d      	beq.n	800dd36 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dd1a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800dd1e:	d00a      	beq.n	800dd36 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dd20:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800dd24:	f042 0204 	orr.w	r2, r2, #4
 800dd28:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd2c:	6801      	ldr	r1, [r0, #0]
 800dd2e:	698a      	ldr	r2, [r1, #24]
 800dd30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd34:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800dd36:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800dd3a:	d00a      	beq.n	800dd52 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dd3c:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800dd40:	f042 0201 	orr.w	r2, r2, #1
 800dd44:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dd48:	6801      	ldr	r1, [r0, #0]
 800dd4a:	698a      	ldr	r2, [r1, #24]
 800dd4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd50:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dd52:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800dd56:	d00a      	beq.n	800dd6e <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dd58:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800dd5c:	f043 0308 	orr.w	r3, r3, #8
 800dd60:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dd64:	6802      	ldr	r2, [r0, #0]
 800dd66:	6993      	ldr	r3, [r2, #24]
 800dd68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd6c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dd74:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 800dd78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	fffffc90 	.word	0xfffffc90

0800dd84 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dd84:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800dd86:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dd88:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dd8a:	3008      	adds	r0, #8
 800dd8c:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800dd8e:	fb03 0000 	mla	r0, r3, r0, r0
 800dd92:	4770      	bx	lr

0800dd94 <SPI_WaitOnFlagUntilTimeout>:
{
 800dd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd98:	4680      	mov	r8, r0
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	4616      	mov	r6, r2
 800dd9e:	461d      	mov	r5, r3
 800dda0:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dda4:	e000      	b.n	800dda8 <SPI_WaitOnFlagUntilTimeout+0x14>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dda6:	b1bd      	cbz	r5, 800ddd8 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dda8:	f8d8 3000 	ldr.w	r3, [r8]
 800ddac:	695c      	ldr	r4, [r3, #20]
 800ddae:	ea37 0404 	bics.w	r4, r7, r4
 800ddb2:	bf0c      	ite	eq
 800ddb4:	2301      	moveq	r3, #1
 800ddb6:	2300      	movne	r3, #0
 800ddb8:	42b3      	cmp	r3, r6
 800ddba:	d10a      	bne.n	800ddd2 <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddbc:	f7f9 fe0c 	bl	80079d8 <HAL_GetTick>
 800ddc0:	eba0 0009 	sub.w	r0, r0, r9
 800ddc4:	42a8      	cmp	r0, r5
 800ddc6:	d3ee      	bcc.n	800dda6 <SPI_WaitOnFlagUntilTimeout+0x12>
 800ddc8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ddcc:	d0eb      	beq.n	800dda6 <SPI_WaitOnFlagUntilTimeout+0x12>
      return HAL_TIMEOUT;
 800ddce:	2003      	movs	r0, #3
 800ddd0:	e000      	b.n	800ddd4 <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800ddd2:	2000      	movs	r0, #0
}
 800ddd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800ddd8:	2003      	movs	r0, #3
 800ddda:	e7fb      	b.n	800ddd4 <SPI_WaitOnFlagUntilTimeout+0x40>

0800dddc <HAL_SPI_Init>:
  if (hspi == NULL)
 800dddc:	2800      	cmp	r0, #0
 800ddde:	f000 80b7 	beq.w	800df50 <HAL_SPI_Init+0x174>
{
 800dde2:	b570      	push	{r4, r5, r6, lr}
 800dde4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dde6:	2300      	movs	r3, #0
 800dde8:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ddea:	6805      	ldr	r5, [r0, #0]
 800ddec:	4b5c      	ldr	r3, [pc, #368]	@ (800df60 <HAL_SPI_Init+0x184>)
 800ddee:	4e5d      	ldr	r6, [pc, #372]	@ (800df64 <HAL_SPI_Init+0x188>)
 800ddf0:	429d      	cmp	r5, r3
 800ddf2:	bf18      	it	ne
 800ddf4:	42b5      	cmpne	r5, r6
 800ddf6:	bf14      	ite	ne
 800ddf8:	2601      	movne	r6, #1
 800ddfa:	2600      	moveq	r6, #0
 800ddfc:	d007      	beq.n	800de0e <HAL_SPI_Init+0x32>
 800ddfe:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
 800de02:	429d      	cmp	r5, r3
 800de04:	d003      	beq.n	800de0e <HAL_SPI_Init+0x32>
 800de06:	68c3      	ldr	r3, [r0, #12]
 800de08:	2b0f      	cmp	r3, #15
 800de0a:	f200 80a3 	bhi.w	800df54 <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
 800de0e:	4620      	mov	r0, r4
 800de10:	f7ff ffb8 	bl	800dd84 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de14:	b12e      	cbz	r6, 800de22 <HAL_SPI_Init+0x46>
 800de16:	4b54      	ldr	r3, [pc, #336]	@ (800df68 <HAL_SPI_Init+0x18c>)
 800de18:	429d      	cmp	r5, r3
 800de1a:	d002      	beq.n	800de22 <HAL_SPI_Init+0x46>
 800de1c:	2808      	cmp	r0, #8
 800de1e:	f200 809b 	bhi.w	800df58 <HAL_SPI_Init+0x17c>
 800de22:	4a4f      	ldr	r2, [pc, #316]	@ (800df60 <HAL_SPI_Init+0x184>)
 800de24:	4b4f      	ldr	r3, [pc, #316]	@ (800df64 <HAL_SPI_Init+0x188>)
 800de26:	429d      	cmp	r5, r3
 800de28:	bf18      	it	ne
 800de2a:	4295      	cmpne	r5, r2
 800de2c:	d003      	beq.n	800de36 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de32:	429d      	cmp	r5, r3
 800de34:	d102      	bne.n	800de3c <HAL_SPI_Init+0x60>
 800de36:	2810      	cmp	r0, #16
 800de38:	f200 8090 	bhi.w	800df5c <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800de3c:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800de40:	b1f3      	cbz	r3, 800de80 <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
 800de42:	2302      	movs	r3, #2
 800de44:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 800de48:	6822      	ldr	r2, [r4, #0]
 800de4a:	6813      	ldr	r3, [r2, #0]
 800de4c:	f023 0301 	bic.w	r3, r3, #1
 800de50:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	689a      	ldr	r2, [r3, #8]
 800de56:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de5a:	69a1      	ldr	r1, [r4, #24]
 800de5c:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800de60:	d014      	beq.n	800de8c <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800de62:	6863      	ldr	r3, [r4, #4]
 800de64:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800de68:	d023      	beq.n	800deb2 <HAL_SPI_Init+0xd6>
 800de6a:	68e3      	ldr	r3, [r4, #12]
 800de6c:	2b06      	cmp	r3, #6
 800de6e:	d920      	bls.n	800deb2 <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800de70:	6821      	ldr	r1, [r4, #0]
 800de72:	680b      	ldr	r3, [r1, #0]
 800de74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de78:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800de7a:	4303      	orrs	r3, r0
 800de7c:	600b      	str	r3, [r1, #0]
 800de7e:	e01d      	b.n	800debc <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
 800de80:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800de84:	4620      	mov	r0, r4
 800de86:	f7f9 f96b 	bl	8007160 <HAL_SPI_MspInit>
 800de8a:	e7da      	b.n	800de42 <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de8c:	6861      	ldr	r1, [r4, #4]
 800de8e:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800de92:	d006      	beq.n	800dea2 <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de94:	2900      	cmp	r1, #0
 800de96:	d1e4      	bne.n	800de62 <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800de98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de9a:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800de9e:	d1e0      	bne.n	800de62 <HAL_SPI_Init+0x86>
 800dea0:	e002      	b.n	800dea8 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dea2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d1f5      	bne.n	800de94 <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dea8:	6819      	ldr	r1, [r3, #0]
 800deaa:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800deae:	6019      	str	r1, [r3, #0]
 800deb0:	e7d7      	b.n	800de62 <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800deb2:	6821      	ldr	r1, [r4, #0]
 800deb4:	680b      	ldr	r3, [r1, #0]
 800deb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800deba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800debc:	69e3      	ldr	r3, [r4, #28]
 800debe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800dec0:	430b      	orrs	r3, r1
 800dec2:	4313      	orrs	r3, r2
 800dec4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800dec6:	4313      	orrs	r3, r2
 800dec8:	68e1      	ldr	r1, [r4, #12]
 800deca:	6822      	ldr	r2, [r4, #0]
 800decc:	430b      	orrs	r3, r1
 800dece:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ded0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ded2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ded4:	4313      	orrs	r3, r2
 800ded6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ded8:	4313      	orrs	r3, r2
 800deda:	69a2      	ldr	r2, [r4, #24]
 800dedc:	4313      	orrs	r3, r2
 800dede:	6922      	ldr	r2, [r4, #16]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	6962      	ldr	r2, [r4, #20]
 800dee4:	4313      	orrs	r3, r2
 800dee6:	6a22      	ldr	r2, [r4, #32]
 800dee8:	4313      	orrs	r3, r2
 800deea:	6862      	ldr	r2, [r4, #4]
 800deec:	4313      	orrs	r3, r2
 800deee:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800def0:	4313      	orrs	r3, r2
 800def2:	68a2      	ldr	r2, [r4, #8]
 800def4:	4313      	orrs	r3, r2
 800def6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800def8:	4313      	orrs	r3, r2
 800defa:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800defc:	6822      	ldr	r2, [r4, #0]
 800defe:	430b      	orrs	r3, r1
 800df00:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800df02:	6863      	ldr	r3, [r4, #4]
 800df04:	b96b      	cbnz	r3, 800df22 <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800df06:	6822      	ldr	r2, [r4, #0]
 800df08:	6893      	ldr	r3, [r2, #8]
 800df0a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800df0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800df12:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800df14:	6822      	ldr	r2, [r4, #0]
 800df16:	6893      	ldr	r3, [r2, #8]
 800df18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800df1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800df20:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df22:	6822      	ldr	r2, [r4, #0]
 800df24:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800df26:	f023 0301 	bic.w	r3, r3, #1
 800df2a:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800df2c:	6863      	ldr	r3, [r4, #4]
 800df2e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800df32:	d006      	beq.n	800df42 <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800df34:	6822      	ldr	r2, [r4, #0]
 800df36:	68d3      	ldr	r3, [r2, #12]
 800df38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df3c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800df3e:	430b      	orrs	r3, r1
 800df40:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df42:	2000      	movs	r0, #0
 800df44:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800df48:	2301      	movs	r3, #1
 800df4a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
}
 800df4e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800df50:	2001      	movs	r0, #1
}
 800df52:	4770      	bx	lr
    return HAL_ERROR;
 800df54:	2001      	movs	r0, #1
 800df56:	e7fa      	b.n	800df4e <HAL_SPI_Init+0x172>
    return HAL_ERROR;
 800df58:	2001      	movs	r0, #1
 800df5a:	e7f8      	b.n	800df4e <HAL_SPI_Init+0x172>
 800df5c:	2001      	movs	r0, #1
 800df5e:	e7f6      	b.n	800df4e <HAL_SPI_Init+0x172>
 800df60:	40013000 	.word	0x40013000
 800df64:	40003800 	.word	0x40003800
 800df68:	40003c00 	.word	0x40003c00

0800df6c <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800df6c:	b198      	cbz	r0, 800df96 <HAL_SPI_DeInit+0x2a>
{
 800df6e:	b510      	push	{r4, lr}
 800df70:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800df72:	2302      	movs	r3, #2
 800df74:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 800df78:	6802      	ldr	r2, [r0, #0]
 800df7a:	6813      	ldr	r3, [r2, #0]
 800df7c:	f023 0301 	bic.w	r3, r3, #1
 800df80:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800df82:	f7f9 f97d 	bl	8007280 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df86:	2000      	movs	r0, #0
 800df88:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800df8c:	f884 0081 	strb.w	r0, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 800df90:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800df94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800df96:	2001      	movs	r0, #1
}
 800df98:	4770      	bx	lr
	...

0800df9c <HAL_SPI_Transmit>:
{
 800df9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa0:	b082      	sub	sp, #8
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	468a      	mov	sl, r1
 800dfa6:	4691      	mov	r9, r2
 800dfa8:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dfaa:	f8d0 8000 	ldr.w	r8, [r0]
  tickstart = HAL_GetTick();
 800dfae:	f7f9 fd13 	bl	80079d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800dfb2:	f894 6081 	ldrb.w	r6, [r4, #129]	@ 0x81
 800dfb6:	b2f6      	uxtb	r6, r6
 800dfb8:	2e01      	cmp	r6, #1
 800dfba:	f040 8148 	bne.w	800e24e <HAL_SPI_Transmit+0x2b2>
 800dfbe:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0UL))
 800dfc0:	f1b9 0f00 	cmp.w	r9, #0
 800dfc4:	bf18      	it	ne
 800dfc6:	f1ba 0f00 	cmpne.w	sl, #0
 800dfca:	f000 8141 	beq.w	800e250 <HAL_SPI_Transmit+0x2b4>
  __HAL_LOCK(hspi);
 800dfce:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	f000 8140 	beq.w	800e258 <HAL_SPI_Transmit+0x2bc>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dfea:	f8c4 a05c 	str.w	sl, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800dfee:	f8a4 9060 	strh.w	r9, [r4, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800dff2:	f8a4 9062 	strh.w	r9, [r4, #98]	@ 0x62
  hspi->pRxBuffPtr  = NULL;
 800dff6:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dff8:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dffc:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800e000:	6763      	str	r3, [r4, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800e002:	6723      	str	r3, [r4, #112]	@ 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e004:	68a3      	ldr	r3, [r4, #8]
 800e006:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e00a:	d01c      	beq.n	800e046 <HAL_SPI_Transmit+0xaa>
    SPI_2LINES_TX(hspi);
 800e00c:	6822      	ldr	r2, [r4, #0]
 800e00e:	68d3      	ldr	r3, [r2, #12]
 800e010:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800e014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e018:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e01a:	6822      	ldr	r2, [r4, #0]
 800e01c:	6851      	ldr	r1, [r2, #4]
 800e01e:	4b8f      	ldr	r3, [pc, #572]	@ (800e25c <HAL_SPI_Transmit+0x2c0>)
 800e020:	400b      	ands	r3, r1
 800e022:	ea49 0303 	orr.w	r3, r9, r3
 800e026:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800e028:	6822      	ldr	r2, [r4, #0]
 800e02a:	6813      	ldr	r3, [r2, #0]
 800e02c:	f043 0301 	orr.w	r3, r3, #1
 800e030:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e032:	6863      	ldr	r3, [r4, #4]
 800e034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e038:	d00b      	beq.n	800e052 <HAL_SPI_Transmit+0xb6>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e03a:	68e3      	ldr	r3, [r4, #12]
 800e03c:	2b0f      	cmp	r3, #15
 800e03e:	d81b      	bhi.n	800e078 <HAL_SPI_Transmit+0xdc>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e040:	2b07      	cmp	r3, #7
 800e042:	d84d      	bhi.n	800e0e0 <HAL_SPI_Transmit+0x144>
 800e044:	e0ac      	b.n	800e1a0 <HAL_SPI_Transmit+0x204>
    SPI_1LINE_TX(hspi);
 800e046:	6822      	ldr	r2, [r4, #0]
 800e048:	6813      	ldr	r3, [r2, #0]
 800e04a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e04e:	6013      	str	r3, [r2, #0]
 800e050:	e7e3      	b.n	800e01a <HAL_SPI_Transmit+0x7e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e052:	6822      	ldr	r2, [r4, #0]
 800e054:	6813      	ldr	r3, [r2, #0]
 800e056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e05a:	6013      	str	r3, [r2, #0]
 800e05c:	e7ed      	b.n	800e03a <HAL_SPI_Transmit+0x9e>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e05e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e060:	6812      	ldr	r2, [r2, #0]
 800e062:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e064:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e066:	3304      	adds	r3, #4
 800e068:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e06a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 800e06e:	b292      	uxth	r2, r2
 800e070:	3a01      	subs	r2, #1
 800e072:	b292      	uxth	r2, r2
 800e074:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800e078:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f000 80c9 	beq.w	800e216 <HAL_SPI_Transmit+0x27a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e084:	6823      	ldr	r3, [r4, #0]
 800e086:	695a      	ldr	r2, [r3, #20]
 800e088:	f012 0f02 	tst.w	r2, #2
 800e08c:	d1e7      	bne.n	800e05e <HAL_SPI_Transmit+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e08e:	f7f9 fca3 	bl	80079d8 <HAL_GetTick>
 800e092:	1bc0      	subs	r0, r0, r7
 800e094:	42a8      	cmp	r0, r5
 800e096:	d302      	bcc.n	800e09e <HAL_SPI_Transmit+0x102>
 800e098:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e09c:	d101      	bne.n	800e0a2 <HAL_SPI_Transmit+0x106>
 800e09e:	2d00      	cmp	r5, #0
 800e0a0:	d1ea      	bne.n	800e078 <HAL_SPI_Transmit+0xdc>
          SPI_CloseTransfer(hspi);
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7ff fe06 	bl	800dcb4 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e0ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0b0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
          return HAL_TIMEOUT;
 800e0c0:	2603      	movs	r6, #3
 800e0c2:	e0c5      	b.n	800e250 <HAL_SPI_Transmit+0x2b4>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e0c4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	f8a8 3020 	strh.w	r3, [r8, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0cc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e0ce:	3302      	adds	r3, #2
 800e0d0:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e0d2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800e0e0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f000 8095 	beq.w	800e216 <HAL_SPI_Transmit+0x27a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e0ec:	6822      	ldr	r2, [r4, #0]
 800e0ee:	6953      	ldr	r3, [r2, #20]
 800e0f0:	f013 0f02 	tst.w	r3, #2
 800e0f4:	d015      	beq.n	800e122 <HAL_SPI_Transmit+0x186>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e0f6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d9e1      	bls.n	800e0c4 <HAL_SPI_Transmit+0x128>
 800e100:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e102:	2b00      	cmp	r3, #0
 800e104:	d0de      	beq.n	800e0c4 <HAL_SPI_Transmit+0x128>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e106:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	6213      	str	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e10c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e10e:	3304      	adds	r3, #4
 800e110:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e112:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e116:	b29b      	uxth	r3, r3
 800e118:	3b02      	subs	r3, #2
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800e120:	e7de      	b.n	800e0e0 <HAL_SPI_Transmit+0x144>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e122:	f7f9 fc59 	bl	80079d8 <HAL_GetTick>
 800e126:	1bc0      	subs	r0, r0, r7
 800e128:	42a8      	cmp	r0, r5
 800e12a:	d302      	bcc.n	800e132 <HAL_SPI_Transmit+0x196>
 800e12c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e130:	d101      	bne.n	800e136 <HAL_SPI_Transmit+0x19a>
 800e132:	2d00      	cmp	r5, #0
 800e134:	d1d4      	bne.n	800e0e0 <HAL_SPI_Transmit+0x144>
          SPI_CloseTransfer(hspi);
 800e136:	4620      	mov	r0, r4
 800e138:	f7ff fdbc 	bl	800dcb4 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e13c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e144:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e148:	2301      	movs	r3, #1
 800e14a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 800e14e:	2300      	movs	r3, #0
 800e150:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
          return HAL_TIMEOUT;
 800e154:	2603      	movs	r6, #3
 800e156:	e07b      	b.n	800e250 <HAL_SPI_Transmit+0x2b4>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e158:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d910      	bls.n	800e184 <HAL_SPI_Transmit+0x1e8>
 800e162:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e164:	b173      	cbz	r3, 800e184 <HAL_SPI_Transmit+0x1e8>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e166:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	f8a8 3020 	strh.w	r3, [r8, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e16e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e170:	3302      	adds	r3, #2
 800e172:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e174:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e178:	b29b      	uxth	r3, r3
 800e17a:	3b02      	subs	r3, #2
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800e182:	e00d      	b.n	800e1a0 <HAL_SPI_Transmit+0x204>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e184:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e18c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e18e:	3301      	adds	r3, #1
 800e190:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e192:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e196:	b29b      	uxth	r3, r3
 800e198:	3b01      	subs	r3, #1
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800e1a0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d035      	beq.n	800e216 <HAL_SPI_Transmit+0x27a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e1aa:	6822      	ldr	r2, [r4, #0]
 800e1ac:	6953      	ldr	r3, [r2, #20]
 800e1ae:	f013 0f02 	tst.w	r3, #2
 800e1b2:	d015      	beq.n	800e1e0 <HAL_SPI_Transmit+0x244>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e1b4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	2b03      	cmp	r3, #3
 800e1bc:	d9cc      	bls.n	800e158 <HAL_SPI_Transmit+0x1bc>
 800e1be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e1c0:	2b40      	cmp	r3, #64	@ 0x40
 800e1c2:	d9c9      	bls.n	800e158 <HAL_SPI_Transmit+0x1bc>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e1c4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	6213      	str	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e1ca:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e1d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	3b04      	subs	r3, #4
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800e1de:	e7df      	b.n	800e1a0 <HAL_SPI_Transmit+0x204>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1e0:	f7f9 fbfa 	bl	80079d8 <HAL_GetTick>
 800e1e4:	1bc0      	subs	r0, r0, r7
 800e1e6:	42a8      	cmp	r0, r5
 800e1e8:	d302      	bcc.n	800e1f0 <HAL_SPI_Transmit+0x254>
 800e1ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e1ee:	d101      	bne.n	800e1f4 <HAL_SPI_Transmit+0x258>
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	d1d5      	bne.n	800e1a0 <HAL_SPI_Transmit+0x204>
          SPI_CloseTransfer(hspi);
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f7ff fd5d 	bl	800dcb4 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1fa:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e1fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e202:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e206:	2301      	movs	r3, #1
 800e208:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 800e20c:	2300      	movs	r3, #0
 800e20e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
          return HAL_TIMEOUT;
 800e212:	2603      	movs	r6, #3
 800e214:	e01c      	b.n	800e250 <HAL_SPI_Transmit+0x2b4>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e216:	9700      	str	r7, [sp, #0]
 800e218:	462b      	mov	r3, r5
 800e21a:	2200      	movs	r2, #0
 800e21c:	2108      	movs	r1, #8
 800e21e:	4620      	mov	r0, r4
 800e220:	f7ff fdb8 	bl	800dd94 <SPI_WaitOnFlagUntilTimeout>
 800e224:	b128      	cbz	r0, 800e232 <HAL_SPI_Transmit+0x296>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e226:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e22a:	f043 0320 	orr.w	r3, r3, #32
 800e22e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  SPI_CloseTransfer(hspi);
 800e232:	4620      	mov	r0, r4
 800e234:	f7ff fd3e 	bl	800dcb4 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800e238:	2301      	movs	r3, #1
 800e23a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 800e23e:	2300      	movs	r3, #0
 800e240:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e244:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e248:	b913      	cbnz	r3, 800e250 <HAL_SPI_Transmit+0x2b4>
    return HAL_OK;
 800e24a:	2600      	movs	r6, #0
 800e24c:	e000      	b.n	800e250 <HAL_SPI_Transmit+0x2b4>
    return HAL_BUSY;
 800e24e:	2602      	movs	r6, #2
}
 800e250:	4630      	mov	r0, r6
 800e252:	b002      	add	sp, #8
 800e254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 800e258:	2602      	movs	r6, #2
 800e25a:	e7f9      	b.n	800e250 <HAL_SPI_Transmit+0x2b4>
 800e25c:	ffff0000 	.word	0xffff0000

0800e260 <HAL_SPI_TransmitReceive>:
{
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	b083      	sub	sp, #12
 800e266:	4604      	mov	r4, r0
 800e268:	468a      	mov	sl, r1
 800e26a:	4691      	mov	r9, r2
 800e26c:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e26e:	f8d0 b000 	ldr.w	fp, [r0]
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e272:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 800e274:	f3c6 164f 	ubfx	r6, r6, #5, #16
  tickstart = HAL_GetTick();
 800e278:	f7f9 fbae 	bl	80079d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800e27c:	f894 7081 	ldrb.w	r7, [r4, #129]	@ 0x81
 800e280:	b2ff      	uxtb	r7, r7
 800e282:	2f01      	cmp	r7, #1
 800e284:	f040 822f 	bne.w	800e6e6 <HAL_SPI_TransmitReceive+0x486>
 800e288:	3601      	adds	r6, #1
 800e28a:	b2b6      	uxth	r6, r6
 800e28c:	4680      	mov	r8, r0
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e28e:	f1b9 0f00 	cmp.w	r9, #0
 800e292:	bf18      	it	ne
 800e294:	f1ba 0f00 	cmpne.w	sl, #0
 800e298:	f000 8226 	beq.w	800e6e8 <HAL_SPI_TransmitReceive+0x488>
 800e29c:	2d00      	cmp	r5, #0
 800e29e:	f000 8223 	beq.w	800e6e8 <HAL_SPI_TransmitReceive+0x488>
  __HAL_LOCK(hspi);
 800e2a2:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	f000 8222 	beq.w	800e6f0 <HAL_SPI_TransmitReceive+0x490>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e2b2:	2305      	movs	r3, #5
 800e2b4:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e2be:	f8c4 9064 	str.w	r9, [r4, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800e2c2:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800e2c6:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e2ca:	f8c4 a05c 	str.w	sl, [r4, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800e2ce:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800e2d2:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800e2d6:	6723      	str	r3, [r4, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e2d8:	6763      	str	r3, [r4, #116]	@ 0x74
  SPI_2LINES(hspi);
 800e2da:	6822      	ldr	r2, [r4, #0]
 800e2dc:	68d3      	ldr	r3, [r2, #12]
 800e2de:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800e2e2:	60d3      	str	r3, [r2, #12]
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800e2e4:	6822      	ldr	r2, [r4, #0]
 800e2e6:	499c      	ldr	r1, [pc, #624]	@ (800e558 <HAL_SPI_TransmitReceive+0x2f8>)
 800e2e8:	4b9c      	ldr	r3, [pc, #624]	@ (800e55c <HAL_SPI_TransmitReceive+0x2fc>)
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	bf18      	it	ne
 800e2ee:	428a      	cmpne	r2, r1
 800e2f0:	d009      	beq.n	800e306 <HAL_SPI_TransmitReceive+0xa6>
 800e2f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d002      	beq.n	800e300 <HAL_SPI_TransmitReceive+0xa0>
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800e2fa:	f04f 0908 	mov.w	r9, #8
 800e2fe:	e004      	b.n	800e30a <HAL_SPI_TransmitReceive+0xaa>
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800e300:	f04f 0910 	mov.w	r9, #16
 800e304:	e001      	b.n	800e30a <HAL_SPI_TransmitReceive+0xaa>
 800e306:	f04f 0910 	mov.w	r9, #16
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e30a:	6851      	ldr	r1, [r2, #4]
 800e30c:	4b94      	ldr	r3, [pc, #592]	@ (800e560 <HAL_SPI_TransmitReceive+0x300>)
 800e30e:	400b      	ands	r3, r1
 800e310:	432b      	orrs	r3, r5
 800e312:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800e314:	6822      	ldr	r2, [r4, #0]
 800e316:	6813      	ldr	r3, [r2, #0]
 800e318:	f043 0301 	orr.w	r3, r3, #1
 800e31c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e31e:	6863      	ldr	r3, [r4, #4]
 800e320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e324:	d006      	beq.n	800e334 <HAL_SPI_TransmitReceive+0xd4>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e326:	68e3      	ldr	r3, [r4, #12]
 800e328:	2b0f      	cmp	r3, #15
 800e32a:	d97a      	bls.n	800e422 <HAL_SPI_TransmitReceive+0x1c2>
    fifo_length = (fifo_length / 4UL);
 800e32c:	ea4f 0b99 	mov.w	fp, r9, lsr #2
  initial_RxXferCount = Size;
 800e330:	46a9      	mov	r9, r5
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e332:	e01f      	b.n	800e374 <HAL_SPI_TransmitReceive+0x114>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e334:	6822      	ldr	r2, [r4, #0]
 800e336:	6813      	ldr	r3, [r2, #0]
 800e338:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e33c:	6013      	str	r3, [r2, #0]
 800e33e:	e7f2      	b.n	800e326 <HAL_SPI_TransmitReceive+0xc6>
      temp_sr_reg = hspi->Instance->SR;
 800e340:	6823      	ldr	r3, [r4, #0]
 800e342:	695a      	ldr	r2, [r3, #20]
      if (initial_RxXferCount > 0UL)
 800e344:	f1b9 0f00 	cmp.w	r9, #0
 800e348:	d014      	beq.n	800e374 <HAL_SPI_TransmitReceive+0x114>
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e34a:	6959      	ldr	r1, [r3, #20]
 800e34c:	f011 0f01 	tst.w	r1, #1
 800e350:	d032      	beq.n	800e3b8 <HAL_SPI_TransmitReceive+0x158>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e352:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e356:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e358:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e35a:	3304      	adds	r3, #4
 800e35c:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 800e35e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e362:	b29b      	uxth	r3, r3
 800e364:	3b01      	subs	r3, #1
 800e366:	b29b      	uxth	r3, r3
 800e368:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e36c:	f8b4 906a 	ldrh.w	r9, [r4, #106]	@ 0x6a
 800e370:	fa1f f989 	uxth.w	r9, r9
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e374:	ea45 0309 	orr.w	r3, r5, r9
 800e378:	b29b      	uxth	r3, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 8196 	beq.w	800e6ac <HAL_SPI_TransmitReceive+0x44c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	695a      	ldr	r2, [r3, #20]
 800e384:	f012 0f02 	tst.w	r2, #2
 800e388:	d0da      	beq.n	800e340 <HAL_SPI_TransmitReceive+0xe0>
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	d0d8      	beq.n	800e340 <HAL_SPI_TransmitReceive+0xe0>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e38e:	eb05 020b 	add.w	r2, r5, fp
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e392:	4591      	cmp	r9, r2
 800e394:	d2d4      	bcs.n	800e340 <HAL_SPI_TransmitReceive+0xe0>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e396:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e398:	6812      	ldr	r2, [r2, #0]
 800e39a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e39c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e39e:	3304      	adds	r3, #4
 800e3a0:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount --;
 800e3a2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e3b0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
 800e3b4:	b2ad      	uxth	r5, r5
 800e3b6:	e7c3      	b.n	800e340 <HAL_SPI_TransmitReceive+0xe0>
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e3b8:	45b1      	cmp	r9, r6
 800e3ba:	d214      	bcs.n	800e3e6 <HAL_SPI_TransmitReceive+0x186>
 800e3bc:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800e3c0:	d011      	beq.n	800e3e6 <HAL_SPI_TransmitReceive+0x186>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e3c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3c6:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e3c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 800e3ce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e3dc:	f8b4 906a 	ldrh.w	r9, [r4, #106]	@ 0x6a
 800e3e0:	fa1f f989 	uxth.w	r9, r9
 800e3e4:	e7c6      	b.n	800e374 <HAL_SPI_TransmitReceive+0x114>
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3e6:	f7f9 faf7 	bl	80079d8 <HAL_GetTick>
 800e3ea:	eba0 0008 	sub.w	r0, r0, r8
 800e3ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3f0:	4298      	cmp	r0, r3
 800e3f2:	d302      	bcc.n	800e3fa <HAL_SPI_TransmitReceive+0x19a>
 800e3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f8:	d102      	bne.n	800e400 <HAL_SPI_TransmitReceive+0x1a0>
 800e3fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1b9      	bne.n	800e374 <HAL_SPI_TransmitReceive+0x114>
            SPI_CloseTransfer(hspi);
 800e400:	4620      	mov	r0, r4
 800e402:	f7ff fc57 	bl	800dcb4 <SPI_CloseTransfer>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e406:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e40a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e40e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e412:	2301      	movs	r3, #1
 800e414:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
            __HAL_UNLOCK(hspi);
 800e418:	2300      	movs	r3, #0
 800e41a:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
            return HAL_TIMEOUT;
 800e41e:	2703      	movs	r7, #3
 800e420:	e162      	b.n	800e6e8 <HAL_SPI_TransmitReceive+0x488>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e422:	2b07      	cmp	r3, #7
 800e424:	f240 8140 	bls.w	800e6a8 <HAL_SPI_TransmitReceive+0x448>
    fifo_length = (fifo_length / 2UL);
 800e428:	ea4f 0359 	mov.w	r3, r9, lsr #1
 800e42c:	469a      	mov	sl, r3
  initial_RxXferCount = Size;
 800e42e:	46a9      	mov	r9, r5
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e430:	e01a      	b.n	800e468 <HAL_SPI_TransmitReceive+0x208>
      temp_sr_reg = hspi->Instance->SR;
 800e432:	6823      	ldr	r3, [r4, #0]
 800e434:	695a      	ldr	r2, [r3, #20]
      if (initial_RxXferCount > 0UL)
 800e436:	f1b9 0f00 	cmp.w	r9, #0
 800e43a:	d015      	beq.n	800e468 <HAL_SPI_TransmitReceive+0x208>
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	f013 0f01 	tst.w	r3, #1
 800e442:	d034      	beq.n	800e4ae <HAL_SPI_TransmitReceive+0x24e>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e446:	f8bb 2030 	ldrh.w	r2, [fp, #48]	@ 0x30
 800e44a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e44c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e44e:	3302      	adds	r3, #2
 800e450:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 800e452:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e456:	b29b      	uxth	r3, r3
 800e458:	3b01      	subs	r3, #1
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e460:	f8b4 906a 	ldrh.w	r9, [r4, #106]	@ 0x6a
 800e464:	fa1f f989 	uxth.w	r9, r9
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e468:	ea45 0309 	orr.w	r3, r5, r9
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	f000 811c 	beq.w	800e6ac <HAL_SPI_TransmitReceive+0x44c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	695b      	ldr	r3, [r3, #20]
 800e478:	f013 0f02 	tst.w	r3, #2
 800e47c:	d0d9      	beq.n	800e432 <HAL_SPI_TransmitReceive+0x1d2>
 800e47e:	2d00      	cmp	r5, #0
 800e480:	d0d7      	beq.n	800e432 <HAL_SPI_TransmitReceive+0x1d2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e482:	4653      	mov	r3, sl
 800e484:	18eb      	adds	r3, r5, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e486:	4599      	cmp	r9, r3
 800e488:	d2d3      	bcs.n	800e432 <HAL_SPI_TransmitReceive+0x1d2>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e48a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e48c:	881b      	ldrh	r3, [r3, #0]
 800e48e:	f8ab 3020 	strh.w	r3, [fp, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e492:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e494:	3302      	adds	r3, #2
 800e496:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e498:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e4a6:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
 800e4aa:	b2ad      	uxth	r5, r5
 800e4ac:	e7c1      	b.n	800e432 <HAL_SPI_TransmitReceive+0x1d2>
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4ae:	45b1      	cmp	r9, r6
 800e4b0:	d21b      	bcs.n	800e4ea <HAL_SPI_TransmitReceive+0x28a>
 800e4b2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800e4b6:	d018      	beq.n	800e4ea <HAL_SPI_TransmitReceive+0x28a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4ba:	f8bb 2030 	ldrh.w	r2, [fp, #48]	@ 0x30
 800e4be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4c2:	1c9a      	adds	r2, r3, #2
 800e4c4:	6662      	str	r2, [r4, #100]	@ 0x64
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4c6:	f8bb 2030 	ldrh.w	r2, [fp, #48]	@ 0x30
 800e4ca:	805a      	strh	r2, [r3, #2]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4ce:	3302      	adds	r3, #2
 800e4d0:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e4d2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	3b02      	subs	r3, #2
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e4e0:	f8b4 906a 	ldrh.w	r9, [r4, #106]	@ 0x6a
 800e4e4:	fa1f f989 	uxth.w	r9, r9
 800e4e8:	e7be      	b.n	800e468 <HAL_SPI_TransmitReceive+0x208>
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e4ea:	f1b9 0f01 	cmp.w	r9, #1
 800e4ee:	d115      	bne.n	800e51c <HAL_SPI_TransmitReceive+0x2bc>
 800e4f0:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800e4f4:	d012      	beq.n	800e51c <HAL_SPI_TransmitReceive+0x2bc>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4f8:	f8bb 2030 	ldrh.w	r2, [fp, #48]	@ 0x30
 800e4fc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e500:	3302      	adds	r3, #2
 800e502:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 800e504:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e508:	b29b      	uxth	r3, r3
 800e50a:	3b01      	subs	r3, #1
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e512:	f8b4 906a 	ldrh.w	r9, [r4, #106]	@ 0x6a
 800e516:	fa1f f989 	uxth.w	r9, r9
 800e51a:	e7a5      	b.n	800e468 <HAL_SPI_TransmitReceive+0x208>
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e51c:	f7f9 fa5c 	bl	80079d8 <HAL_GetTick>
 800e520:	eba0 0008 	sub.w	r0, r0, r8
 800e524:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e526:	4298      	cmp	r0, r3
 800e528:	d302      	bcc.n	800e530 <HAL_SPI_TransmitReceive+0x2d0>
 800e52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52e:	d102      	bne.n	800e536 <HAL_SPI_TransmitReceive+0x2d6>
 800e530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e532:	2b00      	cmp	r3, #0
 800e534:	d198      	bne.n	800e468 <HAL_SPI_TransmitReceive+0x208>
            SPI_CloseTransfer(hspi);
 800e536:	4620      	mov	r0, r4
 800e538:	f7ff fbbc 	bl	800dcb4 <SPI_CloseTransfer>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e53c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e544:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e548:	2301      	movs	r3, #1
 800e54a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
            __HAL_UNLOCK(hspi);
 800e54e:	2300      	movs	r3, #0
 800e550:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
            return HAL_TIMEOUT;
 800e554:	2703      	movs	r7, #3
 800e556:	e0c7      	b.n	800e6e8 <HAL_SPI_TransmitReceive+0x488>
 800e558:	40013000 	.word	0x40013000
 800e55c:	40003800 	.word	0x40003800
 800e560:	ffff0000 	.word	0xffff0000
      temp_sr_reg = hspi->Instance->SR;
 800e564:	6823      	ldr	r3, [r4, #0]
 800e566:	695a      	ldr	r2, [r3, #20]
      if (initial_RxXferCount > 0UL)
 800e568:	f1bb 0f00 	cmp.w	fp, #0
 800e56c:	d015      	beq.n	800e59a <HAL_SPI_TransmitReceive+0x33a>
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e56e:	6959      	ldr	r1, [r3, #20]
 800e570:	f011 0f01 	tst.w	r1, #1
 800e574:	d034      	beq.n	800e5e0 <HAL_SPI_TransmitReceive+0x380>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e576:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e578:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e57c:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e57e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e580:	3301      	adds	r3, #1
 800e582:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 800e584:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e588:	b29b      	uxth	r3, r3
 800e58a:	3b01      	subs	r3, #1
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e592:	f8b4 b06a 	ldrh.w	fp, [r4, #106]	@ 0x6a
 800e596:	fa1f fb8b 	uxth.w	fp, fp
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e59a:	ea45 030b 	orr.w	r3, r5, fp
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f000 8083 	beq.w	800e6ac <HAL_SPI_TransmitReceive+0x44c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	695a      	ldr	r2, [r3, #20]
 800e5aa:	f012 0f02 	tst.w	r2, #2
 800e5ae:	d0d9      	beq.n	800e564 <HAL_SPI_TransmitReceive+0x304>
 800e5b0:	2d00      	cmp	r5, #0
 800e5b2:	d0d7      	beq.n	800e564 <HAL_SPI_TransmitReceive+0x304>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e5b4:	eb05 0209 	add.w	r2, r5, r9
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e5b8:	4593      	cmp	fp, r2
 800e5ba:	d2d3      	bcs.n	800e564 <HAL_SPI_TransmitReceive+0x304>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e5bc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e5be:	7812      	ldrb	r2, [r2, #0]
 800e5c0:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e5c4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e5ca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e5d8:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
 800e5dc:	b2ad      	uxth	r5, r5
 800e5de:	e7c1      	b.n	800e564 <HAL_SPI_TransmitReceive+0x304>
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e5e0:	45b3      	cmp	fp, r6
 800e5e2:	d22a      	bcs.n	800e63a <HAL_SPI_TransmitReceive+0x3da>
 800e5e4:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800e5e8:	d027      	beq.n	800e63a <HAL_SPI_TransmitReceive+0x3da>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e5f0:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5f4:	1c5a      	adds	r2, r3, #1
 800e5f6:	6662      	str	r2, [r4, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5f8:	6822      	ldr	r2, [r4, #0]
 800e5fa:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800e5fe:	705a      	strb	r2, [r3, #1]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e600:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	6662      	str	r2, [r4, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e606:	6822      	ldr	r2, [r4, #0]
 800e608:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800e60c:	705a      	strb	r2, [r3, #1]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e60e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e610:	1c5a      	adds	r2, r3, #1
 800e612:	6662      	str	r2, [r4, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e614:	6822      	ldr	r2, [r4, #0]
 800e616:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800e61a:	705a      	strb	r2, [r3, #1]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e61c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e61e:	3301      	adds	r3, #1
 800e620:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e622:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e626:	b29b      	uxth	r3, r3
 800e628:	3b04      	subs	r3, #4
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e630:	f8b4 b06a 	ldrh.w	fp, [r4, #106]	@ 0x6a
 800e634:	fa1f fb8b 	uxth.w	fp, fp
 800e638:	e7af      	b.n	800e59a <HAL_SPI_TransmitReceive+0x33a>
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e63a:	f1bb 0f03 	cmp.w	fp, #3
 800e63e:	d815      	bhi.n	800e66c <HAL_SPI_TransmitReceive+0x40c>
 800e640:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 800e644:	d012      	beq.n	800e66c <HAL_SPI_TransmitReceive+0x40c>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e646:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e648:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e64c:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e64e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e650:	3301      	adds	r3, #1
 800e652:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 800e654:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e658:	b29b      	uxth	r3, r3
 800e65a:	3b01      	subs	r3, #1
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e662:	f8b4 b06a 	ldrh.w	fp, [r4, #106]	@ 0x6a
 800e666:	fa1f fb8b 	uxth.w	fp, fp
 800e66a:	e796      	b.n	800e59a <HAL_SPI_TransmitReceive+0x33a>
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e66c:	f7f9 f9b4 	bl	80079d8 <HAL_GetTick>
 800e670:	eba0 0008 	sub.w	r0, r0, r8
 800e674:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e676:	4298      	cmp	r0, r3
 800e678:	d302      	bcc.n	800e680 <HAL_SPI_TransmitReceive+0x420>
 800e67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67e:	d102      	bne.n	800e686 <HAL_SPI_TransmitReceive+0x426>
 800e680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e682:	2b00      	cmp	r3, #0
 800e684:	d189      	bne.n	800e59a <HAL_SPI_TransmitReceive+0x33a>
            SPI_CloseTransfer(hspi);
 800e686:	4620      	mov	r0, r4
 800e688:	f7ff fb14 	bl	800dcb4 <SPI_CloseTransfer>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e68c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e694:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e698:	2301      	movs	r3, #1
 800e69a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
            __HAL_UNLOCK(hspi);
 800e69e:	2300      	movs	r3, #0
 800e6a0:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
            return HAL_TIMEOUT;
 800e6a4:	2703      	movs	r7, #3
 800e6a6:	e01f      	b.n	800e6e8 <HAL_SPI_TransmitReceive+0x488>
  initial_RxXferCount = Size;
 800e6a8:	46ab      	mov	fp, r5
 800e6aa:	e776      	b.n	800e59a <HAL_SPI_TransmitReceive+0x33a>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e6ac:	f8cd 8000 	str.w	r8, [sp]
 800e6b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	2108      	movs	r1, #8
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f7ff fb6c 	bl	800dd94 <SPI_WaitOnFlagUntilTimeout>
 800e6bc:	b128      	cbz	r0, 800e6ca <HAL_SPI_TransmitReceive+0x46a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6be:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e6c2:	f043 0320 	orr.w	r3, r3, #32
 800e6c6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  SPI_CloseTransfer(hspi);
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f7ff faf2 	bl	800dcb4 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6dc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e6e0:	b913      	cbnz	r3, 800e6e8 <HAL_SPI_TransmitReceive+0x488>
    return HAL_OK;
 800e6e2:	2700      	movs	r7, #0
 800e6e4:	e000      	b.n	800e6e8 <HAL_SPI_TransmitReceive+0x488>
    return HAL_BUSY;
 800e6e6:	2702      	movs	r7, #2
}
 800e6e8:	4638      	mov	r0, r7
 800e6ea:	b003      	add	sp, #12
 800e6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hspi);
 800e6f0:	2702      	movs	r7, #2
 800e6f2:	e7f9      	b.n	800e6e8 <HAL_SPI_TransmitReceive+0x488>

0800e6f4 <HAL_SPI_Receive_DMA>:
{
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800e6f8:	f890 5081 	ldrb.w	r5, [r0, #129]	@ 0x81
 800e6fc:	b2ed      	uxtb	r5, r5
 800e6fe:	2d01      	cmp	r5, #1
 800e700:	f040 8088 	bne.w	800e814 <HAL_SPI_Receive_DMA+0x120>
 800e704:	4616      	mov	r6, r2
  if ((pData == NULL) || (Size == 0UL))
 800e706:	2a00      	cmp	r2, #0
 800e708:	bf18      	it	ne
 800e70a:	2900      	cmpne	r1, #0
 800e70c:	f000 8088 	beq.w	800e820 <HAL_SPI_Receive_DMA+0x12c>
  __HAL_LOCK(hspi);
 800e710:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800e714:	2b01      	cmp	r3, #1
 800e716:	f000 80c9 	beq.w	800e8ac <HAL_SPI_Receive_DMA+0x1b8>
 800e71a:	2301      	movs	r3, #1
 800e71c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e720:	2304      	movs	r3, #4
 800e722:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e726:	2300      	movs	r3, #0
 800e728:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e72c:	6641      	str	r1, [r0, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800e72e:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800e732:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800e736:	6703      	str	r3, [r0, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e738:	6743      	str	r3, [r0, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e73a:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e73e:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e742:	6883      	ldr	r3, [r0, #8]
 800e744:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e748:	d06e      	beq.n	800e828 <HAL_SPI_Receive_DMA+0x134>
    SPI_2LINES_RX(hspi);
 800e74a:	6802      	ldr	r2, [r0, #0]
 800e74c:	68d3      	ldr	r3, [r2, #12]
 800e74e:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800e752:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e756:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e758:	68e3      	ldr	r3, [r4, #12]
 800e75a:	2b0f      	cmp	r3, #15
 800e75c:	d904      	bls.n	800e768 <HAL_SPI_Receive_DMA+0x74>
 800e75e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e760:	6992      	ldr	r2, [r2, #24]
 800e762:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800e766:	d165      	bne.n	800e834 <HAL_SPI_Receive_DMA+0x140>
 800e768:	2b07      	cmp	r3, #7
 800e76a:	d907      	bls.n	800e77c <HAL_SPI_Receive_DMA+0x88>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e76c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e774:	bf18      	it	ne
 800e776:	f5b3 4f80 	cmpne.w	r3, #16384	@ 0x4000
 800e77a:	d15b      	bne.n	800e834 <HAL_SPI_Receive_DMA+0x140>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e77c:	6822      	ldr	r2, [r4, #0]
 800e77e:	6893      	ldr	r3, [r2, #8]
 800e780:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e784:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e786:	68e3      	ldr	r3, [r4, #12]
 800e788:	2b07      	cmp	r3, #7
 800e78a:	d867      	bhi.n	800e85c <HAL_SPI_Receive_DMA+0x168>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e78c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e78e:	699a      	ldr	r2, [r3, #24]
 800e790:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800e794:	d052      	beq.n	800e83c <HAL_SPI_Receive_DMA+0x148>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e79c:	d056      	beq.n	800e84c <HAL_SPI_Receive_DMA+0x158>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e79e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e7a0:	4a43      	ldr	r2, [pc, #268]	@ (800e8b0 <HAL_SPI_Receive_DMA+0x1bc>)
 800e7a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e7a4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e7a6:	4a43      	ldr	r2, [pc, #268]	@ (800e8b4 <HAL_SPI_Receive_DMA+0x1c0>)
 800e7a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e7aa:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e7ac:	4a42      	ldr	r2, [pc, #264]	@ (800e8b8 <HAL_SPI_Receive_DMA+0x1c4>)
 800e7ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800e7b0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e7b6:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800e7b8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7c0:	3130      	adds	r1, #48	@ 0x30
 800e7c2:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800e7c4:	f7f9 ff3e 	bl	8008644 <HAL_DMA_Start_IT>
 800e7c8:	4601      	mov	r1, r0
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d155      	bne.n	800e87a <HAL_SPI_Receive_DMA+0x186>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e7ce:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7d6:	d05d      	beq.n	800e894 <HAL_SPI_Receive_DMA+0x1a0>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e7d8:	6820      	ldr	r0, [r4, #0]
 800e7da:	6842      	ldr	r2, [r0, #4]
 800e7dc:	4b37      	ldr	r3, [pc, #220]	@ (800e8bc <HAL_SPI_Receive_DMA+0x1c8>)
 800e7de:	4013      	ands	r3, r2
 800e7e0:	4333      	orrs	r3, r6
 800e7e2:	6043      	str	r3, [r0, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e7e4:	6822      	ldr	r2, [r4, #0]
 800e7e6:	6893      	ldr	r3, [r2, #8]
 800e7e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e7ec:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e7ee:	6822      	ldr	r2, [r4, #0]
 800e7f0:	6913      	ldr	r3, [r2, #16]
 800e7f2:	f443 7350 	orr.w	r3, r3, #832	@ 0x340
 800e7f6:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800e7f8:	6822      	ldr	r2, [r4, #0]
 800e7fa:	6813      	ldr	r3, [r2, #0]
 800e7fc:	f043 0301 	orr.w	r3, r3, #1
 800e800:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e802:	6863      	ldr	r3, [r4, #4]
 800e804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e808:	d04a      	beq.n	800e8a0 <HAL_SPI_Receive_DMA+0x1ac>
  __HAL_UNLOCK(hspi);
 800e80a:	2300      	movs	r3, #0
 800e80c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  return HAL_OK;
 800e810:	460d      	mov	r5, r1
 800e812:	e003      	b.n	800e81c <HAL_SPI_Receive_DMA+0x128>
    __HAL_UNLOCK(hspi);
 800e814:	2300      	movs	r3, #0
 800e816:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    return HAL_BUSY;
 800e81a:	2502      	movs	r5, #2
}
 800e81c:	4628      	mov	r0, r5
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800e820:	2300      	movs	r3, #0
 800e822:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    return HAL_ERROR;
 800e826:	e7f9      	b.n	800e81c <HAL_SPI_Receive_DMA+0x128>
    SPI_1LINE_RX(hspi);
 800e828:	6802      	ldr	r2, [r0, #0]
 800e82a:	6813      	ldr	r3, [r2, #0]
 800e82c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e830:	6013      	str	r3, [r2, #0]
 800e832:	e791      	b.n	800e758 <HAL_SPI_Receive_DMA+0x64>
    __HAL_UNLOCK(hspi);
 800e834:	2300      	movs	r3, #0
 800e836:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    return HAL_ERROR;
 800e83a:	e7ef      	b.n	800e81c <HAL_SPI_Receive_DMA+0x128>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e83c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800e840:	b292      	uxth	r2, r2
 800e842:	3201      	adds	r2, #1
 800e844:	0852      	lsrs	r2, r2, #1
 800e846:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
 800e84a:	e7a4      	b.n	800e796 <HAL_SPI_Receive_DMA+0xa2>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e84c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e850:	b29b      	uxth	r3, r3
 800e852:	3303      	adds	r3, #3
 800e854:	089b      	lsrs	r3, r3, #2
 800e856:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 800e85a:	e7a0      	b.n	800e79e <HAL_SPI_Receive_DMA+0xaa>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e85c:	2b0f      	cmp	r3, #15
 800e85e:	d89e      	bhi.n	800e79e <HAL_SPI_Receive_DMA+0xaa>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e860:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e862:	699b      	ldr	r3, [r3, #24]
 800e864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e868:	d199      	bne.n	800e79e <HAL_SPI_Receive_DMA+0xaa>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e86a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800e86e:	b29b      	uxth	r3, r3
 800e870:	3301      	adds	r3, #1
 800e872:	085b      	lsrs	r3, r3, #1
 800e874:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 800e878:	e791      	b.n	800e79e <HAL_SPI_Receive_DMA+0xaa>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e87a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e87e:	f043 0310 	orr.w	r3, r3, #16
 800e882:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e886:	2301      	movs	r3, #1
 800e888:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
    __HAL_UNLOCK(hspi);
 800e88c:	2300      	movs	r3, #0
 800e88e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    return HAL_ERROR;
 800e892:	e7c3      	b.n	800e81c <HAL_SPI_Receive_DMA+0x128>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e894:	6822      	ldr	r2, [r4, #0]
 800e896:	6850      	ldr	r0, [r2, #4]
 800e898:	4b08      	ldr	r3, [pc, #32]	@ (800e8bc <HAL_SPI_Receive_DMA+0x1c8>)
 800e89a:	4003      	ands	r3, r0
 800e89c:	6053      	str	r3, [r2, #4]
 800e89e:	e7a1      	b.n	800e7e4 <HAL_SPI_Receive_DMA+0xf0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e8a0:	6822      	ldr	r2, [r4, #0]
 800e8a2:	6813      	ldr	r3, [r2, #0]
 800e8a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	e7ae      	b.n	800e80a <HAL_SPI_Receive_DMA+0x116>
  __HAL_LOCK(hspi);
 800e8ac:	2502      	movs	r5, #2
 800e8ae:	e7b5      	b.n	800e81c <HAL_SPI_Receive_DMA+0x128>
 800e8b0:	0800e8f1 	.word	0x0800e8f1
 800e8b4:	0800e8c3 	.word	0x0800e8c3
 800e8b8:	0800e8fb 	.word	0x0800e8fb
 800e8bc:	ffff0000 	.word	0xffff0000

0800e8c0 <HAL_SPI_TxCpltCallback>:
}
 800e8c0:	4770      	bx	lr

0800e8c2 <SPI_DMAReceiveCplt>:
{
 800e8c2:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8c4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e8c6:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	2b07      	cmp	r3, #7
 800e8ce:	d009      	beq.n	800e8e4 <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e8d0:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800e8d2:	69db      	ldr	r3, [r3, #28]
 800e8d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8d8:	d005      	beq.n	800e8e6 <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e8da:	6802      	ldr	r2, [r0, #0]
 800e8dc:	6913      	ldr	r3, [r2, #16]
 800e8de:	f043 0308 	orr.w	r3, r3, #8
 800e8e2:	6113      	str	r3, [r2, #16]
}
 800e8e4:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800e8e6:	f7f5 fff1 	bl	80048cc <HAL_SPI_RxCpltCallback>
 800e8ea:	e7fb      	b.n	800e8e4 <SPI_DMAReceiveCplt+0x22>

0800e8ec <HAL_SPI_TxRxCpltCallback>:
}
 800e8ec:	4770      	bx	lr

0800e8ee <HAL_SPI_RxHalfCpltCallback>:
}
 800e8ee:	4770      	bx	lr

0800e8f0 <SPI_DMAHalfReceiveCplt>:
{
 800e8f0:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e8f2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800e8f4:	f7ff fffb 	bl	800e8ee <HAL_SPI_RxHalfCpltCallback>
}
 800e8f8:	bd08      	pop	{r3, pc}

0800e8fa <SPI_DMAError>:
{
 800e8fa:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8fc:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e8fe:	f7fa fcc4 	bl	800928a <HAL_DMA_GetError>
 800e902:	2802      	cmp	r0, #2
 800e904:	d100      	bne.n	800e908 <SPI_DMAError+0xe>
}
 800e906:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
 800e908:	4620      	mov	r0, r4
 800e90a:	f7ff f9d3 	bl	800dcb4 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e90e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e912:	f043 0310 	orr.w	r3, r3, #16
 800e916:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e91a:	2301      	movs	r3, #1
 800e91c:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
    HAL_SPI_ErrorCallback(hspi);
 800e920:	4620      	mov	r0, r4
 800e922:	f7f5 ffe1 	bl	80048e8 <HAL_SPI_ErrorCallback>
}
 800e926:	e7ee      	b.n	800e906 <SPI_DMAError+0xc>

0800e928 <SPI_DMAAbortOnError>:
{
 800e928:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e92a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800e92c:	2300      	movs	r3, #0
 800e92e:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800e932:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800e936:	2301      	movs	r3, #1
 800e938:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
  HAL_SPI_ErrorCallback(hspi);
 800e93c:	f7f5 ffd4 	bl	80048e8 <HAL_SPI_ErrorCallback>
}
 800e940:	bd08      	pop	{r3, pc}

0800e942 <HAL_SPI_SuspendCallback>:
}
 800e942:	4770      	bx	lr

0800e944 <HAL_SPI_IRQHandler>:
{
 800e944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e948:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800e94a:	6806      	ldr	r6, [r0, #0]
 800e94c:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800e94e:	6973      	ldr	r3, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800e950:	ea02 0503 	and.w	r5, r2, r3
  uint32_t cfg1     = hspi->Instance->CFG1;
 800e954:	f8d6 9008 	ldr.w	r9, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800e958:	f890 7081 	ldrb.w	r7, [r0, #129]	@ 0x81
 800e95c:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800e95e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800e962:	d002      	beq.n	800e96a <HAL_SPI_IRQHandler+0x26>
 800e964:	f012 0f08 	tst.w	r2, #8
 800e968:	d13f      	bne.n	800e9ea <HAL_SPI_IRQHandler+0xa6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e96a:	f005 0364 	and.w	r3, r5, #100	@ 0x64
 800e96e:	2b04      	cmp	r3, #4
 800e970:	d042      	beq.n	800e9f8 <HAL_SPI_IRQHandler+0xb4>
  uint32_t handled  = 0UL;
 800e972:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e974:	f005 0845 	and.w	r8, r5, #69	@ 0x45
 800e978:	f1b8 0f01 	cmp.w	r8, #1
 800e97c:	d044      	beq.n	800ea08 <HAL_SPI_IRQHandler+0xc4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e97e:	f005 0226 	and.w	r2, r5, #38	@ 0x26
 800e982:	2a02      	cmp	r2, #2
 800e984:	d045      	beq.n	800ea12 <HAL_SPI_IRQHandler+0xce>
  if (handled != 0UL)
 800e986:	2b00      	cmp	r3, #0
 800e988:	d146      	bne.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800e98a:	f015 0f08 	tst.w	r5, #8
 800e98e:	d079      	beq.n	800ea84 <HAL_SPI_IRQHandler+0x140>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e990:	6822      	ldr	r2, [r4, #0]
 800e992:	6993      	ldr	r3, [r2, #24]
 800e994:	f043 0308 	orr.w	r3, r3, #8
 800e998:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e99a:	6822      	ldr	r2, [r4, #0]
 800e99c:	6993      	ldr	r3, [r2, #24]
 800e99e:	f043 0310 	orr.w	r3, r3, #16
 800e9a2:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e9a4:	6822      	ldr	r2, [r4, #0]
 800e9a6:	6993      	ldr	r3, [r2, #24]
 800e9a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e9ac:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800e9ae:	6822      	ldr	r2, [r4, #0]
 800e9b0:	6913      	ldr	r3, [r2, #16]
 800e9b2:	f023 0308 	bic.w	r3, r3, #8
 800e9b6:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e9b8:	6823      	ldr	r3, [r4, #0]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 800e9c0:	d03b      	beq.n	800ea3a <HAL_SPI_IRQHandler+0xf6>
    SPI_CloseTransfer(hspi);
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f7ff f976 	bl	800dcb4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9ce:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d14a      	bne.n	800ea6c <HAL_SPI_IRQHandler+0x128>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800e9d6:	2f05      	cmp	r7, #5
 800e9d8:	d04c      	beq.n	800ea74 <HAL_SPI_IRQHandler+0x130>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800e9da:	2f04      	cmp	r7, #4
 800e9dc:	d04e      	beq.n	800ea7c <HAL_SPI_IRQHandler+0x138>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800e9de:	2f03      	cmp	r7, #3
 800e9e0:	d11a      	bne.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f7ff ff6c 	bl	800e8c0 <HAL_SPI_TxCpltCallback>
    return;
 800e9e8:	e016      	b.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e9ea:	69b3      	ldr	r3, [r6, #24]
 800e9ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e9f0:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
 800e9f2:	f7ff ffa6 	bl	800e942 <HAL_SPI_SuspendCallback>
    return;
 800e9f6:	e00f      	b.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
 800e9f8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800e9fe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ea00:	4620      	mov	r0, r4
 800ea02:	4798      	blx	r3
    handled = 1UL;
 800ea04:	2301      	movs	r3, #1
 800ea06:	e7b5      	b.n	800e974 <HAL_SPI_IRQHandler+0x30>
    hspi->RxISR(hspi);
 800ea08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	4798      	blx	r3
    handled = 1UL;
 800ea0e:	4643      	mov	r3, r8
 800ea10:	e7b5      	b.n	800e97e <HAL_SPI_IRQHandler+0x3a>
    hspi->TxISR(hspi);
 800ea12:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ea14:	4620      	mov	r0, r4
 800ea16:	4798      	blx	r3
}
 800ea18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea1c:	2b07      	cmp	r3, #7
 800ea1e:	d91c      	bls.n	800ea5a <HAL_SPI_IRQHandler+0x116>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ea20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea22:	8e32      	ldrh	r2, [r6, #48]	@ 0x30
 800ea24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea28:	3302      	adds	r3, #2
 800ea2a:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 800ea2c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	3b01      	subs	r3, #1
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ea3a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d0be      	beq.n	800e9c2 <HAL_SPI_IRQHandler+0x7e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea44:	68e3      	ldr	r3, [r4, #12]
 800ea46:	2b0f      	cmp	r3, #15
 800ea48:	d9e8      	bls.n	800ea1c <HAL_SPI_IRQHandler+0xd8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ea4a:	6822      	ldr	r2, [r4, #0]
 800ea4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea4e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ea50:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ea52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea54:	3304      	adds	r3, #4
 800ea56:	6663      	str	r3, [r4, #100]	@ 0x64
 800ea58:	e7e8      	b.n	800ea2c <HAL_SPI_IRQHandler+0xe8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea5a:	6822      	ldr	r2, [r4, #0]
 800ea5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea5e:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800ea62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea66:	3301      	adds	r3, #1
 800ea68:	6663      	str	r3, [r4, #100]	@ 0x64
 800ea6a:	e7df      	b.n	800ea2c <HAL_SPI_IRQHandler+0xe8>
      HAL_SPI_ErrorCallback(hspi);
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f7f5 ff3b 	bl	80048e8 <HAL_SPI_ErrorCallback>
      return;
 800ea72:	e7d1      	b.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxRxCpltCallback(hspi);
 800ea74:	4620      	mov	r0, r4
 800ea76:	f7ff ff39 	bl	800e8ec <HAL_SPI_TxRxCpltCallback>
 800ea7a:	e7cd      	b.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f7f5 ff25 	bl	80048cc <HAL_SPI_RxCpltCallback>
 800ea82:	e7c9      	b.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ea84:	f415 7f58 	tst.w	r5, #864	@ 0x360
 800ea88:	d0c6      	beq.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ea8a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800ea8e:	d00a      	beq.n	800eaa6 <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ea90:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ea94:	f043 0304 	orr.w	r3, r3, #4
 800ea98:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea9c:	6822      	ldr	r2, [r4, #0]
 800ea9e:	6993      	ldr	r3, [r2, #24]
 800eaa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eaa4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800eaa6:	f415 7f00 	tst.w	r5, #512	@ 0x200
 800eaaa:	d00a      	beq.n	800eac2 <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eaac:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eab0:	f043 0301 	orr.w	r3, r3, #1
 800eab4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eab8:	6822      	ldr	r2, [r4, #0]
 800eaba:	6993      	ldr	r3, [r2, #24]
 800eabc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eac0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800eac2:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800eac6:	d00a      	beq.n	800eade <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eac8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eacc:	f043 0308 	orr.w	r3, r3, #8
 800ead0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ead4:	6822      	ldr	r2, [r4, #0]
 800ead6:	6993      	ldr	r3, [r2, #24]
 800ead8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eadc:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800eade:	f015 0f20 	tst.w	r5, #32
 800eae2:	d00a      	beq.n	800eafa <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800eae4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eaec:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eaf0:	6822      	ldr	r2, [r4, #0]
 800eaf2:	6993      	ldr	r3, [r2, #24]
 800eaf4:	f043 0320 	orr.w	r3, r3, #32
 800eaf8:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eafa:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d08a      	beq.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
 800eb02:	6822      	ldr	r2, [r4, #0]
 800eb04:	6813      	ldr	r3, [r2, #0]
 800eb06:	f023 0301 	bic.w	r3, r3, #1
 800eb0a:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800eb0c:	6822      	ldr	r2, [r4, #0]
 800eb0e:	6911      	ldr	r1, [r2, #16]
 800eb10:	4b1a      	ldr	r3, [pc, #104]	@ (800eb7c <HAL_SPI_IRQHandler+0x238>)
 800eb12:	400b      	ands	r3, r1
 800eb14:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800eb16:	f409 4940 	and.w	r9, r9, #49152	@ 0xc000
 800eb1a:	f5b9 4f40 	cmp.w	r9, #49152	@ 0xc000
 800eb1e:	d125      	bne.n	800eb6c <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eb20:	6822      	ldr	r2, [r4, #0]
 800eb22:	6893      	ldr	r3, [r2, #8]
 800eb24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800eb28:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800eb2a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800eb2c:	b15b      	cbz	r3, 800eb46 <HAL_SPI_IRQHandler+0x202>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800eb2e:	4a14      	ldr	r2, [pc, #80]	@ (800eb80 <HAL_SPI_IRQHandler+0x23c>)
 800eb30:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800eb32:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800eb34:	f7f9 fed2 	bl	80088dc <HAL_DMA_Abort_IT>
 800eb38:	b128      	cbz	r0, 800eb46 <HAL_SPI_IRQHandler+0x202>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eb3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eb3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb42:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        if (hspi->hdmatx != NULL)
 800eb46:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f43f af65 	beq.w	800ea18 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800eb4e:	4a0c      	ldr	r2, [pc, #48]	@ (800eb80 <HAL_SPI_IRQHandler+0x23c>)
 800eb50:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800eb52:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800eb54:	f7f9 fec2 	bl	80088dc <HAL_DMA_Abort_IT>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	f43f af5d 	beq.w	800ea18 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eb5e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eb62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb66:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800eb6a:	e755      	b.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800eb72:	4620      	mov	r0, r4
 800eb74:	f7f5 feb8 	bl	80048e8 <HAL_SPI_ErrorCallback>
    return;
 800eb78:	e74e      	b.n	800ea18 <HAL_SPI_IRQHandler+0xd4>
 800eb7a:	bf00      	nop
 800eb7c:	fffffc94 	.word	0xfffffc94
 800eb80:	0800e929 	.word	0x0800e929

0800eb84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb84:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb86:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb88:	6a03      	ldr	r3, [r0, #32]
 800eb8a:	f023 0301 	bic.w	r3, r3, #1
 800eb8e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb90:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb92:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eb94:	4b1e      	ldr	r3, [pc, #120]	@ (800ec10 <TIM_OC1_SetConfig+0x8c>)
 800eb96:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb98:	680d      	ldr	r5, [r1, #0]
 800eb9a:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eb9c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eba0:	688b      	ldr	r3, [r1, #8]
 800eba2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eba4:	4a1b      	ldr	r2, [pc, #108]	@ (800ec14 <TIM_OC1_SetConfig+0x90>)
 800eba6:	4c1c      	ldr	r4, [pc, #112]	@ (800ec18 <TIM_OC1_SetConfig+0x94>)
 800eba8:	42a0      	cmp	r0, r4
 800ebaa:	bf18      	it	ne
 800ebac:	4290      	cmpne	r0, r2
 800ebae:	bf0c      	ite	eq
 800ebb0:	2201      	moveq	r2, #1
 800ebb2:	2200      	movne	r2, #0
 800ebb4:	d00c      	beq.n	800ebd0 <TIM_OC1_SetConfig+0x4c>
 800ebb6:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800ebba:	42a0      	cmp	r0, r4
 800ebbc:	bf14      	ite	ne
 800ebbe:	2400      	movne	r4, #0
 800ebc0:	2401      	moveq	r4, #1
 800ebc2:	4f16      	ldr	r7, [pc, #88]	@ (800ec1c <TIM_OC1_SetConfig+0x98>)
 800ebc4:	42b8      	cmp	r0, r7
 800ebc6:	d003      	beq.n	800ebd0 <TIM_OC1_SetConfig+0x4c>
 800ebc8:	b914      	cbnz	r4, 800ebd0 <TIM_OC1_SetConfig+0x4c>
 800ebca:	4c15      	ldr	r4, [pc, #84]	@ (800ec20 <TIM_OC1_SetConfig+0x9c>)
 800ebcc:	42a0      	cmp	r0, r4
 800ebce:	d105      	bne.n	800ebdc <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ebd0:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ebd4:	68cc      	ldr	r4, [r1, #12]
 800ebd6:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ebd8:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebdc:	b95a      	cbnz	r2, 800ebf6 <TIM_OC1_SetConfig+0x72>
 800ebde:	4a11      	ldr	r2, [pc, #68]	@ (800ec24 <TIM_OC1_SetConfig+0xa0>)
 800ebe0:	4290      	cmp	r0, r2
 800ebe2:	bf14      	ite	ne
 800ebe4:	2200      	movne	r2, #0
 800ebe6:	2201      	moveq	r2, #1
 800ebe8:	4c0c      	ldr	r4, [pc, #48]	@ (800ec1c <TIM_OC1_SetConfig+0x98>)
 800ebea:	42a0      	cmp	r0, r4
 800ebec:	d003      	beq.n	800ebf6 <TIM_OC1_SetConfig+0x72>
 800ebee:	b912      	cbnz	r2, 800ebf6 <TIM_OC1_SetConfig+0x72>
 800ebf0:	4a0b      	ldr	r2, [pc, #44]	@ (800ec20 <TIM_OC1_SetConfig+0x9c>)
 800ebf2:	4290      	cmp	r0, r2
 800ebf4:	d105      	bne.n	800ec02 <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ebf6:	f426 7640 	bic.w	r6, r6, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ebfa:	694a      	ldr	r2, [r1, #20]
 800ebfc:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ebfe:	698e      	ldr	r6, [r1, #24]
 800ec00:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec02:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec04:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ec06:	684a      	ldr	r2, [r1, #4]
 800ec08:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec0a:	6203      	str	r3, [r0, #32]
}
 800ec0c:	bcf0      	pop	{r4, r5, r6, r7}
 800ec0e:	4770      	bx	lr
 800ec10:	fffeff8c 	.word	0xfffeff8c
 800ec14:	40010000 	.word	0x40010000
 800ec18:	40010400 	.word	0x40010400
 800ec1c:	40014000 	.word	0x40014000
 800ec20:	40014800 	.word	0x40014800
 800ec24:	40014400 	.word	0x40014400

0800ec28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec28:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec2a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec2c:	6a02      	ldr	r2, [r0, #32]
 800ec2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ec32:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec34:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec36:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec38:	4a1a      	ldr	r2, [pc, #104]	@ (800eca4 <TIM_OC3_SetConfig+0x7c>)
 800ec3a:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec3c:	680e      	ldr	r6, [r1, #0]
 800ec3e:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec44:	688a      	ldr	r2, [r1, #8]
 800ec46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec4a:	4a17      	ldr	r2, [pc, #92]	@ (800eca8 <TIM_OC3_SetConfig+0x80>)
 800ec4c:	4c17      	ldr	r4, [pc, #92]	@ (800ecac <TIM_OC3_SetConfig+0x84>)
 800ec4e:	42a0      	cmp	r0, r4
 800ec50:	bf18      	it	ne
 800ec52:	4290      	cmpne	r0, r2
 800ec54:	bf0c      	ite	eq
 800ec56:	2201      	moveq	r2, #1
 800ec58:	2200      	movne	r2, #0
 800ec5a:	d106      	bne.n	800ec6a <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec60:	68cc      	ldr	r4, [r1, #12]
 800ec62:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec6a:	b95a      	cbnz	r2, 800ec84 <TIM_OC3_SetConfig+0x5c>
 800ec6c:	4a10      	ldr	r2, [pc, #64]	@ (800ecb0 <TIM_OC3_SetConfig+0x88>)
 800ec6e:	4290      	cmp	r0, r2
 800ec70:	bf14      	ite	ne
 800ec72:	2200      	movne	r2, #0
 800ec74:	2201      	moveq	r2, #1
 800ec76:	4c0f      	ldr	r4, [pc, #60]	@ (800ecb4 <TIM_OC3_SetConfig+0x8c>)
 800ec78:	42a0      	cmp	r0, r4
 800ec7a:	d003      	beq.n	800ec84 <TIM_OC3_SetConfig+0x5c>
 800ec7c:	b912      	cbnz	r2, 800ec84 <TIM_OC3_SetConfig+0x5c>
 800ec7e:	4a0e      	ldr	r2, [pc, #56]	@ (800ecb8 <TIM_OC3_SetConfig+0x90>)
 800ec80:	4290      	cmp	r0, r2
 800ec82:	d107      	bne.n	800ec94 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec84:	f425 5240 	bic.w	r2, r5, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec88:	694c      	ldr	r4, [r1, #20]
 800ec8a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec8e:	698c      	ldr	r4, [r1, #24]
 800ec90:	ea42 1504 	orr.w	r5, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec94:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec96:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec98:	684a      	ldr	r2, [r1, #4]
 800ec9a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec9c:	6203      	str	r3, [r0, #32]
}
 800ec9e:	bc70      	pop	{r4, r5, r6}
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	fffeff8c 	.word	0xfffeff8c
 800eca8:	40010000 	.word	0x40010000
 800ecac:	40010400 	.word	0x40010400
 800ecb0:	40014400 	.word	0x40014400
 800ecb4:	40014000 	.word	0x40014000
 800ecb8:	40014800 	.word	0x40014800

0800ecbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecbc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecbe:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecc0:	6a02      	ldr	r2, [r0, #32]
 800ecc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ecc6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecc8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ecca:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eccc:	4a14      	ldr	r2, [pc, #80]	@ (800ed20 <TIM_OC4_SetConfig+0x64>)
 800ecce:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ecd0:	680d      	ldr	r5, [r1, #0]
 800ecd2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ecd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ecda:	688d      	ldr	r5, [r1, #8]
 800ecdc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ece0:	4e10      	ldr	r6, [pc, #64]	@ (800ed24 <TIM_OC4_SetConfig+0x68>)
 800ece2:	4d11      	ldr	r5, [pc, #68]	@ (800ed28 <TIM_OC4_SetConfig+0x6c>)
 800ece4:	42a8      	cmp	r0, r5
 800ece6:	bf18      	it	ne
 800ece8:	42b0      	cmpne	r0, r6
 800ecea:	d00d      	beq.n	800ed08 <TIM_OC4_SetConfig+0x4c>
 800ecec:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800ecf0:	42a8      	cmp	r0, r5
 800ecf2:	bf14      	ite	ne
 800ecf4:	2500      	movne	r5, #0
 800ecf6:	2501      	moveq	r5, #1
 800ecf8:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800ecfc:	42b0      	cmp	r0, r6
 800ecfe:	d003      	beq.n	800ed08 <TIM_OC4_SetConfig+0x4c>
 800ed00:	b915      	cbnz	r5, 800ed08 <TIM_OC4_SetConfig+0x4c>
 800ed02:	4d0a      	ldr	r5, [pc, #40]	@ (800ed2c <TIM_OC4_SetConfig+0x70>)
 800ed04:	42a8      	cmp	r0, r5
 800ed06:	d104      	bne.n	800ed12 <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed08:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed0c:	694d      	ldr	r5, [r1, #20]
 800ed0e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed12:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed14:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed16:	684a      	ldr	r2, [r1, #4]
 800ed18:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed1a:	6203      	str	r3, [r0, #32]
}
 800ed1c:	bc70      	pop	{r4, r5, r6}
 800ed1e:	4770      	bx	lr
 800ed20:	feff8cff 	.word	0xfeff8cff
 800ed24:	40010000 	.word	0x40010000
 800ed28:	40010400 	.word	0x40010400
 800ed2c:	40014800 	.word	0x40014800

0800ed30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed30:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed32:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ed34:	6a02      	ldr	r2, [r0, #32]
 800ed36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ed3a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed3c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed3e:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ed40:	4e14      	ldr	r6, [pc, #80]	@ (800ed94 <TIM_OC5_SetConfig+0x64>)
 800ed42:	402e      	ands	r6, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed44:	680d      	ldr	r5, [r1, #0]
 800ed46:	432e      	orrs	r6, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ed48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ed4c:	688c      	ldr	r4, [r1, #8]
 800ed4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed52:	4d11      	ldr	r5, [pc, #68]	@ (800ed98 <TIM_OC5_SetConfig+0x68>)
 800ed54:	4c11      	ldr	r4, [pc, #68]	@ (800ed9c <TIM_OC5_SetConfig+0x6c>)
 800ed56:	42a0      	cmp	r0, r4
 800ed58:	bf18      	it	ne
 800ed5a:	42a8      	cmpne	r0, r5
 800ed5c:	d00d      	beq.n	800ed7a <TIM_OC5_SetConfig+0x4a>
 800ed5e:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800ed62:	42a0      	cmp	r0, r4
 800ed64:	bf14      	ite	ne
 800ed66:	2400      	movne	r4, #0
 800ed68:	2401      	moveq	r4, #1
 800ed6a:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800ed6e:	42a8      	cmp	r0, r5
 800ed70:	d003      	beq.n	800ed7a <TIM_OC5_SetConfig+0x4a>
 800ed72:	b914      	cbnz	r4, 800ed7a <TIM_OC5_SetConfig+0x4a>
 800ed74:	4c0a      	ldr	r4, [pc, #40]	@ (800eda0 <TIM_OC5_SetConfig+0x70>)
 800ed76:	42a0      	cmp	r0, r4
 800ed78:	d104      	bne.n	800ed84 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ed7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ed7e:	694c      	ldr	r4, [r1, #20]
 800ed80:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed84:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed86:	6546      	str	r6, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ed88:	684a      	ldr	r2, [r1, #4]
 800ed8a:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed8c:	6203      	str	r3, [r0, #32]
}
 800ed8e:	bc70      	pop	{r4, r5, r6}
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	fffeff8f 	.word	0xfffeff8f
 800ed98:	40010000 	.word	0x40010000
 800ed9c:	40010400 	.word	0x40010400
 800eda0:	40014800 	.word	0x40014800

0800eda4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eda4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eda6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eda8:	6a02      	ldr	r2, [r0, #32]
 800edaa:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800edae:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edb0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edb2:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800edb4:	4a14      	ldr	r2, [pc, #80]	@ (800ee08 <TIM_OC6_SetConfig+0x64>)
 800edb6:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edb8:	680d      	ldr	r5, [r1, #0]
 800edba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800edbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800edc2:	688d      	ldr	r5, [r1, #8]
 800edc4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edc8:	4e10      	ldr	r6, [pc, #64]	@ (800ee0c <TIM_OC6_SetConfig+0x68>)
 800edca:	4d11      	ldr	r5, [pc, #68]	@ (800ee10 <TIM_OC6_SetConfig+0x6c>)
 800edcc:	42a8      	cmp	r0, r5
 800edce:	bf18      	it	ne
 800edd0:	42b0      	cmpne	r0, r6
 800edd2:	d00d      	beq.n	800edf0 <TIM_OC6_SetConfig+0x4c>
 800edd4:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800edd8:	42a8      	cmp	r0, r5
 800edda:	bf14      	ite	ne
 800eddc:	2500      	movne	r5, #0
 800edde:	2501      	moveq	r5, #1
 800ede0:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800ede4:	42b0      	cmp	r0, r6
 800ede6:	d003      	beq.n	800edf0 <TIM_OC6_SetConfig+0x4c>
 800ede8:	b915      	cbnz	r5, 800edf0 <TIM_OC6_SetConfig+0x4c>
 800edea:	4d0a      	ldr	r5, [pc, #40]	@ (800ee14 <TIM_OC6_SetConfig+0x70>)
 800edec:	42a8      	cmp	r0, r5
 800edee:	d104      	bne.n	800edfa <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800edf0:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800edf4:	694d      	ldr	r5, [r1, #20]
 800edf6:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edfa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edfc:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800edfe:	684a      	ldr	r2, [r1, #4]
 800ee00:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee02:	6203      	str	r3, [r0, #32]
}
 800ee04:	bc70      	pop	{r4, r5, r6}
 800ee06:	4770      	bx	lr
 800ee08:	feff8fff 	.word	0xfeff8fff
 800ee0c:	40010000 	.word	0x40010000
 800ee10:	40010400 	.word	0x40010400
 800ee14:	40014800 	.word	0x40014800

0800ee18 <HAL_TIM_PWM_MspInit>:
}
 800ee18:	4770      	bx	lr
	...

0800ee1c <TIM_Base_SetConfig>:
{
 800ee1c:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800ee1e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee20:	4a42      	ldr	r2, [pc, #264]	@ (800ef2c <TIM_Base_SetConfig+0x110>)
 800ee22:	4290      	cmp	r0, r2
 800ee24:	bf14      	ite	ne
 800ee26:	f04f 0e00 	movne.w	lr, #0
 800ee2a:	f04f 0e01 	moveq.w	lr, #1
 800ee2e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ee32:	bf14      	ite	ne
 800ee34:	4672      	movne	r2, lr
 800ee36:	f04e 0201 	orreq.w	r2, lr, #1
 800ee3a:	b9aa      	cbnz	r2, 800ee68 <TIM_Base_SetConfig+0x4c>
 800ee3c:	4c3c      	ldr	r4, [pc, #240]	@ (800ef30 <TIM_Base_SetConfig+0x114>)
 800ee3e:	42a0      	cmp	r0, r4
 800ee40:	bf14      	ite	ne
 800ee42:	2400      	movne	r4, #0
 800ee44:	2401      	moveq	r4, #1
 800ee46:	4d3b      	ldr	r5, [pc, #236]	@ (800ef34 <TIM_Base_SetConfig+0x118>)
 800ee48:	42a8      	cmp	r0, r5
 800ee4a:	d00d      	beq.n	800ee68 <TIM_Base_SetConfig+0x4c>
 800ee4c:	b964      	cbnz	r4, 800ee68 <TIM_Base_SetConfig+0x4c>
 800ee4e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800ee52:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800ee56:	42a0      	cmp	r0, r4
 800ee58:	bf14      	ite	ne
 800ee5a:	2400      	movne	r4, #0
 800ee5c:	2401      	moveq	r4, #1
 800ee5e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800ee62:	42a8      	cmp	r0, r5
 800ee64:	d000      	beq.n	800ee68 <TIM_Base_SetConfig+0x4c>
 800ee66:	b11c      	cbz	r4, 800ee70 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ee6c:	684c      	ldr	r4, [r1, #4]
 800ee6e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee70:	bb62      	cbnz	r2, 800eecc <TIM_Base_SetConfig+0xb0>
 800ee72:	4a2f      	ldr	r2, [pc, #188]	@ (800ef30 <TIM_Base_SetConfig+0x114>)
 800ee74:	4290      	cmp	r0, r2
 800ee76:	bf14      	ite	ne
 800ee78:	2200      	movne	r2, #0
 800ee7a:	2201      	moveq	r2, #1
 800ee7c:	4c2d      	ldr	r4, [pc, #180]	@ (800ef34 <TIM_Base_SetConfig+0x118>)
 800ee7e:	42a0      	cmp	r0, r4
 800ee80:	d024      	beq.n	800eecc <TIM_Base_SetConfig+0xb0>
 800ee82:	bb1a      	cbnz	r2, 800eecc <TIM_Base_SetConfig+0xb0>
 800ee84:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800ee88:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 800ee8c:	4290      	cmp	r0, r2
 800ee8e:	bf14      	ite	ne
 800ee90:	2200      	movne	r2, #0
 800ee92:	2201      	moveq	r2, #1
 800ee94:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800ee98:	42a0      	cmp	r0, r4
 800ee9a:	d017      	beq.n	800eecc <TIM_Base_SetConfig+0xb0>
 800ee9c:	b9b2      	cbnz	r2, 800eecc <TIM_Base_SetConfig+0xb0>
 800ee9e:	4a26      	ldr	r2, [pc, #152]	@ (800ef38 <TIM_Base_SetConfig+0x11c>)
 800eea0:	4290      	cmp	r0, r2
 800eea2:	bf14      	ite	ne
 800eea4:	2200      	movne	r2, #0
 800eea6:	2201      	moveq	r2, #1
 800eea8:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 800eeac:	42a0      	cmp	r0, r4
 800eeae:	d00d      	beq.n	800eecc <TIM_Base_SetConfig+0xb0>
 800eeb0:	b962      	cbnz	r2, 800eecc <TIM_Base_SetConfig+0xb0>
 800eeb2:	4a22      	ldr	r2, [pc, #136]	@ (800ef3c <TIM_Base_SetConfig+0x120>)
 800eeb4:	4290      	cmp	r0, r2
 800eeb6:	bf14      	ite	ne
 800eeb8:	2200      	movne	r2, #0
 800eeba:	2201      	moveq	r2, #1
 800eebc:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800eec0:	42a0      	cmp	r0, r4
 800eec2:	d003      	beq.n	800eecc <TIM_Base_SetConfig+0xb0>
 800eec4:	b912      	cbnz	r2, 800eecc <TIM_Base_SetConfig+0xb0>
 800eec6:	4a1e      	ldr	r2, [pc, #120]	@ (800ef40 <TIM_Base_SetConfig+0x124>)
 800eec8:	4290      	cmp	r0, r2
 800eeca:	d104      	bne.n	800eed6 <TIM_Base_SetConfig+0xba>
    tmpcr1 &= ~TIM_CR1_CKD;
 800eecc:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eed0:	68cb      	ldr	r3, [r1, #12]
 800eed2:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eeda:	694a      	ldr	r2, [r1, #20]
 800eedc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800eede:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eee0:	688a      	ldr	r2, [r1, #8]
 800eee2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800eee4:	680a      	ldr	r2, [r1, #0]
 800eee6:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eee8:	4a16      	ldr	r2, [pc, #88]	@ (800ef44 <TIM_Base_SetConfig+0x128>)
 800eeea:	4290      	cmp	r0, r2
 800eeec:	bf14      	ite	ne
 800eeee:	4673      	movne	r3, lr
 800eef0:	f04e 0301 	orreq.w	r3, lr, #1
 800eef4:	b963      	cbnz	r3, 800ef10 <TIM_Base_SetConfig+0xf4>
 800eef6:	4b10      	ldr	r3, [pc, #64]	@ (800ef38 <TIM_Base_SetConfig+0x11c>)
 800eef8:	4298      	cmp	r0, r3
 800eefa:	bf14      	ite	ne
 800eefc:	2300      	movne	r3, #0
 800eefe:	2301      	moveq	r3, #1
 800ef00:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800ef04:	4290      	cmp	r0, r2
 800ef06:	d003      	beq.n	800ef10 <TIM_Base_SetConfig+0xf4>
 800ef08:	b913      	cbnz	r3, 800ef10 <TIM_Base_SetConfig+0xf4>
 800ef0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ef48 <TIM_Base_SetConfig+0x12c>)
 800ef0c:	4298      	cmp	r0, r3
 800ef0e:	d101      	bne.n	800ef14 <TIM_Base_SetConfig+0xf8>
    TIMx->RCR = Structure->RepetitionCounter;
 800ef10:	690b      	ldr	r3, [r1, #16]
 800ef12:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800ef14:	2301      	movs	r3, #1
 800ef16:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ef18:	6903      	ldr	r3, [r0, #16]
 800ef1a:	f013 0f01 	tst.w	r3, #1
 800ef1e:	d003      	beq.n	800ef28 <TIM_Base_SetConfig+0x10c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ef20:	6903      	ldr	r3, [r0, #16]
 800ef22:	f023 0301 	bic.w	r3, r3, #1
 800ef26:	6103      	str	r3, [r0, #16]
}
 800ef28:	bd30      	pop	{r4, r5, pc}
 800ef2a:	bf00      	nop
 800ef2c:	40010000 	.word	0x40010000
 800ef30:	40000800 	.word	0x40000800
 800ef34:	40000400 	.word	0x40000400
 800ef38:	40014400 	.word	0x40014400
 800ef3c:	4000e000 	.word	0x4000e000
 800ef40:	4000e400 	.word	0x4000e400
 800ef44:	40010400 	.word	0x40010400
 800ef48:	40014800 	.word	0x40014800

0800ef4c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800ef4c:	b360      	cbz	r0, 800efa8 <HAL_TIM_Base_Init+0x5c>
{
 800ef4e:	b510      	push	{r4, lr}
 800ef50:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ef52:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ef56:	b313      	cbz	r3, 800ef9e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800ef58:	2302      	movs	r3, #2
 800ef5a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef5e:	4621      	mov	r1, r4
 800ef60:	f851 0b04 	ldr.w	r0, [r1], #4
 800ef64:	f7ff ff5a 	bl	800ee1c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef6e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800ef72:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800ef76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800ef7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ef7e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ef82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef86:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ef8a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ef8e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800ef92:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ef96:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800ef9a:	2000      	movs	r0, #0
}
 800ef9c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ef9e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800efa2:	f7f8 faa7 	bl	80074f4 <HAL_TIM_Base_MspInit>
 800efa6:	e7d7      	b.n	800ef58 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800efa8:	2001      	movs	r0, #1
}
 800efaa:	4770      	bx	lr

0800efac <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800efac:	b360      	cbz	r0, 800f008 <HAL_TIM_PWM_Init+0x5c>
{
 800efae:	b510      	push	{r4, lr}
 800efb0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800efb2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800efb6:	b313      	cbz	r3, 800effe <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800efb8:	2302      	movs	r3, #2
 800efba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efbe:	4621      	mov	r1, r4
 800efc0:	f851 0b04 	ldr.w	r0, [r1], #4
 800efc4:	f7ff ff2a 	bl	800ee1c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efc8:	2301      	movs	r3, #1
 800efca:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800efd2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800efd6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800efda:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800efde:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efe6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800efea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800efee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800eff2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800eff6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800effa:	2000      	movs	r0, #0
}
 800effc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800effe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800f002:	f7ff ff09 	bl	800ee18 <HAL_TIM_PWM_MspInit>
 800f006:	e7d7      	b.n	800efb8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800f008:	2001      	movs	r0, #1
}
 800f00a:	4770      	bx	lr

0800f00c <TIM_OC2_SetConfig>:
{
 800f00c:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 800f00e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f010:	6a02      	ldr	r2, [r0, #32]
 800f012:	f022 0210 	bic.w	r2, r2, #16
 800f016:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800f018:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800f01a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f01c:	4e1a      	ldr	r6, [pc, #104]	@ (800f088 <TIM_OC2_SetConfig+0x7c>)
 800f01e:	4026      	ands	r6, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f020:	680c      	ldr	r4, [r1, #0]
 800f022:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800f026:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f02a:	688a      	ldr	r2, [r1, #8]
 800f02c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f030:	4a16      	ldr	r2, [pc, #88]	@ (800f08c <TIM_OC2_SetConfig+0x80>)
 800f032:	4c17      	ldr	r4, [pc, #92]	@ (800f090 <TIM_OC2_SetConfig+0x84>)
 800f034:	42a0      	cmp	r0, r4
 800f036:	bf18      	it	ne
 800f038:	4290      	cmpne	r0, r2
 800f03a:	bf0c      	ite	eq
 800f03c:	2201      	moveq	r2, #1
 800f03e:	2200      	movne	r2, #0
 800f040:	d106      	bne.n	800f050 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800f042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f046:	68cc      	ldr	r4, [r1, #12]
 800f048:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800f04c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f050:	b95a      	cbnz	r2, 800f06a <TIM_OC2_SetConfig+0x5e>
 800f052:	4a10      	ldr	r2, [pc, #64]	@ (800f094 <TIM_OC2_SetConfig+0x88>)
 800f054:	4290      	cmp	r0, r2
 800f056:	bf14      	ite	ne
 800f058:	2200      	movne	r2, #0
 800f05a:	2201      	moveq	r2, #1
 800f05c:	4c0e      	ldr	r4, [pc, #56]	@ (800f098 <TIM_OC2_SetConfig+0x8c>)
 800f05e:	42a0      	cmp	r0, r4
 800f060:	d003      	beq.n	800f06a <TIM_OC2_SetConfig+0x5e>
 800f062:	b912      	cbnz	r2, 800f06a <TIM_OC2_SetConfig+0x5e>
 800f064:	4a0d      	ldr	r2, [pc, #52]	@ (800f09c <TIM_OC2_SetConfig+0x90>)
 800f066:	4290      	cmp	r0, r2
 800f068:	d107      	bne.n	800f07a <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f06a:	f425 6c40 	bic.w	ip, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f06e:	694a      	ldr	r2, [r1, #20]
 800f070:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f074:	698a      	ldr	r2, [r1, #24]
 800f076:	ea4c 0582 	orr.w	r5, ip, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 800f07a:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800f07c:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800f07e:	684a      	ldr	r2, [r1, #4]
 800f080:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800f082:	6203      	str	r3, [r0, #32]
}
 800f084:	bc70      	pop	{r4, r5, r6}
 800f086:	4770      	bx	lr
 800f088:	feff8cff 	.word	0xfeff8cff
 800f08c:	40010000 	.word	0x40010000
 800f090:	40010400 	.word	0x40010400
 800f094:	40014400 	.word	0x40014400
 800f098:	40014000 	.word	0x40014000
 800f09c:	40014800 	.word	0x40014800

0800f0a0 <HAL_TIM_PWM_ConfigChannel>:
{
 800f0a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800f0a2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	f000 8095 	beq.w	800f1d6 <HAL_TIM_PWM_ConfigChannel+0x136>
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	460d      	mov	r5, r1
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800f0b6:	2a14      	cmp	r2, #20
 800f0b8:	f200 8088 	bhi.w	800f1cc <HAL_TIM_PWM_ConfigChannel+0x12c>
 800f0bc:	e8df f002 	tbb	[pc, r2]
 800f0c0:	8686860b 	.word	0x8686860b
 800f0c4:	8686861f 	.word	0x8686861f
 800f0c8:	86868634 	.word	0x86868634
 800f0cc:	86868648 	.word	0x86868648
 800f0d0:	8686865d 	.word	0x8686865d
 800f0d4:	71          	.byte	0x71
 800f0d5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0d6:	6800      	ldr	r0, [r0, #0]
 800f0d8:	f7ff fd54 	bl	800eb84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f0dc:	6822      	ldr	r2, [r4, #0]
 800f0de:	6993      	ldr	r3, [r2, #24]
 800f0e0:	f043 0308 	orr.w	r3, r3, #8
 800f0e4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0e6:	6822      	ldr	r2, [r4, #0]
 800f0e8:	6993      	ldr	r3, [r2, #24]
 800f0ea:	f023 0304 	bic.w	r3, r3, #4
 800f0ee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f0f0:	6822      	ldr	r2, [r4, #0]
 800f0f2:	6993      	ldr	r3, [r2, #24]
 800f0f4:	6929      	ldr	r1, [r5, #16]
 800f0f6:	430b      	orrs	r3, r1
 800f0f8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800f0fa:	2000      	movs	r0, #0
      break;
 800f0fc:	e067      	b.n	800f1ce <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0fe:	6800      	ldr	r0, [r0, #0]
 800f100:	f7ff ff84 	bl	800f00c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f104:	6822      	ldr	r2, [r4, #0]
 800f106:	6993      	ldr	r3, [r2, #24]
 800f108:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f10c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f10e:	6822      	ldr	r2, [r4, #0]
 800f110:	6993      	ldr	r3, [r2, #24]
 800f112:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f116:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f118:	6822      	ldr	r2, [r4, #0]
 800f11a:	6993      	ldr	r3, [r2, #24]
 800f11c:	6929      	ldr	r1, [r5, #16]
 800f11e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f122:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800f124:	2000      	movs	r0, #0
      break;
 800f126:	e052      	b.n	800f1ce <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f128:	6800      	ldr	r0, [r0, #0]
 800f12a:	f7ff fd7d 	bl	800ec28 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f12e:	6822      	ldr	r2, [r4, #0]
 800f130:	69d3      	ldr	r3, [r2, #28]
 800f132:	f043 0308 	orr.w	r3, r3, #8
 800f136:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f138:	6822      	ldr	r2, [r4, #0]
 800f13a:	69d3      	ldr	r3, [r2, #28]
 800f13c:	f023 0304 	bic.w	r3, r3, #4
 800f140:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f142:	6822      	ldr	r2, [r4, #0]
 800f144:	69d3      	ldr	r3, [r2, #28]
 800f146:	6929      	ldr	r1, [r5, #16]
 800f148:	430b      	orrs	r3, r1
 800f14a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800f14c:	2000      	movs	r0, #0
      break;
 800f14e:	e03e      	b.n	800f1ce <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f150:	6800      	ldr	r0, [r0, #0]
 800f152:	f7ff fdb3 	bl	800ecbc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f156:	6822      	ldr	r2, [r4, #0]
 800f158:	69d3      	ldr	r3, [r2, #28]
 800f15a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f15e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f160:	6822      	ldr	r2, [r4, #0]
 800f162:	69d3      	ldr	r3, [r2, #28]
 800f164:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f168:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f16a:	6822      	ldr	r2, [r4, #0]
 800f16c:	69d3      	ldr	r3, [r2, #28]
 800f16e:	6929      	ldr	r1, [r5, #16]
 800f170:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f174:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800f176:	2000      	movs	r0, #0
      break;
 800f178:	e029      	b.n	800f1ce <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f17a:	6800      	ldr	r0, [r0, #0]
 800f17c:	f7ff fdd8 	bl	800ed30 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f180:	6822      	ldr	r2, [r4, #0]
 800f182:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f184:	f043 0308 	orr.w	r3, r3, #8
 800f188:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f18a:	6822      	ldr	r2, [r4, #0]
 800f18c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f18e:	f023 0304 	bic.w	r3, r3, #4
 800f192:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f194:	6822      	ldr	r2, [r4, #0]
 800f196:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f198:	6929      	ldr	r1, [r5, #16]
 800f19a:	430b      	orrs	r3, r1
 800f19c:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800f19e:	2000      	movs	r0, #0
      break;
 800f1a0:	e015      	b.n	800f1ce <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1a2:	6800      	ldr	r0, [r0, #0]
 800f1a4:	f7ff fdfe 	bl	800eda4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1a8:	6822      	ldr	r2, [r4, #0]
 800f1aa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f1ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f1b0:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1b2:	6822      	ldr	r2, [r4, #0]
 800f1b4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f1b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1ba:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f1bc:	6822      	ldr	r2, [r4, #0]
 800f1be:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f1c0:	6929      	ldr	r1, [r5, #16]
 800f1c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f1c6:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800f1c8:	2000      	movs	r0, #0
      break;
 800f1ca:	e000      	b.n	800f1ce <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800f1cc:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800f1d4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800f1d6:	2002      	movs	r0, #2
 800f1d8:	e7fc      	b.n	800f1d4 <HAL_TIM_PWM_ConfigChannel+0x134>

0800f1da <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f1da:	f001 011f 	and.w	r1, r1, #31
 800f1de:	f04f 0c01 	mov.w	ip, #1
 800f1e2:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f1e6:	6a03      	ldr	r3, [r0, #32]
 800f1e8:	ea23 030c 	bic.w	r3, r3, ip
 800f1ec:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f1ee:	6a03      	ldr	r3, [r0, #32]
 800f1f0:	408a      	lsls	r2, r1
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	6203      	str	r3, [r0, #32]
}
 800f1f6:	4770      	bx	lr

0800f1f8 <HAL_TIM_PWM_Start>:
{
 800f1f8:	b510      	push	{r4, lr}
 800f1fa:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f1fc:	2910      	cmp	r1, #16
 800f1fe:	d83d      	bhi.n	800f27c <HAL_TIM_PWM_Start+0x84>
 800f200:	e8df f001 	tbb	[pc, r1]
 800f204:	3c3c3c09 	.word	0x3c3c3c09
 800f208:	3c3c3c20 	.word	0x3c3c3c20
 800f20c:	3c3c3c27 	.word	0x3c3c3c27
 800f210:	3c3c3c2e 	.word	0x3c3c3c2e
 800f214:	35          	.byte	0x35
 800f215:	00          	.byte	0x00
 800f216:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	3b01      	subs	r3, #1
 800f21e:	bf18      	it	ne
 800f220:	2301      	movne	r3, #1
 800f222:	2b00      	cmp	r3, #0
 800f224:	f040 809e 	bne.w	800f364 <HAL_TIM_PWM_Start+0x16c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f228:	2910      	cmp	r1, #16
 800f22a:	f200 8089 	bhi.w	800f340 <HAL_TIM_PWM_Start+0x148>
 800f22e:	e8df f001 	tbb	[pc, r1]
 800f232:	872c      	.short	0x872c
 800f234:	87778787 	.word	0x87778787
 800f238:	877b8787 	.word	0x877b8787
 800f23c:	877f8787 	.word	0x877f8787
 800f240:	8787      	.short	0x8787
 800f242:	83          	.byte	0x83
 800f243:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f244:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	3b01      	subs	r3, #1
 800f24c:	bf18      	it	ne
 800f24e:	2301      	movne	r3, #1
 800f250:	e7e7      	b.n	800f222 <HAL_TIM_PWM_Start+0x2a>
 800f252:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f256:	b2db      	uxtb	r3, r3
 800f258:	3b01      	subs	r3, #1
 800f25a:	bf18      	it	ne
 800f25c:	2301      	movne	r3, #1
 800f25e:	e7e0      	b.n	800f222 <HAL_TIM_PWM_Start+0x2a>
 800f260:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800f264:	b2db      	uxtb	r3, r3
 800f266:	3b01      	subs	r3, #1
 800f268:	bf18      	it	ne
 800f26a:	2301      	movne	r3, #1
 800f26c:	e7d9      	b.n	800f222 <HAL_TIM_PWM_Start+0x2a>
 800f26e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f272:	b2db      	uxtb	r3, r3
 800f274:	3b01      	subs	r3, #1
 800f276:	bf18      	it	ne
 800f278:	2301      	movne	r3, #1
 800f27a:	e7d2      	b.n	800f222 <HAL_TIM_PWM_Start+0x2a>
 800f27c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f280:	b2db      	uxtb	r3, r3
 800f282:	3b01      	subs	r3, #1
 800f284:	bf18      	it	ne
 800f286:	2301      	movne	r3, #1
 800f288:	e7cb      	b.n	800f222 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f28a:	2302      	movs	r3, #2
 800f28c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f290:	2201      	movs	r2, #1
 800f292:	6820      	ldr	r0, [r4, #0]
 800f294:	f7ff ffa1 	bl	800f1da <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	4934      	ldr	r1, [pc, #208]	@ (800f36c <HAL_TIM_PWM_Start+0x174>)
 800f29c:	4a34      	ldr	r2, [pc, #208]	@ (800f370 <HAL_TIM_PWM_Start+0x178>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	bf18      	it	ne
 800f2a2:	428b      	cmpne	r3, r1
 800f2a4:	d00b      	beq.n	800f2be <HAL_TIM_PWM_Start+0xc6>
 800f2a6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d007      	beq.n	800f2be <HAL_TIM_PWM_Start+0xc6>
 800f2ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d003      	beq.n	800f2be <HAL_TIM_PWM_Start+0xc6>
 800f2b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d103      	bne.n	800f2c6 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 800f2be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f2c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f2c4:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	4a28      	ldr	r2, [pc, #160]	@ (800f36c <HAL_TIM_PWM_Start+0x174>)
 800f2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2ce:	bf18      	it	ne
 800f2d0:	4293      	cmpne	r3, r2
 800f2d2:	d039      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
 800f2d4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d035      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
 800f2dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d031      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
 800f2e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d02d      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
 800f2ec:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d029      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
 800f2f4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d025      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
 800f2fc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800f300:	4293      	cmp	r3, r2
 800f302:	d021      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
 800f304:	f5a2 42c0 	sub.w	r2, r2, #24576	@ 0x6000
 800f308:	4293      	cmp	r3, r2
 800f30a:	d01d      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
 800f30c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f310:	4293      	cmp	r3, r2
 800f312:	d019      	beq.n	800f348 <HAL_TIM_PWM_Start+0x150>
    __HAL_TIM_ENABLE(htim);
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	f042 0201 	orr.w	r2, r2, #1
 800f31a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f31c:	2000      	movs	r0, #0
 800f31e:	e022      	b.n	800f366 <HAL_TIM_PWM_Start+0x16e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f320:	2302      	movs	r3, #2
 800f322:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800f326:	e7b3      	b.n	800f290 <HAL_TIM_PWM_Start+0x98>
 800f328:	2302      	movs	r3, #2
 800f32a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800f32e:	e7af      	b.n	800f290 <HAL_TIM_PWM_Start+0x98>
 800f330:	2302      	movs	r3, #2
 800f332:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800f336:	e7ab      	b.n	800f290 <HAL_TIM_PWM_Start+0x98>
 800f338:	2302      	movs	r3, #2
 800f33a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f33e:	e7a7      	b.n	800f290 <HAL_TIM_PWM_Start+0x98>
 800f340:	2302      	movs	r3, #2
 800f342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f346:	e7a3      	b.n	800f290 <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f348:	6899      	ldr	r1, [r3, #8]
 800f34a:	4a0a      	ldr	r2, [pc, #40]	@ (800f374 <HAL_TIM_PWM_Start+0x17c>)
 800f34c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f34e:	2a06      	cmp	r2, #6
 800f350:	bf18      	it	ne
 800f352:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800f356:	d007      	beq.n	800f368 <HAL_TIM_PWM_Start+0x170>
      __HAL_TIM_ENABLE(htim);
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	f042 0201 	orr.w	r2, r2, #1
 800f35e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f360:	2000      	movs	r0, #0
 800f362:	e000      	b.n	800f366 <HAL_TIM_PWM_Start+0x16e>
    return HAL_ERROR;
 800f364:	2001      	movs	r0, #1
}
 800f366:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800f368:	2000      	movs	r0, #0
 800f36a:	e7fc      	b.n	800f366 <HAL_TIM_PWM_Start+0x16e>
 800f36c:	40010000 	.word	0x40010000
 800f370:	40010400 	.word	0x40010400
 800f374:	00010007 	.word	0x00010007

0800f378 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f378:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37a:	e852 3f00 	ldrex	r3, [r2]
 800f37e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f382:	e842 3100 	strex	r1, r3, [r2]
 800f386:	2900      	cmp	r1, #0
 800f388:	d1f6      	bne.n	800f378 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f38a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f38c:	f102 0308 	add.w	r3, r2, #8
 800f390:	e853 3f00 	ldrex	r3, [r3]
 800f394:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f398:	3208      	adds	r2, #8
 800f39a:	e842 3100 	strex	r1, r3, [r2]
 800f39e:	2900      	cmp	r1, #0
 800f3a0:	d1f3      	bne.n	800f38a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f3a2:	2320      	movs	r3, #32
 800f3a4:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 800f3a8:	4770      	bx	lr
	...

0800f3ac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ae:	e852 3f00 	ldrex	r3, [r2]
 800f3b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b6:	e842 3100 	strex	r1, r3, [r2]
 800f3ba:	2900      	cmp	r1, #0
 800f3bc:	d1f6      	bne.n	800f3ac <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c0:	f102 0308 	add.w	r3, r2, #8
 800f3c4:	e853 1f00 	ldrex	r1, [r3]
 800f3c8:	4b0d      	ldr	r3, [pc, #52]	@ (800f400 <UART_EndRxTransfer+0x54>)
 800f3ca:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3cc:	3208      	adds	r2, #8
 800f3ce:	e842 3100 	strex	r1, r3, [r2]
 800f3d2:	2900      	cmp	r1, #0
 800f3d4:	d1f3      	bne.n	800f3be <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3d6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d006      	beq.n	800f3ea <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f3dc:	2320      	movs	r3, #32
 800f3de:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f3e6:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800f3e8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ec:	e852 3f00 	ldrex	r3, [r2]
 800f3f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3f4:	e842 3100 	strex	r1, r3, [r2]
 800f3f8:	2900      	cmp	r1, #0
 800f3fa:	d1f6      	bne.n	800f3ea <UART_EndRxTransfer+0x3e>
 800f3fc:	e7ee      	b.n	800f3dc <UART_EndRxTransfer+0x30>
 800f3fe:	bf00      	nop
 800f400:	effffffe 	.word	0xeffffffe

0800f404 <HAL_UART_DeInit>:
  if (huart == NULL)
 800f404:	b1f0      	cbz	r0, 800f444 <HAL_UART_DeInit+0x40>
{
 800f406:	b538      	push	{r3, r4, r5, lr}
 800f408:	4605      	mov	r5, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800f40a:	2324      	movs	r3, #36	@ 0x24
 800f40c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800f410:	6802      	ldr	r2, [r0, #0]
 800f412:	6813      	ldr	r3, [r2, #0]
 800f414:	f023 0301 	bic.w	r3, r3, #1
 800f418:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800f41a:	6803      	ldr	r3, [r0, #0]
 800f41c:	2400      	movs	r4, #0
 800f41e:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800f420:	6803      	ldr	r3, [r0, #0]
 800f422:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800f424:	6803      	ldr	r3, [r0, #0]
 800f426:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800f428:	f7f8 fa14 	bl	8007854 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f42c:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800f430:	f8c5 4088 	str.w	r4, [r5, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800f434:	f8c5 408c 	str.w	r4, [r5, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f438:	66ec      	str	r4, [r5, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f43a:	672c      	str	r4, [r5, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 800f43c:	f885 4084 	strb.w	r4, [r5, #132]	@ 0x84
  return HAL_OK;
 800f440:	4620      	mov	r0, r4
}
 800f442:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f444:	2001      	movs	r0, #1
}
 800f446:	4770      	bx	lr

0800f448 <HAL_UART_RxCpltCallback>:
}
 800f448:	4770      	bx	lr

0800f44a <HAL_UART_RxHalfCpltCallback>:
}
 800f44a:	4770      	bx	lr

0800f44c <HAL_UART_ErrorCallback>:
}
 800f44c:	4770      	bx	lr

0800f44e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f44e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f450:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f452:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f456:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f462:	d001      	beq.n	800f468 <UART_DMAError+0x1a>
 800f464:	2a21      	cmp	r2, #33	@ 0x21
 800f466:	d010      	beq.n	800f48a <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800f470:	d001      	beq.n	800f476 <UART_DMAError+0x28>
 800f472:	2d22      	cmp	r5, #34	@ 0x22
 800f474:	d010      	beq.n	800f498 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f476:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800f47a:	f043 0310 	orr.w	r3, r3, #16
 800f47e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f482:	4620      	mov	r0, r4
 800f484:	f7ff ffe2 	bl	800f44c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f488:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800f48a:	2300      	movs	r3, #0
 800f48c:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800f490:	4620      	mov	r0, r4
 800f492:	f7ff ff71 	bl	800f378 <UART_EndTxTransfer>
 800f496:	e7e7      	b.n	800f468 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800f498:	2300      	movs	r3, #0
 800f49a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f7ff ff84 	bl	800f3ac <UART_EndRxTransfer>
 800f4a4:	e7e7      	b.n	800f476 <UART_DMAError+0x28>

0800f4a6 <HAL_UARTEx_RxEventCallback>:
}
 800f4a6:	4770      	bx	lr

0800f4a8 <UART_DMARxHalfCplt>:
{
 800f4a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4aa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4b0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d002      	beq.n	800f4bc <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800f4b6:	f7ff ffc8 	bl	800f44a <HAL_UART_RxHalfCpltCallback>
}
 800f4ba:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f4bc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800f4c0:	0849      	lsrs	r1, r1, #1
 800f4c2:	f7ff fff0 	bl	800f4a6 <HAL_UARTEx_RxEventCallback>
 800f4c6:	e7f8      	b.n	800f4ba <UART_DMARxHalfCplt+0x12>

0800f4c8 <UART_DMAReceiveCplt>:
{
 800f4c8:	b508      	push	{r3, lr}
 800f4ca:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4cc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f4ce:	69db      	ldr	r3, [r3, #28]
 800f4d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4d4:	d029      	beq.n	800f52a <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4de:	e852 3f00 	ldrex	r3, [r2]
 800f4e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e6:	e842 3100 	strex	r1, r3, [r2]
 800f4ea:	2900      	cmp	r1, #0
 800f4ec:	d1f6      	bne.n	800f4dc <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f0:	f102 0308 	add.w	r3, r2, #8
 800f4f4:	e853 3f00 	ldrex	r3, [r3]
 800f4f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fc:	3208      	adds	r2, #8
 800f4fe:	e842 3100 	strex	r1, r3, [r2]
 800f502:	2900      	cmp	r1, #0
 800f504:	d1f3      	bne.n	800f4ee <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f506:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f508:	f102 0308 	add.w	r3, r2, #8
 800f50c:	e853 3f00 	ldrex	r3, [r3]
 800f510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f514:	3208      	adds	r2, #8
 800f516:	e842 3100 	strex	r1, r3, [r2]
 800f51a:	2900      	cmp	r1, #0
 800f51c:	d1f3      	bne.n	800f506 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800f51e:	2320      	movs	r3, #32
 800f520:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f524:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800f526:	2b01      	cmp	r3, #1
 800f528:	d007      	beq.n	800f53a <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f52a:	2300      	movs	r3, #0
 800f52c:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f52e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800f530:	2b01      	cmp	r3, #1
 800f532:	d00c      	beq.n	800f54e <UART_DMAReceiveCplt+0x86>
    HAL_UART_RxCpltCallback(huart);
 800f534:	f7ff ff88 	bl	800f448 <HAL_UART_RxCpltCallback>
}
 800f538:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f53a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f53c:	e852 3f00 	ldrex	r3, [r2]
 800f540:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f544:	e842 3100 	strex	r1, r3, [r2]
 800f548:	2900      	cmp	r1, #0
 800f54a:	d1f6      	bne.n	800f53a <UART_DMAReceiveCplt+0x72>
 800f54c:	e7ed      	b.n	800f52a <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f54e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800f552:	f7ff ffa8 	bl	800f4a6 <HAL_UARTEx_RxEventCallback>
 800f556:	e7ef      	b.n	800f538 <UART_DMAReceiveCplt+0x70>

0800f558 <UART_SetConfig>:
{
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800f55e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f560:	6883      	ldr	r3, [r0, #8]
 800f562:	6902      	ldr	r2, [r0, #16]
 800f564:	4313      	orrs	r3, r2
 800f566:	6942      	ldr	r2, [r0, #20]
 800f568:	4313      	orrs	r3, r2
 800f56a:	69c2      	ldr	r2, [r0, #28]
 800f56c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f56e:	6808      	ldr	r0, [r1, #0]
 800f570:	4a90      	ldr	r2, [pc, #576]	@ (800f7b4 <UART_SetConfig+0x25c>)
 800f572:	4002      	ands	r2, r0
 800f574:	431a      	orrs	r2, r3
 800f576:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f578:	6822      	ldr	r2, [r4, #0]
 800f57a:	6853      	ldr	r3, [r2, #4]
 800f57c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800f580:	68e1      	ldr	r1, [r4, #12]
 800f582:	430b      	orrs	r3, r1
 800f584:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f586:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f588:	6822      	ldr	r2, [r4, #0]
 800f58a:	4b8b      	ldr	r3, [pc, #556]	@ (800f7b8 <UART_SetConfig+0x260>)
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d001      	beq.n	800f594 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800f590:	6a23      	ldr	r3, [r4, #32]
 800f592:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f594:	6890      	ldr	r0, [r2, #8]
 800f596:	4b89      	ldr	r3, [pc, #548]	@ (800f7bc <UART_SetConfig+0x264>)
 800f598:	4003      	ands	r3, r0
 800f59a:	430b      	orrs	r3, r1
 800f59c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f59e:	6822      	ldr	r2, [r4, #0]
 800f5a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f5a2:	f023 030f 	bic.w	r3, r3, #15
 800f5a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f5a8:	430b      	orrs	r3, r1
 800f5aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f5ac:	6822      	ldr	r2, [r4, #0]
 800f5ae:	4b84      	ldr	r3, [pc, #528]	@ (800f7c0 <UART_SetConfig+0x268>)
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d029      	beq.n	800f608 <UART_SetConfig+0xb0>
 800f5b4:	4b83      	ldr	r3, [pc, #524]	@ (800f7c4 <UART_SetConfig+0x26c>)
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	f000 8094 	beq.w	800f6e4 <UART_SetConfig+0x18c>
 800f5bc:	4b82      	ldr	r3, [pc, #520]	@ (800f7c8 <UART_SetConfig+0x270>)
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	f000 80aa 	beq.w	800f718 <UART_SetConfig+0x1c0>
 800f5c4:	4b81      	ldr	r3, [pc, #516]	@ (800f7cc <UART_SetConfig+0x274>)
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	f000 80c0 	beq.w	800f74c <UART_SetConfig+0x1f4>
 800f5cc:	4b80      	ldr	r3, [pc, #512]	@ (800f7d0 <UART_SetConfig+0x278>)
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	f000 80d6 	beq.w	800f780 <UART_SetConfig+0x228>
 800f5d4:	4b7f      	ldr	r3, [pc, #508]	@ (800f7d4 <UART_SetConfig+0x27c>)
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	f000 8108 	beq.w	800f7ec <UART_SetConfig+0x294>
 800f5dc:	4b7e      	ldr	r3, [pc, #504]	@ (800f7d8 <UART_SetConfig+0x280>)
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	f000 812d 	beq.w	800f83e <UART_SetConfig+0x2e6>
 800f5e4:	4b7d      	ldr	r3, [pc, #500]	@ (800f7dc <UART_SetConfig+0x284>)
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	f000 8140 	beq.w	800f86c <UART_SetConfig+0x314>
 800f5ec:	4b7c      	ldr	r3, [pc, #496]	@ (800f7e0 <UART_SetConfig+0x288>)
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	f000 8153 	beq.w	800f89a <UART_SetConfig+0x342>
 800f5f4:	4b7b      	ldr	r3, [pc, #492]	@ (800f7e4 <UART_SetConfig+0x28c>)
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	f000 8178 	beq.w	800f8ec <UART_SetConfig+0x394>
 800f5fc:	4b6e      	ldr	r3, [pc, #440]	@ (800f7b8 <UART_SetConfig+0x260>)
 800f5fe:	429a      	cmp	r2, r3
 800f600:	f000 819d 	beq.w	800f93e <UART_SetConfig+0x3e6>
 800f604:	2380      	movs	r3, #128	@ 0x80
 800f606:	e033      	b.n	800f670 <UART_SetConfig+0x118>
 800f608:	4b77      	ldr	r3, [pc, #476]	@ (800f7e8 <UART_SetConfig+0x290>)
 800f60a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f60c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f610:	2b28      	cmp	r3, #40	@ 0x28
 800f612:	d865      	bhi.n	800f6e0 <UART_SetConfig+0x188>
 800f614:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f618:	00640029 	.word	0x00640029
 800f61c:	00640064 	.word	0x00640064
 800f620:	00640064 	.word	0x00640064
 800f624:	00640064 	.word	0x00640064
 800f628:	006401ab 	.word	0x006401ab
 800f62c:	00640064 	.word	0x00640064
 800f630:	00640064 	.word	0x00640064
 800f634:	00640064 	.word	0x00640064
 800f638:	0064002b 	.word	0x0064002b
 800f63c:	00640064 	.word	0x00640064
 800f640:	00640064 	.word	0x00640064
 800f644:	00640064 	.word	0x00640064
 800f648:	0064005e 	.word	0x0064005e
 800f64c:	00640064 	.word	0x00640064
 800f650:	00640064 	.word	0x00640064
 800f654:	00640064 	.word	0x00640064
 800f658:	00640060 	.word	0x00640060
 800f65c:	00640064 	.word	0x00640064
 800f660:	00640064 	.word	0x00640064
 800f664:	00640064 	.word	0x00640064
 800f668:	0062      	.short	0x0062
 800f66a:	2301      	movs	r3, #1
 800f66c:	e000      	b.n	800f670 <UART_SetConfig+0x118>
 800f66e:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 800f670:	4951      	ldr	r1, [pc, #324]	@ (800f7b8 <UART_SetConfig+0x260>)
 800f672:	428a      	cmp	r2, r1
 800f674:	f000 8194 	beq.w	800f9a0 <UART_SetConfig+0x448>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f678:	69e0      	ldr	r0, [r4, #28]
 800f67a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800f67e:	f000 820a 	beq.w	800fa96 <UART_SetConfig+0x53e>
    switch (clocksource)
 800f682:	2b20      	cmp	r3, #32
 800f684:	f200 8262 	bhi.w	800fb4c <UART_SetConfig+0x5f4>
 800f688:	2b20      	cmp	r3, #32
 800f68a:	f200 82ac 	bhi.w	800fbe6 <UART_SetConfig+0x68e>
 800f68e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f692:	0279      	.short	0x0279
 800f694:	02aa027f 	.word	0x02aa027f
 800f698:	028202aa 	.word	0x028202aa
 800f69c:	02aa02aa 	.word	0x02aa02aa
 800f6a0:	028702aa 	.word	0x028702aa
 800f6a4:	02aa02aa 	.word	0x02aa02aa
 800f6a8:	02aa02aa 	.word	0x02aa02aa
 800f6ac:	02aa02aa 	.word	0x02aa02aa
 800f6b0:	028c02aa 	.word	0x028c02aa
 800f6b4:	02aa02aa 	.word	0x02aa02aa
 800f6b8:	02aa02aa 	.word	0x02aa02aa
 800f6bc:	02aa02aa 	.word	0x02aa02aa
 800f6c0:	02aa02aa 	.word	0x02aa02aa
 800f6c4:	02aa02aa 	.word	0x02aa02aa
 800f6c8:	02aa02aa 	.word	0x02aa02aa
 800f6cc:	02aa02aa 	.word	0x02aa02aa
 800f6d0:	029802aa 	.word	0x029802aa
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6d4:	2310      	movs	r3, #16
 800f6d6:	e7cb      	b.n	800f670 <UART_SetConfig+0x118>
 800f6d8:	2320      	movs	r3, #32
 800f6da:	e7c9      	b.n	800f670 <UART_SetConfig+0x118>
 800f6dc:	2340      	movs	r3, #64	@ 0x40
 800f6de:	e7c7      	b.n	800f670 <UART_SetConfig+0x118>
 800f6e0:	2380      	movs	r3, #128	@ 0x80
 800f6e2:	e7c5      	b.n	800f670 <UART_SetConfig+0x118>
 800f6e4:	4b40      	ldr	r3, [pc, #256]	@ (800f7e8 <UART_SetConfig+0x290>)
 800f6e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6e8:	f003 0307 	and.w	r3, r3, #7
 800f6ec:	2b05      	cmp	r3, #5
 800f6ee:	d811      	bhi.n	800f714 <UART_SetConfig+0x1bc>
 800f6f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f6f4:	013f0006 	.word	0x013f0006
 800f6f8:	000a0008 	.word	0x000a0008
 800f6fc:	000e000c 	.word	0x000e000c
 800f700:	2300      	movs	r3, #0
 800f702:	e7b5      	b.n	800f670 <UART_SetConfig+0x118>
 800f704:	2308      	movs	r3, #8
 800f706:	e7b3      	b.n	800f670 <UART_SetConfig+0x118>
 800f708:	2310      	movs	r3, #16
 800f70a:	e7b1      	b.n	800f670 <UART_SetConfig+0x118>
 800f70c:	2320      	movs	r3, #32
 800f70e:	e7af      	b.n	800f670 <UART_SetConfig+0x118>
 800f710:	2340      	movs	r3, #64	@ 0x40
 800f712:	e7ad      	b.n	800f670 <UART_SetConfig+0x118>
 800f714:	2380      	movs	r3, #128	@ 0x80
 800f716:	e7ab      	b.n	800f670 <UART_SetConfig+0x118>
 800f718:	4b33      	ldr	r3, [pc, #204]	@ (800f7e8 <UART_SetConfig+0x290>)
 800f71a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f71c:	f003 0307 	and.w	r3, r3, #7
 800f720:	2b05      	cmp	r3, #5
 800f722:	d811      	bhi.n	800f748 <UART_SetConfig+0x1f0>
 800f724:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f728:	01270006 	.word	0x01270006
 800f72c:	000a0008 	.word	0x000a0008
 800f730:	000e000c 	.word	0x000e000c
 800f734:	2300      	movs	r3, #0
 800f736:	e79b      	b.n	800f670 <UART_SetConfig+0x118>
 800f738:	2308      	movs	r3, #8
 800f73a:	e799      	b.n	800f670 <UART_SetConfig+0x118>
 800f73c:	2310      	movs	r3, #16
 800f73e:	e797      	b.n	800f670 <UART_SetConfig+0x118>
 800f740:	2320      	movs	r3, #32
 800f742:	e795      	b.n	800f670 <UART_SetConfig+0x118>
 800f744:	2340      	movs	r3, #64	@ 0x40
 800f746:	e793      	b.n	800f670 <UART_SetConfig+0x118>
 800f748:	2380      	movs	r3, #128	@ 0x80
 800f74a:	e791      	b.n	800f670 <UART_SetConfig+0x118>
 800f74c:	4b26      	ldr	r3, [pc, #152]	@ (800f7e8 <UART_SetConfig+0x290>)
 800f74e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f750:	f003 0307 	and.w	r3, r3, #7
 800f754:	2b05      	cmp	r3, #5
 800f756:	d811      	bhi.n	800f77c <UART_SetConfig+0x224>
 800f758:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f75c:	010f0006 	.word	0x010f0006
 800f760:	000a0008 	.word	0x000a0008
 800f764:	000e000c 	.word	0x000e000c
 800f768:	2300      	movs	r3, #0
 800f76a:	e781      	b.n	800f670 <UART_SetConfig+0x118>
 800f76c:	2308      	movs	r3, #8
 800f76e:	e77f      	b.n	800f670 <UART_SetConfig+0x118>
 800f770:	2310      	movs	r3, #16
 800f772:	e77d      	b.n	800f670 <UART_SetConfig+0x118>
 800f774:	2320      	movs	r3, #32
 800f776:	e77b      	b.n	800f670 <UART_SetConfig+0x118>
 800f778:	2340      	movs	r3, #64	@ 0x40
 800f77a:	e779      	b.n	800f670 <UART_SetConfig+0x118>
 800f77c:	2380      	movs	r3, #128	@ 0x80
 800f77e:	e777      	b.n	800f670 <UART_SetConfig+0x118>
 800f780:	4b19      	ldr	r3, [pc, #100]	@ (800f7e8 <UART_SetConfig+0x290>)
 800f782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f784:	f003 0307 	and.w	r3, r3, #7
 800f788:	2b05      	cmp	r3, #5
 800f78a:	d811      	bhi.n	800f7b0 <UART_SetConfig+0x258>
 800f78c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f790:	00f70006 	.word	0x00f70006
 800f794:	000a0008 	.word	0x000a0008
 800f798:	000e000c 	.word	0x000e000c
 800f79c:	2300      	movs	r3, #0
 800f79e:	e767      	b.n	800f670 <UART_SetConfig+0x118>
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	e765      	b.n	800f670 <UART_SetConfig+0x118>
 800f7a4:	2310      	movs	r3, #16
 800f7a6:	e763      	b.n	800f670 <UART_SetConfig+0x118>
 800f7a8:	2320      	movs	r3, #32
 800f7aa:	e761      	b.n	800f670 <UART_SetConfig+0x118>
 800f7ac:	2340      	movs	r3, #64	@ 0x40
 800f7ae:	e75f      	b.n	800f670 <UART_SetConfig+0x118>
 800f7b0:	2380      	movs	r3, #128	@ 0x80
 800f7b2:	e75d      	b.n	800f670 <UART_SetConfig+0x118>
 800f7b4:	cfff69f3 	.word	0xcfff69f3
 800f7b8:	58000c00 	.word	0x58000c00
 800f7bc:	11fff4ff 	.word	0x11fff4ff
 800f7c0:	40011000 	.word	0x40011000
 800f7c4:	40004400 	.word	0x40004400
 800f7c8:	40004800 	.word	0x40004800
 800f7cc:	40004c00 	.word	0x40004c00
 800f7d0:	40005000 	.word	0x40005000
 800f7d4:	40011400 	.word	0x40011400
 800f7d8:	40007800 	.word	0x40007800
 800f7dc:	40007c00 	.word	0x40007c00
 800f7e0:	40011800 	.word	0x40011800
 800f7e4:	40011c00 	.word	0x40011c00
 800f7e8:	58024400 	.word	0x58024400
 800f7ec:	4b69      	ldr	r3, [pc, #420]	@ (800f994 <UART_SetConfig+0x43c>)
 800f7ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f7f4:	2b28      	cmp	r3, #40	@ 0x28
 800f7f6:	d820      	bhi.n	800f83a <UART_SetConfig+0x2e2>
 800f7f8:	e8df f003 	tbb	[pc, r3]
 800f7fc:	1f1f1f15 	.word	0x1f1f1f15
 800f800:	1f1f1f1f 	.word	0x1f1f1f1f
 800f804:	1f1f1fc3 	.word	0x1f1f1fc3
 800f808:	1f1f1f1f 	.word	0x1f1f1f1f
 800f80c:	1f1f1f17 	.word	0x1f1f1f17
 800f810:	1f1f1f1f 	.word	0x1f1f1f1f
 800f814:	1f1f1f19 	.word	0x1f1f1f19
 800f818:	1f1f1f1f 	.word	0x1f1f1f1f
 800f81c:	1f1f1f1b 	.word	0x1f1f1f1b
 800f820:	1f1f1f1f 	.word	0x1f1f1f1f
 800f824:	1d          	.byte	0x1d
 800f825:	00          	.byte	0x00
 800f826:	2301      	movs	r3, #1
 800f828:	e722      	b.n	800f670 <UART_SetConfig+0x118>
 800f82a:	2308      	movs	r3, #8
 800f82c:	e720      	b.n	800f670 <UART_SetConfig+0x118>
 800f82e:	2310      	movs	r3, #16
 800f830:	e71e      	b.n	800f670 <UART_SetConfig+0x118>
 800f832:	2320      	movs	r3, #32
 800f834:	e71c      	b.n	800f670 <UART_SetConfig+0x118>
 800f836:	2340      	movs	r3, #64	@ 0x40
 800f838:	e71a      	b.n	800f670 <UART_SetConfig+0x118>
 800f83a:	2380      	movs	r3, #128	@ 0x80
 800f83c:	e718      	b.n	800f670 <UART_SetConfig+0x118>
 800f83e:	4b55      	ldr	r3, [pc, #340]	@ (800f994 <UART_SetConfig+0x43c>)
 800f840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f842:	f003 0307 	and.w	r3, r3, #7
 800f846:	2b05      	cmp	r3, #5
 800f848:	d80e      	bhi.n	800f868 <UART_SetConfig+0x310>
 800f84a:	e8df f003 	tbb	[pc, r3]
 800f84e:	9c03      	.short	0x9c03
 800f850:	0b090705 	.word	0x0b090705
 800f854:	2300      	movs	r3, #0
 800f856:	e70b      	b.n	800f670 <UART_SetConfig+0x118>
 800f858:	2308      	movs	r3, #8
 800f85a:	e709      	b.n	800f670 <UART_SetConfig+0x118>
 800f85c:	2310      	movs	r3, #16
 800f85e:	e707      	b.n	800f670 <UART_SetConfig+0x118>
 800f860:	2320      	movs	r3, #32
 800f862:	e705      	b.n	800f670 <UART_SetConfig+0x118>
 800f864:	2340      	movs	r3, #64	@ 0x40
 800f866:	e703      	b.n	800f670 <UART_SetConfig+0x118>
 800f868:	2380      	movs	r3, #128	@ 0x80
 800f86a:	e701      	b.n	800f670 <UART_SetConfig+0x118>
 800f86c:	4b49      	ldr	r3, [pc, #292]	@ (800f994 <UART_SetConfig+0x43c>)
 800f86e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f870:	f003 0307 	and.w	r3, r3, #7
 800f874:	2b05      	cmp	r3, #5
 800f876:	d80e      	bhi.n	800f896 <UART_SetConfig+0x33e>
 800f878:	e8df f003 	tbb	[pc, r3]
 800f87c:	07058703 	.word	0x07058703
 800f880:	0b09      	.short	0x0b09
 800f882:	2300      	movs	r3, #0
 800f884:	e6f4      	b.n	800f670 <UART_SetConfig+0x118>
 800f886:	2308      	movs	r3, #8
 800f888:	e6f2      	b.n	800f670 <UART_SetConfig+0x118>
 800f88a:	2310      	movs	r3, #16
 800f88c:	e6f0      	b.n	800f670 <UART_SetConfig+0x118>
 800f88e:	2320      	movs	r3, #32
 800f890:	e6ee      	b.n	800f670 <UART_SetConfig+0x118>
 800f892:	2340      	movs	r3, #64	@ 0x40
 800f894:	e6ec      	b.n	800f670 <UART_SetConfig+0x118>
 800f896:	2380      	movs	r3, #128	@ 0x80
 800f898:	e6ea      	b.n	800f670 <UART_SetConfig+0x118>
 800f89a:	4b3e      	ldr	r3, [pc, #248]	@ (800f994 <UART_SetConfig+0x43c>)
 800f89c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f89e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8a2:	2b28      	cmp	r3, #40	@ 0x28
 800f8a4:	d820      	bhi.n	800f8e8 <UART_SetConfig+0x390>
 800f8a6:	e8df f003 	tbb	[pc, r3]
 800f8aa:	1f15      	.short	0x1f15
 800f8ac:	1f1f1f1f 	.word	0x1f1f1f1f
 800f8b0:	1f721f1f 	.word	0x1f721f1f
 800f8b4:	1f1f1f1f 	.word	0x1f1f1f1f
 800f8b8:	1f171f1f 	.word	0x1f171f1f
 800f8bc:	1f1f1f1f 	.word	0x1f1f1f1f
 800f8c0:	1f191f1f 	.word	0x1f191f1f
 800f8c4:	1f1f1f1f 	.word	0x1f1f1f1f
 800f8c8:	1f1b1f1f 	.word	0x1f1b1f1f
 800f8cc:	1f1f1f1f 	.word	0x1f1f1f1f
 800f8d0:	1f1f      	.short	0x1f1f
 800f8d2:	1d          	.byte	0x1d
 800f8d3:	00          	.byte	0x00
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e6cb      	b.n	800f670 <UART_SetConfig+0x118>
 800f8d8:	2308      	movs	r3, #8
 800f8da:	e6c9      	b.n	800f670 <UART_SetConfig+0x118>
 800f8dc:	2310      	movs	r3, #16
 800f8de:	e6c7      	b.n	800f670 <UART_SetConfig+0x118>
 800f8e0:	2320      	movs	r3, #32
 800f8e2:	e6c5      	b.n	800f670 <UART_SetConfig+0x118>
 800f8e4:	2340      	movs	r3, #64	@ 0x40
 800f8e6:	e6c3      	b.n	800f670 <UART_SetConfig+0x118>
 800f8e8:	2380      	movs	r3, #128	@ 0x80
 800f8ea:	e6c1      	b.n	800f670 <UART_SetConfig+0x118>
 800f8ec:	4b29      	ldr	r3, [pc, #164]	@ (800f994 <UART_SetConfig+0x43c>)
 800f8ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8f4:	2b28      	cmp	r3, #40	@ 0x28
 800f8f6:	d820      	bhi.n	800f93a <UART_SetConfig+0x3e2>
 800f8f8:	e8df f003 	tbb	[pc, r3]
 800f8fc:	1f1f1f15 	.word	0x1f1f1f15
 800f900:	1f1f1f1f 	.word	0x1f1f1f1f
 800f904:	1f1f1f4e 	.word	0x1f1f1f4e
 800f908:	1f1f1f1f 	.word	0x1f1f1f1f
 800f90c:	1f1f1f17 	.word	0x1f1f1f17
 800f910:	1f1f1f1f 	.word	0x1f1f1f1f
 800f914:	1f1f1f19 	.word	0x1f1f1f19
 800f918:	1f1f1f1f 	.word	0x1f1f1f1f
 800f91c:	1f1f1f1b 	.word	0x1f1f1f1b
 800f920:	1f1f1f1f 	.word	0x1f1f1f1f
 800f924:	1d          	.byte	0x1d
 800f925:	00          	.byte	0x00
 800f926:	2301      	movs	r3, #1
 800f928:	e6a2      	b.n	800f670 <UART_SetConfig+0x118>
 800f92a:	2308      	movs	r3, #8
 800f92c:	e6a0      	b.n	800f670 <UART_SetConfig+0x118>
 800f92e:	2310      	movs	r3, #16
 800f930:	e69e      	b.n	800f670 <UART_SetConfig+0x118>
 800f932:	2320      	movs	r3, #32
 800f934:	e69c      	b.n	800f670 <UART_SetConfig+0x118>
 800f936:	2340      	movs	r3, #64	@ 0x40
 800f938:	e69a      	b.n	800f670 <UART_SetConfig+0x118>
 800f93a:	2380      	movs	r3, #128	@ 0x80
 800f93c:	e698      	b.n	800f670 <UART_SetConfig+0x118>
 800f93e:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800f942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f944:	f003 0307 	and.w	r3, r3, #7
 800f948:	2b05      	cmp	r3, #5
 800f94a:	d80e      	bhi.n	800f96a <UART_SetConfig+0x412>
 800f94c:	e8df f003 	tbb	[pc, r3]
 800f950:	07052603 	.word	0x07052603
 800f954:	0b09      	.short	0x0b09
 800f956:	2302      	movs	r3, #2
 800f958:	e68a      	b.n	800f670 <UART_SetConfig+0x118>
 800f95a:	2308      	movs	r3, #8
 800f95c:	e688      	b.n	800f670 <UART_SetConfig+0x118>
 800f95e:	2310      	movs	r3, #16
 800f960:	e686      	b.n	800f670 <UART_SetConfig+0x118>
 800f962:	2320      	movs	r3, #32
 800f964:	e684      	b.n	800f670 <UART_SetConfig+0x118>
 800f966:	2340      	movs	r3, #64	@ 0x40
 800f968:	e682      	b.n	800f670 <UART_SetConfig+0x118>
 800f96a:	2380      	movs	r3, #128	@ 0x80
 800f96c:	e680      	b.n	800f670 <UART_SetConfig+0x118>
 800f96e:	2304      	movs	r3, #4
 800f970:	e67e      	b.n	800f670 <UART_SetConfig+0x118>
 800f972:	2304      	movs	r3, #4
 800f974:	e67c      	b.n	800f670 <UART_SetConfig+0x118>
 800f976:	2304      	movs	r3, #4
 800f978:	e67a      	b.n	800f670 <UART_SetConfig+0x118>
 800f97a:	2304      	movs	r3, #4
 800f97c:	e678      	b.n	800f670 <UART_SetConfig+0x118>
 800f97e:	2304      	movs	r3, #4
 800f980:	e676      	b.n	800f670 <UART_SetConfig+0x118>
 800f982:	2304      	movs	r3, #4
 800f984:	e674      	b.n	800f670 <UART_SetConfig+0x118>
 800f986:	2304      	movs	r3, #4
 800f988:	e672      	b.n	800f670 <UART_SetConfig+0x118>
 800f98a:	2304      	movs	r3, #4
 800f98c:	e670      	b.n	800f670 <UART_SetConfig+0x118>
 800f98e:	2304      	movs	r3, #4
 800f990:	e66e      	b.n	800f670 <UART_SetConfig+0x118>
 800f992:	bf00      	nop
 800f994:	58024400 	.word	0x58024400
 800f998:	2304      	movs	r3, #4
 800f99a:	e669      	b.n	800f670 <UART_SetConfig+0x118>
 800f99c:	2304      	movs	r3, #4
 800f99e:	e667      	b.n	800f670 <UART_SetConfig+0x118>
    switch (clocksource)
 800f9a0:	2b20      	cmp	r3, #32
 800f9a2:	d827      	bhi.n	800f9f4 <UART_SetConfig+0x49c>
 800f9a4:	2b02      	cmp	r3, #2
 800f9a6:	f0c0 8110 	bcc.w	800fbca <UART_SetConfig+0x672>
 800f9aa:	3b02      	subs	r3, #2
 800f9ac:	2b1e      	cmp	r3, #30
 800f9ae:	f200 810e 	bhi.w	800fbce <UART_SetConfig+0x676>
 800f9b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f9b6:	0050      	.short	0x0050
 800f9b8:	0056010c 	.word	0x0056010c
 800f9bc:	010c010c 	.word	0x010c010c
 800f9c0:	005b010c 	.word	0x005b010c
 800f9c4:	010c010c 	.word	0x010c010c
 800f9c8:	010c010c 	.word	0x010c010c
 800f9cc:	010c010c 	.word	0x010c010c
 800f9d0:	0060010c 	.word	0x0060010c
 800f9d4:	010c010c 	.word	0x010c010c
 800f9d8:	010c010c 	.word	0x010c010c
 800f9dc:	010c010c 	.word	0x010c010c
 800f9e0:	010c010c 	.word	0x010c010c
 800f9e4:	010c010c 	.word	0x010c010c
 800f9e8:	010c010c 	.word	0x010c010c
 800f9ec:	010c010c 	.word	0x010c010c
 800f9f0:	006c010c 	.word	0x006c010c
 800f9f4:	2b40      	cmp	r3, #64	@ 0x40
 800f9f6:	d12c      	bne.n	800fa52 <UART_SetConfig+0x4fa>
        pclk = (uint32_t) LSE_VALUE;
 800f9f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f9fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800f9fe:	4b80      	ldr	r3, [pc, #512]	@ (800fc00 <UART_SetConfig+0x6a8>)
 800fa00:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800fa04:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa08:	6865      	ldr	r5, [r4, #4]
 800fa0a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800fa0e:	4299      	cmp	r1, r3
 800fa10:	f200 80df 	bhi.w	800fbd2 <UART_SetConfig+0x67a>
 800fa14:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800fa18:	f200 80dd 	bhi.w	800fbd6 <UART_SetConfig+0x67e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa1c:	2600      	movs	r6, #0
 800fa1e:	4633      	mov	r3, r6
 800fa20:	4631      	mov	r1, r6
 800fa22:	f7f0 fe99 	bl	8000758 <__aeabi_uldivmod>
 800fa26:	0209      	lsls	r1, r1, #8
 800fa28:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800fa2c:	0200      	lsls	r0, r0, #8
 800fa2e:	086b      	lsrs	r3, r5, #1
 800fa30:	18c0      	adds	r0, r0, r3
 800fa32:	462a      	mov	r2, r5
 800fa34:	4633      	mov	r3, r6
 800fa36:	f141 0100 	adc.w	r1, r1, #0
 800fa3a:	f7f0 fe8d 	bl	8000758 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fa3e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800fa42:	4b70      	ldr	r3, [pc, #448]	@ (800fc04 <UART_SetConfig+0x6ac>)
 800fa44:	429a      	cmp	r2, r3
 800fa46:	f200 80c8 	bhi.w	800fbda <UART_SetConfig+0x682>
          huart->Instance->BRR = usartdiv;
 800fa4a:	6823      	ldr	r3, [r4, #0]
 800fa4c:	60d8      	str	r0, [r3, #12]
 800fa4e:	4630      	mov	r0, r6
 800fa50:	e0ca      	b.n	800fbe8 <UART_SetConfig+0x690>
    switch (clocksource)
 800fa52:	2001      	movs	r0, #1
 800fa54:	e0c8      	b.n	800fbe8 <UART_SetConfig+0x690>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fa56:	f7fd fcf9 	bl	800d44c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d1ce      	bne.n	800f9fc <UART_SetConfig+0x4a4>
 800fa5e:	2000      	movs	r0, #0
 800fa60:	e0c2      	b.n	800fbe8 <UART_SetConfig+0x690>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa62:	a803      	add	r0, sp, #12
 800fa64:	f7fd fd04 	bl	800d470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa68:	9804      	ldr	r0, [sp, #16]
        break;
 800fa6a:	e7f6      	b.n	800fa5a <UART_SetConfig+0x502>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa6c:	4668      	mov	r0, sp
 800fa6e:	f7fd fdfd 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa72:	9801      	ldr	r0, [sp, #4]
        break;
 800fa74:	e7f1      	b.n	800fa5a <UART_SetConfig+0x502>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa76:	4b64      	ldr	r3, [pc, #400]	@ (800fc08 <UART_SetConfig+0x6b0>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f013 0f20 	tst.w	r3, #32
 800fa7e:	d008      	beq.n	800fa92 <UART_SetConfig+0x53a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa80:	4b61      	ldr	r3, [pc, #388]	@ (800fc08 <UART_SetConfig+0x6b0>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fa88:	4860      	ldr	r0, [pc, #384]	@ (800fc0c <UART_SetConfig+0x6b4>)
 800fa8a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800fa8c:	e7b6      	b.n	800f9fc <UART_SetConfig+0x4a4>
    switch (clocksource)
 800fa8e:	4860      	ldr	r0, [pc, #384]	@ (800fc10 <UART_SetConfig+0x6b8>)
 800fa90:	e7b4      	b.n	800f9fc <UART_SetConfig+0x4a4>
          pclk = (uint32_t) HSI_VALUE;
 800fa92:	485e      	ldr	r0, [pc, #376]	@ (800fc0c <UART_SetConfig+0x6b4>)
 800fa94:	e7b2      	b.n	800f9fc <UART_SetConfig+0x4a4>
    switch (clocksource)
 800fa96:	2b20      	cmp	r3, #32
 800fa98:	d815      	bhi.n	800fac6 <UART_SetConfig+0x56e>
 800fa9a:	2b20      	cmp	r3, #32
 800fa9c:	f200 809f 	bhi.w	800fbde <UART_SetConfig+0x686>
 800faa0:	e8df f003 	tbb	[pc, r3]
 800faa4:	9d9d3731 	.word	0x9d9d3731
 800faa8:	9d9d9d3a 	.word	0x9d9d9d3a
 800faac:	9d9d9d3f 	.word	0x9d9d9d3f
 800fab0:	9d9d9d9d 	.word	0x9d9d9d9d
 800fab4:	9d9d9d44 	.word	0x9d9d9d44
 800fab8:	9d9d9d9d 	.word	0x9d9d9d9d
 800fabc:	9d9d9d9d 	.word	0x9d9d9d9d
 800fac0:	9d9d9d9d 	.word	0x9d9d9d9d
 800fac4:	50          	.byte	0x50
 800fac5:	00          	.byte	0x00
 800fac6:	2b40      	cmp	r3, #64	@ 0x40
 800fac8:	d11b      	bne.n	800fb02 <UART_SetConfig+0x5aa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800faca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800facc:	4b4c      	ldr	r3, [pc, #304]	@ (800fc00 <UART_SetConfig+0x6a8>)
 800face:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fad2:	fbb0 f0f3 	udiv	r0, r0, r3
 800fad6:	6862      	ldr	r2, [r4, #4]
 800fad8:	0853      	lsrs	r3, r2, #1
 800fada:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fade:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fae2:	f1a3 0110 	sub.w	r1, r3, #16
 800fae6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800faea:	4291      	cmp	r1, r2
 800faec:	d879      	bhi.n	800fbe2 <UART_SetConfig+0x68a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800faee:	b29a      	uxth	r2, r3
 800faf0:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800faf4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800faf8:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800fafa:	6822      	ldr	r2, [r4, #0]
 800fafc:	60d3      	str	r3, [r2, #12]
 800fafe:	2000      	movs	r0, #0
 800fb00:	e072      	b.n	800fbe8 <UART_SetConfig+0x690>
    switch (clocksource)
 800fb02:	2001      	movs	r0, #1
 800fb04:	e070      	b.n	800fbe8 <UART_SetConfig+0x690>
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb06:	f7fc fe6b 	bl	800c7e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d1dd      	bne.n	800faca <UART_SetConfig+0x572>
 800fb0e:	2000      	movs	r0, #0
 800fb10:	e06a      	b.n	800fbe8 <UART_SetConfig+0x690>
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb12:	f7fc fe77 	bl	800c804 <HAL_RCC_GetPCLK2Freq>
        break;
 800fb16:	e7f8      	b.n	800fb0a <UART_SetConfig+0x5b2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb18:	a803      	add	r0, sp, #12
 800fb1a:	f7fd fca9 	bl	800d470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb1e:	9804      	ldr	r0, [sp, #16]
        break;
 800fb20:	e7f3      	b.n	800fb0a <UART_SetConfig+0x5b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb22:	4668      	mov	r0, sp
 800fb24:	f7fd fda2 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb28:	9801      	ldr	r0, [sp, #4]
        break;
 800fb2a:	e7ee      	b.n	800fb0a <UART_SetConfig+0x5b2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb2c:	4b36      	ldr	r3, [pc, #216]	@ (800fc08 <UART_SetConfig+0x6b0>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f013 0f20 	tst.w	r3, #32
 800fb34:	d008      	beq.n	800fb48 <UART_SetConfig+0x5f0>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb36:	4b34      	ldr	r3, [pc, #208]	@ (800fc08 <UART_SetConfig+0x6b0>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fb3e:	4833      	ldr	r0, [pc, #204]	@ (800fc0c <UART_SetConfig+0x6b4>)
 800fb40:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800fb42:	e7c2      	b.n	800faca <UART_SetConfig+0x572>
    switch (clocksource)
 800fb44:	4832      	ldr	r0, [pc, #200]	@ (800fc10 <UART_SetConfig+0x6b8>)
 800fb46:	e7c0      	b.n	800faca <UART_SetConfig+0x572>
          pclk = (uint32_t) HSI_VALUE;
 800fb48:	4830      	ldr	r0, [pc, #192]	@ (800fc0c <UART_SetConfig+0x6b4>)
 800fb4a:	e7be      	b.n	800faca <UART_SetConfig+0x572>
    switch (clocksource)
 800fb4c:	2b40      	cmp	r3, #64	@ 0x40
 800fb4e:	d117      	bne.n	800fb80 <UART_SetConfig+0x628>
        pclk = (uint32_t) LSE_VALUE;
 800fb50:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb54:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800fb56:	4b2a      	ldr	r3, [pc, #168]	@ (800fc00 <UART_SetConfig+0x6a8>)
 800fb58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fb5c:	fbb0 f0f3 	udiv	r0, r0, r3
 800fb60:	6863      	ldr	r3, [r4, #4]
 800fb62:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800fb66:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb6a:	f1a0 0210 	sub.w	r2, r0, #16
 800fb6e:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d842      	bhi.n	800fbfc <UART_SetConfig+0x6a4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	b280      	uxth	r0, r0
 800fb7a:	60d8      	str	r0, [r3, #12]
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	e033      	b.n	800fbe8 <UART_SetConfig+0x690>
    switch (clocksource)
 800fb80:	2001      	movs	r0, #1
 800fb82:	e031      	b.n	800fbe8 <UART_SetConfig+0x690>
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb84:	f7fc fe2c 	bl	800c7e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d1e3      	bne.n	800fb54 <UART_SetConfig+0x5fc>
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	e02b      	b.n	800fbe8 <UART_SetConfig+0x690>
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb90:	f7fc fe38 	bl	800c804 <HAL_RCC_GetPCLK2Freq>
        break;
 800fb94:	e7f8      	b.n	800fb88 <UART_SetConfig+0x630>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb96:	a803      	add	r0, sp, #12
 800fb98:	f7fd fc6a 	bl	800d470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb9c:	9804      	ldr	r0, [sp, #16]
        break;
 800fb9e:	e7f3      	b.n	800fb88 <UART_SetConfig+0x630>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fba0:	4668      	mov	r0, sp
 800fba2:	f7fd fd63 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fba6:	9801      	ldr	r0, [sp, #4]
        break;
 800fba8:	e7ee      	b.n	800fb88 <UART_SetConfig+0x630>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbaa:	4b17      	ldr	r3, [pc, #92]	@ (800fc08 <UART_SetConfig+0x6b0>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f013 0f20 	tst.w	r3, #32
 800fbb2:	d008      	beq.n	800fbc6 <UART_SetConfig+0x66e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbb4:	4b14      	ldr	r3, [pc, #80]	@ (800fc08 <UART_SetConfig+0x6b0>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fbbc:	4813      	ldr	r0, [pc, #76]	@ (800fc0c <UART_SetConfig+0x6b4>)
 800fbbe:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800fbc0:	e7c8      	b.n	800fb54 <UART_SetConfig+0x5fc>
    switch (clocksource)
 800fbc2:	4813      	ldr	r0, [pc, #76]	@ (800fc10 <UART_SetConfig+0x6b8>)
 800fbc4:	e7c6      	b.n	800fb54 <UART_SetConfig+0x5fc>
          pclk = (uint32_t) HSI_VALUE;
 800fbc6:	4811      	ldr	r0, [pc, #68]	@ (800fc0c <UART_SetConfig+0x6b4>)
 800fbc8:	e7c4      	b.n	800fb54 <UART_SetConfig+0x5fc>
    switch (clocksource)
 800fbca:	2001      	movs	r0, #1
 800fbcc:	e00c      	b.n	800fbe8 <UART_SetConfig+0x690>
 800fbce:	2001      	movs	r0, #1
 800fbd0:	e00a      	b.n	800fbe8 <UART_SetConfig+0x690>
        ret = HAL_ERROR;
 800fbd2:	2001      	movs	r0, #1
 800fbd4:	e008      	b.n	800fbe8 <UART_SetConfig+0x690>
 800fbd6:	2001      	movs	r0, #1
 800fbd8:	e006      	b.n	800fbe8 <UART_SetConfig+0x690>
          ret = HAL_ERROR;
 800fbda:	2001      	movs	r0, #1
 800fbdc:	e004      	b.n	800fbe8 <UART_SetConfig+0x690>
    switch (clocksource)
 800fbde:	2001      	movs	r0, #1
 800fbe0:	e002      	b.n	800fbe8 <UART_SetConfig+0x690>
        ret = HAL_ERROR;
 800fbe2:	2001      	movs	r0, #1
 800fbe4:	e000      	b.n	800fbe8 <UART_SetConfig+0x690>
    switch (clocksource)
 800fbe6:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fbee:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800fbf6:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800fbf8:	b006      	add	sp, #24
 800fbfa:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800fbfc:	2001      	movs	r0, #1
 800fbfe:	e7f3      	b.n	800fbe8 <UART_SetConfig+0x690>
 800fc00:	080292a4 	.word	0x080292a4
 800fc04:	000ffcff 	.word	0x000ffcff
 800fc08:	58024400 	.word	0x58024400
 800fc0c:	03d09000 	.word	0x03d09000
 800fc10:	003d0900 	.word	0x003d0900

0800fc14 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc16:	f013 0f08 	tst.w	r3, #8
 800fc1a:	d006      	beq.n	800fc2a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc1c:	6802      	ldr	r2, [r0, #0]
 800fc1e:	6853      	ldr	r3, [r2, #4]
 800fc20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fc24:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800fc26:	430b      	orrs	r3, r1
 800fc28:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fc2a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc2c:	f013 0f01 	tst.w	r3, #1
 800fc30:	d006      	beq.n	800fc40 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fc32:	6802      	ldr	r2, [r0, #0]
 800fc34:	6853      	ldr	r3, [r2, #4]
 800fc36:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fc3a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800fc3c:	430b      	orrs	r3, r1
 800fc3e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc40:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc42:	f013 0f02 	tst.w	r3, #2
 800fc46:	d006      	beq.n	800fc56 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc48:	6802      	ldr	r2, [r0, #0]
 800fc4a:	6853      	ldr	r3, [r2, #4]
 800fc4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc50:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800fc52:	430b      	orrs	r3, r1
 800fc54:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fc56:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc58:	f013 0f04 	tst.w	r3, #4
 800fc5c:	d006      	beq.n	800fc6c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fc5e:	6802      	ldr	r2, [r0, #0]
 800fc60:	6853      	ldr	r3, [r2, #4]
 800fc62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fc66:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800fc68:	430b      	orrs	r3, r1
 800fc6a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc6c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc6e:	f013 0f10 	tst.w	r3, #16
 800fc72:	d006      	beq.n	800fc82 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc74:	6802      	ldr	r2, [r0, #0]
 800fc76:	6893      	ldr	r3, [r2, #8]
 800fc78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc7c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800fc7e:	430b      	orrs	r3, r1
 800fc80:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc82:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc84:	f013 0f20 	tst.w	r3, #32
 800fc88:	d006      	beq.n	800fc98 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fc8a:	6802      	ldr	r2, [r0, #0]
 800fc8c:	6893      	ldr	r3, [r2, #8]
 800fc8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fc92:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800fc94:	430b      	orrs	r3, r1
 800fc96:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc98:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc9a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800fc9e:	d00a      	beq.n	800fcb6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fca0:	6802      	ldr	r2, [r0, #0]
 800fca2:	6853      	ldr	r3, [r2, #4]
 800fca4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fca8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800fcaa:	430b      	orrs	r3, r1
 800fcac:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fcae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800fcb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fcb4:	d00b      	beq.n	800fcce <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fcb6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fcb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fcbc:	d006      	beq.n	800fccc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fcbe:	6802      	ldr	r2, [r0, #0]
 800fcc0:	6853      	ldr	r3, [r2, #4]
 800fcc2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800fcc6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800fcc8:	430b      	orrs	r3, r1
 800fcca:	6053      	str	r3, [r2, #4]
}
 800fccc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fcce:	6802      	ldr	r2, [r0, #0]
 800fcd0:	6853      	ldr	r3, [r2, #4]
 800fcd2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800fcd6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800fcd8:	430b      	orrs	r3, r1
 800fcda:	6053      	str	r3, [r2, #4]
 800fcdc:	e7eb      	b.n	800fcb6 <UART_AdvFeatureConfig+0xa2>

0800fcde <UART_WaitOnFlagUntilTimeout>:
{
 800fcde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fce2:	4605      	mov	r5, r0
 800fce4:	460e      	mov	r6, r1
 800fce6:	4617      	mov	r7, r2
 800fce8:	4699      	mov	r9, r3
 800fcea:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fcee:	682b      	ldr	r3, [r5, #0]
 800fcf0:	69dc      	ldr	r4, [r3, #28]
 800fcf2:	ea36 0404 	bics.w	r4, r6, r4
 800fcf6:	bf0c      	ite	eq
 800fcf8:	2401      	moveq	r4, #1
 800fcfa:	2400      	movne	r4, #0
 800fcfc:	42bc      	cmp	r4, r7
 800fcfe:	d13a      	bne.n	800fd76 <UART_WaitOnFlagUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 800fd00:	f1b8 3fff 	cmp.w	r8, #4294967295
 800fd04:	d0f3      	beq.n	800fcee <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd06:	f7f7 fe67 	bl	80079d8 <HAL_GetTick>
 800fd0a:	eba0 0009 	sub.w	r0, r0, r9
 800fd0e:	4540      	cmp	r0, r8
 800fd10:	d834      	bhi.n	800fd7c <UART_WaitOnFlagUntilTimeout+0x9e>
 800fd12:	f1b8 0f00 	cmp.w	r8, #0
 800fd16:	d033      	beq.n	800fd80 <UART_WaitOnFlagUntilTimeout+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fd18:	682b      	ldr	r3, [r5, #0]
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	f012 0f04 	tst.w	r2, #4
 800fd20:	d0e5      	beq.n	800fcee <UART_WaitOnFlagUntilTimeout+0x10>
 800fd22:	f1b6 0240 	subs.w	r2, r6, #64	@ 0x40
 800fd26:	bf18      	it	ne
 800fd28:	2201      	movne	r2, #1
 800fd2a:	2e80      	cmp	r6, #128	@ 0x80
 800fd2c:	d0df      	beq.n	800fcee <UART_WaitOnFlagUntilTimeout+0x10>
 800fd2e:	2a00      	cmp	r2, #0
 800fd30:	d0dd      	beq.n	800fcee <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fd32:	69da      	ldr	r2, [r3, #28]
 800fd34:	f012 0f08 	tst.w	r2, #8
 800fd38:	d111      	bne.n	800fd5e <UART_WaitOnFlagUntilTimeout+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd3a:	69da      	ldr	r2, [r3, #28]
 800fd3c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800fd40:	d0d5      	beq.n	800fcee <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd46:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800fd48:	4628      	mov	r0, r5
 800fd4a:	f7ff fb2f 	bl	800f3ac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd4e:	2320      	movs	r3, #32
 800fd50:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800fd54:	2300      	movs	r3, #0
 800fd56:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 800fd5a:	2003      	movs	r0, #3
 800fd5c:	e00c      	b.n	800fd78 <UART_WaitOnFlagUntilTimeout+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd5e:	2408      	movs	r4, #8
 800fd60:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 800fd62:	4628      	mov	r0, r5
 800fd64:	f7ff fb22 	bl	800f3ac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fd68:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 800fd72:	2001      	movs	r0, #1
 800fd74:	e000      	b.n	800fd78 <UART_WaitOnFlagUntilTimeout+0x9a>
  return HAL_OK;
 800fd76:	2000      	movs	r0, #0
}
 800fd78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800fd7c:	2003      	movs	r0, #3
 800fd7e:	e7fb      	b.n	800fd78 <UART_WaitOnFlagUntilTimeout+0x9a>
 800fd80:	2003      	movs	r0, #3
 800fd82:	e7f9      	b.n	800fd78 <UART_WaitOnFlagUntilTimeout+0x9a>

0800fd84 <HAL_UART_Transmit>:
{
 800fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd88:	b082      	sub	sp, #8
 800fd8a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800fd8c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800fd90:	2b20      	cmp	r3, #32
 800fd92:	d15b      	bne.n	800fe4c <HAL_UART_Transmit+0xc8>
 800fd94:	4604      	mov	r4, r0
 800fd96:	460d      	mov	r5, r1
 800fd98:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800fd9a:	2a00      	cmp	r2, #0
 800fd9c:	bf18      	it	ne
 800fd9e:	2900      	cmpne	r1, #0
 800fda0:	d101      	bne.n	800fda6 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800fda2:	2001      	movs	r0, #1
 800fda4:	e053      	b.n	800fe4e <HAL_UART_Transmit+0xca>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fda6:	2300      	movs	r3, #0
 800fda8:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fdac:	2321      	movs	r3, #33	@ 0x21
 800fdae:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800fdb2:	f7f7 fe11 	bl	80079d8 <HAL_GetTick>
 800fdb6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800fdb8:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 800fdbc:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdc0:	68a3      	ldr	r3, [r4, #8]
 800fdc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fdc6:	d002      	beq.n	800fdce <HAL_UART_Transmit+0x4a>
      pdata16bits = NULL;
 800fdc8:	f04f 0800 	mov.w	r8, #0
 800fdcc:	e016      	b.n	800fdfc <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdce:	6923      	ldr	r3, [r4, #16]
 800fdd0:	b343      	cbz	r3, 800fe24 <HAL_UART_Transmit+0xa0>
      pdata16bits = NULL;
 800fdd2:	f04f 0800 	mov.w	r8, #0
 800fdd6:	e011      	b.n	800fdfc <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 800fdd8:	2320      	movs	r3, #32
 800fdda:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800fdde:	2003      	movs	r0, #3
 800fde0:	e035      	b.n	800fe4e <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fde2:	f838 3b02 	ldrh.w	r3, [r8], #2
 800fde6:	6822      	ldr	r2, [r4, #0]
 800fde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdec:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800fdee:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800fdf2:	b292      	uxth	r2, r2
 800fdf4:	3a01      	subs	r2, #1
 800fdf6:	b292      	uxth	r2, r2
 800fdf8:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800fdfc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	b193      	cbz	r3, 800fe2a <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fe04:	9600      	str	r6, [sp, #0]
 800fe06:	463b      	mov	r3, r7
 800fe08:	2200      	movs	r2, #0
 800fe0a:	2180      	movs	r1, #128	@ 0x80
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	f7ff ff66 	bl	800fcde <UART_WaitOnFlagUntilTimeout>
 800fe12:	2800      	cmp	r0, #0
 800fe14:	d1e0      	bne.n	800fdd8 <HAL_UART_Transmit+0x54>
      if (pdata8bits == NULL)
 800fe16:	2d00      	cmp	r5, #0
 800fe18:	d0e3      	beq.n	800fde2 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe1a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800fe1e:	6823      	ldr	r3, [r4, #0]
 800fe20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800fe22:	e7e4      	b.n	800fdee <HAL_UART_Transmit+0x6a>
      pdata16bits = (const uint16_t *) pData;
 800fe24:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800fe26:	2500      	movs	r5, #0
 800fe28:	e7e8      	b.n	800fdfc <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fe2a:	9600      	str	r6, [sp, #0]
 800fe2c:	463b      	mov	r3, r7
 800fe2e:	2200      	movs	r2, #0
 800fe30:	2140      	movs	r1, #64	@ 0x40
 800fe32:	4620      	mov	r0, r4
 800fe34:	f7ff ff53 	bl	800fcde <UART_WaitOnFlagUntilTimeout>
 800fe38:	b918      	cbnz	r0, 800fe42 <HAL_UART_Transmit+0xbe>
    huart->gState = HAL_UART_STATE_READY;
 800fe3a:	2320      	movs	r3, #32
 800fe3c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800fe40:	e005      	b.n	800fe4e <HAL_UART_Transmit+0xca>
      huart->gState = HAL_UART_STATE_READY;
 800fe42:	2320      	movs	r3, #32
 800fe44:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800fe48:	2003      	movs	r0, #3
 800fe4a:	e000      	b.n	800fe4e <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 800fe4c:	2002      	movs	r0, #2
}
 800fe4e:	b002      	add	sp, #8
 800fe50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe54 <UART_CheckIdleState>:
{
 800fe54:	b530      	push	{r4, r5, lr}
 800fe56:	b083      	sub	sp, #12
 800fe58:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800fe60:	f7f7 fdba 	bl	80079d8 <HAL_GetTick>
 800fe64:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fe66:	6822      	ldr	r2, [r4, #0]
 800fe68:	6812      	ldr	r2, [r2, #0]
 800fe6a:	f012 0f08 	tst.w	r2, #8
 800fe6e:	d110      	bne.n	800fe92 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f013 0f04 	tst.w	r3, #4
 800fe78:	d128      	bne.n	800fecc <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 800fe7a:	2320      	movs	r3, #32
 800fe7c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fe80:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe84:	2000      	movs	r0, #0
 800fe86:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe88:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 800fe8a:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800fe8e:	b003      	add	sp, #12
 800fe90:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fea0:	4620      	mov	r0, r4
 800fea2:	f7ff ff1c 	bl	800fcde <UART_WaitOnFlagUntilTimeout>
 800fea6:	2800      	cmp	r0, #0
 800fea8:	d0e2      	beq.n	800fe70 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800feaa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feac:	e852 3f00 	ldrex	r3, [r2]
 800feb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb4:	e842 3100 	strex	r1, r3, [r2]
 800feb8:	2900      	cmp	r1, #0
 800feba:	d1f6      	bne.n	800feaa <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 800febc:	2320      	movs	r3, #32
 800febe:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 800fec2:	2300      	movs	r3, #0
 800fec4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800fec8:	2003      	movs	r0, #3
 800feca:	e7e0      	b.n	800fe8e <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	462b      	mov	r3, r5
 800fed4:	2200      	movs	r2, #0
 800fed6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800feda:	4620      	mov	r0, r4
 800fedc:	f7ff feff 	bl	800fcde <UART_WaitOnFlagUntilTimeout>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d0ca      	beq.n	800fe7a <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fee4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fee6:	e852 3f00 	ldrex	r3, [r2]
 800feea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feee:	e842 3100 	strex	r1, r3, [r2]
 800fef2:	2900      	cmp	r1, #0
 800fef4:	d1f6      	bne.n	800fee4 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fef6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef8:	f102 0308 	add.w	r3, r2, #8
 800fefc:	e853 3f00 	ldrex	r3, [r3]
 800ff00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff04:	3208      	adds	r2, #8
 800ff06:	e842 3100 	strex	r1, r3, [r2]
 800ff0a:	2900      	cmp	r1, #0
 800ff0c:	d1f3      	bne.n	800fef6 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 800ff0e:	2320      	movs	r3, #32
 800ff10:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800ff14:	2300      	movs	r3, #0
 800ff16:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800ff1a:	2003      	movs	r0, #3
 800ff1c:	e7b7      	b.n	800fe8e <UART_CheckIdleState+0x3a>

0800ff1e <HAL_UART_Init>:
  if (huart == NULL)
 800ff1e:	b378      	cbz	r0, 800ff80 <HAL_UART_Init+0x62>
{
 800ff20:	b510      	push	{r4, lr}
 800ff22:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800ff24:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800ff28:	b30b      	cbz	r3, 800ff6e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800ff2a:	2324      	movs	r3, #36	@ 0x24
 800ff2c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800ff30:	6822      	ldr	r2, [r4, #0]
 800ff32:	6813      	ldr	r3, [r2, #0]
 800ff34:	f023 0301 	bic.w	r3, r3, #1
 800ff38:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff3a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ff3c:	b9e3      	cbnz	r3, 800ff78 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f7ff fb0a 	bl	800f558 <UART_SetConfig>
 800ff44:	2801      	cmp	r0, #1
 800ff46:	d011      	beq.n	800ff6c <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff48:	6822      	ldr	r2, [r4, #0]
 800ff4a:	6853      	ldr	r3, [r2, #4]
 800ff4c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800ff50:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff52:	6822      	ldr	r2, [r4, #0]
 800ff54:	6893      	ldr	r3, [r2, #8]
 800ff56:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800ff5a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800ff5c:	6822      	ldr	r2, [r4, #0]
 800ff5e:	6813      	ldr	r3, [r2, #0]
 800ff60:	f043 0301 	orr.w	r3, r3, #1
 800ff64:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800ff66:	4620      	mov	r0, r4
 800ff68:	f7ff ff74 	bl	800fe54 <UART_CheckIdleState>
}
 800ff6c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800ff6e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800ff72:	f7f7 fba9 	bl	80076c8 <HAL_UART_MspInit>
 800ff76:	e7d8      	b.n	800ff2a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f7ff fe4b 	bl	800fc14 <UART_AdvFeatureConfig>
 800ff7e:	e7de      	b.n	800ff3e <HAL_UART_Init+0x20>
    return HAL_ERROR;
 800ff80:	2001      	movs	r0, #1
}
 800ff82:	4770      	bx	lr

0800ff84 <UART_Start_Receive_DMA>:
{
 800ff84:	b510      	push	{r4, lr}
 800ff86:	4604      	mov	r4, r0
 800ff88:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800ff8a:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ff8c:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff90:	2200      	movs	r2, #0
 800ff92:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff96:	2222      	movs	r2, #34	@ 0x22
 800ff98:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 800ff9c:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800ffa0:	b1aa      	cbz	r2, 800ffce <UART_Start_Receive_DMA+0x4a>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ffa2:	4921      	ldr	r1, [pc, #132]	@ (8010028 <UART_Start_Receive_DMA+0xa4>)
 800ffa4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ffa6:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800ffaa:	4920      	ldr	r1, [pc, #128]	@ (801002c <UART_Start_Receive_DMA+0xa8>)
 800ffac:	6411      	str	r1, [r2, #64]	@ 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ffae:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800ffb2:	491f      	ldr	r1, [pc, #124]	@ (8010030 <UART_Start_Receive_DMA+0xac>)
 800ffb4:	64d1      	str	r1, [r2, #76]	@ 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800ffb6:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800ffba:	2100      	movs	r1, #0
 800ffbc:	6511      	str	r1, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ffbe:	6801      	ldr	r1, [r0, #0]
 800ffc0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800ffc2:	3124      	adds	r1, #36	@ 0x24
 800ffc4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800ffc8:	f7f8 fb3c 	bl	8008644 <HAL_DMA_Start_IT>
 800ffcc:	bb20      	cbnz	r0, 8010018 <UART_Start_Receive_DMA+0x94>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ffce:	6923      	ldr	r3, [r4, #16]
 800ffd0:	b143      	cbz	r3, 800ffe4 <UART_Start_Receive_DMA+0x60>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ffd2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd4:	e852 3f00 	ldrex	r3, [r2]
 800ffd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffdc:	e842 3100 	strex	r1, r3, [r2]
 800ffe0:	2900      	cmp	r1, #0
 800ffe2:	d1f6      	bne.n	800ffd2 <UART_Start_Receive_DMA+0x4e>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffe4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe6:	f102 0308 	add.w	r3, r2, #8
 800ffea:	e853 3f00 	ldrex	r3, [r3]
 800ffee:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff2:	3208      	adds	r2, #8
 800fff4:	e842 3100 	strex	r1, r3, [r2]
 800fff8:	2900      	cmp	r1, #0
 800fffa:	d1f3      	bne.n	800ffe4 <UART_Start_Receive_DMA+0x60>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fffc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fffe:	f102 0308 	add.w	r3, r2, #8
 8010002:	e853 3f00 	ldrex	r3, [r3]
 8010006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801000a:	3208      	adds	r2, #8
 801000c:	e842 3100 	strex	r1, r3, [r2]
 8010010:	2900      	cmp	r1, #0
 8010012:	d1f3      	bne.n	800fffc <UART_Start_Receive_DMA+0x78>
  return HAL_OK;
 8010014:	2000      	movs	r0, #0
}
 8010016:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010018:	2310      	movs	r3, #16
 801001a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      huart->RxState = HAL_UART_STATE_READY;
 801001e:	2320      	movs	r3, #32
 8010020:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_ERROR;
 8010024:	2001      	movs	r0, #1
 8010026:	e7f6      	b.n	8010016 <UART_Start_Receive_DMA+0x92>
 8010028:	0800f4c9 	.word	0x0800f4c9
 801002c:	0800f4a9 	.word	0x0800f4a9
 8010030:	0800f44f 	.word	0x0800f44f

08010034 <HAL_UART_Receive_DMA>:
{
 8010034:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8010036:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 801003a:	2b20      	cmp	r3, #32
 801003c:	d119      	bne.n	8010072 <HAL_UART_Receive_DMA+0x3e>
    if ((pData == NULL) || (Size == 0U))
 801003e:	2a00      	cmp	r2, #0
 8010040:	bf18      	it	ne
 8010042:	2900      	cmpne	r1, #0
 8010044:	d017      	beq.n	8010076 <HAL_UART_Receive_DMA+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010046:	2300      	movs	r3, #0
 8010048:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801004a:	6803      	ldr	r3, [r0, #0]
 801004c:	4c0b      	ldr	r4, [pc, #44]	@ (801007c <HAL_UART_Receive_DMA+0x48>)
 801004e:	42a3      	cmp	r3, r4
 8010050:	d00c      	beq.n	801006c <HAL_UART_Receive_DMA+0x38>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8010058:	d008      	beq.n	801006c <HAL_UART_Receive_DMA+0x38>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801005a:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801005c:	e854 3f00 	ldrex	r3, [r4]
 8010060:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010064:	e844 3500 	strex	r5, r3, [r4]
 8010068:	2d00      	cmp	r5, #0
 801006a:	d1f6      	bne.n	801005a <HAL_UART_Receive_DMA+0x26>
    return (UART_Start_Receive_DMA(huart, pData, Size));
 801006c:	f7ff ff8a 	bl	800ff84 <UART_Start_Receive_DMA>
 8010070:	e000      	b.n	8010074 <HAL_UART_Receive_DMA+0x40>
    return HAL_BUSY;
 8010072:	2002      	movs	r0, #2
}
 8010074:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8010076:	2001      	movs	r0, #1
 8010078:	e7fc      	b.n	8010074 <HAL_UART_Receive_DMA+0x40>
 801007a:	bf00      	nop
 801007c:	58000c00 	.word	0x58000c00

08010080 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010080:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8010082:	b92b      	cbnz	r3, 8010090 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8010084:	2301      	movs	r3, #1
 8010086:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801008a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 801008e:	4770      	bx	lr
{
 8010090:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010092:	6803      	ldr	r3, [r0, #0]
 8010094:	689a      	ldr	r2, [r3, #8]
 8010096:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801009a:	6899      	ldr	r1, [r3, #8]
 801009c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801009e:	4d09      	ldr	r5, [pc, #36]	@ (80100c4 <UARTEx_SetNbDataToProcess+0x44>)
 80100a0:	5c6b      	ldrb	r3, [r5, r1]
 80100a2:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 80100a4:	4c08      	ldr	r4, [pc, #32]	@ (80100c8 <UARTEx_SetNbDataToProcess+0x48>)
 80100a6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100a8:	fb93 f3f1 	sdiv	r3, r3, r1
 80100ac:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100b0:	5cab      	ldrb	r3, [r5, r2]
 80100b2:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 80100b4:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80100ba:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 80100be:	bc30      	pop	{r4, r5}
 80100c0:	4770      	bx	lr
 80100c2:	bf00      	nop
 80100c4:	080292c4 	.word	0x080292c4
 80100c8:	080292bc 	.word	0x080292bc

080100cc <HAL_RS485Ex_Init>:
  if (huart == NULL)
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d03c      	beq.n	801014a <HAL_RS485Ex_Init+0x7e>
{
 80100d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d2:	460f      	mov	r7, r1
 80100d4:	4616      	mov	r6, r2
 80100d6:	461d      	mov	r5, r3
 80100d8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80100da:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80100de:	b35b      	cbz	r3, 8010138 <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 80100e0:	2324      	movs	r3, #36	@ 0x24
 80100e2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80100e6:	6822      	ldr	r2, [r4, #0]
 80100e8:	6813      	ldr	r3, [r2, #0]
 80100ea:	f023 0301 	bic.w	r3, r3, #1
 80100ee:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80100f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80100f2:	bb33      	cbnz	r3, 8010142 <HAL_RS485Ex_Init+0x76>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80100f4:	4620      	mov	r0, r4
 80100f6:	f7ff fa2f 	bl	800f558 <UART_SetConfig>
 80100fa:	2801      	cmp	r0, #1
 80100fc:	d01b      	beq.n	8010136 <HAL_RS485Ex_Init+0x6a>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80100fe:	6822      	ldr	r2, [r4, #0]
 8010100:	6893      	ldr	r3, [r2, #8]
 8010102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010106:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8010108:	6822      	ldr	r2, [r4, #0]
 801010a:	6893      	ldr	r3, [r2, #8]
 801010c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010110:	433b      	orrs	r3, r7
 8010112:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8010114:	042d      	lsls	r5, r5, #16
 8010116:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801011a:	6821      	ldr	r1, [r4, #0]
 801011c:	6808      	ldr	r0, [r1, #0]
 801011e:	4b0c      	ldr	r3, [pc, #48]	@ (8010150 <HAL_RS485Ex_Init+0x84>)
 8010120:	4003      	ands	r3, r0
 8010122:	4313      	orrs	r3, r2
 8010124:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 8010126:	6822      	ldr	r2, [r4, #0]
 8010128:	6813      	ldr	r3, [r2, #0]
 801012a:	f043 0301 	orr.w	r3, r3, #1
 801012e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8010130:	4620      	mov	r0, r4
 8010132:	f7ff fe8f 	bl	800fe54 <UART_CheckIdleState>
}
 8010136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8010138:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 801013c:	f7f7 fac4 	bl	80076c8 <HAL_UART_MspInit>
 8010140:	e7ce      	b.n	80100e0 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 8010142:	4620      	mov	r0, r4
 8010144:	f7ff fd66 	bl	800fc14 <UART_AdvFeatureConfig>
 8010148:	e7d4      	b.n	80100f4 <HAL_RS485Ex_Init+0x28>
    return HAL_ERROR;
 801014a:	2001      	movs	r0, #1
}
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	fc00ffff 	.word	0xfc00ffff

08010154 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8010154:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010158:	2b01      	cmp	r3, #1
 801015a:	d018      	beq.n	801018e <HAL_UARTEx_DisableFifoMode+0x3a>
 801015c:	2301      	movs	r3, #1
 801015e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8010162:	2324      	movs	r3, #36	@ 0x24
 8010164:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010168:	6803      	ldr	r3, [r0, #0]
 801016a:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 801016c:	6819      	ldr	r1, [r3, #0]
 801016e:	f021 0101 	bic.w	r1, r1, #1
 8010172:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010174:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010178:	2300      	movs	r3, #0
 801017a:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801017c:	6801      	ldr	r1, [r0, #0]
 801017e:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010180:	2220      	movs	r2, #32
 8010182:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8010186:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 801018a:	4618      	mov	r0, r3
 801018c:	4770      	bx	lr
  __HAL_LOCK(huart);
 801018e:	2002      	movs	r0, #2
}
 8010190:	4770      	bx	lr

08010192 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8010192:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8010194:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010198:	2b01      	cmp	r3, #1
 801019a:	d01d      	beq.n	80101d8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 801019c:	4604      	mov	r4, r0
 801019e:	2301      	movs	r3, #1
 80101a0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80101a4:	2324      	movs	r3, #36	@ 0x24
 80101a6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101aa:	6803      	ldr	r3, [r0, #0]
 80101ac:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	f022 0201 	bic.w	r2, r2, #1
 80101b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80101b6:	6802      	ldr	r2, [r0, #0]
 80101b8:	6893      	ldr	r3, [r2, #8]
 80101ba:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80101be:	4319      	orrs	r1, r3
 80101c0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80101c2:	f7ff ff5d 	bl	8010080 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80101ca:	2320      	movs	r3, #32
 80101cc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80101d0:	2000      	movs	r0, #0
 80101d2:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80101d6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80101d8:	2002      	movs	r0, #2
 80101da:	e7fc      	b.n	80101d6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080101dc <HAL_UARTEx_SetRxFifoThreshold>:
{
 80101dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80101de:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d01d      	beq.n	8010222 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80101e6:	4604      	mov	r4, r0
 80101e8:	2301      	movs	r3, #1
 80101ea:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80101ee:	2324      	movs	r3, #36	@ 0x24
 80101f0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101f4:	6803      	ldr	r3, [r0, #0]
 80101f6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	f022 0201 	bic.w	r2, r2, #1
 80101fe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010200:	6802      	ldr	r2, [r0, #0]
 8010202:	6893      	ldr	r3, [r2, #8]
 8010204:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8010208:	4319      	orrs	r1, r3
 801020a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 801020c:	f7ff ff38 	bl	8010080 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010210:	6823      	ldr	r3, [r4, #0]
 8010212:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010214:	2320      	movs	r3, #32
 8010216:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 801021a:	2000      	movs	r0, #0
 801021c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8010220:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8010222:	2002      	movs	r0, #2
 8010224:	e7fc      	b.n	8010220 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08010228 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010228:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801022a:	680b      	ldr	r3, [r1, #0]
 801022c:	b9cb      	cbnz	r3, 8010262 <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801022e:	6803      	ldr	r3, [r0, #0]
 8010230:	4a19      	ldr	r2, [pc, #100]	@ (8010298 <FMC_SDRAM_Init+0x70>)
 8010232:	401a      	ands	r2, r3
 8010234:	684b      	ldr	r3, [r1, #4]
 8010236:	688c      	ldr	r4, [r1, #8]
 8010238:	4323      	orrs	r3, r4
 801023a:	68cc      	ldr	r4, [r1, #12]
 801023c:	4323      	orrs	r3, r4
 801023e:	690c      	ldr	r4, [r1, #16]
 8010240:	4323      	orrs	r3, r4
 8010242:	694c      	ldr	r4, [r1, #20]
 8010244:	4323      	orrs	r3, r4
 8010246:	698c      	ldr	r4, [r1, #24]
 8010248:	4323      	orrs	r3, r4
 801024a:	69cc      	ldr	r4, [r1, #28]
 801024c:	4323      	orrs	r3, r4
 801024e:	6a0c      	ldr	r4, [r1, #32]
 8010250:	4323      	orrs	r3, r4
 8010252:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8010254:	430b      	orrs	r3, r1
 8010256:	431a      	orrs	r2, r3
 8010258:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 801025a:	2000      	movs	r0, #0
 801025c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010260:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010262:	6803      	ldr	r3, [r0, #0]
 8010264:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8010268:	69ca      	ldr	r2, [r1, #28]
 801026a:	6a0c      	ldr	r4, [r1, #32]
 801026c:	4322      	orrs	r2, r4
 801026e:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8010270:	4322      	orrs	r2, r4
 8010272:	4313      	orrs	r3, r2
 8010274:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010276:	6843      	ldr	r3, [r0, #4]
 8010278:	4a07      	ldr	r2, [pc, #28]	@ (8010298 <FMC_SDRAM_Init+0x70>)
 801027a:	401a      	ands	r2, r3
 801027c:	684b      	ldr	r3, [r1, #4]
 801027e:	688c      	ldr	r4, [r1, #8]
 8010280:	4323      	orrs	r3, r4
 8010282:	68cc      	ldr	r4, [r1, #12]
 8010284:	4323      	orrs	r3, r4
 8010286:	690c      	ldr	r4, [r1, #16]
 8010288:	4323      	orrs	r3, r4
 801028a:	694c      	ldr	r4, [r1, #20]
 801028c:	4323      	orrs	r3, r4
 801028e:	6989      	ldr	r1, [r1, #24]
 8010290:	430b      	orrs	r3, r1
 8010292:	431a      	orrs	r2, r3
 8010294:	6042      	str	r2, [r0, #4]
 8010296:	e7e0      	b.n	801025a <FMC_SDRAM_Init+0x32>
 8010298:	ffff8000 	.word	0xffff8000

0801029c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801029c:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801029e:	bb3a      	cbnz	r2, 80102f0 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80102a0:	6882      	ldr	r2, [r0, #8]
 80102a2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80102a6:	680b      	ldr	r3, [r1, #0]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	684c      	ldr	r4, [r1, #4]
 80102ac:	f104 3cff 	add.w	ip, r4, #4294967295
 80102b0:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80102b4:	688c      	ldr	r4, [r1, #8]
 80102b6:	f104 3cff 	add.w	ip, r4, #4294967295
 80102ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80102be:	68cc      	ldr	r4, [r1, #12]
 80102c0:	f104 3cff 	add.w	ip, r4, #4294967295
 80102c4:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 80102c8:	690c      	ldr	r4, [r1, #16]
 80102ca:	f104 3cff 	add.w	ip, r4, #4294967295
 80102ce:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80102d2:	694c      	ldr	r4, [r1, #20]
 80102d4:	f104 3cff 	add.w	ip, r4, #4294967295
 80102d8:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 80102dc:	6989      	ldr	r1, [r1, #24]
 80102de:	3901      	subs	r1, #1
 80102e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80102e4:	4313      	orrs	r3, r2
 80102e6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80102e8:	2000      	movs	r0, #0
 80102ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102ee:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80102f0:	6883      	ldr	r3, [r0, #8]
 80102f2:	4a13      	ldr	r2, [pc, #76]	@ (8010340 <FMC_SDRAM_Timing_Init+0xa4>)
 80102f4:	401a      	ands	r2, r3
 80102f6:	68cb      	ldr	r3, [r1, #12]
 80102f8:	f103 3cff 	add.w	ip, r3, #4294967295
 80102fc:	694b      	ldr	r3, [r1, #20]
 80102fe:	3b01      	subs	r3, #1
 8010300:	051b      	lsls	r3, r3, #20
 8010302:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8010306:	431a      	orrs	r2, r3
 8010308:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801030a:	68c2      	ldr	r2, [r0, #12]
 801030c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8010310:	680b      	ldr	r3, [r1, #0]
 8010312:	3b01      	subs	r3, #1
 8010314:	684c      	ldr	r4, [r1, #4]
 8010316:	f104 3cff 	add.w	ip, r4, #4294967295
 801031a:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 801031e:	688c      	ldr	r4, [r1, #8]
 8010320:	f104 3cff 	add.w	ip, r4, #4294967295
 8010324:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8010328:	690c      	ldr	r4, [r1, #16]
 801032a:	f104 3cff 	add.w	ip, r4, #4294967295
 801032e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8010332:	6989      	ldr	r1, [r1, #24]
 8010334:	3901      	subs	r1, #1
 8010336:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801033a:	4313      	orrs	r3, r2
 801033c:	60c3      	str	r3, [r0, #12]
 801033e:	e7d3      	b.n	80102e8 <FMC_SDRAM_Timing_Init+0x4c>
 8010340:	ff0f0fff 	.word	0xff0f0fff

08010344 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010344:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8010346:	6903      	ldr	r3, [r0, #16]
 8010348:	4a09      	ldr	r2, [pc, #36]	@ (8010370 <FMC_SDRAM_SendCommand+0x2c>)
 801034a:	401a      	ands	r2, r3
 801034c:	680b      	ldr	r3, [r1, #0]
 801034e:	684c      	ldr	r4, [r1, #4]
 8010350:	4323      	orrs	r3, r4
 8010352:	688c      	ldr	r4, [r1, #8]
 8010354:	f104 3cff 	add.w	ip, r4, #4294967295
 8010358:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 801035c:	68c9      	ldr	r1, [r1, #12]
 801035e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8010362:	431a      	orrs	r2, r3
 8010364:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8010366:	2000      	movs	r0, #0
 8010368:	f85d 4b04 	ldr.w	r4, [sp], #4
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	ffc00000 	.word	0xffc00000

08010374 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8010374:	6942      	ldr	r2, [r0, #20]
 8010376:	4b03      	ldr	r3, [pc, #12]	@ (8010384 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8010378:	4013      	ands	r3, r2
 801037a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 801037e:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8010380:	2000      	movs	r0, #0
 8010382:	4770      	bx	lr
 8010384:	ffffc001 	.word	0xffffc001

08010388 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8010388:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 801038a:	f001 ff31 	bl	80121f0 <touchgfx_components_init>
    touchgfx_init();
 801038e:	f001 ff07 	bl	80121a0 <touchgfx_init>
}
 8010392:	bd08      	pop	{r3, pc}

08010394 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8010394:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8010396:	f001 ff2d 	bl	80121f4 <touchgfx_taskEntry>
}
 801039a:	bd08      	pop	{r3, pc}

0801039c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId MODE = 9;          // NanumBarunGothic_26_2bpp
    static const touchgfx::FontId KEYBOARD = 10;      // NanumBarunGothic_30_2bpp
    static const uint16_t NUMBER_OF_FONTS = 11;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801039c:	4a02      	ldr	r2, [pc, #8]	@ (80103a8 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 801039e:	6002      	str	r2, [r0, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 80103a0:	4a02      	ldr	r2, [pc, #8]	@ (80103ac <_ZN23ApplicationFontProviderD1Ev+0x10>)
 80103a2:	6002      	str	r2, [r0, #0]
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop
 80103a8:	080292e8 	.word	0x080292e8
 80103ac:	080292d4 	.word	0x080292d4

080103b0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80103b0:	b508      	push	{r3, lr}
    switch (typography)
 80103b2:	290b      	cmp	r1, #11
 80103b4:	d837      	bhi.n	8010426 <_ZN23ApplicationFontProvider7getFontEt+0x76>
 80103b6:	e8df f001 	tbb	[pc, r1]
 80103ba:	0a06      	.short	0x0a06
 80103bc:	1a16120e 	.word	0x1a16120e
 80103c0:	2a26221e 	.word	0x2a26221e
 80103c4:	322e      	.short	0x322e
    {
    case Typography::TYPOGRAPHY_00:
        // NanumBarunGothic_20_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80103c6:	f001 f899 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 80103ca:	6800      	ldr	r0, [r0, #0]
        // NanumBarunGothic_30_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[10]);
    default:
        return 0;
    }
}
 80103cc:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80103ce:	f001 f895 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 80103d2:	6840      	ldr	r0, [r0, #4]
 80103d4:	e7fa      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80103d6:	f001 f891 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 80103da:	6880      	ldr	r0, [r0, #8]
 80103dc:	e7f6      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80103de:	f001 f88d 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 80103e2:	68c0      	ldr	r0, [r0, #12]
 80103e4:	e7f2      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80103e6:	f001 f889 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 80103ea:	6900      	ldr	r0, [r0, #16]
 80103ec:	e7ee      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80103ee:	f001 f885 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 80103f2:	6940      	ldr	r0, [r0, #20]
 80103f4:	e7ea      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80103f6:	f001 f881 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 80103fa:	6980      	ldr	r0, [r0, #24]
 80103fc:	e7e6      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 80103fe:	f001 f87d 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 8010402:	69c0      	ldr	r0, [r0, #28]
 8010404:	e7e2      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8010406:	f001 f879 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 801040a:	6880      	ldr	r0, [r0, #8]
 801040c:	e7de      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[8]);
 801040e:	f001 f875 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 8010412:	6a00      	ldr	r0, [r0, #32]
 8010414:	e7da      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[9]);
 8010416:	f001 f871 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 801041a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801041c:	e7d6      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[10]);
 801041e:	f001 f86d 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 8010422:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8010424:	e7d2      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    switch (typography)
 8010426:	2000      	movs	r0, #0
 8010428:	e7d0      	b.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
	...

0801042c <_ZN23ApplicationFontProviderD0Ev>:
 801042c:	b510      	push	{r4, lr}
 801042e:	4604      	mov	r4, r0
 8010430:	4b04      	ldr	r3, [pc, #16]	@ (8010444 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 8010432:	6003      	str	r3, [r0, #0]
 8010434:	4b04      	ldr	r3, [pc, #16]	@ (8010448 <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 8010436:	6003      	str	r3, [r0, #0]
 8010438:	2104      	movs	r1, #4
 801043a:	f014 fbca 	bl	8024bd2 <_ZdlPvj>
 801043e:	4620      	mov	r0, r4
 8010440:	bd10      	pop	{r4, pc}
 8010442:	bf00      	nop
 8010444:	080292e8 	.word	0x080292e8
 8010448:	080292d4 	.word	0x080292d4

0801044c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 801044c:	b169      	cbz	r1, 801046a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 801044e:	b510      	push	{r4, lr}
 8010450:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8010452:	2300      	movs	r3, #0
 8010454:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8010456:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 801045a:	6803      	ldr	r3, [r0, #0]
 801045c:	689c      	ldr	r4, [r3, #8]
 801045e:	f10d 0303 	add.w	r3, sp, #3
 8010462:	aa01      	add	r2, sp, #4
 8010464:	47a0      	blx	r4
        return glyph;
    }
 8010466:	b002      	add	sp, #8
 8010468:	bd10      	pop	{r4, pc}
            return 0;
 801046a:	2000      	movs	r0, #0
    }
 801046c:	4770      	bx	lr

0801046e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 801046e:	89c0      	ldrh	r0, [r0, #14]
 8010470:	4770      	bx	lr

08010472 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8010472:	8a00      	ldrh	r0, [r0, #16]
 8010474:	4770      	bx	lr

08010476 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8010476:	88c0      	ldrh	r0, [r0, #6]
 8010478:	4770      	bx	lr

0801047a <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 801047a:	8880      	ldrh	r0, [r0, #4]
 801047c:	4770      	bx	lr

0801047e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 801047e:	7a80      	ldrb	r0, [r0, #10]
    }
 8010480:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8010484:	4770      	bx	lr

08010486 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8010486:	7a80      	ldrb	r0, [r0, #10]
    }
 8010488:	09c0      	lsrs	r0, r0, #7
 801048a:	4770      	bx	lr

0801048c <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 801048c:	2000      	movs	r0, #0
 801048e:	4770      	bx	lr

08010490 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8010490:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010498 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	00000000 	.word	0x00000000

0801049c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 801049c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801049e:	4770      	bx	lr

080104a0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80104a0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80104a2:	4770      	bx	lr

080104a4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80104a4:	4a03      	ldr	r2, [pc, #12]	@ (80104b4 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 80104a6:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80104a8:	4a03      	ldr	r2, [pc, #12]	@ (80104b8 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 80104aa:	6002      	str	r2, [r0, #0]
    {
 80104ac:	4a03      	ldr	r2, [pc, #12]	@ (80104bc <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 80104ae:	6002      	str	r2, [r0, #0]
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	080292fc 	.word	0x080292fc
 80104b8:	0802a50c 	.word	0x0802a50c
 80104bc:	08029a60 	.word	0x08029a60

080104c0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80104c0:	69c2      	ldr	r2, [r0, #28]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80104c2:	888b      	ldrh	r3, [r1, #4]
 80104c4:	0adb      	lsrs	r3, r3, #11
 80104c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80104ca:	680b      	ldr	r3, [r1, #0]
}
 80104cc:	4418      	add	r0, r3
 80104ce:	4770      	bx	lr

080104d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 80104d0:	4694      	mov	ip, r2
 80104d2:	b1e2      	cbz	r2, 801050e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
 80104d4:	7b13      	ldrb	r3, [r2, #12]
 80104d6:	b1e3      	cbz	r3, 8010512 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80104d8:	6a02      	ldr	r2, [r0, #32]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80104da:	f89c 000d 	ldrb.w	r0, [ip, #13]
 80104de:	0200      	lsls	r0, r0, #8
 80104e0:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
 80104e4:	f89c c00b 	ldrb.w	ip, [ip, #11]
 80104e8:	ea40 000c 	orr.w	r0, r0, ip
 80104ec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80104f0:	b15b      	cbz	r3, 801050a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80104f2:	8810      	ldrh	r0, [r2, #0]
 80104f4:	4288      	cmp	r0, r1
 80104f6:	d005      	beq.n	8010504 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x34>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 80104f8:	4288      	cmp	r0, r1
 80104fa:	d80c      	bhi.n	8010516 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x46>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80104fc:	3b01      	subs	r3, #1
 80104fe:	b29b      	uxth	r3, r3
 8010500:	3204      	adds	r2, #4
 8010502:	e7f5      	b.n	80104f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
            return kerndata->distance;
 8010504:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8010508:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 801050a:	2000      	movs	r0, #0
 801050c:	4770      	bx	lr
        return 0;
 801050e:	2000      	movs	r0, #0
 8010510:	4770      	bx	lr
 8010512:	2000      	movs	r0, #0
 8010514:	4770      	bx	lr
    return 0;
 8010516:	2000      	movs	r0, #0
}
 8010518:	4770      	bx	lr
	...

0801051c <_ZN8touchgfx13GeneratedFontD0Ev>:
 801051c:	b510      	push	{r4, lr}
 801051e:	4604      	mov	r4, r0
 8010520:	4b05      	ldr	r3, [pc, #20]	@ (8010538 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 8010522:	6003      	str	r3, [r0, #0]
 8010524:	4b05      	ldr	r3, [pc, #20]	@ (801053c <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 8010526:	6003      	str	r3, [r0, #0]
    {
 8010528:	4b05      	ldr	r3, [pc, #20]	@ (8010540 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 801052a:	6003      	str	r3, [r0, #0]
 801052c:	212c      	movs	r1, #44	@ 0x2c
 801052e:	f014 fb50 	bl	8024bd2 <_ZdlPvj>
 8010532:	4620      	mov	r0, r4
 8010534:	bd10      	pop	{r4, pc}
 8010536:	bf00      	nop
 8010538:	080292fc 	.word	0x080292fc
 801053c:	0802a50c 	.word	0x0802a50c
 8010540:	08029a60 	.word	0x08029a60

08010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8010544:	b530      	push	{r4, r5, lr}
 8010546:	b08b      	sub	sp, #44	@ 0x2c
 8010548:	4604      	mov	r4, r0
      arabicTable(formsTable)
 801054a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 801054e:	9508      	str	r5, [sp, #32]
 8010550:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8010554:	9507      	str	r5, [sp, #28]
 8010556:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 801055a:	9506      	str	r5, [sp, #24]
 801055c:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8010560:	9505      	str	r5, [sp, #20]
 8010562:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8010566:	9504      	str	r5, [sp, #16]
 8010568:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 801056c:	9503      	str	r5, [sp, #12]
 801056e:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8010572:	9502      	str	r5, [sp, #8]
 8010574:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8010578:	9501      	str	r5, [sp, #4]
 801057a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801057e:	9500      	str	r5, [sp, #0]
 8010580:	f005 fb56 	bl	8015c30 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8010584:	4b06      	ldr	r3, [pc, #24]	@ (80105a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8010586:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8010588:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801058a:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 801058c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801058e:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8010590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010592:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8010594:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010596:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8010598:	4620      	mov	r0, r4
 801059a:	b00b      	add	sp, #44	@ 0x2c
 801059c:	bd30      	pop	{r4, r5, pc}
 801059e:	bf00      	nop
 80105a0:	080292fc 	.word	0x080292fc

080105a4 <__tcf_0>:
 80105a4:	4b03      	ldr	r3, [pc, #12]	@ (80105b4 <__tcf_0+0x10>)
 80105a6:	4a04      	ldr	r2, [pc, #16]	@ (80105b8 <__tcf_0+0x14>)
 80105a8:	601a      	str	r2, [r3, #0]
 80105aa:	4a04      	ldr	r2, [pc, #16]	@ (80105bc <__tcf_0+0x18>)
 80105ac:	601a      	str	r2, [r3, #0]
 80105ae:	4a04      	ldr	r2, [pc, #16]	@ (80105c0 <__tcf_0+0x1c>)
 80105b0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_NanumBarunGothic_17_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_NanumBarunGothic_17_2bpp();

touchgfx::GeneratedFont& getFont_NanumBarunGothic_17_2bpp()
{
    static touchgfx::GeneratedFont NanumBarunGothic_17_2bpp(glyphs_NanumBarunGothic_17_2bpp, 16159, 22, 17, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_17_2bpp, kerning_NanumBarunGothic_17_2bpp, 63, 0, 0, 0);
 80105b2:	4770      	bx	lr
 80105b4:	24002f54 	.word	0x24002f54
 80105b8:	080292fc 	.word	0x080292fc
 80105bc:	0802a50c 	.word	0x0802a50c
 80105c0:	08029a60 	.word	0x08029a60

080105c4 <_Z32getFont_NanumBarunGothic_17_2bppv>:
 80105c4:	4b1a      	ldr	r3, [pc, #104]	@ (8010630 <_Z32getFont_NanumBarunGothic_17_2bppv+0x6c>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f3bf 8f5b 	dmb	ish
 80105cc:	f013 0f01 	tst.w	r3, #1
 80105d0:	d001      	beq.n	80105d6 <_Z32getFont_NanumBarunGothic_17_2bppv+0x12>
    return NanumBarunGothic_17_2bpp;
}
 80105d2:	4818      	ldr	r0, [pc, #96]	@ (8010634 <_Z32getFont_NanumBarunGothic_17_2bppv+0x70>)
 80105d4:	4770      	bx	lr
{
 80105d6:	b500      	push	{lr}
 80105d8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont NanumBarunGothic_17_2bpp(glyphs_NanumBarunGothic_17_2bpp, 16159, 22, 17, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_17_2bpp, kerning_NanumBarunGothic_17_2bpp, 63, 0, 0, 0);
 80105da:	4815      	ldr	r0, [pc, #84]	@ (8010630 <_Z32getFont_NanumBarunGothic_17_2bppv+0x6c>)
 80105dc:	f014 fafb 	bl	8024bd6 <__cxa_guard_acquire>
 80105e0:	b918      	cbnz	r0, 80105ea <_Z32getFont_NanumBarunGothic_17_2bppv+0x26>
}
 80105e2:	4814      	ldr	r0, [pc, #80]	@ (8010634 <_Z32getFont_NanumBarunGothic_17_2bppv+0x70>)
 80105e4:	b00f      	add	sp, #60	@ 0x3c
 80105e6:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont NanumBarunGothic_17_2bpp(glyphs_NanumBarunGothic_17_2bpp, 16159, 22, 17, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_17_2bpp, kerning_NanumBarunGothic_17_2bpp, 63, 0, 0, 0);
 80105ea:	2300      	movs	r3, #0
 80105ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80105ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80105f2:	223f      	movs	r2, #63	@ 0x3f
 80105f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80105f6:	4a10      	ldr	r2, [pc, #64]	@ (8010638 <_Z32getFont_NanumBarunGothic_17_2bppv+0x74>)
 80105f8:	9208      	str	r2, [sp, #32]
 80105fa:	4a10      	ldr	r2, [pc, #64]	@ (801063c <_Z32getFont_NanumBarunGothic_17_2bppv+0x78>)
 80105fc:	9207      	str	r2, [sp, #28]
 80105fe:	2201      	movs	r2, #1
 8010600:	9206      	str	r2, [sp, #24]
 8010602:	9205      	str	r2, [sp, #20]
 8010604:	9304      	str	r3, [sp, #16]
 8010606:	2202      	movs	r2, #2
 8010608:	9203      	str	r2, [sp, #12]
 801060a:	9302      	str	r3, [sp, #8]
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	2311      	movs	r3, #17
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	2316      	movs	r3, #22
 8010614:	f643 721f 	movw	r2, #16159	@ 0x3f1f
 8010618:	4909      	ldr	r1, [pc, #36]	@ (8010640 <_Z32getFont_NanumBarunGothic_17_2bppv+0x7c>)
 801061a:	4806      	ldr	r0, [pc, #24]	@ (8010634 <_Z32getFont_NanumBarunGothic_17_2bppv+0x70>)
 801061c:	f7ff ff92 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010620:	4808      	ldr	r0, [pc, #32]	@ (8010644 <_Z32getFont_NanumBarunGothic_17_2bppv+0x80>)
 8010622:	f014 fb23 	bl	8024c6c <atexit>
 8010626:	4802      	ldr	r0, [pc, #8]	@ (8010630 <_Z32getFont_NanumBarunGothic_17_2bppv+0x6c>)
 8010628:	f014 fae1 	bl	8024bee <__cxa_guard_release>
 801062c:	e7d9      	b.n	80105e2 <_Z32getFont_NanumBarunGothic_17_2bppv+0x1e>
 801062e:	bf00      	nop
 8010630:	24002f50 	.word	0x24002f50
 8010634:	24002f54 	.word	0x24002f54
 8010638:	0802ac78 	.word	0x0802ac78
 801063c:	0802b8e4 	.word	0x0802b8e4
 8010640:	908c9a90 	.word	0x908c9a90
 8010644:	080105a5 	.word	0x080105a5

08010648 <__tcf_0>:
 8010648:	4b03      	ldr	r3, [pc, #12]	@ (8010658 <__tcf_0+0x10>)
 801064a:	4a04      	ldr	r2, [pc, #16]	@ (801065c <__tcf_0+0x14>)
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	4a04      	ldr	r2, [pc, #16]	@ (8010660 <__tcf_0+0x18>)
 8010650:	601a      	str	r2, [r3, #0]
 8010652:	4a04      	ldr	r2, [pc, #16]	@ (8010664 <__tcf_0+0x1c>)
 8010654:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_NanumBarunGothic_20_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_NanumBarunGothic_20_2bpp();

touchgfx::GeneratedFont& getFont_NanumBarunGothic_20_2bpp()
{
    static touchgfx::GeneratedFont NanumBarunGothic_20_2bpp(glyphs_NanumBarunGothic_20_2bpp, 16159, 26, 20, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_20_2bpp, kerning_NanumBarunGothic_20_2bpp, 63, 0, 0, 0);
 8010656:	4770      	bx	lr
 8010658:	24002f84 	.word	0x24002f84
 801065c:	080292fc 	.word	0x080292fc
 8010660:	0802a50c 	.word	0x0802a50c
 8010664:	08029a60 	.word	0x08029a60

08010668 <_Z32getFont_NanumBarunGothic_20_2bppv>:
 8010668:	4b1a      	ldr	r3, [pc, #104]	@ (80106d4 <_Z32getFont_NanumBarunGothic_20_2bppv+0x6c>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f3bf 8f5b 	dmb	ish
 8010670:	f013 0f01 	tst.w	r3, #1
 8010674:	d001      	beq.n	801067a <_Z32getFont_NanumBarunGothic_20_2bppv+0x12>
    return NanumBarunGothic_20_2bpp;
}
 8010676:	4818      	ldr	r0, [pc, #96]	@ (80106d8 <_Z32getFont_NanumBarunGothic_20_2bppv+0x70>)
 8010678:	4770      	bx	lr
{
 801067a:	b500      	push	{lr}
 801067c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont NanumBarunGothic_20_2bpp(glyphs_NanumBarunGothic_20_2bpp, 16159, 26, 20, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_20_2bpp, kerning_NanumBarunGothic_20_2bpp, 63, 0, 0, 0);
 801067e:	4815      	ldr	r0, [pc, #84]	@ (80106d4 <_Z32getFont_NanumBarunGothic_20_2bppv+0x6c>)
 8010680:	f014 faa9 	bl	8024bd6 <__cxa_guard_acquire>
 8010684:	b918      	cbnz	r0, 801068e <_Z32getFont_NanumBarunGothic_20_2bppv+0x26>
}
 8010686:	4814      	ldr	r0, [pc, #80]	@ (80106d8 <_Z32getFont_NanumBarunGothic_20_2bppv+0x70>)
 8010688:	b00f      	add	sp, #60	@ 0x3c
 801068a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont NanumBarunGothic_20_2bpp(glyphs_NanumBarunGothic_20_2bpp, 16159, 26, 20, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_20_2bpp, kerning_NanumBarunGothic_20_2bpp, 63, 0, 0, 0);
 801068e:	2300      	movs	r3, #0
 8010690:	930c      	str	r3, [sp, #48]	@ 0x30
 8010692:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010694:	930a      	str	r3, [sp, #40]	@ 0x28
 8010696:	223f      	movs	r2, #63	@ 0x3f
 8010698:	9209      	str	r2, [sp, #36]	@ 0x24
 801069a:	4a10      	ldr	r2, [pc, #64]	@ (80106dc <_Z32getFont_NanumBarunGothic_20_2bppv+0x74>)
 801069c:	9208      	str	r2, [sp, #32]
 801069e:	4a10      	ldr	r2, [pc, #64]	@ (80106e0 <_Z32getFont_NanumBarunGothic_20_2bppv+0x78>)
 80106a0:	9207      	str	r2, [sp, #28]
 80106a2:	2201      	movs	r2, #1
 80106a4:	9206      	str	r2, [sp, #24]
 80106a6:	9205      	str	r2, [sp, #20]
 80106a8:	9304      	str	r3, [sp, #16]
 80106aa:	2202      	movs	r2, #2
 80106ac:	9203      	str	r2, [sp, #12]
 80106ae:	9302      	str	r3, [sp, #8]
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	2314      	movs	r3, #20
 80106b4:	9300      	str	r3, [sp, #0]
 80106b6:	231a      	movs	r3, #26
 80106b8:	f643 721f 	movw	r2, #16159	@ 0x3f1f
 80106bc:	4909      	ldr	r1, [pc, #36]	@ (80106e4 <_Z32getFont_NanumBarunGothic_20_2bppv+0x7c>)
 80106be:	4806      	ldr	r0, [pc, #24]	@ (80106d8 <_Z32getFont_NanumBarunGothic_20_2bppv+0x70>)
 80106c0:	f7ff ff40 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80106c4:	4808      	ldr	r0, [pc, #32]	@ (80106e8 <_Z32getFont_NanumBarunGothic_20_2bppv+0x80>)
 80106c6:	f014 fad1 	bl	8024c6c <atexit>
 80106ca:	4802      	ldr	r0, [pc, #8]	@ (80106d4 <_Z32getFont_NanumBarunGothic_20_2bppv+0x6c>)
 80106cc:	f014 fa8f 	bl	8024bee <__cxa_guard_release>
 80106d0:	e7d9      	b.n	8010686 <_Z32getFont_NanumBarunGothic_20_2bppv+0x1e>
 80106d2:	bf00      	nop
 80106d4:	24002f80 	.word	0x24002f80
 80106d8:	24002f84 	.word	0x24002f84
 80106dc:	0802ad4c 	.word	0x0802ad4c
 80106e0:	0802b950 	.word	0x0802b950
 80106e4:	90900e44 	.word	0x90900e44
 80106e8:	08010649 	.word	0x08010649

080106ec <__tcf_0>:
 80106ec:	4b03      	ldr	r3, [pc, #12]	@ (80106fc <__tcf_0+0x10>)
 80106ee:	4a04      	ldr	r2, [pc, #16]	@ (8010700 <__tcf_0+0x14>)
 80106f0:	601a      	str	r2, [r3, #0]
 80106f2:	4a04      	ldr	r2, [pc, #16]	@ (8010704 <__tcf_0+0x18>)
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	4a04      	ldr	r2, [pc, #16]	@ (8010708 <__tcf_0+0x1c>)
 80106f8:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_NanumBarunGothic_26_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_NanumBarunGothic_26_2bpp();

touchgfx::GeneratedFont& getFont_NanumBarunGothic_26_2bpp()
{
    static touchgfx::GeneratedFont NanumBarunGothic_26_2bpp(glyphs_NanumBarunGothic_26_2bpp, 154, 34, 26, 0, 0, 2, 0, 0, 1, unicodes_NanumBarunGothic_26_2bpp, kerning_NanumBarunGothic_26_2bpp, 0, 0, 0, 0);
 80106fa:	4770      	bx	lr
 80106fc:	24002fb4 	.word	0x24002fb4
 8010700:	080292fc 	.word	0x080292fc
 8010704:	0802a50c 	.word	0x0802a50c
 8010708:	08029a60 	.word	0x08029a60

0801070c <_Z32getFont_NanumBarunGothic_26_2bppv>:
 801070c:	4b19      	ldr	r3, [pc, #100]	@ (8010774 <_Z32getFont_NanumBarunGothic_26_2bppv+0x68>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f3bf 8f5b 	dmb	ish
 8010714:	f013 0f01 	tst.w	r3, #1
 8010718:	d001      	beq.n	801071e <_Z32getFont_NanumBarunGothic_26_2bppv+0x12>
    return NanumBarunGothic_26_2bpp;
}
 801071a:	4817      	ldr	r0, [pc, #92]	@ (8010778 <_Z32getFont_NanumBarunGothic_26_2bppv+0x6c>)
 801071c:	4770      	bx	lr
{
 801071e:	b500      	push	{lr}
 8010720:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont NanumBarunGothic_26_2bpp(glyphs_NanumBarunGothic_26_2bpp, 154, 34, 26, 0, 0, 2, 0, 0, 1, unicodes_NanumBarunGothic_26_2bpp, kerning_NanumBarunGothic_26_2bpp, 0, 0, 0, 0);
 8010722:	4814      	ldr	r0, [pc, #80]	@ (8010774 <_Z32getFont_NanumBarunGothic_26_2bppv+0x68>)
 8010724:	f014 fa57 	bl	8024bd6 <__cxa_guard_acquire>
 8010728:	b918      	cbnz	r0, 8010732 <_Z32getFont_NanumBarunGothic_26_2bppv+0x26>
}
 801072a:	4813      	ldr	r0, [pc, #76]	@ (8010778 <_Z32getFont_NanumBarunGothic_26_2bppv+0x6c>)
 801072c:	b00f      	add	sp, #60	@ 0x3c
 801072e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont NanumBarunGothic_26_2bpp(glyphs_NanumBarunGothic_26_2bpp, 154, 34, 26, 0, 0, 2, 0, 0, 1, unicodes_NanumBarunGothic_26_2bpp, kerning_NanumBarunGothic_26_2bpp, 0, 0, 0, 0);
 8010732:	2300      	movs	r3, #0
 8010734:	930c      	str	r3, [sp, #48]	@ 0x30
 8010736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010738:	930a      	str	r3, [sp, #40]	@ 0x28
 801073a:	9309      	str	r3, [sp, #36]	@ 0x24
 801073c:	4a0f      	ldr	r2, [pc, #60]	@ (801077c <_Z32getFont_NanumBarunGothic_26_2bppv+0x70>)
 801073e:	9208      	str	r2, [sp, #32]
 8010740:	4a0f      	ldr	r2, [pc, #60]	@ (8010780 <_Z32getFont_NanumBarunGothic_26_2bppv+0x74>)
 8010742:	9207      	str	r2, [sp, #28]
 8010744:	2201      	movs	r2, #1
 8010746:	9206      	str	r2, [sp, #24]
 8010748:	9305      	str	r3, [sp, #20]
 801074a:	9304      	str	r3, [sp, #16]
 801074c:	2202      	movs	r2, #2
 801074e:	9203      	str	r2, [sp, #12]
 8010750:	9302      	str	r3, [sp, #8]
 8010752:	9301      	str	r3, [sp, #4]
 8010754:	231a      	movs	r3, #26
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	2322      	movs	r3, #34	@ 0x22
 801075a:	229a      	movs	r2, #154	@ 0x9a
 801075c:	4909      	ldr	r1, [pc, #36]	@ (8010784 <_Z32getFont_NanumBarunGothic_26_2bppv+0x78>)
 801075e:	4806      	ldr	r0, [pc, #24]	@ (8010778 <_Z32getFont_NanumBarunGothic_26_2bppv+0x6c>)
 8010760:	f7ff fef0 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010764:	4808      	ldr	r0, [pc, #32]	@ (8010788 <_Z32getFont_NanumBarunGothic_26_2bppv+0x7c>)
 8010766:	f014 fa81 	bl	8024c6c <atexit>
 801076a:	4802      	ldr	r0, [pc, #8]	@ (8010774 <_Z32getFont_NanumBarunGothic_26_2bppv+0x68>)
 801076c:	f014 fa3f 	bl	8024bee <__cxa_guard_release>
 8010770:	e7db      	b.n	801072a <_Z32getFont_NanumBarunGothic_26_2bppv+0x1e>
 8010772:	bf00      	nop
 8010774:	24002fb0 	.word	0x24002fb0
 8010778:	24002fb4 	.word	0x24002fb4
 801077c:	0802ae90 	.word	0x0802ae90
 8010780:	0802b9bc 	.word	0x0802b9bc
 8010784:	909381f8 	.word	0x909381f8
 8010788:	080106ed 	.word	0x080106ed

0801078c <__tcf_0>:
 801078c:	4b03      	ldr	r3, [pc, #12]	@ (801079c <__tcf_0+0x10>)
 801078e:	4a04      	ldr	r2, [pc, #16]	@ (80107a0 <__tcf_0+0x14>)
 8010790:	601a      	str	r2, [r3, #0]
 8010792:	4a04      	ldr	r2, [pc, #16]	@ (80107a4 <__tcf_0+0x18>)
 8010794:	601a      	str	r2, [r3, #0]
 8010796:	4a04      	ldr	r2, [pc, #16]	@ (80107a8 <__tcf_0+0x1c>)
 8010798:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_NanumBarunGothic_30_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_NanumBarunGothic_30_2bpp();

touchgfx::GeneratedFont& getFont_NanumBarunGothic_30_2bpp()
{
    static touchgfx::GeneratedFont NanumBarunGothic_30_2bpp(glyphs_NanumBarunGothic_30_2bpp, 16160, 39, 30, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_30_2bpp, kerning_NanumBarunGothic_30_2bpp, 63, 0, 0, 0);
 801079a:	4770      	bx	lr
 801079c:	24002fe4 	.word	0x24002fe4
 80107a0:	080292fc 	.word	0x080292fc
 80107a4:	0802a50c 	.word	0x0802a50c
 80107a8:	08029a60 	.word	0x08029a60

080107ac <_Z32getFont_NanumBarunGothic_30_2bppv>:
 80107ac:	4b1a      	ldr	r3, [pc, #104]	@ (8010818 <_Z32getFont_NanumBarunGothic_30_2bppv+0x6c>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f3bf 8f5b 	dmb	ish
 80107b4:	f013 0f01 	tst.w	r3, #1
 80107b8:	d001      	beq.n	80107be <_Z32getFont_NanumBarunGothic_30_2bppv+0x12>
    return NanumBarunGothic_30_2bpp;
}
 80107ba:	4818      	ldr	r0, [pc, #96]	@ (801081c <_Z32getFont_NanumBarunGothic_30_2bppv+0x70>)
 80107bc:	4770      	bx	lr
{
 80107be:	b500      	push	{lr}
 80107c0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont NanumBarunGothic_30_2bpp(glyphs_NanumBarunGothic_30_2bpp, 16160, 39, 30, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_30_2bpp, kerning_NanumBarunGothic_30_2bpp, 63, 0, 0, 0);
 80107c2:	4815      	ldr	r0, [pc, #84]	@ (8010818 <_Z32getFont_NanumBarunGothic_30_2bppv+0x6c>)
 80107c4:	f014 fa07 	bl	8024bd6 <__cxa_guard_acquire>
 80107c8:	b918      	cbnz	r0, 80107d2 <_Z32getFont_NanumBarunGothic_30_2bppv+0x26>
}
 80107ca:	4814      	ldr	r0, [pc, #80]	@ (801081c <_Z32getFont_NanumBarunGothic_30_2bppv+0x70>)
 80107cc:	b00f      	add	sp, #60	@ 0x3c
 80107ce:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont NanumBarunGothic_30_2bpp(glyphs_NanumBarunGothic_30_2bpp, 16160, 39, 30, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_30_2bpp, kerning_NanumBarunGothic_30_2bpp, 63, 0, 0, 0);
 80107d2:	2300      	movs	r3, #0
 80107d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80107d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80107da:	223f      	movs	r2, #63	@ 0x3f
 80107dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80107de:	4a10      	ldr	r2, [pc, #64]	@ (8010820 <_Z32getFont_NanumBarunGothic_30_2bppv+0x74>)
 80107e0:	9208      	str	r2, [sp, #32]
 80107e2:	4a10      	ldr	r2, [pc, #64]	@ (8010824 <_Z32getFont_NanumBarunGothic_30_2bppv+0x78>)
 80107e4:	9207      	str	r2, [sp, #28]
 80107e6:	2201      	movs	r2, #1
 80107e8:	9206      	str	r2, [sp, #24]
 80107ea:	9205      	str	r2, [sp, #20]
 80107ec:	9304      	str	r3, [sp, #16]
 80107ee:	2202      	movs	r2, #2
 80107f0:	9203      	str	r2, [sp, #12]
 80107f2:	9302      	str	r3, [sp, #8]
 80107f4:	9301      	str	r3, [sp, #4]
 80107f6:	231e      	movs	r3, #30
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	2327      	movs	r3, #39	@ 0x27
 80107fc:	f643 7220 	movw	r2, #16160	@ 0x3f20
 8010800:	4909      	ldr	r1, [pc, #36]	@ (8010828 <_Z32getFont_NanumBarunGothic_30_2bppv+0x7c>)
 8010802:	4806      	ldr	r0, [pc, #24]	@ (801081c <_Z32getFont_NanumBarunGothic_30_2bppv+0x70>)
 8010804:	f7ff fe9e 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010808:	4808      	ldr	r0, [pc, #32]	@ (801082c <_Z32getFont_NanumBarunGothic_30_2bppv+0x80>)
 801080a:	f014 fa2f 	bl	8024c6c <atexit>
 801080e:	4802      	ldr	r0, [pc, #8]	@ (8010818 <_Z32getFont_NanumBarunGothic_30_2bppv+0x6c>)
 8010810:	f014 f9ed 	bl	8024bee <__cxa_guard_release>
 8010814:	e7d9      	b.n	80107ca <_Z32getFont_NanumBarunGothic_30_2bppv+0x1e>
 8010816:	bf00      	nop
 8010818:	24002fe0 	.word	0x24002fe0
 801081c:	24002fe4 	.word	0x24002fe4
 8010820:	0802b0b4 	.word	0x0802b0b4
 8010824:	0802ba28 	.word	0x0802ba28
 8010828:	90938a64 	.word	0x90938a64
 801082c:	0801078d 	.word	0x0801078d

08010830 <__tcf_0>:
 8010830:	4b03      	ldr	r3, [pc, #12]	@ (8010840 <__tcf_0+0x10>)
 8010832:	4a04      	ldr	r2, [pc, #16]	@ (8010844 <__tcf_0+0x14>)
 8010834:	601a      	str	r2, [r3, #0]
 8010836:	4a04      	ldr	r2, [pc, #16]	@ (8010848 <__tcf_0+0x18>)
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	4a04      	ldr	r2, [pc, #16]	@ (801084c <__tcf_0+0x1c>)
 801083c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_NanumBarunGothic_38_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_NanumBarunGothic_38_2bpp();

touchgfx::GeneratedFont& getFont_NanumBarunGothic_38_2bpp()
{
    static touchgfx::GeneratedFont NanumBarunGothic_38_2bpp(glyphs_NanumBarunGothic_38_2bpp, 16159, 49, 38, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_38_2bpp, kerning_NanumBarunGothic_38_2bpp, 63, 0, 0, 0);
 801083e:	4770      	bx	lr
 8010840:	24003014 	.word	0x24003014
 8010844:	080292fc 	.word	0x080292fc
 8010848:	0802a50c 	.word	0x0802a50c
 801084c:	08029a60 	.word	0x08029a60

08010850 <_Z32getFont_NanumBarunGothic_38_2bppv>:
 8010850:	4b1a      	ldr	r3, [pc, #104]	@ (80108bc <_Z32getFont_NanumBarunGothic_38_2bppv+0x6c>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f3bf 8f5b 	dmb	ish
 8010858:	f013 0f01 	tst.w	r3, #1
 801085c:	d001      	beq.n	8010862 <_Z32getFont_NanumBarunGothic_38_2bppv+0x12>
    return NanumBarunGothic_38_2bpp;
}
 801085e:	4818      	ldr	r0, [pc, #96]	@ (80108c0 <_Z32getFont_NanumBarunGothic_38_2bppv+0x70>)
 8010860:	4770      	bx	lr
{
 8010862:	b500      	push	{lr}
 8010864:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont NanumBarunGothic_38_2bpp(glyphs_NanumBarunGothic_38_2bpp, 16159, 49, 38, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_38_2bpp, kerning_NanumBarunGothic_38_2bpp, 63, 0, 0, 0);
 8010866:	4815      	ldr	r0, [pc, #84]	@ (80108bc <_Z32getFont_NanumBarunGothic_38_2bppv+0x6c>)
 8010868:	f014 f9b5 	bl	8024bd6 <__cxa_guard_acquire>
 801086c:	b918      	cbnz	r0, 8010876 <_Z32getFont_NanumBarunGothic_38_2bppv+0x26>
}
 801086e:	4814      	ldr	r0, [pc, #80]	@ (80108c0 <_Z32getFont_NanumBarunGothic_38_2bppv+0x70>)
 8010870:	b00f      	add	sp, #60	@ 0x3c
 8010872:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont NanumBarunGothic_38_2bpp(glyphs_NanumBarunGothic_38_2bpp, 16159, 49, 38, 0, 0, 2, 0, 1, 1, unicodes_NanumBarunGothic_38_2bpp, kerning_NanumBarunGothic_38_2bpp, 63, 0, 0, 0);
 8010876:	2300      	movs	r3, #0
 8010878:	930c      	str	r3, [sp, #48]	@ 0x30
 801087a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801087c:	930a      	str	r3, [sp, #40]	@ 0x28
 801087e:	223f      	movs	r2, #63	@ 0x3f
 8010880:	9209      	str	r2, [sp, #36]	@ 0x24
 8010882:	4a10      	ldr	r2, [pc, #64]	@ (80108c4 <_Z32getFont_NanumBarunGothic_38_2bppv+0x74>)
 8010884:	9208      	str	r2, [sp, #32]
 8010886:	4a10      	ldr	r2, [pc, #64]	@ (80108c8 <_Z32getFont_NanumBarunGothic_38_2bppv+0x78>)
 8010888:	9207      	str	r2, [sp, #28]
 801088a:	2201      	movs	r2, #1
 801088c:	9206      	str	r2, [sp, #24]
 801088e:	9205      	str	r2, [sp, #20]
 8010890:	9304      	str	r3, [sp, #16]
 8010892:	2202      	movs	r2, #2
 8010894:	9203      	str	r2, [sp, #12]
 8010896:	9302      	str	r3, [sp, #8]
 8010898:	9301      	str	r3, [sp, #4]
 801089a:	2326      	movs	r3, #38	@ 0x26
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	2331      	movs	r3, #49	@ 0x31
 80108a0:	f643 721f 	movw	r2, #16159	@ 0x3f1f
 80108a4:	4909      	ldr	r1, [pc, #36]	@ (80108cc <_Z32getFont_NanumBarunGothic_38_2bppv+0x7c>)
 80108a6:	4806      	ldr	r0, [pc, #24]	@ (80108c0 <_Z32getFont_NanumBarunGothic_38_2bppv+0x70>)
 80108a8:	f7ff fe4c 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80108ac:	4808      	ldr	r0, [pc, #32]	@ (80108d0 <_Z32getFont_NanumBarunGothic_38_2bppv+0x80>)
 80108ae:	f014 f9dd 	bl	8024c6c <atexit>
 80108b2:	4802      	ldr	r0, [pc, #8]	@ (80108bc <_Z32getFont_NanumBarunGothic_38_2bppv+0x6c>)
 80108b4:	f014 f99b 	bl	8024bee <__cxa_guard_release>
 80108b8:	e7d9      	b.n	801086e <_Z32getFont_NanumBarunGothic_38_2bppv+0x1e>
 80108ba:	bf00      	nop
 80108bc:	24003010 	.word	0x24003010
 80108c0:	24003014 	.word	0x24003014
 80108c4:	0802b4ac 	.word	0x0802b4ac
 80108c8:	0802ba94 	.word	0x0802ba94
 80108cc:	9096fe24 	.word	0x9096fe24
 80108d0:	08010831 	.word	0x08010831

080108d4 <__tcf_0>:
 80108d4:	4b03      	ldr	r3, [pc, #12]	@ (80108e4 <__tcf_0+0x10>)
 80108d6:	4a04      	ldr	r2, [pc, #16]	@ (80108e8 <__tcf_0+0x14>)
 80108d8:	601a      	str	r2, [r3, #0]
 80108da:	4a04      	ldr	r2, [pc, #16]	@ (80108ec <__tcf_0+0x18>)
 80108dc:	601a      	str	r2, [r3, #0]
 80108de:	4a04      	ldr	r2, [pc, #16]	@ (80108f0 <__tcf_0+0x1c>)
 80108e0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_malgun_18_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_malgun_18_2bpp();

touchgfx::GeneratedFont& getFont_malgun_18_2bpp()
{
    static touchgfx::GeneratedFont malgun_18_2bpp(glyphs_malgun_18_2bpp, 2, 18, 18, 0, 0, 2, 0, 0, 0, unicodes_malgun_18_2bpp, kerning_malgun_18_2bpp, 63, 0, 0, 0);
 80108e2:	4770      	bx	lr
 80108e4:	24003044 	.word	0x24003044
 80108e8:	080292fc 	.word	0x080292fc
 80108ec:	0802a50c 	.word	0x0802a50c
 80108f0:	08029a60 	.word	0x08029a60

080108f4 <_Z22getFont_malgun_18_2bppv>:
 80108f4:	4b18      	ldr	r3, [pc, #96]	@ (8010958 <_Z22getFont_malgun_18_2bppv+0x64>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f3bf 8f5b 	dmb	ish
 80108fc:	f013 0f01 	tst.w	r3, #1
 8010900:	d001      	beq.n	8010906 <_Z22getFont_malgun_18_2bppv+0x12>
    return malgun_18_2bpp;
}
 8010902:	4816      	ldr	r0, [pc, #88]	@ (801095c <_Z22getFont_malgun_18_2bppv+0x68>)
 8010904:	4770      	bx	lr
{
 8010906:	b500      	push	{lr}
 8010908:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont malgun_18_2bpp(glyphs_malgun_18_2bpp, 2, 18, 18, 0, 0, 2, 0, 0, 0, unicodes_malgun_18_2bpp, kerning_malgun_18_2bpp, 63, 0, 0, 0);
 801090a:	4813      	ldr	r0, [pc, #76]	@ (8010958 <_Z22getFont_malgun_18_2bppv+0x64>)
 801090c:	f014 f963 	bl	8024bd6 <__cxa_guard_acquire>
 8010910:	b918      	cbnz	r0, 801091a <_Z22getFont_malgun_18_2bppv+0x26>
}
 8010912:	4812      	ldr	r0, [pc, #72]	@ (801095c <_Z22getFont_malgun_18_2bppv+0x68>)
 8010914:	b00f      	add	sp, #60	@ 0x3c
 8010916:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont malgun_18_2bpp(glyphs_malgun_18_2bpp, 2, 18, 18, 0, 0, 2, 0, 0, 0, unicodes_malgun_18_2bpp, kerning_malgun_18_2bpp, 63, 0, 0, 0);
 801091a:	2300      	movs	r3, #0
 801091c:	930c      	str	r3, [sp, #48]	@ 0x30
 801091e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010920:	930a      	str	r3, [sp, #40]	@ 0x28
 8010922:	223f      	movs	r2, #63	@ 0x3f
 8010924:	9209      	str	r2, [sp, #36]	@ 0x24
 8010926:	4a0e      	ldr	r2, [pc, #56]	@ (8010960 <_Z22getFont_malgun_18_2bppv+0x6c>)
 8010928:	9208      	str	r2, [sp, #32]
 801092a:	4a0e      	ldr	r2, [pc, #56]	@ (8010964 <_Z22getFont_malgun_18_2bppv+0x70>)
 801092c:	9207      	str	r2, [sp, #28]
 801092e:	9306      	str	r3, [sp, #24]
 8010930:	9305      	str	r3, [sp, #20]
 8010932:	9304      	str	r3, [sp, #16]
 8010934:	2202      	movs	r2, #2
 8010936:	9203      	str	r2, [sp, #12]
 8010938:	9302      	str	r3, [sp, #8]
 801093a:	9301      	str	r3, [sp, #4]
 801093c:	2312      	movs	r3, #18
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	4909      	ldr	r1, [pc, #36]	@ (8010968 <_Z22getFont_malgun_18_2bppv+0x74>)
 8010942:	4806      	ldr	r0, [pc, #24]	@ (801095c <_Z22getFont_malgun_18_2bppv+0x68>)
 8010944:	f7ff fdfe 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010948:	4808      	ldr	r0, [pc, #32]	@ (801096c <_Z22getFont_malgun_18_2bppv+0x78>)
 801094a:	f014 f98f 	bl	8024c6c <atexit>
 801094e:	4802      	ldr	r0, [pc, #8]	@ (8010958 <_Z22getFont_malgun_18_2bppv+0x64>)
 8010950:	f014 f94d 	bl	8024bee <__cxa_guard_release>
 8010954:	e7dd      	b.n	8010912 <_Z22getFont_malgun_18_2bppv+0x1e>
 8010956:	bf00      	nop
 8010958:	24003040 	.word	0x24003040
 801095c:	24003044 	.word	0x24003044
 8010960:	0802b8b4 	.word	0x0802b8b4
 8010964:	0802bb00 	.word	0x0802bb00
 8010968:	909a71d8 	.word	0x909a71d8
 801096c:	080108d5 	.word	0x080108d5

08010970 <__tcf_0>:
 8010970:	4b03      	ldr	r3, [pc, #12]	@ (8010980 <__tcf_0+0x10>)
 8010972:	4a04      	ldr	r2, [pc, #16]	@ (8010984 <__tcf_0+0x14>)
 8010974:	601a      	str	r2, [r3, #0]
 8010976:	4a04      	ldr	r2, [pc, #16]	@ (8010988 <__tcf_0+0x18>)
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	4a04      	ldr	r2, [pc, #16]	@ (801098c <__tcf_0+0x1c>)
 801097c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_malgunbd_30_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_malgunbd_30_2bpp();

touchgfx::GeneratedFont& getFont_malgunbd_30_2bpp()
{
    static touchgfx::GeneratedFont malgunbd_30_2bpp(glyphs_malgunbd_30_2bpp, 12, 30, 30, 0, 0, 2, 0, 0, 0, unicodes_malgunbd_30_2bpp, kerning_malgunbd_30_2bpp, 63, 0, 0, 0);
 801097e:	4770      	bx	lr
 8010980:	24003074 	.word	0x24003074
 8010984:	080292fc 	.word	0x080292fc
 8010988:	0802a50c 	.word	0x0802a50c
 801098c:	08029a60 	.word	0x08029a60

08010990 <_Z24getFont_malgunbd_30_2bppv>:
 8010990:	4b18      	ldr	r3, [pc, #96]	@ (80109f4 <_Z24getFont_malgunbd_30_2bppv+0x64>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f3bf 8f5b 	dmb	ish
 8010998:	f013 0f01 	tst.w	r3, #1
 801099c:	d001      	beq.n	80109a2 <_Z24getFont_malgunbd_30_2bppv+0x12>
    return malgunbd_30_2bpp;
}
 801099e:	4816      	ldr	r0, [pc, #88]	@ (80109f8 <_Z24getFont_malgunbd_30_2bppv+0x68>)
 80109a0:	4770      	bx	lr
{
 80109a2:	b500      	push	{lr}
 80109a4:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont malgunbd_30_2bpp(glyphs_malgunbd_30_2bpp, 12, 30, 30, 0, 0, 2, 0, 0, 0, unicodes_malgunbd_30_2bpp, kerning_malgunbd_30_2bpp, 63, 0, 0, 0);
 80109a6:	4813      	ldr	r0, [pc, #76]	@ (80109f4 <_Z24getFont_malgunbd_30_2bppv+0x64>)
 80109a8:	f014 f915 	bl	8024bd6 <__cxa_guard_acquire>
 80109ac:	b918      	cbnz	r0, 80109b6 <_Z24getFont_malgunbd_30_2bppv+0x26>
}
 80109ae:	4812      	ldr	r0, [pc, #72]	@ (80109f8 <_Z24getFont_malgunbd_30_2bppv+0x68>)
 80109b0:	b00f      	add	sp, #60	@ 0x3c
 80109b2:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont malgunbd_30_2bpp(glyphs_malgunbd_30_2bpp, 12, 30, 30, 0, 0, 2, 0, 0, 0, unicodes_malgunbd_30_2bpp, kerning_malgunbd_30_2bpp, 63, 0, 0, 0);
 80109b6:	2300      	movs	r3, #0
 80109b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80109ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80109be:	223f      	movs	r2, #63	@ 0x3f
 80109c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80109c2:	4a0e      	ldr	r2, [pc, #56]	@ (80109fc <_Z24getFont_malgunbd_30_2bppv+0x6c>)
 80109c4:	9208      	str	r2, [sp, #32]
 80109c6:	4a0e      	ldr	r2, [pc, #56]	@ (8010a00 <_Z24getFont_malgunbd_30_2bppv+0x70>)
 80109c8:	9207      	str	r2, [sp, #28]
 80109ca:	9306      	str	r3, [sp, #24]
 80109cc:	9305      	str	r3, [sp, #20]
 80109ce:	9304      	str	r3, [sp, #16]
 80109d0:	2202      	movs	r2, #2
 80109d2:	9203      	str	r2, [sp, #12]
 80109d4:	9302      	str	r3, [sp, #8]
 80109d6:	9301      	str	r3, [sp, #4]
 80109d8:	231e      	movs	r3, #30
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	220c      	movs	r2, #12
 80109de:	4909      	ldr	r1, [pc, #36]	@ (8010a04 <_Z24getFont_malgunbd_30_2bppv+0x74>)
 80109e0:	4805      	ldr	r0, [pc, #20]	@ (80109f8 <_Z24getFont_malgunbd_30_2bppv+0x68>)
 80109e2:	f7ff fdaf 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80109e6:	4808      	ldr	r0, [pc, #32]	@ (8010a08 <_Z24getFont_malgunbd_30_2bppv+0x78>)
 80109e8:	f014 f940 	bl	8024c6c <atexit>
 80109ec:	4801      	ldr	r0, [pc, #4]	@ (80109f4 <_Z24getFont_malgunbd_30_2bppv+0x64>)
 80109ee:	f014 f8fe 	bl	8024bee <__cxa_guard_release>
 80109f2:	e7dc      	b.n	80109ae <_Z24getFont_malgunbd_30_2bppv+0x1e>
 80109f4:	24003070 	.word	0x24003070
 80109f8:	24003074 	.word	0x24003074
 80109fc:	0802b8b8 	.word	0x0802b8b8
 8010a00:	0802bb04 	.word	0x0802bb04
 8010a04:	909a71f4 	.word	0x909a71f4
 8010a08:	08010971 	.word	0x08010971

08010a0c <__tcf_0>:
 8010a0c:	4b03      	ldr	r3, [pc, #12]	@ (8010a1c <__tcf_0+0x10>)
 8010a0e:	4a04      	ldr	r2, [pc, #16]	@ (8010a20 <__tcf_0+0x14>)
 8010a10:	601a      	str	r2, [r3, #0]
 8010a12:	4a04      	ldr	r2, [pc, #16]	@ (8010a24 <__tcf_0+0x18>)
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	4a04      	ldr	r2, [pc, #16]	@ (8010a28 <__tcf_0+0x1c>)
 8010a18:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_18_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_18_2bpp();

touchgfx::GeneratedFont& getFont_verdana_18_2bpp()
{
    static touchgfx::GeneratedFont verdana_18_2bpp(glyphs_verdana_18_2bpp, 11, 18, 18, 0, 0, 2, 0, 0, 0, unicodes_verdana_18_2bpp, kerning_verdana_18_2bpp, 63, 0, 0, 0);
 8010a1a:	4770      	bx	lr
 8010a1c:	240030a4 	.word	0x240030a4
 8010a20:	080292fc 	.word	0x080292fc
 8010a24:	0802a50c 	.word	0x0802a50c
 8010a28:	08029a60 	.word	0x08029a60

08010a2c <_Z23getFont_verdana_18_2bppv>:
 8010a2c:	4b18      	ldr	r3, [pc, #96]	@ (8010a90 <_Z23getFont_verdana_18_2bppv+0x64>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f3bf 8f5b 	dmb	ish
 8010a34:	f013 0f01 	tst.w	r3, #1
 8010a38:	d001      	beq.n	8010a3e <_Z23getFont_verdana_18_2bppv+0x12>
    return verdana_18_2bpp;
}
 8010a3a:	4816      	ldr	r0, [pc, #88]	@ (8010a94 <_Z23getFont_verdana_18_2bppv+0x68>)
 8010a3c:	4770      	bx	lr
{
 8010a3e:	b500      	push	{lr}
 8010a40:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_18_2bpp(glyphs_verdana_18_2bpp, 11, 18, 18, 0, 0, 2, 0, 0, 0, unicodes_verdana_18_2bpp, kerning_verdana_18_2bpp, 63, 0, 0, 0);
 8010a42:	4813      	ldr	r0, [pc, #76]	@ (8010a90 <_Z23getFont_verdana_18_2bppv+0x64>)
 8010a44:	f014 f8c7 	bl	8024bd6 <__cxa_guard_acquire>
 8010a48:	b918      	cbnz	r0, 8010a52 <_Z23getFont_verdana_18_2bppv+0x26>
}
 8010a4a:	4812      	ldr	r0, [pc, #72]	@ (8010a94 <_Z23getFont_verdana_18_2bppv+0x68>)
 8010a4c:	b00f      	add	sp, #60	@ 0x3c
 8010a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_18_2bpp(glyphs_verdana_18_2bpp, 11, 18, 18, 0, 0, 2, 0, 0, 0, unicodes_verdana_18_2bpp, kerning_verdana_18_2bpp, 63, 0, 0, 0);
 8010a52:	2300      	movs	r3, #0
 8010a54:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a5a:	223f      	movs	r2, #63	@ 0x3f
 8010a5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8010a98 <_Z23getFont_verdana_18_2bppv+0x6c>)
 8010a60:	9208      	str	r2, [sp, #32]
 8010a62:	4a0e      	ldr	r2, [pc, #56]	@ (8010a9c <_Z23getFont_verdana_18_2bppv+0x70>)
 8010a64:	9207      	str	r2, [sp, #28]
 8010a66:	9306      	str	r3, [sp, #24]
 8010a68:	9305      	str	r3, [sp, #20]
 8010a6a:	9304      	str	r3, [sp, #16]
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	9203      	str	r2, [sp, #12]
 8010a70:	9302      	str	r3, [sp, #8]
 8010a72:	9301      	str	r3, [sp, #4]
 8010a74:	2312      	movs	r3, #18
 8010a76:	9300      	str	r3, [sp, #0]
 8010a78:	220b      	movs	r2, #11
 8010a7a:	4909      	ldr	r1, [pc, #36]	@ (8010aa0 <_Z23getFont_verdana_18_2bppv+0x74>)
 8010a7c:	4805      	ldr	r0, [pc, #20]	@ (8010a94 <_Z23getFont_verdana_18_2bppv+0x68>)
 8010a7e:	f7ff fd61 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010a82:	4808      	ldr	r0, [pc, #32]	@ (8010aa4 <_Z23getFont_verdana_18_2bppv+0x78>)
 8010a84:	f014 f8f2 	bl	8024c6c <atexit>
 8010a88:	4801      	ldr	r0, [pc, #4]	@ (8010a90 <_Z23getFont_verdana_18_2bppv+0x64>)
 8010a8a:	f014 f8b0 	bl	8024bee <__cxa_guard_release>
 8010a8e:	e7dc      	b.n	8010a4a <_Z23getFont_verdana_18_2bppv+0x1e>
 8010a90:	240030a0 	.word	0x240030a0
 8010a94:	240030a4 	.word	0x240030a4
 8010a98:	0802b8bc 	.word	0x0802b8bc
 8010a9c:	0802bb08 	.word	0x0802bb08
 8010aa0:	909a729c 	.word	0x909a729c
 8010aa4:	08010a0d 	.word	0x08010a0d

08010aa8 <__tcf_0>:
 8010aa8:	4b03      	ldr	r3, [pc, #12]	@ (8010ab8 <__tcf_0+0x10>)
 8010aaa:	4a04      	ldr	r2, [pc, #16]	@ (8010abc <__tcf_0+0x14>)
 8010aac:	601a      	str	r2, [r3, #0]
 8010aae:	4a04      	ldr	r2, [pc, #16]	@ (8010ac0 <__tcf_0+0x18>)
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	4a04      	ldr	r2, [pc, #16]	@ (8010ac4 <__tcf_0+0x1c>)
 8010ab4:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_25_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_25_2bpp();

touchgfx::GeneratedFont& getFont_verdana_25_2bpp()
{
    static touchgfx::GeneratedFont verdana_25_2bpp(glyphs_verdana_25_2bpp, 11, 25, 25, 0, 0, 2, 0, 0, 0, unicodes_verdana_25_2bpp, kerning_verdana_25_2bpp, 63, 0, 0, 0);
 8010ab6:	4770      	bx	lr
 8010ab8:	240030d4 	.word	0x240030d4
 8010abc:	080292fc 	.word	0x080292fc
 8010ac0:	0802a50c 	.word	0x0802a50c
 8010ac4:	08029a60 	.word	0x08029a60

08010ac8 <_Z23getFont_verdana_25_2bppv>:
 8010ac8:	4b18      	ldr	r3, [pc, #96]	@ (8010b2c <_Z23getFont_verdana_25_2bppv+0x64>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f3bf 8f5b 	dmb	ish
 8010ad0:	f013 0f01 	tst.w	r3, #1
 8010ad4:	d001      	beq.n	8010ada <_Z23getFont_verdana_25_2bppv+0x12>
    return verdana_25_2bpp;
}
 8010ad6:	4816      	ldr	r0, [pc, #88]	@ (8010b30 <_Z23getFont_verdana_25_2bppv+0x68>)
 8010ad8:	4770      	bx	lr
{
 8010ada:	b500      	push	{lr}
 8010adc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_25_2bpp(glyphs_verdana_25_2bpp, 11, 25, 25, 0, 0, 2, 0, 0, 0, unicodes_verdana_25_2bpp, kerning_verdana_25_2bpp, 63, 0, 0, 0);
 8010ade:	4813      	ldr	r0, [pc, #76]	@ (8010b2c <_Z23getFont_verdana_25_2bppv+0x64>)
 8010ae0:	f014 f879 	bl	8024bd6 <__cxa_guard_acquire>
 8010ae4:	b918      	cbnz	r0, 8010aee <_Z23getFont_verdana_25_2bppv+0x26>
}
 8010ae6:	4812      	ldr	r0, [pc, #72]	@ (8010b30 <_Z23getFont_verdana_25_2bppv+0x68>)
 8010ae8:	b00f      	add	sp, #60	@ 0x3c
 8010aea:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_25_2bpp(glyphs_verdana_25_2bpp, 11, 25, 25, 0, 0, 2, 0, 0, 0, unicodes_verdana_25_2bpp, kerning_verdana_25_2bpp, 63, 0, 0, 0);
 8010aee:	2300      	movs	r3, #0
 8010af0:	930c      	str	r3, [sp, #48]	@ 0x30
 8010af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010af4:	930a      	str	r3, [sp, #40]	@ 0x28
 8010af6:	223f      	movs	r2, #63	@ 0x3f
 8010af8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010afa:	4a0e      	ldr	r2, [pc, #56]	@ (8010b34 <_Z23getFont_verdana_25_2bppv+0x6c>)
 8010afc:	9208      	str	r2, [sp, #32]
 8010afe:	4a0e      	ldr	r2, [pc, #56]	@ (8010b38 <_Z23getFont_verdana_25_2bppv+0x70>)
 8010b00:	9207      	str	r2, [sp, #28]
 8010b02:	9306      	str	r3, [sp, #24]
 8010b04:	9305      	str	r3, [sp, #20]
 8010b06:	9304      	str	r3, [sp, #16]
 8010b08:	2202      	movs	r2, #2
 8010b0a:	9203      	str	r2, [sp, #12]
 8010b0c:	9302      	str	r3, [sp, #8]
 8010b0e:	9301      	str	r3, [sp, #4]
 8010b10:	2319      	movs	r3, #25
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	220b      	movs	r2, #11
 8010b16:	4909      	ldr	r1, [pc, #36]	@ (8010b3c <_Z23getFont_verdana_25_2bppv+0x74>)
 8010b18:	4805      	ldr	r0, [pc, #20]	@ (8010b30 <_Z23getFont_verdana_25_2bppv+0x68>)
 8010b1a:	f7ff fd13 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010b1e:	4808      	ldr	r0, [pc, #32]	@ (8010b40 <_Z23getFont_verdana_25_2bppv+0x78>)
 8010b20:	f014 f8a4 	bl	8024c6c <atexit>
 8010b24:	4801      	ldr	r0, [pc, #4]	@ (8010b2c <_Z23getFont_verdana_25_2bppv+0x64>)
 8010b26:	f014 f862 	bl	8024bee <__cxa_guard_release>
 8010b2a:	e7dc      	b.n	8010ae6 <_Z23getFont_verdana_25_2bppv+0x1e>
 8010b2c:	240030d0 	.word	0x240030d0
 8010b30:	240030d4 	.word	0x240030d4
 8010b34:	0802b8c0 	.word	0x0802b8c0
 8010b38:	0802bb0c 	.word	0x0802bb0c
 8010b3c:	909a7338 	.word	0x909a7338
 8010b40:	08010aa9 	.word	0x08010aa9

08010b44 <__tcf_0>:
 8010b44:	4b03      	ldr	r3, [pc, #12]	@ (8010b54 <__tcf_0+0x10>)
 8010b46:	4a04      	ldr	r2, [pc, #16]	@ (8010b58 <__tcf_0+0x14>)
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	4a04      	ldr	r2, [pc, #16]	@ (8010b5c <__tcf_0+0x18>)
 8010b4c:	601a      	str	r2, [r3, #0]
 8010b4e:	4a04      	ldr	r2, [pc, #16]	@ (8010b60 <__tcf_0+0x1c>)
 8010b50:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_30_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_2bpp();

touchgfx::GeneratedFont& getFont_verdana_30_2bpp()
{
    static touchgfx::GeneratedFont verdana_30_2bpp(glyphs_verdana_30_2bpp, 19, 30, 30, 0, 0, 2, 0, 0, 1, unicodes_verdana_30_2bpp, kerning_verdana_30_2bpp, 63, 0, 0, 0);
 8010b52:	4770      	bx	lr
 8010b54:	24003104 	.word	0x24003104
 8010b58:	080292fc 	.word	0x080292fc
 8010b5c:	0802a50c 	.word	0x0802a50c
 8010b60:	08029a60 	.word	0x08029a60

08010b64 <_Z23getFont_verdana_30_2bppv>:
 8010b64:	4b19      	ldr	r3, [pc, #100]	@ (8010bcc <_Z23getFont_verdana_30_2bppv+0x68>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f3bf 8f5b 	dmb	ish
 8010b6c:	f013 0f01 	tst.w	r3, #1
 8010b70:	d001      	beq.n	8010b76 <_Z23getFont_verdana_30_2bppv+0x12>
    return verdana_30_2bpp;
}
 8010b72:	4817      	ldr	r0, [pc, #92]	@ (8010bd0 <_Z23getFont_verdana_30_2bppv+0x6c>)
 8010b74:	4770      	bx	lr
{
 8010b76:	b500      	push	{lr}
 8010b78:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_30_2bpp(glyphs_verdana_30_2bpp, 19, 30, 30, 0, 0, 2, 0, 0, 1, unicodes_verdana_30_2bpp, kerning_verdana_30_2bpp, 63, 0, 0, 0);
 8010b7a:	4814      	ldr	r0, [pc, #80]	@ (8010bcc <_Z23getFont_verdana_30_2bppv+0x68>)
 8010b7c:	f014 f82b 	bl	8024bd6 <__cxa_guard_acquire>
 8010b80:	b918      	cbnz	r0, 8010b8a <_Z23getFont_verdana_30_2bppv+0x26>
}
 8010b82:	4813      	ldr	r0, [pc, #76]	@ (8010bd0 <_Z23getFont_verdana_30_2bppv+0x6c>)
 8010b84:	b00f      	add	sp, #60	@ 0x3c
 8010b86:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_30_2bpp(glyphs_verdana_30_2bpp, 19, 30, 30, 0, 0, 2, 0, 0, 1, unicodes_verdana_30_2bpp, kerning_verdana_30_2bpp, 63, 0, 0, 0);
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b92:	223f      	movs	r2, #63	@ 0x3f
 8010b94:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b96:	4a0f      	ldr	r2, [pc, #60]	@ (8010bd4 <_Z23getFont_verdana_30_2bppv+0x70>)
 8010b98:	9208      	str	r2, [sp, #32]
 8010b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8010bd8 <_Z23getFont_verdana_30_2bppv+0x74>)
 8010b9c:	9207      	str	r2, [sp, #28]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	9206      	str	r2, [sp, #24]
 8010ba2:	9305      	str	r3, [sp, #20]
 8010ba4:	9304      	str	r3, [sp, #16]
 8010ba6:	2202      	movs	r2, #2
 8010ba8:	9203      	str	r2, [sp, #12]
 8010baa:	9302      	str	r3, [sp, #8]
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	231e      	movs	r3, #30
 8010bb0:	9300      	str	r3, [sp, #0]
 8010bb2:	2213      	movs	r2, #19
 8010bb4:	4909      	ldr	r1, [pc, #36]	@ (8010bdc <_Z23getFont_verdana_30_2bppv+0x78>)
 8010bb6:	4806      	ldr	r0, [pc, #24]	@ (8010bd0 <_Z23getFont_verdana_30_2bppv+0x6c>)
 8010bb8:	f7ff fcc4 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010bbc:	4808      	ldr	r0, [pc, #32]	@ (8010be0 <_Z23getFont_verdana_30_2bppv+0x7c>)
 8010bbe:	f014 f855 	bl	8024c6c <atexit>
 8010bc2:	4802      	ldr	r0, [pc, #8]	@ (8010bcc <_Z23getFont_verdana_30_2bppv+0x68>)
 8010bc4:	f014 f813 	bl	8024bee <__cxa_guard_release>
 8010bc8:	e7db      	b.n	8010b82 <_Z23getFont_verdana_30_2bppv+0x1e>
 8010bca:	bf00      	nop
 8010bcc:	24003100 	.word	0x24003100
 8010bd0:	24003104 	.word	0x24003104
 8010bd4:	0802b8c4 	.word	0x0802b8c4
 8010bd8:	0802bb10 	.word	0x0802bb10
 8010bdc:	909a73d4 	.word	0x909a73d4
 8010be0:	08010b45 	.word	0x08010b45

08010be4 <__tcf_0>:
 8010be4:	4b03      	ldr	r3, [pc, #12]	@ (8010bf4 <__tcf_0+0x10>)
 8010be6:	4a04      	ldr	r2, [pc, #16]	@ (8010bf8 <__tcf_0+0x14>)
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	4a04      	ldr	r2, [pc, #16]	@ (8010bfc <__tcf_0+0x18>)
 8010bec:	601a      	str	r2, [r3, #0]
 8010bee:	4a04      	ldr	r2, [pc, #16]	@ (8010c00 <__tcf_0+0x1c>)
 8010bf0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_2bpp();

touchgfx::GeneratedFont& getFont_verdana_40_2bpp()
{
    static touchgfx::GeneratedFont verdana_40_2bpp(glyphs_verdana_40_2bpp, 16, 41, 40, 0, 0, 2, 0, 0, 0, unicodes_verdana_40_2bpp, kerning_verdana_40_2bpp, 63, 0, 0, 0);
 8010bf2:	4770      	bx	lr
 8010bf4:	24003134 	.word	0x24003134
 8010bf8:	080292fc 	.word	0x080292fc
 8010bfc:	0802a50c 	.word	0x0802a50c
 8010c00:	08029a60 	.word	0x08029a60

08010c04 <_Z23getFont_verdana_40_2bppv>:
 8010c04:	4b19      	ldr	r3, [pc, #100]	@ (8010c6c <_Z23getFont_verdana_40_2bppv+0x68>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f3bf 8f5b 	dmb	ish
 8010c0c:	f013 0f01 	tst.w	r3, #1
 8010c10:	d001      	beq.n	8010c16 <_Z23getFont_verdana_40_2bppv+0x12>
    return verdana_40_2bpp;
}
 8010c12:	4817      	ldr	r0, [pc, #92]	@ (8010c70 <_Z23getFont_verdana_40_2bppv+0x6c>)
 8010c14:	4770      	bx	lr
{
 8010c16:	b500      	push	{lr}
 8010c18:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_2bpp(glyphs_verdana_40_2bpp, 16, 41, 40, 0, 0, 2, 0, 0, 0, unicodes_verdana_40_2bpp, kerning_verdana_40_2bpp, 63, 0, 0, 0);
 8010c1a:	4814      	ldr	r0, [pc, #80]	@ (8010c6c <_Z23getFont_verdana_40_2bppv+0x68>)
 8010c1c:	f013 ffdb 	bl	8024bd6 <__cxa_guard_acquire>
 8010c20:	b918      	cbnz	r0, 8010c2a <_Z23getFont_verdana_40_2bppv+0x26>
}
 8010c22:	4813      	ldr	r0, [pc, #76]	@ (8010c70 <_Z23getFont_verdana_40_2bppv+0x6c>)
 8010c24:	b00f      	add	sp, #60	@ 0x3c
 8010c26:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_2bpp(glyphs_verdana_40_2bpp, 16, 41, 40, 0, 0, 2, 0, 0, 0, unicodes_verdana_40_2bpp, kerning_verdana_40_2bpp, 63, 0, 0, 0);
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c32:	223f      	movs	r2, #63	@ 0x3f
 8010c34:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c36:	4a0f      	ldr	r2, [pc, #60]	@ (8010c74 <_Z23getFont_verdana_40_2bppv+0x70>)
 8010c38:	9208      	str	r2, [sp, #32]
 8010c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8010c78 <_Z23getFont_verdana_40_2bppv+0x74>)
 8010c3c:	9207      	str	r2, [sp, #28]
 8010c3e:	9306      	str	r3, [sp, #24]
 8010c40:	9305      	str	r3, [sp, #20]
 8010c42:	9304      	str	r3, [sp, #16]
 8010c44:	2202      	movs	r2, #2
 8010c46:	9203      	str	r2, [sp, #12]
 8010c48:	9302      	str	r3, [sp, #8]
 8010c4a:	9301      	str	r3, [sp, #4]
 8010c4c:	2328      	movs	r3, #40	@ 0x28
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	2329      	movs	r3, #41	@ 0x29
 8010c52:	2210      	movs	r2, #16
 8010c54:	4909      	ldr	r1, [pc, #36]	@ (8010c7c <_Z23getFont_verdana_40_2bppv+0x78>)
 8010c56:	4806      	ldr	r0, [pc, #24]	@ (8010c70 <_Z23getFont_verdana_40_2bppv+0x6c>)
 8010c58:	f7ff fc74 	bl	8010544 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010c5c:	4808      	ldr	r0, [pc, #32]	@ (8010c80 <_Z23getFont_verdana_40_2bppv+0x7c>)
 8010c5e:	f014 f805 	bl	8024c6c <atexit>
 8010c62:	4802      	ldr	r0, [pc, #8]	@ (8010c6c <_Z23getFont_verdana_40_2bppv+0x68>)
 8010c64:	f013 ffc3 	bl	8024bee <__cxa_guard_release>
 8010c68:	e7db      	b.n	8010c22 <_Z23getFont_verdana_40_2bppv+0x1e>
 8010c6a:	bf00      	nop
 8010c6c:	24003130 	.word	0x24003130
 8010c70:	24003134 	.word	0x24003134
 8010c74:	0802b8e0 	.word	0x0802b8e0
 8010c78:	0802bb14 	.word	0x0802bb14
 8010c7c:	909a74e0 	.word	0x909a74e0
 8010c80:	08010be5 	.word	0x08010be5

08010c84 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8010c84:	4770      	bx	lr

08010c86 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8010c86:	4770      	bx	lr

08010c88 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8010c88:	4770      	bx	lr

08010c8a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8010c8a:	4770      	bx	lr

08010c8c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8010c8c:	4770      	bx	lr

08010c8e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8010c8e:	4770      	bx	lr

08010c90 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8010c90:	4b01      	ldr	r3, [pc, #4]	@ (8010c98 <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8010c92:	6003      	str	r3, [r0, #0]
    }
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop
 8010c98:	08029650 	.word	0x08029650

08010c9c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8010c9c:	4770      	bx	lr

08010c9e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8010c9e:	4770      	bx	lr

08010ca0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8010ca0:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8010ca4:	6808      	ldr	r0, [r1, #0]
 8010ca6:	6849      	ldr	r1, [r1, #4]
 8010ca8:	c303      	stmia	r3!, {r0, r1}
    }
 8010caa:	4770      	bx	lr

08010cac <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8010cac:	4b01      	ldr	r3, [pc, #4]	@ (8010cb4 <_ZN8touchgfx10TransitionD1Ev+0x8>)
 8010cae:	6003      	str	r3, [r0, #0]
    }
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	08029690 	.word	0x08029690

08010cb8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 8010cb8:	4770      	bx	lr

08010cba <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8010cba:	4770      	bx	lr

08010cbc <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8010cbc:	4770      	bx	lr

08010cbe <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8010cbe:	6041      	str	r1, [r0, #4]
    }
 8010cc0:	4770      	bx	lr
	...

08010cc4 <_ZN8touchgfx14MVPApplicationD1Ev>:
 *
 * It maintains a callback for transitioning and evaluates this at each tick.
 *
 * @see Application
 */
class MVPApplication : public Application
 8010cc4:	4a03      	ldr	r2, [pc, #12]	@ (8010cd4 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8010cc6:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8010cc8:	4a03      	ldr	r2, [pc, #12]	@ (8010cd8 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8010cca:	6002      	str	r2, [r0, #0]
    {
 8010ccc:	4a03      	ldr	r2, [pc, #12]	@ (8010cdc <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8010cce:	6002      	str	r2, [r0, #0]
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	080296b4 	.word	0x080296b4
 8010cd8:	0802a450 	.word	0x0802a450
 8010cdc:	08029650 	.word	0x08029650

08010ce0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010ce0:	4a07      	ldr	r2, [pc, #28]	@ (8010d00 <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8010ce2:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010ce4:	4a07      	ldr	r2, [pc, #28]	@ (8010d04 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8010ce6:	f8c0 2144 	str.w	r2, [r0, #324]	@ 0x144
    {
 8010cea:	4a07      	ldr	r2, [pc, #28]	@ (8010d08 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8010cec:	f8c0 2144 	str.w	r2, [r0, #324]	@ 0x144
 8010cf0:	4a06      	ldr	r2, [pc, #24]	@ (8010d0c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8010cf2:	6002      	str	r2, [r0, #0]
 8010cf4:	4a06      	ldr	r2, [pc, #24]	@ (8010d10 <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8010cf6:	6002      	str	r2, [r0, #0]
 8010cf8:	4a06      	ldr	r2, [pc, #24]	@ (8010d14 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8010cfa:	6002      	str	r2, [r0, #0]
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop
 8010d00:	08029720 	.word	0x08029720
 8010d04:	08029708 	.word	0x08029708
 8010d08:	08029678 	.word	0x08029678
 8010d0c:	080296b4 	.word	0x080296b4
 8010d10:	0802a450 	.word	0x0802a450
 8010d14:	08029650 	.word	0x08029650

08010d18 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	7203      	strb	r3, [r0, #8]
    }
 8010d1c:	4770      	bx	lr
	...

08010d20 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8010d20:	4a02      	ldr	r2, [pc, #8]	@ (8010d2c <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 8010d22:	6002      	str	r2, [r0, #0]
    {
 8010d24:	4a02      	ldr	r2, [pc, #8]	@ (8010d30 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 8010d26:	6002      	str	r2, [r0, #0]
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop
 8010d2c:	08029774 	.word	0x08029774
 8010d30:	08029690 	.word	0x08029690

08010d34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010d34:	4a02      	ldr	r2, [pc, #8]	@ (8010d40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8010d36:	6002      	str	r2, [r0, #0]
    {
 8010d38:	4a02      	ldr	r2, [pc, #8]	@ (8010d44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8010d3a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	08029708 	.word	0x08029708
 8010d44:	08029678 	.word	0x08029678

08010d48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8010d48:	b508      	push	{r3, lr}
 8010d4a:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8010d4c:	6841      	ldr	r1, [r0, #4]
 8010d4e:	68c2      	ldr	r2, [r0, #12]
 8010d50:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8010d54:	f012 0f01 	tst.w	r2, #1
 8010d58:	d102      	bne.n	8010d60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	4798      	blx	r3
    }
 8010d5e:	bd08      	pop	{r3, pc}
 8010d60:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8010d64:	f851 200c 	ldr.w	r2, [r1, ip]
 8010d68:	689b      	ldr	r3, [r3, #8]
 8010d6a:	58d3      	ldr	r3, [r2, r3]
 8010d6c:	e7f6      	b.n	8010d5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08010d6e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8010d6e:	6843      	ldr	r3, [r0, #4]
 8010d70:	b14b      	cbz	r3, 8010d86 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8010d72:	6883      	ldr	r3, [r0, #8]
 8010d74:	b10b      	cbz	r3, 8010d7a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8010d76:	2001      	movs	r0, #1
 8010d78:	4770      	bx	lr
 8010d7a:	68c3      	ldr	r3, [r0, #12]
 8010d7c:	f013 0f01 	tst.w	r3, #1
 8010d80:	d003      	beq.n	8010d8a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8010d82:	2001      	movs	r0, #1
 8010d84:	4770      	bx	lr
 8010d86:	2000      	movs	r0, #0
 8010d88:	4770      	bx	lr
 8010d8a:	2000      	movs	r0, #0
    }
 8010d8c:	4770      	bx	lr
	...

08010d90 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010d90:	b510      	push	{r4, lr}
 8010d92:	4604      	mov	r4, r0
    {
 8010d94:	4b03      	ldr	r3, [pc, #12]	@ (8010da4 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8010d96:	6003      	str	r3, [r0, #0]
    }
 8010d98:	2104      	movs	r1, #4
 8010d9a:	f013 ff1a 	bl	8024bd2 <_ZdlPvj>
 8010d9e:	4620      	mov	r0, r4
 8010da0:	bd10      	pop	{r4, pc}
 8010da2:	bf00      	nop
 8010da4:	08029650 	.word	0x08029650

08010da8 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010da8:	b510      	push	{r4, lr}
 8010daa:	4604      	mov	r4, r0
 8010dac:	4b04      	ldr	r3, [pc, #16]	@ (8010dc0 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 8010dae:	6003      	str	r3, [r0, #0]
 8010db0:	4b04      	ldr	r3, [pc, #16]	@ (8010dc4 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8010db2:	6003      	str	r3, [r0, #0]
 8010db4:	210c      	movs	r1, #12
 8010db6:	f013 ff0c 	bl	8024bd2 <_ZdlPvj>
 8010dba:	4620      	mov	r0, r4
 8010dbc:	bd10      	pop	{r4, pc}
 8010dbe:	bf00      	nop
 8010dc0:	08029774 	.word	0x08029774
 8010dc4:	08029690 	.word	0x08029690

08010dc8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010dc8:	b510      	push	{r4, lr}
 8010dca:	4604      	mov	r4, r0
    {
 8010dcc:	4b03      	ldr	r3, [pc, #12]	@ (8010ddc <_ZN8touchgfx10TransitionD0Ev+0x14>)
 8010dce:	6003      	str	r3, [r0, #0]
    }
 8010dd0:	210c      	movs	r1, #12
 8010dd2:	f013 fefe 	bl	8024bd2 <_ZdlPvj>
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	bd10      	pop	{r4, pc}
 8010dda:	bf00      	nop
 8010ddc:	08029690 	.word	0x08029690

08010de0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010de0:	b510      	push	{r4, lr}
 8010de2:	4604      	mov	r4, r0
 8010de4:	4b04      	ldr	r3, [pc, #16]	@ (8010df8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8010de6:	6003      	str	r3, [r0, #0]
    {
 8010de8:	4b04      	ldr	r3, [pc, #16]	@ (8010dfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8010dea:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010dec:	2110      	movs	r1, #16
 8010dee:	f013 fef0 	bl	8024bd2 <_ZdlPvj>
 8010df2:	4620      	mov	r0, r4
 8010df4:	bd10      	pop	{r4, pc}
 8010df6:	bf00      	nop
 8010df8:	08029708 	.word	0x08029708
 8010dfc:	08029678 	.word	0x08029678

08010e00 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010e00:	b510      	push	{r4, lr}
 8010e02:	4604      	mov	r4, r0
 8010e04:	4b05      	ldr	r3, [pc, #20]	@ (8010e1c <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8010e06:	6003      	str	r3, [r0, #0]
 8010e08:	4b05      	ldr	r3, [pc, #20]	@ (8010e20 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8010e0a:	6003      	str	r3, [r0, #0]
    {
 8010e0c:	4b05      	ldr	r3, [pc, #20]	@ (8010e24 <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8010e0e:	6003      	str	r3, [r0, #0]
 8010e10:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8010e14:	f013 fedd 	bl	8024bd2 <_ZdlPvj>
 8010e18:	4620      	mov	r0, r4
 8010e1a:	bd10      	pop	{r4, pc}
 8010e1c:	080296b4 	.word	0x080296b4
 8010e20:	0802a450 	.word	0x0802a450
 8010e24:	08029650 	.word	0x08029650

08010e28 <_ZN23FrontendApplicationBaseD0Ev>:
 8010e28:	b510      	push	{r4, lr}
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	4b09      	ldr	r3, [pc, #36]	@ (8010e54 <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8010e2e:	6003      	str	r3, [r0, #0]
 8010e30:	4b09      	ldr	r3, [pc, #36]	@ (8010e58 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8010e32:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
    {
 8010e36:	4b09      	ldr	r3, [pc, #36]	@ (8010e5c <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8010e38:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
 8010e3c:	4b08      	ldr	r3, [pc, #32]	@ (8010e60 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8010e3e:	6003      	str	r3, [r0, #0]
 8010e40:	4b08      	ldr	r3, [pc, #32]	@ (8010e64 <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8010e42:	6003      	str	r3, [r0, #0]
 8010e44:	4b08      	ldr	r3, [pc, #32]	@ (8010e68 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8010e46:	6003      	str	r3, [r0, #0]
 8010e48:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8010e4c:	f013 fec1 	bl	8024bd2 <_ZdlPvj>
 8010e50:	4620      	mov	r0, r4
 8010e52:	bd10      	pop	{r4, pc}
 8010e54:	08029720 	.word	0x08029720
 8010e58:	08029708 	.word	0x08029708
 8010e5c:	08029678 	.word	0x08029678
 8010e60:	080296b4 	.word	0x080296b4
 8010e64:	0802a450 	.word	0x0802a450
 8010e68:	08029650 	.word	0x08029650

08010e6c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8010e6c:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8010e6e:	f003 fdb9 	bl	80149e4 <_ZN8touchgfx11Application11getInstanceEv>
 8010e72:	6803      	ldr	r3, [r0, #0]
 8010e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e76:	4798      	blx	r3
    }
 8010e78:	bd08      	pop	{r3, pc}

08010e7a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010e7a:	b510      	push	{r4, lr}
 8010e7c:	4604      	mov	r4, r0
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010e7e:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8010e82:	b158      	cbz	r0, 8010e9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x22>
 8010e84:	6803      	ldr	r3, [r0, #0]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	4798      	blx	r3
 8010e8a:	b138      	cbz	r0, 8010e9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8010e8c:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8010e90:	6803      	ldr	r3, [r0, #0]
 8010e92:	689b      	ldr	r3, [r3, #8]
 8010e94:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010e96:	2300      	movs	r3, #0
 8010e98:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
        }
    }
 8010e9c:	bd10      	pop	{r4, pc}

08010e9e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    virtual void handlePendingScreenTransition()
 8010e9e:	b508      	push	{r3, lr}
        evaluatePendingScreenTransition();
 8010ea0:	f7ff ffeb 	bl	8010e7a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010ea4:	bd08      	pop	{r3, pc}
	...

08010ea8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eaa:	4604      	mov	r4, r0
 8010eac:	460e      	mov	r6, r1
 8010eae:	4617      	mov	r7, r2
          pendingScreenTransitionCallback(0)
 8010eb0:	f003 fe5e 	bl	8014b70 <_ZN8touchgfx11ApplicationC1Ev>
 8010eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8010f28 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
 8010eb6:	6023      	str	r3, [r4, #0]
        : currentPresenter(0),
 8010eb8:	2500      	movs	r5, #0
 8010eba:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 8010ebe:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
        instance = this;
 8010ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8010f2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x84>)
 8010ec4:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8010f30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x88>)
 8010ec8:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8010eca:	4b1a      	ldr	r3, [pc, #104]	@ (8010f34 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x8c>)
 8010ecc:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
        : pobject(0), pmemfun(0)
 8010ed0:	4b19      	ldr	r3, [pc, #100]	@ (8010f38 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x90>)
 8010ed2:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8010ed6:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8010eda:	f8c4 514c 	str.w	r5, [r4, #332]	@ 0x14c
 8010ede:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
      frontendHeap(heap),
 8010ee2:	f8c4 7154 	str.w	r7, [r4, #340]	@ 0x154
      model(m)
 8010ee6:	f8c4 6158 	str.w	r6, [r4, #344]	@ 0x158
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
    {
        return instance;
 8010eea:	4e14      	ldr	r6, [pc, #80]	@ (8010f3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x94>)
 8010eec:	6830      	ldr	r0, [r6, #0]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8010eee:	6803      	ldr	r3, [r0, #0]
 8010ef0:	689b      	ldr	r3, [r3, #8]
 8010ef2:	4629      	mov	r1, r5
 8010ef4:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f000 fa8c 	bl	8011414 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010efc:	6833      	ldr	r3, [r6, #0]
 8010efe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010f02:	b10a      	cbz	r2, 8010f08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
 8010f04:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010f06:	b900      	cbnz	r0, 8010f0a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x62>
        {
            return *instance->auxiliaryLCD;
        }
        return instance->lcdRef;
 8010f08:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010f0a:	f00c fae8 	bl	801d4de <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010f3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x94>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010f16:	b10a      	cbz	r2, 8010f1c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>
 8010f18:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010f1a:	b900      	cbnz	r0, 8010f1e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x76>
        return instance->lcdRef;
 8010f1c:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8010f1e:	f00c fb59 	bl	801d5d4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 8010f22:	4620      	mov	r0, r4
 8010f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f26:	bf00      	nop
 8010f28:	080296b4 	.word	0x080296b4
 8010f2c:	240042c4 	.word	0x240042c4
 8010f30:	08029720 	.word	0x08029720
 8010f34:	08029678 	.word	0x08029678
 8010f38:	08029708 	.word	0x08029708
 8010f3c:	24004278 	.word	0x24004278

08010f40 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8010f40:	b410      	push	{r4}
 8010f42:	b089      	sub	sp, #36	@ 0x24
 8010f44:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 8010f46:	4a10      	ldr	r2, [pc, #64]	@ (8010f88 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x48>)
 8010f48:	9206      	str	r2, [sp, #24]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	9207      	str	r2, [sp, #28]
 8010f4e:	46ec      	mov	ip, sp
 8010f50:	aa08      	add	r2, sp, #32
 8010f52:	e912 0003 	ldmdb	r2, {r0, r1}
 8010f56:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8010f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8010f8c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x4c>)
 8010f5c:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8010f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8010f90 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8010f60:	9202      	str	r2, [sp, #8]
 8010f62:	9303      	str	r3, [sp, #12]
 8010f64:	aa04      	add	r2, sp, #16
 8010f66:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010f6a:	f8c3 3148 	str.w	r3, [r3, #328]	@ 0x148
 8010f6e:	f503 7ca6 	add.w	ip, r3, #332	@ 0x14c
 8010f72:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 8010f76:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8010f78:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8010f7c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8010f80:	b009      	add	sp, #36	@ 0x24
 8010f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f86:	4770      	bx	lr
 8010f88:	080110ed 	.word	0x080110ed
 8010f8c:	08029678 	.word	0x08029678
 8010f90:	08029708 	.word	0x08029708

08010f94 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8010f94:	b508      	push	{r3, lr}
    {
        gotoscreenScreenNoTransition();
 8010f96:	f7ff ffd3 	bl	8010f40 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8010f9a:	bd08      	pop	{r3, pc}

08010f9c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	4607      	mov	r7, r0
 8010fa2:	4688      	mov	r8, r1
 8010fa4:	4615      	mov	r5, r2
 8010fa6:	4699      	mov	r9, r3
 8010fa8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010fac:	6890      	ldr	r0, [r2, #8]
 8010fae:	6803      	ldr	r3, [r0, #0]
 8010fb0:	6a1b      	ldr	r3, [r3, #32]
 8010fb2:	4798      	blx	r3
 8010fb4:	286b      	cmp	r0, #107	@ 0x6b
 8010fb6:	d977      	bls.n	80110a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010fb8:	6868      	ldr	r0, [r5, #4]
 8010fba:	6803      	ldr	r3, [r0, #0]
 8010fbc:	6a1b      	ldr	r3, [r3, #32]
 8010fbe:	4798      	blx	r3
 8010fc0:	280f      	cmp	r0, #15
 8010fc2:	d977      	bls.n	80110b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010fc4:	68e8      	ldr	r0, [r5, #12]
 8010fc6:	6803      	ldr	r3, [r0, #0]
 8010fc8:	6a1b      	ldr	r3, [r3, #32]
 8010fca:	4798      	blx	r3
 8010fcc:	280b      	cmp	r0, #11
 8010fce:	d977      	bls.n	80110c0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
    Application::getInstance()->clearAllTimerWidgets();
 8010fd0:	f003 fd08 	bl	80149e4 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8010fd4:	3004      	adds	r0, #4
 8010fd6:	f003 fd2a 	bl	8014a2e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8010fda:	f8d9 0000 	ldr.w	r0, [r9]
 8010fde:	b110      	cbz	r0, 8010fe6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x4a>
        (*currentTrans)->tearDown();
 8010fe0:	6803      	ldr	r3, [r0, #0]
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	4798      	blx	r3
    if (*currentTrans)
 8010fe6:	f8d9 0000 	ldr.w	r0, [r9]
 8010fea:	b110      	cbz	r0, 8010ff2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
        (*currentTrans)->~Transition();
 8010fec:	6803      	ldr	r3, [r0, #0]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4798      	blx	r3
    if (*currentScreen)
 8010ff2:	6838      	ldr	r0, [r7, #0]
 8010ff4:	b110      	cbz	r0, 8010ffc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x60>
        (*currentScreen)->tearDownScreen();
 8010ff6:	6803      	ldr	r3, [r0, #0]
 8010ff8:	695b      	ldr	r3, [r3, #20]
 8010ffa:	4798      	blx	r3
    if (*currentPresenter)
 8010ffc:	f8d8 0000 	ldr.w	r0, [r8]
 8011000:	b110      	cbz	r0, 8011008 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
        (*currentPresenter)->deactivate();
 8011002:	6803      	ldr	r3, [r0, #0]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	4798      	blx	r3
    if (*currentScreen)
 8011008:	6838      	ldr	r0, [r7, #0]
 801100a:	b110      	cbz	r0, 8011012 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
        (*currentScreen)->~Screen();
 801100c:	6803      	ldr	r3, [r0, #0]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4798      	blx	r3
    if (*currentPresenter)
 8011012:	f8d8 0000 	ldr.w	r0, [r8]
 8011016:	b110      	cbz	r0, 801101e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
        (*currentPresenter)->~Presenter();
 8011018:	6803      	ldr	r3, [r0, #0]
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801101e:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8011020:	6803      	ldr	r3, [r0, #0]
 8011022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011024:	2100      	movs	r1, #0
 8011026:	4798      	blx	r3
 8011028:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 801102a:	4b29      	ldr	r3, [pc, #164]	@ (80110d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 801102c:	6003      	str	r3, [r0, #0]
 801102e:	f04f 0b00 	mov.w	fp, #0
 8011032:	f8c0 b004 	str.w	fp, [r0, #4]
 8011036:	f880 b008 	strb.w	fp, [r0, #8]
 801103a:	4b26      	ldr	r3, [pc, #152]	@ (80110d4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 801103c:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801103e:	68a8      	ldr	r0, [r5, #8]
 8011040:	6803      	ldr	r3, [r0, #0]
 8011042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011044:	4659      	mov	r1, fp
 8011046:	4798      	blx	r3
 8011048:	4606      	mov	r6, r0
 801104a:	f000 fb43 	bl	80116d4 <_ZN10screenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801104e:	6868      	ldr	r0, [r5, #4]
 8011050:	6803      	ldr	r3, [r0, #0]
 8011052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011054:	4659      	mov	r1, fp
 8011056:	4798      	blx	r3
 8011058:	4605      	mov	r5, r0
 801105a:	4631      	mov	r1, r6
 801105c:	f000 fb0e 	bl	801167c <_ZN15screenPresenterC1ER10screenView>
    *currentTrans = newTransition;
 8011060:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8011064:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8011068:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 801106a:	2d00      	cmp	r5, #0
 801106c:	d02e      	beq.n	80110cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801106e:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8011070:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8011074:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8011078:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 801107a:	6833      	ldr	r3, [r6, #0]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	4630      	mov	r0, r6
 8011080:	4798      	blx	r3
    newPresenter->activate();
 8011082:	682b      	ldr	r3, [r5, #0]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4628      	mov	r0, r5
 8011088:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801108a:	4621      	mov	r1, r4
 801108c:	4630      	mov	r0, r6
 801108e:	f005 f975 	bl	801637c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8011092:	6823      	ldr	r3, [r4, #0]
 8011094:	691b      	ldr	r3, [r3, #16]
 8011096:	4620      	mov	r0, r4
 8011098:	4798      	blx	r3
    newTransition->invalidate();
 801109a:	6823      	ldr	r3, [r4, #0]
 801109c:	695b      	ldr	r3, [r3, #20]
 801109e:	4620      	mov	r0, r4
 80110a0:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80110a2:	4628      	mov	r0, r5
 80110a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80110a8:	4b0b      	ldr	r3, [pc, #44]	@ (80110d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 80110aa:	4a0c      	ldr	r2, [pc, #48]	@ (80110dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80110ac:	21a3      	movs	r1, #163	@ 0xa3
 80110ae:	480c      	ldr	r0, [pc, #48]	@ (80110e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80110b0:	f013 fdbe 	bl	8024c30 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80110b4:	4b0b      	ldr	r3, [pc, #44]	@ (80110e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80110b6:	4a09      	ldr	r2, [pc, #36]	@ (80110dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80110b8:	21a4      	movs	r1, #164	@ 0xa4
 80110ba:	4809      	ldr	r0, [pc, #36]	@ (80110e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80110bc:	f013 fdb8 	bl	8024c30 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80110c0:	4b09      	ldr	r3, [pc, #36]	@ (80110e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80110c2:	4a06      	ldr	r2, [pc, #24]	@ (80110dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80110c4:	21a5      	movs	r1, #165	@ 0xa5
 80110c6:	4806      	ldr	r0, [pc, #24]	@ (80110e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80110c8:	f013 fdb2 	bl	8024c30 <__assert_func>
    model->bind(newPresenter);
 80110cc:	462b      	mov	r3, r5
 80110ce:	e7cf      	b.n	8011070 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd4>
 80110d0:	08029690 	.word	0x08029690
 80110d4:	08029774 	.word	0x08029774
 80110d8:	0802935c 	.word	0x0802935c
 80110dc:	080293ec 	.word	0x080293ec
 80110e0:	080294bc 	.word	0x080294bc
 80110e4:	08029500 	.word	0x08029500
 80110e8:	080295a4 	.word	0x080295a4

080110ec <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 80110ec:	b500      	push	{lr}
 80110ee:	b083      	sub	sp, #12
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80110f0:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 80110f4:	9300      	str	r3, [sp, #0]
 80110f6:	4b05      	ldr	r3, [pc, #20]	@ (801110c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x20>)
 80110f8:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 80110fc:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 8011100:	4803      	ldr	r0, [pc, #12]	@ (8011110 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x24>)
 8011102:	f7ff ff4b 	bl	8010f9c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8011106:	b003      	add	sp, #12
 8011108:	f85d fb04 	ldr.w	pc, [sp], #4
 801110c:	240042b8 	.word	0x240042b8
 8011110:	240042b4 	.word	0x240042b4

08011114 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8011114:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8011116:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801111a:	b113      	cbz	r3, 8011122 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 801111c:	6803      	ldr	r3, [r0, #0]
 801111e:	695b      	ldr	r3, [r3, #20]
 8011120:	4798      	blx	r3
        }
    }
 8011122:	bd08      	pop	{r3, pc}

08011124 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8011124:	2000      	movs	r0, #0
 8011126:	4770      	bx	lr

08011128 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8011128:	8081      	strh	r1, [r0, #4]
    }
 801112a:	4770      	bx	lr

0801112c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 801112c:	80c1      	strh	r1, [r0, #6]
    }
 801112e:	4770      	bx	lr

08011130 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8011130:	8101      	strh	r1, [r0, #8]
    }
 8011132:	4770      	bx	lr

08011134 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8011134:	8141      	strh	r1, [r0, #10]
    }
 8011136:	4770      	bx	lr

08011138 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8011138:	4770      	bx	lr

0801113a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 801113a:	4770      	bx	lr

0801113c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 801113c:	4770      	bx	lr

0801113e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 801113e:	4770      	bx	lr

08011140 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8011140:	4770      	bx	lr

08011142 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8011142:	b508      	push	{r3, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8011144:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8011148:	eba1 010c 	sub.w	r1, r1, ip
 801114c:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8011150:	eba2 020c 	sub.w	r2, r2, ip
 8011154:	6803      	ldr	r3, [r0, #0]
 8011156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011158:	b212      	sxth	r2, r2
 801115a:	b209      	sxth	r1, r1
 801115c:	4798      	blx	r3
    }
 801115e:	bd08      	pop	{r3, pc}

08011160 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8011160:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011164:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8011166:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8011168:	8443      	strh	r3, [r0, #34]	@ 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 801116a:	6813      	ldr	r3, [r2, #0]
 801116c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 801116e:	6010      	str	r0, [r2, #0]
    }
 8011170:	4770      	bx	lr

08011172 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8011172:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8011176:	b11a      	cbz	r2, 8011180 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8011178:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 801117c:	b102      	cbz	r2, 8011180 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 801117e:	6018      	str	r0, [r3, #0]
        }
    }
 8011180:	4770      	bx	lr

08011182 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8011182:	4770      	bx	lr

08011184 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8011184:	4770      	bx	lr

08011186 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8011186:	4770      	bx	lr

08011188 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8011188:	4770      	bx	lr

0801118a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 801118a:	4770      	bx	lr

0801118c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 801118c:	4a04      	ldr	r2, [pc, #16]	@ (80111a0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x14>)
 801118e:	6002      	str	r2, [r0, #0]
    {
 8011190:	4a04      	ldr	r2, [pc, #16]	@ (80111a4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x18>)
 8011192:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8011194:	4a04      	ldr	r2, [pc, #16]	@ (80111a8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x1c>)
 8011196:	6042      	str	r2, [r0, #4]
    {
 8011198:	4a04      	ldr	r2, [pc, #16]	@ (80111ac <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 801119a:	6042      	str	r2, [r0, #4]
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	08029800 	.word	0x08029800
 80111a4:	0802a5b0 	.word	0x0802a5b0
 80111a8:	0802a1a8 	.word	0x0802a1a8
 80111ac:	0802a4a4 	.word	0x0802a4a4

080111b0 <_ZN14screenViewBaseD1Ev>:
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);
}

screenViewBase::~screenViewBase()
 80111b0:	4a07      	ldr	r2, [pc, #28]	@ (80111d0 <_ZN14screenViewBaseD1Ev+0x20>)
 80111b2:	6002      	str	r2, [r0, #0]
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 80111b4:	4a07      	ldr	r2, [pc, #28]	@ (80111d4 <_ZN14screenViewBaseD1Ev+0x24>)
 80111b6:	6402      	str	r2, [r0, #64]	@ 0x40
class Widget : public Drawable
 80111b8:	4a07      	ldr	r2, [pc, #28]	@ (80111d8 <_ZN14screenViewBaseD1Ev+0x28>)
 80111ba:	6402      	str	r2, [r0, #64]	@ 0x40
 80111bc:	4a07      	ldr	r2, [pc, #28]	@ (80111dc <_ZN14screenViewBaseD1Ev+0x2c>)
 80111be:	6402      	str	r2, [r0, #64]	@ 0x40
 80111c0:	4907      	ldr	r1, [pc, #28]	@ (80111e0 <_ZN14screenViewBaseD1Ev+0x30>)
 80111c2:	6001      	str	r1, [r0, #0]
 80111c4:	4907      	ldr	r1, [pc, #28]	@ (80111e4 <_ZN14screenViewBaseD1Ev+0x34>)
 80111c6:	6001      	str	r1, [r0, #0]
 80111c8:	4907      	ldr	r1, [pc, #28]	@ (80111e8 <_ZN14screenViewBaseD1Ev+0x38>)
 80111ca:	6041      	str	r1, [r0, #4]
 80111cc:	6042      	str	r2, [r0, #4]
{

}
 80111ce:	4770      	bx	lr
 80111d0:	08029834 	.word	0x08029834
 80111d4:	0802a390 	.word	0x0802a390
 80111d8:	08029798 	.word	0x08029798
 80111dc:	0802a4a4 	.word	0x0802a4a4
 80111e0:	08029800 	.word	0x08029800
 80111e4:	0802a5b0 	.word	0x0802a5b0
 80111e8:	0802a1a8 	.word	0x0802a1a8

080111ec <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{

}
 80111ec:	4770      	bx	lr
	...

080111f0 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 80111f0:	b510      	push	{r4, lr}
 80111f2:	4604      	mov	r4, r0
 80111f4:	4b06      	ldr	r3, [pc, #24]	@ (8011210 <_ZN8touchgfx4ViewI15screenPresenterED0Ev+0x20>)
 80111f6:	6003      	str	r3, [r0, #0]
 80111f8:	4b06      	ldr	r3, [pc, #24]	@ (8011214 <_ZN8touchgfx4ViewI15screenPresenterED0Ev+0x24>)
 80111fa:	6003      	str	r3, [r0, #0]
 80111fc:	4b06      	ldr	r3, [pc, #24]	@ (8011218 <_ZN8touchgfx4ViewI15screenPresenterED0Ev+0x28>)
 80111fe:	6043      	str	r3, [r0, #4]
 8011200:	4b06      	ldr	r3, [pc, #24]	@ (801121c <_ZN8touchgfx4ViewI15screenPresenterED0Ev+0x2c>)
 8011202:	6043      	str	r3, [r0, #4]
 8011204:	2140      	movs	r1, #64	@ 0x40
 8011206:	f013 fce4 	bl	8024bd2 <_ZdlPvj>
 801120a:	4620      	mov	r0, r4
 801120c:	bd10      	pop	{r4, pc}
 801120e:	bf00      	nop
 8011210:	08029800 	.word	0x08029800
 8011214:	0802a5b0 	.word	0x0802a5b0
 8011218:	0802a1a8 	.word	0x0802a1a8
 801121c:	0802a4a4 	.word	0x0802a4a4

08011220 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 8011220:	b510      	push	{r4, lr}
 8011222:	4604      	mov	r4, r0
}
 8011224:	f7ff ffc4 	bl	80111b0 <_ZN14screenViewBaseD1Ev>
 8011228:	216c      	movs	r1, #108	@ 0x6c
 801122a:	4620      	mov	r0, r4
 801122c:	f013 fcd1 	bl	8024bd2 <_ZdlPvj>
 8011230:	4620      	mov	r0, r4
 8011232:	bd10      	pop	{r4, pc}

08011234 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8011234:	b538      	push	{r3, r4, r5, lr}
 8011236:	4604      	mov	r4, r0
 8011238:	4615      	mov	r5, r2
        setX(x);
 801123a:	6803      	ldr	r3, [r0, #0]
 801123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801123e:	4798      	blx	r3
        setY(y);
 8011240:	6823      	ldr	r3, [r4, #0]
 8011242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011244:	4629      	mov	r1, r5
 8011246:	4620      	mov	r0, r4
 8011248:	4798      	blx	r3
    }
 801124a:	bd38      	pop	{r3, r4, r5, pc}

0801124c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4604      	mov	r4, r0
 8011250:	4615      	mov	r5, r2
        setWidth(width);
 8011252:	6803      	ldr	r3, [r0, #0]
 8011254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011256:	4798      	blx	r3
        setHeight(height);
 8011258:	6823      	ldr	r3, [r4, #0]
 801125a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801125c:	4629      	mov	r1, r5
 801125e:	4620      	mov	r0, r4
 8011260:	4798      	blx	r3
    }
 8011262:	bd38      	pop	{r3, r4, r5, pc}

08011264 <_ZN8touchgfx6WidgetC1Ev>:
          visible(true)
 8011264:	4a0b      	ldr	r2, [pc, #44]	@ (8011294 <_ZN8touchgfx6WidgetC1Ev+0x30>)
 8011266:	6002      	str	r2, [r0, #0]
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8011268:	2200      	movs	r2, #0
 801126a:	8082      	strh	r2, [r0, #4]
 801126c:	80c2      	strh	r2, [r0, #6]
 801126e:	8102      	strh	r2, [r0, #8]
 8011270:	8142      	strh	r2, [r0, #10]
 8011272:	8182      	strh	r2, [r0, #12]
 8011274:	81c2      	strh	r2, [r0, #14]
 8011276:	8202      	strh	r2, [r0, #16]
 8011278:	8242      	strh	r2, [r0, #18]
          parent(0),
 801127a:	6142      	str	r2, [r0, #20]
          nextSibling(0),
 801127c:	6182      	str	r2, [r0, #24]
          nextDrawChainElement(0),
 801127e:	61c2      	str	r2, [r0, #28]
          cachedAbsX(0),
 8011280:	8402      	strh	r2, [r0, #32]
          cachedAbsY(0),
 8011282:	8442      	strh	r2, [r0, #34]	@ 0x22
          touchable(false),
 8011284:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
          visible(true)
 8011288:	2201      	movs	r2, #1
 801128a:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 801128e:	4a02      	ldr	r2, [pc, #8]	@ (8011298 <_ZN8touchgfx6WidgetC1Ev+0x34>)
 8011290:	6002      	str	r2, [r0, #0]
 8011292:	4770      	bx	lr
 8011294:	0802a4a4 	.word	0x0802a4a4
 8011298:	08029798 	.word	0x08029798

0801129c <_ZN8touchgfx3BoxC1Ev>:
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801129c:	b510      	push	{r4, lr}
 801129e:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 80112a0:	2226      	movs	r2, #38	@ 0x26
 80112a2:	2100      	movs	r1, #0
 80112a4:	f014 fdb0 	bl	8025e08 <memset>
 80112a8:	4620      	mov	r0, r4
 80112aa:	f7ff ffdb 	bl	8011264 <_ZN8touchgfx6WidgetC1Ev>
 80112ae:	4b04      	ldr	r3, [pc, #16]	@ (80112c0 <_ZN8touchgfx3BoxC1Ev+0x24>)
 80112b0:	6023      	str	r3, [r4, #0]
 80112b2:	23ff      	movs	r3, #255	@ 0xff
 80112b4:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        : color(col)
 80112b8:	2300      	movs	r3, #0
 80112ba:	62a3      	str	r3, [r4, #40]	@ 0x28
    {
    }
 80112bc:	4620      	mov	r0, r4
 80112be:	bd10      	pop	{r4, pc}
 80112c0:	0802a390 	.word	0x0802a390

080112c4 <_ZN14screenViewBaseC1Ev>:
screenViewBase::screenViewBase()
 80112c4:	b570      	push	{r4, r5, r6, lr}
 80112c6:	4604      	mov	r4, r0
        : presenter(0)
 80112c8:	f004 feac 	bl	8016024 <_ZN8touchgfx6ScreenC1Ev>
 80112cc:	4b0f      	ldr	r3, [pc, #60]	@ (801130c <_ZN14screenViewBaseC1Ev+0x48>)
 80112ce:	6023      	str	r3, [r4, #0]
 80112d0:	2600      	movs	r6, #0
 80112d2:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80112d4:	4625      	mov	r5, r4
 80112d6:	4b0e      	ldr	r3, [pc, #56]	@ (8011310 <_ZN14screenViewBaseC1Ev+0x4c>)
 80112d8:	f845 3b40 	str.w	r3, [r5], #64
 80112dc:	4628      	mov	r0, r5
 80112de:	f7ff ffdd 	bl	801129c <_ZN8touchgfx3BoxC1Ev>
        setXY(x, y);
 80112e2:	4632      	mov	r2, r6
 80112e4:	4631      	mov	r1, r6
 80112e6:	4628      	mov	r0, r5
 80112e8:	f7ff ffa4 	bl	8011234 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80112ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80112f0:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80112f4:	4628      	mov	r0, r5
 80112f6:	f7ff ffa9 	bl	801124c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80112fa:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80112fe:	66a3      	str	r3, [r4, #104]	@ 0x68
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8011300:	4629      	mov	r1, r5
 8011302:	1d20      	adds	r0, r4, #4
 8011304:	f001 f960 	bl	80125c8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8011308:	4620      	mov	r0, r4
 801130a:	bd70      	pop	{r4, r5, r6, pc}
 801130c:	08029800 	.word	0x08029800
 8011310:	08029834 	.word	0x08029834

08011314 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8011314:	4800      	ldr	r0, [pc, #0]	@ (8011318 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8011316:	4770      	bx	lr
 8011318:	08029860 	.word	0x08029860

0801131c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 801131c:	2001      	movs	r0, #1
 801131e:	4770      	bx	lr

08011320 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    }
 8011320:	2000      	movs	r0, #0
 8011322:	4770      	bx	lr

08011324 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8011324:	2000      	movs	r0, #0
 8011326:	4770      	bx	lr

08011328 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8011328:	2000      	movs	r0, #0
 801132a:	4770      	bx	lr

0801132c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801132c:	b40e      	push	{r1, r2, r3}
 801132e:	b500      	push	{lr}
 8011330:	b082      	sub	sp, #8
 8011332:	ab03      	add	r3, sp, #12
 8011334:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8011338:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 801133a:	2100      	movs	r1, #0
 801133c:	f004 faa0 	bl	8015880 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8011340:	b002      	add	sp, #8
 8011342:	f85d eb04 	ldr.w	lr, [sp], #4
 8011346:	b003      	add	sp, #12
 8011348:	4770      	bx	lr

0801134a <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801134a:	b40c      	push	{r2, r3}
 801134c:	b500      	push	{lr}
 801134e:	b083      	sub	sp, #12
 8011350:	ab04      	add	r3, sp, #16
 8011352:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8011356:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011358:	f004 fa92 	bl	8015880 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 801135c:	b003      	add	sp, #12
 801135e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011362:	b002      	add	sp, #8
 8011364:	4770      	bx	lr
	...

08011368 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011368:	b510      	push	{r4, lr}
 801136a:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 801136c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801136e:	b133      	cbz	r3, 801137e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011370:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8011372:	b143      	cbz	r3, 8011386 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8011374:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8011376:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801137a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801137c:	b94b      	cbnz	r3, 8011392 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 801137e:	4620      	mov	r0, r4
 8011380:	f005 fbca 	bl	8016b18 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8011384:	bd10      	pop	{r4, pc}
            assert(used > 0);
 8011386:	4b1c      	ldr	r3, [pc, #112]	@ (80113f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8011388:	4a1c      	ldr	r2, [pc, #112]	@ (80113fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 801138a:	21c5      	movs	r1, #197	@ 0xc5
 801138c:	481c      	ldr	r0, [pc, #112]	@ (8011400 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 801138e:	f013 fc4f 	bl	8024c30 <__assert_func>
        substituteGlyphs();
 8011392:	f005 fcbf 	bl	8016d14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011396:	8f20      	ldrh	r0, [r4, #56]	@ 0x38
 8011398:	2801      	cmp	r0, #1
 801139a:	d91d      	bls.n	80113d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 801139c:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801139e:	1c4b      	adds	r3, r1, #1
 80113a0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80113a2:	2b09      	cmp	r3, #9
 80113a4:	d81e      	bhi.n	80113e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 80113a6:	461a      	mov	r2, r3
 80113a8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80113ac:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80113b0:	f640 123f 	movw	r2, #2367	@ 0x93f
 80113b4:	4594      	cmp	ip, r2
 80113b6:	d1e2      	bne.n	801137e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 80113b8:	b1b8      	cbz	r0, 80113ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 80113ba:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 80113be:	8c52      	ldrh	r2, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80113c0:	2b09      	cmp	r3, #9
 80113c2:	d900      	bls.n	80113c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 80113c4:	2300      	movs	r3, #0
 80113c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80113ca:	845a      	strh	r2, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80113cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80113d0:	f640 133f 	movw	r3, #2367	@ 0x93f
 80113d4:	844b      	strh	r3, [r1, #34]	@ 0x22
        }
 80113d6:	e7d2      	b.n	801137e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 80113d8:	4b0a      	ldr	r3, [pc, #40]	@ (8011404 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 80113da:	4a0b      	ldr	r2, [pc, #44]	@ (8011408 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 80113dc:	21cb      	movs	r1, #203	@ 0xcb
 80113de:	4808      	ldr	r0, [pc, #32]	@ (8011400 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80113e0:	f013 fc26 	bl	8024c30 <__assert_func>
            return buffer[index < size ? index : index - size];
 80113e4:	f1a3 020a 	sub.w	r2, r3, #10
 80113e8:	e7de      	b.n	80113a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80113ea:	4b03      	ldr	r3, [pc, #12]	@ (80113f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80113ec:	4a03      	ldr	r2, [pc, #12]	@ (80113fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80113ee:	21c5      	movs	r1, #197	@ 0xc5
 80113f0:	4803      	ldr	r0, [pc, #12]	@ (8011400 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80113f2:	f013 fc1d 	bl	8024c30 <__assert_func>
 80113f6:	bf00      	nop
 80113f8:	08029874 	.word	0x08029874
 80113fc:	08029880 	.word	0x08029880
 8011400:	0802992c 	.word	0x0802992c
 8011404:	08029974 	.word	0x08029974
 8011408:	08029984 	.word	0x08029984

0801140c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 801140c:	b508      	push	{r3, lr}
    fillInputBuffer();
 801140e:	f005 fb4c 	bl	8016aaa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011412:	bd08      	pop	{r3, pc}

08011414 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8011414:	2800      	cmp	r0, #0
 8011416:	d129      	bne.n	801146c <_ZN8touchgfx5Texts11setLanguageEt+0x58>
{
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 801141c:	4b14      	ldr	r3, [pc, #80]	@ (8011470 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 801141e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8011422:	b1bc      	cbz	r4, 8011454 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011424:	6821      	ldr	r1, [r4, #0]
 8011426:	4421      	add	r1, r4
 8011428:	4812      	ldr	r0, [pc, #72]	@ (8011474 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 801142a:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801142c:	6861      	ldr	r1, [r4, #4]
 801142e:	4421      	add	r1, r4
 8011430:	4811      	ldr	r0, [pc, #68]	@ (8011478 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8011432:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011434:	68a1      	ldr	r1, [r4, #8]
 8011436:	440c      	add	r4, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8011438:	4b10      	ldr	r3, [pc, #64]	@ (801147c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 801143a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801143c:	f000 f85e 	bl	80114fc <_ZN17TypedTextDatabase8getFontsEv>
 8011440:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011442:	f000 f857 	bl	80114f4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
    {
        typedTexts = data;
 8011446:	4b0e      	ldr	r3, [pc, #56]	@ (8011480 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8011448:	601c      	str	r4, [r3, #0]
        fonts = f;
 801144a:	4b0e      	ldr	r3, [pc, #56]	@ (8011484 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 801144c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 801144e:	4b0e      	ldr	r3, [pc, #56]	@ (8011488 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8011450:	8018      	strh	r0, [r3, #0]
    }
}
 8011452:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8011454:	4b07      	ldr	r3, [pc, #28]	@ (8011474 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8011456:	490d      	ldr	r1, [pc, #52]	@ (801148c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8011458:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801145a:	4b07      	ldr	r3, [pc, #28]	@ (8011478 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 801145c:	490c      	ldr	r1, [pc, #48]	@ (8011490 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 801145e:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011460:	4b0c      	ldr	r3, [pc, #48]	@ (8011494 <_ZN8touchgfx5Texts11setLanguageEt+0x80>)
 8011462:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    if (currentLanguageTypedText)
 8011466:	2c00      	cmp	r4, #0
 8011468:	d1e6      	bne.n	8011438 <_ZN8touchgfx5Texts11setLanguageEt+0x24>
 801146a:	e7f2      	b.n	8011452 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
 801146c:	4770      	bx	lr
 801146e:	bf00      	nop
 8011470:	2400316c 	.word	0x2400316c
 8011474:	24003164 	.word	0x24003164
 8011478:	24003160 	.word	0x24003160
 801147c:	24003168 	.word	0x24003168
 8011480:	240042c8 	.word	0x240042c8
 8011484:	240042d0 	.word	0x240042d0
 8011488:	240042cc 	.word	0x240042cc
 801148c:	0802bf68 	.word	0x0802bf68
 8011490:	0802bb18 	.word	0x0802bb18
 8011494:	0802c3a0 	.word	0x0802c3a0

08011498 <_Z41__static_initialization_and_destruction_0ii>:
    case 10:
        touchgfx_fonts[10] = &(getFont_NanumBarunGothic_30_2bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011498:	2801      	cmp	r0, #1
 801149a:	d000      	beq.n	801149e <_Z41__static_initialization_and_destruction_0ii+0x6>
 801149c:	4770      	bx	lr
 801149e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80114a2:	4299      	cmp	r1, r3
 80114a4:	d1fa      	bne.n	801149c <_Z41__static_initialization_and_destruction_0ii+0x4>
 80114a6:	b510      	push	{r4, lr}
    &(getFont_NanumBarunGothic_20_2bpp()),
 80114a8:	f7ff f8de 	bl	8010668 <_Z32getFont_NanumBarunGothic_20_2bppv>
};
 80114ac:	4c10      	ldr	r4, [pc, #64]	@ (80114f0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80114ae:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_18_2bpp()),
 80114b0:	f7ff fabc 	bl	8010a2c <_Z23getFont_verdana_18_2bppv>
};
 80114b4:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_40_2bpp()),
 80114b6:	f7ff fba5 	bl	8010c04 <_Z23getFont_verdana_40_2bppv>
};
 80114ba:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_30_2bpp()),
 80114bc:	f7ff fb52 	bl	8010b64 <_Z23getFont_verdana_30_2bppv>
};
 80114c0:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_25_2bpp()),
 80114c2:	f7ff fb01 	bl	8010ac8 <_Z23getFont_verdana_25_2bppv>
};
 80114c6:	6120      	str	r0, [r4, #16]
    &(getFont_NanumBarunGothic_17_2bpp()),
 80114c8:	f7ff f87c 	bl	80105c4 <_Z32getFont_NanumBarunGothic_17_2bppv>
};
 80114cc:	6160      	str	r0, [r4, #20]
    &(getFont_malgun_18_2bpp()),
 80114ce:	f7ff fa11 	bl	80108f4 <_Z22getFont_malgun_18_2bppv>
};
 80114d2:	61a0      	str	r0, [r4, #24]
    &(getFont_malgunbd_30_2bpp()),
 80114d4:	f7ff fa5c 	bl	8010990 <_Z24getFont_malgunbd_30_2bppv>
};
 80114d8:	61e0      	str	r0, [r4, #28]
    &(getFont_NanumBarunGothic_38_2bpp()),
 80114da:	f7ff f9b9 	bl	8010850 <_Z32getFont_NanumBarunGothic_38_2bppv>
};
 80114de:	6220      	str	r0, [r4, #32]
    &(getFont_NanumBarunGothic_26_2bpp()),
 80114e0:	f7ff f914 	bl	801070c <_Z32getFont_NanumBarunGothic_26_2bppv>
};
 80114e4:	6260      	str	r0, [r4, #36]	@ 0x24
    &(getFont_NanumBarunGothic_30_2bpp())
 80114e6:	f7ff f961 	bl	80107ac <_Z32getFont_NanumBarunGothic_30_2bppv>
};
 80114ea:	62a0      	str	r0, [r4, #40]	@ 0x28
} // namespace TypedTextDatabase
 80114ec:	bd10      	pop	{r4, pc}
 80114ee:	bf00      	nop
 80114f0:	24003170 	.word	0x24003170

080114f4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 80114f4:	f44f 708a 	mov.w	r0, #276	@ 0x114
 80114f8:	4770      	bx	lr
	...

080114fc <_ZN17TypedTextDatabase8getFontsEv>:
}
 80114fc:	4800      	ldr	r0, [pc, #0]	@ (8011500 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80114fe:	4770      	bx	lr
 8011500:	24003170 	.word	0x24003170

08011504 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8011504:	b508      	push	{r3, lr}
 8011506:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801150a:	2001      	movs	r0, #1
 801150c:	f7ff ffc4 	bl	8011498 <_Z41__static_initialization_and_destruction_0ii>
 8011510:	bd08      	pop	{r3, pc}
	...

08011514 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011514:	4a08      	ldr	r2, [pc, #32]	@ (8011538 <_ZN19FrontendApplicationD1Ev+0x24>)
 8011516:	6002      	str	r2, [r0, #0]
    virtual ~FrontendApplicationBase() { }
 8011518:	4a08      	ldr	r2, [pc, #32]	@ (801153c <_ZN19FrontendApplicationD1Ev+0x28>)
 801151a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801151c:	4a08      	ldr	r2, [pc, #32]	@ (8011540 <_ZN19FrontendApplicationD1Ev+0x2c>)
 801151e:	f8c0 2144 	str.w	r2, [r0, #324]	@ 0x144
    {
 8011522:	4a08      	ldr	r2, [pc, #32]	@ (8011544 <_ZN19FrontendApplicationD1Ev+0x30>)
 8011524:	f8c0 2144 	str.w	r2, [r0, #324]	@ 0x144
class MVPApplication : public Application
 8011528:	4a07      	ldr	r2, [pc, #28]	@ (8011548 <_ZN19FrontendApplicationD1Ev+0x34>)
 801152a:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 801152c:	4a07      	ldr	r2, [pc, #28]	@ (801154c <_ZN19FrontendApplicationD1Ev+0x38>)
 801152e:	6002      	str	r2, [r0, #0]
 8011530:	4a07      	ldr	r2, [pc, #28]	@ (8011550 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8011532:	6002      	str	r2, [r0, #0]
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	08029ac4 	.word	0x08029ac4
 801153c:	08029720 	.word	0x08029720
 8011540:	08029708 	.word	0x08029708
 8011544:	08029678 	.word	0x08029678
 8011548:	080296b4 	.word	0x080296b4
 801154c:	0802a450 	.word	0x0802a450
 8011550:	08029650 	.word	0x08029650

08011554 <_ZN19FrontendApplicationD0Ev>:
 8011554:	b510      	push	{r4, lr}
 8011556:	4604      	mov	r4, r0
 8011558:	4b0a      	ldr	r3, [pc, #40]	@ (8011584 <_ZN19FrontendApplicationD0Ev+0x30>)
 801155a:	6003      	str	r3, [r0, #0]
 801155c:	4b0a      	ldr	r3, [pc, #40]	@ (8011588 <_ZN19FrontendApplicationD0Ev+0x34>)
 801155e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011560:	4b0a      	ldr	r3, [pc, #40]	@ (801158c <_ZN19FrontendApplicationD0Ev+0x38>)
 8011562:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
    {
 8011566:	4b0a      	ldr	r3, [pc, #40]	@ (8011590 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8011568:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
 801156c:	4b09      	ldr	r3, [pc, #36]	@ (8011594 <_ZN19FrontendApplicationD0Ev+0x40>)
 801156e:	6003      	str	r3, [r0, #0]
 8011570:	4b09      	ldr	r3, [pc, #36]	@ (8011598 <_ZN19FrontendApplicationD0Ev+0x44>)
 8011572:	6003      	str	r3, [r0, #0]
 8011574:	4b09      	ldr	r3, [pc, #36]	@ (801159c <_ZN19FrontendApplicationD0Ev+0x48>)
 8011576:	6003      	str	r3, [r0, #0]
 8011578:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 801157c:	f013 fb29 	bl	8024bd2 <_ZdlPvj>
 8011580:	4620      	mov	r0, r4
 8011582:	bd10      	pop	{r4, pc}
 8011584:	08029ac4 	.word	0x08029ac4
 8011588:	08029720 	.word	0x08029720
 801158c:	08029708 	.word	0x08029708
 8011590:	08029678 	.word	0x08029678
 8011594:	080296b4 	.word	0x080296b4
 8011598:	0802a450 	.word	0x0802a450
 801159c:	08029650 	.word	0x08029650

080115a0 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80115a0:	b510      	push	{r4, lr}
 80115a2:	4604      	mov	r4, r0
    {
        model.tick();
 80115a4:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80115a8:	f000 f811 	bl	80115ce <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80115ac:	4620      	mov	r0, r4
 80115ae:	f003 fa9b 	bl	8014ae8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80115b2:	bd10      	pop	{r4, pc}

080115b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80115b4:	b510      	push	{r4, lr}
 80115b6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80115b8:	f7ff fc76 	bl	8010ea8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80115bc:	4b01      	ldr	r3, [pc, #4]	@ (80115c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 80115be:	6023      	str	r3, [r4, #0]
{

}
 80115c0:	4620      	mov	r0, r4
 80115c2:	bd10      	pop	{r4, pc}
 80115c4:	08029ac4 	.word	0x08029ac4

080115c8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80115c8:	2200      	movs	r2, #0
 80115ca:	6002      	str	r2, [r0, #0]
{

}
 80115cc:	4770      	bx	lr

080115ce <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80115ce:	4770      	bx	lr

080115d0 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 80115d0:	4770      	bx	lr

080115d2 <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 80115d2:	4770      	bx	lr

080115d4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 80115d4:	4b01      	ldr	r3, [pc, #4]	@ (80115dc <_ZN8touchgfx9PresenterD1Ev+0x8>)
 80115d6:	6003      	str	r3, [r0, #0]
    }
 80115d8:	4770      	bx	lr
 80115da:	bf00      	nop
 80115dc:	08029b18 	.word	0x08029b18

080115e0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80115e0:	4b01      	ldr	r3, [pc, #4]	@ (80115e8 <_ZN13ModelListenerD1Ev+0x8>)
 80115e2:	6003      	str	r3, [r0, #0]
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	08029b30 	.word	0x08029b30

080115ec <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 80115ec:	4a04      	ldr	r2, [pc, #16]	@ (8011600 <_ZN15screenPresenterD1Ev+0x14>)
 80115ee:	6002      	str	r2, [r0, #0]
 80115f0:	3218      	adds	r2, #24
 80115f2:	6042      	str	r2, [r0, #4]
 80115f4:	4a03      	ldr	r2, [pc, #12]	@ (8011604 <_ZN15screenPresenterD1Ev+0x18>)
 80115f6:	6042      	str	r2, [r0, #4]
    {
 80115f8:	4a03      	ldr	r2, [pc, #12]	@ (8011608 <_ZN15screenPresenterD1Ev+0x1c>)
 80115fa:	6002      	str	r2, [r0, #0]
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop
 8011600:	08029b40 	.word	0x08029b40
 8011604:	08029b30 	.word	0x08029b30
 8011608:	08029b18 	.word	0x08029b18

0801160c <_ZThn4_N15screenPresenterD1Ev>:
 801160c:	f1a0 0004 	sub.w	r0, r0, #4
 8011610:	e7ec      	b.n	80115ec <_ZN15screenPresenterD1Ev>
 8011612:	bf00      	nop

08011614 <_ZN15screenPresenter8activateEv>:
}

void screenPresenter::activate()
{

}
 8011614:	4770      	bx	lr

08011616 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{

}
 8011616:	4770      	bx	lr

08011618 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011618:	b510      	push	{r4, lr}
 801161a:	4604      	mov	r4, r0
    {
 801161c:	4b03      	ldr	r3, [pc, #12]	@ (801162c <_ZN8touchgfx9PresenterD0Ev+0x14>)
 801161e:	6003      	str	r3, [r0, #0]
    }
 8011620:	2104      	movs	r1, #4
 8011622:	f013 fad6 	bl	8024bd2 <_ZdlPvj>
 8011626:	4620      	mov	r0, r4
 8011628:	bd10      	pop	{r4, pc}
 801162a:	bf00      	nop
 801162c:	08029b18 	.word	0x08029b18

08011630 <_ZN13ModelListenerD0Ev>:
 8011630:	b510      	push	{r4, lr}
 8011632:	4604      	mov	r4, r0
 8011634:	4b03      	ldr	r3, [pc, #12]	@ (8011644 <_ZN13ModelListenerD0Ev+0x14>)
 8011636:	6003      	str	r3, [r0, #0]
 8011638:	2108      	movs	r1, #8
 801163a:	f013 faca 	bl	8024bd2 <_ZdlPvj>
 801163e:	4620      	mov	r0, r4
 8011640:	bd10      	pop	{r4, pc}
 8011642:	bf00      	nop
 8011644:	08029b30 	.word	0x08029b30

08011648 <_ZN15screenPresenterD0Ev>:
 8011648:	b510      	push	{r4, lr}
 801164a:	4604      	mov	r4, r0
 801164c:	4b06      	ldr	r3, [pc, #24]	@ (8011668 <_ZN15screenPresenterD0Ev+0x20>)
 801164e:	6003      	str	r3, [r0, #0]
 8011650:	3318      	adds	r3, #24
 8011652:	6043      	str	r3, [r0, #4]
 8011654:	4b05      	ldr	r3, [pc, #20]	@ (801166c <_ZN15screenPresenterD0Ev+0x24>)
 8011656:	6043      	str	r3, [r0, #4]
    {
 8011658:	4b05      	ldr	r3, [pc, #20]	@ (8011670 <_ZN15screenPresenterD0Ev+0x28>)
 801165a:	6003      	str	r3, [r0, #0]
 801165c:	2110      	movs	r1, #16
 801165e:	f013 fab8 	bl	8024bd2 <_ZdlPvj>
 8011662:	4620      	mov	r0, r4
 8011664:	bd10      	pop	{r4, pc}
 8011666:	bf00      	nop
 8011668:	08029b40 	.word	0x08029b40
 801166c:	08029b30 	.word	0x08029b30
 8011670:	08029b18 	.word	0x08029b18

08011674 <_ZThn4_N15screenPresenterD0Ev>:
 8011674:	f1a0 0004 	sub.w	r0, r0, #4
 8011678:	e7e6      	b.n	8011648 <_ZN15screenPresenterD0Ev>
 801167a:	bf00      	nop

0801167c <_ZN15screenPresenterC1ER10screenView>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 801167c:	4a05      	ldr	r2, [pc, #20]	@ (8011694 <_ZN15screenPresenterC1ER10screenView+0x18>)
 801167e:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 8011680:	4a05      	ldr	r2, [pc, #20]	@ (8011698 <_ZN15screenPresenterC1ER10screenView+0x1c>)
 8011682:	6042      	str	r2, [r0, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	6082      	str	r2, [r0, #8]
    : view(v)
 8011688:	4a04      	ldr	r2, [pc, #16]	@ (801169c <_ZN15screenPresenterC1ER10screenView+0x20>)
 801168a:	6002      	str	r2, [r0, #0]
 801168c:	3218      	adds	r2, #24
 801168e:	6042      	str	r2, [r0, #4]
 8011690:	60c1      	str	r1, [r0, #12]
}
 8011692:	4770      	bx	lr
 8011694:	08029b18 	.word	0x08029b18
 8011698:	08029b30 	.word	0x08029b30
 801169c:	08029b40 	.word	0x08029b40

080116a0 <_ZN10screenView14tearDownScreenEv>:
}

void screenView::tearDownScreen()
{
    screenViewBase::tearDownScreen();
}
 80116a0:	4770      	bx	lr
	...

080116a4 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 80116a4:	b510      	push	{r4, lr}
 80116a6:	4604      	mov	r4, r0
 80116a8:	4b02      	ldr	r3, [pc, #8]	@ (80116b4 <_ZN10screenViewD1Ev+0x10>)
 80116aa:	6003      	str	r3, [r0, #0]
 80116ac:	f7ff fd80 	bl	80111b0 <_ZN14screenViewBaseD1Ev>
 80116b0:	4620      	mov	r0, r4
 80116b2:	bd10      	pop	{r4, pc}
 80116b4:	08029b68 	.word	0x08029b68

080116b8 <_ZN10screenViewD0Ev>:
 80116b8:	b510      	push	{r4, lr}
 80116ba:	4604      	mov	r4, r0
 80116bc:	4b04      	ldr	r3, [pc, #16]	@ (80116d0 <_ZN10screenViewD0Ev+0x18>)
 80116be:	6003      	str	r3, [r0, #0]
 80116c0:	f7ff fd76 	bl	80111b0 <_ZN14screenViewBaseD1Ev>
 80116c4:	216c      	movs	r1, #108	@ 0x6c
 80116c6:	4620      	mov	r0, r4
 80116c8:	f013 fa83 	bl	8024bd2 <_ZdlPvj>
 80116cc:	4620      	mov	r0, r4
 80116ce:	bd10      	pop	{r4, pc}
 80116d0:	08029b68 	.word	0x08029b68

080116d4 <_ZN10screenViewC1Ev>:
screenView::screenView()
 80116d4:	b510      	push	{r4, lr}
 80116d6:	4604      	mov	r4, r0
 80116d8:	f7ff fdf4 	bl	80112c4 <_ZN14screenViewBaseC1Ev>
 80116dc:	4b01      	ldr	r3, [pc, #4]	@ (80116e4 <_ZN10screenViewC1Ev+0x10>)
 80116de:	6023      	str	r3, [r4, #0]
}
 80116e0:	4620      	mov	r0, r4
 80116e2:	bd10      	pop	{r4, pc}
 80116e4:	08029b68 	.word	0x08029b68

080116e8 <_ZN10screenView11setupScreenEv>:
{
 80116e8:	b508      	push	{r3, lr}
    screenViewBase::setupScreen();
 80116ea:	f7ff fd7f 	bl	80111ec <_ZN14screenViewBase11setupScreenEv>
}
 80116ee:	bd08      	pop	{r3, pc}

080116f0 <_ZN20STM32TouchController4initEv>:
{
    /**
     * Initialize touch controller and driver
     *
     */
}
 80116f0:	4770      	bx	lr
	...

080116f4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80116f4:	4a02      	ldr	r2, [pc, #8]	@ (8011700 <_ZN20STM32TouchControllerD1Ev+0xc>)
 80116f6:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 80116f8:	4a02      	ldr	r2, [pc, #8]	@ (8011704 <_ZN20STM32TouchControllerD1Ev+0x10>)
 80116fa:	6002      	str	r2, [r0, #0]
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop
 8011700:	08029bb4 	.word	0x08029bb4
 8011704:	08029b9c 	.word	0x08029b9c

08011708 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011708:	b530      	push	{r4, r5, lr}
 801170a:	b08d      	sub	sp, #52	@ 0x34
 801170c:	460d      	mov	r5, r1
 801170e:	4614      	mov	r4, r2
     *
     */

	touch_info_t info;

	if (touchGetInfo(&info) == true)
 8011710:	a801      	add	r0, sp, #4
 8011712:	f7f3 fc81 	bl	8005018 <touchGetInfo>
 8011716:	b118      	cbz	r0, 8011720 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
	{
		if (info.count > 0)
 8011718:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801171c:	b913      	cbnz	r3, 8011724 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1c>
		  x = info.point[0].x;
		  y = info.point[0].y;
		  return true;
		}
	}
  return false;
 801171e:	2000      	movs	r0, #0
}
 8011720:	b00d      	add	sp, #52	@ 0x34
 8011722:	bd30      	pop	{r4, r5, pc}
		  x = info.point[0].x;
 8011724:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8011728:	602b      	str	r3, [r5, #0]
		  y = info.point[0].y;
 801172a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801172e:	6023      	str	r3, [r4, #0]
		  return true;
 8011730:	e7f6      	b.n	8011720 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
	...

08011734 <_ZN20STM32TouchControllerD0Ev>:
 8011734:	b510      	push	{r4, lr}
 8011736:	4604      	mov	r4, r0
 8011738:	4b04      	ldr	r3, [pc, #16]	@ (801174c <_ZN20STM32TouchControllerD0Ev+0x18>)
 801173a:	6003      	str	r3, [r0, #0]
 801173c:	4b04      	ldr	r3, [pc, #16]	@ (8011750 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 801173e:	6003      	str	r3, [r0, #0]
 8011740:	2104      	movs	r1, #4
 8011742:	f013 fa46 	bl	8024bd2 <_ZdlPvj>
 8011746:	4620      	mov	r0, r4
 8011748:	bd10      	pop	{r4, pc}
 801174a:	bf00      	nop
 801174c:	08029bb4 	.word	0x08029bb4
 8011750:	08029b9c 	.word	0x08029b9c

08011754 <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 8011754:	4770      	bx	lr

08011756 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8011756:	4770      	bx	lr

08011758 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8011758:	4770      	bx	lr

0801175a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801175a:	4770      	bx	lr

0801175c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
        requestedOrientation = orientation;
 801175c:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8011760:	2301      	movs	r3, #1
 8011762:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8011766:	4770      	bx	lr

08011768 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8011768:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 801176a:	f890 307a 	ldrb.w	r3, [r0, #122]	@ 0x7a
 801176e:	b123      	cbz	r3, 801177a <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 8011770:	6840      	ldr	r0, [r0, #4]
 8011772:	6803      	ldr	r3, [r0, #0]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8011778:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 801177a:	2000      	movs	r0, #0
 801177c:	e7fc      	b.n	8011778 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0801177e <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 801177e:	2000      	movs	r0, #0
 8011780:	4770      	bx	lr
	...

08011784 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8011784:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011786:	3900      	subs	r1, #0
 8011788:	bf18      	it	ne
 801178a:	2101      	movne	r1, #1
 801178c:	4b01      	ldr	r3, [pc, #4]	@ (8011794 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 801178e:	7019      	strb	r1, [r3, #0]
    }
 8011790:	4770      	bx	lr
 8011792:	bf00      	nop
 8011794:	24004277 	.word	0x24004277

08011798 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8011798:	2000      	movs	r0, #0
 801179a:	4770      	bx	lr

0801179c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 801179c:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 801179e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80117a0:	b10b      	cbz	r3, 80117a6 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 80117a2:	4608      	mov	r0, r1
 80117a4:	4798      	blx	r3
        }
    }
 80117a6:	bd08      	pop	{r3, pc}

080117a8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80117a8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80117ac:	4770      	bx	lr

080117ae <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80117ae:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 80117b0:	6840      	ldr	r0, [r0, #4]
 80117b2:	6803      	ldr	r3, [r0, #0]
 80117b4:	699b      	ldr	r3, [r3, #24]
 80117b6:	4798      	blx	r3
    }
 80117b8:	bd08      	pop	{r3, pc}
	...

080117bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80117bc:	f890 2078 	ldrb.w	r2, [r0, #120]	@ 0x78
 80117c0:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d00c      	beq.n	80117e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 80117c8:	4b0c      	ldr	r3, [pc, #48]	@ (80117fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	b9ab      	cbnz	r3, 80117fa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80117ce:	4a0c      	ldr	r2, [pc, #48]	@ (8011800 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 80117d0:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80117d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011804 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 80117d4:	8818      	ldrh	r0, [r3, #0]
 80117d6:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80117d8:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80117da:	4b08      	ldr	r3, [pc, #32]	@ (80117fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80117dc:	2201      	movs	r2, #1
 80117de:	701a      	strb	r2, [r3, #0]
 80117e0:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 80117e2:	4b06      	ldr	r3, [pc, #24]	@ (80117fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	b143      	cbz	r3, 80117fa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 80117e8:	4a05      	ldr	r2, [pc, #20]	@ (8011800 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 80117ea:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80117ec:	4b05      	ldr	r3, [pc, #20]	@ (8011804 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 80117ee:	8818      	ldrh	r0, [r3, #0]
 80117f0:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 80117f2:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80117f4:	4b01      	ldr	r3, [pc, #4]	@ (80117fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80117f6:	2200      	movs	r2, #0
 80117f8:	701a      	strb	r2, [r3, #0]
        }
    }
 80117fa:	4770      	bx	lr
 80117fc:	24004270 	.word	0x24004270
 8011800:	2400426e 	.word	0x2400426e
 8011804:	2400426c 	.word	0x2400426c

08011808 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011808:	4a03      	ldr	r2, [pc, #12]	@ (8011818 <_ZN11TouchGFXHALD1Ev+0x10>)
 801180a:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801180c:	4a03      	ldr	r2, [pc, #12]	@ (801181c <_ZN11TouchGFXHALD1Ev+0x14>)
 801180e:	6002      	str	r2, [r0, #0]
    {
 8011810:	4a03      	ldr	r2, [pc, #12]	@ (8011820 <_ZN11TouchGFXHALD1Ev+0x18>)
 8011812:	6002      	str	r2, [r0, #0]
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	08029d40 	.word	0x08029d40
 801181c:	0802a09c 	.word	0x0802a09c
 8011820:	0802a244 	.word	0x0802a244

08011824 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011824:	b510      	push	{r4, lr}
 8011826:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011828:	f000 fe1e 	bl	8012468 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801182c:	4b02      	ldr	r3, [pc, #8]	@ (8011838 <_ZN11TouchGFXHAL10initializeEv+0x14>)
 801182e:	6463      	str	r3, [r4, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011830:	4b02      	ldr	r3, [pc, #8]	@ (801183c <_ZN11TouchGFXHAL10initializeEv+0x18>)
 8011832:	2201      	movs	r2, #1
 8011834:	701a      	strb	r2, [r3, #0]

    TouchGFXGeneratedHAL::setAnimationStorage((void *)(0xC0000000 + 800*480*2*2));
}
 8011836:	bd10      	pop	{r4, pc}
 8011838:	c0177000 	.word	0xc0177000
 801183c:	24004277 	.word	0x24004277

08011840 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011840:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011842:	f000 fd9d 	bl	8012380 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 8011846:	bd08      	pop	{r3, pc}

08011848 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8011848:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801184a:	f000 fd9f 	bl	801238c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801184e:	bd08      	pop	{r3, pc}

08011850 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011850:	b508      	push	{r3, lr}
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011852:	f000 fe33 	bl	80124bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8011856:	bd08      	pop	{r3, pc}

08011858 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011858:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 801185a:	f000 fe33 	bl	80124c4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
}
 801185e:	bd08      	pop	{r3, pc}

08011860 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011860:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011862:	f000 fd4b 	bl	80122fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011866:	bd08      	pop	{r3, pc}

08011868 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011868:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801186a:	f000 fd51 	bl	8012310 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801186e:	bd08      	pop	{r3, pc}

08011870 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011870:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011872:	f000 fd57 	bl	8012324 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011876:	bd08      	pop	{r3, pc}

08011878 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011878:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801187a:	f000 fd67 	bl	801234c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801187e:	bd08      	pop	{r3, pc}

08011880 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011880:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::beginFrame();
 8011882:	f000 fe11 	bl	80124a8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
}
 8011886:	bd08      	pop	{r3, pc}

08011888 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011888:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::endFrame();
 801188a:	f000 fe11 	bl	80124b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 801188e:	bd08      	pop	{r3, pc}

08011890 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011890:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8011892:	b161      	cbz	r1, 80118ae <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8011894:	63c1      	str	r1, [r0, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011896:	6402      	str	r2, [r0, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8011898:	3a00      	subs	r2, #0
 801189a:	bf18      	it	ne
 801189c:	2201      	movne	r2, #1
 801189e:	4907      	ldr	r1, [pc, #28]	@ (80118bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80118a0:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80118a2:	6802      	ldr	r2, [r0, #0]
 80118a4:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 80118a8:	4619      	mov	r1, r3
 80118aa:	4790      	blx	r2
    }
 80118ac:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80118ae:	4b04      	ldr	r3, [pc, #16]	@ (80118c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80118b0:	4a04      	ldr	r2, [pc, #16]	@ (80118c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80118b2:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80118b6:	4804      	ldr	r0, [pc, #16]	@ (80118c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80118b8:	f013 f9ba 	bl	8024c30 <__assert_func>
 80118bc:	24004276 	.word	0x24004276
 80118c0:	08029bc4 	.word	0x08029bc4
 80118c4:	08029bfc 	.word	0x08029bfc
 80118c8:	08029c4c 	.word	0x08029c4c

080118cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80118cc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80118ce:	4b09      	ldr	r3, [pc, #36]	@ (80118f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80118d0:	881b      	ldrh	r3, [r3, #0]
 80118d2:	428b      	cmp	r3, r1
 80118d4:	d808      	bhi.n	80118e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80118d6:	4b08      	ldr	r3, [pc, #32]	@ (80118f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	4293      	cmp	r3, r2
 80118dc:	d804      	bhi.n	80118e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 80118de:	4b07      	ldr	r3, [pc, #28]	@ (80118fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80118e0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80118e2:	4b07      	ldr	r3, [pc, #28]	@ (8011900 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80118e4:	801a      	strh	r2, [r3, #0]
    }
 80118e6:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80118e8:	4b06      	ldr	r3, [pc, #24]	@ (8011904 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80118ea:	4a07      	ldr	r2, [pc, #28]	@ (8011908 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80118ec:	219e      	movs	r1, #158	@ 0x9e
 80118ee:	4807      	ldr	r0, [pc, #28]	@ (801190c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80118f0:	f013 f99e 	bl	8024c30 <__assert_func>
 80118f4:	2400426c 	.word	0x2400426c
 80118f8:	2400426e 	.word	0x2400426e
 80118fc:	24004272 	.word	0x24004272
 8011900:	24004274 	.word	0x24004274
 8011904:	08029c90 	.word	0x08029c90
 8011908:	08029cf4 	.word	0x08029cf4
 801190c:	08029c4c 	.word	0x08029c4c

08011910 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8011910:	b510      	push	{r4, lr}
 8011912:	4604      	mov	r4, r0
        swapFrameBuffers();
 8011914:	f001 fe9c 	bl	8013650 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8011918:	6823      	ldr	r3, [r4, #0]
 801191a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801191e:	4620      	mov	r0, r4
 8011920:	4798      	blx	r3
    }
 8011922:	bd10      	pop	{r4, pc}

08011924 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011924:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8011926:	f001 f8e5 	bl	8012af4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 801192a:	bd08      	pop	{r3, pc}

0801192c <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801192c:	b510      	push	{r4, lr}
 801192e:	4604      	mov	r4, r0
 8011930:	4b05      	ldr	r3, [pc, #20]	@ (8011948 <_ZN11TouchGFXHALD0Ev+0x1c>)
 8011932:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011934:	4b05      	ldr	r3, [pc, #20]	@ (801194c <_ZN11TouchGFXHALD0Ev+0x20>)
 8011936:	6003      	str	r3, [r0, #0]
    {
 8011938:	4b05      	ldr	r3, [pc, #20]	@ (8011950 <_ZN11TouchGFXHALD0Ev+0x24>)
 801193a:	6003      	str	r3, [r0, #0]
 801193c:	217c      	movs	r1, #124	@ 0x7c
 801193e:	f013 f948 	bl	8024bd2 <_ZdlPvj>
 8011942:	4620      	mov	r0, r4
 8011944:	bd10      	pop	{r4, pc}
 8011946:	bf00      	nop
 8011948:	08029d40 	.word	0x08029d40
 801194c:	0802a09c 	.word	0x0802a09c
 8011950:	0802a244 	.word	0x0802a244

08011954 <_ZN8touchgfx10OSWrappers10initializeEv>:
/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    fb_sem = 0;
 8011954:	2300      	movs	r3, #0
 8011956:	4a02      	ldr	r2, [pc, #8]	@ (8011960 <_ZN8touchgfx10OSWrappers10initializeEv+0xc>)
 8011958:	6013      	str	r3, [r2, #0]
    vsync_sem = 0;
 801195a:	4a02      	ldr	r2, [pc, #8]	@ (8011964 <_ZN8touchgfx10OSWrappers10initializeEv+0x10>)
 801195c:	6013      	str	r3, [r2, #0]
}
 801195e:	4770      	bx	lr
 8011960:	240031a0 	.word	0x240031a0
 8011964:	2400319c 	.word	0x2400319c

08011968 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    while (fb_sem);
 8011968:	4b03      	ldr	r3, [pc, #12]	@ (8011978 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1fb      	bne.n	8011968 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
    fb_sem = 1;
 8011970:	4b01      	ldr	r3, [pc, #4]	@ (8011978 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8011972:	2201      	movs	r2, #1
 8011974:	601a      	str	r2, [r3, #0]
}
 8011976:	4770      	bx	lr
 8011978:	240031a0 	.word	0x240031a0

0801197c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    fb_sem = 0;
 801197c:	4b01      	ldr	r3, [pc, #4]	@ (8011984 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 801197e:	2200      	movs	r2, #0
 8011980:	601a      	str	r2, [r3, #0]
}
 8011982:	4770      	bx	lr
 8011984:	240031a0 	.word	0x240031a0

08011988 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    fb_sem = 1;
 8011988:	4b01      	ldr	r3, [pc, #4]	@ (8011990 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 801198a:	2201      	movs	r2, #1
 801198c:	601a      	str	r2, [r3, #0]
}
 801198e:	4770      	bx	lr
 8011990:	240031a0 	.word	0x240031a0

08011994 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
    fb_sem = 0;
 8011994:	4b01      	ldr	r3, [pc, #4]	@ (801199c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
 8011996:	2200      	movs	r2, #0
 8011998:	601a      	str	r2, [r3, #0]
}
 801199a:	4770      	bx	lr
 801199c:	240031a0 	.word	0x240031a0

080119a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    vsync_sem = 1;
 80119a0:	4b01      	ldr	r3, [pc, #4]	@ (80119a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x8>)
 80119a2:	2201      	movs	r2, #1
 80119a4:	601a      	str	r2, [r3, #0]
}
 80119a6:	4770      	bx	lr
 80119a8:	2400319c 	.word	0x2400319c

080119ac <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>:
  * Signal that the rendering of the frame has completed. Used by
  * some systems to avoid using any previous vsync.
  */
void OSWrappers::signalRenderingDone()
{
    vsync_sem = 0;
 80119ac:	4b01      	ldr	r3, [pc, #4]	@ (80119b4 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv+0x8>)
 80119ae:	2200      	movs	r2, #0
 80119b0:	601a      	str	r2, [r3, #0]
}
 80119b2:	4770      	bx	lr
 80119b4:	2400319c 	.word	0x2400319c

080119b8 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>:
 *
 * @return True if VSync occurred.
 */
bool OSWrappers::isVSyncAvailable()
{
    return vsync_sem;
 80119b8:	4b02      	ldr	r3, [pc, #8]	@ (80119c4 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv+0xc>)
 80119ba:	6818      	ldr	r0, [r3, #0]
}
 80119bc:	3800      	subs	r0, #0
 80119be:	bf18      	it	ne
 80119c0:	2001      	movne	r0, #1
 80119c2:	4770      	bx	lr
 80119c4:	2400319c 	.word	0x2400319c

080119c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 80119c8:	b508      	push	{r3, lr}
    if (vsync_sem)
 80119ca:	4b06      	ldr	r3, [pc, #24]	@ (80119e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	b13b      	cbz	r3, 80119e0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x18>
    {
        vsync_sem = 0;
 80119d0:	4b04      	ldr	r3, [pc, #16]	@ (80119e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 80119d2:	2200      	movs	r2, #0
 80119d4:	601a      	str	r2, [r3, #0]
        return instance;
 80119d6:	4b04      	ldr	r3, [pc, #16]	@ (80119e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x20>)
 80119d8:	6818      	ldr	r0, [r3, #0]
        HAL::getInstance()->backPorchExited();
 80119da:	6803      	ldr	r3, [r0, #0]
 80119dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119de:	4798      	blx	r3
    }
}
 80119e0:	bd08      	pop	{r3, pc}
 80119e2:	bf00      	nop
 80119e4:	2400319c 	.word	0x2400319c
 80119e8:	24004278 	.word	0x24004278

080119ec <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80119ec:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 80119ee:	6803      	ldr	r3, [r0, #0]
 80119f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119f2:	4798      	blx	r3
    }
 80119f4:	bd08      	pop	{r3, pc}

080119f6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 80119f6:	2001      	movs	r0, #1
 80119f8:	4770      	bx	lr

080119fa <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80119fa:	b508      	push	{r3, lr}
    {
        executeCompleted();
 80119fc:	6803      	ldr	r3, [r0, #0]
 80119fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a00:	4798      	blx	r3
    }
 8011a02:	bd08      	pop	{r3, pc}

08011a04 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8011a04:	4a08      	ldr	r2, [pc, #32]	@ (8011a28 <_ZN8STM32DMAD1Ev+0x24>)
 8011a06:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a08:	4a08      	ldr	r2, [pc, #32]	@ (8011a2c <_ZN8STM32DMAD1Ev+0x28>)
 8011a0a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8011a0e:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8011a12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011a16:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 8011a1a:	4a05      	ldr	r2, [pc, #20]	@ (8011a30 <_ZN8STM32DMAD1Ev+0x2c>)
 8011a1c:	60c2      	str	r2, [r0, #12]
    {
 8011a1e:	4a05      	ldr	r2, [pc, #20]	@ (8011a34 <_ZN8STM32DMAD1Ev+0x30>)
 8011a20:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 8011a22:	4a05      	ldr	r2, [pc, #20]	@ (8011a38 <_ZN8STM32DMAD1Ev+0x34>)
 8011a24:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8011a26:	4770      	bx	lr
 8011a28:	08029f78 	.word	0x08029f78
 8011a2c:	e000e100 	.word	0xe000e100
 8011a30:	0802a36c 	.word	0x0802a36c
 8011a34:	08029f54 	.word	0x08029f54
 8011a38:	0802a31c 	.word	0x0802a31c

08011a3c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8011a3c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8011a40:	4770      	bx	lr

08011a42 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8011a42:	b510      	push	{r4, lr}
 8011a44:	4604      	mov	r4, r0
}
 8011a46:	f7ff ffdd 	bl	8011a04 <_ZN8STM32DMAD1Ev>
 8011a4a:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f013 f8bf 	bl	8024bd2 <_ZdlPvj>
 8011a54:	4620      	mov	r0, r4
 8011a56:	bd10      	pop	{r4, pc}

08011a58 <_ZN8STM32DMA10initializeEv>:
{
 8011a58:	b500      	push	{lr}
 8011a5a:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8011a9c <_ZN8STM32DMA10initializeEv+0x44>)
 8011a5e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8011a62:	f042 0210 	orr.w	r2, r2, #16
 8011a66:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8011a6a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8011a6e:	f002 0210 	and.w	r2, r2, #16
 8011a72:	9201      	str	r2, [sp, #4]
 8011a74:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8011a76:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011a78:	f042 0210 	orr.w	r2, r2, #16
 8011a7c:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8011a7e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011a80:	f022 0210 	bic.w	r2, r2, #16
 8011a84:	67da      	str	r2, [r3, #124]	@ 0x7c
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8011a86:	2200      	movs	r2, #0
 8011a88:	2105      	movs	r1, #5
 8011a8a:	205a      	movs	r0, #90	@ 0x5a
 8011a8c:	f7f6 f822 	bl	8007ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8011a90:	205a      	movs	r0, #90	@ 0x5a
 8011a92:	f7f6 f82f 	bl	8007af4 <HAL_NVIC_EnableIRQ>
}
 8011a96:	b003      	add	sp, #12
 8011a98:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a9c:	58024400 	.word	0x58024400

08011aa0 <DMA2D_IRQHandler>:
{
 8011aa0:	b508      	push	{r3, lr}
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8011aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8011ad4 <DMA2D_IRQHandler+0x34>)
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	f013 0f02 	tst.w	r3, #2
 8011aaa:	d011      	beq.n	8011ad0 <DMA2D_IRQHandler+0x30>
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8011aac:	4b09      	ldr	r3, [pc, #36]	@ (8011ad4 <DMA2D_IRQHandler+0x34>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8011ab4:	d00c      	beq.n	8011ad0 <DMA2D_IRQHandler+0x30>
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8011ab6:	4b07      	ldr	r3, [pc, #28]	@ (8011ad4 <DMA2D_IRQHandler+0x34>)
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8011abe:	601a      	str	r2, [r3, #0]
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8011ac0:	2202      	movs	r2, #2
 8011ac2:	609a      	str	r2, [r3, #8]
 8011ac4:	4b04      	ldr	r3, [pc, #16]	@ (8011ad8 <DMA2D_IRQHandler+0x38>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8011ac8:	6858      	ldr	r0, [r3, #4]
 8011aca:	6803      	ldr	r3, [r0, #0]
 8011acc:	695b      	ldr	r3, [r3, #20]
 8011ace:	4798      	blx	r3
}
 8011ad0:	bd08      	pop	{r3, pc}
 8011ad2:	bf00      	nop
 8011ad4:	52001000 	.word	0x52001000
 8011ad8:	24004278 	.word	0x24004278

08011adc <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8011adc:	b538      	push	{r3, r4, r5, lr}
 8011ade:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8011ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8011b14 <_ZN8STM32DMAC1Ev+0x38>)
 8011ae2:	f840 3b0c 	str.w	r3, [r0], #12
 8011ae6:	6068      	str	r0, [r5, #4]
 8011ae8:	2300      	movs	r3, #0
 8011aea:	722b      	strb	r3, [r5, #8]
 8011aec:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011aee:	462c      	mov	r4, r5
 8011af0:	4b09      	ldr	r3, [pc, #36]	@ (8011b18 <_ZN8STM32DMAC1Ev+0x3c>)
 8011af2:	f844 3b20 	str.w	r3, [r4], #32
 8011af6:	2260      	movs	r2, #96	@ 0x60
 8011af8:	4621      	mov	r1, r4
 8011afa:	f001 feeb 	bl	80138d4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8011afe:	235f      	movs	r3, #95	@ 0x5f
 8011b00:	e003      	b.n	8011b0a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8011b02:	2200      	movs	r2, #0
 8011b04:	60e2      	str	r2, [r4, #12]
 8011b06:	3b01      	subs	r3, #1
 8011b08:	3424      	adds	r4, #36	@ 0x24
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	daf9      	bge.n	8011b02 <_ZN8STM32DMAC1Ev+0x26>
}
 8011b0e:	4628      	mov	r0, r5
 8011b10:	bd38      	pop	{r3, r4, r5, pc}
 8011b12:	bf00      	nop
 8011b14:	0802a31c 	.word	0x0802a31c
 8011b18:	08029f78 	.word	0x08029f78

08011b1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8011b1c:	b508      	push	{r3, lr}
    switch (format)
 8011b1e:	290b      	cmp	r1, #11
 8011b20:	d80b      	bhi.n	8011b3a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8011b22:	e8df f001 	tbb	[pc, r1]
 8011b26:	1206      	.short	0x1206
 8011b28:	0a0a0a10 	.word	0x0a0a0a10
 8011b2c:	0808080a 	.word	0x0808080a
 8011b30:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8011b32:	2002      	movs	r0, #2
}
 8011b34:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8011b36:	2005      	movs	r0, #5
        break;
 8011b38:	e7fc      	b.n	8011b34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8011b3a:	4b05      	ldr	r3, [pc, #20]	@ (8011b50 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8011b3c:	4a05      	ldr	r2, [pc, #20]	@ (8011b54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8011b3e:	216d      	movs	r1, #109	@ 0x6d
 8011b40:	4805      	ldr	r0, [pc, #20]	@ (8011b58 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8011b42:	f013 f875 	bl	8024c30 <__assert_func>
    switch (format)
 8011b46:	2000      	movs	r0, #0
 8011b48:	e7f4      	b.n	8011b34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8011b4a:	2001      	movs	r0, #1
    return dma2dColorMode;
 8011b4c:	e7f2      	b.n	8011b34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8011b4e:	bf00      	nop
 8011b50:	08029e10 	.word	0x08029e10
 8011b54:	08029e2c 	.word	0x08029e2c
 8011b58:	08029e78 	.word	0x08029e78

08011b5c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8011b5c:	b508      	push	{r3, lr}
    switch (format)
 8011b5e:	290a      	cmp	r1, #10
 8011b60:	d809      	bhi.n	8011b76 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8011b62:	e8df f001 	tbb	[pc, r1]
 8011b66:	1006      	.short	0x1006
 8011b68:	0808080e 	.word	0x0808080e
 8011b6c:	10101008 	.word	0x10101008
 8011b70:	10          	.byte	0x10
 8011b71:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8011b72:	2002      	movs	r0, #2
        break;
 8011b74:	e008      	b.n	8011b88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x2c>
        assert(0 && "Unsupported Format!");
 8011b76:	4b05      	ldr	r3, [pc, #20]	@ (8011b8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8011b78:	4a05      	ldr	r2, [pc, #20]	@ (8011b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8011b7a:	218e      	movs	r1, #142	@ 0x8e
 8011b7c:	4805      	ldr	r0, [pc, #20]	@ (8011b94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8011b7e:	f013 f857 	bl	8024c30 <__assert_func>
    switch (format)
 8011b82:	2000      	movs	r0, #0
 8011b84:	e000      	b.n	8011b88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x2c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8011b86:	2001      	movs	r0, #1
}
 8011b88:	bd08      	pop	{r3, pc}
 8011b8a:	bf00      	nop
 8011b8c:	08029e10 	.word	0x08029e10
 8011b90:	08029ea4 	.word	0x08029ea4
 8011b94:	08029e78 	.word	0x08029e78

08011b98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8011b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9c:	4605      	mov	r5, r0
 8011b9e:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8011ba0:	7f49      	ldrb	r1, [r1, #29]
 8011ba2:	f7ff ffbb 	bl	8011b1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011ba6:	4606      	mov	r6, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011ba8:	f894 801e 	ldrb.w	r8, [r4, #30]
 8011bac:	4641      	mov	r1, r8
 8011bae:	4628      	mov	r0, r5
 8011bb0:	f7ff ffb4 	bl	8011b1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011bb4:	4607      	mov	r7, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011bb6:	4641      	mov	r1, r8
 8011bb8:	4628      	mov	r0, r5
 8011bba:	f7ff ffcf 	bl	8011b5c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011bbe:	8b62      	ldrh	r2, [r4, #26]
 8011bc0:	8aa3      	ldrh	r3, [r4, #20]
 8011bc2:	1ad2      	subs	r2, r2, r3
 8011bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011bc8:	8b62      	ldrh	r2, [r4, #26]
 8011bca:	8aa1      	ldrh	r1, [r4, #20]
 8011bcc:	1a52      	subs	r2, r2, r1
 8011bce:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8011bd0:	8b22      	ldrh	r2, [r4, #24]
 8011bd2:	8aa1      	ldrh	r1, [r4, #20]
 8011bd4:	1a52      	subs	r2, r2, r1
 8011bd6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011bd8:	6358      	str	r0, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011bda:	8ae2      	ldrh	r2, [r4, #22]
 8011bdc:	8aa1      	ldrh	r1, [r4, #20]
 8011bde:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011be2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011be4:	6922      	ldr	r2, [r4, #16]
 8011be6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8011be8:	6862      	ldr	r2, [r4, #4]
 8011bea:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8011bec:	6823      	ldr	r3, [r4, #0]
 8011bee:	2b80      	cmp	r3, #128	@ 0x80
 8011bf0:	d037      	beq.n	8011c62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8011bf2:	d813      	bhi.n	8011c1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8011bf4:	2b20      	cmp	r3, #32
 8011bf6:	d07d      	beq.n	8011cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>
 8011bf8:	2b40      	cmp	r3, #64	@ 0x40
 8011bfa:	d07b      	beq.n	8011cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>
 8011bfc:	2b04      	cmp	r3, #4
 8011bfe:	f040 8086 	bne.w	8011d0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x176>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011c02:	7f23      	ldrb	r3, [r4, #28]
 8011c04:	ea46 6303 	orr.w	r3, r6, r3, lsl #24
 8011c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011c0e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c10:	6257      	str	r7, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c12:	6923      	ldr	r3, [r4, #16]
 8011c14:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011c16:	4b49      	ldr	r3, [pc, #292]	@ (8011d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 8011c18:	6013      	str	r3, [r2, #0]
        break;
 8011c1a:	e020      	b.n	8011c5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc6>
    switch (blitOp.operation)
 8011c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c20:	d010      	beq.n	8011c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8011c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c26:	d172      	bne.n	8011d0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x176>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011c28:	7f23      	ldrb	r3, [r4, #28]
 8011c2a:	4a45      	ldr	r2, [pc, #276]	@ (8011d40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>)
 8011c2c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8011c30:	4b41      	ldr	r3, [pc, #260]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011c32:	61da      	str	r2, [r3, #28]
        return color;
 8011c34:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011c36:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c38:	625f      	str	r7, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c3a:	6922      	ldr	r2, [r4, #16]
 8011c3c:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011c3e:	4a3f      	ldr	r2, [pc, #252]	@ (8011d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 8011c40:	601a      	str	r2, [r3, #0]
        break;
 8011c42:	e00c      	b.n	8011c5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc6>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011c44:	7f23      	ldrb	r3, [r4, #28]
 8011c46:	4a3f      	ldr	r2, [pc, #252]	@ (8011d44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
 8011c48:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8011c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011c4e:	61da      	str	r2, [r3, #28]
 8011c50:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011c52:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c54:	625f      	str	r7, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c56:	6922      	ldr	r2, [r4, #16]
 8011c58:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011c5a:	4a38      	ldr	r2, [pc, #224]	@ (8011d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 8011c5c:	601a      	str	r2, [r3, #0]
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
    }
}
 8011c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8011c62:	68a1      	ldr	r1, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8011c64:	1d0b      	adds	r3, r1, #4
 8011c66:	4a34      	ldr	r2, [pc, #208]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011c68:	62d3      	str	r3, [r2, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011c6a:	7f23      	ldrb	r3, [r4, #28]
 8011c6c:	ea46 6303 	orr.w	r3, r6, r3, lsl #24
 8011c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011c74:	61d3      	str	r3, [r2, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011c76:	6257      	str	r7, [r2, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c78:	6923      	ldr	r3, [r4, #16]
 8011c7a:	6153      	str	r3, [r2, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8011c7c:	780b      	ldrb	r3, [r1, #0]
 8011c7e:	b18b      	cbz	r3, 8011ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10c>
 8011c80:	2b01      	cmp	r3, #1
 8011c82:	d12c      	bne.n	8011cde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                if (blitOp.alpha == 255)
 8011c84:	7f23      	ldrb	r3, [r4, #28]
 8011c86:	2bff      	cmp	r3, #255	@ 0xff
 8011c88:	d027      	beq.n	8011cda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x142>
            bool blend = true;
 8011c8a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011c8c:	4c2a      	ldr	r4, [pc, #168]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011c8e:	69e2      	ldr	r2, [r4, #28]
 8011c90:	4b2d      	ldr	r3, [pc, #180]	@ (8011d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 8011c92:	4013      	ands	r3, r2
 8011c94:	884a      	ldrh	r2, [r1, #2]
 8011c96:	3a01      	subs	r2, #1
 8011c98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011c9c:	f043 0310 	orr.w	r3, r3, #16
 8011ca0:	61e3      	str	r3, [r4, #28]
                break;
 8011ca2:	e009      	b.n	8011cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x120>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011ca4:	4824      	ldr	r0, [pc, #144]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011ca6:	69c2      	ldr	r2, [r0, #28]
 8011ca8:	4b27      	ldr	r3, [pc, #156]	@ (8011d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 8011caa:	4013      	ands	r3, r2
 8011cac:	884a      	ldrh	r2, [r1, #2]
 8011cae:	3a01      	subs	r2, #1
 8011cb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011cb4:	61c3      	str	r3, [r0, #28]
            bool blend = true;
 8011cb6:	2001      	movs	r0, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8011cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011cba:	69d3      	ldr	r3, [r2, #28]
 8011cbc:	f043 0320 	orr.w	r3, r3, #32
 8011cc0:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011cc4:	69db      	ldr	r3, [r3, #28]
 8011cc6:	f013 0f20 	tst.w	r3, #32
 8011cca:	d1fa      	bne.n	8011cc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8011ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011cce:	2210      	movs	r2, #16
 8011cd0:	609a      	str	r2, [r3, #8]
            if (blend)
 8011cd2:	b158      	cbz	r0, 8011cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011cd4:	4a19      	ldr	r2, [pc, #100]	@ (8011d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 8011cd6:	601a      	str	r2, [r3, #0]
 8011cd8:	e7c1      	b.n	8011c5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc6>
                    blend = false;
 8011cda:	2000      	movs	r0, #0
 8011cdc:	e7d6      	b.n	8011c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
                assert(0 && "Unsupported format");
 8011cde:	4b1b      	ldr	r3, [pc, #108]	@ (8011d4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>)
 8011ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8011d50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
 8011ce2:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8011ce6:	481b      	ldr	r0, [pc, #108]	@ (8011d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
 8011ce8:	f012 ffa2 	bl	8024c30 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011cec:	4b12      	ldr	r3, [pc, #72]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011cee:	4a1a      	ldr	r2, [pc, #104]	@ (8011d58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	e7b4      	b.n	8011c5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011cf4:	7f23      	ldrb	r3, [r4, #28]
 8011cf6:	ea46 6303 	orr.w	r3, r6, r3, lsl #24
 8011cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011d00:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011d02:	6257      	str	r7, [r2, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011d04:	6923      	ldr	r3, [r4, #16]
 8011d06:	6153      	str	r3, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011d08:	4b0c      	ldr	r3, [pc, #48]	@ (8011d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 8011d0a:	6013      	str	r3, [r2, #0]
        break;
 8011d0c:	e7a7      	b.n	8011c5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011d0e:	7f23      	ldrb	r3, [r4, #28]
 8011d10:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 8011d14:	f446 3600 	orr.w	r6, r6, #131072	@ 0x20000
 8011d18:	4b07      	ldr	r3, [pc, #28]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011d1a:	61de      	str	r6, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8011d1c:	7f62      	ldrb	r2, [r4, #29]
 8011d1e:	7fa3      	ldrb	r3, [r4, #30]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d003      	beq.n	8011d2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011d24:	4b04      	ldr	r3, [pc, #16]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011d26:	4a0c      	ldr	r2, [pc, #48]	@ (8011d58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
 8011d28:	601a      	str	r2, [r3, #0]
 8011d2a:	e798      	b.n	8011c5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc6>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8011d2c:	4b02      	ldr	r3, [pc, #8]	@ (8011d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 8011d2e:	f240 2201 	movw	r2, #513	@ 0x201
 8011d32:	601a      	str	r2, [r3, #0]
}
 8011d34:	e793      	b.n	8011c5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc6>
 8011d36:	bf00      	nop
 8011d38:	52001000 	.word	0x52001000
 8011d3c:	00020201 	.word	0x00020201
 8011d40:	00020009 	.word	0x00020009
 8011d44:	0002000a 	.word	0x0002000a
 8011d48:	ffff00ef 	.word	0xffff00ef
 8011d4c:	08029ef0 	.word	0x08029ef0
 8011d50:	08029f0c 	.word	0x08029f0c
 8011d54:	08029e78 	.word	0x08029e78
 8011d58:	00010201 	.word	0x00010201

08011d5c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8011d5c:	b510      	push	{r4, lr}
 8011d5e:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011d60:	7f89      	ldrb	r1, [r1, #30]
 8011d62:	f7ff fefb 	bl	8011b5c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011d66:	4b1d      	ldr	r3, [pc, #116]	@ (8011ddc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x80>)
 8011d68:	6358      	str	r0, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011d6a:	8ae2      	ldrh	r2, [r4, #22]
 8011d6c:	8aa1      	ldrh	r1, [r4, #20]
 8011d6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011d72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011d74:	6922      	ldr	r2, [r4, #16]
 8011d76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011d78:	8b62      	ldrh	r2, [r4, #26]
 8011d7a:	8aa1      	ldrh	r1, [r4, #20]
 8011d7c:	1a52      	subs	r2, r2, r1
 8011d7e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8011d80:	6823      	ldr	r3, [r4, #0]
 8011d82:	2b08      	cmp	r3, #8
 8011d84:	d012      	beq.n	8011dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x50>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011d86:	4915      	ldr	r1, [pc, #84]	@ (8011ddc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x80>)
 8011d88:	61c8      	str	r0, [r1, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	610b      	str	r3, [r1, #16]
 8011d8e:	68e2      	ldr	r2, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8011d90:	0a13      	lsrs	r3, r2, #8
 8011d92:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8011d96:	0950      	lsrs	r0, r2, #5
 8011d98:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8011d9c:	4303      	orrs	r3, r0
 8011d9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8011da2:	4313      	orrs	r3, r2
 8011da4:	638b      	str	r3, [r1, #56]	@ 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8011da6:	4b0e      	ldr	r3, [pc, #56]	@ (8011de0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>)
 8011da8:	600b      	str	r3, [r1, #0]
    }
}
 8011daa:	bd10      	pop	{r4, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011dac:	8b62      	ldrh	r2, [r4, #26]
 8011dae:	8aa3      	ldrh	r3, [r4, #20]
 8011db0:	1ad2      	subs	r2, r2, r3
 8011db2:	4b0a      	ldr	r3, [pc, #40]	@ (8011ddc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x80>)
 8011db4:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011db6:	8b62      	ldrh	r2, [r4, #26]
 8011db8:	8aa1      	ldrh	r1, [r4, #20]
 8011dba:	1a52      	subs	r2, r2, r1
 8011dbc:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011dbe:	6258      	str	r0, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8011dc0:	7f21      	ldrb	r1, [r4, #28]
 8011dc2:	4a08      	ldr	r2, [pc, #32]	@ (8011de4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x88>)
 8011dc4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011dc8:	61da      	str	r2, [r3, #28]
 8011dca:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011dcc:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011dce:	6922      	ldr	r2, [r4, #16]
 8011dd0:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011dd2:	6922      	ldr	r2, [r4, #16]
 8011dd4:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011dd6:	4a04      	ldr	r2, [pc, #16]	@ (8011de8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8c>)
 8011dd8:	601a      	str	r2, [r3, #0]
 8011dda:	e7e6      	b.n	8011daa <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x4e>
 8011ddc:	52001000 	.word	0x52001000
 8011de0:	00030201 	.word	0x00030201
 8011de4:	00010009 	.word	0x00010009
 8011de8:	00020201 	.word	0x00020201

08011dec <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8011dec:	4b01      	ldr	r3, [pc, #4]	@ (8011df4 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8011dee:	6003      	str	r3, [r0, #0]
    }
 8011df0:	4770      	bx	lr
 8011df2:	bf00      	nop
 8011df4:	08029fc8 	.word	0x08029fc8

08011df8 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8011df8:	4a02      	ldr	r2, [pc, #8]	@ (8011e04 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8011dfa:	6002      	str	r2, [r0, #0]
    {
 8011dfc:	4a02      	ldr	r2, [pc, #8]	@ (8011e08 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8011dfe:	6002      	str	r2, [r0, #0]
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop
 8011e04:	08029fd8 	.word	0x08029fd8
 8011e08:	08029fc8 	.word	0x08029fc8

08011e0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8011e0c:	2001      	movs	r0, #1
 8011e0e:	4770      	bx	lr

08011e10 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8011e10:	200c      	movs	r0, #12
 8011e12:	4770      	bx	lr

08011e14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8011e14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011e18:	0089      	lsls	r1, r1, #2
 8011e1a:	3108      	adds	r1, #8
    }
 8011e1c:	4408      	add	r0, r1
 8011e1e:	4770      	bx	lr

08011e20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8011e20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011e24:	0089      	lsls	r1, r1, #2
 8011e26:	3108      	adds	r1, #8
    }
 8011e28:	4408      	add	r0, r1
 8011e2a:	4770      	bx	lr

08011e2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8011e2c:	2001      	movs	r0, #1
 8011e2e:	4770      	bx	lr

08011e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8011e30:	206c      	movs	r0, #108	@ 0x6c
 8011e32:	4770      	bx	lr

08011e34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8011e34:	236c      	movs	r3, #108	@ 0x6c
 8011e36:	fb03 f101 	mul.w	r1, r3, r1
 8011e3a:	3108      	adds	r1, #8
    }
 8011e3c:	4408      	add	r0, r1
 8011e3e:	4770      	bx	lr

08011e40 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8011e40:	236c      	movs	r3, #108	@ 0x6c
 8011e42:	fb03 f101 	mul.w	r1, r3, r1
 8011e46:	3108      	adds	r1, #8
    }
 8011e48:	4408      	add	r0, r1
 8011e4a:	4770      	bx	lr

08011e4c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8011e4c:	2001      	movs	r0, #1
 8011e4e:	4770      	bx	lr

08011e50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8011e50:	2010      	movs	r0, #16
 8011e52:	4770      	bx	lr

08011e54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8011e54:	0109      	lsls	r1, r1, #4
 8011e56:	3108      	adds	r1, #8
    }
 8011e58:	4408      	add	r0, r1
 8011e5a:	4770      	bx	lr

08011e5c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8011e5c:	0109      	lsls	r1, r1, #4
 8011e5e:	3108      	adds	r1, #8
    }
 8011e60:	4408      	add	r0, r1
 8011e62:	4770      	bx	lr

08011e64 <_ZN16FrontendHeapBaseD0Ev>:
 8011e64:	b510      	push	{r4, lr}
 8011e66:	4604      	mov	r4, r0
 8011e68:	4b04      	ldr	r3, [pc, #16]	@ (8011e7c <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8011e6a:	6003      	str	r3, [r0, #0]
 8011e6c:	4b04      	ldr	r3, [pc, #16]	@ (8011e80 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8011e6e:	6003      	str	r3, [r0, #0]
 8011e70:	2114      	movs	r1, #20
 8011e72:	f012 feae 	bl	8024bd2 <_ZdlPvj>
 8011e76:	4620      	mov	r0, r4
 8011e78:	bd10      	pop	{r4, pc}
 8011e7a:	bf00      	nop
 8011e7c:	08029fd8 	.word	0x08029fd8
 8011e80:	08029fc8 	.word	0x08029fc8

08011e84 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011e84:	b510      	push	{r4, lr}
 8011e86:	4604      	mov	r4, r0
    {
 8011e88:	4b03      	ldr	r3, [pc, #12]	@ (8011e98 <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8011e8a:	6003      	str	r3, [r0, #0]
    }
 8011e8c:	2114      	movs	r1, #20
 8011e8e:	f012 fea0 	bl	8024bd2 <_ZdlPvj>
 8011e92:	4620      	mov	r0, r4
 8011e94:	bd10      	pop	{r4, pc}
 8011e96:	bf00      	nop
 8011e98:	08029fc8 	.word	0x08029fc8

08011e9c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011e9c:	b508      	push	{r3, lr}
    {
        app.gotoscreenScreenNoTransition();
 8011e9e:	4608      	mov	r0, r1
 8011ea0:	f7ff f84e 	bl	8010f40 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8011ea4:	bd08      	pop	{r3, pc}
	...

08011ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8011ea8:	b510      	push	{r4, lr}
 8011eaa:	4604      	mov	r4, r0
 8011eac:	4b02      	ldr	r3, [pc, #8]	@ (8011eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8011eae:	6003      	str	r3, [r0, #0]
 8011eb0:	f000 fb75 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	bd10      	pop	{r4, pc}
 8011eb8:	0802a054 	.word	0x0802a054

08011ebc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011ebc:	b510      	push	{r4, lr}
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	4b04      	ldr	r3, [pc, #16]	@ (8011ed4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8011ec2:	6003      	str	r3, [r0, #0]
 8011ec4:	f000 fb6b 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011ec8:	2114      	movs	r1, #20
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f012 fe81 	bl	8024bd2 <_ZdlPvj>
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	bd10      	pop	{r4, pc}
 8011ed4:	0802a054 	.word	0x0802a054

08011ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	4604      	mov	r4, r0
 8011edc:	4b02      	ldr	r3, [pc, #8]	@ (8011ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8011ede:	6003      	str	r3, [r0, #0]
 8011ee0:	f000 fb5d 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	bd10      	pop	{r4, pc}
 8011ee8:	0802a020 	.word	0x0802a020

08011eec <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011eec:	b510      	push	{r4, lr}
 8011eee:	4604      	mov	r4, r0
 8011ef0:	4b04      	ldr	r3, [pc, #16]	@ (8011f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8011ef2:	6003      	str	r3, [r0, #0]
 8011ef4:	f000 fb53 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011ef8:	2174      	movs	r1, #116	@ 0x74
 8011efa:	4620      	mov	r0, r4
 8011efc:	f012 fe69 	bl	8024bd2 <_ZdlPvj>
 8011f00:	4620      	mov	r0, r4
 8011f02:	bd10      	pop	{r4, pc}
 8011f04:	0802a020 	.word	0x0802a020

08011f08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011f08:	b510      	push	{r4, lr}
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	4b02      	ldr	r3, [pc, #8]	@ (8011f18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8011f0e:	6003      	str	r3, [r0, #0]
 8011f10:	f000 fb45 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011f14:	4620      	mov	r0, r4
 8011f16:	bd10      	pop	{r4, pc}
 8011f18:	08029fec 	.word	0x08029fec

08011f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011f1c:	b510      	push	{r4, lr}
 8011f1e:	4604      	mov	r4, r0
 8011f20:	4b04      	ldr	r3, [pc, #16]	@ (8011f34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8011f22:	6003      	str	r3, [r0, #0]
 8011f24:	f000 fb3b 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011f28:	2118      	movs	r1, #24
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	f012 fe51 	bl	8024bd2 <_ZdlPvj>
 8011f30:	4620      	mov	r0, r4
 8011f32:	bd10      	pop	{r4, pc}
 8011f34:	08029fec 	.word	0x08029fec

08011f38 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	4b16      	ldr	r3, [pc, #88]	@ (8011f98 <_ZN12FrontendHeapD1Ev+0x60>)
 8011f3e:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 8011f40:	4b16      	ldr	r3, [pc, #88]	@ (8011f9c <_ZN12FrontendHeapD1Ev+0x64>)
 8011f42:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8011f46:	4b16      	ldr	r3, [pc, #88]	@ (8011fa0 <_ZN12FrontendHeapD1Ev+0x68>)
 8011f48:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011f4c:	4b15      	ldr	r3, [pc, #84]	@ (8011fa4 <_ZN12FrontendHeapD1Ev+0x6c>)
 8011f4e:	f8c0 31fc 	str.w	r3, [r0, #508]	@ 0x1fc
    {
 8011f52:	4b15      	ldr	r3, [pc, #84]	@ (8011fa8 <_ZN12FrontendHeapD1Ev+0x70>)
 8011f54:	f8c0 31fc 	str.w	r3, [r0, #508]	@ 0x1fc
 8011f58:	4b14      	ldr	r3, [pc, #80]	@ (8011fac <_ZN12FrontendHeapD1Ev+0x74>)
 8011f5a:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8011f5e:	4b14      	ldr	r3, [pc, #80]	@ (8011fb0 <_ZN12FrontendHeapD1Ev+0x78>)
 8011f60:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8011f64:	4b13      	ldr	r3, [pc, #76]	@ (8011fb4 <_ZN12FrontendHeapD1Ev+0x7c>)
 8011f66:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8011f6a:	4b13      	ldr	r3, [pc, #76]	@ (8011fb8 <_ZN12FrontendHeapD1Ev+0x80>)
 8011f6c:	f840 3fa0 	str.w	r3, [r0, #160]!
 8011f70:	f000 fb15 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011f74:	4620      	mov	r0, r4
 8011f76:	4b11      	ldr	r3, [pc, #68]	@ (8011fbc <_ZN12FrontendHeapD1Ev+0x84>)
 8011f78:	f840 3f2c 	str.w	r3, [r0, #44]!
 8011f7c:	f000 fb0f 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011f80:	4620      	mov	r0, r4
 8011f82:	4b0f      	ldr	r3, [pc, #60]	@ (8011fc0 <_ZN12FrontendHeapD1Ev+0x88>)
 8011f84:	f840 3f14 	str.w	r3, [r0, #20]!
 8011f88:	f000 fb09 	bl	801259e <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8011f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8011fc4 <_ZN12FrontendHeapD1Ev+0x8c>)
 8011f8e:	6023      	str	r3, [r4, #0]
    {
 8011f90:	4b0d      	ldr	r3, [pc, #52]	@ (8011fc8 <_ZN12FrontendHeapD1Ev+0x90>)
 8011f92:	6023      	str	r3, [r4, #0]
 8011f94:	4620      	mov	r0, r4
 8011f96:	bd10      	pop	{r4, pc}
 8011f98:	0802a088 	.word	0x0802a088
 8011f9c:	08029ac4 	.word	0x08029ac4
 8011fa0:	08029720 	.word	0x08029720
 8011fa4:	08029708 	.word	0x08029708
 8011fa8:	08029678 	.word	0x08029678
 8011fac:	080296b4 	.word	0x080296b4
 8011fb0:	0802a450 	.word	0x0802a450
 8011fb4:	08029650 	.word	0x08029650
 8011fb8:	0802a054 	.word	0x0802a054
 8011fbc:	0802a020 	.word	0x0802a020
 8011fc0:	08029fec 	.word	0x08029fec
 8011fc4:	08029fd8 	.word	0x08029fd8
 8011fc8:	08029fc8 	.word	0x08029fc8

08011fcc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011fcc:	b508      	push	{r3, lr}
 8011fce:	4802      	ldr	r0, [pc, #8]	@ (8011fd8 <__tcf_0+0xc>)
 8011fd0:	f7ff ffb2 	bl	8011f38 <_ZN12FrontendHeapD1Ev>
 8011fd4:	bd08      	pop	{r3, pc}
 8011fd6:	bf00      	nop
 8011fd8:	24004054 	.word	0x24004054

08011fdc <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	4604      	mov	r4, r0
 8011fe0:	f7ff ffaa 	bl	8011f38 <_ZN12FrontendHeapD1Ev>
 8011fe4:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f012 fdf2 	bl	8024bd2 <_ZdlPvj>
 8011fee:	4620      	mov	r0, r4
 8011ff0:	bd10      	pop	{r4, pc}
	...

08011ff4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8011ff4:	b530      	push	{r4, r5, lr}
 8011ff6:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8011ffa:	f8bd e010 	ldrh.w	lr, [sp, #16]
          lastRenderMethod(HARDWARE)
 8011ffe:	4d32      	ldr	r5, [pc, #200]	@ (80120c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xd4>)
 8012000:	6005      	str	r5, [r0, #0]
        : dma(dmaInterface),
 8012002:	6041      	str	r1, [r0, #4]
          lcdRef(display),
 8012004:	6082      	str	r2, [r0, #8]
          touchController(touchCtrl),
 8012006:	60c3      	str	r3, [r0, #12]
          mcuInstrumentation(0),
 8012008:	2300      	movs	r3, #0
 801200a:	6103      	str	r3, [r0, #16]
          buttonController(0),
 801200c:	6143      	str	r3, [r0, #20]
          frameBufferAllocator(0),
 801200e:	6183      	str	r3, [r0, #24]

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
            : startX(0),
 8012010:	8383      	strh	r3, [r0, #28]
              startY(0),
 8012012:	83c3      	strh	r3, [r0, #30]
              downX(0),
 8012014:	8403      	strh	r3, [r0, #32]
              downY(0),
 8012016:	8443      	strh	r3, [r0, #34]	@ 0x22
              tickCount(0),
 8012018:	8483      	strh	r3, [r0, #36]	@ 0x24
              velocityX(0),
 801201a:	84c3      	strh	r3, [r0, #38]	@ 0x26
              velocityY(0),
 801201c:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 801201e:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8012022:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8012024:	8603      	strh	r3, [r0, #48]	@ 0x30
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8012026:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
          taskDelayFunc(0),
 801202a:	6383      	str	r3, [r0, #56]	@ 0x38
          frameBuffer0(0),
 801202c:	63c3      	str	r3, [r0, #60]	@ 0x3c
          frameBuffer1(0),
 801202e:	6403      	str	r3, [r0, #64]	@ 0x40
          frameBuffer2(0),
 8012030:	6443      	str	r3, [r0, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8012032:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
          fingerSize(1),
 8012036:	2201      	movs	r2, #1
 8012038:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
          lockDMAToPorch(false),
 801203c:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8012040:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
          auxiliaryLCD(0),
 8012044:	64c3      	str	r3, [r0, #76]	@ 0x4c
        : x(0), y(0), width(0), height(0)
 8012046:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
 801204a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
 801204e:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
 8012052:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
          useAuxiliaryLCD(false),
 8012056:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          listener(0),
 801205a:	65c3      	str	r3, [r0, #92]	@ 0x5c
          lastX(0),
 801205c:	6603      	str	r3, [r0, #96]	@ 0x60
          lastY(0),
 801205e:	6643      	str	r3, [r0, #100]	@ 0x64
          touchSampleRate(1),
 8012060:	f880 2068 	strb.w	r2, [r0, #104]	@ 0x68
          mcuLoadPct(0),
 8012064:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
          vSyncCnt(0),
 8012068:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a
          vSyncForFrame(1),
 801206c:	f880 206b 	strb.w	r2, [r0, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8012070:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
          clientDirty(false),
 8012074:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
          swapRequested(false),
 8012078:	f880 306e 	strb.w	r3, [r0, #110]	@ 0x6e
          lastTouched(false),
 801207c:	f880 306f 	strb.w	r3, [r0, #111]	@ 0x6f
          updateMCULoad(0),
 8012080:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8012084:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8012086:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 801208a:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
          useDMAAcceleration(true),
 801208e:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8012092:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
        instance = this;
 8012096:	4a0d      	ldr	r2, [pc, #52]	@ (80120cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xd8>)
 8012098:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 801209a:	4a0d      	ldr	r2, [pc, #52]	@ (80120d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xdc>)
 801209c:	f8a2 c000 	strh.w	ip, [r2]
 80120a0:	4a0c      	ldr	r2, [pc, #48]	@ (80120d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xe0>)
 80120a2:	f8a2 c000 	strh.w	ip, [r2]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80120a6:	4a0c      	ldr	r2, [pc, #48]	@ (80120d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xe4>)
 80120a8:	f8a2 e000 	strh.w	lr, [r2]
 80120ac:	4a0b      	ldr	r2, [pc, #44]	@ (80120dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xe8>)
 80120ae:	f8a2 e000 	strh.w	lr, [r2]
        DISPLAY_ROTATION = rotate0;
 80120b2:	4a0b      	ldr	r2, [pc, #44]	@ (80120e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xec>)
 80120b4:	7013      	strb	r3, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80120b6:	45f4      	cmp	ip, lr
 80120b8:	bf2c      	ite	cs
 80120ba:	f04f 0c00 	movcs.w	ip, #0
 80120be:	f04f 0c01 	movcc.w	ip, #1
 80120c2:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
    }
 80120c6:	bd30      	pop	{r4, r5, pc}
 80120c8:	0802a244 	.word	0x0802a244
 80120cc:	24004278 	.word	0x24004278
 80120d0:	2400426c 	.word	0x2400426c
 80120d4:	24004272 	.word	0x24004272
 80120d8:	2400426e 	.word	0x2400426e
 80120dc:	24004274 	.word	0x24004274
 80120e0:	24004270 	.word	0x24004270

080120e4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80120e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e6:	4604      	mov	r4, r0
                     app(model, *this)
 80120e8:	3014      	adds	r0, #20
 80120ea:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 80120ee:	f104 06a0 	add.w	r6, r4, #160	@ 0xa0
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 80120f2:	4625      	mov	r5, r4
          frontendApplication(app)
 80120f4:	4b14      	ldr	r3, [pc, #80]	@ (8012148 <_ZN12FrontendHeapC1Ev+0x64>)
 80120f6:	f845 3bb8 	str.w	r3, [r5], #184
        : presenterStorage(pres),
 80120fa:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80120fc:	60a7      	str	r7, [r4, #8]
          transitionStorage(tra),
 80120fe:	60e6      	str	r6, [r4, #12]
          frontendApplication(app)
 8012100:	6125      	str	r5, [r4, #16]
 8012102:	4b12      	ldr	r3, [pc, #72]	@ (801214c <_ZN12FrontendHeapC1Ev+0x68>)
 8012104:	6023      	str	r3, [r4, #0]
 8012106:	4b12      	ldr	r3, [pc, #72]	@ (8012150 <_ZN12FrontendHeapC1Ev+0x6c>)
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	f000 fa49 	bl	80125a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801210e:	4b11      	ldr	r3, [pc, #68]	@ (8012154 <_ZN12FrontendHeapC1Ev+0x70>)
 8012110:	6163      	str	r3, [r4, #20]
 8012112:	4638      	mov	r0, r7
 8012114:	f000 fa44 	bl	80125a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012118:	4b0f      	ldr	r3, [pc, #60]	@ (8012158 <_ZN12FrontendHeapC1Ev+0x74>)
 801211a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801211c:	4630      	mov	r0, r6
 801211e:	f000 fa3f 	bl	80125a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012122:	4b0e      	ldr	r3, [pc, #56]	@ (801215c <_ZN12FrontendHeapC1Ev+0x78>)
 8012124:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
 8012128:	f104 06b4 	add.w	r6, r4, #180	@ 0xb4
 801212c:	4630      	mov	r0, r6
 801212e:	f7ff fa4b 	bl	80115c8 <_ZN5ModelC1Ev>
 8012132:	4622      	mov	r2, r4
 8012134:	4631      	mov	r1, r6
 8012136:	4628      	mov	r0, r5
 8012138:	f7ff fa3c 	bl	80115b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotoscreenScreenNoTransition();
 801213c:	4628      	mov	r0, r5
 801213e:	f7fe feff 	bl	8010f40 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    {
        gotoStartScreen(app);
    }
 8012142:	4620      	mov	r0, r4
 8012144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012146:	bf00      	nop
 8012148:	08029fc8 	.word	0x08029fc8
 801214c:	08029fd8 	.word	0x08029fd8
 8012150:	0802a088 	.word	0x0802a088
 8012154:	08029fec 	.word	0x08029fec
 8012158:	0802a020 	.word	0x0802a020
 801215c:	0802a054 	.word	0x0802a054

08012160 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012160:	b508      	push	{r3, lr}
        static FrontendHeap instance;
 8012162:	4b0c      	ldr	r3, [pc, #48]	@ (8012194 <_ZN12FrontendHeap11getInstanceEv+0x34>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f3bf 8f5b 	dmb	ish
 801216a:	f013 0f01 	tst.w	r3, #1
 801216e:	d001      	beq.n	8012174 <_ZN12FrontendHeap11getInstanceEv+0x14>
    }
 8012170:	4809      	ldr	r0, [pc, #36]	@ (8012198 <_ZN12FrontendHeap11getInstanceEv+0x38>)
 8012172:	bd08      	pop	{r3, pc}
        static FrontendHeap instance;
 8012174:	4807      	ldr	r0, [pc, #28]	@ (8012194 <_ZN12FrontendHeap11getInstanceEv+0x34>)
 8012176:	f012 fd2e 	bl	8024bd6 <__cxa_guard_acquire>
 801217a:	2800      	cmp	r0, #0
 801217c:	d0f8      	beq.n	8012170 <_ZN12FrontendHeap11getInstanceEv+0x10>
 801217e:	4806      	ldr	r0, [pc, #24]	@ (8012198 <_ZN12FrontendHeap11getInstanceEv+0x38>)
 8012180:	f7ff ffb0 	bl	80120e4 <_ZN12FrontendHeapC1Ev>
 8012184:	4805      	ldr	r0, [pc, #20]	@ (801219c <_ZN12FrontendHeap11getInstanceEv+0x3c>)
 8012186:	f012 fd71 	bl	8024c6c <atexit>
 801218a:	4802      	ldr	r0, [pc, #8]	@ (8012194 <_ZN12FrontendHeap11getInstanceEv+0x34>)
 801218c:	f012 fd2f 	bl	8024bee <__cxa_guard_release>
 8012190:	e7ee      	b.n	8012170 <_ZN12FrontendHeap11getInstanceEv+0x10>
 8012192:	bf00      	nop
 8012194:	24004050 	.word	0x24004050
 8012198:	24004054 	.word	0x24004054
 801219c:	08011fcd 	.word	0x08011fcd

080121a0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80121a0:	b530      	push	{r4, r5, lr}
 80121a2:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80121a4:	f7ff f8b6 	bl	8011314 <_ZN14BitmapDatabase11getInstanceEv>
 80121a8:	4605      	mov	r5, r0
 80121aa:	f7ff f8b7 	bl	801131c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80121ae:	4601      	mov	r1, r0
 80121b0:	2400      	movs	r4, #0
 80121b2:	9400      	str	r4, [sp, #0]
 80121b4:	4623      	mov	r3, r4
 80121b6:	4622      	mov	r2, r4
 80121b8:	4628      	mov	r0, r5
 80121ba:	f005 f87f 	bl	80172bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80121be:	4b08      	ldr	r3, [pc, #32]	@ (80121e0 <touchgfx_init+0x40>)
 80121c0:	4a08      	ldr	r2, [pc, #32]	@ (80121e4 <touchgfx_init+0x44>)
 80121c2:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80121c4:	4620      	mov	r0, r4
 80121c6:	f7ff f925 	bl	8011414 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80121ca:	4807      	ldr	r0, [pc, #28]	@ (80121e8 <touchgfx_init+0x48>)
 80121cc:	f004 ffde 	bl	801718c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80121d0:	f7ff ffc6 	bl	8012160 <_ZN12FrontendHeap11getInstanceEv>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80121d4:	4805      	ldr	r0, [pc, #20]	@ (80121ec <touchgfx_init+0x4c>)
 80121d6:	f7ff fb25 	bl	8011824 <_ZN11TouchGFXHAL10initializeEv>
}
 80121da:	b003      	add	sp, #12
 80121dc:	bd30      	pop	{r4, r5, pc}
 80121de:	bf00      	nop
 80121e0:	240042d4 	.word	0x240042d4
 80121e4:	24003220 	.word	0x24003220
 80121e8:	240000d8 	.word	0x240000d8
 80121ec:	240031a4 	.word	0x240031a4

080121f0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80121f0:	4770      	bx	lr
	...

080121f4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80121f4:	b508      	push	{r3, lr}
    /*
     * Main event loop will check for VSYNC signal, and then process next frame.
     *
     * Note This function returns immediately if there is no VSYNC signal.
     */
    if (OSWrappers::isVSyncAvailable())
 80121f6:	f7ff fbdf 	bl	80119b8 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>
 80121fa:	b900      	cbnz	r0, 80121fe <touchgfx_taskEntry+0xa>
    {
        hal.backPorchExited();
    }
}
 80121fc:	bd08      	pop	{r3, pc}
        hal.backPorchExited();
 80121fe:	4802      	ldr	r0, [pc, #8]	@ (8012208 <touchgfx_taskEntry+0x14>)
 8012200:	f7ff fb86 	bl	8011910 <_ZN8touchgfx3HAL15backPorchExitedEv>
}
 8012204:	e7fa      	b.n	80121fc <touchgfx_taskEntry+0x8>
 8012206:	bf00      	nop
 8012208:	240031a4 	.word	0x240031a4

0801220c <_Z41__static_initialization_and_destruction_0ii>:
 801220c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012210:	b083      	sub	sp, #12
 8012212:	4604      	mov	r4, r0
 8012214:	460d      	mov	r5, r1
 8012216:	2801      	cmp	r0, #1
 8012218:	d007      	beq.n	801222a <_Z41__static_initialization_and_destruction_0ii+0x1e>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 801221a:	b91c      	cbnz	r4, 8012224 <_Z41__static_initialization_and_destruction_0ii+0x18>
 801221c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012220:	429d      	cmp	r5, r3
 8012222:	d027      	beq.n	8012274 <_Z41__static_initialization_and_destruction_0ii+0x68>
}
 8012224:	b003      	add	sp, #12
 8012226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801222a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801222e:	4299      	cmp	r1, r3
 8012230:	d1f3      	bne.n	801221a <_Z41__static_initialization_and_destruction_0ii+0xe>
class TouchController
 8012232:	4f1d      	ldr	r7, [pc, #116]	@ (80122a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8012234:	4b1d      	ldr	r3, [pc, #116]	@ (80122ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8012236:	603b      	str	r3, [r7, #0]
{
public:

    STM32TouchController() {}
 8012238:	4b1d      	ldr	r3, [pc, #116]	@ (80122b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 801223a:	603b      	str	r3, [r7, #0]
static STM32DMA dma;
 801223c:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 80122dc <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8012240:	4640      	mov	r0, r8
 8012242:	f7ff fc4b 	bl	8011adc <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8012246:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80122d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 801224a:	4648      	mov	r0, r9
 801224c:	f009 fb16 	bl	801b87c <_ZN8touchgfx8LCD16bppC1Ev>
        touchgfx::HAL(dma, display, tc, width, height)
 8012250:	4e18      	ldr	r6, [pc, #96]	@ (80122b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8012252:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8012256:	9301      	str	r3, [sp, #4]
 8012258:	f44f 7348 	mov.w	r3, #800	@ 0x320
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	463b      	mov	r3, r7
 8012260:	464a      	mov	r2, r9
 8012262:	4641      	mov	r1, r8
 8012264:	4630      	mov	r0, r6
 8012266:	f7ff fec5 	bl	8011ff4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801226a:	4b13      	ldr	r3, [pc, #76]	@ (80122b8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801226c:	6033      	str	r3, [r6, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 801226e:	4b13      	ldr	r3, [pc, #76]	@ (80122bc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8012270:	6033      	str	r3, [r6, #0]
    }
 8012272:	e7d2      	b.n	801221a <_Z41__static_initialization_and_destruction_0ii+0xe>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012274:	4b0f      	ldr	r3, [pc, #60]	@ (80122b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8012276:	4a11      	ldr	r2, [pc, #68]	@ (80122bc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8012278:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801227a:	4a0f      	ldr	r2, [pc, #60]	@ (80122b8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801227c:	601a      	str	r2, [r3, #0]
    {
 801227e:	4a10      	ldr	r2, [pc, #64]	@ (80122c0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8012280:	601a      	str	r2, [r3, #0]
 8012282:	4b10      	ldr	r3, [pc, #64]	@ (80122c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8012284:	4a10      	ldr	r2, [pc, #64]	@ (80122c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8012286:	601a      	str	r2, [r3, #0]
 8012288:	4a10      	ldr	r2, [pc, #64]	@ (80122cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 801228a:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801228c:	4b10      	ldr	r3, [pc, #64]	@ (80122d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 801228e:	4a11      	ldr	r2, [pc, #68]	@ (80122d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8012290:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 8012292:	4a11      	ldr	r2, [pc, #68]	@ (80122d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8012294:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 8012296:	4811      	ldr	r0, [pc, #68]	@ (80122dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012298:	f7ff fbb4 	bl	8011a04 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 801229c:	4b02      	ldr	r3, [pc, #8]	@ (80122a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801229e:	4a04      	ldr	r2, [pc, #16]	@ (80122b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80122a0:	601a      	str	r2, [r3, #0]
    {
 80122a2:	4a02      	ldr	r2, [pc, #8]	@ (80122ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80122a4:	601a      	str	r2, [r3, #0]
}
 80122a6:	e7bd      	b.n	8012224 <_Z41__static_initialization_and_destruction_0ii+0x18>
 80122a8:	2400404c 	.word	0x2400404c
 80122ac:	08029b9c 	.word	0x08029b9c
 80122b0:	08029bb4 	.word	0x08029bb4
 80122b4:	240031a4 	.word	0x240031a4
 80122b8:	0802a09c 	.word	0x0802a09c
 80122bc:	08029d40 	.word	0x08029d40
 80122c0:	0802a244 	.word	0x0802a244
 80122c4:	240000d8 	.word	0x240000d8
 80122c8:	080292e8 	.word	0x080292e8
 80122cc:	080292d4 	.word	0x080292d4
 80122d0:	24003224 	.word	0x24003224
 80122d4:	0802a868 	.word	0x0802a868
 80122d8:	0802a3f8 	.word	0x0802a3f8
 80122dc:	240032ac 	.word	0x240032ac

080122e0 <_GLOBAL__sub_I_touchgfx_init>:
 80122e0:	b508      	push	{r3, lr}
 80122e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80122e6:	2001      	movs	r0, #1
 80122e8:	f7ff ff90 	bl	801220c <_Z41__static_initialization_and_destruction_0ii>
 80122ec:	bd08      	pop	{r3, pc}

080122ee <_GLOBAL__sub_D_touchgfx_init>:
 80122ee:	b508      	push	{r3, lr}
 80122f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80122f4:	2000      	movs	r0, #0
 80122f6:	f7ff ff89 	bl	801220c <_Z41__static_initialization_and_destruction_0ii>
 80122fa:	bd08      	pop	{r3, pc}

080122fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80122fc:	4b03      	ldr	r3, [pc, #12]	@ (801230c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80122fe:	2290      	movs	r2, #144	@ 0x90
 8012300:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 8012304:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8012308:	4770      	bx	lr
 801230a:	bf00      	nop
 801230c:	e000e100 	.word	0xe000e100

08012310 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012310:	4b03      	ldr	r3, [pc, #12]	@ (8012320 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8012312:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8012316:	609a      	str	r2, [r3, #8]
 8012318:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801231c:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 801231e:	4770      	bx	lr
 8012320:	e000e100 	.word	0xe000e100

08012324 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012324:	4b08      	ldr	r3, [pc, #32]	@ (8012348 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8012326:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 801232a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 801232e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012332:	f3bf 8f6f 	isb	sy
 8012336:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801233a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 801233e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012342:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 8012346:	4770      	bx	lr
 8012348:	e000e100 	.word	0xe000e100

0801234c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801234c:	4a09      	ldr	r2, [pc, #36]	@ (8012374 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 801234e:	68d3      	ldr	r3, [r2, #12]
 8012350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012354:	3b01      	subs	r3, #1
 8012356:	b29b      	uxth	r3, r3
 8012358:	4907      	ldr	r1, [pc, #28]	@ (8012378 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 801235a:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801235c:	6911      	ldr	r1, [r2, #16]
 801235e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8012362:	3901      	subs	r1, #1
 8012364:	4805      	ldr	r0, [pc, #20]	@ (801237c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 8012366:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8012368:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801236a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801236c:	f043 0301 	orr.w	r3, r3, #1
 8012370:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8012372:	4770      	bx	lr
 8012374:	50001000 	.word	0x50001000
 8012378:	2400426a 	.word	0x2400426a
 801237c:	24004268 	.word	0x24004268

08012380 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    touchgfx::OSWrappers::signalRenderingDone();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8012380:	4b01      	ldr	r3, [pc, #4]	@ (8012388 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8012382:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8012386:	4770      	bx	lr
 8012388:	50001000 	.word	0x50001000

0801238c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801238c:	4b02      	ldr	r3, [pc, #8]	@ (8012398 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 801238e:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8012392:	2201      	movs	r2, #1
 8012394:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8012396:	4770      	bx	lr
 8012398:	50001000 	.word	0x50001000

0801239c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801239c:	4b15      	ldr	r3, [pc, #84]	@ (80123f4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 801239e:	695b      	ldr	r3, [r3, #20]
 80123a0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80123a4:	d025      	beq.n	80123f2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 80123a6:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80123a8:	4b12      	ldr	r3, [pc, #72]	@ (80123f4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80123aa:	2200      	movs	r2, #0
 80123ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80123b0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80123b4:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80123b8:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80123bc:	e000      	b.n	80123c0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 80123be:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80123c0:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80123c4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80123c8:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80123cc:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80123d0:	4908      	ldr	r1, [pc, #32]	@ (80123f4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80123d2:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80123d6:	4613      	mov	r3, r2
 80123d8:	3a01      	subs	r2, #1
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d1f2      	bne.n	80123c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 80123de:	1e43      	subs	r3, r0, #1
 80123e0:	2800      	cmp	r0, #0
 80123e2:	d1ec      	bne.n	80123be <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 80123e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80123e8:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80123ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123f0:	4770      	bx	lr
 80123f2:	4770      	bx	lr
 80123f4:	e000ed00 	.word	0xe000ed00

080123f8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80123f8:	4b15      	ldr	r3, [pc, #84]	@ (8012450 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 80123fa:	695b      	ldr	r3, [r3, #20]
 80123fc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8012400:	d025      	beq.n	801244e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 8012402:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8012404:	4b12      	ldr	r3, [pc, #72]	@ (8012450 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8012406:	2200      	movs	r2, #0
 8012408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801240c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8012410:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8012414:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8012418:	e000      	b.n	801241c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 801241a:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801241c:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8012420:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8012424:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8012428:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 801242c:	4908      	ldr	r1, [pc, #32]	@ (8012450 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 801242e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8012432:	4613      	mov	r3, r2
 8012434:	3a01      	subs	r2, #1
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1f2      	bne.n	8012420 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 801243a:	1e43      	subs	r3, r0, #1
 801243c:	2800      	cmp	r0, #0
 801243e:	d1ec      	bne.n	801241a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8012440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012444:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8012448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801244c:	4770      	bx	lr
 801244e:	4770      	bx	lr
 8012450:	e000ed00 	.word	0xe000ed00

08012454 <_ZN20TouchGFXGeneratedHALD1Ev>:
 8012454:	4a02      	ldr	r2, [pc, #8]	@ (8012460 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 8012456:	6002      	str	r2, [r0, #0]
 8012458:	4a02      	ldr	r2, [pc, #8]	@ (8012464 <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 801245a:	6002      	str	r2, [r0, #0]
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop
 8012460:	0802a09c 	.word	0x0802a09c
 8012464:	0802a244 	.word	0x0802a244

08012468 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8012468:	b538      	push	{r3, r4, r5, lr}
 801246a:	4604      	mov	r4, r0
    HAL::initialize();
 801246c:	f000 fb97 	bl	8012b9e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8012470:	6823      	ldr	r3, [r4, #0]
 8012472:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8012474:	f002 fab6 	bl	80149e4 <_ZN8touchgfx11Application11getInstanceEv>
 8012478:	4601      	mov	r1, r0
 801247a:	4620      	mov	r0, r4
 801247c:	47a8      	blx	r5
    enableLCDControllerInterrupt();
 801247e:	6823      	ldr	r3, [r4, #0]
 8012480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012484:	4620      	mov	r0, r4
 8012486:	4798      	blx	r3
    enableInterrupts();
 8012488:	6823      	ldr	r3, [r4, #0]
 801248a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801248c:	4620      	mov	r0, r4
 801248e:	4798      	blx	r3
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC0100000, (void*)0);
 8012490:	6823      	ldr	r3, [r4, #0]
 8012492:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8012496:	2300      	movs	r3, #0
 8012498:	4a02      	ldr	r2, [pc, #8]	@ (80124a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 801249a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 801249e:	4620      	mov	r0, r4
 80124a0:	47a8      	blx	r5
}
 80124a2:	bd38      	pop	{r3, r4, r5, pc}
 80124a4:	c0100000 	.word	0xc0100000

080124a8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 80124a8:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 80124aa:	f000 fb5f 	bl	8012b6c <_ZN8touchgfx3HAL10beginFrameEv>
}
 80124ae:	bd08      	pop	{r3, pc}

080124b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80124b0:	b508      	push	{r3, lr}
    HAL::endFrame();
 80124b2:	f000 fb67 	bl	8012b84 <_ZN8touchgfx3HAL8endFrameEv>
    touchgfx::OSWrappers::signalRenderingDone();
 80124b6:	f7ff fa79 	bl	80119ac <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>
}
 80124ba:	bd08      	pop	{r3, pc}

080124bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 80124bc:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 80124be:	f000 fb1f 	bl	8012b00 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80124c2:	bd08      	pop	{r3, pc}

080124c4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 80124c4:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 80124c6:	f000 fc8c 	bl	8012de2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 80124ca:	bd08      	pop	{r3, pc}

080124cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 80124cc:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 80124ce:	f000 fb11 	bl	8012af4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80124d2:	bd08      	pop	{r3, pc}

080124d4 <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80124d4:	b510      	push	{r4, lr}
 80124d6:	4604      	mov	r4, r0
 80124d8:	4b04      	ldr	r3, [pc, #16]	@ (80124ec <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 80124da:	6003      	str	r3, [r0, #0]
 80124dc:	4b04      	ldr	r3, [pc, #16]	@ (80124f0 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 80124de:	6003      	str	r3, [r0, #0]
 80124e0:	217c      	movs	r1, #124	@ 0x7c
 80124e2:	f012 fb76 	bl	8024bd2 <_ZdlPvj>
 80124e6:	4620      	mov	r0, r4
 80124e8:	bd10      	pop	{r4, pc}
 80124ea:	bf00      	nop
 80124ec:	0802a09c 	.word	0x0802a09c
 80124f0:	0802a244 	.word	0x0802a244

080124f4 <HAL_LTDC_LineEventCallback>:
        return instance;
 80124f4:	4b14      	ldr	r3, [pc, #80]	@ (8012548 <HAL_LTDC_LineEventCallback+0x54>)
 80124f6:	681b      	ldr	r3, [r3, #0]

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (!HAL::getInstance())
 80124f8:	b32b      	cbz	r3, 8012546 <HAL_LTDC_LineEventCallback+0x52>
    {
 80124fa:	b510      	push	{r4, lr}
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80124fc:	4b13      	ldr	r3, [pc, #76]	@ (801254c <HAL_LTDC_LineEventCallback+0x58>)
 80124fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012500:	4a13      	ldr	r2, [pc, #76]	@ (8012550 <HAL_LTDC_LineEventCallback+0x5c>)
 8012502:	8811      	ldrh	r1, [r2, #0]
 8012504:	428b      	cmp	r3, r1
 8012506:	d00a      	beq.n	801251e <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8012508:	f7f8 fd7c 	bl	800b004 <HAL_LTDC_ProgramLineEvent>
 801250c:	4b0e      	ldr	r3, [pc, #56]	@ (8012548 <HAL_LTDC_LineEventCallback+0x54>)
 801250e:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8012510:	6803      	ldr	r3, [r0, #0]
 8012512:	6a1b      	ldr	r3, [r3, #32]
 8012514:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
 8012516:	2000      	movs	r0, #0
 8012518:	f7ff f91e 	bl	8011758 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        }
    }
 801251c:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801251e:	4b0d      	ldr	r3, [pc, #52]	@ (8012554 <HAL_LTDC_LineEventCallback+0x60>)
 8012520:	8819      	ldrh	r1, [r3, #0]
 8012522:	f7f8 fd6f 	bl	800b004 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8012526:	4c08      	ldr	r4, [pc, #32]	@ (8012548 <HAL_LTDC_LineEventCallback+0x54>)
 8012528:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 801252a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 801252e:	3301      	adds	r3, #1
 8012530:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            OSWrappers::signalVSync();
 8012534:	f7ff fa34 	bl	80119a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 8012538:	6820      	ldr	r0, [r4, #0]
 801253a:	f001 f889 	bl	8013650 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801253e:	2000      	movs	r0, #0
 8012540:	f7ff f909 	bl	8011756 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012544:	e7ea      	b.n	801251c <HAL_LTDC_LineEventCallback+0x28>
 8012546:	4770      	bx	lr
 8012548:	24004278 	.word	0x24004278
 801254c:	50001000 	.word	0x50001000
 8012550:	2400426a 	.word	0x2400426a
 8012554:	24004268 	.word	0x24004268

08012558 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012558:	8880      	ldrh	r0, [r0, #4]
 801255a:	4770      	bx	lr

0801255c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801255c:	b570      	push	{r4, r5, r6, lr}
 801255e:	6803      	ldr	r3, [r0, #0]
 8012560:	460c      	mov	r4, r1
 8012562:	2100      	movs	r1, #0
 8012564:	4605      	mov	r5, r0
 8012566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012568:	4798      	blx	r3
 801256a:	4606      	mov	r6, r0
 801256c:	682b      	ldr	r3, [r5, #0]
 801256e:	4628      	mov	r0, r5
 8012570:	1ba4      	subs	r4, r4, r6
 8012572:	6a1b      	ldr	r3, [r3, #32]
 8012574:	b2a4      	uxth	r4, r4
 8012576:	4798      	blx	r3
 8012578:	fbb4 f0f0 	udiv	r0, r4, r0
 801257c:	bd70      	pop	{r4, r5, r6, pc}

0801257e <_ZN8touchgfx17AbstractPartition5clearEv>:
 801257e:	2300      	movs	r3, #0
 8012580:	8083      	strh	r3, [r0, #4]
 8012582:	4770      	bx	lr

08012584 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012584:	b510      	push	{r4, lr}
 8012586:	6803      	ldr	r3, [r0, #0]
 8012588:	4604      	mov	r4, r0
 801258a:	8881      	ldrh	r1, [r0, #4]
 801258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801258e:	4798      	blx	r3
 8012590:	88a3      	ldrh	r3, [r4, #4]
 8012592:	3301      	adds	r3, #1
 8012594:	80a3      	strh	r3, [r4, #4]
 8012596:	bd10      	pop	{r4, pc}

08012598 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012598:	6803      	ldr	r3, [r0, #0]
 801259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801259c:	4718      	bx	r3

0801259e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801259e:	4770      	bx	lr

080125a0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80125a0:	4a02      	ldr	r2, [pc, #8]	@ (80125ac <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80125a2:	6002      	str	r2, [r0, #0]
 80125a4:	2200      	movs	r2, #0
 80125a6:	8082      	strh	r2, [r0, #4]
 80125a8:	4770      	bx	lr
 80125aa:	bf00      	nop
 80125ac:	0802a174 	.word	0x0802a174

080125b0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80125b0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80125b2:	4770      	bx	lr

080125b4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80125b4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80125b6:	2000      	movs	r0, #0
 80125b8:	b12b      	cbz	r3, 80125c6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80125ba:	b920      	cbnz	r0, 80125c6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80125bc:	1a5a      	subs	r2, r3, r1
 80125be:	699b      	ldr	r3, [r3, #24]
 80125c0:	4250      	negs	r0, r2
 80125c2:	4150      	adcs	r0, r2
 80125c4:	e7f8      	b.n	80125b8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80125c6:	4770      	bx	lr

080125c8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80125c8:	2300      	movs	r3, #0
 80125ca:	6148      	str	r0, [r1, #20]
 80125cc:	618b      	str	r3, [r1, #24]
 80125ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80125d0:	b913      	cbnz	r3, 80125d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80125d2:	6281      	str	r1, [r0, #40]	@ 0x28
 80125d4:	4770      	bx	lr
 80125d6:	4613      	mov	r3, r2
 80125d8:	699a      	ldr	r2, [r3, #24]
 80125da:	2a00      	cmp	r2, #0
 80125dc:	d1fb      	bne.n	80125d6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80125de:	6199      	str	r1, [r3, #24]
 80125e0:	4770      	bx	lr

080125e2 <_ZN8touchgfx9Container9removeAllEv>:
 80125e2:	2200      	movs	r2, #0
 80125e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80125e6:	b123      	cbz	r3, 80125f2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80125e8:	6999      	ldr	r1, [r3, #24]
 80125ea:	6281      	str	r1, [r0, #40]	@ 0x28
 80125ec:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80125f0:	e7f8      	b.n	80125e4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80125f2:	4770      	bx	lr

080125f4 <_ZN8touchgfx9Container6unlinkEv>:
 80125f4:	2300      	movs	r3, #0
 80125f6:	6283      	str	r3, [r0, #40]	@ 0x28
 80125f8:	4770      	bx	lr

080125fa <_ZNK8touchgfx9Container12getSolidRectEv>:
 80125fa:	2200      	movs	r2, #0
 80125fc:	8002      	strh	r2, [r0, #0]
 80125fe:	8042      	strh	r2, [r0, #2]
 8012600:	8082      	strh	r2, [r0, #4]
 8012602:	80c2      	strh	r2, [r0, #6]
 8012604:	4770      	bx	lr

08012606 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012606:	b570      	push	{r4, r5, r6, lr}
 8012608:	460d      	mov	r5, r1
 801260a:	4616      	mov	r6, r2
 801260c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801260e:	b13c      	cbz	r4, 8012620 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012610:	6823      	ldr	r3, [r4, #0]
 8012612:	4620      	mov	r0, r4
 8012614:	4632      	mov	r2, r6
 8012616:	4629      	mov	r1, r5
 8012618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801261a:	4798      	blx	r3
 801261c:	69a4      	ldr	r4, [r4, #24]
 801261e:	e7f6      	b.n	801260e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012620:	bd70      	pop	{r4, r5, r6, pc}

08012622 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012622:	b538      	push	{r3, r4, r5, lr}
 8012624:	460d      	mov	r5, r1
 8012626:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012628:	b134      	cbz	r4, 8012638 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801262a:	682b      	ldr	r3, [r5, #0]
 801262c:	4621      	mov	r1, r4
 801262e:	4628      	mov	r0, r5
 8012630:	689b      	ldr	r3, [r3, #8]
 8012632:	4798      	blx	r3
 8012634:	69a4      	ldr	r4, [r4, #24]
 8012636:	e7f7      	b.n	8012628 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012638:	bd38      	pop	{r3, r4, r5, pc}

0801263a <_ZN8touchgfx9ContainerD1Ev>:
 801263a:	4770      	bx	lr

0801263c <_ZN8touchgfx9ContainerD0Ev>:
 801263c:	b510      	push	{r4, lr}
 801263e:	4604      	mov	r4, r0
 8012640:	212c      	movs	r1, #44	@ 0x2c
 8012642:	f012 fac6 	bl	8024bd2 <_ZdlPvj>
 8012646:	4620      	mov	r0, r4
 8012648:	bd10      	pop	{r4, pc}

0801264a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801264a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801264c:	b19b      	cbz	r3, 8012676 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801264e:	428b      	cmp	r3, r1
 8012650:	d109      	bne.n	8012666 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012652:	699a      	ldr	r2, [r3, #24]
 8012654:	2100      	movs	r1, #0
 8012656:	6159      	str	r1, [r3, #20]
 8012658:	6282      	str	r2, [r0, #40]	@ 0x28
 801265a:	b902      	cbnz	r2, 801265e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801265c:	4770      	bx	lr
 801265e:	6199      	str	r1, [r3, #24]
 8012660:	4770      	bx	lr
 8012662:	4613      	mov	r3, r2
 8012664:	b13a      	cbz	r2, 8012676 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012666:	699a      	ldr	r2, [r3, #24]
 8012668:	428a      	cmp	r2, r1
 801266a:	d1fa      	bne.n	8012662 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801266c:	698a      	ldr	r2, [r1, #24]
 801266e:	619a      	str	r2, [r3, #24]
 8012670:	2300      	movs	r3, #0
 8012672:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012676:	4770      	bx	lr

08012678 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012678:	b410      	push	{r4}
 801267a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801267c:	4604      	mov	r4, r0
 801267e:	b92b      	cbnz	r3, 801268c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012680:	6803      	ldr	r3, [r0, #0]
 8012682:	4611      	mov	r1, r2
 8012684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801268a:	4718      	bx	r3
 801268c:	b941      	cbnz	r1, 80126a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801268e:	6193      	str	r3, [r2, #24]
 8012690:	6282      	str	r2, [r0, #40]	@ 0x28
 8012692:	6154      	str	r4, [r2, #20]
 8012694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	4603      	mov	r3, r0
 801269c:	2800      	cmp	r0, #0
 801269e:	d0f9      	beq.n	8012694 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80126a0:	4299      	cmp	r1, r3
 80126a2:	6998      	ldr	r0, [r3, #24]
 80126a4:	d1f9      	bne.n	801269a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80126a6:	6190      	str	r0, [r2, #24]
 80126a8:	618a      	str	r2, [r1, #24]
 80126aa:	e7f2      	b.n	8012692 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080126ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80126ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126b0:	461f      	mov	r7, r3
 80126b2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80126b6:	460d      	mov	r5, r1
 80126b8:	4616      	mov	r6, r2
 80126ba:	b103      	cbz	r3, 80126be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80126bc:	6038      	str	r0, [r7, #0]
 80126be:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80126c0:	b314      	cbz	r4, 8012708 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80126c2:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80126c6:	b1eb      	cbz	r3, 8012704 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80126c8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80126cc:	428d      	cmp	r5, r1
 80126ce:	db19      	blt.n	8012704 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80126d0:	b289      	uxth	r1, r1
 80126d2:	8923      	ldrh	r3, [r4, #8]
 80126d4:	440b      	add	r3, r1
 80126d6:	b21b      	sxth	r3, r3
 80126d8:	429d      	cmp	r5, r3
 80126da:	da13      	bge.n	8012704 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80126dc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80126e0:	4296      	cmp	r6, r2
 80126e2:	db0f      	blt.n	8012704 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80126e4:	b292      	uxth	r2, r2
 80126e6:	8963      	ldrh	r3, [r4, #10]
 80126e8:	4413      	add	r3, r2
 80126ea:	b21b      	sxth	r3, r3
 80126ec:	429e      	cmp	r6, r3
 80126ee:	da09      	bge.n	8012704 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80126f0:	6823      	ldr	r3, [r4, #0]
 80126f2:	1ab2      	subs	r2, r6, r2
 80126f4:	1a69      	subs	r1, r5, r1
 80126f6:	4620      	mov	r0, r4
 80126f8:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80126fc:	b212      	sxth	r2, r2
 80126fe:	463b      	mov	r3, r7
 8012700:	b209      	sxth	r1, r1
 8012702:	47c0      	blx	r8
 8012704:	69a4      	ldr	r4, [r4, #24]
 8012706:	e7db      	b.n	80126c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801270c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 801270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012710:	4c6d      	ldr	r4, [pc, #436]	@ (80128c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012712:	b0a1      	sub	sp, #132	@ 0x84
 8012714:	4606      	mov	r6, r0
 8012716:	6824      	ldr	r4, [r4, #0]
 8012718:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801271a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 801271e:	2400      	movs	r4, #0
 8012720:	9303      	str	r3, [sp, #12]
 8012722:	802c      	strh	r4, [r5, #0]
 8012724:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8012726:	802c      	strh	r4, [r5, #0]
 8012728:	601c      	str	r4, [r3, #0]
 801272a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801272e:	f7ff ffbd 	bl	80126ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012732:	f1b9 0f03 	cmp.w	r9, #3
 8012736:	f340 80c1 	ble.w	80128bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801273a:	4631      	mov	r1, r6
 801273c:	a80c      	add	r0, sp, #48	@ 0x30
 801273e:	f003 fa65 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012742:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8012746:	9306      	str	r3, [sp, #24]
 8012748:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801274c:	9307      	str	r3, [sp, #28]
 801274e:	9b03      	ldr	r3, [sp, #12]
 8012750:	f8d3 a000 	ldr.w	sl, [r3]
 8012754:	f1ba 0f00 	cmp.w	sl, #0
 8012758:	f000 80b3 	beq.w	80128c2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 801275c:	4651      	mov	r1, sl
 801275e:	a810      	add	r0, sp, #64	@ 0x40
 8012760:	f003 fa54 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012764:	2002      	movs	r0, #2
 8012766:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 801276a:	9b01      	ldr	r3, [sp, #4]
 801276c:	9a06      	ldr	r2, [sp, #24]
 801276e:	fb91 f1f0 	sdiv	r1, r1, r0
 8012772:	189d      	adds	r5, r3, r2
 8012774:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8012778:	9a07      	ldr	r2, [sp, #28]
 801277a:	4419      	add	r1, r3
 801277c:	9b02      	ldr	r3, [sp, #8]
 801277e:	4413      	add	r3, r2
 8012780:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8012784:	1a6d      	subs	r5, r5, r1
 8012786:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801278a:	fb92 f2f0 	sdiv	r2, r2, r0
 801278e:	440a      	add	r2, r1
 8012790:	1a9b      	subs	r3, r3, r2
 8012792:	435b      	muls	r3, r3
 8012794:	fb05 3505 	mla	r5, r5, r5, r3
 8012798:	4f4c      	ldr	r7, [pc, #304]	@ (80128cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801279a:	ac10      	add	r4, sp, #64	@ 0x40
 801279c:	f1b9 0f0c 	cmp.w	r9, #12
 80127a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80127a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80127a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80127aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127ac:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80127b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80127b4:	f04f 0303 	mov.w	r3, #3
 80127b8:	bfd8      	it	le
 80127ba:	f109 32ff 	addle.w	r2, r9, #4294967295
 80127be:	f04f 0400 	mov.w	r4, #0
 80127c2:	f8cd 9000 	str.w	r9, [sp]
 80127c6:	bfcc      	ite	gt
 80127c8:	4698      	movgt	r8, r3
 80127ca:	fb92 f8f3 	sdivle	r8, r2, r3
 80127ce:	1c63      	adds	r3, r4, #1
 80127d0:	aa10      	add	r2, sp, #64	@ 0x40
 80127d2:	f004 0401 	and.w	r4, r4, #1
 80127d6:	f04f 0b00 	mov.w	fp, #0
 80127da:	9308      	str	r3, [sp, #32]
 80127dc:	9b00      	ldr	r3, [sp, #0]
 80127de:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80127e2:	fb93 f3f8 	sdiv	r3, r3, r8
 80127e6:	3404      	adds	r4, #4
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	9304      	str	r3, [sp, #16]
 80127ec:	9a04      	ldr	r2, [sp, #16]
 80127ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80127f2:	fb13 f302 	smulbb	r3, r3, r2
 80127f6:	9a01      	ldr	r2, [sp, #4]
 80127f8:	b29b      	uxth	r3, r3
 80127fa:	1899      	adds	r1, r3, r2
 80127fc:	9305      	str	r3, [sp, #20]
 80127fe:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012802:	b209      	sxth	r1, r1
 8012804:	4299      	cmp	r1, r3
 8012806:	db4d      	blt.n	80128a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012808:	8932      	ldrh	r2, [r6, #8]
 801280a:	4413      	add	r3, r2
 801280c:	b21b      	sxth	r3, r3
 801280e:	4299      	cmp	r1, r3
 8012810:	da48      	bge.n	80128a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012812:	9b04      	ldr	r3, [sp, #16]
 8012814:	6827      	ldr	r7, [r4, #0]
 8012816:	fb17 f703 	smulbb	r7, r7, r3
 801281a:	9b02      	ldr	r3, [sp, #8]
 801281c:	b2bf      	uxth	r7, r7
 801281e:	18fa      	adds	r2, r7, r3
 8012820:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012824:	b212      	sxth	r2, r2
 8012826:	429a      	cmp	r2, r3
 8012828:	db3c      	blt.n	80128a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801282a:	8970      	ldrh	r0, [r6, #10]
 801282c:	4403      	add	r3, r0
 801282e:	b21b      	sxth	r3, r3
 8012830:	429a      	cmp	r2, r3
 8012832:	da37      	bge.n	80128a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012834:	2300      	movs	r3, #0
 8012836:	4630      	mov	r0, r6
 8012838:	930b      	str	r3, [sp, #44]	@ 0x2c
 801283a:	ab0b      	add	r3, sp, #44	@ 0x2c
 801283c:	f7ff ff36 	bl	80126ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012840:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012842:	b37a      	cbz	r2, 80128a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012844:	4552      	cmp	r2, sl
 8012846:	d02d      	beq.n	80128a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012848:	4611      	mov	r1, r2
 801284a:	a80e      	add	r0, sp, #56	@ 0x38
 801284c:	9209      	str	r2, [sp, #36]	@ 0x24
 801284e:	f003 f9dd 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012852:	f04f 0e02 	mov.w	lr, #2
 8012856:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 801285a:	9a06      	ldr	r2, [sp, #24]
 801285c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8012860:	9b01      	ldr	r3, [sp, #4]
 8012862:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8012866:	4413      	add	r3, r2
 8012868:	9a07      	ldr	r2, [sp, #28]
 801286a:	fb91 f1fe 	sdiv	r1, r1, lr
 801286e:	fb9c fcfe 	sdiv	ip, ip, lr
 8012872:	4401      	add	r1, r0
 8012874:	1a58      	subs	r0, r3, r1
 8012876:	9b02      	ldr	r3, [sp, #8]
 8012878:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801287c:	4413      	add	r3, r2
 801287e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012880:	448c      	add	ip, r1
 8012882:	eba3 030c 	sub.w	r3, r3, ip
 8012886:	435b      	muls	r3, r3
 8012888:	fb00 3300 	mla	r3, r0, r0, r3
 801288c:	42ab      	cmp	r3, r5
 801288e:	d208      	bcs.n	80128a2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012892:	461d      	mov	r5, r3
 8012894:	9803      	ldr	r0, [sp, #12]
 8012896:	6001      	str	r1, [r0, #0]
 8012898:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801289a:	9805      	ldr	r0, [sp, #20]
 801289c:	8008      	strh	r0, [r1, #0]
 801289e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80128a0:	800f      	strh	r7, [r1, #0]
 80128a2:	4692      	mov	sl, r2
 80128a4:	f10b 0b01 	add.w	fp, fp, #1
 80128a8:	3408      	adds	r4, #8
 80128aa:	f1bb 0f04 	cmp.w	fp, #4
 80128ae:	d19d      	bne.n	80127ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80128b0:	9b00      	ldr	r3, [sp, #0]
 80128b2:	9c08      	ldr	r4, [sp, #32]
 80128b4:	444b      	add	r3, r9
 80128b6:	4544      	cmp	r4, r8
 80128b8:	9300      	str	r3, [sp, #0]
 80128ba:	d188      	bne.n	80127ce <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80128bc:	b021      	add	sp, #132	@ 0x84
 80128be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c2:	f04f 35ff 	mov.w	r5, #4294967295
 80128c6:	e767      	b.n	8012798 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80128c8:	24004278 	.word	0x24004278
 80128cc:	08027ea8 	.word	0x08027ea8

080128d0 <_ZN8touchgfx4RectaNERKS0_>:
 80128d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128d4:	f9b1 7000 	ldrsh.w	r7, [r1]
 80128d8:	888c      	ldrh	r4, [r1, #4]
 80128da:	f9b0 9000 	ldrsh.w	r9, [r0]
 80128de:	443c      	add	r4, r7
 80128e0:	b2a4      	uxth	r4, r4
 80128e2:	fa0f f884 	sxth.w	r8, r4
 80128e6:	45c1      	cmp	r9, r8
 80128e8:	da2f      	bge.n	801294a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80128ea:	8882      	ldrh	r2, [r0, #4]
 80128ec:	444a      	add	r2, r9
 80128ee:	b292      	uxth	r2, r2
 80128f0:	fa0f fe82 	sxth.w	lr, r2
 80128f4:	4577      	cmp	r7, lr
 80128f6:	da28      	bge.n	801294a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80128f8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80128fc:	88cb      	ldrh	r3, [r1, #6]
 80128fe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012902:	442b      	add	r3, r5
 8012904:	b21b      	sxth	r3, r3
 8012906:	429e      	cmp	r6, r3
 8012908:	da1f      	bge.n	801294a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801290a:	88c3      	ldrh	r3, [r0, #6]
 801290c:	4433      	add	r3, r6
 801290e:	b29b      	uxth	r3, r3
 8012910:	fa0f fc83 	sxth.w	ip, r3
 8012914:	4565      	cmp	r5, ip
 8012916:	da18      	bge.n	801294a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012918:	454f      	cmp	r7, r9
 801291a:	bfb8      	it	lt
 801291c:	464f      	movlt	r7, r9
 801291e:	42b5      	cmp	r5, r6
 8012920:	bfb8      	it	lt
 8012922:	4635      	movlt	r5, r6
 8012924:	45f0      	cmp	r8, lr
 8012926:	bfd8      	it	le
 8012928:	4622      	movle	r2, r4
 801292a:	1bd2      	subs	r2, r2, r7
 801292c:	8082      	strh	r2, [r0, #4]
 801292e:	884a      	ldrh	r2, [r1, #2]
 8012930:	88c9      	ldrh	r1, [r1, #6]
 8012932:	8007      	strh	r7, [r0, #0]
 8012934:	440a      	add	r2, r1
 8012936:	8045      	strh	r5, [r0, #2]
 8012938:	b292      	uxth	r2, r2
 801293a:	b211      	sxth	r1, r2
 801293c:	458c      	cmp	ip, r1
 801293e:	bfa8      	it	ge
 8012940:	4613      	movge	r3, r2
 8012942:	1b5b      	subs	r3, r3, r5
 8012944:	80c3      	strh	r3, [r0, #6]
 8012946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801294a:	2300      	movs	r3, #0
 801294c:	8003      	strh	r3, [r0, #0]
 801294e:	8043      	strh	r3, [r0, #2]
 8012950:	8083      	strh	r3, [r0, #4]
 8012952:	80c3      	strh	r3, [r0, #6]
 8012954:	e7f7      	b.n	8012946 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012956 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012956:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	dd06      	ble.n	801296c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801295e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012962:	2800      	cmp	r0, #0
 8012964:	bfcc      	ite	gt
 8012966:	2000      	movgt	r0, #0
 8012968:	2001      	movle	r0, #1
 801296a:	4770      	bx	lr
 801296c:	2001      	movs	r0, #1
 801296e:	4770      	bx	lr

08012970 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012974:	2300      	movs	r3, #0
 8012976:	4604      	mov	r4, r0
 8012978:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801297a:	8003      	strh	r3, [r0, #0]
 801297c:	8043      	strh	r3, [r0, #2]
 801297e:	8083      	strh	r3, [r0, #4]
 8012980:	80c3      	strh	r3, [r0, #6]
 8012982:	2d00      	cmp	r5, #0
 8012984:	d040      	beq.n	8012a08 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012986:	1d28      	adds	r0, r5, #4
 8012988:	f7ff ffe5 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 801298c:	b988      	cbnz	r0, 80129b2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801298e:	4620      	mov	r0, r4
 8012990:	f7ff ffe1 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012994:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012998:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801299c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80129a0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80129a4:	b138      	cbz	r0, 80129b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80129a6:	8022      	strh	r2, [r4, #0]
 80129a8:	8063      	strh	r3, [r4, #2]
 80129aa:	f8a4 e004 	strh.w	lr, [r4, #4]
 80129ae:	f8a4 c006 	strh.w	ip, [r4, #6]
 80129b2:	69ad      	ldr	r5, [r5, #24]
 80129b4:	e7e5      	b.n	8012982 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80129b6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80129ba:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80129be:	4290      	cmp	r0, r2
 80129c0:	4607      	mov	r7, r0
 80129c2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80129c6:	460e      	mov	r6, r1
 80129c8:	bfa8      	it	ge
 80129ca:	4617      	movge	r7, r2
 80129cc:	4299      	cmp	r1, r3
 80129ce:	4472      	add	r2, lr
 80129d0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80129d4:	bfa8      	it	ge
 80129d6:	461e      	movge	r6, r3
 80129d8:	4440      	add	r0, r8
 80129da:	4471      	add	r1, lr
 80129dc:	4463      	add	r3, ip
 80129de:	b200      	sxth	r0, r0
 80129e0:	8027      	strh	r7, [r4, #0]
 80129e2:	b212      	sxth	r2, r2
 80129e4:	8066      	strh	r6, [r4, #2]
 80129e6:	b209      	sxth	r1, r1
 80129e8:	b21b      	sxth	r3, r3
 80129ea:	4290      	cmp	r0, r2
 80129ec:	bfac      	ite	ge
 80129ee:	ebc7 0200 	rsbge	r2, r7, r0
 80129f2:	ebc7 0202 	rsblt	r2, r7, r2
 80129f6:	4299      	cmp	r1, r3
 80129f8:	bfac      	ite	ge
 80129fa:	ebc6 0301 	rsbge	r3, r6, r1
 80129fe:	ebc6 0303 	rsblt	r3, r6, r3
 8012a02:	80a2      	strh	r2, [r4, #4]
 8012a04:	80e3      	strh	r3, [r4, #6]
 8012a06:	e7d4      	b.n	80129b2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012a08:	4620      	mov	r0, r4
 8012a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a0e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012a0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012a12:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012a16:	b383      	cbz	r3, 8012a7a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012a18:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012a1a:	b374      	cbz	r4, 8012a7a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012a1c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012a20:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012a24:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012a28:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012a2c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012a30:	b303      	cbz	r3, 8012a74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012a32:	4668      	mov	r0, sp
 8012a34:	1d21      	adds	r1, r4, #4
 8012a36:	f8ad 5000 	strh.w	r5, [sp]
 8012a3a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012a3e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012a42:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012a46:	f7ff ff43 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 8012a4a:	4668      	mov	r0, sp
 8012a4c:	f7ff ff83 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012a50:	b980      	cbnz	r0, 8012a74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012a52:	f8bd 3000 	ldrh.w	r3, [sp]
 8012a56:	4669      	mov	r1, sp
 8012a58:	88a2      	ldrh	r2, [r4, #4]
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	1a9b      	subs	r3, r3, r2
 8012a5e:	88e2      	ldrh	r2, [r4, #6]
 8012a60:	f8ad 3000 	strh.w	r3, [sp]
 8012a64:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012a68:	1a9b      	subs	r3, r3, r2
 8012a6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012a6e:	6823      	ldr	r3, [r4, #0]
 8012a70:	689b      	ldr	r3, [r3, #8]
 8012a72:	4798      	blx	r3
 8012a74:	69a4      	ldr	r4, [r4, #24]
 8012a76:	2c00      	cmp	r4, #0
 8012a78:	d1d8      	bne.n	8012a2c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012a7a:	b002      	add	sp, #8
 8012a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a80 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a82:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012a86:	460d      	mov	r5, r1
 8012a88:	4616      	mov	r6, r2
 8012a8a:	b323      	cbz	r3, 8012ad6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012a8c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012a8e:	b314      	cbz	r4, 8012ad6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012a90:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012a94:	b1eb      	cbz	r3, 8012ad2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012a96:	6828      	ldr	r0, [r5, #0]
 8012a98:	466b      	mov	r3, sp
 8012a9a:	6869      	ldr	r1, [r5, #4]
 8012a9c:	c303      	stmia	r3!, {r0, r1}
 8012a9e:	4668      	mov	r0, sp
 8012aa0:	1d21      	adds	r1, r4, #4
 8012aa2:	f7ff ff15 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 8012aa6:	4668      	mov	r0, sp
 8012aa8:	f7ff ff55 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012aac:	b988      	cbnz	r0, 8012ad2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012aae:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ab2:	4669      	mov	r1, sp
 8012ab4:	88a2      	ldrh	r2, [r4, #4]
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	1a9b      	subs	r3, r3, r2
 8012aba:	88e2      	ldrh	r2, [r4, #6]
 8012abc:	f8ad 3000 	strh.w	r3, [sp]
 8012ac0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012ac4:	1a9b      	subs	r3, r3, r2
 8012ac6:	4632      	mov	r2, r6
 8012ac8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012acc:	6823      	ldr	r3, [r4, #0]
 8012ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012ad0:	4798      	blx	r3
 8012ad2:	69a4      	ldr	r4, [r4, #24]
 8012ad4:	e7db      	b.n	8012a8e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012ad6:	b002      	add	sp, #8
 8012ad8:	bd70      	pop	{r4, r5, r6, pc}

08012ada <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8012ada:	4770      	bx	lr

08012adc <_ZN8touchgfx3HAL10FlushCacheEv>:
 8012adc:	4770      	bx	lr

08012ade <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012ade:	6803      	ldr	r3, [r0, #0]
 8012ae0:	b513      	push	{r0, r1, r4, lr}
 8012ae2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	e9cd 3300 	strd	r3, r3, [sp]
 8012aec:	466b      	mov	r3, sp
 8012aee:	47a0      	blx	r4
 8012af0:	b002      	add	sp, #8
 8012af2:	bd10      	pop	{r4, pc}

08012af4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012af4:	2301      	movs	r3, #1
 8012af6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012afa:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012afe:	4770      	bx	lr

08012b00 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012b00:	2301      	movs	r3, #1
 8012b02:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012b06:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012b0a:	4770      	bx	lr

08012b0c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012b0c:	6843      	ldr	r3, [r0, #4]
 8012b0e:	2201      	movs	r2, #1
 8012b10:	725a      	strb	r2, [r3, #9]
 8012b12:	6840      	ldr	r0, [r0, #4]
 8012b14:	6803      	ldr	r3, [r0, #0]
 8012b16:	691b      	ldr	r3, [r3, #16]
 8012b18:	4718      	bx	r3

08012b1a <_ZN8touchgfx3HAL8flushDMAEv>:
 8012b1a:	6840      	ldr	r0, [r0, #4]
 8012b1c:	6803      	ldr	r3, [r0, #0]
 8012b1e:	689b      	ldr	r3, [r3, #8]
 8012b20:	4718      	bx	r3

08012b22 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012b22:	b530      	push	{r4, r5, lr}
 8012b24:	b08b      	sub	sp, #44	@ 0x2c
 8012b26:	6804      	ldr	r4, [r0, #0]
 8012b28:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8012b2c:	9509      	str	r5, [sp, #36]	@ 0x24
 8012b2e:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8012b32:	9508      	str	r5, [sp, #32]
 8012b34:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8012b38:	9507      	str	r5, [sp, #28]
 8012b3a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8012b3e:	9506      	str	r5, [sp, #24]
 8012b40:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8012b44:	9505      	str	r5, [sp, #20]
 8012b46:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8012b4a:	9504      	str	r5, [sp, #16]
 8012b4c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8012b50:	9503      	str	r5, [sp, #12]
 8012b52:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8012b56:	9502      	str	r5, [sp, #8]
 8012b58:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8012b5c:	e9cd 3500 	strd	r3, r5, [sp]
 8012b60:	4613      	mov	r3, r2
 8012b62:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8012b64:	2200      	movs	r2, #0
 8012b66:	47a0      	blx	r4
 8012b68:	b00b      	add	sp, #44	@ 0x2c
 8012b6a:	bd30      	pop	{r4, r5, pc}

08012b6c <_ZN8touchgfx3HAL10beginFrameEv>:
 8012b6c:	4b04      	ldr	r3, [pc, #16]	@ (8012b80 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	b123      	cbz	r3, 8012b7c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012b72:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8012b76:	f080 0001 	eor.w	r0, r0, #1
 8012b7a:	4770      	bx	lr
 8012b7c:	2001      	movs	r0, #1
 8012b7e:	4770      	bx	lr
 8012b80:	24004276 	.word	0x24004276

08012b84 <_ZN8touchgfx3HAL8endFrameEv>:
 8012b84:	b510      	push	{r4, lr}
 8012b86:	4604      	mov	r4, r0
 8012b88:	6840      	ldr	r0, [r0, #4]
 8012b8a:	6803      	ldr	r3, [r0, #0]
 8012b8c:	689b      	ldr	r3, [r3, #8]
 8012b8e:	4798      	blx	r3
 8012b90:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8012b94:	b113      	cbz	r3, 8012b9c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012b96:	2301      	movs	r3, #1
 8012b98:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8012b9c:	bd10      	pop	{r4, pc}

08012b9e <_ZN8touchgfx3HAL10initializeEv>:
 8012b9e:	b510      	push	{r4, lr}
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	f7fe fed7 	bl	8011954 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012ba6:	f7fe fdd5 	bl	8011754 <_ZN8touchgfx4GPIO4initEv>
 8012baa:	6860      	ldr	r0, [r4, #4]
 8012bac:	6803      	ldr	r3, [r0, #0]
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	4798      	blx	r3
 8012bb2:	68e0      	ldr	r0, [r4, #12]
 8012bb4:	6803      	ldr	r3, [r0, #0]
 8012bb6:	689b      	ldr	r3, [r3, #8]
 8012bb8:	4798      	blx	r3
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bc4:	4718      	bx	r3

08012bc6 <_ZN8touchgfx3HAL9taskEntryEv>:
 8012bc6:	b508      	push	{r3, lr}
 8012bc8:	6803      	ldr	r3, [r0, #0]
 8012bca:	4604      	mov	r4, r0
 8012bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012bd0:	4798      	blx	r3
 8012bd2:	6823      	ldr	r3, [r4, #0]
 8012bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	4798      	blx	r3
 8012bda:	f7fe fef5 	bl	80119c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8012bde:	6823      	ldr	r3, [r4, #0]
 8012be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012be2:	e7f8      	b.n	8012bd6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08012be4 <_ZN8touchgfx3HAL4tickEv>:
 8012be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012be6:	6803      	ldr	r3, [r0, #0]
 8012be8:	4604      	mov	r4, r0
 8012bea:	4d5b      	ldr	r5, [pc, #364]	@ (8012d58 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8012bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012bf0:	4798      	blx	r3
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	f000 8095 	beq.w	8012d22 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8012bf8:	2001      	movs	r0, #1
 8012bfa:	2600      	movs	r6, #0
 8012bfc:	f7fe fdab 	bl	8011756 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012c00:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8012c04:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8012c08:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8012c0c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8012c10:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8012c14:	b133      	cbz	r3, 8012c24 <_ZN8touchgfx3HAL4tickEv+0x40>
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8012c1e:	4798      	blx	r3
 8012c20:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012c24:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8012c28:	2601      	movs	r6, #1
 8012c2a:	6862      	ldr	r2, [r4, #4]
 8012c2c:	f083 0301 	eor.w	r3, r3, #1
 8012c30:	702e      	strb	r6, [r5, #0]
 8012c32:	7253      	strb	r3, [r2, #9]
 8012c34:	f001 fed6 	bl	80149e4 <_ZN8touchgfx11Application11getInstanceEv>
 8012c38:	6803      	ldr	r3, [r0, #0]
 8012c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c3c:	4798      	blx	r3
 8012c3e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012c42:	b90b      	cbnz	r3, 8012c48 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012c44:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8012c48:	f001 fecc 	bl	80149e4 <_ZN8touchgfx11Application11getInstanceEv>
 8012c4c:	6803      	ldr	r3, [r0, #0]
 8012c4e:	695b      	ldr	r3, [r3, #20]
 8012c50:	4798      	blx	r3
 8012c52:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8012c54:	6803      	ldr	r3, [r0, #0]
 8012c56:	691b      	ldr	r3, [r3, #16]
 8012c58:	4798      	blx	r3
 8012c5a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012c5e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8012c62:	3b01      	subs	r3, #1
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8012c6a:	b10a      	cbz	r2, 8012c70 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d1eb      	bne.n	8012c48 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012c70:	4a3a      	ldr	r2, [pc, #232]	@ (8012d5c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012c72:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8012c76:	7813      	ldrb	r3, [r2, #0]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	b25b      	sxtb	r3, r3
 8012c7c:	4299      	cmp	r1, r3
 8012c7e:	7013      	strb	r3, [r2, #0]
 8012c80:	dc10      	bgt.n	8012ca4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012c82:	2300      	movs	r3, #0
 8012c84:	68e0      	ldr	r0, [r4, #12]
 8012c86:	a902      	add	r1, sp, #8
 8012c88:	7013      	strb	r3, [r2, #0]
 8012c8a:	aa03      	add	r2, sp, #12
 8012c8c:	6803      	ldr	r3, [r0, #0]
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	4798      	blx	r3
 8012c92:	6823      	ldr	r3, [r4, #0]
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d050      	beq.n	8012d3a <_ZN8touchgfx3HAL4tickEv+0x156>
 8012c98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012ca2:	4798      	blx	r3
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	6960      	ldr	r0, [r4, #20]
 8012ca8:	f88d 3007 	strb.w	r3, [sp, #7]
 8012cac:	b158      	cbz	r0, 8012cc6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012cae:	6803      	ldr	r3, [r0, #0]
 8012cb0:	f10d 0107 	add.w	r1, sp, #7
 8012cb4:	68db      	ldr	r3, [r3, #12]
 8012cb6:	4798      	blx	r3
 8012cb8:	b128      	cbz	r0, 8012cc6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012cba:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8012cbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012cc0:	6803      	ldr	r3, [r0, #0]
 8012cc2:	68db      	ldr	r3, [r3, #12]
 8012cc4:	4798      	blx	r3
 8012cc6:	f104 001c 	add.w	r0, r4, #28
 8012cca:	f011 fecd 	bl	8024a68 <_ZN8touchgfx8Gestures4tickEv>
 8012cce:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8012cd2:	b30b      	cbz	r3, 8012d18 <_ZN8touchgfx3HAL4tickEv+0x134>
 8012cd4:	6920      	ldr	r0, [r4, #16]
 8012cd6:	6803      	ldr	r3, [r0, #0]
 8012cd8:	691b      	ldr	r3, [r3, #16]
 8012cda:	4798      	blx	r3
 8012cdc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012cde:	4606      	mov	r6, r0
 8012ce0:	b903      	cbnz	r3, 8012ce4 <_ZN8touchgfx3HAL4tickEv+0x100>
 8012ce2:	6760      	str	r0, [r4, #116]	@ 0x74
 8012ce4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8012d60 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8012ce8:	1af3      	subs	r3, r6, r3
 8012cea:	4293      	cmp	r3, r2
 8012cec:	d914      	bls.n	8012d18 <_ZN8touchgfx3HAL4tickEv+0x134>
 8012cee:	6920      	ldr	r0, [r4, #16]
 8012cf0:	6803      	ldr	r3, [r0, #0]
 8012cf2:	699b      	ldr	r3, [r3, #24]
 8012cf4:	4798      	blx	r3
 8012cf6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012cf8:	2264      	movs	r2, #100	@ 0x64
 8012cfa:	1af3      	subs	r3, r6, r3
 8012cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d00:	fbb0 f0f3 	udiv	r0, r0, r3
 8012d04:	2800      	cmp	r0, #0
 8012d06:	dc1d      	bgt.n	8012d44 <_ZN8touchgfx3HAL4tickEv+0x160>
 8012d08:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8012d0c:	6920      	ldr	r0, [r4, #16]
 8012d0e:	2100      	movs	r1, #0
 8012d10:	6803      	ldr	r3, [r0, #0]
 8012d12:	69db      	ldr	r3, [r3, #28]
 8012d14:	4798      	blx	r3
 8012d16:	6766      	str	r6, [r4, #116]	@ 0x74
 8012d18:	f001 fe64 	bl	80149e4 <_ZN8touchgfx11Application11getInstanceEv>
 8012d1c:	6803      	ldr	r3, [r0, #0]
 8012d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d20:	4798      	blx	r3
 8012d22:	6823      	ldr	r3, [r4, #0]
 8012d24:	4620      	mov	r0, r4
 8012d26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012d2a:	4798      	blx	r3
 8012d2c:	2001      	movs	r0, #1
 8012d2e:	f7fe fd13 	bl	8011758 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012d32:	2300      	movs	r3, #0
 8012d34:	702b      	strb	r3, [r5, #0]
 8012d36:	b004      	add	sp, #16
 8012d38:	bd70      	pop	{r4, r5, r6, pc}
 8012d3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8012d3e:	4620      	mov	r0, r4
 8012d40:	4798      	blx	r3
 8012d42:	e7af      	b.n	8012ca4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012d44:	2863      	cmp	r0, #99	@ 0x63
 8012d46:	bfcb      	itete	gt
 8012d48:	2300      	movgt	r3, #0
 8012d4a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8012d4e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8012d52:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8012d56:	e7d9      	b.n	8012d0c <_ZN8touchgfx3HAL4tickEv+0x128>
 8012d58:	2400427c 	.word	0x2400427c
 8012d5c:	2400427d 	.word	0x2400427d
 8012d60:	05f5e100 	.word	0x05f5e100

08012d64 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012d64:	b510      	push	{r4, lr}
 8012d66:	4604      	mov	r4, r0
 8012d68:	f7fe fe08 	bl	801197c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	6863      	ldr	r3, [r4, #4]
 8012d70:	729a      	strb	r2, [r3, #10]
 8012d72:	bd10      	pop	{r4, pc}

08012d74 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012d74:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8012d76:	301c      	adds	r0, #28
 8012d78:	f011 be74 	b.w	8024a64 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012d7c <_ZN8touchgfx3HAL5touchEll>:
 8012d7c:	b530      	push	{r4, r5, lr}
 8012d7e:	b087      	sub	sp, #28
 8012d80:	4604      	mov	r4, r0
 8012d82:	a804      	add	r0, sp, #16
 8012d84:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012d88:	f001 fc14 	bl	80145b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012d8c:	9b04      	ldr	r3, [sp, #16]
 8012d8e:	a906      	add	r1, sp, #24
 8012d90:	a803      	add	r0, sp, #12
 8012d92:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012d96:	9b05      	ldr	r3, [sp, #20]
 8012d98:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012d9c:	f001 fc5c 	bl	8014658 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012da0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8012da4:	f104 001c 	add.w	r0, r4, #28
 8012da8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012dac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012db0:	b189      	cbz	r1, 8012dd6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8012db2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	4613      	mov	r3, r2
 8012dba:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8012dbe:	462a      	mov	r2, r5
 8012dc0:	f011 fe60 	bl	8024a84 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012dc4:	b128      	cbz	r0, 8012dd2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8012dc6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012dca:	6623      	str	r3, [r4, #96]	@ 0x60
 8012dcc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012dd0:	6663      	str	r3, [r4, #100]	@ 0x64
 8012dd2:	b007      	add	sp, #28
 8012dd4:	bd30      	pop	{r4, r5, pc}
 8012dd6:	f011 fe95 	bl	8024b04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012dda:	2301      	movs	r3, #1
 8012ddc:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8012de0:	e7f1      	b.n	8012dc6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08012de2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8012de2:	b510      	push	{r4, lr}
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d046      	beq.n	8012e76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012de8:	ea81 0002 	eor.w	r0, r1, r2
 8012dec:	07c4      	lsls	r4, r0, #31
 8012dee:	d508      	bpl.n	8012e02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012df0:	440b      	add	r3, r1
 8012df2:	3a01      	subs	r2, #1
 8012df4:	428b      	cmp	r3, r1
 8012df6:	d93e      	bls.n	8012e76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012df8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012dfc:	f801 0b01 	strb.w	r0, [r1], #1
 8012e00:	e7f8      	b.n	8012df4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8012e02:	07d0      	lsls	r0, r2, #31
 8012e04:	bf42      	ittt	mi
 8012e06:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8012e0a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012e0e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d911      	bls.n	8012e3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012e16:	ea81 0402 	eor.w	r4, r1, r2
 8012e1a:	4610      	mov	r0, r2
 8012e1c:	07a4      	lsls	r4, r4, #30
 8012e1e:	d022      	beq.n	8012e66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012e20:	f023 0401 	bic.w	r4, r3, #1
 8012e24:	440c      	add	r4, r1
 8012e26:	428c      	cmp	r4, r1
 8012e28:	4602      	mov	r2, r0
 8012e2a:	d904      	bls.n	8012e36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012e2c:	8812      	ldrh	r2, [r2, #0]
 8012e2e:	3002      	adds	r0, #2
 8012e30:	f821 2b02 	strh.w	r2, [r1], #2
 8012e34:	e7f7      	b.n	8012e26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8012e36:	f003 0301 	and.w	r3, r3, #1
 8012e3a:	f023 0003 	bic.w	r0, r3, #3
 8012e3e:	4408      	add	r0, r1
 8012e40:	4288      	cmp	r0, r1
 8012e42:	4614      	mov	r4, r2
 8012e44:	d904      	bls.n	8012e50 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012e46:	6824      	ldr	r4, [r4, #0]
 8012e48:	3204      	adds	r2, #4
 8012e4a:	f841 4b04 	str.w	r4, [r1], #4
 8012e4e:	e7f7      	b.n	8012e40 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012e50:	f003 0303 	and.w	r3, r3, #3
 8012e54:	3a01      	subs	r2, #1
 8012e56:	440b      	add	r3, r1
 8012e58:	428b      	cmp	r3, r1
 8012e5a:	d90c      	bls.n	8012e76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012e5c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012e60:	f801 0b01 	strb.w	r0, [r1], #1
 8012e64:	e7f8      	b.n	8012e58 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8012e66:	0790      	lsls	r0, r2, #30
 8012e68:	d0e7      	beq.n	8012e3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012e6a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012e6e:	3b02      	subs	r3, #2
 8012e70:	f821 0b02 	strh.w	r0, [r1], #2
 8012e74:	e7e1      	b.n	8012e3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012e76:	2001      	movs	r0, #1
 8012e78:	bd10      	pop	{r4, pc}

08012e7a <_ZN8touchgfx3HAL7noTouchEv>:
 8012e7a:	b510      	push	{r4, lr}
 8012e7c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8012e80:	4604      	mov	r4, r0
 8012e82:	b153      	cbz	r3, 8012e9a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012e84:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8012e88:	2101      	movs	r1, #1
 8012e8a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8012e8e:	301c      	adds	r0, #28
 8012e90:	f011 fe38 	bl	8024b04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012e94:	2300      	movs	r3, #0
 8012e96:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8012e9a:	bd10      	pop	{r4, pc}

08012e9c <_ZN8touchgfx3HAL3lcdEv>:
 8012e9c:	4b04      	ldr	r3, [pc, #16]	@ (8012eb0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8012ea4:	b10a      	cbz	r2, 8012eaa <_ZN8touchgfx3HAL3lcdEv+0xe>
 8012ea6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012ea8:	b900      	cbnz	r0, 8012eac <_ZN8touchgfx3HAL3lcdEv+0x10>
 8012eaa:	6898      	ldr	r0, [r3, #8]
 8012eac:	4770      	bx	lr
 8012eae:	bf00      	nop
 8012eb0:	24004278 	.word	0x24004278

08012eb4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012eb8:	b085      	sub	sp, #20
 8012eba:	4604      	mov	r4, r0
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	4699      	mov	r9, r3
 8012ec0:	ad04      	add	r5, sp, #16
 8012ec2:	460f      	mov	r7, r1
 8012ec4:	4690      	mov	r8, r2
 8012ec6:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012eca:	69a0      	ldr	r0, [r4, #24]
 8012ecc:	6806      	ldr	r6, [r0, #0]
 8012ece:	9501      	str	r5, [sp, #4]
 8012ed0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8012ed4:	9500      	str	r5, [sp, #0]
 8012ed6:	6835      	ldr	r5, [r6, #0]
 8012ed8:	47a8      	blx	r5
 8012eda:	4d10      	ldr	r5, [pc, #64]	@ (8012f1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8012edc:	4606      	mov	r6, r0
 8012ede:	f8a5 9000 	strh.w	r9, [r5]
 8012ee2:	f7ff ffdb 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 8012ee6:	6803      	ldr	r3, [r0, #0]
 8012ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eea:	4798      	blx	r3
 8012eec:	b128      	cbz	r0, 8012efa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012eee:	2801      	cmp	r0, #1
 8012ef0:	d00b      	beq.n	8012f0a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	b005      	add	sp, #20
 8012ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012efa:	882b      	ldrh	r3, [r5, #0]
 8012efc:	fb08 7203 	mla	r2, r8, r3, r7
 8012f00:	9b03      	ldr	r3, [sp, #12]
 8012f02:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8012f06:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8012f08:	e7f3      	b.n	8012ef2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012f0a:	882a      	ldrh	r2, [r5, #0]
 8012f0c:	9b03      	ldr	r3, [sp, #12]
 8012f0e:	fb08 7202 	mla	r2, r8, r2, r7
 8012f12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012f16:	1a9a      	subs	r2, r3, r2
 8012f18:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8012f1a:	e7ea      	b.n	8012ef2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012f1c:	24004272 	.word	0x24004272

08012f20 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8012f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f22:	b08b      	sub	sp, #44	@ 0x2c
 8012f24:	4617      	mov	r7, r2
 8012f26:	4604      	mov	r4, r0
 8012f28:	460e      	mov	r6, r1
 8012f2a:	461d      	mov	r5, r3
 8012f2c:	f7ff ffb6 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 8012f30:	6803      	ldr	r3, [r0, #0]
 8012f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f34:	4798      	blx	r3
 8012f36:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8012f3a:	9007      	str	r0, [sp, #28]
 8012f3c:	4631      	mov	r1, r6
 8012f3e:	6822      	ldr	r2, [r4, #0]
 8012f40:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012f44:	4b0c      	ldr	r3, [pc, #48]	@ (8012f78 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8012f46:	4620      	mov	r0, r4
 8012f48:	881b      	ldrh	r3, [r3, #0]
 8012f4a:	9306      	str	r3, [sp, #24]
 8012f4c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8012f50:	9305      	str	r3, [sp, #20]
 8012f52:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8012f56:	9304      	str	r3, [sp, #16]
 8012f58:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012f5c:	9303      	str	r3, [sp, #12]
 8012f5e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012f62:	9302      	str	r3, [sp, #8]
 8012f64:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8012f68:	e9cd 5300 	strd	r5, r3, [sp]
 8012f6c:	463b      	mov	r3, r7
 8012f6e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8012f70:	2200      	movs	r2, #0
 8012f72:	47a8      	blx	r5
 8012f74:	b00b      	add	sp, #44	@ 0x2c
 8012f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f78:	24004272 	.word	0x24004272

08012f7c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f80:	4698      	mov	r8, r3
 8012f82:	6803      	ldr	r3, [r0, #0]
 8012f84:	b08b      	sub	sp, #44	@ 0x2c
 8012f86:	4617      	mov	r7, r2
 8012f88:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8012f8a:	460e      	mov	r6, r1
 8012f8c:	4b13      	ldr	r3, [pc, #76]	@ (8012fdc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8012f8e:	4604      	mov	r4, r0
 8012f90:	f8b3 9000 	ldrh.w	r9, [r3]
 8012f94:	f7ff ff82 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 8012f98:	6803      	ldr	r3, [r0, #0]
 8012f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f9c:	4798      	blx	r3
 8012f9e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	4631      	mov	r1, r6
 8012fa6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012faa:	2302      	movs	r3, #2
 8012fac:	4620      	mov	r0, r4
 8012fae:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	9305      	str	r3, [sp, #20]
 8012fb6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8012fba:	9304      	str	r3, [sp, #16]
 8012fbc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8012fc0:	9303      	str	r3, [sp, #12]
 8012fc2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8012fc6:	9302      	str	r3, [sp, #8]
 8012fc8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012fcc:	e9cd 8300 	strd	r8, r3, [sp]
 8012fd0:	463b      	mov	r3, r7
 8012fd2:	47a8      	blx	r5
 8012fd4:	b00b      	add	sp, #44	@ 0x2c
 8012fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fda:	bf00      	nop
 8012fdc:	24004272 	.word	0x24004272

08012fe0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fe4:	4698      	mov	r8, r3
 8012fe6:	6803      	ldr	r3, [r0, #0]
 8012fe8:	b087      	sub	sp, #28
 8012fea:	460e      	mov	r6, r1
 8012fec:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8012fee:	4617      	mov	r7, r2
 8012ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8013030 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	f8b3 9000 	ldrh.w	r9, [r3]
 8012ff8:	f7ff ff50 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 8012ffc:	6803      	ldr	r3, [r0, #0]
 8012ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013000:	4798      	blx	r3
 8013002:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8013006:	463a      	mov	r2, r7
 8013008:	4631      	mov	r1, r6
 801300a:	f8cd 900c 	str.w	r9, [sp, #12]
 801300e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8013012:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8013016:	4620      	mov	r0, r4
 8013018:	9302      	str	r3, [sp, #8]
 801301a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801301e:	9301      	str	r3, [sp, #4]
 8013020:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013024:	9300      	str	r3, [sp, #0]
 8013026:	4643      	mov	r3, r8
 8013028:	47a8      	blx	r5
 801302a:	b007      	add	sp, #28
 801302c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013030:	24004272 	.word	0x24004272

08013034 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013038:	4604      	mov	r4, r0
 801303a:	b08f      	sub	sp, #60	@ 0x3c
 801303c:	4610      	mov	r0, r2
 801303e:	460d      	mov	r5, r1
 8013040:	4691      	mov	r9, r2
 8013042:	461e      	mov	r6, r3
 8013044:	f004 f8ba 	bl	80171bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013048:	2800      	cmp	r0, #0
 801304a:	f000 809d 	beq.w	8013188 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	4620      	mov	r0, r4
 8013052:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80131ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8013056:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801305c:	4798      	blx	r3
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	4620      	mov	r0, r4
 8013062:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80131f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8013066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013068:	4798      	blx	r3
 801306a:	f8bb 3000 	ldrh.w	r3, [fp]
 801306e:	4f5c      	ldr	r7, [pc, #368]	@ (80131e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013070:	9301      	str	r3, [sp, #4]
 8013072:	f8ba 3000 	ldrh.w	r3, [sl]
 8013076:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801307a:	4640      	mov	r0, r8
 801307c:	9302      	str	r3, [sp, #8]
 801307e:	883b      	ldrh	r3, [r7, #0]
 8013080:	9303      	str	r3, [sp, #12]
 8013082:	4b58      	ldr	r3, [pc, #352]	@ (80131e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013084:	881a      	ldrh	r2, [r3, #0]
 8013086:	9305      	str	r3, [sp, #20]
 8013088:	9204      	str	r2, [sp, #16]
 801308a:	f004 f92b 	bl	80172e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801308e:	8038      	strh	r0, [r7, #0]
 8013090:	4640      	mov	r0, r8
 8013092:	f004 f95b 	bl	801734c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013096:	9b05      	ldr	r3, [sp, #20]
 8013098:	b280      	uxth	r0, r0
 801309a:	8018      	strh	r0, [r3, #0]
 801309c:	4b52      	ldr	r3, [pc, #328]	@ (80131e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d174      	bne.n	801318e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80130a4:	883b      	ldrh	r3, [r7, #0]
 80130a6:	f8aa 0000 	strh.w	r0, [sl]
 80130aa:	f8ab 3000 	strh.w	r3, [fp]
 80130ae:	4648      	mov	r0, r9
 80130b0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80130b4:	f004 f882 	bl	80171bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80130b8:	2200      	movs	r2, #0
 80130ba:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80130be:	4611      	mov	r1, r2
 80130c0:	4628      	mov	r0, r5
 80130c2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80130c6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80130ca:	f7fe f8b3 	bl	8011234 <_ZN8touchgfx8Drawable5setXYEss>
 80130ce:	2301      	movs	r3, #1
 80130d0:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80130d4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80130d8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	dd5c      	ble.n	801319a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80130e0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	dd58      	ble.n	801319a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80130e8:	462a      	mov	r2, r5
 80130ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80130ec:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80130f0:	6851      	ldr	r1, [r2, #4]
 80130f2:	c303      	stmia	r3!, {r0, r1}
 80130f4:	4631      	mov	r1, r6
 80130f6:	a80a      	add	r0, sp, #40	@ 0x28
 80130f8:	f7ff fbea 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 80130fc:	4b38      	ldr	r3, [pc, #224]	@ (80131e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80130fe:	2100      	movs	r1, #0
 8013100:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013104:	4b37      	ldr	r3, [pc, #220]	@ (80131e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013106:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801310a:	aa0a      	add	r2, sp, #40	@ 0x28
 801310c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013110:	910c      	str	r1, [sp, #48]	@ 0x30
 8013112:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013116:	ab08      	add	r3, sp, #32
 8013118:	e892 0003 	ldmia.w	r2, {r0, r1}
 801311c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013120:	4618      	mov	r0, r3
 8013122:	a90c      	add	r1, sp, #48	@ 0x30
 8013124:	f7ff fbd4 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 8013128:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801312a:	2b00      	cmp	r3, #0
 801312c:	d13c      	bne.n	80131a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801312e:	2000      	movs	r0, #0
 8013130:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8013134:	2600      	movs	r6, #0
 8013136:	696b      	ldr	r3, [r5, #20]
 8013138:	a908      	add	r1, sp, #32
 801313a:	682a      	ldr	r2, [r5, #0]
 801313c:	4628      	mov	r0, r5
 801313e:	9305      	str	r3, [sp, #20]
 8013140:	616e      	str	r6, [r5, #20]
 8013142:	6892      	ldr	r2, [r2, #8]
 8013144:	4790      	blx	r2
 8013146:	9b05      	ldr	r3, [sp, #20]
 8013148:	4652      	mov	r2, sl
 801314a:	4649      	mov	r1, r9
 801314c:	616b      	str	r3, [r5, #20]
 801314e:	4628      	mov	r0, r5
 8013150:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8013154:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8013158:	f7fe f86c 	bl	8011234 <_ZN8touchgfx8Drawable5setXYEss>
 801315c:	9a01      	ldr	r2, [sp, #4]
 801315e:	4b23      	ldr	r3, [pc, #140]	@ (80131ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8013160:	4620      	mov	r0, r4
 8013162:	801a      	strh	r2, [r3, #0]
 8013164:	9a02      	ldr	r2, [sp, #8]
 8013166:	4b22      	ldr	r3, [pc, #136]	@ (80131f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8013168:	801a      	strh	r2, [r3, #0]
 801316a:	9a03      	ldr	r2, [sp, #12]
 801316c:	4b1c      	ldr	r3, [pc, #112]	@ (80131e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801316e:	801a      	strh	r2, [r3, #0]
 8013170:	4b1c      	ldr	r3, [pc, #112]	@ (80131e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013172:	9a04      	ldr	r2, [sp, #16]
 8013174:	801a      	strh	r2, [r3, #0]
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801317e:	4798      	blx	r3
 8013180:	6823      	ldr	r3, [r4, #0]
 8013182:	4620      	mov	r0, r4
 8013184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013186:	4798      	blx	r3
 8013188:	b00f      	add	sp, #60	@ 0x3c
 801318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801318e:	883b      	ldrh	r3, [r7, #0]
 8013190:	f8ab 0000 	strh.w	r0, [fp]
 8013194:	f8aa 3000 	strh.w	r3, [sl]
 8013198:	e789      	b.n	80130ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801319a:	462a      	mov	r2, r5
 801319c:	ab0a      	add	r3, sp, #40	@ 0x28
 801319e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80131a2:	6851      	ldr	r1, [r2, #4]
 80131a4:	c303      	stmia	r3!, {r0, r1}
 80131a6:	e7a9      	b.n	80130fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80131a8:	a807      	add	r0, sp, #28
 80131aa:	f004 fa11 	bl	80175d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80131ae:	4606      	mov	r6, r0
 80131b0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80131b2:	6803      	ldr	r3, [r0, #0]
 80131b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131b6:	4798      	blx	r3
 80131b8:	4286      	cmp	r6, r0
 80131ba:	d1b8      	bne.n	801312e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80131bc:	f7ff fe6e 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 80131c0:	6803      	ldr	r3, [r0, #0]
 80131c2:	4606      	mov	r6, r0
 80131c4:	a807      	add	r0, sp, #28
 80131c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131c8:	9305      	str	r3, [sp, #20]
 80131ca:	f004 fa01 	bl	80175d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80131ce:	9b05      	ldr	r3, [sp, #20]
 80131d0:	4601      	mov	r1, r0
 80131d2:	4630      	mov	r0, r6
 80131d4:	4798      	blx	r3
 80131d6:	f080 0001 	eor.w	r0, r0, #1
 80131da:	b2c0      	uxtb	r0, r0
 80131dc:	e7a8      	b.n	8013130 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80131de:	bf00      	nop
 80131e0:	2400426c 	.word	0x2400426c
 80131e4:	2400426e 	.word	0x2400426e
 80131e8:	24004270 	.word	0x24004270
 80131ec:	24004272 	.word	0x24004272
 80131f0:	24004274 	.word	0x24004274

080131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80131f4:	4b07      	ldr	r3, [pc, #28]	@ (8013214 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80131f6:	b510      	push	{r4, lr}
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	4604      	mov	r4, r0
 80131fc:	b13b      	cbz	r3, 801320e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80131fe:	6803      	ldr	r3, [r0, #0]
 8013200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013202:	4798      	blx	r3
 8013204:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013206:	4283      	cmp	r3, r0
 8013208:	d101      	bne.n	801320e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801320a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801320c:	bd10      	pop	{r4, pc}
 801320e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013210:	e7fc      	b.n	801320c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8013212:	bf00      	nop
 8013214:	24004276 	.word	0x24004276

08013218 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8013218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801321c:	461d      	mov	r5, r3
 801321e:	b08a      	sub	sp, #40	@ 0x28
 8013220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013224:	4690      	mov	r8, r2
 8013226:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801322a:	2400      	movs	r4, #0
 801322c:	4607      	mov	r7, r0
 801322e:	fb06 8505 	mla	r5, r6, r5, r8
 8013232:	9404      	str	r4, [sp, #16]
 8013234:	f88d 4020 	strb.w	r4, [sp, #32]
 8013238:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801323c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013240:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013244:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013248:	f8ad 301a 	strh.w	r3, [sp, #26]
 801324c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013250:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013254:	f7ff ffce 	bl	80131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013258:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013262:	a901      	add	r1, sp, #4
 8013264:	9505      	str	r5, [sp, #20]
 8013266:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801326a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801326e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8013272:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8013276:	6803      	ldr	r3, [r0, #0]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	4798      	blx	r3
 801327c:	b00a      	add	sp, #40	@ 0x28
 801327e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013282 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8013282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013286:	b08b      	sub	sp, #44	@ 0x2c
 8013288:	2400      	movs	r4, #0
 801328a:	4691      	mov	r9, r2
 801328c:	461d      	mov	r5, r3
 801328e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8013292:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013296:	4688      	mov	r8, r1
 8013298:	4607      	mov	r7, r0
 801329a:	9404      	str	r4, [sp, #16]
 801329c:	fb06 9505 	mla	r5, r6, r5, r9
 80132a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80132a4:	f7ff ffa6 	bl	80131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80132a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80132ac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80132b6:	a901      	add	r1, sp, #4
 80132b8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80132bc:	9505      	str	r5, [sp, #20]
 80132be:	f8ad 301a 	strh.w	r3, [sp, #26]
 80132c2:	f8ad 401c 	strh.w	r4, [sp, #28]
 80132c6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80132ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80132ce:	f8ad 4020 	strh.w	r4, [sp, #32]
 80132d2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80132d6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80132da:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80132de:	6803      	ldr	r3, [r0, #0]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	4798      	blx	r3
 80132e4:	b00b      	add	sp, #44	@ 0x2c
 80132e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080132ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80132ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f0:	b08a      	sub	sp, #40	@ 0x28
 80132f2:	4698      	mov	r8, r3
 80132f4:	2300      	movs	r3, #0
 80132f6:	4606      	mov	r6, r0
 80132f8:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80132fc:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8013300:	2d0b      	cmp	r5, #11
 8013302:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8013306:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801330a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801330e:	9304      	str	r3, [sp, #16]
 8013310:	d137      	bne.n	8013382 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8013312:	2380      	movs	r3, #128	@ 0x80
 8013314:	f88d 0020 	strb.w	r0, [sp, #32]
 8013318:	4630      	mov	r0, r6
 801331a:	9203      	str	r2, [sp, #12]
 801331c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013320:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013324:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013328:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801332c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013330:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013334:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013338:	f7ff ff5c 	bl	80131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801333c:	2c0b      	cmp	r4, #11
 801333e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013342:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013346:	bf94      	ite	ls
 8013348:	4b19      	ldrls	r3, [pc, #100]	@ (80133b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801334a:	2100      	movhi	r1, #0
 801334c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8013350:	bf98      	it	ls
 8013352:	5d19      	ldrbls	r1, [r3, r4]
 8013354:	fb02 8307 	mla	r3, r2, r7, r8
 8013358:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801335c:	10c9      	asrs	r1, r1, #3
 801335e:	fb01 0003 	mla	r0, r1, r3, r0
 8013362:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8013366:	a901      	add	r1, sp, #4
 8013368:	9005      	str	r0, [sp, #20]
 801336a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801336e:	2300      	movs	r3, #0
 8013370:	6870      	ldr	r0, [r6, #4]
 8013372:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013376:	6803      	ldr	r3, [r0, #0]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	4798      	blx	r3
 801337c:	b00a      	add	sp, #40	@ 0x28
 801337e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013382:	2d02      	cmp	r5, #2
 8013384:	d109      	bne.n	801339a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8013386:	28ff      	cmp	r0, #255	@ 0xff
 8013388:	d105      	bne.n	8013396 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801338a:	f1bc 0f00 	cmp.w	ip, #0
 801338e:	bf14      	ite	ne
 8013390:	2340      	movne	r3, #64	@ 0x40
 8013392:	2320      	moveq	r3, #32
 8013394:	e7be      	b.n	8013314 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013396:	2340      	movs	r3, #64	@ 0x40
 8013398:	e7bc      	b.n	8013314 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801339a:	28ff      	cmp	r0, #255	@ 0xff
 801339c:	d105      	bne.n	80133aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801339e:	f1bc 0f00 	cmp.w	ip, #0
 80133a2:	bf14      	ite	ne
 80133a4:	2304      	movne	r3, #4
 80133a6:	2301      	moveq	r3, #1
 80133a8:	e7b4      	b.n	8013314 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80133aa:	2304      	movs	r3, #4
 80133ac:	e7b2      	b.n	8013314 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80133ae:	bf00      	nop
 80133b0:	0802a230 	.word	0x0802a230

080133b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80133b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b8:	b08b      	sub	sp, #44	@ 0x2c
 80133ba:	461d      	mov	r5, r3
 80133bc:	2400      	movs	r4, #0
 80133be:	4688      	mov	r8, r1
 80133c0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80133c4:	4693      	mov	fp, r2
 80133c6:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80133ca:	4607      	mov	r7, r0
 80133cc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80133d0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80133d4:	9404      	str	r4, [sp, #16]
 80133d6:	bf14      	ite	ne
 80133d8:	2308      	movne	r3, #8
 80133da:	2302      	moveq	r3, #2
 80133dc:	fb05 b50a 	mla	r5, r5, sl, fp
 80133e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80133e4:	f7ff ff06 	bl	80131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80133e8:	2e0b      	cmp	r6, #11
 80133ea:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80133ee:	a901      	add	r1, sp, #4
 80133f0:	bf98      	it	ls
 80133f2:	4b13      	ldrls	r3, [pc, #76]	@ (8013440 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80133f4:	f8ad a01e 	strh.w	sl, [sp, #30]
 80133f8:	bf98      	it	ls
 80133fa:	5d9c      	ldrbls	r4, [r3, r6]
 80133fc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8013400:	10e4      	asrs	r4, r4, #3
 8013402:	f8cd 8010 	str.w	r8, [sp, #16]
 8013406:	f8ad 3018 	strh.w	r3, [sp, #24]
 801340a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801340e:	fb04 0405 	mla	r4, r4, r5, r0
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013418:	2300      	movs	r3, #0
 801341a:	9405      	str	r4, [sp, #20]
 801341c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013420:	f88d 9020 	strb.w	r9, [sp, #32]
 8013424:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8013428:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801342c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8013430:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8013434:	6803      	ldr	r3, [r0, #0]
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	4798      	blx	r3
 801343a:	b00b      	add	sp, #44	@ 0x2c
 801343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013440:	0802a230 	.word	0x0802a230

08013444 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013448:	461e      	mov	r6, r3
 801344a:	4b0a      	ldr	r3, [pc, #40]	@ (8013474 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801344c:	460f      	mov	r7, r1
 801344e:	4690      	mov	r8, r2
 8013450:	881d      	ldrh	r5, [r3, #0]
 8013452:	f7ff fd23 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 8013456:	6803      	ldr	r3, [r0, #0]
 8013458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801345a:	4798      	blx	r3
 801345c:	280b      	cmp	r0, #11
 801345e:	bf96      	itet	ls
 8013460:	4b05      	ldrls	r3, [pc, #20]	@ (8013478 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013462:	2400      	movhi	r4, #0
 8013464:	5c1c      	ldrbls	r4, [r3, r0]
 8013466:	fb08 7005 	mla	r0, r8, r5, r7
 801346a:	10e4      	asrs	r4, r4, #3
 801346c:	fb04 6000 	mla	r0, r4, r0, r6
 8013470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013474:	24004272 	.word	0x24004272
 8013478:	0802a230 	.word	0x0802a230

0801347c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801347c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801347e:	b08b      	sub	sp, #44	@ 0x2c
 8013480:	461f      	mov	r7, r3
 8013482:	4604      	mov	r4, r0
 8013484:	4616      	mov	r6, r2
 8013486:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801348a:	2500      	movs	r5, #0
 801348c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013490:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013494:	9504      	str	r5, [sp, #16]
 8013496:	f8ad 3018 	strh.w	r3, [sp, #24]
 801349a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801349e:	f8ad 301a 	strh.w	r3, [sp, #26]
 80134a2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80134a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80134aa:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80134ae:	f88d 3020 	strb.w	r3, [sp, #32]
 80134b2:	f7ff fe9f 	bl	80131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80134b6:	463a      	mov	r2, r7
 80134b8:	4631      	mov	r1, r6
 80134ba:	4603      	mov	r3, r0
 80134bc:	4620      	mov	r0, r4
 80134be:	f7ff ffc1 	bl	8013444 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80134c2:	4b0e      	ldr	r3, [pc, #56]	@ (80134fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80134c4:	9005      	str	r0, [sp, #20]
 80134c6:	881b      	ldrh	r3, [r3, #0]
 80134c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80134cc:	f7ff fce6 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 80134d0:	6803      	ldr	r3, [r0, #0]
 80134d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134d4:	4798      	blx	r3
 80134d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80134d8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80134dc:	a901      	add	r1, sp, #4
 80134de:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80134e2:	9304      	str	r3, [sp, #16]
 80134e4:	6860      	ldr	r0, [r4, #4]
 80134e6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80134ea:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80134ee:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80134f2:	6803      	ldr	r3, [r0, #0]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	4798      	blx	r3
 80134f8:	b00b      	add	sp, #44	@ 0x2c
 80134fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134fc:	24004272 	.word	0x24004272

08013500 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013502:	b08d      	sub	sp, #52	@ 0x34
 8013504:	2501      	movs	r5, #1
 8013506:	4604      	mov	r4, r0
 8013508:	466b      	mov	r3, sp
 801350a:	9503      	str	r5, [sp, #12]
 801350c:	e883 0006 	stmia.w	r3, {r1, r2}
 8013510:	2300      	movs	r3, #0
 8013512:	f8bd 6000 	ldrh.w	r6, [sp]
 8013516:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801351a:	9306      	str	r3, [sp, #24]
 801351c:	6803      	ldr	r3, [r0, #0]
 801351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013520:	4798      	blx	r3
 8013522:	463a      	mov	r2, r7
 8013524:	4631      	mov	r1, r6
 8013526:	4603      	mov	r3, r0
 8013528:	4620      	mov	r0, r4
 801352a:	f7ff ff8b 	bl	8013444 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801352e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013530:	9004      	str	r0, [sp, #16]
 8013532:	9307      	str	r3, [sp, #28]
 8013534:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013538:	f8ad 3020 	strh.w	r3, [sp, #32]
 801353c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013540:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013544:	4b0e      	ldr	r3, [pc, #56]	@ (8013580 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013546:	881b      	ldrh	r3, [r3, #0]
 8013548:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801354c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013550:	f7ff fca4 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 8013554:	6803      	ldr	r3, [r0, #0]
 8013556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013558:	4798      	blx	r3
 801355a:	23ff      	movs	r3, #255	@ 0xff
 801355c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8013560:	a903      	add	r1, sp, #12
 8013562:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013566:	6860      	ldr	r0, [r4, #4]
 8013568:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801356c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8013570:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013574:	6803      	ldr	r3, [r0, #0]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	4798      	blx	r3
 801357a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801357c:	b00d      	add	sp, #52	@ 0x34
 801357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013580:	24004272 	.word	0x24004272

08013584 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013588:	b08c      	sub	sp, #48	@ 0x30
 801358a:	461e      	mov	r6, r3
 801358c:	2300      	movs	r3, #0
 801358e:	4604      	mov	r4, r0
 8013590:	466d      	mov	r5, sp
 8013592:	9306      	str	r3, [sp, #24]
 8013594:	6803      	ldr	r3, [r0, #0]
 8013596:	e885 0006 	stmia.w	r5, {r1, r2}
 801359a:	2501      	movs	r5, #1
 801359c:	f8bd 7000 	ldrh.w	r7, [sp]
 80135a0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80135a4:	9503      	str	r5, [sp, #12]
 80135a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135a8:	4798      	blx	r3
 80135aa:	4642      	mov	r2, r8
 80135ac:	4639      	mov	r1, r7
 80135ae:	4603      	mov	r3, r0
 80135b0:	4620      	mov	r0, r4
 80135b2:	f7ff ff47 	bl	8013444 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80135b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80135ba:	9004      	str	r0, [sp, #16]
 80135bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80135c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80135c4:	9607      	str	r6, [sp, #28]
 80135c6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80135ca:	4b10      	ldr	r3, [pc, #64]	@ (801360c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80135cc:	881b      	ldrh	r3, [r3, #0]
 80135ce:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80135d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80135d4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80135d8:	f7ff fc60 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 80135dc:	6803      	ldr	r3, [r0, #0]
 80135de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135e0:	4798      	blx	r3
 80135e2:	23ff      	movs	r3, #255	@ 0xff
 80135e4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80135e8:	a903      	add	r1, sp, #12
 80135ea:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80135ee:	6860      	ldr	r0, [r4, #4]
 80135f0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80135f4:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80135f8:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80135fc:	6803      	ldr	r3, [r0, #0]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	4798      	blx	r3
 8013602:	4630      	mov	r0, r6
 8013604:	b00c      	add	sp, #48	@ 0x30
 8013606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801360a:	bf00      	nop
 801360c:	24004272 	.word	0x24004272

08013610 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013612:	b085      	sub	sp, #20
 8013614:	4605      	mov	r5, r0
 8013616:	ac02      	add	r4, sp, #8
 8013618:	e884 0006 	stmia.w	r4, {r1, r2}
 801361c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013620:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013624:	f7ff fde6 	bl	80131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013628:	4631      	mov	r1, r6
 801362a:	4603      	mov	r3, r0
 801362c:	463a      	mov	r2, r7
 801362e:	4628      	mov	r0, r5
 8013630:	f7ff ff08 	bl	8013444 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013634:	4a05      	ldr	r2, [pc, #20]	@ (801364c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013636:	682b      	ldr	r3, [r5, #0]
 8013638:	8812      	ldrh	r2, [r2, #0]
 801363a:	9200      	str	r2, [sp, #0]
 801363c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801363e:	4603      	mov	r3, r0
 8013640:	4628      	mov	r0, r5
 8013642:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013646:	47b0      	blx	r6
 8013648:	b005      	add	sp, #20
 801364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801364c:	24004272 	.word	0x24004272

08013650 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013650:	b570      	push	{r4, r5, r6, lr}
 8013652:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8013656:	4604      	mov	r4, r0
 8013658:	b19b      	cbz	r3, 8013682 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801365a:	2002      	movs	r0, #2
 801365c:	f7fe f87d 	bl	801175a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013660:	2300      	movs	r3, #0
 8013662:	4620      	mov	r0, r4
 8013664:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013668:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801366c:	6823      	ldr	r3, [r4, #0]
 801366e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8013672:	f7ff fdbf 	bl	80131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013676:	4601      	mov	r1, r0
 8013678:	4620      	mov	r0, r4
 801367a:	462b      	mov	r3, r5
 801367c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013680:	4718      	bx	r3
 8013682:	bd70      	pop	{r4, r5, r6, pc}

08013684 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013684:	b538      	push	{r3, r4, r5, lr}
 8013686:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801368a:	4604      	mov	r4, r0
 801368c:	460d      	mov	r5, r1
 801368e:	428b      	cmp	r3, r1
 8013690:	d006      	beq.n	80136a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013692:	6803      	ldr	r3, [r0, #0]
 8013694:	b929      	cbnz	r1, 80136a2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013696:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801369a:	4798      	blx	r3
 801369c:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80136a0:	bd38      	pop	{r3, r4, r5, pc}
 80136a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80136a6:	e7f8      	b.n	801369a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080136a8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80136a8:	4b0d      	ldr	r3, [pc, #52]	@ (80136e0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80136aa:	b510      	push	{r4, lr}
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	4604      	mov	r4, r0
 80136b0:	b95b      	cbnz	r3, 80136ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80136b2:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80136b6:	2b02      	cmp	r3, #2
 80136b8:	d007      	beq.n	80136ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80136ba:	6840      	ldr	r0, [r0, #4]
 80136bc:	f000 f916 	bl	80138ec <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80136c0:	b118      	cbz	r0, 80136ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80136c2:	6862      	ldr	r2, [r4, #4]
 80136c4:	7a53      	ldrb	r3, [r2, #9]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d0fc      	beq.n	80136c4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80136ca:	f7fe f94d 	bl	8011968 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80136ce:	4620      	mov	r0, r4
 80136d0:	2100      	movs	r1, #0
 80136d2:	f7ff ffd7 	bl	8013684 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80136d6:	4620      	mov	r0, r4
 80136d8:	f7ff fd8c 	bl	80131f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80136dc:	bd10      	pop	{r4, pc}
 80136de:	bf00      	nop
 80136e0:	24004276 	.word	0x24004276

080136e4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80136e4:	4770      	bx	lr

080136e6 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80136e6:	2000      	movs	r0, #0
 80136e8:	4770      	bx	lr

080136ea <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80136ea:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80136ee:	1a13      	subs	r3, r2, r0
 80136f0:	4258      	negs	r0, r3
 80136f2:	4158      	adcs	r0, r3
 80136f4:	4770      	bx	lr

080136f6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80136f6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80136fa:	1a9b      	subs	r3, r3, r2
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	bfdc      	itt	le
 8013700:	6882      	ldrle	r2, [r0, #8]
 8013702:	189b      	addle	r3, r3, r2
 8013704:	2b01      	cmp	r3, #1
 8013706:	bfcc      	ite	gt
 8013708:	2000      	movgt	r0, #0
 801370a:	2001      	movle	r0, #1
 801370c:	4770      	bx	lr

0801370e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801370e:	6902      	ldr	r2, [r0, #16]
 8013710:	6843      	ldr	r3, [r0, #4]
 8013712:	2024      	movs	r0, #36	@ 0x24
 8013714:	fb00 3002 	mla	r0, r0, r2, r3
 8013718:	4770      	bx	lr

0801371a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801371a:	6803      	ldr	r3, [r0, #0]
 801371c:	691b      	ldr	r3, [r3, #16]
 801371e:	4718      	bx	r3

08013720 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013720:	2301      	movs	r3, #1
 8013722:	b570      	push	{r4, r5, r6, lr}
 8013724:	7203      	strb	r3, [r0, #8]
 8013726:	4604      	mov	r4, r0
 8013728:	6840      	ldr	r0, [r0, #4]
 801372a:	6803      	ldr	r3, [r0, #0]
 801372c:	699b      	ldr	r3, [r3, #24]
 801372e:	4798      	blx	r3
 8013730:	6803      	ldr	r3, [r0, #0]
 8013732:	4605      	mov	r5, r0
 8013734:	2b40      	cmp	r3, #64	@ 0x40
 8013736:	d00c      	beq.n	8013752 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013738:	d810      	bhi.n	801375c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801373a:	2b04      	cmp	r3, #4
 801373c:	d01d      	beq.n	801377a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801373e:	d804      	bhi.n	801374a <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013740:	2b01      	cmp	r3, #1
 8013742:	d006      	beq.n	8013752 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013744:	2b02      	cmp	r3, #2
 8013746:	d02c      	beq.n	80137a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013748:	bd70      	pop	{r4, r5, r6, pc}
 801374a:	2b08      	cmp	r3, #8
 801374c:	d01d      	beq.n	801378a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801374e:	2b20      	cmp	r3, #32
 8013750:	d1fa      	bne.n	8013748 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013752:	6823      	ldr	r3, [r4, #0]
 8013754:	4620      	mov	r0, r4
 8013756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013758:	4798      	blx	r3
 801375a:	e013      	b.n	8013784 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801375c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013760:	d0f7      	beq.n	8013752 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013762:	d804      	bhi.n	801376e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013764:	2b80      	cmp	r3, #128	@ 0x80
 8013766:	d0f4      	beq.n	8013752 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801376c:	e7f0      	b.n	8013750 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801376e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013772:	d0ee      	beq.n	8013752 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013778:	e7e5      	b.n	8013746 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801377a:	6823      	ldr	r3, [r4, #0]
 801377c:	7f01      	ldrb	r1, [r0, #28]
 801377e:	4620      	mov	r0, r4
 8013780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013782:	4798      	blx	r3
 8013784:	6823      	ldr	r3, [r4, #0]
 8013786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013788:	e006      	b.n	8013798 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801378a:	6823      	ldr	r3, [r4, #0]
 801378c:	7f01      	ldrb	r1, [r0, #28]
 801378e:	4620      	mov	r0, r4
 8013790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013792:	4798      	blx	r3
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013798:	4629      	mov	r1, r5
 801379a:	4620      	mov	r0, r4
 801379c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137a0:	4718      	bx	r3
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	4620      	mov	r0, r4
 80137a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80137a8:	4798      	blx	r3
 80137aa:	e7f3      	b.n	8013794 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080137ac <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80137ac:	4770      	bx	lr

080137ae <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80137ae:	4770      	bx	lr

080137b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80137b0:	4770      	bx	lr

080137b2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80137b2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80137b6:	b510      	push	{r4, lr}
 80137b8:	1ad2      	subs	r2, r2, r3
 80137ba:	2a00      	cmp	r2, #0
 80137bc:	bfdc      	itt	le
 80137be:	6884      	ldrle	r4, [r0, #8]
 80137c0:	1912      	addle	r2, r2, r4
 80137c2:	2a01      	cmp	r2, #1
 80137c4:	dd16      	ble.n	80137f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80137c6:	6842      	ldr	r2, [r0, #4]
 80137c8:	2424      	movs	r4, #36	@ 0x24
 80137ca:	fb04 2303 	mla	r3, r4, r3, r2
 80137ce:	f101 0220 	add.w	r2, r1, #32
 80137d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80137d6:	4291      	cmp	r1, r2
 80137d8:	f843 4b04 	str.w	r4, [r3], #4
 80137dc:	d1f9      	bne.n	80137d2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80137de:	780a      	ldrb	r2, [r1, #0]
 80137e0:	701a      	strb	r2, [r3, #0]
 80137e2:	68c3      	ldr	r3, [r0, #12]
 80137e4:	6882      	ldr	r2, [r0, #8]
 80137e6:	f3bf 8f5b 	dmb	ish
 80137ea:	3301      	adds	r3, #1
 80137ec:	429a      	cmp	r2, r3
 80137ee:	bfd8      	it	le
 80137f0:	1a9b      	suble	r3, r3, r2
 80137f2:	60c3      	str	r3, [r0, #12]
 80137f4:	bd10      	pop	{r4, pc}

080137f6 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80137f6:	6903      	ldr	r3, [r0, #16]
 80137f8:	6882      	ldr	r2, [r0, #8]
 80137fa:	f3bf 8f5b 	dmb	ish
 80137fe:	3301      	adds	r3, #1
 8013800:	429a      	cmp	r2, r3
 8013802:	bfd8      	it	le
 8013804:	1a9b      	suble	r3, r3, r2
 8013806:	6103      	str	r3, [r0, #16]
 8013808:	4770      	bx	lr
	...

0801380c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801380c:	b570      	push	{r4, r5, r6, lr}
 801380e:	4604      	mov	r4, r0
 8013810:	460e      	mov	r6, r1
 8013812:	6860      	ldr	r0, [r4, #4]
 8013814:	6803      	ldr	r3, [r0, #0]
 8013816:	685b      	ldr	r3, [r3, #4]
 8013818:	4798      	blx	r3
 801381a:	2800      	cmp	r0, #0
 801381c:	d1f9      	bne.n	8013812 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801381e:	4d0d      	ldr	r5, [pc, #52]	@ (8013854 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013820:	6828      	ldr	r0, [r5, #0]
 8013822:	6803      	ldr	r3, [r0, #0]
 8013824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013826:	4798      	blx	r3
 8013828:	f7fe f8ae 	bl	8011988 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801382c:	6828      	ldr	r0, [r5, #0]
 801382e:	2101      	movs	r1, #1
 8013830:	f7ff ff28 	bl	8013684 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013834:	6860      	ldr	r0, [r4, #4]
 8013836:	4631      	mov	r1, r6
 8013838:	6803      	ldr	r3, [r0, #0]
 801383a:	689b      	ldr	r3, [r3, #8]
 801383c:	4798      	blx	r3
 801383e:	6823      	ldr	r3, [r4, #0]
 8013840:	4620      	mov	r0, r4
 8013842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013844:	4798      	blx	r3
 8013846:	6828      	ldr	r0, [r5, #0]
 8013848:	6803      	ldr	r3, [r0, #0]
 801384a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801384e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013850:	4718      	bx	r3
 8013852:	bf00      	nop
 8013854:	24004278 	.word	0x24004278

08013858 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013858:	b508      	push	{r3, lr}
 801385a:	f7fe f885 	bl	8011968 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801385e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013862:	f7fe b88b 	b.w	801197c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013866 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013866:	b510      	push	{r4, lr}
 8013868:	4604      	mov	r4, r0
 801386a:	2114      	movs	r1, #20
 801386c:	f011 f9b1 	bl	8024bd2 <_ZdlPvj>
 8013870:	4620      	mov	r0, r4
 8013872:	bd10      	pop	{r4, pc}

08013874 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013874:	b510      	push	{r4, lr}
 8013876:	4604      	mov	r4, r0
 8013878:	6840      	ldr	r0, [r0, #4]
 801387a:	6803      	ldr	r3, [r0, #0]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	4798      	blx	r3
 8013880:	b948      	cbnz	r0, 8013896 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013882:	7a63      	ldrb	r3, [r4, #9]
 8013884:	b13b      	cbz	r3, 8013896 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013886:	7a23      	ldrb	r3, [r4, #8]
 8013888:	b92b      	cbnz	r3, 8013896 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	4620      	mov	r0, r4
 801388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013894:	4718      	bx	r3
 8013896:	bd10      	pop	{r4, pc}

08013898 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013898:	b570      	push	{r4, r5, r6, lr}
 801389a:	4604      	mov	r4, r0
 801389c:	6840      	ldr	r0, [r0, #4]
 801389e:	6803      	ldr	r3, [r0, #0]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	4798      	blx	r3
 80138a4:	4605      	mov	r5, r0
 80138a6:	b930      	cbnz	r0, 80138b6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80138a8:	7a23      	ldrb	r3, [r4, #8]
 80138aa:	b123      	cbz	r3, 80138b6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80138ac:	6860      	ldr	r0, [r4, #4]
 80138ae:	6803      	ldr	r3, [r0, #0]
 80138b0:	695b      	ldr	r3, [r3, #20]
 80138b2:	4798      	blx	r3
 80138b4:	7225      	strb	r5, [r4, #8]
 80138b6:	6860      	ldr	r0, [r4, #4]
 80138b8:	6803      	ldr	r3, [r0, #0]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	4798      	blx	r3
 80138be:	b928      	cbnz	r0, 80138cc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80138c0:	6823      	ldr	r3, [r4, #0]
 80138c2:	4620      	mov	r0, r4
 80138c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138ca:	4718      	bx	r3
 80138cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138d0:	f7fe b860 	b.w	8011994 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080138d4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80138d4:	b510      	push	{r4, lr}
 80138d6:	6082      	str	r2, [r0, #8]
 80138d8:	2200      	movs	r2, #0
 80138da:	4c03      	ldr	r4, [pc, #12]	@ (80138e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80138dc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80138e0:	e9c0 4100 	strd	r4, r1, [r0]
 80138e4:	bd10      	pop	{r4, pc}
 80138e6:	bf00      	nop
 80138e8:	0802a36c 	.word	0x0802a36c

080138ec <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80138ec:	6840      	ldr	r0, [r0, #4]
 80138ee:	6803      	ldr	r3, [r0, #0]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	4718      	bx	r3

080138f4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80138f4:	2300      	movs	r3, #0
 80138f6:	8083      	strh	r3, [r0, #4]
 80138f8:	80c3      	strh	r3, [r0, #6]
 80138fa:	8003      	strh	r3, [r0, #0]
 80138fc:	8043      	strh	r3, [r0, #2]
 80138fe:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8013902:	2bff      	cmp	r3, #255	@ 0xff
 8013904:	bf01      	itttt	eq
 8013906:	890b      	ldrheq	r3, [r1, #8]
 8013908:	8083      	strheq	r3, [r0, #4]
 801390a:	894b      	ldrheq	r3, [r1, #10]
 801390c:	80c3      	strheq	r3, [r0, #6]
 801390e:	4770      	bx	lr

08013910 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013912:	4604      	mov	r4, r0
 8013914:	466b      	mov	r3, sp
 8013916:	6808      	ldr	r0, [r1, #0]
 8013918:	6849      	ldr	r1, [r1, #4]
 801391a:	c303      	stmia	r3!, {r0, r1}
 801391c:	6823      	ldr	r3, [r4, #0]
 801391e:	4669      	mov	r1, sp
 8013920:	4620      	mov	r0, r4
 8013922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013924:	4798      	blx	r3
 8013926:	4b08      	ldr	r3, [pc, #32]	@ (8013948 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801392e:	b10a      	cbz	r2, 8013934 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013930:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013932:	b900      	cbnz	r0, 8013936 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013934:	6898      	ldr	r0, [r3, #8]
 8013936:	6803      	ldr	r3, [r0, #0]
 8013938:	4669      	mov	r1, sp
 801393a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801393c:	6a1d      	ldr	r5, [r3, #32]
 801393e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8013942:	47a8      	blx	r5
 8013944:	b003      	add	sp, #12
 8013946:	bd30      	pop	{r4, r5, pc}
 8013948:	24004278 	.word	0x24004278

0801394c <_ZN8touchgfx3BoxD1Ev>:
 801394c:	4770      	bx	lr

0801394e <_ZN8touchgfx3BoxD0Ev>:
 801394e:	b510      	push	{r4, lr}
 8013950:	4604      	mov	r4, r0
 8013952:	212c      	movs	r1, #44	@ 0x2c
 8013954:	f011 f93d 	bl	8024bd2 <_ZdlPvj>
 8013958:	4620      	mov	r0, r4
 801395a:	bd10      	pop	{r4, pc}

0801395c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801395c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8013960:	b12a      	cbz	r2, 801396e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013962:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013966:	b112      	cbz	r2, 801396e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013968:	6803      	ldr	r3, [r0, #0]
 801396a:	695b      	ldr	r3, [r3, #20]
 801396c:	4718      	bx	r3
 801396e:	4770      	bx	lr

08013970 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8013970:	b510      	push	{r4, lr}
 8013972:	6803      	ldr	r3, [r0, #0]
 8013974:	460c      	mov	r4, r1
 8013976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013978:	4798      	blx	r3
 801397a:	1b03      	subs	r3, r0, r4
 801397c:	4258      	negs	r0, r3
 801397e:	4158      	adcs	r0, r3
 8013980:	bd10      	pop	{r4, pc}
	...

08013984 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8013984:	4b01      	ldr	r3, [pc, #4]	@ (801398c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8013986:	6019      	str	r1, [r3, #0]
 8013988:	4770      	bx	lr
 801398a:	bf00      	nop
 801398c:	24004280 	.word	0x24004280

08013990 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013994:	4696      	mov	lr, r2
 8013996:	b097      	sub	sp, #92	@ 0x5c
 8013998:	4605      	mov	r5, r0
 801399a:	4614      	mov	r4, r2
 801399c:	460e      	mov	r6, r1
 801399e:	461f      	mov	r7, r3
 80139a0:	f10d 0c1c 	add.w	ip, sp, #28
 80139a4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80139a8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80139ac:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80139b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139b8:	f8de 3000 	ldr.w	r3, [lr]
 80139bc:	f104 0e14 	add.w	lr, r4, #20
 80139c0:	f8cc 3000 	str.w	r3, [ip]
 80139c4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80139c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139d0:	f8de 3000 	ldr.w	r3, [lr]
 80139d4:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80139d8:	f8cc 3000 	str.w	r3, [ip]
 80139dc:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80139e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139e8:	f8de 3000 	ldr.w	r3, [lr]
 80139ec:	4631      	mov	r1, r6
 80139ee:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80139f0:	4628      	mov	r0, r5
 80139f2:	f8cc 3000 	str.w	r3, [ip]
 80139f6:	682b      	ldr	r3, [r5, #0]
 80139f8:	9201      	str	r2, [sp, #4]
 80139fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80139fc:	f8cd 8008 	str.w	r8, [sp, #8]
 8013a00:	9200      	str	r2, [sp, #0]
 8013a02:	aa07      	add	r2, sp, #28
 8013a04:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013a08:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8013a0c:	463b      	mov	r3, r7
 8013a0e:	47d8      	blx	fp
 8013a10:	46a6      	mov	lr, r4
 8013a12:	f10d 0c1c 	add.w	ip, sp, #28
 8013a16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a1e:	f8de 3000 	ldr.w	r3, [lr]
 8013a22:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8013a26:	343c      	adds	r4, #60	@ 0x3c
 8013a28:	f8cc 3000 	str.w	r3, [ip]
 8013a2c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013a30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a38:	f8de 3000 	ldr.w	r3, [lr]
 8013a3c:	f8cc 3000 	str.w	r3, [ip]
 8013a40:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8013a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a4a:	6823      	ldr	r3, [r4, #0]
 8013a4c:	4631      	mov	r1, r6
 8013a4e:	4628      	mov	r0, r5
 8013a50:	f8cc 3000 	str.w	r3, [ip]
 8013a54:	682b      	ldr	r3, [r5, #0]
 8013a56:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013a5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013a5c:	f8cd 8008 	str.w	r8, [sp, #8]
 8013a60:	9201      	str	r2, [sp, #4]
 8013a62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013a64:	9200      	str	r2, [sp, #0]
 8013a66:	aa07      	add	r2, sp, #28
 8013a68:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8013a6a:	463b      	mov	r3, r7
 8013a6c:	47a0      	blx	r4
 8013a6e:	b017      	add	sp, #92	@ 0x5c
 8013a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a74 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8013a74:	2000      	movs	r0, #0
 8013a76:	4770      	bx	lr

08013a78 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8013a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7c:	b08d      	sub	sp, #52	@ 0x34
 8013a7e:	4688      	mov	r8, r1
 8013a80:	f8d3 c000 	ldr.w	ip, [r3]
 8013a84:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8013a86:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8013a8a:	680f      	ldr	r7, [r1, #0]
 8013a8c:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8013a90:	eba7 070c 	sub.w	r7, r7, ip
 8013a94:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8013a98:	edd3 6a07 	vldr	s13, [r3, #28]
 8013a9c:	42bc      	cmp	r4, r7
 8013a9e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013aa0:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8013aa4:	bfa8      	it	ge
 8013aa6:	463c      	movge	r4, r7
 8013aa8:	f9b1 9000 	ldrsh.w	r9, [r1]
 8013aac:	f9ba 1000 	ldrsh.w	r1, [sl]
 8013ab0:	ee07 4a90 	vmov	s15, r4
 8013ab4:	eb09 0e0c 	add.w	lr, r9, ip
 8013ab8:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8013abc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8013ac0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8013ac4:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8013ac8:	4571      	cmp	r1, lr
 8013aca:	ee25 4a04 	vmul.f32	s8, s10, s8
 8013ace:	ee65 4a24 	vmul.f32	s9, s10, s9
 8013ad2:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013ad6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013ada:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8013ade:	ee32 1a05 	vadd.f32	s2, s4, s10
 8013ae2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013ae6:	ee36 0a84 	vadd.f32	s0, s13, s8
 8013aea:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013aee:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013af2:	f340 808c 	ble.w	8013c0e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8013af6:	eba1 060e 	sub.w	r6, r1, lr
 8013afa:	fb96 f5f4 	sdiv	r5, r6, r4
 8013afe:	ee07 5a10 	vmov	s14, r5
 8013b02:	2d00      	cmp	r5, #0
 8013b04:	fb04 6615 	mls	r6, r4, r5, r6
 8013b08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b0c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8013b10:	eee7 0a24 	vfma.f32	s1, s14, s9
 8013b14:	eea7 1a05 	vfma.f32	s2, s14, s10
 8013b18:	dd12      	ble.n	8013b40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8013b1a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8013b1e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8013b22:	ee31 2a45 	vsub.f32	s4, s2, s10
 8013b26:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b2e:	bf14      	ite	ne
 8013b30:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8013b34:	eeb0 7a67 	vmoveq.f32	s14, s15
 8013b38:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013b3c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013b40:	fb05 f204 	mul.w	r2, r5, r4
 8013b44:	1abf      	subs	r7, r7, r2
 8013b46:	4494      	add	ip, r2
 8013b48:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8013b4c:	4411      	add	r1, r2
 8013b4e:	eb09 020c 	add.w	r2, r9, ip
 8013b52:	b209      	sxth	r1, r1
 8013b54:	443a      	add	r2, r7
 8013b56:	428a      	cmp	r2, r1
 8013b58:	bfc4      	itt	gt
 8013b5a:	eba1 0209 	subgt.w	r2, r1, r9
 8013b5e:	eba2 070c 	subgt.w	r7, r2, ip
 8013b62:	2f00      	cmp	r7, #0
 8013b64:	dd50      	ble.n	8013c08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8013b66:	fb97 f1f4 	sdiv	r1, r7, r4
 8013b6a:	fb04 7211 	mls	r2, r4, r1, r7
 8013b6e:	b90a      	cbnz	r2, 8013b74 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8013b70:	3901      	subs	r1, #1
 8013b72:	4622      	mov	r2, r4
 8013b74:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8013b78:	6840      	ldr	r0, [r0, #4]
 8013b7a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8013b7e:	44b6      	add	lr, r6
 8013b80:	f8d0 a000 	ldr.w	sl, [r0]
 8013b84:	2900      	cmp	r1, #0
 8013b86:	bfcc      	ite	gt
 8013b88:	46a1      	movgt	r9, r4
 8013b8a:	4691      	movle	r9, r2
 8013b8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013b8e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013b90:	fb04 e505 	mla	r5, r4, r5, lr
 8013b94:	eef0 6a42 	vmov.f32	s13, s4
 8013b98:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013b9c:	9008      	str	r0, [sp, #32]
 8013b9e:	eeb0 7a61 	vmov.f32	s14, s3
 8013ba2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8013ba4:	695b      	ldr	r3, [r3, #20]
 8013ba6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013baa:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8013bae:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8013bb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013bb4:	445b      	add	r3, fp
 8013bb6:	9307      	str	r3, [sp, #28]
 8013bb8:	ee16 3a90 	vmov	r3, s13
 8013bbc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8013bc0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8013bc4:	ee21 3a23 	vmul.f32	s6, s2, s7
 8013bc8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8013bcc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013bd0:	ee17 7a90 	vmov	r7, s15
 8013bd4:	ee73 7a42 	vsub.f32	s15, s6, s4
 8013bd8:	fb97 f7f4 	sdiv	r7, r7, r4
 8013bdc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013be0:	ee17 ca90 	vmov	ip, s15
 8013be4:	fb9c fcf4 	sdiv	ip, ip, r4
 8013be8:	fb0c 3306 	mla	r3, ip, r6, r3
 8013bec:	9302      	str	r3, [sp, #8]
 8013bee:	ee17 3a10 	vmov	r3, s14
 8013bf2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8013bf6:	fb07 3706 	mla	r7, r7, r6, r3
 8013bfa:	eba9 0306 	sub.w	r3, r9, r6
 8013bfe:	e9cd 4700 	strd	r4, r7, [sp]
 8013c02:	f8da 4008 	ldr.w	r4, [sl, #8]
 8013c06:	47a0      	blx	r4
 8013c08:	b00d      	add	sp, #52	@ 0x34
 8013c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0e:	2500      	movs	r5, #0
 8013c10:	462e      	mov	r6, r5
 8013c12:	e799      	b.n	8013b48 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08013c14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c18:	b0db      	sub	sp, #364	@ 0x16c
 8013c1a:	461d      	mov	r5, r3
 8013c1c:	4614      	mov	r4, r2
 8013c1e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8013c22:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013c24:	4629      	mov	r1, r5
 8013c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c28:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8013c2c:	9009      	str	r0, [sp, #36]	@ 0x24
 8013c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c30:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8013c34:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8013c38:	9310      	str	r3, [sp, #64]	@ 0x40
 8013c3a:	6803      	ldr	r3, [r0, #0]
 8013c3c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8013c3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8013c42:	47b8      	blx	r7
 8013c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c46:	6058      	str	r0, [r3, #4]
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	f000 83a1 	beq.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013c4e:	682b      	ldr	r3, [r5, #0]
 8013c50:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8013c54:	ed94 7a02 	vldr	s14, [r4, #8]
 8013c58:	9314      	str	r3, [sp, #80]	@ 0x50
 8013c5a:	686b      	ldr	r3, [r5, #4]
 8013c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c60:	9315      	str	r3, [sp, #84]	@ 0x54
 8013c62:	4bc1      	ldr	r3, [pc, #772]	@ (8013f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8013c64:	7819      	ldrb	r1, [r3, #0]
 8013c66:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8013c6a:	2900      	cmp	r1, #0
 8013c6c:	bf16      	itet	ne
 8013c6e:	4619      	movne	r1, r3
 8013c70:	4611      	moveq	r1, r2
 8013c72:	4613      	movne	r3, r2
 8013c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c78:	9116      	str	r1, [sp, #88]	@ 0x58
 8013c7a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8013c7e:	f240 8387 	bls.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013c82:	ed94 7a07 	vldr	s14, [r4, #28]
 8013c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c8e:	f240 837f 	bls.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013c92:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8013c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9e:	f240 8377 	bls.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013ca2:	6822      	ldr	r2, [r4, #0]
 8013ca4:	4bb1      	ldr	r3, [pc, #708]	@ (8013f6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	f2c0 8372 	blt.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013cac:	49b0      	ldr	r1, [pc, #704]	@ (8013f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8013cae:	6963      	ldr	r3, [r4, #20]
 8013cb0:	428a      	cmp	r2, r1
 8013cb2:	f300 836d 	bgt.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013cb6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013cba:	48ae      	ldr	r0, [pc, #696]	@ (8013f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8013cbc:	33ff      	adds	r3, #255	@ 0xff
 8013cbe:	4283      	cmp	r3, r0
 8013cc0:	f200 8366 	bhi.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013cc4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8013cc6:	4dac      	ldr	r5, [pc, #688]	@ (8013f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8013cc8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013ccc:	33ff      	adds	r3, #255	@ 0xff
 8013cce:	42ab      	cmp	r3, r5
 8013cd0:	f200 835e 	bhi.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013cd4:	6862      	ldr	r2, [r4, #4]
 8013cd6:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8013cda:	33ff      	adds	r3, #255	@ 0xff
 8013cdc:	4283      	cmp	r3, r0
 8013cde:	f200 8357 	bhi.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013ce2:	69a1      	ldr	r1, [r4, #24]
 8013ce4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8013ce8:	33ff      	adds	r3, #255	@ 0xff
 8013cea:	4283      	cmp	r3, r0
 8013cec:	f200 8350 	bhi.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013cf0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013cf2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8013cf6:	30ff      	adds	r0, #255	@ 0xff
 8013cf8:	42a8      	cmp	r0, r5
 8013cfa:	f200 8349 	bhi.w	8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013cfe:	428a      	cmp	r2, r1
 8013d00:	f280 8110 	bge.w	8013f24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8013d04:	429a      	cmp	r2, r3
 8013d06:	f300 8119 	bgt.w	8013f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8013d0a:	4299      	cmp	r1, r3
 8013d0c:	f280 811d 	bge.w	8013f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8013d10:	2502      	movs	r5, #2
 8013d12:	2701      	movs	r7, #1
 8013d14:	46a9      	mov	r9, r5
 8013d16:	46b8      	mov	r8, r7
 8013d18:	f04f 0a00 	mov.w	sl, #0
 8013d1c:	4621      	mov	r1, r4
 8013d1e:	a849      	add	r0, sp, #292	@ 0x124
 8013d20:	f003 f818 	bl	8016d54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8013d24:	4622      	mov	r2, r4
 8013d26:	4653      	mov	r3, sl
 8013d28:	a949      	add	r1, sp, #292	@ 0x124
 8013d2a:	f8cd 9000 	str.w	r9, [sp]
 8013d2e:	a819      	add	r0, sp, #100	@ 0x64
 8013d30:	f003 f940 	bl	8016fb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013d34:	4622      	mov	r2, r4
 8013d36:	4653      	mov	r3, sl
 8013d38:	a949      	add	r1, sp, #292	@ 0x124
 8013d3a:	f8cd 8000 	str.w	r8, [sp]
 8013d3e:	a829      	add	r0, sp, #164	@ 0xa4
 8013d40:	f003 f938 	bl	8016fb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013d44:	4643      	mov	r3, r8
 8013d46:	4622      	mov	r2, r4
 8013d48:	a949      	add	r1, sp, #292	@ 0x124
 8013d4a:	f8cd 9000 	str.w	r9, [sp]
 8013d4e:	a839      	add	r0, sp, #228	@ 0xe4
 8013d50:	f003 f930 	bl	8016fb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013d54:	42af      	cmp	r7, r5
 8013d56:	af12      	add	r7, sp, #72	@ 0x48
 8013d58:	bfb7      	itett	lt
 8013d5a:	2300      	movlt	r3, #0
 8013d5c:	2301      	movge	r3, #1
 8013d5e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8013d60:	ac19      	addlt	r4, sp, #100	@ 0x64
 8013d62:	bfb1      	iteee	lt
 8013d64:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8013d66:	ad19      	addge	r5, sp, #100	@ 0x64
 8013d68:	930e      	strge	r3, [sp, #56]	@ 0x38
 8013d6a:	ac29      	addge	r4, sp, #164	@ 0xa4
 8013d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013d72:	e887 0003 	stmia.w	r7, {r0, r1}
 8013d76:	b928      	cbnz	r0, 8013d84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8013d78:	4b80      	ldr	r3, [pc, #512]	@ (8013f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8013d7a:	6818      	ldr	r0, [r3, #0]
 8013d7c:	6803      	ldr	r3, [r0, #0]
 8013d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d80:	4798      	blx	r3
 8013d82:	6038      	str	r0, [r7, #0]
 8013d84:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013d86:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013d8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013d8e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8013d90:	930c      	str	r3, [sp, #48]	@ 0x30
 8013d92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d94:	6963      	ldr	r3, [r4, #20]
 8013d96:	440b      	add	r3, r1
 8013d98:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013d9c:	4408      	add	r0, r1
 8013d9e:	b200      	sxth	r0, r0
 8013da0:	4283      	cmp	r3, r0
 8013da2:	900d      	str	r0, [sp, #52]	@ 0x34
 8013da4:	f280 80dd 	bge.w	8013f62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8013da8:	428b      	cmp	r3, r1
 8013daa:	da08      	bge.n	8013dbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013dac:	2a00      	cmp	r2, #0
 8013dae:	dd06      	ble.n	8013dbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013db0:	1acb      	subs	r3, r1, r3
 8013db2:	429a      	cmp	r2, r3
 8013db4:	f2c0 80e4 	blt.w	8013f80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f300 80e2 	bgt.w	8013f82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8013dbe:	6967      	ldr	r7, [r4, #20]
 8013dc0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8013dc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013dc6:	443b      	add	r3, r7
 8013dc8:	461f      	mov	r7, r3
 8013dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013dcc:	1bdf      	subs	r7, r3, r7
 8013dce:	4297      	cmp	r7, r2
 8013dd0:	bfa8      	it	ge
 8013dd2:	4617      	movge	r7, r2
 8013dd4:	2f00      	cmp	r7, #0
 8013dd6:	f340 8166 	ble.w	80140a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8013dda:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013ddc:	6829      	ldr	r1, [r5, #0]
 8013dde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013de2:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013de6:	4411      	add	r1, r2
 8013de8:	6820      	ldr	r0, [r4, #0]
 8013dea:	4299      	cmp	r1, r3
 8013dec:	dd1a      	ble.n	8013e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013dee:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8013df2:	4402      	add	r2, r0
 8013df4:	440b      	add	r3, r1
 8013df6:	b21b      	sxth	r3, r3
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	dc13      	bgt.n	8013e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013dfc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013dfe:	a912      	add	r1, sp, #72	@ 0x48
 8013e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	9206      	str	r2, [sp, #24]
 8013e08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013e0a:	9500      	str	r5, [sp, #0]
 8013e0c:	9205      	str	r2, [sp, #20]
 8013e0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e10:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013e14:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8013e16:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013e1a:	aa49      	add	r2, sp, #292	@ 0x124
 8013e1c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8013e20:	4623      	mov	r3, r4
 8013e22:	47c8      	blx	r9
 8013e24:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8013e28:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013e2c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8013e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013e34:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8013e38:	68a1      	ldr	r1, [r4, #8]
 8013e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e3e:	ed94 6a08 	vldr	s12, [r4, #32]
 8013e42:	edd4 6a07 	vldr	s13, [r4, #28]
 8013e46:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013e4a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013e4e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013e52:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013e56:	edc4 6a07 	vstr	s13, [r4, #28]
 8013e5a:	441a      	add	r2, r3
 8013e5c:	6963      	ldr	r3, [r4, #20]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	6022      	str	r2, [r4, #0]
 8013e62:	6163      	str	r3, [r4, #20]
 8013e64:	69a3      	ldr	r3, [r4, #24]
 8013e66:	3b01      	subs	r3, #1
 8013e68:	61a3      	str	r3, [r4, #24]
 8013e6a:	6923      	ldr	r3, [r4, #16]
 8013e6c:	440b      	add	r3, r1
 8013e6e:	68e1      	ldr	r1, [r4, #12]
 8013e70:	428b      	cmp	r3, r1
 8013e72:	6123      	str	r3, [r4, #16]
 8013e74:	db15      	blt.n	8013ea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8013e76:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8013e7a:	3201      	adds	r2, #1
 8013e7c:	1a5b      	subs	r3, r3, r1
 8013e7e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013e82:	6022      	str	r2, [r4, #0]
 8013e84:	6123      	str	r3, [r4, #16]
 8013e86:	edc4 6a07 	vstr	s13, [r4, #28]
 8013e8a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013e8e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013e92:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013e96:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8013e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e9e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013ea2:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8013ea6:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8013eaa:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8013eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013eb2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8013eb6:	68a9      	ldr	r1, [r5, #8]
 8013eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ebc:	ed95 6a08 	vldr	s12, [r5, #32]
 8013ec0:	edd5 6a07 	vldr	s13, [r5, #28]
 8013ec4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013ec8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013ecc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ed4:	edc5 6a07 	vstr	s13, [r5, #28]
 8013ed8:	441a      	add	r2, r3
 8013eda:	696b      	ldr	r3, [r5, #20]
 8013edc:	3301      	adds	r3, #1
 8013ede:	602a      	str	r2, [r5, #0]
 8013ee0:	616b      	str	r3, [r5, #20]
 8013ee2:	69ab      	ldr	r3, [r5, #24]
 8013ee4:	3b01      	subs	r3, #1
 8013ee6:	61ab      	str	r3, [r5, #24]
 8013ee8:	692b      	ldr	r3, [r5, #16]
 8013eea:	440b      	add	r3, r1
 8013eec:	68e9      	ldr	r1, [r5, #12]
 8013eee:	428b      	cmp	r3, r1
 8013ef0:	612b      	str	r3, [r5, #16]
 8013ef2:	db15      	blt.n	8013f20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8013ef4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8013ef8:	3201      	adds	r2, #1
 8013efa:	1a5b      	subs	r3, r3, r1
 8013efc:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013f00:	602a      	str	r2, [r5, #0]
 8013f02:	612b      	str	r3, [r5, #16]
 8013f04:	edc5 6a07 	vstr	s13, [r5, #28]
 8013f08:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8013f0c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013f10:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013f14:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8013f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f1c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013f20:	3f01      	subs	r7, #1
 8013f22:	e757      	b.n	8013dd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8013f24:	4299      	cmp	r1, r3
 8013f26:	dc13      	bgt.n	8013f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	da14      	bge.n	8013f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8013f2c:	2502      	movs	r5, #2
 8013f2e:	2703      	movs	r7, #3
 8013f30:	f04f 0800 	mov.w	r8, #0
 8013f34:	46a9      	mov	r9, r5
 8013f36:	f04f 0a01 	mov.w	sl, #1
 8013f3a:	e6ef      	b.n	8013d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013f3c:	2501      	movs	r5, #1
 8013f3e:	2700      	movs	r7, #0
 8013f40:	46a9      	mov	r9, r5
 8013f42:	46b8      	mov	r8, r7
 8013f44:	f04f 0a02 	mov.w	sl, #2
 8013f48:	e6e8      	b.n	8013d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013f4a:	2501      	movs	r5, #1
 8013f4c:	2702      	movs	r7, #2
 8013f4e:	e6e1      	b.n	8013d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8013f50:	2500      	movs	r5, #0
 8013f52:	2701      	movs	r7, #1
 8013f54:	e7f4      	b.n	8013f40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8013f56:	2702      	movs	r7, #2
 8013f58:	2503      	movs	r5, #3
 8013f5a:	f04f 0900 	mov.w	r9, #0
 8013f5e:	46b8      	mov	r8, r7
 8013f60:	e7e9      	b.n	8013f36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8013f62:	4613      	mov	r3, r2
 8013f64:	e728      	b.n	8013db8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8013f66:	bf00      	nop
 8013f68:	24004270 	.word	0x24004270
 8013f6c:	fffd8f01 	.word	0xfffd8f01
 8013f70:	00027100 	.word	0x00027100
 8013f74:	0004e1ff 	.word	0x0004e1ff
 8013f78:	0004e1fe 	.word	0x0004e1fe
 8013f7c:	24004278 	.word	0x24004278
 8013f80:	4613      	mov	r3, r2
 8013f82:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8013f84:	469e      	mov	lr, r3
 8013f86:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8013f88:	469c      	mov	ip, r3
 8013f8a:	9111      	str	r1, [sp, #68]	@ 0x44
 8013f8c:	f04f 0900 	mov.w	r9, #0
 8013f90:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8013f94:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8013f98:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8013f9c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8013fa0:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8013fa4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013fa8:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8013fac:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8013fb0:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8013fb4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8013fb8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8013fbc:	f1bc 0f00 	cmp.w	ip, #0
 8013fc0:	d147      	bne.n	8014052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8013fc2:	eb03 0c07 	add.w	ip, r3, r7
 8013fc6:	1ad7      	subs	r7, r2, r3
 8013fc8:	f1b9 0f00 	cmp.w	r9, #0
 8013fcc:	d009      	beq.n	8013fe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8013fce:	9029      	str	r0, [sp, #164]	@ 0xa4
 8013fd0:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8013fd4:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8013fd8:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8013fdc:	912d      	str	r1, [sp, #180]	@ 0xb4
 8013fde:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8013fe2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013fe4:	f04f 0800 	mov.w	r8, #0
 8013fe8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8013fec:	9111      	str	r1, [sp, #68]	@ 0x44
 8013fee:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8013ff2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8013ff6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8013ffa:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8013ffe:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8014002:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8014006:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801400a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801400e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8014012:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8014016:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801401a:	f1be 0f00 	cmp.w	lr, #0
 801401e:	d031      	beq.n	8014084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014020:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014022:	4450      	add	r0, sl
 8014024:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014028:	4431      	add	r1, r6
 801402a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801402e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014032:	4549      	cmp	r1, r9
 8014034:	db08      	blt.n	8014048 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8014036:	ee77 7a85 	vadd.f32	s15, s15, s10
 801403a:	3001      	adds	r0, #1
 801403c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014040:	eba1 0109 	sub.w	r1, r1, r9
 8014044:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014048:	f10e 3eff 	add.w	lr, lr, #4294967295
 801404c:	f04f 0801 	mov.w	r8, #1
 8014050:	e7e3      	b.n	801401a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014052:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014054:	4450      	add	r0, sl
 8014056:	ee37 7a24 	vadd.f32	s14, s14, s9
 801405a:	4431      	add	r1, r6
 801405c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014060:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014064:	4541      	cmp	r1, r8
 8014066:	db08      	blt.n	801407a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8014068:	ee76 6a85 	vadd.f32	s13, s13, s10
 801406c:	3001      	adds	r0, #1
 801406e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014072:	eba1 0108 	sub.w	r1, r1, r8
 8014076:	ee77 7a86 	vadd.f32	s15, s15, s12
 801407a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801407e:	f04f 0901 	mov.w	r9, #1
 8014082:	e79b      	b.n	8013fbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014084:	449c      	add	ip, r3
 8014086:	1aff      	subs	r7, r7, r3
 8014088:	f1b8 0f00 	cmp.w	r8, #0
 801408c:	d009      	beq.n	80140a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801408e:	9019      	str	r0, [sp, #100]	@ 0x64
 8014090:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8014094:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8014098:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801409c:	911d      	str	r1, [sp, #116]	@ 0x74
 801409e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80140a2:	1ad2      	subs	r2, r2, r3
 80140a4:	e68b      	b.n	8013dbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80140a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140a8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	f000 80d1 	beq.w	8014252 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80140b0:	ad19      	add	r5, sp, #100	@ 0x64
 80140b2:	ac39      	add	r4, sp, #228	@ 0xe4
 80140b4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80140b6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80140ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80140be:	930c      	str	r3, [sp, #48]	@ 0x30
 80140c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80140c2:	6963      	ldr	r3, [r4, #20]
 80140c4:	440b      	add	r3, r1
 80140c6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80140ca:	4408      	add	r0, r1
 80140cc:	b200      	sxth	r0, r0
 80140ce:	4283      	cmp	r3, r0
 80140d0:	900d      	str	r0, [sp, #52]	@ 0x34
 80140d2:	f280 80c1 	bge.w	8014258 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80140d6:	428b      	cmp	r3, r1
 80140d8:	da08      	bge.n	80140ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80140da:	2a00      	cmp	r2, #0
 80140dc:	dd06      	ble.n	80140ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80140de:	1acb      	subs	r3, r1, r3
 80140e0:	429a      	cmp	r2, r3
 80140e2:	f2c0 80bb 	blt.w	801425c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	f300 80b9 	bgt.w	801425e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80140ec:	6967      	ldr	r7, [r4, #20]
 80140ee:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80140f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140f4:	443b      	add	r3, r7
 80140f6:	461f      	mov	r7, r3
 80140f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80140fa:	1bdf      	subs	r7, r3, r7
 80140fc:	4297      	cmp	r7, r2
 80140fe:	bfa8      	it	ge
 8014100:	4617      	movge	r7, r2
 8014102:	2f00      	cmp	r7, #0
 8014104:	f340 813c 	ble.w	8014380 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014108:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801410a:	6829      	ldr	r1, [r5, #0]
 801410c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014110:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014114:	4411      	add	r1, r2
 8014116:	6820      	ldr	r0, [r4, #0]
 8014118:	4299      	cmp	r1, r3
 801411a:	dd1a      	ble.n	8014152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801411c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014120:	4402      	add	r2, r0
 8014122:	440b      	add	r3, r1
 8014124:	b21b      	sxth	r3, r3
 8014126:	429a      	cmp	r2, r3
 8014128:	dc13      	bgt.n	8014152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801412a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801412c:	a912      	add	r1, sp, #72	@ 0x48
 801412e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014130:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	9206      	str	r2, [sp, #24]
 8014136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014138:	9500      	str	r5, [sp, #0]
 801413a:	9205      	str	r2, [sp, #20]
 801413c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801413e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014142:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8014144:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014148:	aa49      	add	r2, sp, #292	@ 0x124
 801414a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801414e:	4623      	mov	r3, r4
 8014150:	47c8      	blx	r9
 8014152:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8014156:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801415a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801415e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014162:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8014166:	68a1      	ldr	r1, [r4, #8]
 8014168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801416c:	ed94 6a08 	vldr	s12, [r4, #32]
 8014170:	edd4 6a07 	vldr	s13, [r4, #28]
 8014174:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8014178:	ee76 6a86 	vadd.f32	s13, s13, s12
 801417c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014180:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014184:	edc4 6a07 	vstr	s13, [r4, #28]
 8014188:	441a      	add	r2, r3
 801418a:	6963      	ldr	r3, [r4, #20]
 801418c:	3301      	adds	r3, #1
 801418e:	6022      	str	r2, [r4, #0]
 8014190:	6163      	str	r3, [r4, #20]
 8014192:	69a3      	ldr	r3, [r4, #24]
 8014194:	3b01      	subs	r3, #1
 8014196:	61a3      	str	r3, [r4, #24]
 8014198:	6923      	ldr	r3, [r4, #16]
 801419a:	440b      	add	r3, r1
 801419c:	68e1      	ldr	r1, [r4, #12]
 801419e:	428b      	cmp	r3, r1
 80141a0:	6123      	str	r3, [r4, #16]
 80141a2:	db15      	blt.n	80141d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80141a4:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80141a8:	3201      	adds	r2, #1
 80141aa:	1a5b      	subs	r3, r3, r1
 80141ac:	ee76 6a26 	vadd.f32	s13, s12, s13
 80141b0:	6022      	str	r2, [r4, #0]
 80141b2:	6123      	str	r3, [r4, #16]
 80141b4:	edc4 6a07 	vstr	s13, [r4, #28]
 80141b8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80141bc:	ee36 7a87 	vadd.f32	s14, s13, s14
 80141c0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80141c4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80141c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80141cc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80141d0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80141d4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80141d8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80141dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80141e0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80141e4:	68a9      	ldr	r1, [r5, #8]
 80141e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141ea:	ed95 6a08 	vldr	s12, [r5, #32]
 80141ee:	edd5 6a07 	vldr	s13, [r5, #28]
 80141f2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80141f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80141fa:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80141fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014202:	edc5 6a07 	vstr	s13, [r5, #28]
 8014206:	441a      	add	r2, r3
 8014208:	696b      	ldr	r3, [r5, #20]
 801420a:	3301      	adds	r3, #1
 801420c:	602a      	str	r2, [r5, #0]
 801420e:	616b      	str	r3, [r5, #20]
 8014210:	69ab      	ldr	r3, [r5, #24]
 8014212:	3b01      	subs	r3, #1
 8014214:	61ab      	str	r3, [r5, #24]
 8014216:	692b      	ldr	r3, [r5, #16]
 8014218:	440b      	add	r3, r1
 801421a:	68e9      	ldr	r1, [r5, #12]
 801421c:	428b      	cmp	r3, r1
 801421e:	612b      	str	r3, [r5, #16]
 8014220:	db15      	blt.n	801424e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014222:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8014226:	3201      	adds	r2, #1
 8014228:	1a5b      	subs	r3, r3, r1
 801422a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801422e:	602a      	str	r2, [r5, #0]
 8014230:	612b      	str	r3, [r5, #16]
 8014232:	edc5 6a07 	vstr	s13, [r5, #28]
 8014236:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801423a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801423e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014242:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8014246:	ee77 7a27 	vadd.f32	s15, s14, s15
 801424a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801424e:	3f01      	subs	r7, #1
 8014250:	e757      	b.n	8014102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8014252:	ad39      	add	r5, sp, #228	@ 0xe4
 8014254:	ac19      	add	r4, sp, #100	@ 0x64
 8014256:	e72d      	b.n	80140b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8014258:	4613      	mov	r3, r2
 801425a:	e744      	b.n	80140e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801425c:	4613      	mov	r3, r2
 801425e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8014260:	469e      	mov	lr, r3
 8014262:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8014266:	461f      	mov	r7, r3
 8014268:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801426c:	f04f 0900 	mov.w	r9, #0
 8014270:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8014274:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8014278:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801427c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8014280:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8014284:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8014286:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801428a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801428e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8014292:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8014296:	960e      	str	r6, [sp, #56]	@ 0x38
 8014298:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801429c:	2f00      	cmp	r7, #0
 801429e:	d146      	bne.n	801432e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80142a0:	449c      	add	ip, r3
 80142a2:	1ad7      	subs	r7, r2, r3
 80142a4:	f1b9 0f00 	cmp.w	r9, #0
 80142a8:	d009      	beq.n	80142be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80142aa:	9039      	str	r0, [sp, #228]	@ 0xe4
 80142ac:	913d      	str	r1, [sp, #244]	@ 0xf4
 80142ae:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80142b2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80142b6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80142ba:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80142be:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80142c0:	f04f 0800 	mov.w	r8, #0
 80142c4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80142c8:	910e      	str	r1, [sp, #56]	@ 0x38
 80142ca:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80142ce:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80142d2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80142d6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80142da:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80142de:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80142e2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80142e6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80142ea:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80142ee:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80142f2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80142f6:	f1be 0f00 	cmp.w	lr, #0
 80142fa:	d030      	beq.n	801435e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80142fc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80142fe:	4450      	add	r0, sl
 8014300:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014304:	4431      	add	r1, r6
 8014306:	ee37 7a04 	vadd.f32	s14, s14, s8
 801430a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801430e:	4549      	cmp	r1, r9
 8014310:	db08      	blt.n	8014324 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014312:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014316:	3001      	adds	r0, #1
 8014318:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801431c:	eba1 0109 	sub.w	r1, r1, r9
 8014320:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014324:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014328:	f04f 0801 	mov.w	r8, #1
 801432c:	e7e3      	b.n	80142f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801432e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014330:	4450      	add	r0, sl
 8014332:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014336:	4431      	add	r1, r6
 8014338:	ee77 7a84 	vadd.f32	s15, s15, s8
 801433c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014340:	4541      	cmp	r1, r8
 8014342:	db08      	blt.n	8014356 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014344:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014348:	3001      	adds	r0, #1
 801434a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801434e:	eba1 0108 	sub.w	r1, r1, r8
 8014352:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014356:	3f01      	subs	r7, #1
 8014358:	f04f 0901 	mov.w	r9, #1
 801435c:	e79e      	b.n	801429c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801435e:	449c      	add	ip, r3
 8014360:	1aff      	subs	r7, r7, r3
 8014362:	f1b8 0f00 	cmp.w	r8, #0
 8014366:	d009      	beq.n	801437c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8014368:	9019      	str	r0, [sp, #100]	@ 0x64
 801436a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801436e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8014372:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8014376:	911d      	str	r1, [sp, #116]	@ 0x74
 8014378:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801437c:	1ad2      	subs	r2, r2, r3
 801437e:	e6b5      	b.n	80140ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	b923      	cbnz	r3, 8014390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014386:	4b04      	ldr	r3, [pc, #16]	@ (8014398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8014388:	6818      	ldr	r0, [r3, #0]
 801438a:	6803      	ldr	r3, [r0, #0]
 801438c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801438e:	4798      	blx	r3
 8014390:	b05b      	add	sp, #364	@ 0x16c
 8014392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014396:	bf00      	nop
 8014398:	24004278 	.word	0x24004278

0801439c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801439c:	2b03      	cmp	r3, #3
 801439e:	d818      	bhi.n	80143d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80143a0:	e8df f003 	tbb	[pc, r3]
 80143a4:	130d0602 	.word	0x130d0602
 80143a8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80143ac:	1850      	adds	r0, r2, r1
 80143ae:	4770      	bx	lr
 80143b0:	8803      	ldrh	r3, [r0, #0]
 80143b2:	8880      	ldrh	r0, [r0, #4]
 80143b4:	4418      	add	r0, r3
 80143b6:	b200      	sxth	r0, r0
 80143b8:	1a80      	subs	r0, r0, r2
 80143ba:	3801      	subs	r0, #1
 80143bc:	4770      	bx	lr
 80143be:	8803      	ldrh	r3, [r0, #0]
 80143c0:	8880      	ldrh	r0, [r0, #4]
 80143c2:	4418      	add	r0, r3
 80143c4:	b200      	sxth	r0, r0
 80143c6:	1a40      	subs	r0, r0, r1
 80143c8:	e7f7      	b.n	80143ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80143ca:	f9b0 0000 	ldrsh.w	r0, [r0]
 80143ce:	4410      	add	r0, r2
 80143d0:	4770      	bx	lr
 80143d2:	2000      	movs	r0, #0
 80143d4:	4770      	bx	lr

080143d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80143d6:	2b03      	cmp	r3, #3
 80143d8:	d817      	bhi.n	801440a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80143da:	e8df f003 	tbb	[pc, r3]
 80143de:	0602      	.short	0x0602
 80143e0:	1009      	.short	0x1009
 80143e2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80143e6:	1850      	adds	r0, r2, r1
 80143e8:	4770      	bx	lr
 80143ea:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80143ee:	e7fa      	b.n	80143e6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80143f0:	8843      	ldrh	r3, [r0, #2]
 80143f2:	88c0      	ldrh	r0, [r0, #6]
 80143f4:	4418      	add	r0, r3
 80143f6:	b200      	sxth	r0, r0
 80143f8:	1a80      	subs	r0, r0, r2
 80143fa:	3801      	subs	r0, #1
 80143fc:	4770      	bx	lr
 80143fe:	8843      	ldrh	r3, [r0, #2]
 8014400:	88c0      	ldrh	r0, [r0, #6]
 8014402:	4418      	add	r0, r3
 8014404:	b200      	sxth	r0, r0
 8014406:	1a40      	subs	r0, r0, r1
 8014408:	e7f7      	b.n	80143fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801440a:	2000      	movs	r0, #0
 801440c:	4770      	bx	lr
	...

08014410 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8014410:	4b01      	ldr	r3, [pc, #4]	@ (8014418 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8014412:	2200      	movs	r2, #0
 8014414:	601a      	str	r2, [r3, #0]
 8014416:	4770      	bx	lr
 8014418:	24004280 	.word	0x24004280

0801441c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801441c:	4603      	mov	r3, r0
 801441e:	b1c8      	cbz	r0, 8014454 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8014420:	0c02      	lsrs	r2, r0, #16
 8014422:	0412      	lsls	r2, r2, #16
 8014424:	b9a2      	cbnz	r2, 8014450 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8014426:	0403      	lsls	r3, r0, #16
 8014428:	2010      	movs	r0, #16
 801442a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801442e:	bf04      	itt	eq
 8014430:	021b      	lsleq	r3, r3, #8
 8014432:	3008      	addeq	r0, #8
 8014434:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8014438:	bf04      	itt	eq
 801443a:	011b      	lsleq	r3, r3, #4
 801443c:	3004      	addeq	r0, #4
 801443e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8014442:	bf04      	itt	eq
 8014444:	009b      	lsleq	r3, r3, #2
 8014446:	3002      	addeq	r0, #2
 8014448:	2b00      	cmp	r3, #0
 801444a:	db04      	blt.n	8014456 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801444c:	3001      	adds	r0, #1
 801444e:	4770      	bx	lr
 8014450:	2000      	movs	r0, #0
 8014452:	e7ea      	b.n	801442a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8014454:	2020      	movs	r0, #32
 8014456:	4770      	bx	lr

08014458 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8014458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801445c:	b087      	sub	sp, #28
 801445e:	460d      	mov	r5, r1
 8014460:	4616      	mov	r6, r2
 8014462:	4698      	mov	r8, r3
 8014464:	4601      	mov	r1, r0
 8014466:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801446a:	b120      	cbz	r0, 8014476 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801446c:	b11a      	cbz	r2, 8014476 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801446e:	2d1f      	cmp	r5, #31
 8014470:	d801      	bhi.n	8014476 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8014472:	2b1f      	cmp	r3, #31
 8014474:	d904      	bls.n	8014480 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8014476:	2000      	movs	r0, #0
 8014478:	6038      	str	r0, [r7, #0]
 801447a:	b007      	add	sp, #28
 801447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014480:	b97d      	cbnz	r5, 80144a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8014482:	b143      	cbz	r3, 8014496 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8014484:	4602      	mov	r2, r0
 8014486:	462b      	mov	r3, r5
 8014488:	4641      	mov	r1, r8
 801448a:	4630      	mov	r0, r6
 801448c:	e9cd 4700 	strd	r4, r7, [sp]
 8014490:	f7ff ffe2 	bl	8014458 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014494:	e7f1      	b.n	801447a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8014496:	f04f 33ff 	mov.w	r3, #4294967295
 801449a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801449e:	603b      	str	r3, [r7, #0]
 80144a0:	e7eb      	b.n	801447a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80144a2:	fa32 fa05 	lsrs.w	sl, r2, r5
 80144a6:	d106      	bne.n	80144b6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80144a8:	4346      	muls	r6, r0
 80144aa:	fbb6 f0f4 	udiv	r0, r6, r4
 80144ae:	fb04 6610 	mls	r6, r4, r0, r6
 80144b2:	603e      	str	r6, [r7, #0]
 80144b4:	e7e1      	b.n	801447a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80144b6:	2201      	movs	r2, #1
 80144b8:	fa00 fb05 	lsl.w	fp, r0, r5
 80144bc:	40aa      	lsls	r2, r5
 80144be:	fbbb f9f4 	udiv	r9, fp, r4
 80144c2:	3a01      	subs	r2, #1
 80144c4:	fb0a f309 	mul.w	r3, sl, r9
 80144c8:	fb04 b919 	mls	r9, r4, r9, fp
 80144cc:	4016      	ands	r6, r2
 80144ce:	9303      	str	r3, [sp, #12]
 80144d0:	4630      	mov	r0, r6
 80144d2:	f7ff ffa3 	bl	801441c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80144d6:	462b      	mov	r3, r5
 80144d8:	460a      	mov	r2, r1
 80144da:	4601      	mov	r1, r0
 80144dc:	4630      	mov	r0, r6
 80144de:	e9cd 4700 	strd	r4, r7, [sp]
 80144e2:	f7ff ffb9 	bl	8014458 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80144e6:	4606      	mov	r6, r0
 80144e8:	4648      	mov	r0, r9
 80144ea:	eb05 0108 	add.w	r1, r5, r8
 80144ee:	f7ff ff95 	bl	801441c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80144f2:	ab05      	add	r3, sp, #20
 80144f4:	464a      	mov	r2, r9
 80144f6:	e9cd 4300 	strd	r4, r3, [sp]
 80144fa:	4603      	mov	r3, r0
 80144fc:	4650      	mov	r0, sl
 80144fe:	f7ff ffab 	bl	8014458 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014502:	6839      	ldr	r1, [r7, #0]
 8014504:	9a05      	ldr	r2, [sp, #20]
 8014506:	9b03      	ldr	r3, [sp, #12]
 8014508:	4411      	add	r1, r2
 801450a:	fbb1 f2f4 	udiv	r2, r1, r4
 801450e:	18d3      	adds	r3, r2, r3
 8014510:	fb04 1412 	mls	r4, r4, r2, r1
 8014514:	441e      	add	r6, r3
 8014516:	603c      	str	r4, [r7, #0]
 8014518:	4430      	add	r0, r6
 801451a:	e7ae      	b.n	801447a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801451c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801451c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014520:	b085      	sub	sp, #20
 8014522:	f1b0 0900 	subs.w	r9, r0, #0
 8014526:	461d      	mov	r5, r3
 8014528:	4617      	mov	r7, r2
 801452a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801452c:	bfbb      	ittet	lt
 801452e:	f1c9 0900 	rsblt	r9, r9, #0
 8014532:	f04f 36ff 	movlt.w	r6, #4294967295
 8014536:	2601      	movge	r6, #1
 8014538:	6823      	ldrlt	r3, [r4, #0]
 801453a:	bfbc      	itt	lt
 801453c:	425b      	neglt	r3, r3
 801453e:	6023      	strlt	r3, [r4, #0]
 8014540:	2a00      	cmp	r2, #0
 8014542:	da04      	bge.n	801454e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8014544:	6823      	ldr	r3, [r4, #0]
 8014546:	4257      	negs	r7, r2
 8014548:	4276      	negs	r6, r6
 801454a:	425b      	negs	r3, r3
 801454c:	6023      	str	r3, [r4, #0]
 801454e:	2d00      	cmp	r5, #0
 8014550:	4638      	mov	r0, r7
 8014552:	bfba      	itte	lt
 8014554:	426d      	neglt	r5, r5
 8014556:	f04f 38ff 	movlt.w	r8, #4294967295
 801455a:	f04f 0801 	movge.w	r8, #1
 801455e:	f7ff ff5d 	bl	801441c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014562:	ab03      	add	r3, sp, #12
 8014564:	463a      	mov	r2, r7
 8014566:	e9cd 5300 	strd	r5, r3, [sp]
 801456a:	4603      	mov	r3, r0
 801456c:	4648      	mov	r0, r9
 801456e:	f7ff ff73 	bl	8014458 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	9a03      	ldr	r2, [sp, #12]
 8014576:	4546      	cmp	r6, r8
 8014578:	441a      	add	r2, r3
 801457a:	fb92 f3f5 	sdiv	r3, r2, r5
 801457e:	4418      	add	r0, r3
 8014580:	fb05 2313 	mls	r3, r5, r3, r2
 8014584:	bf18      	it	ne
 8014586:	4240      	negne	r0, r0
 8014588:	1c72      	adds	r2, r6, #1
 801458a:	6023      	str	r3, [r4, #0]
 801458c:	d105      	bne.n	801459a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801458e:	2b00      	cmp	r3, #0
 8014590:	f1c3 0200 	rsb	r2, r3, #0
 8014594:	db0b      	blt.n	80145ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8014596:	6022      	str	r2, [r4, #0]
 8014598:	e006      	b.n	80145a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801459a:	2e01      	cmp	r6, #1
 801459c:	d104      	bne.n	80145a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801459e:	2b00      	cmp	r3, #0
 80145a0:	da02      	bge.n	80145a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80145a2:	442b      	add	r3, r5
 80145a4:	3801      	subs	r0, #1
 80145a6:	6023      	str	r3, [r4, #0]
 80145a8:	b005      	add	sp, #20
 80145aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145ae:	3801      	subs	r0, #1
 80145b0:	1b52      	subs	r2, r2, r5
 80145b2:	e7f0      	b.n	8014596 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080145b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80145b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80145b8:	4c1c      	ldr	r4, [pc, #112]	@ (801462c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80145ba:	4605      	mov	r5, r0
 80145bc:	6807      	ldr	r7, [r0, #0]
 80145be:	69a3      	ldr	r3, [r4, #24]
 80145c0:	b92b      	cbnz	r3, 80145ce <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80145c2:	6840      	ldr	r0, [r0, #4]
 80145c4:	e9c5 7000 	strd	r7, r0, [r5]
 80145c8:	b004      	add	sp, #16
 80145ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ce:	f04f 0802 	mov.w	r8, #2
 80145d2:	68a2      	ldr	r2, [r4, #8]
 80145d4:	ae04      	add	r6, sp, #16
 80145d6:	6820      	ldr	r0, [r4, #0]
 80145d8:	fb93 f1f8 	sdiv	r1, r3, r8
 80145dc:	440a      	add	r2, r1
 80145de:	69e1      	ldr	r1, [r4, #28]
 80145e0:	f846 2d04 	str.w	r2, [r6, #-4]!
 80145e4:	463a      	mov	r2, r7
 80145e6:	9600      	str	r6, [sp, #0]
 80145e8:	f7ff ff98 	bl	801451c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80145ec:	69a3      	ldr	r3, [r4, #24]
 80145ee:	4607      	mov	r7, r0
 80145f0:	686a      	ldr	r2, [r5, #4]
 80145f2:	6a21      	ldr	r1, [r4, #32]
 80145f4:	9600      	str	r6, [sp, #0]
 80145f6:	6860      	ldr	r0, [r4, #4]
 80145f8:	f7ff ff90 	bl	801451c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80145fc:	69a3      	ldr	r3, [r4, #24]
 80145fe:	6962      	ldr	r2, [r4, #20]
 8014600:	4407      	add	r7, r0
 8014602:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014604:	9600      	str	r6, [sp, #0]
 8014606:	68e0      	ldr	r0, [r4, #12]
 8014608:	fb93 f8f8 	sdiv	r8, r3, r8
 801460c:	4442      	add	r2, r8
 801460e:	9203      	str	r2, [sp, #12]
 8014610:	682a      	ldr	r2, [r5, #0]
 8014612:	f7ff ff83 	bl	801451c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014616:	4680      	mov	r8, r0
 8014618:	9600      	str	r6, [sp, #0]
 801461a:	69a3      	ldr	r3, [r4, #24]
 801461c:	686a      	ldr	r2, [r5, #4]
 801461e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014620:	6920      	ldr	r0, [r4, #16]
 8014622:	f7ff ff7b 	bl	801451c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014626:	4440      	add	r0, r8
 8014628:	e7cc      	b.n	80145c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801462a:	bf00      	nop
 801462c:	24004284 	.word	0x24004284

08014630 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014630:	4b07      	ldr	r3, [pc, #28]	@ (8014650 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8014632:	781b      	ldrb	r3, [r3, #0]
 8014634:	2b01      	cmp	r3, #1
 8014636:	d109      	bne.n	801464c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014638:	f9b1 3000 	ldrsh.w	r3, [r1]
 801463c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014640:	8003      	strh	r3, [r0, #0]
 8014642:	4b04      	ldr	r3, [pc, #16]	@ (8014654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8014644:	881b      	ldrh	r3, [r3, #0]
 8014646:	3b01      	subs	r3, #1
 8014648:	1a9b      	subs	r3, r3, r2
 801464a:	800b      	strh	r3, [r1, #0]
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop
 8014650:	24004270 	.word	0x24004270
 8014654:	2400426c 	.word	0x2400426c

08014658 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014658:	4b07      	ldr	r3, [pc, #28]	@ (8014678 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801465a:	b510      	push	{r4, lr}
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	2b01      	cmp	r3, #1
 8014660:	d108      	bne.n	8014674 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8014662:	4b06      	ldr	r3, [pc, #24]	@ (801467c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014664:	880c      	ldrh	r4, [r1, #0]
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	f9b0 2000 	ldrsh.w	r2, [r0]
 801466c:	3b01      	subs	r3, #1
 801466e:	1b1b      	subs	r3, r3, r4
 8014670:	8003      	strh	r3, [r0, #0]
 8014672:	800a      	strh	r2, [r1, #0]
 8014674:	bd10      	pop	{r4, pc}
 8014676:	bf00      	nop
 8014678:	24004270 	.word	0x24004270
 801467c:	2400426c 	.word	0x2400426c

08014680 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014680:	4b0a      	ldr	r3, [pc, #40]	@ (80146ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8014682:	b510      	push	{r4, lr}
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	2b01      	cmp	r3, #1
 8014688:	d10e      	bne.n	80146a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801468a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801468e:	8843      	ldrh	r3, [r0, #2]
 8014690:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014694:	18ca      	adds	r2, r1, r3
 8014696:	4b06      	ldr	r3, [pc, #24]	@ (80146b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8014698:	8044      	strh	r4, [r0, #2]
 801469a:	881b      	ldrh	r3, [r3, #0]
 801469c:	1a9b      	subs	r3, r3, r2
 801469e:	8003      	strh	r3, [r0, #0]
 80146a0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80146a4:	8081      	strh	r1, [r0, #4]
 80146a6:	80c3      	strh	r3, [r0, #6]
 80146a8:	bd10      	pop	{r4, pc}
 80146aa:	bf00      	nop
 80146ac:	24004270 	.word	0x24004270
 80146b0:	2400426c 	.word	0x2400426c

080146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80146b4:	4b08      	ldr	r3, [pc, #32]	@ (80146d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80146b6:	781b      	ldrb	r3, [r3, #0]
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d10c      	bne.n	80146d6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80146bc:	8803      	ldrh	r3, [r0, #0]
 80146be:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80146c2:	8842      	ldrh	r2, [r0, #2]
 80146c4:	8002      	strh	r2, [r0, #0]
 80146c6:	185a      	adds	r2, r3, r1
 80146c8:	4b04      	ldr	r3, [pc, #16]	@ (80146dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80146ca:	881b      	ldrh	r3, [r3, #0]
 80146cc:	1a9b      	subs	r3, r3, r2
 80146ce:	8043      	strh	r3, [r0, #2]
 80146d0:	88c3      	ldrh	r3, [r0, #6]
 80146d2:	80c1      	strh	r1, [r0, #6]
 80146d4:	8083      	strh	r3, [r0, #4]
 80146d6:	4770      	bx	lr
 80146d8:	24004270 	.word	0x24004270
 80146dc:	2400426c 	.word	0x2400426c

080146e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80146e0:	4b07      	ldr	r3, [pc, #28]	@ (8014700 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80146e2:	b510      	push	{r4, lr}
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d108      	bne.n	80146fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80146ea:	f9b1 3000 	ldrsh.w	r3, [r1]
 80146ee:	f9b0 4000 	ldrsh.w	r4, [r0]
 80146f2:	8003      	strh	r3, [r0, #0]
 80146f4:	8893      	ldrh	r3, [r2, #4]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	1b1b      	subs	r3, r3, r4
 80146fa:	800b      	strh	r3, [r1, #0]
 80146fc:	bd10      	pop	{r4, pc}
 80146fe:	bf00      	nop
 8014700:	24004270 	.word	0x24004270

08014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8014704:	4b0a      	ldr	r3, [pc, #40]	@ (8014730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8014706:	460a      	mov	r2, r1
 8014708:	b510      	push	{r4, lr}
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	2b01      	cmp	r3, #1
 801470e:	d10d      	bne.n	801472c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8014710:	8881      	ldrh	r1, [r0, #4]
 8014712:	8803      	ldrh	r3, [r0, #0]
 8014714:	440b      	add	r3, r1
 8014716:	4601      	mov	r1, r0
 8014718:	3b01      	subs	r3, #1
 801471a:	f821 3b02 	strh.w	r3, [r1], #2
 801471e:	f7ff ffdf 	bl	80146e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8014722:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014726:	88c2      	ldrh	r2, [r0, #6]
 8014728:	80c3      	strh	r3, [r0, #6]
 801472a:	8082      	strh	r2, [r0, #4]
 801472c:	bd10      	pop	{r4, pc}
 801472e:	bf00      	nop
 8014730:	24004270 	.word	0x24004270

08014734 <_ZN8touchgfx11Application13requestRedrawEv>:
 8014734:	4b06      	ldr	r3, [pc, #24]	@ (8014750 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8014736:	2100      	movs	r1, #0
 8014738:	f9b3 2000 	ldrsh.w	r2, [r3]
 801473c:	4b05      	ldr	r3, [pc, #20]	@ (8014754 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801473e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8014742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014746:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801474a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801474e:	4770      	bx	lr
 8014750:	2400426c 	.word	0x2400426c
 8014754:	2400426e 	.word	0x2400426e

08014758 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014758:	4b03      	ldr	r3, [pc, #12]	@ (8014768 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801475a:	6818      	ldr	r0, [r3, #0]
 801475c:	b110      	cbz	r0, 8014764 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801475e:	6803      	ldr	r3, [r0, #0]
 8014760:	699b      	ldr	r3, [r3, #24]
 8014762:	4718      	bx	r3
 8014764:	4770      	bx	lr
 8014766:	bf00      	nop
 8014768:	240042b4 	.word	0x240042b4

0801476c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801476c:	4770      	bx	lr
	...

08014770 <_ZN8touchgfx11Application4drawEv>:
 8014770:	4b09      	ldr	r3, [pc, #36]	@ (8014798 <_ZN8touchgfx11Application4drawEv+0x28>)
 8014772:	b507      	push	{r0, r1, r2, lr}
 8014774:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014778:	2100      	movs	r1, #0
 801477a:	4b08      	ldr	r3, [pc, #32]	@ (801479c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801477c:	9100      	str	r1, [sp, #0]
 801477e:	4669      	mov	r1, sp
 8014780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014784:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014788:	f8ad 3006 	strh.w	r3, [sp, #6]
 801478c:	6803      	ldr	r3, [r0, #0]
 801478e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014790:	4798      	blx	r3
 8014792:	b003      	add	sp, #12
 8014794:	f85d fb04 	ldr.w	pc, [sp], #4
 8014798:	2400426c 	.word	0x2400426c
 801479c:	2400426e 	.word	0x2400426e

080147a0 <_ZN8touchgfx11Application10invalidateEv>:
 80147a0:	4b09      	ldr	r3, [pc, #36]	@ (80147c8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80147a2:	b082      	sub	sp, #8
 80147a4:	2100      	movs	r1, #0
 80147a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80147aa:	4b08      	ldr	r3, [pc, #32]	@ (80147cc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80147ac:	f8ad 2004 	strh.w	r2, [sp, #4]
 80147b0:	aa02      	add	r2, sp, #8
 80147b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147b6:	9100      	str	r1, [sp, #0]
 80147b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80147bc:	6803      	ldr	r3, [r0, #0]
 80147be:	e912 0006 	ldmdb	r2, {r1, r2}
 80147c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147c4:	b002      	add	sp, #8
 80147c6:	4718      	bx	r3
 80147c8:	2400426c 	.word	0x2400426c
 80147cc:	2400426e 	.word	0x2400426e

080147d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80147d0:	4b03      	ldr	r3, [pc, #12]	@ (80147e0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80147d2:	6818      	ldr	r0, [r3, #0]
 80147d4:	b110      	cbz	r0, 80147dc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80147d6:	6803      	ldr	r3, [r0, #0]
 80147d8:	69db      	ldr	r3, [r3, #28]
 80147da:	4718      	bx	r3
 80147dc:	4770      	bx	lr
 80147de:	bf00      	nop
 80147e0:	240042b4 	.word	0x240042b4

080147e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80147e4:	4b03      	ldr	r3, [pc, #12]	@ (80147f4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80147e6:	6818      	ldr	r0, [r3, #0]
 80147e8:	b110      	cbz	r0, 80147f0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80147ea:	6803      	ldr	r3, [r0, #0]
 80147ec:	6a1b      	ldr	r3, [r3, #32]
 80147ee:	4718      	bx	r3
 80147f0:	4770      	bx	lr
 80147f2:	bf00      	nop
 80147f4:	240042b4 	.word	0x240042b4

080147f8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80147f8:	2300      	movs	r3, #0
 80147fa:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80147fe:	4770      	bx	lr

08014800 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8014800:	4b03      	ldr	r3, [pc, #12]	@ (8014810 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8014802:	6818      	ldr	r0, [r3, #0]
 8014804:	b110      	cbz	r0, 801480c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8014806:	6803      	ldr	r3, [r0, #0]
 8014808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801480a:	4718      	bx	r3
 801480c:	4770      	bx	lr
 801480e:	bf00      	nop
 8014810:	240042b4 	.word	0x240042b4

08014814 <_ZN8touchgfx11ApplicationD1Ev>:
 8014814:	4770      	bx	lr

08014816 <_ZN8touchgfx11ApplicationD0Ev>:
 8014816:	b510      	push	{r4, lr}
 8014818:	4604      	mov	r4, r0
 801481a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801481e:	f010 f9d8 	bl	8024bd2 <_ZdlPvj>
 8014822:	4620      	mov	r0, r4
 8014824:	bd10      	pop	{r4, pc}

08014826 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8014826:	b510      	push	{r4, lr}
 8014828:	f9b1 4000 	ldrsh.w	r4, [r1]
 801482c:	888a      	ldrh	r2, [r1, #4]
 801482e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014832:	4422      	add	r2, r4
 8014834:	b212      	sxth	r2, r2
 8014836:	4293      	cmp	r3, r2
 8014838:	da15      	bge.n	8014866 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801483a:	8882      	ldrh	r2, [r0, #4]
 801483c:	4413      	add	r3, r2
 801483e:	b21b      	sxth	r3, r3
 8014840:	429c      	cmp	r4, r3
 8014842:	da10      	bge.n	8014866 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014844:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014848:	88c9      	ldrh	r1, [r1, #6]
 801484a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801484e:	4419      	add	r1, r3
 8014850:	b209      	sxth	r1, r1
 8014852:	428a      	cmp	r2, r1
 8014854:	da07      	bge.n	8014866 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014856:	88c0      	ldrh	r0, [r0, #6]
 8014858:	4410      	add	r0, r2
 801485a:	b200      	sxth	r0, r0
 801485c:	4283      	cmp	r3, r0
 801485e:	bfac      	ite	ge
 8014860:	2000      	movge	r0, #0
 8014862:	2001      	movlt	r0, #1
 8014864:	bd10      	pop	{r4, pc}
 8014866:	2000      	movs	r0, #0
 8014868:	e7fc      	b.n	8014864 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801486a <_ZN8touchgfx4Rect10restrictToEss>:
 801486a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801486e:	2b00      	cmp	r3, #0
 8014870:	b510      	push	{r4, lr}
 8014872:	da04      	bge.n	801487e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8014874:	8884      	ldrh	r4, [r0, #4]
 8014876:	4423      	add	r3, r4
 8014878:	8083      	strh	r3, [r0, #4]
 801487a:	2300      	movs	r3, #0
 801487c:	8003      	strh	r3, [r0, #0]
 801487e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014882:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014886:	1b09      	subs	r1, r1, r4
 8014888:	428b      	cmp	r3, r1
 801488a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801488e:	bfc8      	it	gt
 8014890:	8081      	strhgt	r1, [r0, #4]
 8014892:	2b00      	cmp	r3, #0
 8014894:	da04      	bge.n	80148a0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8014896:	88c1      	ldrh	r1, [r0, #6]
 8014898:	440b      	add	r3, r1
 801489a:	80c3      	strh	r3, [r0, #6]
 801489c:	2300      	movs	r3, #0
 801489e:	8043      	strh	r3, [r0, #2]
 80148a0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80148a4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80148a8:	1a52      	subs	r2, r2, r1
 80148aa:	4293      	cmp	r3, r2
 80148ac:	bfc8      	it	gt
 80148ae:	80c2      	strhgt	r2, [r0, #6]
 80148b0:	bd10      	pop	{r4, pc}
	...

080148b4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80148b4:	4b10      	ldr	r3, [pc, #64]	@ (80148f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80148b6:	b510      	push	{r4, lr}
 80148b8:	460c      	mov	r4, r1
 80148ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80148be:	4b0f      	ldr	r3, [pc, #60]	@ (80148fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80148c0:	4620      	mov	r0, r4
 80148c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80148c6:	f7ff ffd0 	bl	801486a <_ZN8touchgfx4Rect10restrictToEss>
 80148ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014900 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80148cc:	6818      	ldr	r0, [r3, #0]
 80148ce:	b190      	cbz	r0, 80148f6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80148d0:	6803      	ldr	r3, [r0, #0]
 80148d2:	4621      	mov	r1, r4
 80148d4:	689b      	ldr	r3, [r3, #8]
 80148d6:	4798      	blx	r3
 80148d8:	4b0a      	ldr	r3, [pc, #40]	@ (8014904 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80148da:	6818      	ldr	r0, [r3, #0]
 80148dc:	b118      	cbz	r0, 80148e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80148de:	6803      	ldr	r3, [r0, #0]
 80148e0:	4621      	mov	r1, r4
 80148e2:	689b      	ldr	r3, [r3, #8]
 80148e4:	4798      	blx	r3
 80148e6:	4b08      	ldr	r3, [pc, #32]	@ (8014908 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80148e8:	4621      	mov	r1, r4
 80148ea:	6818      	ldr	r0, [r3, #0]
 80148ec:	6803      	ldr	r3, [r0, #0]
 80148ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148f2:	69db      	ldr	r3, [r3, #28]
 80148f4:	4718      	bx	r3
 80148f6:	bd10      	pop	{r4, pc}
 80148f8:	2400426e 	.word	0x2400426e
 80148fc:	2400426c 	.word	0x2400426c
 8014900:	240042b4 	.word	0x240042b4
 8014904:	240042b0 	.word	0x240042b0
 8014908:	24004278 	.word	0x24004278

0801490c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801490e:	4606      	mov	r6, r0
 8014910:	4608      	mov	r0, r1
 8014912:	460f      	mov	r7, r1
 8014914:	f7fe f81f 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014918:	b9e8      	cbnz	r0, 8014956 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801491a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801491e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8014922:	42a5      	cmp	r5, r4
 8014924:	db17      	blt.n	8014956 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014926:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801492a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801492e:	429a      	cmp	r2, r3
 8014930:	db11      	blt.n	8014956 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014932:	88b9      	ldrh	r1, [r7, #4]
 8014934:	440d      	add	r5, r1
 8014936:	88b1      	ldrh	r1, [r6, #4]
 8014938:	440c      	add	r4, r1
 801493a:	b22d      	sxth	r5, r5
 801493c:	b224      	sxth	r4, r4
 801493e:	42a5      	cmp	r5, r4
 8014940:	dc09      	bgt.n	8014956 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014942:	88f8      	ldrh	r0, [r7, #6]
 8014944:	4410      	add	r0, r2
 8014946:	88f2      	ldrh	r2, [r6, #6]
 8014948:	4413      	add	r3, r2
 801494a:	b200      	sxth	r0, r0
 801494c:	b21b      	sxth	r3, r3
 801494e:	4298      	cmp	r0, r3
 8014950:	bfcc      	ite	gt
 8014952:	2000      	movgt	r0, #0
 8014954:	2001      	movle	r0, #1
 8014956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014958 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801495a:	4604      	mov	r4, r0
 801495c:	4608      	mov	r0, r1
 801495e:	460d      	mov	r5, r1
 8014960:	f7fd fff9 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014964:	b978      	cbnz	r0, 8014986 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014966:	4620      	mov	r0, r4
 8014968:	f7fd fff5 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 801496c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014970:	b150      	cbz	r0, 8014988 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8014972:	8026      	strh	r6, [r4, #0]
 8014974:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014978:	8063      	strh	r3, [r4, #2]
 801497a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801497e:	80a3      	strh	r3, [r4, #4]
 8014980:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014984:	80e3      	strh	r3, [r4, #6]
 8014986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014988:	f9b4 1000 	ldrsh.w	r1, [r4]
 801498c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014990:	42b1      	cmp	r1, r6
 8014992:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8014996:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801499a:	460f      	mov	r7, r1
 801499c:	88ed      	ldrh	r5, [r5, #6]
 801499e:	bfa8      	it	ge
 80149a0:	4637      	movge	r7, r6
 80149a2:	4293      	cmp	r3, r2
 80149a4:	4618      	mov	r0, r3
 80149a6:	4466      	add	r6, ip
 80149a8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80149ac:	bfa8      	it	ge
 80149ae:	4610      	movge	r0, r2
 80149b0:	442a      	add	r2, r5
 80149b2:	88e5      	ldrh	r5, [r4, #6]
 80149b4:	4461      	add	r1, ip
 80149b6:	b236      	sxth	r6, r6
 80149b8:	8027      	strh	r7, [r4, #0]
 80149ba:	442b      	add	r3, r5
 80149bc:	b209      	sxth	r1, r1
 80149be:	b212      	sxth	r2, r2
 80149c0:	8060      	strh	r0, [r4, #2]
 80149c2:	b21b      	sxth	r3, r3
 80149c4:	428e      	cmp	r6, r1
 80149c6:	bfac      	ite	ge
 80149c8:	ebc7 0106 	rsbge	r1, r7, r6
 80149cc:	ebc7 0101 	rsblt	r1, r7, r1
 80149d0:	429a      	cmp	r2, r3
 80149d2:	bfac      	ite	ge
 80149d4:	ebc0 0202 	rsbge	r2, r0, r2
 80149d8:	ebc0 0203 	rsblt	r2, r0, r3
 80149dc:	80a1      	strh	r1, [r4, #4]
 80149de:	80e2      	strh	r2, [r4, #6]
 80149e0:	e7d1      	b.n	8014986 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080149e4 <_ZN8touchgfx11Application11getInstanceEv>:
 80149e4:	4b01      	ldr	r3, [pc, #4]	@ (80149ec <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80149e6:	6818      	ldr	r0, [r3, #0]
 80149e8:	4770      	bx	lr
 80149ea:	bf00      	nop
 80149ec:	240042c4 	.word	0x240042c4

080149f0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80149f0:	2300      	movs	r3, #0
 80149f2:	b510      	push	{r4, lr}
 80149f4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80149f8:	4604      	mov	r4, r0
 80149fa:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80149fe:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014a02:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014a06:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d90e      	bls.n	8014a2c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8014a0e:	18e2      	adds	r2, r4, r3
 8014a10:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8014a14:	b122      	cbz	r2, 8014a20 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8014a16:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8014a1a:	6803      	ldr	r3, [r0, #0]
 8014a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a1e:	4798      	blx	r3
 8014a20:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014a24:	3301      	adds	r3, #1
 8014a26:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014a2a:	e7ea      	b.n	8014a02 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8014a2c:	bd10      	pop	{r4, pc}

08014a2e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8014a2e:	2300      	movs	r3, #0
 8014a30:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8014a34:	30a4      	adds	r0, #164	@ 0xa4
 8014a36:	f820 3c24 	strh.w	r3, [r0, #-36]
 8014a3a:	f802 3b01 	strb.w	r3, [r2], #1
 8014a3e:	4282      	cmp	r2, r0
 8014a40:	d1fb      	bne.n	8014a3a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8014a42:	4770      	bx	lr

08014a44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8014a44:	b570      	push	{r4, r5, r6, lr}
 8014a46:	4c0b      	ldr	r4, [pc, #44]	@ (8014a74 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8014a48:	4605      	mov	r5, r0
 8014a4a:	460e      	mov	r6, r1
 8014a4c:	6820      	ldr	r0, [r4, #0]
 8014a4e:	b110      	cbz	r0, 8014a56 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8014a50:	6803      	ldr	r3, [r0, #0]
 8014a52:	695b      	ldr	r3, [r3, #20]
 8014a54:	4798      	blx	r3
 8014a56:	1d28      	adds	r0, r5, #4
 8014a58:	f7ff ffe9 	bl	8014a2e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8014a5c:	6026      	str	r6, [r4, #0]
 8014a5e:	6833      	ldr	r3, [r6, #0]
 8014a60:	4630      	mov	r0, r6
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	4798      	blx	r3
 8014a66:	682b      	ldr	r3, [r5, #0]
 8014a68:	4628      	mov	r0, r5
 8014a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a70:	4718      	bx	r3
 8014a72:	bf00      	nop
 8014a74:	240042b4 	.word	0x240042b4

08014a78 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8014a78:	2300      	movs	r3, #0
 8014a7a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8014a7e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8014a82:	461a      	mov	r2, r3
 8014a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a86:	461c      	mov	r4, r3
 8014a88:	461d      	mov	r5, r3
 8014a8a:	459c      	cmp	ip, r3
 8014a8c:	dd1a      	ble.n	8014ac4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8014a8e:	18c6      	adds	r6, r0, r3
 8014a90:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8014a94:	b16e      	cbz	r6, 8014ab2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d008      	beq.n	8014aac <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8014a9a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8014a9e:	fa1f fe82 	uxth.w	lr, r2
 8014aa2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8014aa6:	1887      	adds	r7, r0, r2
 8014aa8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8014aac:	3201      	adds	r2, #1
 8014aae:	3301      	adds	r3, #1
 8014ab0:	e7eb      	b.n	8014a8a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8014ab2:	4299      	cmp	r1, r3
 8014ab4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8014ab8:	bfa8      	it	ge
 8014aba:	3501      	addge	r5, #1
 8014abc:	429e      	cmp	r6, r3
 8014abe:	bfc8      	it	gt
 8014ac0:	3401      	addgt	r4, #1
 8014ac2:	e7f4      	b.n	8014aae <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8014ac4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8014ac8:	1b49      	subs	r1, r1, r5
 8014aca:	1b1b      	subs	r3, r3, r4
 8014acc:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8014ad0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014ad4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014ad8:	4293      	cmp	r3, r2
 8014ada:	dd03      	ble.n	8014ae4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8014adc:	3b01      	subs	r3, #1
 8014ade:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8014ae2:	e7f7      	b.n	8014ad4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8014ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08014ae8 <_ZN8touchgfx11Application15handleTickEventEv>:
 8014ae8:	b570      	push	{r4, r5, r6, lr}
 8014aea:	4d16      	ldr	r5, [pc, #88]	@ (8014b44 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8014aec:	4604      	mov	r4, r0
 8014aee:	6828      	ldr	r0, [r5, #0]
 8014af0:	b140      	cbz	r0, 8014b04 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014af2:	7a03      	ldrb	r3, [r0, #8]
 8014af4:	b933      	cbnz	r3, 8014b04 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014af6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014afa:	6803      	ldr	r3, [r0, #0]
 8014afc:	689b      	ldr	r3, [r3, #8]
 8014afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b02:	4718      	bx	r3
 8014b04:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8014b08:	4e0f      	ldr	r6, [pc, #60]	@ (8014b48 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8014b0a:	b973      	cbnz	r3, 8014b2a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014b0c:	b168      	cbz	r0, 8014b2a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014b0e:	7a03      	ldrb	r3, [r0, #8]
 8014b10:	b15b      	cbz	r3, 8014b2a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014b12:	6830      	ldr	r0, [r6, #0]
 8014b14:	b110      	cbz	r0, 8014b1c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8014b16:	6803      	ldr	r3, [r0, #0]
 8014b18:	691b      	ldr	r3, [r3, #16]
 8014b1a:	4798      	blx	r3
 8014b1c:	6828      	ldr	r0, [r5, #0]
 8014b1e:	6803      	ldr	r3, [r0, #0]
 8014b20:	68db      	ldr	r3, [r3, #12]
 8014b22:	4798      	blx	r3
 8014b24:	2301      	movs	r3, #1
 8014b26:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014b2a:	3404      	adds	r4, #4
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	f7ff ff5f 	bl	80149f0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8014b32:	4620      	mov	r0, r4
 8014b34:	f7ff ffa0 	bl	8014a78 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8014b38:	6830      	ldr	r0, [r6, #0]
 8014b3a:	b110      	cbz	r0, 8014b42 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8014b3c:	6803      	ldr	r3, [r0, #0]
 8014b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b40:	e7dd      	b.n	8014afe <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8014b42:	bd70      	pop	{r4, r5, r6, pc}
 8014b44:	240042b8 	.word	0x240042b8
 8014b48:	240042b4 	.word	0x240042b4

08014b4c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8014b52:	2200      	movs	r2, #0
 8014b54:	801a      	strh	r2, [r3, #0]
 8014b56:	3308      	adds	r3, #8
 8014b58:	f823 2c06 	strh.w	r2, [r3, #-6]
 8014b5c:	f823 2c04 	strh.w	r2, [r3, #-4]
 8014b60:	f823 2c02 	strh.w	r2, [r3, #-2]
 8014b64:	428b      	cmp	r3, r1
 8014b66:	d1f5      	bne.n	8014b54 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8014b68:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8014b6c:	4770      	bx	lr
	...

08014b70 <_ZN8touchgfx11ApplicationC1Ev>:
 8014b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b72:	4b1d      	ldr	r3, [pc, #116]	@ (8014be8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8014b74:	4606      	mov	r6, r0
 8014b76:	4604      	mov	r4, r0
 8014b78:	2500      	movs	r5, #0
 8014b7a:	f846 3b04 	str.w	r3, [r6], #4
 8014b7e:	22a8      	movs	r2, #168	@ 0xa8
 8014b80:	2100      	movs	r1, #0
 8014b82:	4630      	mov	r0, r6
 8014b84:	f011 f940 	bl	8025e08 <memset>
 8014b88:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8014b8c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014b90:	4f16      	ldr	r7, [pc, #88]	@ (8014bec <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8014b92:	f7ff ffdb 	bl	8014b4c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014b96:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8014b9a:	f7ff ffd7 	bl	8014b4c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014b9e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8014ba2:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8014ba6:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8014baa:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8014bae:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8014bb2:	490f      	ldr	r1, [pc, #60]	@ (8014bf0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8014bb4:	480f      	ldr	r0, [pc, #60]	@ (8014bf4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8014bb6:	f00f fee3 	bl	8024980 <CRC_Lock>
 8014bba:	4b0f      	ldr	r3, [pc, #60]	@ (8014bf8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8014bbc:	b158      	cbz	r0, 8014bd6 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8014bbe:	801d      	strh	r5, [r3, #0]
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8014bfc <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	6013      	str	r3, [r2, #0]
 8014bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8014c00 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8014bca:	603b      	str	r3, [r7, #0]
 8014bcc:	6013      	str	r3, [r2, #0]
 8014bce:	f7ff ff2e 	bl	8014a2e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8014bd2:	4620      	mov	r0, r4
 8014bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014bda:	2002      	movs	r0, #2
 8014bdc:	801a      	strh	r2, [r3, #0]
 8014bde:	6038      	str	r0, [r7, #0]
 8014be0:	f001 fa58 	bl	8016094 <_ZN8touchgfx6Screen4drawEv>
 8014be4:	e7ec      	b.n	8014bc0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8014be6:	bf00      	nop
 8014be8:	0802a450 	.word	0x0802a450
 8014bec:	240042b4 	.word	0x240042b4
 8014bf0:	b5e8b5cd 	.word	0xb5e8b5cd
 8014bf4:	f407a5c2 	.word	0xf407a5c2
 8014bf8:	240000dc 	.word	0x240000dc
 8014bfc:	240042c4 	.word	0x240042c4
 8014c00:	240042b8 	.word	0x240042b8

08014c04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8014c04:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8014c08:	3b01      	subs	r3, #1
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	428b      	cmp	r3, r1
 8014c0e:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8014c12:	b510      	push	{r4, lr}
 8014c14:	d908      	bls.n	8014c28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8014c16:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8014c1a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8014c24:	685a      	ldr	r2, [r3, #4]
 8014c26:	6062      	str	r2, [r4, #4]
 8014c28:	bd10      	pop	{r4, pc}
	...

08014c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8014c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c30:	b08f      	sub	sp, #60	@ 0x3c
 8014c32:	4b8f      	ldr	r3, [pc, #572]	@ (8014e70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8014c34:	4683      	mov	fp, r0
 8014c36:	ac0a      	add	r4, sp, #40	@ 0x28
 8014c38:	e884 0006 	stmia.w	r4, {r1, r2}
 8014c3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014c40:	4620      	mov	r0, r4
 8014c42:	4b8c      	ldr	r3, [pc, #560]	@ (8014e74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8014c44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014c48:	f7ff fe0f 	bl	801486a <_ZN8touchgfx4Rect10restrictToEss>
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	f7fd fe82 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014c52:	2800      	cmp	r0, #0
 8014c54:	d16a      	bne.n	8014d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014c56:	9403      	str	r4, [sp, #12]
 8014c58:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014c5c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014c60:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8014c64:	9301      	str	r3, [sp, #4]
 8014c66:	35a4      	adds	r5, #164	@ 0xa4
 8014c68:	b15c      	cbz	r4, 8014c82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8014c6a:	4629      	mov	r1, r5
 8014c6c:	9803      	ldr	r0, [sp, #12]
 8014c6e:	f7ff fe4d 	bl	801490c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014c72:	3c01      	subs	r4, #1
 8014c74:	b118      	cbz	r0, 8014c7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8014c76:	b2a1      	uxth	r1, r4
 8014c78:	9801      	ldr	r0, [sp, #4]
 8014c7a:	f7ff ffc3 	bl	8014c04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014c7e:	3d08      	subs	r5, #8
 8014c80:	e7f2      	b.n	8014c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8014c82:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8014c86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014c8a:	f8cd a010 	str.w	sl, [sp, #16]
 8014c8e:	9302      	str	r3, [sp, #8]
 8014c90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014c94:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8014c98:	9306      	str	r3, [sp, #24]
 8014c9a:	445c      	add	r4, fp
 8014c9c:	2500      	movs	r5, #0
 8014c9e:	4626      	mov	r6, r4
 8014ca0:	f8cd a014 	str.w	sl, [sp, #20]
 8014ca4:	462f      	mov	r7, r5
 8014ca6:	9b05      	ldr	r3, [sp, #20]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d073      	beq.n	8014d94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8014cac:	9903      	ldr	r1, [sp, #12]
 8014cae:	4630      	mov	r0, r6
 8014cb0:	f7ff fdb9 	bl	8014826 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014cb4:	b350      	cbz	r0, 8014d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8014cb6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8014cba:	f9b6 c000 	ldrsh.w	ip, [r6]
 8014cbe:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8014cc2:	45e6      	cmp	lr, ip
 8014cc4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014cc8:	db33      	blt.n	8014d32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014cca:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014cce:	88b3      	ldrh	r3, [r6, #4]
 8014cd0:	4472      	add	r2, lr
 8014cd2:	4463      	add	r3, ip
 8014cd4:	b212      	sxth	r2, r2
 8014cd6:	b21b      	sxth	r3, r3
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	dc2a      	bgt.n	8014d32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014cdc:	fa1f f289 	uxth.w	r2, r9
 8014ce0:	88f3      	ldrh	r3, [r6, #6]
 8014ce2:	45c8      	cmp	r8, r9
 8014ce4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8014ce8:	4413      	add	r3, r2
 8014cea:	fa1f fc88 	uxth.w	ip, r8
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	fa0f fe83 	sxth.w	lr, r3
 8014cf4:	db0f      	blt.n	8014d16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014cf6:	eba3 030c 	sub.w	r3, r3, ip
 8014cfa:	1ac9      	subs	r1, r1, r3
 8014cfc:	b209      	sxth	r1, r1
 8014cfe:	2900      	cmp	r1, #0
 8014d00:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014d04:	dd12      	ble.n	8014d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014d06:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8014d0a:	4605      	mov	r5, r0
 8014d0c:	9b05      	ldr	r3, [sp, #20]
 8014d0e:	3e08      	subs	r6, #8
 8014d10:	3b01      	subs	r3, #1
 8014d12:	9305      	str	r3, [sp, #20]
 8014d14:	e7c7      	b.n	8014ca6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8014d16:	4461      	add	r1, ip
 8014d18:	b209      	sxth	r1, r1
 8014d1a:	4571      	cmp	r1, lr
 8014d1c:	dc38      	bgt.n	8014d90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014d1e:	eba2 020c 	sub.w	r2, r2, ip
 8014d22:	b212      	sxth	r2, r2
 8014d24:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8014d28:	2a00      	cmp	r2, #0
 8014d2a:	dcee      	bgt.n	8014d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014d2c:	b00f      	add	sp, #60	@ 0x3c
 8014d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d32:	45c8      	cmp	r8, r9
 8014d34:	db2c      	blt.n	8014d90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014d36:	88f3      	ldrh	r3, [r6, #6]
 8014d38:	4499      	add	r9, r3
 8014d3a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8014d3e:	4498      	add	r8, r3
 8014d40:	fa0f f989 	sxth.w	r9, r9
 8014d44:	fa0f f888 	sxth.w	r8, r8
 8014d48:	45c1      	cmp	r9, r8
 8014d4a:	db21      	blt.n	8014d90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014d4c:	fa1f f28c 	uxth.w	r2, ip
 8014d50:	88b3      	ldrh	r3, [r6, #4]
 8014d52:	45e6      	cmp	lr, ip
 8014d54:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8014d58:	4413      	add	r3, r2
 8014d5a:	fa1f f88e 	uxth.w	r8, lr
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	fa0f f983 	sxth.w	r9, r3
 8014d64:	db0a      	blt.n	8014d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8014d66:	eba3 0308 	sub.w	r3, r3, r8
 8014d6a:	1ac9      	subs	r1, r1, r3
 8014d6c:	b209      	sxth	r1, r1
 8014d6e:	2900      	cmp	r1, #0
 8014d70:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014d74:	ddda      	ble.n	8014d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014d76:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014d7a:	e7c6      	b.n	8014d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014d7c:	4441      	add	r1, r8
 8014d7e:	b209      	sxth	r1, r1
 8014d80:	4549      	cmp	r1, r9
 8014d82:	dc05      	bgt.n	8014d90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014d84:	eba2 0208 	sub.w	r2, r2, r8
 8014d88:	b212      	sxth	r2, r2
 8014d8a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8014d8e:	e7cb      	b.n	8014d28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8014d90:	4607      	mov	r7, r0
 8014d92:	e7bb      	b.n	8014d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8014d94:	2d00      	cmp	r5, #0
 8014d96:	d181      	bne.n	8014c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8014d98:	2f00      	cmp	r7, #0
 8014d9a:	f000 81dd 	beq.w	8015158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8014d9e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8014da2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8014da6:	b2b3      	uxth	r3, r6
 8014da8:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8014dac:	9305      	str	r3, [sp, #20]
 8014dae:	9a05      	ldr	r2, [sp, #20]
 8014db0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014db4:	4413      	add	r3, r2
 8014db6:	b2ba      	uxth	r2, r7
 8014db8:	4492      	add	sl, r2
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	fa1f fa8a 	uxth.w	sl, sl
 8014dc0:	fa0f f883 	sxth.w	r8, r3
 8014dc4:	fa0f f98a 	sxth.w	r9, sl
 8014dc8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8014dcc:	9b04      	ldr	r3, [sp, #16]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d052      	beq.n	8014e78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8014dd2:	9903      	ldr	r1, [sp, #12]
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	f7ff fd26 	bl	8014826 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014dda:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014dde:	b1c0      	cbz	r0, 8014e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014de0:	f9b4 e000 	ldrsh.w	lr, [r4]
 8014de4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014de8:	4576      	cmp	r6, lr
 8014dea:	dc22      	bgt.n	8014e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014dec:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014df0:	44f4      	add	ip, lr
 8014df2:	fa0f fc8c 	sxth.w	ip, ip
 8014df6:	45e0      	cmp	r8, ip
 8014df8:	db1b      	blt.n	8014e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014dfa:	428f      	cmp	r7, r1
 8014dfc:	fa1f fc81 	uxth.w	ip, r1
 8014e00:	88e1      	ldrh	r1, [r4, #6]
 8014e02:	dc0d      	bgt.n	8014e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014e04:	ebaa 0c0c 	sub.w	ip, sl, ip
 8014e08:	f8a4 9002 	strh.w	r9, [r4, #2]
 8014e0c:	eba1 010c 	sub.w	r1, r1, ip
 8014e10:	80e1      	strh	r1, [r4, #6]
 8014e12:	4628      	mov	r0, r5
 8014e14:	9904      	ldr	r1, [sp, #16]
 8014e16:	3c08      	subs	r4, #8
 8014e18:	4605      	mov	r5, r0
 8014e1a:	3901      	subs	r1, #1
 8014e1c:	9104      	str	r1, [sp, #16]
 8014e1e:	e7d3      	b.n	8014dc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8014e20:	4461      	add	r1, ip
 8014e22:	b209      	sxth	r1, r1
 8014e24:	4549      	cmp	r1, r9
 8014e26:	dcf5      	bgt.n	8014e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014e28:	eba2 0c0c 	sub.w	ip, r2, ip
 8014e2c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014e30:	e7ef      	b.n	8014e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014e32:	428f      	cmp	r7, r1
 8014e34:	dcee      	bgt.n	8014e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014e36:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8014e3a:	4461      	add	r1, ip
 8014e3c:	b209      	sxth	r1, r1
 8014e3e:	4589      	cmp	r9, r1
 8014e40:	dbe8      	blt.n	8014e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014e42:	4576      	cmp	r6, lr
 8014e44:	fa1f fc8e 	uxth.w	ip, lr
 8014e48:	88a1      	ldrh	r1, [r4, #4]
 8014e4a:	dc07      	bgt.n	8014e5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8014e4c:	eba3 0c0c 	sub.w	ip, r3, ip
 8014e50:	f8a4 8000 	strh.w	r8, [r4]
 8014e54:	eba1 010c 	sub.w	r1, r1, ip
 8014e58:	80a1      	strh	r1, [r4, #4]
 8014e5a:	e7da      	b.n	8014e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014e5c:	4461      	add	r1, ip
 8014e5e:	b209      	sxth	r1, r1
 8014e60:	4588      	cmp	r8, r1
 8014e62:	dbd7      	blt.n	8014e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014e64:	9905      	ldr	r1, [sp, #20]
 8014e66:	eba1 0c0c 	sub.w	ip, r1, ip
 8014e6a:	f8a4 c004 	strh.w	ip, [r4, #4]
 8014e6e:	e7d0      	b.n	8014e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014e70:	2400426e 	.word	0x2400426e
 8014e74:	2400426c 	.word	0x2400426c
 8014e78:	2d00      	cmp	r5, #0
 8014e7a:	f000 816d 	beq.w	8015158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8014e7e:	9b06      	ldr	r3, [sp, #24]
 8014e80:	445b      	add	r3, fp
 8014e82:	461c      	mov	r4, r3
 8014e84:	9b02      	ldr	r3, [sp, #8]
 8014e86:	3301      	adds	r3, #1
 8014e88:	f000 8166 	beq.w	8015158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8014e8c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8014e90:	9803      	ldr	r0, [sp, #12]
 8014e92:	4629      	mov	r1, r5
 8014e94:	f7ff fd3a 	bl	801490c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014e98:	b120      	cbz	r0, 8014ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8014e9a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014e9e:	9801      	ldr	r0, [sp, #4]
 8014ea0:	f7ff feb0 	bl	8014c04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014ea4:	9903      	ldr	r1, [sp, #12]
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f7ff fcbd 	bl	8014826 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014eac:	2800      	cmp	r0, #0
 8014eae:	f000 809c 	beq.w	8014fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8014eb2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8014eb6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014eba:	fa1f f189 	uxth.w	r1, r9
 8014ebe:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ec4:	eb01 0c03 	add.w	ip, r1, r3
 8014ec8:	b283      	uxth	r3, r0
 8014eca:	4548      	cmp	r0, r9
 8014ecc:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8014ed0:	fa1f fa8c 	uxth.w	sl, ip
 8014ed4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8014ed8:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8014edc:	eb03 050c 	add.w	r5, r3, ip
 8014ee0:	b2ad      	uxth	r5, r5
 8014ee2:	9505      	str	r5, [sp, #20]
 8014ee4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8014ee8:	9504      	str	r5, [sp, #16]
 8014eea:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8014eee:	f340 8099 	ble.w	8015024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8014ef2:	1a5b      	subs	r3, r3, r1
 8014ef4:	4596      	cmp	lr, r2
 8014ef6:	fa0f f08a 	sxth.w	r0, sl
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	b21e      	sxth	r6, r3
 8014efe:	dd2e      	ble.n	8014f5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8014f00:	9f02      	ldr	r7, [sp, #8]
 8014f02:	fa1f fe8e 	uxth.w	lr, lr
 8014f06:	b292      	uxth	r2, r2
 8014f08:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8014f0c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014f10:	9f04      	ldr	r7, [sp, #16]
 8014f12:	ebae 0102 	sub.w	r1, lr, r2
 8014f16:	44a6      	add	lr, r4
 8014f18:	1a3f      	subs	r7, r7, r0
 8014f1a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8014f1e:	b289      	uxth	r1, r1
 8014f20:	4402      	add	r2, r0
 8014f22:	fa0f fe8e 	sxth.w	lr, lr
 8014f26:	b20d      	sxth	r5, r1
 8014f28:	b212      	sxth	r2, r2
 8014f2a:	436f      	muls	r7, r5
 8014f2c:	ebae 0202 	sub.w	r2, lr, r2
 8014f30:	4372      	muls	r2, r6
 8014f32:	4297      	cmp	r7, r2
 8014f34:	db09      	blt.n	8014f4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8014f36:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8014f3a:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8014f3e:	449c      	add	ip, r3
 8014f40:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014f44:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014f48:	e686      	b.n	8014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014f4a:	4421      	add	r1, r4
 8014f4c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8014f50:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8014f54:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014f58:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014f5c:	e67c      	b.n	8014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014f5e:	9f04      	ldr	r7, [sp, #16]
 8014f60:	42b8      	cmp	r0, r7
 8014f62:	da27      	bge.n	8014fb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8014f64:	9902      	ldr	r1, [sp, #8]
 8014f66:	1a3f      	subs	r7, r7, r0
 8014f68:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8014f6c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8014f70:	eb05 010e 	add.w	r1, r5, lr
 8014f74:	fa1f f881 	uxth.w	r8, r1
 8014f78:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8014f7c:	4411      	add	r1, r2
 8014f7e:	fa0f f988 	sxth.w	r9, r8
 8014f82:	eba2 020e 	sub.w	r2, r2, lr
 8014f86:	eba1 0108 	sub.w	r1, r1, r8
 8014f8a:	4372      	muls	r2, r6
 8014f8c:	b289      	uxth	r1, r1
 8014f8e:	fa0f f881 	sxth.w	r8, r1
 8014f92:	fb08 f707 	mul.w	r7, r8, r7
 8014f96:	42ba      	cmp	r2, r7
 8014f98:	dc06      	bgt.n	8014fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8014f9a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8014f9e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8014fa2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8014fa6:	e7ca      	b.n	8014f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8014fa8:	4429      	add	r1, r5
 8014faa:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8014fae:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014fb2:	e651      	b.n	8014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014fb4:	9805      	ldr	r0, [sp, #20]
 8014fb6:	2d06      	cmp	r5, #6
 8014fb8:	ebaa 0000 	sub.w	r0, sl, r0
 8014fbc:	b280      	uxth	r0, r0
 8014fbe:	fa0f fe80 	sxth.w	lr, r0
 8014fc2:	d817      	bhi.n	8014ff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8014fc4:	9b04      	ldr	r3, [sp, #16]
 8014fc6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8014fca:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014fce:	1c6b      	adds	r3, r5, #1
 8014fd0:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8014fd4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014fd8:	9b01      	ldr	r3, [sp, #4]
 8014fda:	9801      	ldr	r0, [sp, #4]
 8014fdc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014fe0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014fe4:	805a      	strh	r2, [r3, #2]
 8014fe6:	809e      	strh	r6, [r3, #4]
 8014fe8:	80d9      	strh	r1, [r3, #6]
 8014fea:	9b02      	ldr	r3, [sp, #8]
 8014fec:	3c08      	subs	r4, #8
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	9302      	str	r3, [sp, #8]
 8014ff2:	e747      	b.n	8014e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8014ff4:	9a02      	ldr	r2, [sp, #8]
 8014ff6:	45b6      	cmp	lr, r6
 8014ff8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014ffc:	db0d      	blt.n	801501a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8014ffe:	449c      	add	ip, r3
 8015000:	445a      	add	r2, fp
 8015002:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8015006:	fa1f fc8c 	uxth.w	ip, ip
 801500a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801500e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8015012:	448c      	add	ip, r1
 8015014:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8015018:	e61e      	b.n	8014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801501a:	445a      	add	r2, fp
 801501c:	4484      	add	ip, r0
 801501e:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8015022:	e78f      	b.n	8014f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8015024:	fa1f f18e 	uxth.w	r1, lr
 8015028:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801502c:	b293      	uxth	r3, r2
 801502e:	4596      	cmp	lr, r2
 8015030:	eb01 0806 	add.w	r8, r1, r6
 8015034:	9306      	str	r3, [sp, #24]
 8015036:	fa1f f888 	uxth.w	r8, r8
 801503a:	9f06      	ldr	r7, [sp, #24]
 801503c:	fa0f f388 	sxth.w	r3, r8
 8015040:	9307      	str	r3, [sp, #28]
 8015042:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8015046:	443b      	add	r3, r7
 8015048:	b29b      	uxth	r3, r3
 801504a:	9308      	str	r3, [sp, #32]
 801504c:	da24      	bge.n	8015098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801504e:	9905      	ldr	r1, [sp, #20]
 8015050:	eba3 0308 	sub.w	r3, r3, r8
 8015054:	eba2 020e 	sub.w	r2, r2, lr
 8015058:	eba9 0000 	sub.w	r0, r9, r0
 801505c:	ebaa 0401 	sub.w	r4, sl, r1
 8015060:	b29b      	uxth	r3, r3
 8015062:	b2a4      	uxth	r4, r4
 8015064:	b219      	sxth	r1, r3
 8015066:	b225      	sxth	r5, r4
 8015068:	4348      	muls	r0, r1
 801506a:	436a      	muls	r2, r5
 801506c:	4282      	cmp	r2, r0
 801506e:	9a02      	ldr	r2, [sp, #8]
 8015070:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015074:	445a      	add	r2, fp
 8015076:	dc06      	bgt.n	8015086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8015078:	9b07      	ldr	r3, [sp, #28]
 801507a:	44a4      	add	ip, r4
 801507c:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8015080:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8015084:	e75e      	b.n	8014f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8015086:	9904      	ldr	r1, [sp, #16]
 8015088:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801508c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8015090:	4433      	add	r3, r6
 8015092:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8015096:	e5df      	b.n	8014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015098:	9f06      	ldr	r7, [sp, #24]
 801509a:	9b04      	ldr	r3, [sp, #16]
 801509c:	1bc9      	subs	r1, r1, r7
 801509e:	fa0f f78a 	sxth.w	r7, sl
 80150a2:	b289      	uxth	r1, r1
 80150a4:	429f      	cmp	r7, r3
 80150a6:	fa0f fe81 	sxth.w	lr, r1
 80150aa:	dd23      	ble.n	80150f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80150ac:	9a05      	ldr	r2, [sp, #20]
 80150ae:	eba9 0000 	sub.w	r0, r9, r0
 80150b2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80150b6:	ebaa 0202 	sub.w	r2, sl, r2
 80150ba:	9d07      	ldr	r5, [sp, #28]
 80150bc:	fb0e f000 	mul.w	r0, lr, r0
 80150c0:	b292      	uxth	r2, r2
 80150c2:	eba5 0a03 	sub.w	sl, r5, r3
 80150c6:	9b02      	ldr	r3, [sp, #8]
 80150c8:	b214      	sxth	r4, r2
 80150ca:	00db      	lsls	r3, r3, #3
 80150cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80150d0:	445b      	add	r3, fp
 80150d2:	4550      	cmp	r0, sl
 80150d4:	db03      	blt.n	80150de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80150d6:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80150da:	4494      	add	ip, r2
 80150dc:	e732      	b.n	8014f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80150de:	9a04      	ldr	r2, [sp, #16]
 80150e0:	4431      	add	r1, r6
 80150e2:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80150e6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80150ea:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80150ee:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80150f2:	e75c      	b.n	8014fae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80150f4:	9b08      	ldr	r3, [sp, #32]
 80150f6:	2d06      	cmp	r5, #6
 80150f8:	eba3 0308 	sub.w	r3, r3, r8
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	b218      	sxth	r0, r3
 8015100:	d813      	bhi.n	801512a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8015102:	9b07      	ldr	r3, [sp, #28]
 8015104:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8015108:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801510c:	1c6b      	adds	r3, r5, #1
 801510e:	9901      	ldr	r1, [sp, #4]
 8015110:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8015114:	9b01      	ldr	r3, [sp, #4]
 8015116:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801511a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801511e:	805a      	strh	r2, [r3, #2]
 8015120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015122:	f8a3 e006 	strh.w	lr, [r3, #6]
 8015126:	809a      	strh	r2, [r3, #4]
 8015128:	e75f      	b.n	8014fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801512a:	9c02      	ldr	r4, [sp, #8]
 801512c:	4570      	cmp	r0, lr
 801512e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015132:	db0d      	blt.n	8015150 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8015134:	4431      	add	r1, r6
 8015136:	9b06      	ldr	r3, [sp, #24]
 8015138:	445c      	add	r4, fp
 801513a:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801513e:	b289      	uxth	r1, r1
 8015140:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8015144:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8015148:	4419      	add	r1, r3
 801514a:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801514e:	e583      	b.n	8014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015150:	445c      	add	r4, fp
 8015152:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8015156:	e79b      	b.n	8015090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8015158:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801515c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8015160:	1e65      	subs	r5, r4, #1
 8015162:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8015166:	b2ad      	uxth	r5, r5
 8015168:	42b5      	cmp	r5, r6
 801516a:	d044      	beq.n	80151f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801516c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8015170:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8015174:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8015178:	4282      	cmp	r2, r0
 801517a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801517e:	d11f      	bne.n	80151c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8015180:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8015184:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8015188:	459c      	cmp	ip, r3
 801518a:	d119      	bne.n	80151c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801518c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8015190:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8015194:	19d8      	adds	r0, r3, r7
 8015196:	b200      	sxth	r0, r0
 8015198:	4288      	cmp	r0, r1
 801519a:	d109      	bne.n	80151b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801519c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80151a0:	4413      	add	r3, r2
 80151a2:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80151a6:	4629      	mov	r1, r5
 80151a8:	9801      	ldr	r0, [sp, #4]
 80151aa:	f7ff fd2b 	bl	8014c04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80151ae:	e003      	b.n	80151b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80151b0:	4411      	add	r1, r2
 80151b2:	b209      	sxth	r1, r1
 80151b4:	42b9      	cmp	r1, r7
 80151b6:	d0f3      	beq.n	80151a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80151b8:	3d01      	subs	r5, #1
 80151ba:	3c08      	subs	r4, #8
 80151bc:	b2ad      	uxth	r5, r5
 80151be:	e7d3      	b.n	8015168 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80151c0:	42b9      	cmp	r1, r7
 80151c2:	d1f9      	bne.n	80151b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80151c4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80151c8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80151cc:	4299      	cmp	r1, r3
 80151ce:	d1f3      	bne.n	80151b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80151d0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80151d4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80151d8:	181f      	adds	r7, r3, r0
 80151da:	b23f      	sxth	r7, r7
 80151dc:	42ba      	cmp	r2, r7
 80151de:	d105      	bne.n	80151ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 80151e0:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80151e4:	440b      	add	r3, r1
 80151e6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80151ea:	e7dc      	b.n	80151a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80151ec:	440a      	add	r2, r1
 80151ee:	b212      	sxth	r2, r2
 80151f0:	4290      	cmp	r0, r2
 80151f2:	d1e1      	bne.n	80151b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80151f4:	e7f6      	b.n	80151e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80151f6:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80151fa:	2e07      	cmp	r6, #7
 80151fc:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8015200:	d812      	bhi.n	8015228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8015202:	1c75      	adds	r5, r6, #1
 8015204:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8015208:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801520c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8015210:	9d01      	ldr	r5, [sp, #4]
 8015212:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8015216:	442c      	add	r4, r5
 8015218:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801521c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8015220:	8061      	strh	r1, [r4, #2]
 8015222:	80a2      	strh	r2, [r4, #4]
 8015224:	80e3      	strh	r3, [r4, #6]
 8015226:	e581      	b.n	8014d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015228:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801522c:	3e01      	subs	r6, #1
 801522e:	445c      	add	r4, fp
 8015230:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8015234:	f04f 37ff 	mov.w	r7, #4294967295
 8015238:	2500      	movs	r5, #0
 801523a:	9305      	str	r3, [sp, #20]
 801523c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8015240:	1e72      	subs	r2, r6, #1
 8015242:	9302      	str	r3, [sp, #8]
 8015244:	4691      	mov	r9, r2
 8015246:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801524a:	9304      	str	r3, [sp, #16]
 801524c:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8015250:	f1b9 3fff 	cmp.w	r9, #4294967295
 8015254:	6818      	ldr	r0, [r3, #0]
 8015256:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801525a:	9207      	str	r2, [sp, #28]
 801525c:	bf16      	itet	ne
 801525e:	9905      	ldrne	r1, [sp, #20]
 8015260:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8015264:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8015268:	9306      	str	r3, [sp, #24]
 801526a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801526e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8015272:	fb18 f801 	smulbb	r8, r8, r1
 8015276:	6859      	ldr	r1, [r3, #4]
 8015278:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801527c:	4671      	mov	r1, lr
 801527e:	a80c      	add	r0, sp, #48	@ 0x30
 8015280:	f7ff fb6a 	bl	8014958 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015284:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8015288:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801528c:	f04f 0c08 	mov.w	ip, #8
 8015290:	9b04      	ldr	r3, [sp, #16]
 8015292:	9a02      	ldr	r2, [sp, #8]
 8015294:	fb10 f001 	smulbb	r0, r0, r1
 8015298:	fb02 8803 	mla	r8, r2, r3, r8
 801529c:	eba0 0108 	sub.w	r1, r0, r8
 80152a0:	fb90 f0fc 	sdiv	r0, r0, ip
 80152a4:	4288      	cmp	r0, r1
 80152a6:	dc20      	bgt.n	80152ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80152a8:	4551      	cmp	r1, sl
 80152aa:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80152ae:	da03      	bge.n	80152b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 80152b0:	b1d9      	cbz	r1, 80152ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80152b2:	468a      	mov	sl, r1
 80152b4:	464f      	mov	r7, r9
 80152b6:	4635      	mov	r5, r6
 80152b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80152bc:	f119 0f02 	cmn.w	r9, #2
 80152c0:	d1c6      	bne.n	8015250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80152c2:	4616      	mov	r6, r2
 80152c4:	3201      	adds	r2, #1
 80152c6:	f1a4 0408 	sub.w	r4, r4, #8
 80152ca:	d1b7      	bne.n	801523c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80152cc:	9b01      	ldr	r3, [sp, #4]
 80152ce:	b2ac      	uxth	r4, r5
 80152d0:	00ed      	lsls	r5, r5, #3
 80152d2:	1958      	adds	r0, r3, r5
 80152d4:	1c7b      	adds	r3, r7, #1
 80152d6:	d10b      	bne.n	80152f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 80152d8:	4601      	mov	r1, r0
 80152da:	9803      	ldr	r0, [sp, #12]
 80152dc:	f7ff fb3c 	bl	8014958 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80152e0:	4621      	mov	r1, r4
 80152e2:	9801      	ldr	r0, [sp, #4]
 80152e4:	f7ff fc8e 	bl	8014c04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80152e8:	e4b6      	b.n	8014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80152ea:	464f      	mov	r7, r9
 80152ec:	4635      	mov	r5, r6
 80152ee:	e7ed      	b.n	80152cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80152f0:	9b01      	ldr	r3, [sp, #4]
 80152f2:	00ff      	lsls	r7, r7, #3
 80152f4:	445d      	add	r5, fp
 80152f6:	19d9      	adds	r1, r3, r7
 80152f8:	445f      	add	r7, fp
 80152fa:	f7ff fb2d 	bl	8014958 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80152fe:	9b03      	ldr	r3, [sp, #12]
 8015300:	cb03      	ldmia	r3!, {r0, r1}
 8015302:	9b03      	ldr	r3, [sp, #12]
 8015304:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8015308:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801530c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8015310:	6869      	ldr	r1, [r5, #4]
 8015312:	c303      	stmia	r3!, {r0, r1}
 8015314:	e7e4      	b.n	80152e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8015316:	bf00      	nop

08015318 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8015318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801531c:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8015320:	b09b      	sub	sp, #108	@ 0x6c
 8015322:	4604      	mov	r4, r0
 8015324:	4630      	mov	r0, r6
 8015326:	f7fd fb16 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 801532a:	4605      	mov	r5, r0
 801532c:	b948      	cbnz	r0, 8015342 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801532e:	6823      	ldr	r3, [r4, #0]
 8015330:	4620      	mov	r0, r4
 8015332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015334:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015338:	4798      	blx	r3
 801533a:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801533e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8015342:	4bc5      	ldr	r3, [pc, #788]	@ (8015658 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d03f      	beq.n	80153ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801534a:	4dc4      	ldr	r5, [pc, #784]	@ (801565c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801534c:	4628      	mov	r0, r5
 801534e:	f7fd fb02 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015352:	4606      	mov	r6, r0
 8015354:	2800      	cmp	r0, #0
 8015356:	d138      	bne.n	80153ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8015358:	4628      	mov	r0, r5
 801535a:	f7ff f991 	bl	8014680 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801535e:	6823      	ldr	r3, [r4, #0]
 8015360:	6829      	ldr	r1, [r5, #0]
 8015362:	4620      	mov	r0, r4
 8015364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015366:	686a      	ldr	r2, [r5, #4]
 8015368:	4798      	blx	r3
 801536a:	802e      	strh	r6, [r5, #0]
 801536c:	806e      	strh	r6, [r5, #2]
 801536e:	80ae      	strh	r6, [r5, #4]
 8015370:	80ee      	strh	r6, [r5, #6]
 8015372:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8015376:	4dba      	ldr	r5, [pc, #744]	@ (8015660 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8015378:	4640      	mov	r0, r8
 801537a:	f7ff fbe7 	bl	8014b4c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801537e:	882e      	ldrh	r6, [r5, #0]
 8015380:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8015384:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8015388:	4633      	mov	r3, r6
 801538a:	42bb      	cmp	r3, r7
 801538c:	d224      	bcs.n	80153d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801538e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8015392:	2907      	cmp	r1, #7
 8015394:	d816      	bhi.n	80153c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8015396:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801539a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801539e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80153a2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80153a6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80153aa:	1c4a      	adds	r2, r1, #1
 80153ac:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80153b0:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80153b4:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80153b8:	f8a2 a002 	strh.w	sl, [r2, #2]
 80153bc:	f8a2 e004 	strh.w	lr, [r2, #4]
 80153c0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80153c4:	3301      	adds	r3, #1
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	e7df      	b.n	801538a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80153ca:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d1cf      	bne.n	8015372 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80153d2:	b01b      	add	sp, #108	@ 0x6c
 80153d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d8:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 80153dc:	42b3      	cmp	r3, r6
 80153de:	d90c      	bls.n	80153fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80153e0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80153e4:	6822      	ldr	r2, [r4, #0]
 80153e6:	3601      	adds	r6, #1
 80153e8:	4620      	mov	r0, r4
 80153ea:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 80153ec:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80153f0:	b2b6      	uxth	r6, r6
 80153f2:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80153f6:	47b8      	blx	r7
 80153f8:	e7ee      	b.n	80153d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80153fa:	4a9a      	ldr	r2, [pc, #616]	@ (8015664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80153fc:	6813      	ldr	r3, [r2, #0]
 80153fe:	4691      	mov	r9, r2
 8015400:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8015404:	2b01      	cmp	r3, #1
 8015406:	f040 80e0 	bne.w	80155ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801540a:	8829      	ldrh	r1, [r5, #0]
 801540c:	2600      	movs	r6, #0
 801540e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8015412:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8015416:	33ae      	adds	r3, #174	@ 0xae
 8015418:	428f      	cmp	r7, r1
 801541a:	f103 0308 	add.w	r3, r3, #8
 801541e:	dd0a      	ble.n	8015436 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8015420:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8015424:	3101      	adds	r1, #1
 8015426:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801542a:	4402      	add	r2, r0
 801542c:	b212      	sxth	r2, r2
 801542e:	4296      	cmp	r6, r2
 8015430:	bfb8      	it	lt
 8015432:	4616      	movlt	r6, r2
 8015434:	e7f0      	b.n	8015418 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8015436:	4b8c      	ldr	r3, [pc, #560]	@ (8015668 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8015438:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8015664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801543c:	881b      	ldrh	r3, [r3, #0]
 801543e:	2b0f      	cmp	r3, #15
 8015440:	bf8c      	ite	hi
 8015442:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8015446:	f04f 0b01 	movls.w	fp, #1
 801544a:	2300      	movs	r3, #0
 801544c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8015450:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8015454:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8015458:	4b82      	ldr	r3, [pc, #520]	@ (8015664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801545a:	4438      	add	r0, r7
 801545c:	b207      	sxth	r7, r0
 801545e:	6818      	ldr	r0, [r3, #0]
 8015460:	42b7      	cmp	r7, r6
 8015462:	6803      	ldr	r3, [r0, #0]
 8015464:	f280 8083 	bge.w	801556e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8015468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801546c:	4798      	blx	r3
 801546e:	eb07 030b 	add.w	r3, r7, fp
 8015472:	4298      	cmp	r0, r3
 8015474:	da07      	bge.n	8015486 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8015476:	42b0      	cmp	r0, r6
 8015478:	da05      	bge.n	8015486 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801547a:	4287      	cmp	r7, r0
 801547c:	dd6c      	ble.n	8015558 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801547e:	2f00      	cmp	r7, #0
 8015480:	dd6a      	ble.n	8015558 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8015482:	4630      	mov	r0, r6
 8015484:	e004      	b.n	8015490 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8015486:	4287      	cmp	r7, r0
 8015488:	dcfb      	bgt.n	8015482 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801548a:	42b0      	cmp	r0, r6
 801548c:	bfa8      	it	ge
 801548e:	4630      	movge	r0, r6
 8015490:	4b76      	ldr	r3, [pc, #472]	@ (801566c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8015492:	1bc0      	subs	r0, r0, r7
 8015494:	2200      	movs	r2, #0
 8015496:	f8ad 7016 	strh.w	r7, [sp, #22]
 801549a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801549e:	882f      	ldrh	r7, [r5, #0]
 80154a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80154a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80154a8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80154ac:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80154b0:	42bb      	cmp	r3, r7
 80154b2:	d9cd      	bls.n	8015450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80154b4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80154b8:	ab07      	add	r3, sp, #28
 80154ba:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80154be:	6851      	ldr	r1, [r2, #4]
 80154c0:	c303      	stmia	r3!, {r0, r1}
 80154c2:	a905      	add	r1, sp, #20
 80154c4:	a807      	add	r0, sp, #28
 80154c6:	f7ff f9ae 	bl	8014826 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80154ca:	2800      	cmp	r0, #0
 80154cc:	d04c      	beq.n	8015568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80154ce:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80154d2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80154d6:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80154da:	4686      	mov	lr, r0
 80154dc:	4290      	cmp	r0, r2
 80154de:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80154e2:	4450      	add	r0, sl
 80154e4:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80154e8:	bfb8      	it	lt
 80154ea:	4696      	movlt	lr, r2
 80154ec:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80154f0:	4452      	add	r2, sl
 80154f2:	b280      	uxth	r0, r0
 80154f4:	4299      	cmp	r1, r3
 80154f6:	468c      	mov	ip, r1
 80154f8:	b292      	uxth	r2, r2
 80154fa:	9302      	str	r3, [sp, #8]
 80154fc:	bfb8      	it	lt
 80154fe:	469c      	movlt	ip, r3
 8015500:	b203      	sxth	r3, r0
 8015502:	fa0f fa82 	sxth.w	sl, r2
 8015506:	f8ad e01c 	strh.w	lr, [sp, #28]
 801550a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801550e:	4553      	cmp	r3, sl
 8015510:	bfb8      	it	lt
 8015512:	4602      	movlt	r2, r0
 8015514:	9b02      	ldr	r3, [sp, #8]
 8015516:	eba2 020e 	sub.w	r2, r2, lr
 801551a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801551e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8015522:	4411      	add	r1, r2
 8015524:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015528:	4413      	add	r3, r2
 801552a:	b289      	uxth	r1, r1
 801552c:	b29b      	uxth	r3, r3
 801552e:	b208      	sxth	r0, r1
 8015530:	b21a      	sxth	r2, r3
 8015532:	4290      	cmp	r0, r2
 8015534:	bfb8      	it	lt
 8015536:	460b      	movlt	r3, r1
 8015538:	eba3 030c 	sub.w	r3, r3, ip
 801553c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015540:	a807      	add	r0, sp, #28
 8015542:	f7fd fa08 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015546:	b920      	cbnz	r0, 8015552 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8015548:	6823      	ldr	r3, [r4, #0]
 801554a:	a907      	add	r1, sp, #28
 801554c:	4620      	mov	r0, r4
 801554e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015550:	4798      	blx	r3
 8015552:	3701      	adds	r7, #1
 8015554:	b2bf      	uxth	r7, r7
 8015556:	e7a9      	b.n	80154ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8015558:	f8d9 0000 	ldr.w	r0, [r9]
 801555c:	2101      	movs	r1, #1
 801555e:	6803      	ldr	r3, [r0, #0]
 8015560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015564:	4798      	blx	r3
 8015566:	e773      	b.n	8015450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8015568:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801556c:	e7e8      	b.n	8015540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015570:	4798      	blx	r3
 8015572:	4b3f      	ldr	r3, [pc, #252]	@ (8015670 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	2b00      	cmp	r3, #0
 8015578:	f43f af2b 	beq.w	80153d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801557c:	2300      	movs	r3, #0
 801557e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8015582:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8015586:	882b      	ldrh	r3, [r5, #0]
 8015588:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801558c:	42ab      	cmp	r3, r5
 801558e:	f4bf af20 	bcs.w	80153d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8015592:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8015596:	2907      	cmp	r1, #7
 8015598:	d814      	bhi.n	80155c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801559a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801559e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80155a2:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80155a6:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80155aa:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80155ae:	1c4a      	adds	r2, r1, #1
 80155b0:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80155b4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80155b8:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80155bc:	f8a2 c002 	strh.w	ip, [r2, #2]
 80155c0:	8097      	strh	r7, [r2, #4]
 80155c2:	80d6      	strh	r6, [r2, #6]
 80155c4:	3301      	adds	r3, #1
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	e7e0      	b.n	801558c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 80155ca:	2b02      	cmp	r3, #2
 80155cc:	f040 8133 	bne.w	8015836 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80155d0:	4b28      	ldr	r3, [pc, #160]	@ (8015674 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80155d2:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80155d6:	781b      	ldrb	r3, [r3, #0]
 80155d8:	2b01      	cmp	r3, #1
 80155da:	f000 8098 	beq.w	801570e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80155de:	882a      	ldrh	r2, [r5, #0]
 80155e0:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80155e4:	3201      	adds	r2, #1
 80155e6:	b292      	uxth	r2, r2
 80155e8:	2900      	cmp	r1, #0
 80155ea:	d0c2      	beq.n	8015572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80155ec:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80155f0:	4694      	mov	ip, r2
 80155f2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80155f6:	f04f 0900 	mov.w	r9, #0
 80155fa:	441e      	add	r6, r3
 80155fc:	b236      	sxth	r6, r6
 80155fe:	fa1f f38c 	uxth.w	r3, ip
 8015602:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8015606:	4299      	cmp	r1, r3
 8015608:	f240 80be 	bls.w	8015788 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801560c:	4427      	add	r7, r4
 801560e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8015612:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8015616:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801561a:	4283      	cmp	r3, r0
 801561c:	f340 80a0 	ble.w	8015760 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8015620:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8015624:	46e1      	mov	r9, ip
 8015626:	4406      	add	r6, r0
 8015628:	b236      	sxth	r6, r6
 801562a:	429e      	cmp	r6, r3
 801562c:	bfa8      	it	ge
 801562e:	461e      	movge	r6, r3
 8015630:	f10c 0c01 	add.w	ip, ip, #1
 8015634:	e7e3      	b.n	80155fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8015636:	d10a      	bne.n	801564e <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8015638:	4562      	cmp	r2, ip
 801563a:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801563e:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8015642:	bfb8      	it	lt
 8015644:	4662      	movlt	r2, ip
 8015646:	4288      	cmp	r0, r1
 8015648:	bfb8      	it	lt
 801564a:	461f      	movlt	r7, r3
 801564c:	e086      	b.n	801575c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801564e:	428a      	cmp	r2, r1
 8015650:	bfb8      	it	lt
 8015652:	460a      	movlt	r2, r1
 8015654:	e082      	b.n	801575c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8015656:	bf00      	nop
 8015658:	240042b0 	.word	0x240042b0
 801565c:	240042bc 	.word	0x240042bc
 8015660:	240000dc 	.word	0x240000dc
 8015664:	24004278 	.word	0x24004278
 8015668:	2400426e 	.word	0x2400426e
 801566c:	2400426c 	.word	0x2400426c
 8015670:	24004276 	.word	0x24004276
 8015674:	24004270 	.word	0x24004270
 8015678:	19a1      	adds	r1, r4, r6
 801567a:	ab07      	add	r3, sp, #28
 801567c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8015680:	6849      	ldr	r1, [r1, #4]
 8015682:	c303      	stmia	r3!, {r0, r1}
 8015684:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015688:	a807      	add	r0, sp, #28
 801568a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801568e:	2b13      	cmp	r3, #19
 8015690:	440b      	add	r3, r1
 8015692:	bfd8      	it	le
 8015694:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8015698:	1a9b      	subs	r3, r3, r2
 801569a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801569e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80156a2:	f7ff f807 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80156a6:	a807      	add	r0, sp, #28
 80156a8:	f7fd f955 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 80156ac:	bb78      	cbnz	r0, 801570e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80156ae:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 80156b2:	4426      	add	r6, r4
 80156b4:	f8d9 0000 	ldr.w	r0, [r9]
 80156b8:	f1bc 0f14 	cmp.w	ip, #20
 80156bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80156c0:	f8d0 e000 	ldr.w	lr, [r0]
 80156c4:	bfa8      	it	ge
 80156c6:	f04f 0c14 	movge.w	ip, #20
 80156ca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80156ce:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80156d2:	fa1f fc8c 	uxth.w	ip, ip
 80156d6:	f8cd c000 	str.w	ip, [sp]
 80156da:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80156de:	47d8      	blx	fp
 80156e0:	4683      	mov	fp, r0
 80156e2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80156e6:	a807      	add	r0, sp, #28
 80156e8:	f7fe ffca 	bl	8014680 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80156ec:	6823      	ldr	r3, [r4, #0]
 80156ee:	4620      	mov	r0, r4
 80156f0:	a907      	add	r1, sp, #28
 80156f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80156f4:	4798      	blx	r3
 80156f6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80156fa:	eba0 000b 	sub.w	r0, r0, fp
 80156fe:	b200      	sxth	r0, r0
 8015700:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8015704:	b918      	cbnz	r0, 801570e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8015706:	b2b9      	uxth	r1, r7
 8015708:	4650      	mov	r0, sl
 801570a:	f7ff fa7b 	bl	8014c04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801570e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8015712:	f1bb 0f00 	cmp.w	fp, #0
 8015716:	f43f af2c 	beq.w	8015572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801571a:	882b      	ldrh	r3, [r5, #0]
 801571c:	2700      	movs	r7, #0
 801571e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8015722:	3301      	adds	r3, #1
 8015724:	b29b      	uxth	r3, r3
 8015726:	b299      	uxth	r1, r3
 8015728:	00fe      	lsls	r6, r7, #3
 801572a:	458b      	cmp	fp, r1
 801572c:	d9a4      	bls.n	8015678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801572e:	4426      	add	r6, r4
 8015730:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8015734:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8015738:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801573c:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8015740:	4408      	add	r0, r1
 8015742:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8015746:	4461      	add	r1, ip
 8015748:	b200      	sxth	r0, r0
 801574a:	b209      	sxth	r1, r1
 801574c:	4288      	cmp	r0, r1
 801574e:	f6bf af72 	bge.w	8015636 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8015752:	4584      	cmp	ip, r0
 8015754:	4662      	mov	r2, ip
 8015756:	461f      	mov	r7, r3
 8015758:	bfb8      	it	lt
 801575a:	4602      	movlt	r2, r0
 801575c:	3301      	adds	r3, #1
 801575e:	e7e2      	b.n	8015726 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8015760:	d10e      	bne.n	8015780 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8015762:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8015766:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801576a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801576e:	4473      	add	r3, lr
 8015770:	b21b      	sxth	r3, r3
 8015772:	429e      	cmp	r6, r3
 8015774:	bfa8      	it	ge
 8015776:	461e      	movge	r6, r3
 8015778:	4287      	cmp	r7, r0
 801577a:	bfb8      	it	lt
 801577c:	46e1      	movlt	r9, ip
 801577e:	e757      	b.n	8015630 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015780:	4286      	cmp	r6, r0
 8015782:	bfa8      	it	ge
 8015784:	4606      	movge	r6, r0
 8015786:	e753      	b.n	8015630 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015788:	eb0a 0007 	add.w	r0, sl, r7
 801578c:	4427      	add	r7, r4
 801578e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8015792:	f1bb 0f13 	cmp.w	fp, #19
 8015796:	bfdc      	itt	le
 8015798:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801579c:	445e      	addle	r6, fp
 801579e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80157a2:	bfd8      	it	le
 80157a4:	b236      	sxthle	r6, r6
 80157a6:	f7fd f8d6 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 80157aa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80157ae:	2800      	cmp	r0, #0
 80157b0:	f47f af1a 	bne.w	80155e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 80157b4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80157b8:	fa1f fb8b 	uxth.w	fp, fp
 80157bc:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80157c0:	1ab6      	subs	r6, r6, r2
 80157c2:	4829      	ldr	r0, [pc, #164]	@ (8015868 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 80157c4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80157c8:	2e14      	cmp	r6, #20
 80157ca:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80157ce:	6800      	ldr	r0, [r0, #0]
 80157d0:	bfa8      	it	ge
 80157d2:	2614      	movge	r6, #20
 80157d4:	f8ad 101c 	strh.w	r1, [sp, #28]
 80157d8:	f8ad 201e 	strh.w	r2, [sp, #30]
 80157dc:	b289      	uxth	r1, r1
 80157de:	f8ad 3020 	strh.w	r3, [sp, #32]
 80157e2:	b2b6      	uxth	r6, r6
 80157e4:	f8d0 c000 	ldr.w	ip, [r0]
 80157e8:	b292      	uxth	r2, r2
 80157ea:	455e      	cmp	r6, fp
 80157ec:	bf94      	ite	ls
 80157ee:	9600      	strls	r6, [sp, #0]
 80157f0:	f8cd b000 	strhi.w	fp, [sp]
 80157f4:	b29b      	uxth	r3, r3
 80157f6:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 80157fa:	47b0      	blx	r6
 80157fc:	6823      	ldr	r3, [r4, #0]
 80157fe:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8015802:	a907      	add	r1, sp, #28
 8015804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015806:	4620      	mov	r0, r4
 8015808:	4798      	blx	r3
 801580a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801580e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8015812:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8015816:	1a5b      	subs	r3, r3, r1
 8015818:	440a      	add	r2, r1
 801581a:	b21b      	sxth	r3, r3
 801581c:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8015820:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8015824:	2b00      	cmp	r3, #0
 8015826:	f47f aeda 	bne.w	80155de <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801582a:	fa1f f189 	uxth.w	r1, r9
 801582e:	4650      	mov	r0, sl
 8015830:	f7ff f9e8 	bl	8014c04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015834:	e6d3      	b.n	80155de <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8015836:	882e      	ldrh	r6, [r5, #0]
 8015838:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801583c:	42b3      	cmp	r3, r6
 801583e:	f67f ae98 	bls.w	8015572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015842:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8015846:	ab07      	add	r3, sp, #28
 8015848:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801584c:	6851      	ldr	r1, [r2, #4]
 801584e:	c303      	stmia	r3!, {r0, r1}
 8015850:	a807      	add	r0, sp, #28
 8015852:	f7fd f880 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015856:	b920      	cbnz	r0, 8015862 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8015858:	6823      	ldr	r3, [r4, #0]
 801585a:	a907      	add	r1, sp, #28
 801585c:	4620      	mov	r0, r4
 801585e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015860:	4798      	blx	r3
 8015862:	3601      	adds	r6, #1
 8015864:	b2b6      	uxth	r6, r6
 8015866:	e7e7      	b.n	8015838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8015868:	24004278 	.word	0x24004278

0801586c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801586c:	4b03      	ldr	r3, [pc, #12]	@ (801587c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801586e:	2200      	movs	r2, #0
 8015870:	801a      	strh	r2, [r3, #0]
 8015872:	805a      	strh	r2, [r3, #2]
 8015874:	809a      	strh	r2, [r3, #4]
 8015876:	80da      	strh	r2, [r3, #6]
 8015878:	4770      	bx	lr
 801587a:	bf00      	nop
 801587c:	240042bc 	.word	0x240042bc

08015880 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015884:	b09d      	sub	sp, #116	@ 0x74
 8015886:	4606      	mov	r6, r0
 8015888:	4614      	mov	r4, r2
 801588a:	468a      	mov	sl, r1
 801588c:	a803      	add	r0, sp, #12
 801588e:	461d      	mov	r5, r3
 8015890:	f000 fd7a 	bl	8016388 <_ZN8touchgfx12TextProviderC1Ev>
 8015894:	6833      	ldr	r3, [r6, #0]
 8015896:	4630      	mov	r0, r6
 8015898:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801589c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801589e:	4798      	blx	r3
 80158a0:	6833      	ldr	r3, [r6, #0]
 80158a2:	4607      	mov	r7, r0
 80158a4:	4630      	mov	r0, r6
 80158a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158a8:	4798      	blx	r3
 80158aa:	462a      	mov	r2, r5
 80158ac:	2500      	movs	r5, #0
 80158ae:	4621      	mov	r1, r4
 80158b0:	9000      	str	r0, [sp, #0]
 80158b2:	463b      	mov	r3, r7
 80158b4:	462c      	mov	r4, r5
 80158b6:	46a9      	mov	r9, r5
 80158b8:	46a8      	mov	r8, r5
 80158ba:	a803      	add	r0, sp, #12
 80158bc:	f000 fdb7 	bl	801642e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80158c0:	2300      	movs	r3, #0
 80158c2:	9302      	str	r3, [sp, #8]
 80158c4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80158c8:	429c      	cmp	r4, r3
 80158ca:	d002      	beq.n	80158d2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80158cc:	455c      	cmp	r4, fp
 80158ce:	bf18      	it	ne
 80158d0:	4625      	movne	r5, r4
 80158d2:	ab02      	add	r3, sp, #8
 80158d4:	4632      	mov	r2, r6
 80158d6:	4651      	mov	r1, sl
 80158d8:	a803      	add	r0, sp, #12
 80158da:	f001 f89d 	bl	8016a18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80158de:	4604      	mov	r4, r0
 80158e0:	b108      	cbz	r0, 80158e6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80158e2:	280a      	cmp	r0, #10
 80158e4:	d10a      	bne.n	80158fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80158e6:	45c1      	cmp	r9, r8
 80158e8:	bf38      	it	cc
 80158ea:	46c1      	movcc	r9, r8
 80158ec:	f04f 0800 	mov.w	r8, #0
 80158f0:	2c00      	cmp	r4, #0
 80158f2:	d1e5      	bne.n	80158c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80158f4:	4648      	mov	r0, r9
 80158f6:	b01d      	add	sp, #116	@ 0x74
 80158f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158fc:	9a02      	ldr	r2, [sp, #8]
 80158fe:	2a00      	cmp	r2, #0
 8015900:	d0de      	beq.n	80158c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015902:	7b57      	ldrb	r7, [r2, #13]
 8015904:	4629      	mov	r1, r5
 8015906:	6833      	ldr	r3, [r6, #0]
 8015908:	007f      	lsls	r7, r7, #1
 801590a:	8894      	ldrh	r4, [r2, #4]
 801590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801590e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8015912:	7a97      	ldrb	r7, [r2, #10]
 8015914:	4307      	orrs	r7, r0
 8015916:	4630      	mov	r0, r6
 8015918:	4798      	blx	r3
 801591a:	4438      	add	r0, r7
 801591c:	4480      	add	r8, r0
 801591e:	fa1f f888 	uxth.w	r8, r8
 8015922:	e7e5      	b.n	80158f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08015924 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015924:	b508      	push	{r3, lr}
 8015926:	6803      	ldr	r3, [r0, #0]
 8015928:	68db      	ldr	r3, [r3, #12]
 801592a:	4798      	blx	r3
 801592c:	b128      	cbz	r0, 801593a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801592e:	7b43      	ldrb	r3, [r0, #13]
 8015930:	7a80      	ldrb	r0, [r0, #10]
 8015932:	005b      	lsls	r3, r3, #1
 8015934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015938:	4318      	orrs	r0, r3
 801593a:	bd08      	pop	{r3, pc}

0801593c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801593c:	b40e      	push	{r1, r2, r3}
 801593e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015940:	b09e      	sub	sp, #120	@ 0x78
 8015942:	4605      	mov	r5, r0
 8015944:	ab23      	add	r3, sp, #140	@ 0x8c
 8015946:	a805      	add	r0, sp, #20
 8015948:	f853 4b04 	ldr.w	r4, [r3], #4
 801594c:	9303      	str	r3, [sp, #12]
 801594e:	f000 fd1b 	bl	8016388 <_ZN8touchgfx12TextProviderC1Ev>
 8015952:	682b      	ldr	r3, [r5, #0]
 8015954:	4628      	mov	r0, r5
 8015956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015958:	4798      	blx	r3
 801595a:	682b      	ldr	r3, [r5, #0]
 801595c:	4606      	mov	r6, r0
 801595e:	4628      	mov	r0, r5
 8015960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015962:	4798      	blx	r3
 8015964:	4633      	mov	r3, r6
 8015966:	4621      	mov	r1, r4
 8015968:	ae1e      	add	r6, sp, #120	@ 0x78
 801596a:	2400      	movs	r4, #0
 801596c:	9000      	str	r0, [sp, #0]
 801596e:	9a03      	ldr	r2, [sp, #12]
 8015970:	a805      	add	r0, sp, #20
 8015972:	f000 fd5c 	bl	801642e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015976:	f846 4d68 	str.w	r4, [r6, #-104]!
 801597a:	462a      	mov	r2, r5
 801597c:	4633      	mov	r3, r6
 801597e:	4621      	mov	r1, r4
 8015980:	a805      	add	r0, sp, #20
 8015982:	f001 f849 	bl	8016a18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015986:	b300      	cbz	r0, 80159ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015988:	280a      	cmp	r0, #10
 801598a:	d01a      	beq.n	80159c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801598c:	9f04      	ldr	r7, [sp, #16]
 801598e:	b1c7      	cbz	r7, 80159c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015990:	7b78      	ldrb	r0, [r7, #13]
 8015992:	7a3b      	ldrb	r3, [r7, #8]
 8015994:	00c1      	lsls	r1, r0, #3
 8015996:	88ea      	ldrh	r2, [r5, #6]
 8015998:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801599c:	4319      	orrs	r1, r3
 801599e:	0643      	lsls	r3, r0, #25
 80159a0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80159a4:	bf48      	it	mi
 80159a6:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80159aa:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80159ae:	bf48      	it	mi
 80159b0:	b219      	sxthmi	r1, r3
 80159b2:	79fb      	ldrb	r3, [r7, #7]
 80159b4:	4303      	orrs	r3, r0
 80159b6:	4413      	add	r3, r2
 80159b8:	1a5b      	subs	r3, r3, r1
 80159ba:	b21b      	sxth	r3, r3
 80159bc:	429c      	cmp	r4, r3
 80159be:	bfb8      	it	lt
 80159c0:	461c      	movlt	r4, r3
 80159c2:	4633      	mov	r3, r6
 80159c4:	462a      	mov	r2, r5
 80159c6:	2100      	movs	r1, #0
 80159c8:	e7da      	b.n	8015980 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80159ca:	b2a0      	uxth	r0, r4
 80159cc:	b01e      	add	sp, #120	@ 0x78
 80159ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80159d2:	b003      	add	sp, #12
 80159d4:	4770      	bx	lr

080159d6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80159d6:	7a43      	ldrb	r3, [r0, #9]
 80159d8:	8880      	ldrh	r0, [r0, #4]
 80159da:	4418      	add	r0, r3
 80159dc:	b280      	uxth	r0, r0
 80159de:	4770      	bx	lr

080159e0 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80159e0:	6803      	ldr	r3, [r0, #0]
 80159e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159e4:	4718      	bx	r3

080159e6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80159e6:	b40e      	push	{r1, r2, r3}
 80159e8:	b570      	push	{r4, r5, r6, lr}
 80159ea:	b09d      	sub	sp, #116	@ 0x74
 80159ec:	4604      	mov	r4, r0
 80159ee:	ab21      	add	r3, sp, #132	@ 0x84
 80159f0:	a803      	add	r0, sp, #12
 80159f2:	f853 5b04 	ldr.w	r5, [r3], #4
 80159f6:	9302      	str	r3, [sp, #8]
 80159f8:	f000 fcc6 	bl	8016388 <_ZN8touchgfx12TextProviderC1Ev>
 80159fc:	6823      	ldr	r3, [r4, #0]
 80159fe:	4620      	mov	r0, r4
 8015a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a02:	4798      	blx	r3
 8015a04:	6823      	ldr	r3, [r4, #0]
 8015a06:	4606      	mov	r6, r0
 8015a08:	4620      	mov	r0, r4
 8015a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a0c:	2401      	movs	r4, #1
 8015a0e:	4798      	blx	r3
 8015a10:	4633      	mov	r3, r6
 8015a12:	9000      	str	r0, [sp, #0]
 8015a14:	4629      	mov	r1, r5
 8015a16:	9a02      	ldr	r2, [sp, #8]
 8015a18:	a803      	add	r0, sp, #12
 8015a1a:	f000 fd08 	bl	801642e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015a1e:	a803      	add	r0, sp, #12
 8015a20:	f001 f87a 	bl	8016b18 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015a24:	b2a3      	uxth	r3, r4
 8015a26:	b138      	cbz	r0, 8015a38 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8015a28:	280a      	cmp	r0, #10
 8015a2a:	a803      	add	r0, sp, #12
 8015a2c:	bf04      	itt	eq
 8015a2e:	3301      	addeq	r3, #1
 8015a30:	b21c      	sxtheq	r4, r3
 8015a32:	f001 f871 	bl	8016b18 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015a36:	e7f5      	b.n	8015a24 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8015a38:	4618      	mov	r0, r3
 8015a3a:	b01d      	add	sp, #116	@ 0x74
 8015a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a40:	b003      	add	sp, #12
 8015a42:	4770      	bx	lr

08015a44 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8015a44:	b40e      	push	{r1, r2, r3}
 8015a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a48:	b09e      	sub	sp, #120	@ 0x78
 8015a4a:	4604      	mov	r4, r0
 8015a4c:	ab23      	add	r3, sp, #140	@ 0x8c
 8015a4e:	a805      	add	r0, sp, #20
 8015a50:	f853 5b04 	ldr.w	r5, [r3], #4
 8015a54:	9303      	str	r3, [sp, #12]
 8015a56:	f000 fc97 	bl	8016388 <_ZN8touchgfx12TextProviderC1Ev>
 8015a5a:	6823      	ldr	r3, [r4, #0]
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a60:	4798      	blx	r3
 8015a62:	6823      	ldr	r3, [r4, #0]
 8015a64:	4606      	mov	r6, r0
 8015a66:	4620      	mov	r0, r4
 8015a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a6a:	4798      	blx	r3
 8015a6c:	4633      	mov	r3, r6
 8015a6e:	4629      	mov	r1, r5
 8015a70:	9000      	str	r0, [sp, #0]
 8015a72:	9a03      	ldr	r2, [sp, #12]
 8015a74:	a805      	add	r0, sp, #20
 8015a76:	f000 fcda 	bl	801642e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015a7a:	ad1e      	add	r5, sp, #120	@ 0x78
 8015a7c:	2100      	movs	r1, #0
 8015a7e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8015a82:	4622      	mov	r2, r4
 8015a84:	a805      	add	r0, sp, #20
 8015a86:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015a8a:	462b      	mov	r3, r5
 8015a8c:	f000 ffc4 	bl	8016a18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015a90:	b1d8      	cbz	r0, 8015aca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8015a92:	280a      	cmp	r0, #10
 8015a94:	d012      	beq.n	8015abc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8015a96:	9804      	ldr	r0, [sp, #16]
 8015a98:	b180      	cbz	r0, 8015abc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8015a9a:	7b47      	ldrb	r7, [r0, #13]
 8015a9c:	88e2      	ldrh	r2, [r4, #6]
 8015a9e:	00fb      	lsls	r3, r7, #3
 8015aa0:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8015aa4:	7a03      	ldrb	r3, [r0, #8]
 8015aa6:	430b      	orrs	r3, r1
 8015aa8:	0679      	lsls	r1, r7, #25
 8015aaa:	bf44      	itt	mi
 8015aac:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015ab0:	b21b      	sxthmi	r3, r3
 8015ab2:	1ad3      	subs	r3, r2, r3
 8015ab4:	b21b      	sxth	r3, r3
 8015ab6:	429e      	cmp	r6, r3
 8015ab8:	bfa8      	it	ge
 8015aba:	461e      	movge	r6, r3
 8015abc:	462b      	mov	r3, r5
 8015abe:	4622      	mov	r2, r4
 8015ac0:	2100      	movs	r1, #0
 8015ac2:	a805      	add	r0, sp, #20
 8015ac4:	f000 ffa8 	bl	8016a18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015ac8:	e7e2      	b.n	8015a90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8015aca:	4630      	mov	r0, r6
 8015acc:	b01e      	add	sp, #120	@ 0x78
 8015ace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015ad2:	b003      	add	sp, #12
 8015ad4:	4770      	bx	lr

08015ad6 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8015ad6:	b513      	push	{r0, r1, r4, lr}
 8015ad8:	6803      	ldr	r3, [r0, #0]
 8015ada:	2400      	movs	r4, #0
 8015adc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015ae0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015ae4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015ae8:	4669      	mov	r1, sp
 8015aea:	691b      	ldr	r3, [r3, #16]
 8015aec:	9400      	str	r4, [sp, #0]
 8015aee:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015af2:	4798      	blx	r3
 8015af4:	b002      	add	sp, #8
 8015af6:	bd10      	pop	{r4, pc}

08015af8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015af8:	b538      	push	{r3, r4, r5, lr}
 8015afa:	680b      	ldr	r3, [r1, #0]
 8015afc:	460c      	mov	r4, r1
 8015afe:	4605      	mov	r5, r0
 8015b00:	68db      	ldr	r3, [r3, #12]
 8015b02:	4798      	blx	r3
 8015b04:	6823      	ldr	r3, [r4, #0]
 8015b06:	4620      	mov	r0, r4
 8015b08:	4629      	mov	r1, r5
 8015b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b0c:	4798      	blx	r3
 8015b0e:	4628      	mov	r0, r5
 8015b10:	bd38      	pop	{r3, r4, r5, pc}

08015b12 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015b12:	b410      	push	{r4}
 8015b14:	880a      	ldrh	r2, [r1, #0]
 8015b16:	8884      	ldrh	r4, [r0, #4]
 8015b18:	4422      	add	r2, r4
 8015b1a:	800a      	strh	r2, [r1, #0]
 8015b1c:	884a      	ldrh	r2, [r1, #2]
 8015b1e:	88c4      	ldrh	r4, [r0, #6]
 8015b20:	4422      	add	r2, r4
 8015b22:	804a      	strh	r2, [r1, #2]
 8015b24:	6940      	ldr	r0, [r0, #20]
 8015b26:	b120      	cbz	r0, 8015b32 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015b28:	6803      	ldr	r3, [r0, #0]
 8015b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b30:	4718      	bx	r3
 8015b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b36:	4770      	bx	lr

08015b38 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8015b38:	b570      	push	{r4, r5, r6, lr}
 8015b3a:	8882      	ldrh	r2, [r0, #4]
 8015b3c:	460c      	mov	r4, r1
 8015b3e:	880b      	ldrh	r3, [r1, #0]
 8015b40:	4605      	mov	r5, r0
 8015b42:	4413      	add	r3, r2
 8015b44:	800b      	strh	r3, [r1, #0]
 8015b46:	884b      	ldrh	r3, [r1, #2]
 8015b48:	88c2      	ldrh	r2, [r0, #6]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	804b      	strh	r3, [r1, #2]
 8015b4e:	1d01      	adds	r1, r0, #4
 8015b50:	4620      	mov	r0, r4
 8015b52:	f7fc febd 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 8015b56:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	dd0b      	ble.n	8015b76 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015b5e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	dd07      	ble.n	8015b76 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015b66:	6968      	ldr	r0, [r5, #20]
 8015b68:	b128      	cbz	r0, 8015b76 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015b6a:	6803      	ldr	r3, [r0, #0]
 8015b6c:	4621      	mov	r1, r4
 8015b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b74:	4718      	bx	r3
 8015b76:	bd70      	pop	{r4, r5, r6, pc}

08015b78 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015b78:	b570      	push	{r4, r5, r6, lr}
 8015b7a:	8882      	ldrh	r2, [r0, #4]
 8015b7c:	460c      	mov	r4, r1
 8015b7e:	880b      	ldrh	r3, [r1, #0]
 8015b80:	4605      	mov	r5, r0
 8015b82:	4413      	add	r3, r2
 8015b84:	800b      	strh	r3, [r1, #0]
 8015b86:	884b      	ldrh	r3, [r1, #2]
 8015b88:	88c2      	ldrh	r2, [r0, #6]
 8015b8a:	4413      	add	r3, r2
 8015b8c:	804b      	strh	r3, [r1, #2]
 8015b8e:	1d01      	adds	r1, r0, #4
 8015b90:	4620      	mov	r0, r4
 8015b92:	f7fc fe9d 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 8015b96:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	dd19      	ble.n	8015bd2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015b9e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	dd15      	ble.n	8015bd2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015ba6:	6968      	ldr	r0, [r5, #20]
 8015ba8:	b128      	cbz	r0, 8015bb6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8015baa:	6803      	ldr	r3, [r0, #0]
 8015bac:	4621      	mov	r1, r4
 8015bae:	691b      	ldr	r3, [r3, #16]
 8015bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bb4:	4718      	bx	r3
 8015bb6:	4b07      	ldr	r3, [pc, #28]	@ (8015bd4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	429d      	cmp	r5, r3
 8015bbe:	d108      	bne.n	8015bd2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015bc0:	f7fe ff10 	bl	80149e4 <_ZN8touchgfx11Application11getInstanceEv>
 8015bc4:	6803      	ldr	r3, [r0, #0]
 8015bc6:	6821      	ldr	r1, [r4, #0]
 8015bc8:	6862      	ldr	r2, [r4, #4]
 8015bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bd0:	4718      	bx	r3
 8015bd2:	bd70      	pop	{r4, r5, r6, pc}
 8015bd4:	240042b4 	.word	0x240042b4

08015bd8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015bd8:	b570      	push	{r4, r5, r6, lr}
 8015bda:	4604      	mov	r4, r0
 8015bdc:	4616      	mov	r6, r2
 8015bde:	460d      	mov	r5, r1
 8015be0:	b901      	cbnz	r1, 8015be4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8015be2:	b192      	cbz	r2, 8015c0a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8015be4:	6823      	ldr	r3, [r4, #0]
 8015be6:	4620      	mov	r0, r4
 8015be8:	699b      	ldr	r3, [r3, #24]
 8015bea:	4798      	blx	r3
 8015bec:	88e2      	ldrh	r2, [r4, #6]
 8015bee:	88a1      	ldrh	r1, [r4, #4]
 8015bf0:	4620      	mov	r0, r4
 8015bf2:	4432      	add	r2, r6
 8015bf4:	4429      	add	r1, r5
 8015bf6:	b212      	sxth	r2, r2
 8015bf8:	b209      	sxth	r1, r1
 8015bfa:	f7fb fb1b 	bl	8011234 <_ZN8touchgfx8Drawable5setXYEss>
 8015bfe:	6823      	ldr	r3, [r4, #0]
 8015c00:	4620      	mov	r0, r4
 8015c02:	699b      	ldr	r3, [r3, #24]
 8015c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c08:	4718      	bx	r3
 8015c0a:	bd70      	pop	{r4, r5, r6, pc}

08015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015c0c:	b510      	push	{r4, lr}
 8015c0e:	2300      	movs	r3, #0
 8015c10:	4604      	mov	r4, r0
 8015c12:	4608      	mov	r0, r1
 8015c14:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8015c18:	8023      	strh	r3, [r4, #0]
 8015c1a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015c1e:	8063      	strh	r3, [r4, #2]
 8015c20:	6803      	ldr	r3, [r0, #0]
 8015c22:	80a1      	strh	r1, [r4, #4]
 8015c24:	4621      	mov	r1, r4
 8015c26:	80e2      	strh	r2, [r4, #6]
 8015c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c2a:	4798      	blx	r3
 8015c2c:	4620      	mov	r0, r4
 8015c2e:	bd10      	pop	{r4, pc}

08015c30 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8015c30:	b530      	push	{r4, r5, lr}
 8015c32:	8083      	strh	r3, [r0, #4]
 8015c34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015c38:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015c3c:	80c3      	strh	r3, [r0, #6]
 8015c3e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8015c42:	6141      	str	r1, [r0, #20]
 8015c44:	7203      	strb	r3, [r0, #8]
 8015c46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015c4a:	8302      	strh	r2, [r0, #24]
 8015c4c:	7243      	strb	r3, [r0, #9]
 8015c4e:	7a83      	ldrb	r3, [r0, #10]
 8015c50:	f365 0306 	bfi	r3, r5, #0, #7
 8015c54:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8015c58:	f365 13c7 	bfi	r3, r5, #7, #1
 8015c5c:	7283      	strb	r3, [r0, #10]
 8015c5e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8015c62:	72c3      	strb	r3, [r0, #11]
 8015c64:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015c68:	7303      	strb	r3, [r0, #12]
 8015c6a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8015c6e:	81c3      	strh	r3, [r0, #14]
 8015c70:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015c74:	8203      	strh	r3, [r0, #16]
 8015c76:	4b01      	ldr	r3, [pc, #4]	@ (8015c7c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8015c78:	6003      	str	r3, [r0, #0]
 8015c7a:	bd30      	pop	{r4, r5, pc}
 8015c7c:	0802a50c 	.word	0x0802a50c

08015c80 <_ZNK8touchgfx9ConstFont4findEt>:
 8015c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c82:	6944      	ldr	r4, [r0, #20]
 8015c84:	b3bc      	cbz	r4, 8015cf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015c86:	88a3      	ldrh	r3, [r4, #4]
 8015c88:	8b02      	ldrh	r2, [r0, #24]
 8015c8a:	1acb      	subs	r3, r1, r3
 8015c8c:	f102 32ff 	add.w	r2, r2, #4294967295
 8015c90:	d431      	bmi.n	8015cf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015c92:	4293      	cmp	r3, r2
 8015c94:	dd0c      	ble.n	8015cb0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8015c96:	230e      	movs	r3, #14
 8015c98:	fb03 4302 	mla	r3, r3, r2, r4
 8015c9c:	889b      	ldrh	r3, [r3, #4]
 8015c9e:	1a5b      	subs	r3, r3, r1
 8015ca0:	1ad3      	subs	r3, r2, r3
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	db27      	blt.n	8015cf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	bfbc      	itt	lt
 8015caa:	2302      	movlt	r3, #2
 8015cac:	fb92 f3f3 	sdivlt	r3, r2, r3
 8015cb0:	2500      	movs	r5, #0
 8015cb2:	260e      	movs	r6, #14
 8015cb4:	4295      	cmp	r5, r2
 8015cb6:	dc1e      	bgt.n	8015cf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015cb8:	fb06 4003 	mla	r0, r6, r3, r4
 8015cbc:	8887      	ldrh	r7, [r0, #4]
 8015cbe:	42b9      	cmp	r1, r7
 8015cc0:	d01a      	beq.n	8015cf8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8015cc2:	d20d      	bcs.n	8015ce0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8015cc4:	1e5a      	subs	r2, r3, #1
 8015cc6:	4295      	cmp	r5, r2
 8015cc8:	dc15      	bgt.n	8015cf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015cca:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8015cce:	1a5b      	subs	r3, r3, r1
 8015cd0:	1ad3      	subs	r3, r2, r3
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	db0f      	blt.n	8015cf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015cd6:	429d      	cmp	r5, r3
 8015cd8:	ddec      	ble.n	8015cb4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015cda:	1953      	adds	r3, r2, r5
 8015cdc:	105b      	asrs	r3, r3, #1
 8015cde:	e7e9      	b.n	8015cb4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015ce0:	1c5d      	adds	r5, r3, #1
 8015ce2:	42aa      	cmp	r2, r5
 8015ce4:	db07      	blt.n	8015cf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015ce6:	8a43      	ldrh	r3, [r0, #18]
 8015ce8:	1acb      	subs	r3, r1, r3
 8015cea:	442b      	add	r3, r5
 8015cec:	429d      	cmp	r5, r3
 8015cee:	dc02      	bgt.n	8015cf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	dadf      	bge.n	8015cb4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015cf4:	e7f1      	b.n	8015cda <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8015cf6:	2000      	movs	r0, #0
 8015cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015cfa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8015cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	4617      	mov	r7, r2
 8015d00:	461e      	mov	r6, r3
 8015d02:	b911      	cbnz	r1, 8015d0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8015d04:	2500      	movs	r5, #0
 8015d06:	4628      	mov	r0, r5
 8015d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d0a:	290a      	cmp	r1, #10
 8015d0c:	d0fa      	beq.n	8015d04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015d0e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015d12:	4291      	cmp	r1, r2
 8015d14:	d0f6      	beq.n	8015d04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015d16:	f242 020b 	movw	r2, #8203	@ 0x200b
 8015d1a:	4291      	cmp	r1, r2
 8015d1c:	d0f2      	beq.n	8015d04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015d1e:	f7ff ffaf 	bl	8015c80 <_ZNK8touchgfx9ConstFont4findEt>
 8015d22:	4605      	mov	r5, r0
 8015d24:	b950      	cbnz	r0, 8015d3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8015d26:	6823      	ldr	r3, [r4, #0]
 8015d28:	4620      	mov	r0, r4
 8015d2a:	691b      	ldr	r3, [r3, #16]
 8015d2c:	4798      	blx	r3
 8015d2e:	4601      	mov	r1, r0
 8015d30:	4620      	mov	r0, r4
 8015d32:	f7ff ffa5 	bl	8015c80 <_ZNK8touchgfx9ConstFont4findEt>
 8015d36:	4605      	mov	r5, r0
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d0e3      	beq.n	8015d04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015d3c:	6823      	ldr	r3, [r4, #0]
 8015d3e:	4629      	mov	r1, r5
 8015d40:	4620      	mov	r0, r4
 8015d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015d44:	4798      	blx	r3
 8015d46:	6038      	str	r0, [r7, #0]
 8015d48:	6823      	ldr	r3, [r4, #0]
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d4e:	4798      	blx	r3
 8015d50:	7030      	strb	r0, [r6, #0]
 8015d52:	e7d8      	b.n	8015d06 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08015d54 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8015d54:	2000      	movs	r0, #0
 8015d56:	4770      	bx	lr

08015d58 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8015d58:	2001      	movs	r0, #1
 8015d5a:	4770      	bx	lr

08015d5c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8015d5c:	2002      	movs	r0, #2
 8015d5e:	4770      	bx	lr

08015d60 <_ZN8touchgfx6ScreenD1Ev>:
 8015d60:	4770      	bx	lr

08015d62 <_ZN8touchgfx12GestureEventD1Ev>:
 8015d62:	4770      	bx	lr

08015d64 <_ZN8touchgfx9DragEventD1Ev>:
 8015d64:	4770      	bx	lr

08015d66 <_ZN8touchgfx10ClickEventD1Ev>:
 8015d66:	4770      	bx	lr

08015d68 <_ZN8touchgfx10ClickEventD0Ev>:
 8015d68:	b510      	push	{r4, lr}
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	210c      	movs	r1, #12
 8015d6e:	f00e ff30 	bl	8024bd2 <_ZdlPvj>
 8015d72:	4620      	mov	r0, r4
 8015d74:	bd10      	pop	{r4, pc}

08015d76 <_ZN8touchgfx9DragEventD0Ev>:
 8015d76:	b510      	push	{r4, lr}
 8015d78:	4604      	mov	r4, r0
 8015d7a:	2110      	movs	r1, #16
 8015d7c:	f00e ff29 	bl	8024bd2 <_ZdlPvj>
 8015d80:	4620      	mov	r0, r4
 8015d82:	bd10      	pop	{r4, pc}

08015d84 <_ZN8touchgfx12GestureEventD0Ev>:
 8015d84:	b510      	push	{r4, lr}
 8015d86:	4604      	mov	r4, r0
 8015d88:	210c      	movs	r1, #12
 8015d8a:	f00e ff22 	bl	8024bd2 <_ZdlPvj>
 8015d8e:	4620      	mov	r0, r4
 8015d90:	bd10      	pop	{r4, pc}

08015d92 <_ZN8touchgfx6ScreenD0Ev>:
 8015d92:	b510      	push	{r4, lr}
 8015d94:	4604      	mov	r4, r0
 8015d96:	213c      	movs	r1, #60	@ 0x3c
 8015d98:	f00e ff1b 	bl	8024bd2 <_ZdlPvj>
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	bd10      	pop	{r4, pc}

08015da0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8015da0:	b530      	push	{r4, r5, lr}
 8015da2:	460d      	mov	r5, r1
 8015da4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8015da6:	b087      	sub	sp, #28
 8015da8:	4604      	mov	r4, r0
 8015daa:	b301      	cbz	r1, 8015dee <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8015dac:	a801      	add	r0, sp, #4
 8015dae:	f7ff ff2d 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015db2:	892a      	ldrh	r2, [r5, #8]
 8015db4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015db8:	7928      	ldrb	r0, [r5, #4]
 8015dba:	1ad2      	subs	r2, r2, r3
 8015dbc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015dbe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015dc2:	441a      	add	r2, r3
 8015dc4:	896b      	ldrh	r3, [r5, #10]
 8015dc6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8015dca:	f88d 0010 	strb.w	r0, [sp, #16]
 8015dce:	1b5b      	subs	r3, r3, r5
 8015dd0:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8015dd2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015dd4:	442b      	add	r3, r5
 8015dd6:	4d07      	ldr	r5, [pc, #28]	@ (8015df4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8015dd8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015ddc:	a903      	add	r1, sp, #12
 8015dde:	9503      	str	r5, [sp, #12]
 8015de0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015de4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015de8:	6803      	ldr	r3, [r0, #0]
 8015dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015dec:	4798      	blx	r3
 8015dee:	b007      	add	sp, #28
 8015df0:	bd30      	pop	{r4, r5, pc}
 8015df2:	bf00      	nop
 8015df4:	0802a59c 	.word	0x0802a59c

08015df8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8015df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dfc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015dfe:	b08a      	sub	sp, #40	@ 0x28
 8015e00:	4604      	mov	r4, r0
 8015e02:	460d      	mov	r5, r1
 8015e04:	b113      	cbz	r3, 8015e0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8015e06:	790b      	ldrb	r3, [r1, #4]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d044      	beq.n	8015e96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015e0c:	f104 0804 	add.w	r8, r4, #4
 8015e10:	a803      	add	r0, sp, #12
 8015e12:	4641      	mov	r1, r8
 8015e14:	f7ff fefa 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e18:	792b      	ldrb	r3, [r5, #4]
 8015e1a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8015e1e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8015e22:	b983      	cbnz	r3, 8015e46 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8015e24:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8015e28:	892a      	ldrh	r2, [r5, #8]
 8015e2a:	88e9      	ldrh	r1, [r5, #6]
 8015e2c:	4640      	mov	r0, r8
 8015e2e:	1b92      	subs	r2, r2, r6
 8015e30:	9301      	str	r3, [sp, #4]
 8015e32:	1bc9      	subs	r1, r1, r7
 8015e34:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8015e38:	b212      	sxth	r2, r2
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	b209      	sxth	r1, r1
 8015e3e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8015e42:	f7fc fc63 	bl	801270c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8015e46:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015e48:	b329      	cbz	r1, 8015e96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015e4a:	a805      	add	r0, sp, #20
 8015e4c:	f7ff fede 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e50:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015e54:	792b      	ldrb	r3, [r5, #4]
 8015e56:	a907      	add	r1, sp, #28
 8015e58:	1abf      	subs	r7, r7, r2
 8015e5a:	88ea      	ldrh	r2, [r5, #6]
 8015e5c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015e5e:	4417      	add	r7, r2
 8015e60:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8015e62:	f88d 3020 	strb.w	r3, [sp, #32]
 8015e66:	4417      	add	r7, r2
 8015e68:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015e6c:	1ab6      	subs	r6, r6, r2
 8015e6e:	892a      	ldrh	r2, [r5, #8]
 8015e70:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8015e74:	4416      	add	r6, r2
 8015e76:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015e78:	4416      	add	r6, r2
 8015e7a:	4a08      	ldr	r2, [pc, #32]	@ (8015e9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8015e7c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8015e80:	2600      	movs	r6, #0
 8015e82:	9207      	str	r2, [sp, #28]
 8015e84:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8015e88:	6803      	ldr	r3, [r0, #0]
 8015e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e8c:	4798      	blx	r3
 8015e8e:	792b      	ldrb	r3, [r5, #4]
 8015e90:	b10b      	cbz	r3, 8015e96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015e92:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8015e96:	b00a      	add	sp, #40	@ 0x28
 8015e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e9c:	0802a574 	.word	0x0802a574

08015ea0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8015ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea4:	460c      	mov	r4, r1
 8015ea6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8015ea8:	b088      	sub	sp, #32
 8015eaa:	4605      	mov	r5, r0
 8015eac:	2900      	cmp	r1, #0
 8015eae:	d06d      	beq.n	8015f8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8015eb0:	4668      	mov	r0, sp
 8015eb2:	f7ff feab 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015eb6:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8015eb8:	88e3      	ldrh	r3, [r4, #6]
 8015eba:	f9bd 8000 	ldrsh.w	r8, [sp]
 8015ebe:	440b      	add	r3, r1
 8015ec0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8015ec4:	b21b      	sxth	r3, r3
 8015ec6:	4543      	cmp	r3, r8
 8015ec8:	db31      	blt.n	8015f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015eca:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8015ece:	44c4      	add	ip, r8
 8015ed0:	fa0f fc8c 	sxth.w	ip, ip
 8015ed4:	4563      	cmp	r3, ip
 8015ed6:	da2a      	bge.n	8015f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015ed8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8015eda:	8926      	ldrh	r6, [r4, #8]
 8015edc:	4416      	add	r6, r2
 8015ede:	b236      	sxth	r6, r6
 8015ee0:	42be      	cmp	r6, r7
 8015ee2:	db24      	blt.n	8015f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015ee4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015ee8:	4438      	add	r0, r7
 8015eea:	b200      	sxth	r0, r0
 8015eec:	4286      	cmp	r6, r0
 8015eee:	da1e      	bge.n	8015f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015ef0:	8963      	ldrh	r3, [r4, #10]
 8015ef2:	4419      	add	r1, r3
 8015ef4:	b209      	sxth	r1, r1
 8015ef6:	4541      	cmp	r1, r8
 8015ef8:	db08      	blt.n	8015f0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015efa:	4561      	cmp	r1, ip
 8015efc:	da06      	bge.n	8015f0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015efe:	89a3      	ldrh	r3, [r4, #12]
 8015f00:	441a      	add	r2, r3
 8015f02:	b212      	sxth	r2, r2
 8015f04:	42ba      	cmp	r2, r7
 8015f06:	db01      	blt.n	8015f0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015f08:	4282      	cmp	r2, r0
 8015f0a:	db10      	blt.n	8015f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015f0c:	4b21      	ldr	r3, [pc, #132]	@ (8015f94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8015f0e:	a904      	add	r1, sp, #16
 8015f10:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8015f12:	9304      	str	r3, [sp, #16]
 8015f14:	2302      	movs	r3, #2
 8015f16:	f88d 3014 	strb.w	r3, [sp, #20]
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f20:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f24:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f28:	6803      	ldr	r3, [r0, #0]
 8015f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f2c:	4798      	blx	r3
 8015f2e:	1d29      	adds	r1, r5, #4
 8015f30:	a802      	add	r0, sp, #8
 8015f32:	f7ff fe6b 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015f36:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015f3a:	88e0      	ldrh	r0, [r4, #6]
 8015f3c:	eba3 0808 	sub.w	r8, r3, r8
 8015f40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015f44:	7921      	ldrb	r1, [r4, #4]
 8015f46:	fa1f f888 	uxth.w	r8, r8
 8015f4a:	1bdf      	subs	r7, r3, r7
 8015f4c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8015f50:	b2bb      	uxth	r3, r7
 8015f52:	4440      	add	r0, r8
 8015f54:	8922      	ldrh	r2, [r4, #8]
 8015f56:	8967      	ldrh	r7, [r4, #10]
 8015f58:	4460      	add	r0, ip
 8015f5a:	89a4      	ldrh	r4, [r4, #12]
 8015f5c:	441a      	add	r2, r3
 8015f5e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8015f60:	44b8      	add	r8, r7
 8015f62:	4423      	add	r3, r4
 8015f64:	f8ad 0016 	strh.w	r0, [sp, #22]
 8015f68:	4432      	add	r2, r6
 8015f6a:	44e0      	add	r8, ip
 8015f6c:	4433      	add	r3, r6
 8015f6e:	4c0a      	ldr	r4, [pc, #40]	@ (8015f98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8015f70:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8015f72:	f88d 1014 	strb.w	r1, [sp, #20]
 8015f76:	a904      	add	r1, sp, #16
 8015f78:	9404      	str	r4, [sp, #16]
 8015f7a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015f7e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8015f82:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015f86:	6803      	ldr	r3, [r0, #0]
 8015f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f8a:	4798      	blx	r3
 8015f8c:	b008      	add	sp, #32
 8015f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f92:	bf00      	nop
 8015f94:	0802a574 	.word	0x0802a574
 8015f98:	0802a588 	.word	0x0802a588

08015f9c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f9e:	4604      	mov	r4, r0
 8015fa0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8015fa4:	3201      	adds	r2, #1
 8015fa6:	d112      	bne.n	8015fce <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8015fa8:	2500      	movs	r5, #0
 8015faa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015fae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015fb2:	6803      	ldr	r3, [r0, #0]
 8015fb4:	9500      	str	r5, [sp, #0]
 8015fb6:	466d      	mov	r5, sp
 8015fb8:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015fbc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015fc0:	4629      	mov	r1, r5
 8015fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fc4:	4798      	blx	r3
 8015fc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015fca:	e884 0003 	stmia.w	r4, {r0, r1}
 8015fce:	4620      	mov	r0, r4
 8015fd0:	b003      	add	sp, #12
 8015fd2:	bd30      	pop	{r4, r5, pc}

08015fd4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8015fd4:	b513      	push	{r0, r1, r4, lr}
 8015fd6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8015fda:	4604      	mov	r4, r0
 8015fdc:	3301      	adds	r3, #1
 8015fde:	d109      	bne.n	8015ff4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8015fe0:	4601      	mov	r1, r0
 8015fe2:	4668      	mov	r0, sp
 8015fe4:	f7ff fe12 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015fe8:	f8bd 3000 	ldrh.w	r3, [sp]
 8015fec:	8423      	strh	r3, [r4, #32]
 8015fee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015ff2:	8463      	strh	r3, [r4, #34]	@ 0x22
 8015ff4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8015ff8:	b002      	add	sp, #8
 8015ffa:	bd10      	pop	{r4, pc}

08015ffc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8015ffc:	b513      	push	{r0, r1, r4, lr}
 8015ffe:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8016002:	4604      	mov	r4, r0
 8016004:	3301      	adds	r3, #1
 8016006:	d109      	bne.n	801601c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016008:	4601      	mov	r1, r0
 801600a:	4668      	mov	r0, sp
 801600c:	f7ff fdfe 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016010:	f8bd 3000 	ldrh.w	r3, [sp]
 8016014:	8423      	strh	r3, [r4, #32]
 8016016:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801601a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801601c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8016020:	b002      	add	sp, #8
 8016022:	bd10      	pop	{r4, pc}

08016024 <_ZN8touchgfx6ScreenC1Ev>:
 8016024:	b570      	push	{r4, r5, r6, lr}
 8016026:	4b17      	ldr	r3, [pc, #92]	@ (8016084 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8016028:	4605      	mov	r5, r0
 801602a:	4a17      	ldr	r2, [pc, #92]	@ (8016088 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801602c:	2101      	movs	r1, #1
 801602e:	f845 3b04 	str.w	r3, [r5], #4
 8016032:	2300      	movs	r3, #0
 8016034:	6042      	str	r2, [r0, #4]
 8016036:	4604      	mov	r4, r0
 8016038:	8103      	strh	r3, [r0, #8]
 801603a:	8143      	strh	r3, [r0, #10]
 801603c:	8183      	strh	r3, [r0, #12]
 801603e:	81c3      	strh	r3, [r0, #14]
 8016040:	8203      	strh	r3, [r0, #16]
 8016042:	8243      	strh	r3, [r0, #18]
 8016044:	8283      	strh	r3, [r0, #20]
 8016046:	82c3      	strh	r3, [r0, #22]
 8016048:	6203      	str	r3, [r0, #32]
 801604a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801604c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801604e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8016052:	6343      	str	r3, [r0, #52]	@ 0x34
 8016054:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8016058:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801605c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016060:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8016064:	4b09      	ldr	r3, [pc, #36]	@ (801608c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8016066:	4628      	mov	r0, r5
 8016068:	f9b3 6000 	ldrsh.w	r6, [r3]
 801606c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801606e:	4a08      	ldr	r2, [pc, #32]	@ (8016090 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016070:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016074:	4798      	blx	r3
 8016076:	6863      	ldr	r3, [r4, #4]
 8016078:	4628      	mov	r0, r5
 801607a:	4631      	mov	r1, r6
 801607c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801607e:	4798      	blx	r3
 8016080:	4620      	mov	r0, r4
 8016082:	bd70      	pop	{r4, r5, r6, pc}
 8016084:	0802a5b0 	.word	0x0802a5b0
 8016088:	0802a1a8 	.word	0x0802a1a8
 801608c:	2400426e 	.word	0x2400426e
 8016090:	2400426c 	.word	0x2400426c

08016094 <_ZN8touchgfx6Screen4drawEv>:
 8016094:	4b09      	ldr	r3, [pc, #36]	@ (80160bc <_ZN8touchgfx6Screen4drawEv+0x28>)
 8016096:	b507      	push	{r0, r1, r2, lr}
 8016098:	f9b3 2000 	ldrsh.w	r2, [r3]
 801609c:	2100      	movs	r1, #0
 801609e:	4b08      	ldr	r3, [pc, #32]	@ (80160c0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80160a0:	9100      	str	r1, [sp, #0]
 80160a2:	4669      	mov	r1, sp
 80160a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160a8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80160ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80160b0:	6803      	ldr	r3, [r0, #0]
 80160b2:	689b      	ldr	r3, [r3, #8]
 80160b4:	4798      	blx	r3
 80160b6:	b003      	add	sp, #12
 80160b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80160bc:	2400426c 	.word	0x2400426c
 80160c0:	2400426e 	.word	0x2400426e

080160c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80160c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80160cc:	b089      	sub	sp, #36	@ 0x24
 80160ce:	4680      	mov	r8, r0
 80160d0:	460c      	mov	r4, r1
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	4615      	mov	r5, r2
 80160d6:	dd0e      	ble.n	80160f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80160d8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	dd0a      	ble.n	80160f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80160e0:	4628      	mov	r0, r5
 80160e2:	f7ff ff5b 	bl	8015f9c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80160e6:	4621      	mov	r1, r4
 80160e8:	f7fe fb9d 	bl	8014826 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80160ec:	69eb      	ldr	r3, [r5, #28]
 80160ee:	b928      	cbnz	r0, 80160fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80160f0:	461d      	mov	r5, r3
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d1f4      	bne.n	80160e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80160f6:	b009      	add	sp, #36	@ 0x24
 80160f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160fc:	ae04      	add	r6, sp, #16
 80160fe:	2b00      	cmp	r3, #0
 8016100:	f000 80b5 	beq.w	801626e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016104:	682b      	ldr	r3, [r5, #0]
 8016106:	4629      	mov	r1, r5
 8016108:	a802      	add	r0, sp, #8
 801610a:	68db      	ldr	r3, [r3, #12]
 801610c:	4798      	blx	r3
 801610e:	4628      	mov	r0, r5
 8016110:	f7ff ff60 	bl	8015fd4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016114:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016118:	4407      	add	r7, r0
 801611a:	4628      	mov	r0, r5
 801611c:	f7ff ff6e 	bl	8015ffc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016120:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016124:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016128:	b23f      	sxth	r7, r7
 801612a:	4418      	add	r0, r3
 801612c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016130:	4621      	mov	r1, r4
 8016132:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016136:	f8ad 0012 	strh.w	r0, [sp, #18]
 801613a:	4630      	mov	r0, r6
 801613c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016140:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016144:	f7fc fbc4 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 8016148:	4628      	mov	r0, r5
 801614a:	f7ff ff27 	bl	8015f9c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801614e:	ab06      	add	r3, sp, #24
 8016150:	4602      	mov	r2, r0
 8016152:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016156:	e883 0003 	stmia.w	r3, {r0, r1}
 801615a:	4611      	mov	r1, r2
 801615c:	4618      	mov	r0, r3
 801615e:	f7fc fbb7 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 8016162:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016166:	f9b4 1000 	ldrsh.w	r1, [r4]
 801616a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801616e:	4299      	cmp	r1, r3
 8016170:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016174:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016178:	d10b      	bne.n	8016192 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801617a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801617e:	4552      	cmp	r2, sl
 8016180:	d107      	bne.n	8016192 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016182:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016186:	455a      	cmp	r2, fp
 8016188:	d103      	bne.n	8016192 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801618a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801618e:	454a      	cmp	r2, r9
 8016190:	d06d      	beq.n	801626e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016192:	f1bb 0f00 	cmp.w	fp, #0
 8016196:	dd65      	ble.n	8016264 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016198:	f1b9 0f00 	cmp.w	r9, #0
 801619c:	dd62      	ble.n	8016264 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801619e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80161a2:	fa1f f08a 	uxth.w	r0, sl
 80161a6:	4552      	cmp	r2, sl
 80161a8:	9000      	str	r0, [sp, #0]
 80161aa:	da12      	bge.n	80161d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80161ac:	9301      	str	r3, [sp, #4]
 80161ae:	9b00      	ldr	r3, [sp, #0]
 80161b0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80161b4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80161b8:	1a9a      	subs	r2, r3, r2
 80161ba:	f8ad 1010 	strh.w	r1, [sp, #16]
 80161be:	4631      	mov	r1, r6
 80161c0:	f8ad 0014 	strh.w	r0, [sp, #20]
 80161c4:	4640      	mov	r0, r8
 80161c6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80161ca:	69ea      	ldr	r2, [r5, #28]
 80161cc:	f7ff ff7a 	bl	80160c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80161d0:	9b01      	ldr	r3, [sp, #4]
 80161d2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80161d6:	b29f      	uxth	r7, r3
 80161d8:	429a      	cmp	r2, r3
 80161da:	da0d      	bge.n	80161f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80161dc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80161e0:	1aba      	subs	r2, r7, r2
 80161e2:	f8ad a012 	strh.w	sl, [sp, #18]
 80161e6:	4631      	mov	r1, r6
 80161e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80161ec:	4640      	mov	r0, r8
 80161ee:	f8ad 9016 	strh.w	r9, [sp, #22]
 80161f2:	69ea      	ldr	r2, [r5, #28]
 80161f4:	f7ff ff66 	bl	80160c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80161f8:	8822      	ldrh	r2, [r4, #0]
 80161fa:	445f      	add	r7, fp
 80161fc:	88a3      	ldrh	r3, [r4, #4]
 80161fe:	b2bf      	uxth	r7, r7
 8016200:	4413      	add	r3, r2
 8016202:	b23a      	sxth	r2, r7
 8016204:	b29b      	uxth	r3, r3
 8016206:	b219      	sxth	r1, r3
 8016208:	4291      	cmp	r1, r2
 801620a:	dd0d      	ble.n	8016228 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801620c:	1bdb      	subs	r3, r3, r7
 801620e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016212:	f8ad a012 	strh.w	sl, [sp, #18]
 8016216:	4631      	mov	r1, r6
 8016218:	f8ad 3014 	strh.w	r3, [sp, #20]
 801621c:	4640      	mov	r0, r8
 801621e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016222:	69ea      	ldr	r2, [r5, #28]
 8016224:	f7ff ff4e 	bl	80160c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016228:	88e2      	ldrh	r2, [r4, #6]
 801622a:	8863      	ldrh	r3, [r4, #2]
 801622c:	4413      	add	r3, r2
 801622e:	9a00      	ldr	r2, [sp, #0]
 8016230:	444a      	add	r2, r9
 8016232:	b29b      	uxth	r3, r3
 8016234:	fa1f f982 	uxth.w	r9, r2
 8016238:	b219      	sxth	r1, r3
 801623a:	fa0f f289 	sxth.w	r2, r9
 801623e:	428a      	cmp	r2, r1
 8016240:	da15      	bge.n	801626e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016242:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016246:	eba3 0309 	sub.w	r3, r3, r9
 801624a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801624e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016252:	4631      	mov	r1, r6
 8016254:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016258:	f8ad 2012 	strh.w	r2, [sp, #18]
 801625c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016260:	69ea      	ldr	r2, [r5, #28]
 8016262:	e001      	b.n	8016268 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016264:	69ea      	ldr	r2, [r5, #28]
 8016266:	4621      	mov	r1, r4
 8016268:	4640      	mov	r0, r8
 801626a:	f7ff ff2b 	bl	80160c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801626e:	4628      	mov	r0, r5
 8016270:	f7ff fe94 	bl	8015f9c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016274:	6861      	ldr	r1, [r4, #4]
 8016276:	4602      	mov	r2, r0
 8016278:	4633      	mov	r3, r6
 801627a:	6820      	ldr	r0, [r4, #0]
 801627c:	c303      	stmia	r3!, {r0, r1}
 801627e:	4611      	mov	r1, r2
 8016280:	4630      	mov	r0, r6
 8016282:	f7fc fb25 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 8016286:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801628a:	2b00      	cmp	r3, #0
 801628c:	f77f af33 	ble.w	80160f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016290:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016294:	2b00      	cmp	r3, #0
 8016296:	f77f af2e 	ble.w	80160f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801629a:	4628      	mov	r0, r5
 801629c:	f7ff fe9a 	bl	8015fd4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80162a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80162a4:	1a18      	subs	r0, r3, r0
 80162a6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80162aa:	4628      	mov	r0, r5
 80162ac:	f7ff fea6 	bl	8015ffc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80162b0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80162b4:	4631      	mov	r1, r6
 80162b6:	1a18      	subs	r0, r3, r0
 80162b8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80162bc:	4628      	mov	r0, r5
 80162be:	682b      	ldr	r3, [r5, #0]
 80162c0:	689b      	ldr	r3, [r3, #8]
 80162c2:	4798      	blx	r3
 80162c4:	e717      	b.n	80160f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080162c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80162c6:	b570      	push	{r4, r5, r6, lr}
 80162c8:	1d06      	adds	r6, r0, #4
 80162ca:	b086      	sub	sp, #24
 80162cc:	460c      	mov	r4, r1
 80162ce:	2300      	movs	r3, #0
 80162d0:	4631      	mov	r1, r6
 80162d2:	4605      	mov	r5, r0
 80162d4:	a802      	add	r0, sp, #8
 80162d6:	9301      	str	r3, [sp, #4]
 80162d8:	f7ff fc98 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80162dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80162e0:	8822      	ldrh	r2, [r4, #0]
 80162e2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80162e6:	1ad2      	subs	r2, r2, r3
 80162e8:	8863      	ldrh	r3, [r4, #2]
 80162ea:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80162ee:	1a5b      	subs	r3, r3, r1
 80162f0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80162f4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80162f8:	aa01      	add	r2, sp, #4
 80162fa:	f8ad 0014 	strh.w	r0, [sp, #20]
 80162fe:	4630      	mov	r0, r6
 8016300:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016304:	a904      	add	r1, sp, #16
 8016306:	f8ad 3012 	strh.w	r3, [sp, #18]
 801630a:	f7fc fbb9 	bl	8012a80 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801630e:	9a01      	ldr	r2, [sp, #4]
 8016310:	b11a      	cbz	r2, 801631a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8016312:	4621      	mov	r1, r4
 8016314:	4628      	mov	r0, r5
 8016316:	f7ff fed5 	bl	80160c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801631a:	b006      	add	sp, #24
 801631c:	bd70      	pop	{r4, r5, r6, pc}

0801631e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801631e:	4602      	mov	r2, r0
 8016320:	b530      	push	{r4, r5, lr}
 8016322:	4604      	mov	r4, r0
 8016324:	b085      	sub	sp, #20
 8016326:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801632a:	460d      	mov	r5, r1
 801632c:	466b      	mov	r3, sp
 801632e:	6851      	ldr	r1, [r2, #4]
 8016330:	c303      	stmia	r3!, {r0, r1}
 8016332:	4629      	mov	r1, r5
 8016334:	4668      	mov	r0, sp
 8016336:	f7fc facb 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 801633a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801633e:	b12b      	cbz	r3, 801634c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016340:	4669      	mov	r1, sp
 8016342:	4620      	mov	r0, r4
 8016344:	f7ff ffbf 	bl	80162c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016348:	b005      	add	sp, #20
 801634a:	bd30      	pop	{r4, r5, pc}
 801634c:	3404      	adds	r4, #4
 801634e:	a802      	add	r0, sp, #8
 8016350:	4621      	mov	r1, r4
 8016352:	f7ff fc5b 	bl	8015c0c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016356:	f8bd 3000 	ldrh.w	r3, [sp]
 801635a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801635e:	4669      	mov	r1, sp
 8016360:	4620      	mov	r0, r4
 8016362:	1a9b      	subs	r3, r3, r2
 8016364:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016368:	f8ad 3000 	strh.w	r3, [sp]
 801636c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016370:	1a9b      	subs	r3, r3, r2
 8016372:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016376:	f7fc fb4a 	bl	8012a0e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801637a:	e7e5      	b.n	8016348 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801637c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801637c:	460b      	mov	r3, r1
 801637e:	680a      	ldr	r2, [r1, #0]
 8016380:	1d01      	adds	r1, r0, #4
 8016382:	6992      	ldr	r2, [r2, #24]
 8016384:	4618      	mov	r0, r3
 8016386:	4710      	bx	r2

08016388 <_ZN8touchgfx12TextProviderC1Ev>:
 8016388:	b538      	push	{r3, r4, r5, lr}
 801638a:	2500      	movs	r5, #0
 801638c:	2302      	movs	r3, #2
 801638e:	4604      	mov	r4, r0
 8016390:	220e      	movs	r2, #14
 8016392:	7403      	strb	r3, [r0, #16]
 8016394:	4629      	mov	r1, r5
 8016396:	6145      	str	r5, [r0, #20]
 8016398:	7605      	strb	r5, [r0, #24]
 801639a:	83c5      	strh	r5, [r0, #30]
 801639c:	8405      	strh	r5, [r0, #32]
 801639e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80163a0:	8705      	strh	r5, [r0, #56]	@ 0x38
 80163a2:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80163a4:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80163a8:	e9c0 5500 	strd	r5, r5, [r0]
 80163ac:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80163b0:	304c      	adds	r0, #76	@ 0x4c
 80163b2:	f00f fd29 	bl	8025e08 <memset>
 80163b6:	2301      	movs	r3, #1
 80163b8:	4620      	mov	r0, r4
 80163ba:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80163be:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80163c2:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 80163c6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 80163ca:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 80163ce:	f7fb f81d 	bl	801140c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80163d2:	4620      	mov	r0, r4
 80163d4:	bd38      	pop	{r3, r4, r5, pc}

080163d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80163d6:	b530      	push	{r4, r5, lr}
 80163d8:	2500      	movs	r5, #0
 80163da:	2401      	movs	r4, #1
 80163dc:	6843      	ldr	r3, [r0, #4]
 80163de:	b913      	cbnz	r3, 80163e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80163e0:	6803      	ldr	r3, [r0, #0]
 80163e2:	b313      	cbz	r3, 801642a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80163e4:	6043      	str	r3, [r0, #4]
 80163e6:	7e03      	ldrb	r3, [r0, #24]
 80163e8:	b143      	cbz	r3, 80163fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80163ea:	6943      	ldr	r3, [r0, #20]
 80163ec:	b12b      	cbz	r3, 80163fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80163ee:	881a      	ldrh	r2, [r3, #0]
 80163f0:	b11a      	cbz	r2, 80163fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80163f2:	1c9a      	adds	r2, r3, #2
 80163f4:	6142      	str	r2, [r0, #20]
 80163f6:	8818      	ldrh	r0, [r3, #0]
 80163f8:	bd30      	pop	{r4, r5, pc}
 80163fa:	7605      	strb	r5, [r0, #24]
 80163fc:	6843      	ldr	r3, [r0, #4]
 80163fe:	8819      	ldrh	r1, [r3, #0]
 8016400:	b199      	cbz	r1, 801642a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016402:	1c9a      	adds	r2, r3, #2
 8016404:	2902      	cmp	r1, #2
 8016406:	6042      	str	r2, [r0, #4]
 8016408:	d1f5      	bne.n	80163f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801640a:	7c03      	ldrb	r3, [r0, #16]
 801640c:	2b01      	cmp	r3, #1
 801640e:	d8e5      	bhi.n	80163dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016410:	1c5a      	adds	r2, r3, #1
 8016412:	3302      	adds	r3, #2
 8016414:	7402      	strb	r2, [r0, #16]
 8016416:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801641a:	6143      	str	r3, [r0, #20]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d0dd      	beq.n	80163dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016420:	881b      	ldrh	r3, [r3, #0]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d0da      	beq.n	80163dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016426:	7604      	strb	r4, [r0, #24]
 8016428:	e7d8      	b.n	80163dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801642a:	2000      	movs	r0, #0
 801642c:	e7e4      	b.n	80163f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801642e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801642e:	6001      	str	r1, [r0, #0]
 8016430:	2100      	movs	r1, #0
 8016432:	b430      	push	{r4, r5}
 8016434:	6041      	str	r1, [r0, #4]
 8016436:	6815      	ldr	r5, [r2, #0]
 8016438:	6085      	str	r5, [r0, #8]
 801643a:	6852      	ldr	r2, [r2, #4]
 801643c:	6443      	str	r3, [r0, #68]	@ 0x44
 801643e:	9b02      	ldr	r3, [sp, #8]
 8016440:	60c2      	str	r2, [r0, #12]
 8016442:	7401      	strb	r1, [r0, #16]
 8016444:	6141      	str	r1, [r0, #20]
 8016446:	7601      	strb	r1, [r0, #24]
 8016448:	8701      	strh	r1, [r0, #56]	@ 0x38
 801644a:	8401      	strh	r1, [r0, #32]
 801644c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8016450:	6483      	str	r3, [r0, #72]	@ 0x48
 8016452:	bc30      	pop	{r4, r5}
 8016454:	f7fa bfda 	b.w	801140c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016458 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801645a:	4605      	mov	r5, r0
 801645c:	4608      	mov	r0, r1
 801645e:	b1f1      	cbz	r1, 801649e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8016460:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8016464:	460b      	mov	r3, r1
 8016466:	f101 0708 	add.w	r7, r1, #8
 801646a:	4622      	mov	r2, r4
 801646c:	6818      	ldr	r0, [r3, #0]
 801646e:	3308      	adds	r3, #8
 8016470:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016474:	4626      	mov	r6, r4
 8016476:	42bb      	cmp	r3, r7
 8016478:	c603      	stmia	r6!, {r0, r1}
 801647a:	4634      	mov	r4, r6
 801647c:	d1f6      	bne.n	801646c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801647e:	6818      	ldr	r0, [r3, #0]
 8016480:	6030      	str	r0, [r6, #0]
 8016482:	4610      	mov	r0, r2
 8016484:	889b      	ldrh	r3, [r3, #4]
 8016486:	80b3      	strh	r3, [r6, #4]
 8016488:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801648c:	015b      	lsls	r3, r3, #5
 801648e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016492:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8016496:	430b      	orrs	r3, r1
 8016498:	425b      	negs	r3, r3
 801649a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801649e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164a0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80164a0:	b538      	push	{r3, r4, r5, lr}
 80164a2:	460c      	mov	r4, r1
 80164a4:	6811      	ldr	r1, [r2, #0]
 80164a6:	4610      	mov	r0, r2
 80164a8:	68cd      	ldr	r5, [r1, #12]
 80164aa:	4619      	mov	r1, r3
 80164ac:	47a8      	blx	r5
 80164ae:	2800      	cmp	r0, #0
 80164b0:	bf08      	it	eq
 80164b2:	4620      	moveq	r0, r4
 80164b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080164b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80164b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ba:	4604      	mov	r4, r0
 80164bc:	4615      	mov	r5, r2
 80164be:	4608      	mov	r0, r1
 80164c0:	b93a      	cbnz	r2, 80164d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80164c2:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 80164c6:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80164ca:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 80164ce:	4628      	mov	r0, r5
 80164d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164d2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80164d6:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 80164da:	8893      	ldrh	r3, [r2, #4]
 80164dc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80164e0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80164e4:	79ee      	ldrb	r6, [r5, #7]
 80164e6:	4316      	orrs	r6, r2
 80164e8:	19da      	adds	r2, r3, r7
 80164ea:	b291      	uxth	r1, r2
 80164ec:	b2b7      	uxth	r7, r6
 80164ee:	291d      	cmp	r1, #29
 80164f0:	d87b      	bhi.n	80165ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80164f2:	2201      	movs	r2, #1
 80164f4:	10f6      	asrs	r6, r6, #3
 80164f6:	408a      	lsls	r2, r1
 80164f8:	4974      	ldr	r1, [pc, #464]	@ (80166cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80164fa:	420a      	tst	r2, r1
 80164fc:	d12e      	bne.n	801655c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80164fe:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8016502:	d072      	beq.n	80165ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8016504:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8016508:	462b      	mov	r3, r5
 801650a:	f105 0e08 	add.w	lr, r5, #8
 801650e:	4615      	mov	r5, r2
 8016510:	6818      	ldr	r0, [r3, #0]
 8016512:	3308      	adds	r3, #8
 8016514:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016518:	4694      	mov	ip, r2
 801651a:	4573      	cmp	r3, lr
 801651c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016520:	4662      	mov	r2, ip
 8016522:	d1f5      	bne.n	8016510 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8016524:	6818      	ldr	r0, [r3, #0]
 8016526:	f8cc 0000 	str.w	r0, [ip]
 801652a:	889b      	ldrh	r3, [r3, #4]
 801652c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016530:	b2b3      	uxth	r3, r6
 8016532:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8016536:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801653a:	1aca      	subs	r2, r1, r3
 801653c:	1bcf      	subs	r7, r1, r7
 801653e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8016542:	b292      	uxth	r2, r2
 8016544:	1afb      	subs	r3, r7, r3
 8016546:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801654a:	10d2      	asrs	r2, r2, #3
 801654c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8016550:	4302      	orrs	r2, r0
 8016552:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8016556:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801655a:	e7b8      	b.n	80164ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801655c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801655e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016562:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8016564:	f640 6333 	movw	r3, #3635	@ 0xe33
 8016568:	4299      	cmp	r1, r3
 801656a:	d110      	bne.n	801658e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801656c:	6803      	ldr	r3, [r0, #0]
 801656e:	68db      	ldr	r3, [r3, #12]
 8016570:	4798      	blx	r3
 8016572:	7b41      	ldrb	r1, [r0, #13]
 8016574:	00cb      	lsls	r3, r1, #3
 8016576:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801657a:	7a03      	ldrb	r3, [r0, #8]
 801657c:	0648      	lsls	r0, r1, #25
 801657e:	ea43 0302 	orr.w	r3, r3, r2
 8016582:	bf44      	itt	mi
 8016584:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016588:	b21b      	sxthmi	r3, r3
 801658a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801658e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8016592:	462a      	mov	r2, r5
 8016594:	f105 0c08 	add.w	ip, r5, #8
 8016598:	443b      	add	r3, r7
 801659a:	4433      	add	r3, r6
 801659c:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 80165a0:	b29b      	uxth	r3, r3
 80165a2:	4635      	mov	r5, r6
 80165a4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80165a8:	6810      	ldr	r0, [r2, #0]
 80165aa:	3208      	adds	r2, #8
 80165ac:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80165b0:	4637      	mov	r7, r6
 80165b2:	4562      	cmp	r2, ip
 80165b4:	c703      	stmia	r7!, {r0, r1}
 80165b6:	463e      	mov	r6, r7
 80165b8:	d1f6      	bne.n	80165a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80165ba:	6810      	ldr	r0, [r2, #0]
 80165bc:	6038      	str	r0, [r7, #0]
 80165be:	8892      	ldrh	r2, [r2, #4]
 80165c0:	80ba      	strh	r2, [r7, #4]
 80165c2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80165c6:	10db      	asrs	r3, r3, #3
 80165c8:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80165cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80165d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80165d4:	4313      	orrs	r3, r2
 80165d6:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 80165da:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80165de:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 80165e2:	1a9b      	subs	r3, r3, r2
 80165e4:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 80165e8:	e771      	b.n	80164ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80165ea:	f023 0204 	bic.w	r2, r3, #4
 80165ee:	f640 611b 	movw	r1, #3611	@ 0xe1b
 80165f2:	428a      	cmp	r2, r1
 80165f4:	d003      	beq.n	80165fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80165f6:	f640 621d 	movw	r2, #3613	@ 0xe1d
 80165fa:	4293      	cmp	r3, r2
 80165fc:	d120      	bne.n	8016640 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80165fe:	3b01      	subs	r3, #1
 8016600:	4602      	mov	r2, r0
 8016602:	4629      	mov	r1, r5
 8016604:	4620      	mov	r0, r4
 8016606:	b29b      	uxth	r3, r3
 8016608:	f7ff ff4a 	bl	80164a0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801660c:	7b41      	ldrb	r1, [r0, #13]
 801660e:	00cb      	lsls	r3, r1, #3
 8016610:	0649      	lsls	r1, r1, #25
 8016612:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016616:	7a03      	ldrb	r3, [r0, #8]
 8016618:	ea43 0302 	orr.w	r3, r3, r2
 801661c:	bf44      	itt	mi
 801661e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016622:	b21b      	sxthmi	r3, r3
 8016624:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016628:	7b6b      	ldrb	r3, [r5, #13]
 801662a:	7aaa      	ldrb	r2, [r5, #10]
 801662c:	005b      	lsls	r3, r3, #1
 801662e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016632:	4313      	orrs	r3, r2
 8016634:	115a      	asrs	r2, r3, #5
 8016636:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801663a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801663e:	e035      	b.n	80166ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8016640:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8016644:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 8016648:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801664c:	7a2a      	ldrb	r2, [r5, #8]
 801664e:	ea42 0201 	orr.w	r2, r2, r1
 8016652:	f640 6109 	movw	r1, #3593	@ 0xe09
 8016656:	bf1c      	itt	ne
 8016658:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801665c:	b212      	sxthne	r2, r2
 801665e:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8016662:	f023 0210 	bic.w	r2, r3, #16
 8016666:	428a      	cmp	r2, r1
 8016668:	d003      	beq.n	8016672 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801666a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801666e:	4293      	cmp	r3, r2
 8016670:	d129      	bne.n	80166c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8016672:	7b6e      	ldrb	r6, [r5, #13]
 8016674:	4629      	mov	r1, r5
 8016676:	0076      	lsls	r6, r6, #1
 8016678:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801667c:	7aae      	ldrb	r6, [r5, #10]
 801667e:	4316      	orrs	r6, r2
 8016680:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016684:	4293      	cmp	r3, r2
 8016686:	4602      	mov	r2, r0
 8016688:	4620      	mov	r0, r4
 801668a:	bf16      	itet	ne
 801668c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016690:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8016694:	b29b      	uxthne	r3, r3
 8016696:	f7ff ff03 	bl	80164a0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801669a:	7b43      	ldrb	r3, [r0, #13]
 801669c:	7a82      	ldrb	r2, [r0, #10]
 801669e:	005b      	lsls	r3, r3, #1
 80166a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80166a4:	4313      	orrs	r3, r2
 80166a6:	1af6      	subs	r6, r6, r3
 80166a8:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 80166ac:	7b69      	ldrb	r1, [r5, #13]
 80166ae:	00cb      	lsls	r3, r1, #3
 80166b0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80166b4:	7a2b      	ldrb	r3, [r5, #8]
 80166b6:	4313      	orrs	r3, r2
 80166b8:	064a      	lsls	r2, r1, #25
 80166ba:	bf44      	itt	mi
 80166bc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80166c0:	b21b      	sxthmi	r3, r3
 80166c2:	1bdb      	subs	r3, r3, r7
 80166c4:	e747      	b.n	8016556 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80166c6:	2300      	movs	r3, #0
 80166c8:	e7b7      	b.n	801663a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80166ca:	bf00      	nop
 80166cc:	3fc00079 	.word	0x3fc00079

080166d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80166d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166d4:	4604      	mov	r4, r0
 80166d6:	b942      	cbnz	r2, 80166ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80166d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80166dc:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80166e0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80166e4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80166e8:	e047      	b.n	801677a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80166ea:	7b51      	ldrb	r1, [r2, #13]
 80166ec:	8893      	ldrh	r3, [r2, #4]
 80166ee:	010d      	lsls	r5, r1, #4
 80166f0:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80166f4:	79d5      	ldrb	r5, [r2, #7]
 80166f6:	4305      	orrs	r5, r0
 80166f8:	2d04      	cmp	r5, #4
 80166fa:	bfcc      	ite	gt
 80166fc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016700:	f04f 0e01 	movle.w	lr, #1
 8016704:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8016708:	f200 80ab 	bhi.w	8016862 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801670c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8016710:	4283      	cmp	r3, r0
 8016712:	d216      	bcs.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016714:	f240 605b 	movw	r0, #1627	@ 0x65b
 8016718:	4283      	cmp	r3, r0
 801671a:	d859      	bhi.n	80167d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801671c:	f240 6057 	movw	r0, #1623	@ 0x657
 8016720:	4283      	cmp	r3, r0
 8016722:	d20e      	bcs.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016724:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016728:	d24a      	bcs.n	80167c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801672a:	f240 604e 	movw	r0, #1614	@ 0x64e
 801672e:	4283      	cmp	r3, r0
 8016730:	d207      	bcs.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016732:	f240 601a 	movw	r0, #1562	@ 0x61a
 8016736:	4283      	cmp	r3, r0
 8016738:	d02a      	beq.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801673a:	d821      	bhi.n	8016780 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801673c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8016740:	d35b      	bcc.n	80167fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016742:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8016746:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801674a:	f040 80d0 	bne.w	80168ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801674e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8016752:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016756:	f040 80ca 	bne.w	80168ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801675a:	00cb      	lsls	r3, r1, #3
 801675c:	0649      	lsls	r1, r1, #25
 801675e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016762:	7a13      	ldrb	r3, [r2, #8]
 8016764:	ea43 0300 	orr.w	r3, r3, r0
 8016768:	bf44      	itt	mi
 801676a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801676e:	b21b      	sxthmi	r3, r3
 8016770:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016774:	1b5d      	subs	r5, r3, r5
 8016776:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801677a:	4610      	mov	r0, r2
 801677c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016780:	f240 604b 	movw	r0, #1611	@ 0x64b
 8016784:	4283      	cmp	r3, r0
 8016786:	d338      	bcc.n	80167fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016788:	f240 604c 	movw	r0, #1612	@ 0x64c
 801678c:	4283      	cmp	r3, r0
 801678e:	d9d8      	bls.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016790:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8016794:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8016798:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801679c:	f040 80f3 	bne.w	8016986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80167a0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80167a4:	f040 80ef 	bne.w	8016986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80167a8:	00cb      	lsls	r3, r1, #3
 80167aa:	064e      	lsls	r6, r1, #25
 80167ac:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80167b0:	7a13      	ldrb	r3, [r2, #8]
 80167b2:	ea43 0300 	orr.w	r3, r3, r0
 80167b6:	bf44      	itt	mi
 80167b8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80167bc:	b21b      	sxthmi	r3, r3
 80167be:	e7d9      	b.n	8016774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80167c0:	f240 6054 	movw	r0, #1620	@ 0x654
 80167c4:	4283      	cmp	r3, r0
 80167c6:	d8e3      	bhi.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80167c8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80167cc:	d9e0      	bls.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80167ce:	e7b8      	b.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80167d0:	f240 6074 	movw	r0, #1652	@ 0x674
 80167d4:	4283      	cmp	r3, r0
 80167d6:	d0b4      	beq.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80167d8:	d82d      	bhi.n	8016836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80167da:	f240 605e 	movw	r0, #1630	@ 0x65e
 80167de:	4283      	cmp	r3, r0
 80167e0:	d804      	bhi.n	80167ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80167e2:	f240 605d 	movw	r0, #1629	@ 0x65d
 80167e6:	4283      	cmp	r3, r0
 80167e8:	d3d2      	bcc.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80167ea:	e7aa      	b.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80167ec:	f240 605f 	movw	r0, #1631	@ 0x65f
 80167f0:	4283      	cmp	r3, r0
 80167f2:	d0cd      	beq.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80167f4:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80167f8:	d0a3      	beq.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80167fa:	00cb      	lsls	r3, r1, #3
 80167fc:	0649      	lsls	r1, r1, #25
 80167fe:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016802:	7a13      	ldrb	r3, [r2, #8]
 8016804:	ea43 0300 	orr.w	r3, r3, r0
 8016808:	bf44      	itt	mi
 801680a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801680e:	b21b      	sxthmi	r3, r3
 8016810:	1b5d      	subs	r5, r3, r5
 8016812:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016816:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801681a:	7b53      	ldrb	r3, [r2, #13]
 801681c:	015b      	lsls	r3, r3, #5
 801681e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016822:	7993      	ldrb	r3, [r2, #6]
 8016824:	430b      	orrs	r3, r1
 8016826:	2105      	movs	r1, #5
 8016828:	005b      	lsls	r3, r3, #1
 801682a:	fb93 f3f1 	sdiv	r3, r3, r1
 801682e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016832:	440b      	add	r3, r1
 8016834:	e756      	b.n	80166e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016836:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801683a:	4283      	cmp	r3, r0
 801683c:	d809      	bhi.n	8016852 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801683e:	f240 60df 	movw	r0, #1759	@ 0x6df
 8016842:	4283      	cmp	r3, r0
 8016844:	f4bf af7d 	bcs.w	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016848:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801684c:	2b05      	cmp	r3, #5
 801684e:	d8d4      	bhi.n	80167fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016850:	e777      	b.n	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016852:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8016856:	4283      	cmp	r3, r0
 8016858:	d09a      	beq.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801685a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801685e:	4283      	cmp	r3, r0
 8016860:	e7ca      	b.n	80167f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016862:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8016866:	d22b      	bcs.n	80168c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8016868:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801686c:	4283      	cmp	r3, r0
 801686e:	d28f      	bcs.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016870:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8016874:	4283      	cmp	r3, r0
 8016876:	d816      	bhi.n	80168a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8016878:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801687c:	4283      	cmp	r3, r0
 801687e:	f4bf af60 	bcs.w	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016882:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8016886:	4283      	cmp	r3, r0
 8016888:	d80a      	bhi.n	80168a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801688a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801688e:	4283      	cmp	r3, r0
 8016890:	f4bf af57 	bcs.w	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016894:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8016898:	4283      	cmp	r3, r0
 801689a:	f43f af79 	beq.w	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801689e:	e7ac      	b.n	80167fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80168a0:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 80168a4:	e7f8      	b.n	8016898 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80168a6:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 80168aa:	4283      	cmp	r3, r0
 80168ac:	d802      	bhi.n	80168b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80168ae:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80168b2:	e798      	b.n	80167e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80168b4:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 80168b8:	4283      	cmp	r3, r0
 80168ba:	f47f af42 	bne.w	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80168be:	e767      	b.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80168c0:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80168c4:	4283      	cmp	r3, r0
 80168c6:	f43f af63 	beq.w	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80168ca:	d802      	bhi.n	80168d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80168cc:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80168d0:	e7f2      	b.n	80168b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80168d2:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80168d6:	4283      	cmp	r3, r0
 80168d8:	d805      	bhi.n	80168e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80168da:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80168de:	4283      	cmp	r3, r0
 80168e0:	f4ff af2f 	bcc.w	8016742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80168e4:	e754      	b.n	8016790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80168e6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80168ea:	4283      	cmp	r3, r0
 80168ec:	e7af      	b.n	801684e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80168ee:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80168f2:	4617      	mov	r7, r2
 80168f4:	f102 0808 	add.w	r8, r2, #8
 80168f8:	4666      	mov	r6, ip
 80168fa:	6838      	ldr	r0, [r7, #0]
 80168fc:	3708      	adds	r7, #8
 80168fe:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016902:	46e6      	mov	lr, ip
 8016904:	4547      	cmp	r7, r8
 8016906:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801690a:	46f4      	mov	ip, lr
 801690c:	d1f5      	bne.n	80168fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801690e:	6838      	ldr	r0, [r7, #0]
 8016910:	f8ce 0000 	str.w	r0, [lr]
 8016914:	88b9      	ldrh	r1, [r7, #4]
 8016916:	f8ae 1004 	strh.w	r1, [lr, #4]
 801691a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801691e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016922:	d009      	beq.n	8016938 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8016924:	7b51      	ldrb	r1, [r2, #13]
 8016926:	7992      	ldrb	r2, [r2, #6]
 8016928:	0149      	lsls	r1, r1, #5
 801692a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801692e:	4311      	orrs	r1, r2
 8016930:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016934:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8016938:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801693c:	b2ad      	uxth	r5, r5
 801693e:	d00d      	beq.n	801695c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8016940:	442b      	add	r3, r5
 8016942:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8016946:	b29b      	uxth	r3, r3
 8016948:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801694c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016950:	10db      	asrs	r3, r3, #3
 8016952:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016956:	4313      	orrs	r3, r2
 8016958:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801695c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8016960:	00cb      	lsls	r3, r1, #3
 8016962:	064f      	lsls	r7, r1, #25
 8016964:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016968:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801696c:	ea43 0302 	orr.w	r3, r3, r2
 8016970:	bf44      	itt	mi
 8016972:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016976:	b21b      	sxthmi	r3, r3
 8016978:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801697c:	1b5b      	subs	r3, r3, r5
 801697e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8016982:	4632      	mov	r2, r6
 8016984:	e6f9      	b.n	801677a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016986:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801698a:	4617      	mov	r7, r2
 801698c:	f102 0908 	add.w	r9, r2, #8
 8016990:	4666      	mov	r6, ip
 8016992:	6838      	ldr	r0, [r7, #0]
 8016994:	3708      	adds	r7, #8
 8016996:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801699a:	46e0      	mov	r8, ip
 801699c:	454f      	cmp	r7, r9
 801699e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80169a2:	46c4      	mov	ip, r8
 80169a4:	d1f5      	bne.n	8016992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80169a6:	6838      	ldr	r0, [r7, #0]
 80169a8:	f8c8 0000 	str.w	r0, [r8]
 80169ac:	88b9      	ldrh	r1, [r7, #4]
 80169ae:	f8a8 1004 	strh.w	r1, [r8, #4]
 80169b2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80169b6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80169ba:	d009      	beq.n	80169d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80169bc:	7b51      	ldrb	r1, [r2, #13]
 80169be:	7992      	ldrb	r2, [r2, #6]
 80169c0:	0149      	lsls	r1, r1, #5
 80169c2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80169c6:	4311      	orrs	r1, r2
 80169c8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80169cc:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80169d0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80169d4:	d00e      	beq.n	80169f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80169d6:	eba3 030e 	sub.w	r3, r3, lr
 80169da:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80169de:	b29b      	uxth	r3, r3
 80169e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80169e4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80169e8:	10db      	asrs	r3, r3, #3
 80169ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80169ee:	4313      	orrs	r3, r2
 80169f0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80169f4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80169f8:	00cb      	lsls	r3, r1, #3
 80169fa:	0648      	lsls	r0, r1, #25
 80169fc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016a00:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8016a04:	ea43 0302 	orr.w	r3, r3, r2
 8016a08:	bf44      	itt	mi
 8016a0a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016a0e:	b21b      	sxthmi	r3, r3
 8016a10:	1b5d      	subs	r5, r3, r5
 8016a12:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016a16:	e7b4      	b.n	8016982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016a18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a1c:	461e      	mov	r6, r3
 8016a1e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016a20:	4604      	mov	r4, r0
 8016a22:	4617      	mov	r7, r2
 8016a24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016a28:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016a2c:	f7fa fc9c 	bl	8011368 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016a30:	4605      	mov	r5, r0
 8016a32:	b918      	cbnz	r0, 8016a3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8016a34:	6030      	str	r0, [r6, #0]
 8016a36:	4628      	mov	r0, r5
 8016a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	4601      	mov	r1, r0
 8016a40:	4638      	mov	r0, r7
 8016a42:	68db      	ldr	r3, [r3, #12]
 8016a44:	4798      	blx	r3
 8016a46:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8016a4a:	4602      	mov	r2, r0
 8016a4c:	6030      	str	r0, [r6, #0]
 8016a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016a52:	d213      	bcs.n	8016a7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8016a54:	4643      	mov	r3, r8
 8016a56:	4639      	mov	r1, r7
 8016a58:	4620      	mov	r0, r4
 8016a5a:	f7ff fe39 	bl	80166d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016a5e:	6030      	str	r0, [r6, #0]
 8016a60:	6833      	ldr	r3, [r6, #0]
 8016a62:	b143      	cbz	r3, 8016a76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8016a64:	7b5a      	ldrb	r2, [r3, #13]
 8016a66:	7a9b      	ldrb	r3, [r3, #10]
 8016a68:	0052      	lsls	r2, r2, #1
 8016a6a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8016a6e:	4313      	orrs	r3, r2
 8016a70:	bf0c      	ite	eq
 8016a72:	2301      	moveq	r3, #1
 8016a74:	2300      	movne	r3, #0
 8016a76:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8016a7a:	e7dc      	b.n	8016a36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8016a7c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016a80:	b29b      	uxth	r3, r3
 8016a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8016a84:	d804      	bhi.n	8016a90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8016a86:	4639      	mov	r1, r7
 8016a88:	4620      	mov	r0, r4
 8016a8a:	f7ff fd15 	bl	80164b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016a8e:	e7e6      	b.n	8016a5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016a90:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d0e3      	beq.n	8016a60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016a98:	f640 1302 	movw	r3, #2306	@ 0x902
 8016a9c:	429d      	cmp	r5, r3
 8016a9e:	d1df      	bne.n	8016a60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016aa0:	4601      	mov	r1, r0
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	f7ff fcd8 	bl	8016458 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016aa8:	e7d9      	b.n	8016a5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08016aaa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8016aaa:	b510      	push	{r4, lr}
 8016aac:	4604      	mov	r4, r0
 8016aae:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8016ab2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016ab4:	b1e1      	cbz	r1, 8016af0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016ab6:	2b0a      	cmp	r3, #10
 8016ab8:	d02d      	beq.n	8016b16 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016aba:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8016abc:	3901      	subs	r1, #1
 8016abe:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016ac2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8016ac4:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8016ac8:	1c51      	adds	r1, r2, #1
 8016aca:	b289      	uxth	r1, r1
 8016acc:	2901      	cmp	r1, #1
 8016ace:	bf8a      	itet	hi
 8016ad0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016ad4:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8016ad6:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8016ad8:	1c5a      	adds	r2, r3, #1
 8016ada:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016adc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016ade:	4413      	add	r3, r2
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	2b09      	cmp	r3, #9
 8016ae4:	bf88      	it	hi
 8016ae6:	3b0a      	subhi	r3, #10
 8016ae8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016aec:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016aee:	e7de      	b.n	8016aae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016af0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016af2:	2b0a      	cmp	r3, #10
 8016af4:	d00f      	beq.n	8016b16 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016af6:	4620      	mov	r0, r4
 8016af8:	f7ff fc6d 	bl	80163d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8016afc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016afe:	1c5a      	adds	r2, r3, #1
 8016b00:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016b02:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016b04:	4413      	add	r3, r2
 8016b06:	b29b      	uxth	r3, r3
 8016b08:	2b09      	cmp	r3, #9
 8016b0a:	bf88      	it	hi
 8016b0c:	3b0a      	subhi	r3, #10
 8016b0e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016b12:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016b14:	e7ec      	b.n	8016af0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016b16:	bd10      	pop	{r4, pc}

08016b18 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8016b18:	b538      	push	{r3, r4, r5, lr}
 8016b1a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8016b22:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8016b24:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8016b26:	3a01      	subs	r2, #1
 8016b28:	8702      	strh	r2, [r0, #56]	@ 0x38
 8016b2a:	1c5a      	adds	r2, r3, #1
 8016b2c:	b292      	uxth	r2, r2
 8016b2e:	2a09      	cmp	r2, #9
 8016b30:	bf8a      	itet	hi
 8016b32:	3b09      	subhi	r3, #9
 8016b34:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8016b36:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8016b38:	f7ff ffb7 	bl	8016aaa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8016b3c:	8c23      	ldrh	r3, [r4, #32]
 8016b3e:	2b01      	cmp	r3, #1
 8016b40:	bf9c      	itt	ls
 8016b42:	3301      	addls	r3, #1
 8016b44:	8423      	strhls	r3, [r4, #32]
 8016b46:	8be3      	ldrh	r3, [r4, #30]
 8016b48:	b90b      	cbnz	r3, 8016b4e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8016b4a:	2302      	movs	r3, #2
 8016b4c:	83e3      	strh	r3, [r4, #30]
 8016b4e:	8be3      	ldrh	r3, [r4, #30]
 8016b50:	4628      	mov	r0, r5
 8016b52:	3b01      	subs	r3, #1
 8016b54:	b29b      	uxth	r3, r3
 8016b56:	83e3      	strh	r3, [r4, #30]
 8016b58:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016b5c:	8365      	strh	r5, [r4, #26]
 8016b5e:	bd38      	pop	{r3, r4, r5, pc}

08016b60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8016b60:	428a      	cmp	r2, r1
 8016b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b66:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8016b68:	d932      	bls.n	8016bd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8016b6a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8016b6c:	1a54      	subs	r4, r2, r1
 8016b6e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8016b72:	19ee      	adds	r6, r5, r7
 8016b74:	fa1f fe84 	uxth.w	lr, r4
 8016b78:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8016b7c:	3e01      	subs	r6, #1
 8016b7e:	b2b4      	uxth	r4, r6
 8016b80:	eba4 090e 	sub.w	r9, r4, lr
 8016b84:	fa1f f989 	uxth.w	r9, r9
 8016b88:	2c09      	cmp	r4, #9
 8016b8a:	4626      	mov	r6, r4
 8016b8c:	bf88      	it	hi
 8016b8e:	f1a4 060a 	subhi.w	r6, r4, #10
 8016b92:	f1bc 0f00 	cmp.w	ip, #0
 8016b96:	f104 34ff 	add.w	r4, r4, #4294967295
 8016b9a:	bf08      	it	eq
 8016b9c:	f04f 0c02 	moveq.w	ip, #2
 8016ba0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016ba4:	b2a4      	uxth	r4, r4
 8016ba6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016baa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8016bae:	454c      	cmp	r4, r9
 8016bb0:	fa1f fc8c 	uxth.w	ip, ip
 8016bb4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8016bb8:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8016bbc:	d1e4      	bne.n	8016b88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8016bbe:	eba5 050e 	sub.w	r5, r5, lr
 8016bc2:	eb0e 0408 	add.w	r4, lr, r8
 8016bc6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8016bca:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016bcc:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8016bd0:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8016bd2:	250a      	movs	r5, #10
 8016bd4:	1a64      	subs	r4, r4, r1
 8016bd6:	4439      	add	r1, r7
 8016bd8:	b289      	uxth	r1, r1
 8016bda:	8704      	strh	r4, [r0, #56]	@ 0x38
 8016bdc:	2909      	cmp	r1, #9
 8016bde:	bf88      	it	hi
 8016be0:	390a      	subhi	r1, #10
 8016be2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016be4:	b18a      	cbz	r2, 8016c0a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8016be6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8016be8:	3a01      	subs	r2, #1
 8016bea:	3101      	adds	r1, #1
 8016bec:	b292      	uxth	r2, r2
 8016bee:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8016bf2:	8701      	strh	r1, [r0, #56]	@ 0x38
 8016bf4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8016bf6:	b901      	cbnz	r1, 8016bfa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8016bf8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8016bfa:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8016bfc:	3901      	subs	r1, #1
 8016bfe:	b289      	uxth	r1, r1
 8016c00:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016c02:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016c06:	844c      	strh	r4, [r1, #34]	@ 0x22
 8016c08:	e7ec      	b.n	8016be4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8016c0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c0e:	f7ff bf4c 	b.w	8016aaa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08016c12 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016c12:	b570      	push	{r4, r5, r6, lr}
 8016c14:	2500      	movs	r5, #0
 8016c16:	4295      	cmp	r5, r2
 8016c18:	d011      	beq.n	8016c3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8016c1a:	8bc4      	ldrh	r4, [r0, #30]
 8016c1c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8016c20:	4414      	add	r4, r2
 8016c22:	3c01      	subs	r4, #1
 8016c24:	1b64      	subs	r4, r4, r5
 8016c26:	b2a4      	uxth	r4, r4
 8016c28:	2c01      	cmp	r4, #1
 8016c2a:	bf88      	it	hi
 8016c2c:	3c02      	subhi	r4, #2
 8016c2e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016c32:	8b64      	ldrh	r4, [r4, #26]
 8016c34:	42b4      	cmp	r4, r6
 8016c36:	d117      	bne.n	8016c68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8016c38:	3501      	adds	r5, #1
 8016c3a:	b2ad      	uxth	r5, r5
 8016c3c:	e7eb      	b.n	8016c16 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8016c3e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016c42:	2400      	movs	r4, #0
 8016c44:	4413      	add	r3, r2
 8016c46:	b2a2      	uxth	r2, r4
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	da0f      	bge.n	8016c6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8016c4c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8016c4e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8016c52:	3401      	adds	r4, #1
 8016c54:	4432      	add	r2, r6
 8016c56:	b292      	uxth	r2, r2
 8016c58:	2a09      	cmp	r2, #9
 8016c5a:	bf88      	it	hi
 8016c5c:	3a0a      	subhi	r2, #10
 8016c5e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8016c62:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8016c64:	42aa      	cmp	r2, r5
 8016c66:	d0ee      	beq.n	8016c46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8016c68:	2000      	movs	r0, #0
 8016c6a:	bd70      	pop	{r4, r5, r6, pc}
 8016c6c:	2001      	movs	r0, #1
 8016c6e:	e7fc      	b.n	8016c6a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08016c70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8016c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c74:	4605      	mov	r5, r0
 8016c76:	4616      	mov	r6, r2
 8016c78:	1c8c      	adds	r4, r1, #2
 8016c7a:	8809      	ldrh	r1, [r1, #0]
 8016c7c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8016c80:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016c84:	42b3      	cmp	r3, r6
 8016c86:	d124      	bne.n	8016cd2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8016c88:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8016c8c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8016c90:	f001 070f 	and.w	r7, r1, #15
 8016c94:	4652      	mov	r2, sl
 8016c96:	f8cd 8000 	str.w	r8, [sp]
 8016c9a:	464b      	mov	r3, r9
 8016c9c:	4621      	mov	r1, r4
 8016c9e:	4628      	mov	r0, r5
 8016ca0:	f7ff ffb7 	bl	8016c12 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016ca4:	4683      	mov	fp, r0
 8016ca6:	b168      	cbz	r0, 8016cc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016ca8:	eb0a 0109 	add.w	r1, sl, r9
 8016cac:	463a      	mov	r2, r7
 8016cae:	4628      	mov	r0, r5
 8016cb0:	4441      	add	r1, r8
 8016cb2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8016cb6:	4649      	mov	r1, r9
 8016cb8:	f7ff ff52 	bl	8016b60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8016cbc:	4658      	mov	r0, fp
 8016cbe:	b003      	add	sp, #12
 8016cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc4:	eb07 010a 	add.w	r1, r7, sl
 8016cc8:	4449      	add	r1, r9
 8016cca:	4441      	add	r1, r8
 8016ccc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8016cd0:	e7d2      	b.n	8016c78 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8016cd2:	f04f 0b00 	mov.w	fp, #0
 8016cd6:	e7f1      	b.n	8016cbc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08016cd8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016cd8:	b570      	push	{r4, r5, r6, lr}
 8016cda:	8810      	ldrh	r0, [r2, #0]
 8016cdc:	4298      	cmp	r0, r3
 8016cde:	d817      	bhi.n	8016d10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016ce0:	1e48      	subs	r0, r1, #1
 8016ce2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016ce6:	4298      	cmp	r0, r3
 8016ce8:	d312      	bcc.n	8016d10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016cea:	2400      	movs	r4, #0
 8016cec:	428c      	cmp	r4, r1
 8016cee:	d20f      	bcs.n	8016d10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016cf0:	1860      	adds	r0, r4, r1
 8016cf2:	1040      	asrs	r0, r0, #1
 8016cf4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016cf8:	0085      	lsls	r5, r0, #2
 8016cfa:	42b3      	cmp	r3, r6
 8016cfc:	d902      	bls.n	8016d04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8016cfe:	3001      	adds	r0, #1
 8016d00:	b284      	uxth	r4, r0
 8016d02:	e7f3      	b.n	8016cec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016d04:	d201      	bcs.n	8016d0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8016d06:	b281      	uxth	r1, r0
 8016d08:	e7f0      	b.n	8016cec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016d0a:	442a      	add	r2, r5
 8016d0c:	8850      	ldrh	r0, [r2, #2]
 8016d0e:	bd70      	pop	{r4, r5, r6, pc}
 8016d10:	2000      	movs	r0, #0
 8016d12:	e7fc      	b.n	8016d0e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08016d14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8016d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d18:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8016d1a:	4604      	mov	r4, r0
 8016d1c:	260b      	movs	r6, #11
 8016d1e:	886f      	ldrh	r7, [r5, #2]
 8016d20:	087f      	lsrs	r7, r7, #1
 8016d22:	3e01      	subs	r6, #1
 8016d24:	d013      	beq.n	8016d4e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8016d26:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016d28:	462a      	mov	r2, r5
 8016d2a:	4639      	mov	r1, r7
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016d32:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016d36:	4643      	mov	r3, r8
 8016d38:	f7ff ffce 	bl	8016cd8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8016d3c:	b138      	cbz	r0, 8016d4e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8016d3e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8016d42:	4642      	mov	r2, r8
 8016d44:	4620      	mov	r0, r4
 8016d46:	f7ff ff93 	bl	8016c70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	d1e9      	bne.n	8016d22 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8016d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016d54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8016d54:	b570      	push	{r4, r5, r6, lr}
 8016d56:	694a      	ldr	r2, [r1, #20]
 8016d58:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8016d5a:	684b      	ldr	r3, [r1, #4]
 8016d5c:	1b54      	subs	r4, r2, r5
 8016d5e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8016d60:	f000 8106 	beq.w	8016f70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8016d64:	1b9b      	subs	r3, r3, r6
 8016d66:	d003      	beq.n	8016d70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016d68:	4363      	muls	r3, r4
 8016d6a:	2210      	movs	r2, #16
 8016d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016d70:	680c      	ldr	r4, [r1, #0]
 8016d72:	698a      	ldr	r2, [r1, #24]
 8016d74:	1b65      	subs	r5, r4, r5
 8016d76:	f000 80fd 	beq.w	8016f74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8016d7a:	1b92      	subs	r2, r2, r6
 8016d7c:	d003      	beq.n	8016d86 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016d7e:	436a      	muls	r2, r5
 8016d80:	2410      	movs	r4, #16
 8016d82:	fb92 f2f4 	sdiv	r2, r2, r4
 8016d86:	1a9b      	subs	r3, r3, r2
 8016d88:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8016fb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8016d8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016d90:	460a      	mov	r2, r1
 8016d92:	ee07 3a90 	vmov	s15, r3
 8016d96:	f100 040c 	add.w	r4, r0, #12
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016da0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016da4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8016da8:	eeb1 6a43 	vneg.f32	s12, s6
 8016dac:	edd2 7a02 	vldr	s15, [r2, #8]
 8016db0:	3214      	adds	r2, #20
 8016db2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016db6:	ece3 6a01 	vstmia	r3!, {s13}
 8016dba:	429c      	cmp	r4, r3
 8016dbc:	ed52 7a02 	vldr	s15, [r2, #-8]
 8016dc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016dc4:	edc3 7a02 	vstr	s15, [r3, #8]
 8016dc8:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016dcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016dd0:	edc3 7a05 	vstr	s15, [r3, #20]
 8016dd4:	d1ea      	bne.n	8016dac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8016dd6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016dd8:	698b      	ldr	r3, [r1, #24]
 8016dda:	edd0 4a02 	vldr	s9, [r0, #8]
 8016dde:	1a9b      	subs	r3, r3, r2
 8016de0:	edd0 3a00 	vldr	s7, [r0]
 8016de4:	edd0 6a01 	vldr	s13, [r0, #4]
 8016de8:	ee07 3a90 	vmov	s15, r3
 8016dec:	684b      	ldr	r3, [r1, #4]
 8016dee:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016df2:	ed90 5a05 	vldr	s10, [r0, #20]
 8016df6:	1a9b      	subs	r3, r3, r2
 8016df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016dfc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8016e00:	ed90 2a03 	vldr	s4, [r0, #12]
 8016e04:	ee07 3a10 	vmov	s14, r3
 8016e08:	edd0 5a04 	vldr	s11, [r0, #16]
 8016e0c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016e10:	ed90 1a07 	vldr	s2, [r0, #28]
 8016e14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e18:	edd0 2a06 	vldr	s5, [r0, #24]
 8016e1c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8016e20:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8016e24:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016e28:	ee32 5a45 	vsub.f32	s10, s4, s10
 8016e2c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016e30:	ee67 7a83 	vmul.f32	s15, s15, s6
 8016e34:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8016e38:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8016e3a:	694a      	ldr	r2, [r1, #20]
 8016e3c:	1b13      	subs	r3, r2, r4
 8016e3e:	ee07 3a10 	vmov	s14, r3
 8016e42:	680b      	ldr	r3, [r1, #0]
 8016e44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e48:	1b1b      	subs	r3, r3, r4
 8016e4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016e4e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8016e52:	ee07 3a10 	vmov	s14, r3
 8016e56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e5a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016e5e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016e62:	ee64 4a86 	vmul.f32	s9, s9, s12
 8016e66:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8016e6a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016e6c:	698b      	ldr	r3, [r1, #24]
 8016e6e:	1a9b      	subs	r3, r3, r2
 8016e70:	ee06 3a90 	vmov	s13, r3
 8016e74:	684b      	ldr	r3, [r1, #4]
 8016e76:	1a9b      	subs	r3, r3, r2
 8016e78:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016e7c:	ee07 3a10 	vmov	s14, r3
 8016e80:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016e84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e88:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8016e8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016e90:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016e94:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016e98:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8016e9c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8016e9e:	694a      	ldr	r2, [r1, #20]
 8016ea0:	1b13      	subs	r3, r2, r4
 8016ea2:	ee07 3a10 	vmov	s14, r3
 8016ea6:	680b      	ldr	r3, [r1, #0]
 8016ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016eac:	1b1b      	subs	r3, r3, r4
 8016eae:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016eb2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8016eb6:	ee07 3a10 	vmov	s14, r3
 8016eba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ebe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016ec2:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016ec6:	edd0 5a08 	vldr	s11, [r0, #32]
 8016eca:	ee31 1a65 	vsub.f32	s2, s2, s11
 8016ece:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8016ed2:	ee25 5a06 	vmul.f32	s10, s10, s12
 8016ed6:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8016eda:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016edc:	698b      	ldr	r3, [r1, #24]
 8016ede:	1a9b      	subs	r3, r3, r2
 8016ee0:	ee07 3a10 	vmov	s14, r3
 8016ee4:	684b      	ldr	r3, [r1, #4]
 8016ee6:	1a9b      	subs	r3, r3, r2
 8016ee8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016eec:	ee01 3a90 	vmov	s3, r3
 8016ef0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016ef4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8016ef8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8016efc:	ee61 1a84 	vmul.f32	s3, s3, s8
 8016f00:	eea1 7a21 	vfma.f32	s14, s2, s3
 8016f04:	ee27 7a03 	vmul.f32	s14, s14, s6
 8016f08:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8016f0c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8016f0e:	694a      	ldr	r2, [r1, #20]
 8016f10:	1b13      	subs	r3, r2, r4
 8016f12:	ee03 3a10 	vmov	s6, r3
 8016f16:	680b      	ldr	r3, [r1, #0]
 8016f18:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016f1c:	1b1b      	subs	r3, r3, r4
 8016f1e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8016f22:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8016f26:	ee03 3a10 	vmov	s6, r3
 8016f2a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016f2e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8016f32:	eee1 5a04 	vfma.f32	s11, s2, s8
 8016f36:	ee25 6a86 	vmul.f32	s12, s11, s12
 8016f3a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8016f3e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8016f42:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8016f46:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8016f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f4e:	dd13      	ble.n	8016f78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8016f50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016f54:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8016f58:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8016f5a:	eee3 7a87 	vfma.f32	s15, s7, s14
 8016f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f66:	dd15      	ble.n	8016f94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8016f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016f6c:	6403      	str	r3, [r0, #64]	@ 0x40
 8016f6e:	bd70      	pop	{r4, r5, r6, pc}
 8016f70:	4623      	mov	r3, r4
 8016f72:	e6fd      	b.n	8016d70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016f74:	462a      	mov	r2, r5
 8016f76:	e706      	b.n	8016d86 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016f78:	d502      	bpl.n	8016f80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8016f7a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8016f7e:	e7e9      	b.n	8016f54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8016f80:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016f84:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016f88:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8016f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f90:	dade      	bge.n	8016f50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8016f92:	e7f2      	b.n	8016f7a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016f94:	d502      	bpl.n	8016f9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8016f96:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8016f9a:	e7e7      	b.n	8016f6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8016f9c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8016fa0:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016fa4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fac:	dadc      	bge.n	8016f68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8016fae:	e7f2      	b.n	8016f96 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8016fb0:	3d800000 	.word	0x3d800000

08016fb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8016fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb8:	2714      	movs	r7, #20
 8016fba:	435f      	muls	r7, r3
 8016fbc:	eb02 0c07 	add.w	ip, r2, r7
 8016fc0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016fc4:	f115 0e0f 	adds.w	lr, r5, #15
 8016fc8:	f100 80a2 	bmi.w	8017110 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8016fcc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8016fd0:	9c08      	ldr	r4, [sp, #32]
 8016fd2:	2614      	movs	r6, #20
 8016fd4:	f8c0 e014 	str.w	lr, [r0, #20]
 8016fd8:	4366      	muls	r6, r4
 8016fda:	eb02 0806 	add.w	r8, r2, r6
 8016fde:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016fe2:	f115 040f 	adds.w	r4, r5, #15
 8016fe6:	f100 809f 	bmi.w	8017128 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8016fea:	1124      	asrs	r4, r4, #4
 8016fec:	eba4 040e 	sub.w	r4, r4, lr
 8016ff0:	6184      	str	r4, [r0, #24]
 8016ff2:	2c00      	cmp	r4, #0
 8016ff4:	f000 808a 	beq.w	801710c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8016ff8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8016ffc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017000:	5995      	ldr	r5, [r2, r6]
 8017002:	eba4 0809 	sub.w	r8, r4, r9
 8017006:	59d4      	ldr	r4, [r2, r7]
 8017008:	eba5 0a04 	sub.w	sl, r5, r4
 801700c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8017010:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8017014:	fb0e fe05 	mul.w	lr, lr, r5
 8017018:	fb0a ee19 	mls	lr, sl, r9, lr
 801701c:	fb08 e404 	mla	r4, r8, r4, lr
 8017020:	3c01      	subs	r4, #1
 8017022:	19a4      	adds	r4, r4, r6
 8017024:	f100 808c 	bmi.w	8017140 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8017028:	fb94 fef6 	sdiv	lr, r4, r6
 801702c:	fb06 441e 	mls	r4, r6, lr, r4
 8017030:	f8c0 e000 	str.w	lr, [r0]
 8017034:	6104      	str	r4, [r0, #16]
 8017036:	2d00      	cmp	r5, #0
 8017038:	f2c0 8095 	blt.w	8017166 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801703c:	fb95 f4f6 	sdiv	r4, r5, r6
 8017040:	fb06 5514 	mls	r5, r6, r4, r5
 8017044:	6044      	str	r4, [r0, #4]
 8017046:	6085      	str	r5, [r0, #8]
 8017048:	60c6      	str	r6, [r0, #12]
 801704a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801704e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017052:	6945      	ldr	r5, [r0, #20]
 8017054:	59d2      	ldr	r2, [r2, r7]
 8017056:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801705a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8017188 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801705e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8017062:	ee07 4a10 	vmov	s14, r4
 8017066:	6804      	ldr	r4, [r0, #0]
 8017068:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801706c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017070:	ee07 2a90 	vmov	s15, r2
 8017074:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801707c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017080:	edd3 6a00 	vldr	s13, [r3]
 8017084:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017088:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801708c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017090:	edc0 6a07 	vstr	s13, [r0, #28]
 8017094:	edd0 6a01 	vldr	s13, [r0, #4]
 8017098:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801709c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80170a0:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80170a4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80170a8:	ed80 6a08 	vstr	s12, [r0, #32]
 80170ac:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80170ae:	6242      	str	r2, [r0, #36]	@ 0x24
 80170b0:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 80170b4:	ed93 6a03 	vldr	s12, [r3, #12]
 80170b8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80170bc:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80170c0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80170c4:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80170c8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80170cc:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80170d0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80170d4:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80170d8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80170da:	6302      	str	r2, [r0, #48]	@ 0x30
 80170dc:	ed93 6a06 	vldr	s12, [r3, #24]
 80170e0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80170e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80170e8:	eeb0 7a46 	vmov.f32	s14, s12
 80170ec:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80170f0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80170f4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80170f8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80170fc:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8017100:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017104:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8017108:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801710a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017110:	2410      	movs	r4, #16
 8017112:	f1c5 0501 	rsb	r5, r5, #1
 8017116:	fb9e fef4 	sdiv	lr, lr, r4
 801711a:	f015 050f 	ands.w	r5, r5, #15
 801711e:	bf18      	it	ne
 8017120:	2501      	movne	r5, #1
 8017122:	ebae 0e05 	sub.w	lr, lr, r5
 8017126:	e753      	b.n	8016fd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8017128:	f04f 0910 	mov.w	r9, #16
 801712c:	f1c5 0501 	rsb	r5, r5, #1
 8017130:	fb94 f4f9 	sdiv	r4, r4, r9
 8017134:	f015 050f 	ands.w	r5, r5, #15
 8017138:	bf18      	it	ne
 801713a:	2501      	movne	r5, #1
 801713c:	1b64      	subs	r4, r4, r5
 801713e:	e755      	b.n	8016fec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8017140:	4264      	negs	r4, r4
 8017142:	fb94 fef6 	sdiv	lr, r4, r6
 8017146:	f1ce 0800 	rsb	r8, lr, #0
 801714a:	fb06 441e 	mls	r4, r6, lr, r4
 801714e:	f8c0 8000 	str.w	r8, [r0]
 8017152:	6104      	str	r4, [r0, #16]
 8017154:	2c00      	cmp	r4, #0
 8017156:	f43f af6e 	beq.w	8017036 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801715a:	ea6f 0e0e 	mvn.w	lr, lr
 801715e:	1b34      	subs	r4, r6, r4
 8017160:	f8c0 e000 	str.w	lr, [r0]
 8017164:	e766      	b.n	8017034 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8017166:	426d      	negs	r5, r5
 8017168:	fb95 f4f6 	sdiv	r4, r5, r6
 801716c:	f1c4 0e00 	rsb	lr, r4, #0
 8017170:	fb06 5514 	mls	r5, r6, r4, r5
 8017174:	f8c0 e004 	str.w	lr, [r0, #4]
 8017178:	6085      	str	r5, [r0, #8]
 801717a:	2d00      	cmp	r5, #0
 801717c:	f43f af64 	beq.w	8017048 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017180:	43e4      	mvns	r4, r4
 8017182:	1b75      	subs	r5, r6, r5
 8017184:	6044      	str	r4, [r0, #4]
 8017186:	e75e      	b.n	8017046 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017188:	3d800000 	.word	0x3d800000

0801718c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801718c:	4b01      	ldr	r3, [pc, #4]	@ (8017194 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801718e:	6018      	str	r0, [r3, #0]
 8017190:	4770      	bx	lr
 8017192:	bf00      	nop
 8017194:	240042d8 	.word	0x240042d8

08017198 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017198:	4b06      	ldr	r3, [pc, #24]	@ (80171b4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801719a:	881a      	ldrh	r2, [r3, #0]
 801719c:	4282      	cmp	r2, r0
 801719e:	d807      	bhi.n	80171b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80171a0:	4b05      	ldr	r3, [pc, #20]	@ (80171b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80171a2:	881b      	ldrh	r3, [r3, #0]
 80171a4:	4413      	add	r3, r2
 80171a6:	4298      	cmp	r0, r3
 80171a8:	bfac      	ite	ge
 80171aa:	2000      	movge	r0, #0
 80171ac:	2001      	movlt	r0, #1
 80171ae:	4770      	bx	lr
 80171b0:	2000      	movs	r0, #0
 80171b2:	4770      	bx	lr
 80171b4:	240042f8 	.word	0x240042f8
 80171b8:	240042fc 	.word	0x240042fc

080171bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80171bc:	b508      	push	{r3, lr}
 80171be:	4601      	mov	r1, r0
 80171c0:	f7ff ffea 	bl	8017198 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80171c4:	b118      	cbz	r0, 80171ce <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80171c6:	4b02      	ldr	r3, [pc, #8]	@ (80171d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80171ce:	bd08      	pop	{r3, pc}
 80171d0:	240042dc 	.word	0x240042dc

080171d4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80171d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171d6:	4c24      	ldr	r4, [pc, #144]	@ (8017268 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80171d8:	6823      	ldr	r3, [r4, #0]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d042      	beq.n	8017264 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80171de:	4a23      	ldr	r2, [pc, #140]	@ (801726c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80171e0:	4d23      	ldr	r5, [pc, #140]	@ (8017270 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80171e2:	8811      	ldrh	r1, [r2, #0]
 80171e4:	f8b5 c000 	ldrh.w	ip, [r5]
 80171e8:	4822      	ldr	r0, [pc, #136]	@ (8017274 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80171ea:	4461      	add	r1, ip
 80171ec:	1c4a      	adds	r2, r1, #1
 80171ee:	008f      	lsls	r7, r1, #2
 80171f0:	f022 0201 	bic.w	r2, r2, #1
 80171f4:	19de      	adds	r6, r3, r7
 80171f6:	0412      	lsls	r2, r2, #16
 80171f8:	6006      	str	r6, [r0, #0]
 80171fa:	4e1f      	ldr	r6, [pc, #124]	@ (8017278 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80171fc:	0c12      	lsrs	r2, r2, #16
 80171fe:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8017202:	19da      	adds	r2, r3, r7
 8017204:	6032      	str	r2, [r6, #0]
 8017206:	220e      	movs	r2, #14
 8017208:	fb02 f20c 	mul.w	r2, r2, ip
 801720c:	3203      	adds	r2, #3
 801720e:	f022 0203 	bic.w	r2, r2, #3
 8017212:	443a      	add	r2, r7
 8017214:	4f19      	ldr	r7, [pc, #100]	@ (801727c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017216:	4413      	add	r3, r2
 8017218:	603b      	str	r3, [r7, #0]
 801721a:	2300      	movs	r3, #0
 801721c:	4f18      	ldr	r7, [pc, #96]	@ (8017280 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801721e:	469c      	mov	ip, r3
 8017220:	803b      	strh	r3, [r7, #0]
 8017222:	4f18      	ldr	r7, [pc, #96]	@ (8017284 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017224:	683f      	ldr	r7, [r7, #0]
 8017226:	1aba      	subs	r2, r7, r2
 8017228:	4f17      	ldr	r7, [pc, #92]	@ (8017288 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801722a:	603a      	str	r2, [r7, #0]
 801722c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017230:	4a16      	ldr	r2, [pc, #88]	@ (801728c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017232:	8013      	strh	r3, [r2, #0]
 8017234:	428b      	cmp	r3, r1
 8017236:	d10d      	bne.n	8017254 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017238:	882d      	ldrh	r5, [r5, #0]
 801723a:	2300      	movs	r3, #0
 801723c:	6830      	ldr	r0, [r6, #0]
 801723e:	240e      	movs	r4, #14
 8017240:	429d      	cmp	r5, r3
 8017242:	d90f      	bls.n	8017264 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017244:	fb04 0203 	mla	r2, r4, r3, r0
 8017248:	3301      	adds	r3, #1
 801724a:	7b11      	ldrb	r1, [r2, #12]
 801724c:	f36f 1145 	bfc	r1, #5, #1
 8017250:	7311      	strb	r1, [r2, #12]
 8017252:	e7f5      	b.n	8017240 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8017254:	6822      	ldr	r2, [r4, #0]
 8017256:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801725a:	6802      	ldr	r2, [r0, #0]
 801725c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017260:	3301      	adds	r3, #1
 8017262:	e7e7      	b.n	8017234 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017266:	bf00      	nop
 8017268:	240042dc 	.word	0x240042dc
 801726c:	240042f8 	.word	0x240042f8
 8017270:	240042fc 	.word	0x240042fc
 8017274:	240042f0 	.word	0x240042f0
 8017278:	240042e0 	.word	0x240042e0
 801727c:	240042e8 	.word	0x240042e8
 8017280:	240042fa 	.word	0x240042fa
 8017284:	240042e4 	.word	0x240042e4
 8017288:	240042f4 	.word	0x240042f4
 801728c:	240042ec 	.word	0x240042ec

08017290 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017290:	4b06      	ldr	r3, [pc, #24]	@ (80172ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	b943      	cbnz	r3, 80172a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017296:	b139      	cbz	r1, 80172a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017298:	4b05      	ldr	r3, [pc, #20]	@ (80172b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801729a:	801a      	strh	r2, [r3, #0]
 801729c:	4b05      	ldr	r3, [pc, #20]	@ (80172b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801729e:	6019      	str	r1, [r3, #0]
 80172a0:	4b05      	ldr	r3, [pc, #20]	@ (80172b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80172a2:	6018      	str	r0, [r3, #0]
 80172a4:	f7ff bf96 	b.w	80171d4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80172a8:	4770      	bx	lr
 80172aa:	bf00      	nop
 80172ac:	240042e8 	.word	0x240042e8
 80172b0:	240042fc 	.word	0x240042fc
 80172b4:	240042e4 	.word	0x240042e4
 80172b8:	240042dc 	.word	0x240042dc

080172bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80172bc:	b470      	push	{r4, r5, r6}
 80172be:	4c07      	ldr	r4, [pc, #28]	@ (80172dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80172c0:	4605      	mov	r5, r0
 80172c2:	4610      	mov	r0, r2
 80172c4:	9a03      	ldr	r2, [sp, #12]
 80172c6:	6826      	ldr	r6, [r4, #0]
 80172c8:	b936      	cbnz	r6, 80172d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80172ca:	6025      	str	r5, [r4, #0]
 80172cc:	4c04      	ldr	r4, [pc, #16]	@ (80172e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80172ce:	8021      	strh	r1, [r4, #0]
 80172d0:	4619      	mov	r1, r3
 80172d2:	bc70      	pop	{r4, r5, r6}
 80172d4:	f7ff bfdc 	b.w	8017290 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80172d8:	bc70      	pop	{r4, r5, r6}
 80172da:	4770      	bx	lr
 80172dc:	24004300 	.word	0x24004300
 80172e0:	240042f8 	.word	0x240042f8

080172e4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80172e4:	4a12      	ldr	r2, [pc, #72]	@ (8017330 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80172e6:	8803      	ldrh	r3, [r0, #0]
 80172e8:	8812      	ldrh	r2, [r2, #0]
 80172ea:	4293      	cmp	r3, r2
 80172ec:	d207      	bcs.n	80172fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80172ee:	4a11      	ldr	r2, [pc, #68]	@ (8017334 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80172f0:	2114      	movs	r1, #20
 80172f2:	6812      	ldr	r2, [r2, #0]
 80172f4:	fb01 2303 	mla	r3, r1, r3, r2
 80172f8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80172fc:	4770      	bx	lr
 80172fe:	490e      	ldr	r1, [pc, #56]	@ (8017338 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017300:	8809      	ldrh	r1, [r1, #0]
 8017302:	4411      	add	r1, r2
 8017304:	428b      	cmp	r3, r1
 8017306:	da04      	bge.n	8017312 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8017308:	1a9b      	subs	r3, r3, r2
 801730a:	4a0c      	ldr	r2, [pc, #48]	@ (801733c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801730c:	210e      	movs	r1, #14
 801730e:	6812      	ldr	r2, [r2, #0]
 8017310:	e7f0      	b.n	80172f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8017312:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017316:	4293      	cmp	r3, r2
 8017318:	d108      	bne.n	801732c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801731a:	4b09      	ldr	r3, [pc, #36]	@ (8017340 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	b91b      	cbnz	r3, 8017328 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8017320:	4b08      	ldr	r3, [pc, #32]	@ (8017344 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8017322:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017326:	4770      	bx	lr
 8017328:	4b07      	ldr	r3, [pc, #28]	@ (8017348 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801732a:	e7fa      	b.n	8017322 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801732c:	2000      	movs	r0, #0
 801732e:	4770      	bx	lr
 8017330:	240042f8 	.word	0x240042f8
 8017334:	24004300 	.word	0x24004300
 8017338:	240042fc 	.word	0x240042fc
 801733c:	240042e0 	.word	0x240042e0
 8017340:	24004270 	.word	0x24004270
 8017344:	24004272 	.word	0x24004272
 8017348:	24004274 	.word	0x24004274

0801734c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801734c:	4a12      	ldr	r2, [pc, #72]	@ (8017398 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801734e:	8803      	ldrh	r3, [r0, #0]
 8017350:	8812      	ldrh	r2, [r2, #0]
 8017352:	4293      	cmp	r3, r2
 8017354:	d207      	bcs.n	8017366 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8017356:	4a11      	ldr	r2, [pc, #68]	@ (801739c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017358:	2114      	movs	r1, #20
 801735a:	6812      	ldr	r2, [r2, #0]
 801735c:	fb01 2303 	mla	r3, r1, r3, r2
 8017360:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017364:	4770      	bx	lr
 8017366:	490e      	ldr	r1, [pc, #56]	@ (80173a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017368:	8809      	ldrh	r1, [r1, #0]
 801736a:	4411      	add	r1, r2
 801736c:	428b      	cmp	r3, r1
 801736e:	da04      	bge.n	801737a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017370:	1a9b      	subs	r3, r3, r2
 8017372:	4a0c      	ldr	r2, [pc, #48]	@ (80173a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017374:	210e      	movs	r1, #14
 8017376:	6812      	ldr	r2, [r2, #0]
 8017378:	e7f0      	b.n	801735c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801737a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801737e:	4293      	cmp	r3, r2
 8017380:	d108      	bne.n	8017394 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8017382:	4b09      	ldr	r3, [pc, #36]	@ (80173a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	b91b      	cbnz	r3, 8017390 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017388:	4b08      	ldr	r3, [pc, #32]	@ (80173ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801738a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801738e:	4770      	bx	lr
 8017390:	4b07      	ldr	r3, [pc, #28]	@ (80173b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017392:	e7fa      	b.n	801738a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017394:	2000      	movs	r0, #0
 8017396:	4770      	bx	lr
 8017398:	240042f8 	.word	0x240042f8
 801739c:	24004300 	.word	0x24004300
 80173a0:	240042fc 	.word	0x240042fc
 80173a4:	240042e0 	.word	0x240042e0
 80173a8:	24004270 	.word	0x24004270
 80173ac:	24004274 	.word	0x24004274
 80173b0:	24004272 	.word	0x24004272

080173b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80173b4:	4a22      	ldr	r2, [pc, #136]	@ (8017440 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80173b6:	b530      	push	{r4, r5, lr}
 80173b8:	880b      	ldrh	r3, [r1, #0]
 80173ba:	8812      	ldrh	r2, [r2, #0]
 80173bc:	4293      	cmp	r3, r2
 80173be:	d213      	bcs.n	80173e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80173c0:	4a20      	ldr	r2, [pc, #128]	@ (8017444 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80173c2:	2114      	movs	r1, #20
 80173c4:	6812      	ldr	r2, [r2, #0]
 80173c6:	fb01 2303 	mla	r3, r1, r3, r2
 80173ca:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80173ce:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80173d2:	8a1a      	ldrh	r2, [r3, #16]
 80173d4:	8a5b      	ldrh	r3, [r3, #18]
 80173d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80173da:	8004      	strh	r4, [r0, #0]
 80173dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173e0:	8041      	strh	r1, [r0, #2]
 80173e2:	8082      	strh	r2, [r0, #4]
 80173e4:	80c3      	strh	r3, [r0, #6]
 80173e6:	e024      	b.n	8017432 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80173e8:	4917      	ldr	r1, [pc, #92]	@ (8017448 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80173ea:	8809      	ldrh	r1, [r1, #0]
 80173ec:	4411      	add	r1, r2
 80173ee:	428b      	cmp	r3, r1
 80173f0:	da10      	bge.n	8017414 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80173f2:	1a9b      	subs	r3, r3, r2
 80173f4:	220e      	movs	r2, #14
 80173f6:	4353      	muls	r3, r2
 80173f8:	4a14      	ldr	r2, [pc, #80]	@ (801744c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80173fa:	6811      	ldr	r1, [r2, #0]
 80173fc:	18ca      	adds	r2, r1, r3
 80173fe:	5ecd      	ldrsh	r5, [r1, r3]
 8017400:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8017404:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8017408:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801740c:	8005      	strh	r5, [r0, #0]
 801740e:	8044      	strh	r4, [r0, #2]
 8017410:	8081      	strh	r1, [r0, #4]
 8017412:	e7e7      	b.n	80173e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017414:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017418:	4293      	cmp	r3, r2
 801741a:	d10b      	bne.n	8017434 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801741c:	4b0c      	ldr	r3, [pc, #48]	@ (8017450 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801741e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017422:	4b0c      	ldr	r3, [pc, #48]	@ (8017454 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017424:	8081      	strh	r1, [r0, #4]
 8017426:	f9b3 2000 	ldrsh.w	r2, [r3]
 801742a:	2300      	movs	r3, #0
 801742c:	80c2      	strh	r2, [r0, #6]
 801742e:	8003      	strh	r3, [r0, #0]
 8017430:	8043      	strh	r3, [r0, #2]
 8017432:	bd30      	pop	{r4, r5, pc}
 8017434:	2300      	movs	r3, #0
 8017436:	8003      	strh	r3, [r0, #0]
 8017438:	8043      	strh	r3, [r0, #2]
 801743a:	8083      	strh	r3, [r0, #4]
 801743c:	e7d2      	b.n	80173e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801743e:	bf00      	nop
 8017440:	240042f8 	.word	0x240042f8
 8017444:	24004300 	.word	0x24004300
 8017448:	240042fc 	.word	0x240042fc
 801744c:	240042e0 	.word	0x240042e0
 8017450:	2400426c 	.word	0x2400426c
 8017454:	2400426e 	.word	0x2400426e

08017458 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017458:	4a17      	ldr	r2, [pc, #92]	@ (80174b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801745a:	8803      	ldrh	r3, [r0, #0]
 801745c:	8812      	ldrh	r2, [r2, #0]
 801745e:	4293      	cmp	r3, r2
 8017460:	d213      	bcs.n	801748a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8017462:	4a16      	ldr	r2, [pc, #88]	@ (80174bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017464:	2114      	movs	r1, #20
 8017466:	6812      	ldr	r2, [r2, #0]
 8017468:	fb01 2303 	mla	r3, r1, r3, r2
 801746c:	8a1a      	ldrh	r2, [r3, #16]
 801746e:	8919      	ldrh	r1, [r3, #8]
 8017470:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017474:	428a      	cmp	r2, r1
 8017476:	db1d      	blt.n	80174b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017478:	8a58      	ldrh	r0, [r3, #18]
 801747a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801747e:	895b      	ldrh	r3, [r3, #10]
 8017480:	4298      	cmp	r0, r3
 8017482:	bfac      	ite	ge
 8017484:	2000      	movge	r0, #0
 8017486:	2001      	movlt	r0, #1
 8017488:	4770      	bx	lr
 801748a:	490d      	ldr	r1, [pc, #52]	@ (80174c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801748c:	8809      	ldrh	r1, [r1, #0]
 801748e:	4411      	add	r1, r2
 8017490:	428b      	cmp	r3, r1
 8017492:	da0d      	bge.n	80174b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8017494:	1a9b      	subs	r3, r3, r2
 8017496:	4a0b      	ldr	r2, [pc, #44]	@ (80174c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017498:	210e      	movs	r1, #14
 801749a:	6812      	ldr	r2, [r2, #0]
 801749c:	fb01 2303 	mla	r3, r1, r3, r2
 80174a0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80174a4:	891a      	ldrh	r2, [r3, #8]
 80174a6:	4291      	cmp	r1, r2
 80174a8:	db04      	blt.n	80174b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80174aa:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80174ae:	e7e6      	b.n	801747e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80174b0:	2000      	movs	r0, #0
 80174b2:	4770      	bx	lr
 80174b4:	2001      	movs	r0, #1
 80174b6:	4770      	bx	lr
 80174b8:	240042f8 	.word	0x240042f8
 80174bc:	24004300 	.word	0x24004300
 80174c0:	240042fc 	.word	0x240042fc
 80174c4:	240042e0 	.word	0x240042e0

080174c8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80174c8:	4a12      	ldr	r2, [pc, #72]	@ (8017514 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80174ca:	8803      	ldrh	r3, [r0, #0]
 80174cc:	8811      	ldrh	r1, [r2, #0]
 80174ce:	428b      	cmp	r3, r1
 80174d0:	d20b      	bcs.n	80174ea <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80174d2:	4a11      	ldr	r2, [pc, #68]	@ (8017518 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80174d4:	6812      	ldr	r2, [r2, #0]
 80174d6:	b112      	cbz	r2, 80174de <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80174d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80174dc:	b9c0      	cbnz	r0, 8017510 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80174de:	4a0f      	ldr	r2, [pc, #60]	@ (801751c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80174e0:	6811      	ldr	r1, [r2, #0]
 80174e2:	2214      	movs	r2, #20
 80174e4:	4353      	muls	r3, r2
 80174e6:	58c8      	ldr	r0, [r1, r3]
 80174e8:	4770      	bx	lr
 80174ea:	4a0d      	ldr	r2, [pc, #52]	@ (8017520 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80174ec:	8812      	ldrh	r2, [r2, #0]
 80174ee:	440a      	add	r2, r1
 80174f0:	4293      	cmp	r3, r2
 80174f2:	da04      	bge.n	80174fe <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80174f4:	4a08      	ldr	r2, [pc, #32]	@ (8017518 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80174f6:	6812      	ldr	r2, [r2, #0]
 80174f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80174fc:	4770      	bx	lr
 80174fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017502:	4293      	cmp	r3, r2
 8017504:	d103      	bne.n	801750e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017506:	4b07      	ldr	r3, [pc, #28]	@ (8017524 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801750c:	4770      	bx	lr
 801750e:	2000      	movs	r0, #0
 8017510:	4770      	bx	lr
 8017512:	bf00      	nop
 8017514:	240042f8 	.word	0x240042f8
 8017518:	240042dc 	.word	0x240042dc
 801751c:	24004300 	.word	0x24004300
 8017520:	240042fc 	.word	0x240042fc
 8017524:	24004278 	.word	0x24004278

08017528 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017528:	4b24      	ldr	r3, [pc, #144]	@ (80175bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801752a:	8802      	ldrh	r2, [r0, #0]
 801752c:	8818      	ldrh	r0, [r3, #0]
 801752e:	4282      	cmp	r2, r0
 8017530:	d221      	bcs.n	8017576 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8017532:	4b23      	ldr	r3, [pc, #140]	@ (80175c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017534:	6819      	ldr	r1, [r3, #0]
 8017536:	2314      	movs	r3, #20
 8017538:	fb03 1302 	mla	r3, r3, r2, r1
 801753c:	6858      	ldr	r0, [r3, #4]
 801753e:	2800      	cmp	r0, #0
 8017540:	d03a      	beq.n	80175b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017542:	4920      	ldr	r1, [pc, #128]	@ (80175c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017544:	6809      	ldr	r1, [r1, #0]
 8017546:	2900      	cmp	r1, #0
 8017548:	d036      	beq.n	80175b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801754a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801754e:	2900      	cmp	r1, #0
 8017550:	d032      	beq.n	80175b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017552:	891a      	ldrh	r2, [r3, #8]
 8017554:	8958      	ldrh	r0, [r3, #10]
 8017556:	4350      	muls	r0, r2
 8017558:	7c5a      	ldrb	r2, [r3, #17]
 801755a:	7cdb      	ldrb	r3, [r3, #19]
 801755c:	0952      	lsrs	r2, r2, #5
 801755e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017562:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017566:	2b0b      	cmp	r3, #11
 8017568:	bf18      	it	ne
 801756a:	0040      	lslne	r0, r0, #1
 801756c:	3003      	adds	r0, #3
 801756e:	f020 0003 	bic.w	r0, r0, #3
 8017572:	4408      	add	r0, r1
 8017574:	4770      	bx	lr
 8017576:	4b14      	ldr	r3, [pc, #80]	@ (80175c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017578:	881b      	ldrh	r3, [r3, #0]
 801757a:	4403      	add	r3, r0
 801757c:	429a      	cmp	r2, r3
 801757e:	da1a      	bge.n	80175b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017580:	4b12      	ldr	r3, [pc, #72]	@ (80175cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017582:	1a10      	subs	r0, r2, r0
 8017584:	210e      	movs	r1, #14
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	fb01 3000 	mla	r0, r1, r0, r3
 801758c:	7b03      	ldrb	r3, [r0, #12]
 801758e:	f003 031f 	and.w	r3, r3, #31
 8017592:	2b0b      	cmp	r3, #11
 8017594:	d10b      	bne.n	80175ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8017596:	8903      	ldrh	r3, [r0, #8]
 8017598:	8940      	ldrh	r0, [r0, #10]
 801759a:	4358      	muls	r0, r3
 801759c:	4b09      	ldr	r3, [pc, #36]	@ (80175c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801759e:	3003      	adds	r0, #3
 80175a0:	6819      	ldr	r1, [r3, #0]
 80175a2:	f020 0303 	bic.w	r3, r0, #3
 80175a6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80175aa:	4418      	add	r0, r3
 80175ac:	4770      	bx	lr
 80175ae:	2b0d      	cmp	r3, #13
 80175b0:	d101      	bne.n	80175b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80175b2:	300d      	adds	r0, #13
 80175b4:	4770      	bx	lr
 80175b6:	2000      	movs	r0, #0
 80175b8:	4770      	bx	lr
 80175ba:	bf00      	nop
 80175bc:	240042f8 	.word	0x240042f8
 80175c0:	24004300 	.word	0x24004300
 80175c4:	240042dc 	.word	0x240042dc
 80175c8:	240042fc 	.word	0x240042fc
 80175cc:	240042e0 	.word	0x240042e0

080175d0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80175d0:	4a17      	ldr	r2, [pc, #92]	@ (8017630 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80175d2:	b510      	push	{r4, lr}
 80175d4:	8803      	ldrh	r3, [r0, #0]
 80175d6:	8812      	ldrh	r2, [r2, #0]
 80175d8:	4293      	cmp	r3, r2
 80175da:	d20c      	bcs.n	80175f6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80175dc:	4a15      	ldr	r2, [pc, #84]	@ (8017634 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80175de:	2114      	movs	r1, #20
 80175e0:	6812      	ldr	r2, [r2, #0]
 80175e2:	fb01 2303 	mla	r3, r1, r3, r2
 80175e6:	7c58      	ldrb	r0, [r3, #17]
 80175e8:	0942      	lsrs	r2, r0, #5
 80175ea:	7cd8      	ldrb	r0, [r3, #19]
 80175ec:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80175f0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80175f4:	bd10      	pop	{r4, pc}
 80175f6:	4910      	ldr	r1, [pc, #64]	@ (8017638 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80175f8:	8809      	ldrh	r1, [r1, #0]
 80175fa:	4411      	add	r1, r2
 80175fc:	428b      	cmp	r3, r1
 80175fe:	da09      	bge.n	8017614 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017600:	1a9b      	subs	r3, r3, r2
 8017602:	4a0e      	ldr	r2, [pc, #56]	@ (801763c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8017604:	210e      	movs	r1, #14
 8017606:	6812      	ldr	r2, [r2, #0]
 8017608:	fb01 2303 	mla	r3, r1, r3, r2
 801760c:	7b18      	ldrb	r0, [r3, #12]
 801760e:	f000 001f 	and.w	r0, r0, #31
 8017612:	e7ef      	b.n	80175f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8017614:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017618:	4293      	cmp	r3, r2
 801761a:	d106      	bne.n	801762a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801761c:	f7fb fc3e 	bl	8012e9c <_ZN8touchgfx3HAL3lcdEv>
 8017620:	6803      	ldr	r3, [r0, #0]
 8017622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017628:	4718      	bx	r3
 801762a:	2000      	movs	r0, #0
 801762c:	e7e2      	b.n	80175f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801762e:	bf00      	nop
 8017630:	240042f8 	.word	0x240042f8
 8017634:	24004300 	.word	0x24004300
 8017638:	240042fc 	.word	0x240042fc
 801763c:	240042e0 	.word	0x240042e0

08017640 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8017640:	2010      	movs	r0, #16
 8017642:	4770      	bx	lr

08017644 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8017644:	2000      	movs	r0, #0
 8017646:	4770      	bx	lr

08017648 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8017648:	4b02      	ldr	r3, [pc, #8]	@ (8017654 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801764a:	8818      	ldrh	r0, [r3, #0]
 801764c:	0040      	lsls	r0, r0, #1
 801764e:	b280      	uxth	r0, r0
 8017650:	4770      	bx	lr
 8017652:	bf00      	nop
 8017654:	24004272 	.word	0x24004272

08017658 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017658:	2bff      	cmp	r3, #255	@ 0xff
 801765a:	d050      	beq.n	80176fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801765c:	2a0b      	cmp	r2, #11
 801765e:	d04a      	beq.n	80176f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017660:	d80e      	bhi.n	8017680 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017662:	2a03      	cmp	r2, #3
 8017664:	d03f      	beq.n	80176e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017666:	d804      	bhi.n	8017672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017668:	2a01      	cmp	r2, #1
 801766a:	d03e      	beq.n	80176ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801766c:	d93f      	bls.n	80176ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801766e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8017670:	4770      	bx	lr
 8017672:	2a09      	cmp	r2, #9
 8017674:	d03f      	beq.n	80176f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017676:	d83c      	bhi.n	80176f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017678:	2a08      	cmp	r2, #8
 801767a:	d03a      	beq.n	80176f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801767c:	2000      	movs	r0, #0
 801767e:	4770      	bx	lr
 8017680:	2a2f      	cmp	r2, #47	@ 0x2f
 8017682:	d024      	beq.n	80176ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8017684:	d80d      	bhi.n	80176a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8017686:	2a2d      	cmp	r2, #45	@ 0x2d
 8017688:	d014      	beq.n	80176b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801768a:	d826      	bhi.n	80176da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801768c:	2a2c      	cmp	r2, #44	@ 0x2c
 801768e:	d1f5      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017690:	684b      	ldr	r3, [r1, #4]
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	2b01      	cmp	r3, #1
 8017696:	d018      	beq.n	80176ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8017698:	d323      	bcc.n	80176e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801769a:	2b02      	cmp	r3, #2
 801769c:	d1ee      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801769e:	68c0      	ldr	r0, [r0, #12]
 80176a0:	4770      	bx	lr
 80176a2:	2a31      	cmp	r2, #49	@ 0x31
 80176a4:	d004      	beq.n	80176b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80176a6:	d328      	bcc.n	80176fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80176a8:	2a32      	cmp	r2, #50	@ 0x32
 80176aa:	d026      	beq.n	80176fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80176ac:	2a33      	cmp	r2, #51	@ 0x33
 80176ae:	d1e5      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80176b0:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80176b2:	4770      	bx	lr
 80176b4:	684b      	ldr	r3, [r1, #4]
 80176b6:	781b      	ldrb	r3, [r3, #0]
 80176b8:	2b01      	cmp	r3, #1
 80176ba:	d004      	beq.n	80176c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80176bc:	d30b      	bcc.n	80176d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80176be:	2b02      	cmp	r3, #2
 80176c0:	d1dc      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80176c2:	6940      	ldr	r0, [r0, #20]
 80176c4:	4770      	bx	lr
 80176c6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80176c8:	4770      	bx	lr
 80176ca:	69c0      	ldr	r0, [r0, #28]
 80176cc:	4770      	bx	lr
 80176ce:	684b      	ldr	r3, [r1, #4]
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d1d2      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80176d6:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80176d8:	4770      	bx	lr
 80176da:	684b      	ldr	r3, [r1, #4]
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d1cc      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80176e2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80176e4:	4770      	bx	lr
 80176e6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80176e8:	4770      	bx	lr
 80176ea:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 80176ec:	4770      	bx	lr
 80176ee:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80176f0:	4770      	bx	lr
 80176f2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80176f4:	4770      	bx	lr
 80176f6:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80176f8:	4770      	bx	lr
 80176fa:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 80176fc:	4770      	bx	lr
 80176fe:	2a0b      	cmp	r2, #11
 8017700:	d049      	beq.n	8017796 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017702:	d80e      	bhi.n	8017722 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8017704:	2a03      	cmp	r2, #3
 8017706:	d040      	beq.n	801778a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017708:	d804      	bhi.n	8017714 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801770a:	2a01      	cmp	r2, #1
 801770c:	d03f      	beq.n	801778e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801770e:	d940      	bls.n	8017792 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8017710:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8017712:	4770      	bx	lr
 8017714:	2a09      	cmp	r2, #9
 8017716:	d03e      	beq.n	8017796 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017718:	d801      	bhi.n	801771e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801771a:	2a08      	cmp	r2, #8
 801771c:	d1ae      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801771e:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8017720:	4770      	bx	lr
 8017722:	2a2f      	cmp	r2, #47	@ 0x2f
 8017724:	d024      	beq.n	8017770 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017726:	d80d      	bhi.n	8017744 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8017728:	2a2d      	cmp	r2, #45	@ 0x2d
 801772a:	d014      	beq.n	8017756 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801772c:	d826      	bhi.n	801777c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801772e:	2a2c      	cmp	r2, #44	@ 0x2c
 8017730:	d1a4      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017732:	684b      	ldr	r3, [r1, #4]
 8017734:	781b      	ldrb	r3, [r3, #0]
 8017736:	2b01      	cmp	r3, #1
 8017738:	d018      	beq.n	801776c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801773a:	d324      	bcc.n	8017786 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801773c:	2b02      	cmp	r3, #2
 801773e:	d19d      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017740:	6900      	ldr	r0, [r0, #16]
 8017742:	4770      	bx	lr
 8017744:	2a31      	cmp	r2, #49	@ 0x31
 8017746:	d004      	beq.n	8017752 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8017748:	d327      	bcc.n	801779a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801774a:	2a32      	cmp	r2, #50	@ 0x32
 801774c:	d025      	beq.n	801779a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801774e:	2a33      	cmp	r2, #51	@ 0x33
 8017750:	d194      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017752:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8017754:	4770      	bx	lr
 8017756:	684b      	ldr	r3, [r1, #4]
 8017758:	781b      	ldrb	r3, [r3, #0]
 801775a:	2b01      	cmp	r3, #1
 801775c:	d004      	beq.n	8017768 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801775e:	d30b      	bcc.n	8017778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8017760:	2b02      	cmp	r3, #2
 8017762:	d18b      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017764:	6980      	ldr	r0, [r0, #24]
 8017766:	4770      	bx	lr
 8017768:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801776a:	4770      	bx	lr
 801776c:	6a00      	ldr	r0, [r0, #32]
 801776e:	4770      	bx	lr
 8017770:	684b      	ldr	r3, [r1, #4]
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d181      	bne.n	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017778:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801777a:	4770      	bx	lr
 801777c:	684b      	ldr	r3, [r1, #4]
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	2b00      	cmp	r3, #0
 8017782:	f47f af7b 	bne.w	801767c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017786:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8017788:	4770      	bx	lr
 801778a:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801778c:	4770      	bx	lr
 801778e:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8017790:	4770      	bx	lr
 8017792:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8017794:	4770      	bx	lr
 8017796:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8017798:	4770      	bx	lr
 801779a:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 801779c:	4770      	bx	lr

0801779e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801779e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a2:	b087      	sub	sp, #28
 80177a4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80177a6:	9205      	str	r2, [sp, #20]
 80177a8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80177ac:	9101      	str	r1, [sp, #4]
 80177ae:	9202      	str	r2, [sp, #8]
 80177b0:	6841      	ldr	r1, [r0, #4]
 80177b2:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 80177b6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 80177ba:	fb01 2404 	mla	r4, r1, r4, r2
 80177be:	6802      	ldr	r2, [r0, #0]
 80177c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80177c4:	f8de 2000 	ldr.w	r2, [lr]
 80177c8:	9203      	str	r2, [sp, #12]
 80177ca:	f8de 2004 	ldr.w	r2, [lr, #4]
 80177ce:	3204      	adds	r2, #4
 80177d0:	9204      	str	r2, [sp, #16]
 80177d2:	9a02      	ldr	r2, [sp, #8]
 80177d4:	43d6      	mvns	r6, r2
 80177d6:	b2f6      	uxtb	r6, r6
 80177d8:	9a01      	ldr	r2, [sp, #4]
 80177da:	2a00      	cmp	r2, #0
 80177dc:	dc03      	bgt.n	80177e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80177de:	9a05      	ldr	r2, [sp, #20]
 80177e0:	2a00      	cmp	r2, #0
 80177e2:	f340 8129 	ble.w	8017a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80177e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80177e8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80177ec:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80177f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80177f2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80177f6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	dd0e      	ble.n	801781c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80177fe:	1408      	asrs	r0, r1, #16
 8017800:	d405      	bmi.n	801780e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017802:	4560      	cmp	r0, ip
 8017804:	da03      	bge.n	801780e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017806:	1410      	asrs	r0, r2, #16
 8017808:	d401      	bmi.n	801780e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801780a:	42b8      	cmp	r0, r7
 801780c:	db07      	blt.n	801781e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801780e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8017810:	3b01      	subs	r3, #1
 8017812:	3402      	adds	r4, #2
 8017814:	4401      	add	r1, r0
 8017816:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8017818:	4402      	add	r2, r0
 801781a:	e7ee      	b.n	80177fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801781c:	d071      	beq.n	8017902 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801781e:	1e58      	subs	r0, r3, #1
 8017820:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8017822:	fb05 1500 	mla	r5, r5, r0, r1
 8017826:	142d      	asrs	r5, r5, #16
 8017828:	d45f      	bmi.n	80178ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801782a:	4565      	cmp	r5, ip
 801782c:	da5d      	bge.n	80178ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801782e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8017830:	fb05 2000 	mla	r0, r5, r0, r2
 8017834:	1400      	asrs	r0, r0, #16
 8017836:	d458      	bmi.n	80178ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017838:	42b8      	cmp	r0, r7
 801783a:	da56      	bge.n	80178ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801783c:	4699      	mov	r9, r3
 801783e:	46a2      	mov	sl, r4
 8017840:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8017844:	f1b9 0f00 	cmp.w	r9, #0
 8017848:	dd57      	ble.n	80178fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801784a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801784e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017852:	9803      	ldr	r0, [sp, #12]
 8017854:	140d      	asrs	r5, r1, #16
 8017856:	f109 39ff 	add.w	r9, r9, #4294967295
 801785a:	fb07 000c 	mla	r0, r7, ip, r0
 801785e:	5d40      	ldrb	r0, [r0, r5]
 8017860:	9d04      	ldr	r5, [sp, #16]
 8017862:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017866:	f8ba 5000 	ldrh.w	r5, [sl]
 801786a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801786e:	122f      	asrs	r7, r5, #8
 8017870:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8017874:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8017878:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801787c:	00ed      	lsls	r5, r5, #3
 801787e:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8017882:	fb17 f706 	smulbb	r7, r7, r6
 8017886:	b2ed      	uxtb	r5, r5
 8017888:	fb18 f806 	smulbb	r8, r8, r6
 801788c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8017890:	10c7      	asrs	r7, r0, #3
 8017892:	fb15 f506 	smulbb	r5, r5, r6
 8017896:	00c0      	lsls	r0, r0, #3
 8017898:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801789c:	fa1f fc8c 	uxth.w	ip, ip
 80178a0:	b2c0      	uxtb	r0, r0
 80178a2:	fb07 870b 	mla	r7, r7, fp, r8
 80178a6:	fb00 500b 	mla	r0, r0, fp, r5
 80178aa:	f10c 0501 	add.w	r5, ip, #1
 80178ae:	b2bf      	uxth	r7, r7
 80178b0:	b280      	uxth	r0, r0
 80178b2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80178b6:	f107 0801 	add.w	r8, r7, #1
 80178ba:	1c45      	adds	r5, r0, #1
 80178bc:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80178c0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80178c4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80178c8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80178ca:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80178ce:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80178d2:	4401      	add	r1, r0
 80178d4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80178d8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80178da:	ea45 0c0c 	orr.w	ip, r5, ip
 80178de:	4402      	add	r2, r0
 80178e0:	ea4c 0c08 	orr.w	ip, ip, r8
 80178e4:	f82a cb02 	strh.w	ip, [sl], #2
 80178e8:	e7ac      	b.n	8017844 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80178ea:	f04f 0800 	mov.w	r8, #0
 80178ee:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80178f2:	eb03 0008 	add.w	r0, r3, r8
 80178f6:	2800      	cmp	r0, #0
 80178f8:	dc41      	bgt.n	801797e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80178fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80178fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017902:	9b01      	ldr	r3, [sp, #4]
 8017904:	2b00      	cmp	r3, #0
 8017906:	f340 8097 	ble.w	8017a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801790a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801790e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017910:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017914:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017918:	eef0 6a62 	vmov.f32	s13, s5
 801791c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017920:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017924:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017928:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801792c:	eef0 6a43 	vmov.f32	s13, s6
 8017930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017934:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 8017938:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801793c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017940:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017944:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017948:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801794c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017950:	ee12 2a90 	vmov	r2, s5
 8017954:	eef0 2a47 	vmov.f32	s5, s14
 8017958:	fb92 f3f3 	sdiv	r3, r2, r3
 801795c:	ee13 2a10 	vmov	r2, s6
 8017960:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017962:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017964:	eeb0 3a67 	vmov.f32	s6, s15
 8017968:	fb92 f3f3 	sdiv	r3, r2, r3
 801796c:	9314      	str	r3, [sp, #80]	@ 0x50
 801796e:	9b01      	ldr	r3, [sp, #4]
 8017970:	9a05      	ldr	r2, [sp, #20]
 8017972:	3b01      	subs	r3, #1
 8017974:	9301      	str	r3, [sp, #4]
 8017976:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017978:	bf08      	it	eq
 801797a:	4613      	moveq	r3, r2
 801797c:	e72c      	b.n	80177d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801797e:	140f      	asrs	r7, r1, #16
 8017980:	d453      	bmi.n	8017a2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017982:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017986:	42bd      	cmp	r5, r7
 8017988:	dd4f      	ble.n	8017a2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801798a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801798e:	d44c      	bmi.n	8017a2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017990:	f8de 000c 	ldr.w	r0, [lr, #12]
 8017994:	4560      	cmp	r0, ip
 8017996:	dd48      	ble.n	8017a2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017998:	9803      	ldr	r0, [sp, #12]
 801799a:	b22d      	sxth	r5, r5
 801799c:	fb0c 0505 	mla	r5, ip, r5, r0
 80179a0:	5de8      	ldrb	r0, [r5, r7]
 80179a2:	9d04      	ldr	r5, [sp, #16]
 80179a4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80179a8:	f06f 0501 	mvn.w	r5, #1
 80179ac:	fb05 fb08 	mul.w	fp, r5, r8
 80179b0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80179b4:	f834 500b 	ldrh.w	r5, [r4, fp]
 80179b8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80179bc:	122f      	asrs	r7, r5, #8
 80179be:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80179c2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80179c6:	00ed      	lsls	r5, r5, #3
 80179c8:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80179cc:	fb17 f706 	smulbb	r7, r7, r6
 80179d0:	b2ed      	uxtb	r5, r5
 80179d2:	fb19 f906 	smulbb	r9, r9, r6
 80179d6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80179da:	10c7      	asrs	r7, r0, #3
 80179dc:	fb15 f506 	smulbb	r5, r5, r6
 80179e0:	00c0      	lsls	r0, r0, #3
 80179e2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80179e6:	fa1f fc8c 	uxth.w	ip, ip
 80179ea:	b2c0      	uxtb	r0, r0
 80179ec:	fb07 970a 	mla	r7, r7, sl, r9
 80179f0:	fb00 500a 	mla	r0, r0, sl, r5
 80179f4:	f10c 0501 	add.w	r5, ip, #1
 80179f8:	b2bf      	uxth	r7, r7
 80179fa:	b280      	uxth	r0, r0
 80179fc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017a00:	f107 0901 	add.w	r9, r7, #1
 8017a04:	1c45      	adds	r5, r0, #1
 8017a06:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8017a0a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8017a0e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017a12:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017a16:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017a1a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8017a1e:	ea45 0c0c 	orr.w	ip, r5, ip
 8017a22:	ea4c 0c09 	orr.w	ip, ip, r9
 8017a26:	f824 c00b 	strh.w	ip, [r4, fp]
 8017a2a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8017a2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017a30:	4401      	add	r1, r0
 8017a32:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8017a34:	4402      	add	r2, r0
 8017a36:	e75c      	b.n	80178f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017a38:	b007      	add	sp, #28
 8017a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a42:	b085      	sub	sp, #20
 8017a44:	4693      	mov	fp, r2
 8017a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017a4a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8017a4c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8017a4e:	6870      	ldr	r0, [r6, #4]
 8017a50:	9100      	str	r1, [sp, #0]
 8017a52:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8017a56:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 8017a5a:	fb00 2404 	mla	r4, r0, r4, r2
 8017a5e:	6832      	ldr	r2, [r6, #0]
 8017a60:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017a64:	682a      	ldr	r2, [r5, #0]
 8017a66:	9201      	str	r2, [sp, #4]
 8017a68:	686a      	ldr	r2, [r5, #4]
 8017a6a:	3204      	adds	r2, #4
 8017a6c:	9202      	str	r2, [sp, #8]
 8017a6e:	9a00      	ldr	r2, [sp, #0]
 8017a70:	2a00      	cmp	r2, #0
 8017a72:	dc03      	bgt.n	8017a7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017a74:	f1bb 0f00 	cmp.w	fp, #0
 8017a78:	f340 80a0 	ble.w	8017bbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017a7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017a7e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017a82:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017a86:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017a88:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017a8c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	dd0c      	ble.n	8017aae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017a94:	1406      	asrs	r6, r0, #16
 8017a96:	d405      	bmi.n	8017aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017a98:	454e      	cmp	r6, r9
 8017a9a:	da03      	bge.n	8017aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017a9c:	1416      	asrs	r6, r2, #16
 8017a9e:	d401      	bmi.n	8017aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017aa0:	4546      	cmp	r6, r8
 8017aa2:	db05      	blt.n	8017ab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017aa4:	4470      	add	r0, lr
 8017aa6:	4462      	add	r2, ip
 8017aa8:	3b01      	subs	r3, #1
 8017aaa:	3402      	adds	r4, #2
 8017aac:	e7f0      	b.n	8017a90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017aae:	d00f      	beq.n	8017ad0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017ab0:	1e5e      	subs	r6, r3, #1
 8017ab2:	fb0e 0706 	mla	r7, lr, r6, r0
 8017ab6:	143f      	asrs	r7, r7, #16
 8017ab8:	d541      	bpl.n	8017b3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8017aba:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017abe:	4698      	mov	r8, r3
 8017ac0:	9603      	str	r6, [sp, #12]
 8017ac2:	f1b8 0f00 	cmp.w	r8, #0
 8017ac6:	dc59      	bgt.n	8017b7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017ac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017acc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017ad0:	9b00      	ldr	r3, [sp, #0]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	dd72      	ble.n	8017bbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017ad6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017adc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017ae0:	eeb0 6a62 	vmov.f32	s12, s5
 8017ae4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017ae8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017aec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017af0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017af4:	eeb0 6a43 	vmov.f32	s12, s6
 8017af8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017afc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017b00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b04:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b08:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b18:	ee12 2a90 	vmov	r2, s5
 8017b1c:	eef0 2a47 	vmov.f32	s5, s14
 8017b20:	fb92 fef3 	sdiv	lr, r2, r3
 8017b24:	ee13 2a10 	vmov	r2, s6
 8017b28:	eeb0 3a67 	vmov.f32	s6, s15
 8017b2c:	fb92 fcf3 	sdiv	ip, r2, r3
 8017b30:	9b00      	ldr	r3, [sp, #0]
 8017b32:	3b01      	subs	r3, #1
 8017b34:	9300      	str	r3, [sp, #0]
 8017b36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b38:	bf08      	it	eq
 8017b3a:	465b      	moveq	r3, fp
 8017b3c:	e797      	b.n	8017a6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8017b3e:	454f      	cmp	r7, r9
 8017b40:	dabb      	bge.n	8017aba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017b42:	fb0c 2606 	mla	r6, ip, r6, r2
 8017b46:	1436      	asrs	r6, r6, #16
 8017b48:	d4b7      	bmi.n	8017aba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017b4a:	4546      	cmp	r6, r8
 8017b4c:	dab5      	bge.n	8017aba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017b4e:	461e      	mov	r6, r3
 8017b50:	46a0      	mov	r8, r4
 8017b52:	2e00      	cmp	r6, #0
 8017b54:	ddb8      	ble.n	8017ac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017b56:	1417      	asrs	r7, r2, #16
 8017b58:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8017b5c:	9901      	ldr	r1, [sp, #4]
 8017b5e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8017b62:	4462      	add	r2, ip
 8017b64:	4470      	add	r0, lr
 8017b66:	fb0a 1707 	mla	r7, sl, r7, r1
 8017b6a:	9902      	ldr	r1, [sp, #8]
 8017b6c:	3e01      	subs	r6, #1
 8017b6e:	f817 7009 	ldrb.w	r7, [r7, r9]
 8017b72:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8017b76:	f828 7b02 	strh.w	r7, [r8], #2
 8017b7a:	e7ea      	b.n	8017b52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8017b7c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017b80:	d417      	bmi.n	8017bb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017b82:	68ae      	ldr	r6, [r5, #8]
 8017b84:	454e      	cmp	r6, r9
 8017b86:	dd14      	ble.n	8017bb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017b88:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017b8c:	d411      	bmi.n	8017bb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017b8e:	68ef      	ldr	r7, [r5, #12]
 8017b90:	4557      	cmp	r7, sl
 8017b92:	dd0e      	ble.n	8017bb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017b94:	9f01      	ldr	r7, [sp, #4]
 8017b96:	b236      	sxth	r6, r6
 8017b98:	f06f 0101 	mvn.w	r1, #1
 8017b9c:	fb0a 7606 	mla	r6, sl, r6, r7
 8017ba0:	9f02      	ldr	r7, [sp, #8]
 8017ba2:	f816 6009 	ldrb.w	r6, [r6, r9]
 8017ba6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8017baa:	fb01 f608 	mul.w	r6, r1, r8
 8017bae:	9903      	ldr	r1, [sp, #12]
 8017bb0:	538f      	strh	r7, [r1, r6]
 8017bb2:	4470      	add	r0, lr
 8017bb4:	4462      	add	r2, ip
 8017bb6:	f108 38ff 	add.w	r8, r8, #4294967295
 8017bba:	e782      	b.n	8017ac2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017bbc:	b005      	add	sp, #20
 8017bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017bc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bc6:	b087      	sub	sp, #28
 8017bc8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8017bca:	9205      	str	r2, [sp, #20]
 8017bcc:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017bd0:	9102      	str	r1, [sp, #8]
 8017bd2:	9203      	str	r2, [sp, #12]
 8017bd4:	6861      	ldr	r1, [r4, #4]
 8017bd6:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8017bda:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8017bde:	fb01 2000 	mla	r0, r1, r0, r2
 8017be2:	6822      	ldr	r2, [r4, #0]
 8017be4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017be8:	9200      	str	r2, [sp, #0]
 8017bea:	f8dc 2000 	ldr.w	r2, [ip]
 8017bee:	9204      	str	r2, [sp, #16]
 8017bf0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017bf4:	3204      	adds	r2, #4
 8017bf6:	9201      	str	r2, [sp, #4]
 8017bf8:	9a03      	ldr	r2, [sp, #12]
 8017bfa:	43d5      	mvns	r5, r2
 8017bfc:	b2ed      	uxtb	r5, r5
 8017bfe:	9a02      	ldr	r2, [sp, #8]
 8017c00:	2a00      	cmp	r2, #0
 8017c02:	dc03      	bgt.n	8017c0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017c04:	9a05      	ldr	r2, [sp, #20]
 8017c06:	2a00      	cmp	r2, #0
 8017c08:	f340 812c 	ble.w	8017e64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017c0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017c0e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017c12:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8017c16:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017c18:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017c1c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	dd10      	ble.n	8017c46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017c24:	140c      	asrs	r4, r1, #16
 8017c26:	d405      	bmi.n	8017c34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017c28:	4574      	cmp	r4, lr
 8017c2a:	da03      	bge.n	8017c34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017c2c:	1414      	asrs	r4, r2, #16
 8017c2e:	d401      	bmi.n	8017c34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017c30:	42bc      	cmp	r4, r7
 8017c32:	db09      	blt.n	8017c48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017c34:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017c36:	3b01      	subs	r3, #1
 8017c38:	9800      	ldr	r0, [sp, #0]
 8017c3a:	4421      	add	r1, r4
 8017c3c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8017c3e:	3002      	adds	r0, #2
 8017c40:	4422      	add	r2, r4
 8017c42:	9000      	str	r0, [sp, #0]
 8017c44:	e7ec      	b.n	8017c20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8017c46:	d071      	beq.n	8017d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8017c48:	1e5c      	subs	r4, r3, #1
 8017c4a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8017c4c:	fb06 1604 	mla	r6, r6, r4, r1
 8017c50:	1436      	asrs	r6, r6, #16
 8017c52:	d45d      	bmi.n	8017d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017c54:	4576      	cmp	r6, lr
 8017c56:	da5b      	bge.n	8017d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017c58:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017c5a:	fb06 2404 	mla	r4, r6, r4, r2
 8017c5e:	1424      	asrs	r4, r4, #16
 8017c60:	d456      	bmi.n	8017d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017c62:	42bc      	cmp	r4, r7
 8017c64:	da54      	bge.n	8017d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017c66:	4698      	mov	r8, r3
 8017c68:	f8dd 9000 	ldr.w	r9, [sp]
 8017c6c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8017c70:	f1b8 0f00 	cmp.w	r8, #0
 8017c74:	dd54      	ble.n	8017d20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8017c76:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8017c7a:	1414      	asrs	r4, r2, #16
 8017c7c:	9804      	ldr	r0, [sp, #16]
 8017c7e:	140e      	asrs	r6, r1, #16
 8017c80:	f108 38ff 	add.w	r8, r8, #4294967295
 8017c84:	fb07 0404 	mla	r4, r7, r4, r0
 8017c88:	9801      	ldr	r0, [sp, #4]
 8017c8a:	f814 e006 	ldrb.w	lr, [r4, r6]
 8017c8e:	f8b9 4000 	ldrh.w	r4, [r9]
 8017c92:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017c96:	1227      	asrs	r7, r4, #8
 8017c98:	eb00 0b0e 	add.w	fp, r0, lr
 8017c9c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8017ca0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8017ca4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8017ca6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017caa:	f89b b001 	ldrb.w	fp, [fp, #1]
 8017cae:	4401      	add	r1, r0
 8017cb0:	fb16 f60a 	smulbb	r6, r6, sl
 8017cb4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8017cb6:	fb1b fb0a 	smulbb	fp, fp, sl
 8017cba:	fb07 6705 	mla	r7, r7, r5, r6
 8017cbe:	10e6      	asrs	r6, r4, #3
 8017cc0:	00e4      	lsls	r4, r4, #3
 8017cc2:	4402      	add	r2, r0
 8017cc4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8017cc8:	b2bf      	uxth	r7, r7
 8017cca:	b2e4      	uxtb	r4, r4
 8017ccc:	fb06 b605 	mla	r6, r6, r5, fp
 8017cd0:	fb14 f405 	smulbb	r4, r4, r5
 8017cd4:	b2b6      	uxth	r6, r6
 8017cd6:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8017cda:	1c7c      	adds	r4, r7, #1
 8017cdc:	f106 0b01 	add.w	fp, r6, #1
 8017ce0:	fa1f fe8e 	uxth.w	lr, lr
 8017ce4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017ce8:	f10e 0401 	add.w	r4, lr, #1
 8017cec:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8017cf0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8017cf4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8017cf8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017cfc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8017d00:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8017d04:	4327      	orrs	r7, r4
 8017d06:	ea47 070b 	orr.w	r7, r7, fp
 8017d0a:	f829 7b02 	strh.w	r7, [r9], #2
 8017d0e:	e7af      	b.n	8017c70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017d10:	f04f 0e00 	mov.w	lr, #0
 8017d14:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8017d18:	eb03 040e 	add.w	r4, r3, lr
 8017d1c:	2c00      	cmp	r4, #0
 8017d1e:	dc43      	bgt.n	8017da8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8017d20:	9a00      	ldr	r2, [sp, #0]
 8017d22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017d26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017d2a:	9300      	str	r3, [sp, #0]
 8017d2c:	9b02      	ldr	r3, [sp, #8]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	f340 8098 	ble.w	8017e64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017d38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017d3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017d3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017d42:	eef0 6a62 	vmov.f32	s13, s5
 8017d46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017d4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017d4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017d52:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 8017d56:	eef0 6a43 	vmov.f32	s13, s6
 8017d5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017d5e:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 8017d62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017d66:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017d6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017d6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017d72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017d76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017d7a:	ee12 2a90 	vmov	r2, s5
 8017d7e:	eef0 2a47 	vmov.f32	s5, s14
 8017d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d86:	ee13 2a10 	vmov	r2, s6
 8017d8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017d8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017d8e:	eeb0 3a67 	vmov.f32	s6, s15
 8017d92:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d96:	9314      	str	r3, [sp, #80]	@ 0x50
 8017d98:	9b02      	ldr	r3, [sp, #8]
 8017d9a:	9a05      	ldr	r2, [sp, #20]
 8017d9c:	3b01      	subs	r3, #1
 8017d9e:	9302      	str	r3, [sp, #8]
 8017da0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017da2:	bf08      	it	eq
 8017da4:	4613      	moveq	r3, r2
 8017da6:	e72a      	b.n	8017bfe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017da8:	140f      	asrs	r7, r1, #16
 8017daa:	d454      	bmi.n	8017e56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017dac:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017db0:	42be      	cmp	r6, r7
 8017db2:	dd50      	ble.n	8017e56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017db4:	ea5f 4822 	movs.w	r8, r2, asr #16
 8017db8:	d44d      	bmi.n	8017e56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017dba:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8017dbe:	4544      	cmp	r4, r8
 8017dc0:	dd49      	ble.n	8017e56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017dc2:	9c04      	ldr	r4, [sp, #16]
 8017dc4:	b236      	sxth	r6, r6
 8017dc6:	f06f 0001 	mvn.w	r0, #1
 8017dca:	fb08 4606 	mla	r6, r8, r6, r4
 8017dce:	9c01      	ldr	r4, [sp, #4]
 8017dd0:	fb00 fa0e 	mul.w	sl, r0, lr
 8017dd4:	9800      	ldr	r0, [sp, #0]
 8017dd6:	f816 8007 	ldrb.w	r8, [r6, r7]
 8017dda:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017dde:	eb04 0b08 	add.w	fp, r4, r8
 8017de2:	f830 400a 	ldrh.w	r4, [r0, sl]
 8017de6:	9801      	ldr	r0, [sp, #4]
 8017de8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017dec:	1227      	asrs	r7, r4, #8
 8017dee:	f89b b001 	ldrb.w	fp, [fp, #1]
 8017df2:	fb16 f609 	smulbb	r6, r6, r9
 8017df6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8017dfa:	f810 8008 	ldrb.w	r8, [r0, r8]
 8017dfe:	fb1b fb09 	smulbb	fp, fp, r9
 8017e02:	fb07 6705 	mla	r7, r7, r5, r6
 8017e06:	10e6      	asrs	r6, r4, #3
 8017e08:	00e4      	lsls	r4, r4, #3
 8017e0a:	9800      	ldr	r0, [sp, #0]
 8017e0c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8017e10:	b2bf      	uxth	r7, r7
 8017e12:	b2e4      	uxtb	r4, r4
 8017e14:	fb06 b605 	mla	r6, r6, r5, fp
 8017e18:	fb14 f405 	smulbb	r4, r4, r5
 8017e1c:	b2b6      	uxth	r6, r6
 8017e1e:	fb08 4809 	mla	r8, r8, r9, r4
 8017e22:	1c7c      	adds	r4, r7, #1
 8017e24:	f106 0b01 	add.w	fp, r6, #1
 8017e28:	fa1f f888 	uxth.w	r8, r8
 8017e2c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017e30:	f108 0401 	add.w	r4, r8, #1
 8017e34:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8017e38:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8017e3c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8017e40:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017e44:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8017e48:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8017e4c:	4327      	orrs	r7, r4
 8017e4e:	ea47 070b 	orr.w	r7, r7, fp
 8017e52:	f820 700a 	strh.w	r7, [r0, sl]
 8017e56:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8017e58:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017e5c:	4401      	add	r1, r0
 8017e5e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8017e60:	4402      	add	r2, r0
 8017e62:	e759      	b.n	8017d18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017e64:	b007      	add	sp, #28
 8017e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017e6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e70:	b085      	sub	sp, #20
 8017e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017e76:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8017e78:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8017e7a:	9203      	str	r2, [sp, #12]
 8017e7c:	6870      	ldr	r0, [r6, #4]
 8017e7e:	686f      	ldr	r7, [r5, #4]
 8017e80:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 8017e84:	3704      	adds	r7, #4
 8017e86:	9101      	str	r1, [sp, #4]
 8017e88:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8017e8c:	fb00 2404 	mla	r4, r0, r4, r2
 8017e90:	6832      	ldr	r2, [r6, #0]
 8017e92:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017e96:	682a      	ldr	r2, [r5, #0]
 8017e98:	9202      	str	r2, [sp, #8]
 8017e9a:	9a01      	ldr	r2, [sp, #4]
 8017e9c:	2a00      	cmp	r2, #0
 8017e9e:	dc03      	bgt.n	8017ea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017ea0:	9a03      	ldr	r2, [sp, #12]
 8017ea2:	2a00      	cmp	r2, #0
 8017ea4:	f340 80cc 	ble.w	8018040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017ea8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017eaa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017eae:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017eb2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017eb4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017eb8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	dd0d      	ble.n	8017edc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017ec0:	1406      	asrs	r6, r0, #16
 8017ec2:	d405      	bmi.n	8017ed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017ec4:	454e      	cmp	r6, r9
 8017ec6:	da03      	bge.n	8017ed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017ec8:	1416      	asrs	r6, r2, #16
 8017eca:	d401      	bmi.n	8017ed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017ecc:	4546      	cmp	r6, r8
 8017ece:	db06      	blt.n	8017ede <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017ed0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017ed2:	4460      	add	r0, ip
 8017ed4:	3b01      	subs	r3, #1
 8017ed6:	3402      	adds	r4, #2
 8017ed8:	4432      	add	r2, r6
 8017eda:	e7ef      	b.n	8017ebc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017edc:	d00f      	beq.n	8017efe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017ede:	1e5e      	subs	r6, r3, #1
 8017ee0:	fb0c 0e06 	mla	lr, ip, r6, r0
 8017ee4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8017ee8:	d543      	bpl.n	8017f72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8017eea:	4698      	mov	r8, r3
 8017eec:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8017ef0:	f1b8 0f00 	cmp.w	r8, #0
 8017ef4:	dc71      	bgt.n	8017fda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8017ef6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017efa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017efe:	9b01      	ldr	r3, [sp, #4]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	f340 809d 	ble.w	8018040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017f06:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017f0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017f10:	eeb0 6a62 	vmov.f32	s12, s5
 8017f14:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017f18:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017f1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f20:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017f24:	eeb0 6a43 	vmov.f32	s12, s6
 8017f28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f2c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017f30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017f34:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017f38:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017f3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017f40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017f44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017f48:	ee12 2a90 	vmov	r2, s5
 8017f4c:	eef0 2a47 	vmov.f32	s5, s14
 8017f50:	fb92 fcf3 	sdiv	ip, r2, r3
 8017f54:	ee13 2a10 	vmov	r2, s6
 8017f58:	eeb0 3a67 	vmov.f32	s6, s15
 8017f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017f60:	9312      	str	r3, [sp, #72]	@ 0x48
 8017f62:	9b01      	ldr	r3, [sp, #4]
 8017f64:	9a03      	ldr	r2, [sp, #12]
 8017f66:	3b01      	subs	r3, #1
 8017f68:	9301      	str	r3, [sp, #4]
 8017f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f6c:	bf08      	it	eq
 8017f6e:	4613      	moveq	r3, r2
 8017f70:	e793      	b.n	8017e9a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8017f72:	45ce      	cmp	lr, r9
 8017f74:	dab9      	bge.n	8017eea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017f76:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017f78:	fb01 2606 	mla	r6, r1, r6, r2
 8017f7c:	1436      	asrs	r6, r6, #16
 8017f7e:	d4b4      	bmi.n	8017eea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017f80:	4546      	cmp	r6, r8
 8017f82:	dab2      	bge.n	8017eea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017f84:	4698      	mov	r8, r3
 8017f86:	46a2      	mov	sl, r4
 8017f88:	f1b8 0f00 	cmp.w	r8, #0
 8017f8c:	ddb3      	ble.n	8017ef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017f8e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017f92:	1416      	asrs	r6, r2, #16
 8017f94:	9902      	ldr	r1, [sp, #8]
 8017f96:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8017f9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8017f9e:	4460      	add	r0, ip
 8017fa0:	fb09 1606 	mla	r6, r9, r6, r1
 8017fa4:	4928      	ldr	r1, [pc, #160]	@ (8018048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8017fa6:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8017faa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017fae:	eb07 0b0e 	add.w	fp, r7, lr
 8017fb2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8017fb6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8017fba:	00f6      	lsls	r6, r6, #3
 8017fbc:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8017fc0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017fc2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8017fc6:	440a      	add	r2, r1
 8017fc8:	ea49 0606 	orr.w	r6, r9, r6
 8017fcc:	f817 900e 	ldrb.w	r9, [r7, lr]
 8017fd0:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8017fd4:	f82a 6b02 	strh.w	r6, [sl], #2
 8017fd8:	e7d6      	b.n	8017f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017fda:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017fde:	d429      	bmi.n	8018034 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017fe0:	68ae      	ldr	r6, [r5, #8]
 8017fe2:	454e      	cmp	r6, r9
 8017fe4:	dd26      	ble.n	8018034 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017fe6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8017fea:	d423      	bmi.n	8018034 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017fec:	68e9      	ldr	r1, [r5, #12]
 8017fee:	4559      	cmp	r1, fp
 8017ff0:	dd20      	ble.n	8018034 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017ff2:	fa0f fe86 	sxth.w	lr, r6
 8017ff6:	9902      	ldr	r1, [sp, #8]
 8017ff8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8017ffc:	f06f 0101 	mvn.w	r1, #1
 8018000:	f81e e009 	ldrb.w	lr, [lr, r9]
 8018004:	fb01 f908 	mul.w	r9, r1, r8
 8018008:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801800c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018010:	eb07 060e 	add.w	r6, r7, lr
 8018014:	f896 b002 	ldrb.w	fp, [r6, #2]
 8018018:	7876      	ldrb	r6, [r6, #1]
 801801a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801801e:	00f6      	lsls	r6, r6, #3
 8018020:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8018024:	ea4b 0606 	orr.w	r6, fp, r6
 8018028:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801802c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8018030:	f82a 6009 	strh.w	r6, [sl, r9]
 8018034:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018036:	4460      	add	r0, ip
 8018038:	f108 38ff 	add.w	r8, r8, #4294967295
 801803c:	440a      	add	r2, r1
 801803e:	e757      	b.n	8017ef0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018040:	b005      	add	sp, #20
 8018042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018046:	bf00      	nop
 8018048:	fffff800 	.word	0xfffff800

0801804c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018050:	b087      	sub	sp, #28
 8018052:	468b      	mov	fp, r1
 8018054:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018058:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801805a:	9204      	str	r2, [sp, #16]
 801805c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8018060:	6841      	ldr	r1, [r0, #4]
 8018062:	9205      	str	r2, [sp, #20]
 8018064:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8018068:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801806c:	fb01 2404 	mla	r4, r1, r4, r2
 8018070:	6802      	ldr	r2, [r0, #0]
 8018072:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018076:	f8dc 2000 	ldr.w	r2, [ip]
 801807a:	9201      	str	r2, [sp, #4]
 801807c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018080:	3204      	adds	r2, #4
 8018082:	9202      	str	r2, [sp, #8]
 8018084:	f1bb 0f00 	cmp.w	fp, #0
 8018088:	dc03      	bgt.n	8018092 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801808a:	9a04      	ldr	r2, [sp, #16]
 801808c:	2a00      	cmp	r2, #0
 801808e:	f340 8138 	ble.w	8018302 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8018092:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018094:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8018098:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801809c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801809e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 80180a2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	dd0e      	ble.n	80180c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80180aa:	1402      	asrs	r2, r0, #16
 80180ac:	d405      	bmi.n	80180ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80180ae:	42ba      	cmp	r2, r7
 80180b0:	da03      	bge.n	80180ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80180b2:	140a      	asrs	r2, r1, #16
 80180b4:	d401      	bmi.n	80180ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80180b6:	42b2      	cmp	r2, r6
 80180b8:	db07      	blt.n	80180ca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80180ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80180bc:	3b01      	subs	r3, #1
 80180be:	3402      	adds	r4, #2
 80180c0:	4410      	add	r0, r2
 80180c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80180c4:	4411      	add	r1, r2
 80180c6:	e7ee      	b.n	80180a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80180c8:	d019      	beq.n	80180fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80180ca:	1e5a      	subs	r2, r3, #1
 80180cc:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80180ce:	fb05 0502 	mla	r5, r5, r2, r0
 80180d2:	142d      	asrs	r5, r5, #16
 80180d4:	d409      	bmi.n	80180ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180d6:	42bd      	cmp	r5, r7
 80180d8:	da07      	bge.n	80180ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180da:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80180dc:	fb05 1202 	mla	r2, r5, r2, r1
 80180e0:	1412      	asrs	r2, r2, #16
 80180e2:	d402      	bmi.n	80180ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180e4:	42b2      	cmp	r2, r6
 80180e6:	f2c0 80ac 	blt.w	8018242 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80180ea:	f04f 0e00 	mov.w	lr, #0
 80180ee:	eb03 020e 	add.w	r2, r3, lr
 80180f2:	2a00      	cmp	r2, #0
 80180f4:	dc3e      	bgt.n	8018174 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80180f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80180fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80180fe:	f1bb 0f00 	cmp.w	fp, #0
 8018102:	f340 80fe 	ble.w	8018302 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8018106:	ee30 0a04 	vadd.f32	s0, s0, s8
 801810a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801810c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018110:	f1bb 0b01 	subs.w	fp, fp, #1
 8018114:	eeb0 6a62 	vmov.f32	s12, s5
 8018118:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801811c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018120:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018124:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8018128:	eeb0 6a43 	vmov.f32	s12, s6
 801812c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018130:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8018134:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018138:	ee61 7a27 	vmul.f32	s15, s2, s15
 801813c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018140:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018144:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018148:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801814c:	ee12 2a90 	vmov	r2, s5
 8018150:	eef0 2a47 	vmov.f32	s5, s14
 8018154:	fb92 f3f3 	sdiv	r3, r2, r3
 8018158:	ee13 2a10 	vmov	r2, s6
 801815c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801815e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018160:	eeb0 3a67 	vmov.f32	s6, s15
 8018164:	fb92 f3f3 	sdiv	r3, r2, r3
 8018168:	9a04      	ldr	r2, [sp, #16]
 801816a:	9314      	str	r3, [sp, #80]	@ 0x50
 801816c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801816e:	bf08      	it	eq
 8018170:	4613      	moveq	r3, r2
 8018172:	e787      	b.n	8018084 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018174:	1406      	asrs	r6, r0, #16
 8018176:	d45d      	bmi.n	8018234 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018178:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801817c:	42b5      	cmp	r5, r6
 801817e:	dd59      	ble.n	8018234 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018180:	140f      	asrs	r7, r1, #16
 8018182:	d457      	bmi.n	8018234 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018184:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018188:	42ba      	cmp	r2, r7
 801818a:	dd53      	ble.n	8018234 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801818c:	9a01      	ldr	r2, [sp, #4]
 801818e:	b22d      	sxth	r5, r5
 8018190:	fb07 2505 	mla	r5, r7, r5, r2
 8018194:	5daa      	ldrb	r2, [r5, r6]
 8018196:	9d02      	ldr	r5, [sp, #8]
 8018198:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801819c:	0e2e      	lsrs	r6, r5, #24
 801819e:	d049      	beq.n	8018234 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80181a0:	f06f 0201 	mvn.w	r2, #1
 80181a4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80181a8:	fb02 f20e 	mul.w	r2, r2, lr
 80181ac:	f834 8002 	ldrh.w	r8, [r4, r2]
 80181b0:	9203      	str	r2, [sp, #12]
 80181b2:	9a05      	ldr	r2, [sp, #20]
 80181b4:	ea4f 2728 	mov.w	r7, r8, asr #8
 80181b8:	4356      	muls	r6, r2
 80181ba:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80181be:	1c72      	adds	r2, r6, #1
 80181c0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80181c4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80181c8:	b2ed      	uxtb	r5, r5
 80181ca:	1212      	asrs	r2, r2, #8
 80181cc:	fa1f f982 	uxth.w	r9, r2
 80181d0:	43d2      	mvns	r2, r2
 80181d2:	fb16 f609 	smulbb	r6, r6, r9
 80181d6:	b2d2      	uxtb	r2, r2
 80181d8:	fb15 f509 	smulbb	r5, r5, r9
 80181dc:	fb07 6702 	mla	r7, r7, r2, r6
 80181e0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80181e4:	fb1a fa09 	smulbb	sl, sl, r9
 80181e8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80181ec:	b2bf      	uxth	r7, r7
 80181ee:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80181f2:	fa5f f888 	uxtb.w	r8, r8
 80181f6:	fb06 a602 	mla	r6, r6, r2, sl
 80181fa:	fb08 5502 	mla	r5, r8, r2, r5
 80181fe:	1c7a      	adds	r2, r7, #1
 8018200:	b2b6      	uxth	r6, r6
 8018202:	b2ad      	uxth	r5, r5
 8018204:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018208:	9a03      	ldr	r2, [sp, #12]
 801820a:	f105 0a01 	add.w	sl, r5, #1
 801820e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8018212:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018216:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801821a:	ea4a 0707 	orr.w	r7, sl, r7
 801821e:	f106 0a01 	add.w	sl, r6, #1
 8018222:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018226:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801822a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801822e:	ea47 070a 	orr.w	r7, r7, sl
 8018232:	52a7      	strh	r7, [r4, r2]
 8018234:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018236:	f10e 3eff 	add.w	lr, lr, #4294967295
 801823a:	4410      	add	r0, r2
 801823c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801823e:	4411      	add	r1, r2
 8018240:	e755      	b.n	80180ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018242:	f04f 0800 	mov.w	r8, #0
 8018246:	eba3 0208 	sub.w	r2, r3, r8
 801824a:	2a00      	cmp	r2, #0
 801824c:	f77f af53 	ble.w	80180f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018250:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8018254:	140a      	asrs	r2, r1, #16
 8018256:	9f01      	ldr	r7, [sp, #4]
 8018258:	1405      	asrs	r5, r0, #16
 801825a:	fb06 7202 	mla	r2, r6, r2, r7
 801825e:	5d52      	ldrb	r2, [r2, r5]
 8018260:	9d02      	ldr	r5, [sp, #8]
 8018262:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018266:	0e2e      	lsrs	r6, r5, #24
 8018268:	d044      	beq.n	80182f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801826a:	9a05      	ldr	r2, [sp, #20]
 801826c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018270:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018274:	4356      	muls	r6, r2
 8018276:	ea4f 272e 	mov.w	r7, lr, asr #8
 801827a:	1c72      	adds	r2, r6, #1
 801827c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8018280:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018284:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018288:	b2ed      	uxtb	r5, r5
 801828a:	1212      	asrs	r2, r2, #8
 801828c:	fa1f f982 	uxth.w	r9, r2
 8018290:	43d2      	mvns	r2, r2
 8018292:	fb16 f609 	smulbb	r6, r6, r9
 8018296:	b2d2      	uxtb	r2, r2
 8018298:	fb15 f509 	smulbb	r5, r5, r9
 801829c:	fb07 6702 	mla	r7, r7, r2, r6
 80182a0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80182a4:	fb1a fa09 	smulbb	sl, sl, r9
 80182a8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80182ac:	b2bf      	uxth	r7, r7
 80182ae:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80182b2:	fa5f fe8e 	uxtb.w	lr, lr
 80182b6:	fb06 a602 	mla	r6, r6, r2, sl
 80182ba:	fb0e 5502 	mla	r5, lr, r2, r5
 80182be:	1c7a      	adds	r2, r7, #1
 80182c0:	b2b6      	uxth	r6, r6
 80182c2:	b2ad      	uxth	r5, r5
 80182c4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80182c8:	f105 0a01 	add.w	sl, r5, #1
 80182cc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80182d0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80182d4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80182d8:	ea4a 0707 	orr.w	r7, sl, r7
 80182dc:	f106 0a01 	add.w	sl, r6, #1
 80182e0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80182e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80182e8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80182ec:	ea47 070a 	orr.w	r7, r7, sl
 80182f0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80182f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80182f6:	f108 0801 	add.w	r8, r8, #1
 80182fa:	4410      	add	r0, r2
 80182fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80182fe:	4411      	add	r1, r2
 8018300:	e7a1      	b.n	8018246 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8018302:	b007      	add	sp, #28
 8018304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018308 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801830c:	b085      	sub	sp, #20
 801830e:	468b      	mov	fp, r1
 8018310:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018314:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8018316:	9203      	str	r2, [sp, #12]
 8018318:	6841      	ldr	r1, [r0, #4]
 801831a:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801831e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8018322:	fb01 2404 	mla	r4, r1, r4, r2
 8018326:	6802      	ldr	r2, [r0, #0]
 8018328:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801832c:	f8de 2000 	ldr.w	r2, [lr]
 8018330:	9200      	str	r2, [sp, #0]
 8018332:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018336:	3204      	adds	r2, #4
 8018338:	9201      	str	r2, [sp, #4]
 801833a:	f1bb 0f00 	cmp.w	fp, #0
 801833e:	dc03      	bgt.n	8018348 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018340:	9a03      	ldr	r2, [sp, #12]
 8018342:	2a00      	cmp	r2, #0
 8018344:	f340 8153 	ble.w	80185ee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8018348:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801834a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801834e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8018352:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018354:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8018358:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801835c:	2b00      	cmp	r3, #0
 801835e:	dd0e      	ble.n	801837e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018360:	1408      	asrs	r0, r1, #16
 8018362:	d405      	bmi.n	8018370 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018364:	42b8      	cmp	r0, r7
 8018366:	da03      	bge.n	8018370 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018368:	1410      	asrs	r0, r2, #16
 801836a:	d401      	bmi.n	8018370 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801836c:	42b0      	cmp	r0, r6
 801836e:	db07      	blt.n	8018380 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018370:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018372:	3b01      	subs	r3, #1
 8018374:	3402      	adds	r4, #2
 8018376:	4401      	add	r1, r0
 8018378:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801837a:	4402      	add	r2, r0
 801837c:	e7ee      	b.n	801835c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801837e:	d017      	beq.n	80183b0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018380:	1e58      	subs	r0, r3, #1
 8018382:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018384:	fb05 1500 	mla	r5, r5, r0, r1
 8018388:	142d      	asrs	r5, r5, #16
 801838a:	d409      	bmi.n	80183a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801838c:	42bd      	cmp	r5, r7
 801838e:	da07      	bge.n	80183a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018390:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018392:	fb05 2000 	mla	r0, r5, r0, r2
 8018396:	1400      	asrs	r0, r0, #16
 8018398:	d402      	bmi.n	80183a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801839a:	42b0      	cmp	r0, r6
 801839c:	f2c0 80bc 	blt.w	8018518 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80183a0:	2600      	movs	r6, #0
 80183a2:	1998      	adds	r0, r3, r6
 80183a4:	2800      	cmp	r0, #0
 80183a6:	dc3e      	bgt.n	8018426 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80183a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80183b0:	f1bb 0f00 	cmp.w	fp, #0
 80183b4:	f340 811b 	ble.w	80185ee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80183b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80183bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80183c2:	f1bb 0b01 	subs.w	fp, fp, #1
 80183c6:	eeb0 6a62 	vmov.f32	s12, s5
 80183ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80183ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80183d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80183da:	eeb0 6a43 	vmov.f32	s12, s6
 80183de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183e2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80183e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80183ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80183ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80183f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80183f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80183fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80183fe:	ee12 2a90 	vmov	r2, s5
 8018402:	eef0 2a47 	vmov.f32	s5, s14
 8018406:	fb92 f3f3 	sdiv	r3, r2, r3
 801840a:	ee13 2a10 	vmov	r2, s6
 801840e:	9311      	str	r3, [sp, #68]	@ 0x44
 8018410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018412:	eeb0 3a67 	vmov.f32	s6, s15
 8018416:	fb92 f3f3 	sdiv	r3, r2, r3
 801841a:	9a03      	ldr	r2, [sp, #12]
 801841c:	9312      	str	r3, [sp, #72]	@ 0x48
 801841e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018420:	bf08      	it	eq
 8018422:	4613      	moveq	r3, r2
 8018424:	e789      	b.n	801833a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8018426:	140f      	asrs	r7, r1, #16
 8018428:	d426      	bmi.n	8018478 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801842a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801842e:	42bd      	cmp	r5, r7
 8018430:	dd22      	ble.n	8018478 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018432:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018436:	d41f      	bmi.n	8018478 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018438:	f8de 000c 	ldr.w	r0, [lr, #12]
 801843c:	4560      	cmp	r0, ip
 801843e:	dd1b      	ble.n	8018478 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018440:	9800      	ldr	r0, [sp, #0]
 8018442:	b22d      	sxth	r5, r5
 8018444:	fb0c 0505 	mla	r5, ip, r5, r0
 8018448:	5de8      	ldrb	r0, [r5, r7]
 801844a:	9d01      	ldr	r5, [sp, #4]
 801844c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018450:	0e07      	lsrs	r7, r0, #24
 8018452:	2fff      	cmp	r7, #255	@ 0xff
 8018454:	d116      	bne.n	8018484 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018456:	f06f 0501 	mvn.w	r5, #1
 801845a:	fb05 f706 	mul.w	r7, r5, r6
 801845e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8018462:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8018466:	0945      	lsrs	r5, r0, #5
 8018468:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801846c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8018470:	ea4c 0505 	orr.w	r5, ip, r5
 8018474:	4305      	orrs	r5, r0
 8018476:	53e5      	strh	r5, [r4, r7]
 8018478:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801847a:	3e01      	subs	r6, #1
 801847c:	4401      	add	r1, r0
 801847e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018480:	4402      	add	r2, r0
 8018482:	e78e      	b.n	80183a2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018484:	b2fd      	uxtb	r5, r7
 8018486:	2f00      	cmp	r7, #0
 8018488:	d0f6      	beq.n	8018478 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801848a:	f06f 0701 	mvn.w	r7, #1
 801848e:	fa1f f985 	uxth.w	r9, r5
 8018492:	43ed      	mvns	r5, r5
 8018494:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018498:	4377      	muls	r7, r6
 801849a:	fb1a fa09 	smulbb	sl, sl, r9
 801849e:	b2ed      	uxtb	r5, r5
 80184a0:	f834 8007 	ldrh.w	r8, [r4, r7]
 80184a4:	9702      	str	r7, [sp, #8]
 80184a6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80184aa:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80184ae:	fb17 f709 	smulbb	r7, r7, r9
 80184b2:	b2c0      	uxtb	r0, r0
 80184b4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80184b8:	fb10 f009 	smulbb	r0, r0, r9
 80184bc:	fb0c 7c05 	mla	ip, ip, r5, r7
 80184c0:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80184c4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80184c8:	fa1f fc8c 	uxth.w	ip, ip
 80184cc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80184d0:	fa5f f888 	uxtb.w	r8, r8
 80184d4:	fb07 a705 	mla	r7, r7, r5, sl
 80184d8:	fb08 0005 	mla	r0, r8, r5, r0
 80184dc:	f10c 0501 	add.w	r5, ip, #1
 80184e0:	b2bf      	uxth	r7, r7
 80184e2:	b280      	uxth	r0, r0
 80184e4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80184e8:	f100 0a01 	add.w	sl, r0, #1
 80184ec:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80184f0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80184f4:	9802      	ldr	r0, [sp, #8]
 80184f6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80184fa:	ea4a 0c0c 	orr.w	ip, sl, ip
 80184fe:	f107 0a01 	add.w	sl, r7, #1
 8018502:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018506:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801850a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801850e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018512:	f824 c000 	strh.w	ip, [r4, r0]
 8018516:	e7af      	b.n	8018478 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018518:	f04f 0800 	mov.w	r8, #0
 801851c:	eba3 0008 	sub.w	r0, r3, r8
 8018520:	2800      	cmp	r0, #0
 8018522:	f77f af41 	ble.w	80183a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018526:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801852a:	1410      	asrs	r0, r2, #16
 801852c:	9f00      	ldr	r7, [sp, #0]
 801852e:	140d      	asrs	r5, r1, #16
 8018530:	fb06 7000 	mla	r0, r6, r0, r7
 8018534:	5d40      	ldrb	r0, [r0, r5]
 8018536:	9d01      	ldr	r5, [sp, #4]
 8018538:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801853c:	0e2e      	lsrs	r6, r5, #24
 801853e:	2eff      	cmp	r6, #255	@ 0xff
 8018540:	d112      	bne.n	8018568 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8018542:	482c      	ldr	r0, [pc, #176]	@ (80185f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8018544:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8018548:	0968      	lsrs	r0, r5, #5
 801854a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801854e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8018552:	4330      	orrs	r0, r6
 8018554:	4328      	orrs	r0, r5
 8018556:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801855a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801855c:	f108 0801 	add.w	r8, r8, #1
 8018560:	4401      	add	r1, r0
 8018562:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018564:	4402      	add	r2, r0
 8018566:	e7d9      	b.n	801851c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018568:	b2f0      	uxtb	r0, r6
 801856a:	2e00      	cmp	r6, #0
 801856c:	d0f5      	beq.n	801855a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801856e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8018572:	fa1f f980 	uxth.w	r9, r0
 8018576:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801857a:	43c0      	mvns	r0, r0
 801857c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018580:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018584:	fb16 f609 	smulbb	r6, r6, r9
 8018588:	b2c0      	uxtb	r0, r0
 801858a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801858e:	b2ed      	uxtb	r5, r5
 8018590:	fb1a fa09 	smulbb	sl, sl, r9
 8018594:	fb07 6700 	mla	r7, r7, r0, r6
 8018598:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801859c:	fb15 f509 	smulbb	r5, r5, r9
 80185a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80185a4:	b2bf      	uxth	r7, r7
 80185a6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80185aa:	fa5f fc8c 	uxtb.w	ip, ip
 80185ae:	fb06 a600 	mla	r6, r6, r0, sl
 80185b2:	fb0c 5500 	mla	r5, ip, r0, r5
 80185b6:	1c78      	adds	r0, r7, #1
 80185b8:	b2b6      	uxth	r6, r6
 80185ba:	b2ad      	uxth	r5, r5
 80185bc:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80185c0:	f105 0a01 	add.w	sl, r5, #1
 80185c4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80185c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80185cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80185d0:	ea4a 0707 	orr.w	r7, sl, r7
 80185d4:	f106 0a01 	add.w	sl, r6, #1
 80185d8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80185dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80185e0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80185e4:	ea47 070a 	orr.w	r7, r7, sl
 80185e8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80185ec:	e7b5      	b.n	801855a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80185ee:	b005      	add	sp, #20
 80185f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f4:	fffff800 	.word	0xfffff800

080185f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80185f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185fc:	b087      	sub	sp, #28
 80185fe:	468b      	mov	fp, r1
 8018600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018604:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8018606:	9204      	str	r2, [sp, #16]
 8018608:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801860c:	6861      	ldr	r1, [r4, #4]
 801860e:	9205      	str	r2, [sp, #20]
 8018610:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8018614:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8018618:	fb01 2000 	mla	r0, r1, r0, r2
 801861c:	6822      	ldr	r2, [r4, #0]
 801861e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018622:	f8de 2000 	ldr.w	r2, [lr]
 8018626:	9201      	str	r2, [sp, #4]
 8018628:	f8de 2004 	ldr.w	r2, [lr, #4]
 801862c:	9202      	str	r2, [sp, #8]
 801862e:	f1bb 0f00 	cmp.w	fp, #0
 8018632:	dc03      	bgt.n	801863c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018634:	9a04      	ldr	r2, [sp, #16]
 8018636:	2a00      	cmp	r2, #0
 8018638:	f340 8142 	ble.w	80188c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801863c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801863e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018642:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8018646:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018648:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801864c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018650:	2b00      	cmp	r3, #0
 8018652:	dd0e      	ble.n	8018672 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018654:	140c      	asrs	r4, r1, #16
 8018656:	d405      	bmi.n	8018664 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018658:	42bc      	cmp	r4, r7
 801865a:	da03      	bge.n	8018664 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801865c:	1414      	asrs	r4, r2, #16
 801865e:	d401      	bmi.n	8018664 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018660:	42b4      	cmp	r4, r6
 8018662:	db07      	blt.n	8018674 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018664:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018666:	3b01      	subs	r3, #1
 8018668:	3002      	adds	r0, #2
 801866a:	4421      	add	r1, r4
 801866c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801866e:	4422      	add	r2, r4
 8018670:	e7ee      	b.n	8018650 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8018672:	d019      	beq.n	80186a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018674:	1e5c      	subs	r4, r3, #1
 8018676:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8018678:	fb05 1504 	mla	r5, r5, r4, r1
 801867c:	142d      	asrs	r5, r5, #16
 801867e:	d409      	bmi.n	8018694 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018680:	42bd      	cmp	r5, r7
 8018682:	da07      	bge.n	8018694 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018684:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8018686:	fb05 2404 	mla	r4, r5, r4, r2
 801868a:	1424      	asrs	r4, r4, #16
 801868c:	d402      	bmi.n	8018694 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801868e:	42b4      	cmp	r4, r6
 8018690:	f2c0 80b1 	blt.w	80187f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8018694:	f04f 0800 	mov.w	r8, #0
 8018698:	eb03 0408 	add.w	r4, r3, r8
 801869c:	2c00      	cmp	r4, #0
 801869e:	dc3e      	bgt.n	801871e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80186a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80186a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80186a8:	f1bb 0f00 	cmp.w	fp, #0
 80186ac:	f340 8108 	ble.w	80188c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80186b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80186b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80186b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80186ba:	f1bb 0b01 	subs.w	fp, fp, #1
 80186be:	eeb0 6a62 	vmov.f32	s12, s5
 80186c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80186c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80186ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186ce:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80186d2:	eeb0 6a43 	vmov.f32	s12, s6
 80186d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186da:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80186de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80186e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80186e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80186ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80186ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80186f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80186f6:	ee12 2a90 	vmov	r2, s5
 80186fa:	eef0 2a47 	vmov.f32	s5, s14
 80186fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8018702:	ee13 2a10 	vmov	r2, s6
 8018706:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018708:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801870a:	eeb0 3a67 	vmov.f32	s6, s15
 801870e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018712:	9a04      	ldr	r2, [sp, #16]
 8018714:	9314      	str	r3, [sp, #80]	@ 0x50
 8018716:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018718:	bf08      	it	eq
 801871a:	4613      	moveq	r3, r2
 801871c:	e787      	b.n	801862e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801871e:	140e      	asrs	r6, r1, #16
 8018720:	d462      	bmi.n	80187e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018722:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018726:	42b5      	cmp	r5, r6
 8018728:	dd5e      	ble.n	80187e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801872a:	1417      	asrs	r7, r2, #16
 801872c:	d45c      	bmi.n	80187e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801872e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8018732:	42bc      	cmp	r4, r7
 8018734:	dd58      	ble.n	80187e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018736:	b22d      	sxth	r5, r5
 8018738:	9c02      	ldr	r4, [sp, #8]
 801873a:	fb07 6505 	mla	r5, r7, r5, r6
 801873e:	5d66      	ldrb	r6, [r4, r5]
 8018740:	2e00      	cmp	r6, #0
 8018742:	d051      	beq.n	80187e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018744:	9c01      	ldr	r4, [sp, #4]
 8018746:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801874a:	f06f 0401 	mvn.w	r4, #1
 801874e:	fb04 f408 	mul.w	r4, r4, r8
 8018752:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8018756:	5b05      	ldrh	r5, [r0, r4]
 8018758:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801875c:	9403      	str	r4, [sp, #12]
 801875e:	9c05      	ldr	r4, [sp, #20]
 8018760:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018764:	4366      	muls	r6, r4
 8018766:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801876a:	1c74      	adds	r4, r6, #1
 801876c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018770:	122e      	asrs	r6, r5, #8
 8018772:	1224      	asrs	r4, r4, #8
 8018774:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8018778:	00ed      	lsls	r5, r5, #3
 801877a:	b2a7      	uxth	r7, r4
 801877c:	43e4      	mvns	r4, r4
 801877e:	b2ed      	uxtb	r5, r5
 8018780:	b2e4      	uxtb	r4, r4
 8018782:	fb16 f604 	smulbb	r6, r6, r4
 8018786:	fb15 f504 	smulbb	r5, r5, r4
 801878a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801878e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8018792:	fb1a fa04 	smulbb	sl, sl, r4
 8018796:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801879a:	fa1f fc8c 	uxth.w	ip, ip
 801879e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80187a2:	fa5f f989 	uxtb.w	r9, r9
 80187a6:	fb06 a607 	mla	r6, r6, r7, sl
 80187aa:	f10c 0401 	add.w	r4, ip, #1
 80187ae:	fb09 5507 	mla	r5, r9, r7, r5
 80187b2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80187b6:	9c03      	ldr	r4, [sp, #12]
 80187b8:	b2ad      	uxth	r5, r5
 80187ba:	b2b6      	uxth	r6, r6
 80187bc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80187c0:	f105 0a01 	add.w	sl, r5, #1
 80187c4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80187c8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80187cc:	ea4a 0c0c 	orr.w	ip, sl, ip
 80187d0:	f106 0a01 	add.w	sl, r6, #1
 80187d4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80187d8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80187dc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80187e0:	ea4c 0c0a 	orr.w	ip, ip, sl
 80187e4:	f820 c004 	strh.w	ip, [r0, r4]
 80187e8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80187ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80187ee:	4421      	add	r1, r4
 80187f0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80187f2:	4422      	add	r2, r4
 80187f4:	e750      	b.n	8018698 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80187f6:	f04f 0900 	mov.w	r9, #0
 80187fa:	eba3 0409 	sub.w	r4, r3, r9
 80187fe:	2c00      	cmp	r4, #0
 8018800:	f77f af4e 	ble.w	80186a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018804:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018808:	140d      	asrs	r5, r1, #16
 801880a:	1414      	asrs	r4, r2, #16
 801880c:	fb06 5404 	mla	r4, r6, r4, r5
 8018810:	9d02      	ldr	r5, [sp, #8]
 8018812:	5d2e      	ldrb	r6, [r5, r4]
 8018814:	2e00      	cmp	r6, #0
 8018816:	d04c      	beq.n	80188b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018818:	9d01      	ldr	r5, [sp, #4]
 801881a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801881e:	9c05      	ldr	r4, [sp, #20]
 8018820:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018824:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018828:	4366      	muls	r6, r4
 801882a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801882e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8018832:	1c74      	adds	r4, r6, #1
 8018834:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8018838:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801883c:	122e      	asrs	r6, r5, #8
 801883e:	1224      	asrs	r4, r4, #8
 8018840:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8018844:	00ed      	lsls	r5, r5, #3
 8018846:	b2a7      	uxth	r7, r4
 8018848:	43e4      	mvns	r4, r4
 801884a:	b2ed      	uxtb	r5, r5
 801884c:	b2e4      	uxtb	r4, r4
 801884e:	fb16 f604 	smulbb	r6, r6, r4
 8018852:	fb15 f504 	smulbb	r5, r5, r4
 8018856:	fb0c 6c07 	mla	ip, ip, r7, r6
 801885a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801885e:	fb1a fa04 	smulbb	sl, sl, r4
 8018862:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018866:	fa1f fc8c 	uxth.w	ip, ip
 801886a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801886e:	fa5f f888 	uxtb.w	r8, r8
 8018872:	fb06 a607 	mla	r6, r6, r7, sl
 8018876:	f10c 0401 	add.w	r4, ip, #1
 801887a:	fb08 5507 	mla	r5, r8, r7, r5
 801887e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018882:	b2ad      	uxth	r5, r5
 8018884:	b2b6      	uxth	r6, r6
 8018886:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801888a:	f105 0a01 	add.w	sl, r5, #1
 801888e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018892:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018896:	ea4a 0c0c 	orr.w	ip, sl, ip
 801889a:	f106 0a01 	add.w	sl, r6, #1
 801889e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80188a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80188a6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80188aa:	ea4c 0c0a 	orr.w	ip, ip, sl
 80188ae:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80188b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80188b4:	f109 0901 	add.w	r9, r9, #1
 80188b8:	4421      	add	r1, r4
 80188ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80188bc:	4422      	add	r2, r4
 80188be:	e79c      	b.n	80187fa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80188c0:	b007      	add	sp, #28
 80188c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080188c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80188c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ca:	b085      	sub	sp, #20
 80188cc:	468b      	mov	fp, r1
 80188ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80188d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80188d4:	9203      	str	r2, [sp, #12]
 80188d6:	6861      	ldr	r1, [r4, #4]
 80188d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80188dc:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 80188e0:	fb01 2000 	mla	r0, r1, r0, r2
 80188e4:	6822      	ldr	r2, [r4, #0]
 80188e6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80188ea:	f8d8 2000 	ldr.w	r2, [r8]
 80188ee:	9200      	str	r2, [sp, #0]
 80188f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80188f4:	9201      	str	r2, [sp, #4]
 80188f6:	f1bb 0f00 	cmp.w	fp, #0
 80188fa:	dc03      	bgt.n	8018904 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80188fc:	9a03      	ldr	r2, [sp, #12]
 80188fe:	2a00      	cmp	r2, #0
 8018900:	f340 8146 	ble.w	8018b90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018904:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018906:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801890a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801890e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018910:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8018914:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018918:	2b00      	cmp	r3, #0
 801891a:	dd0e      	ble.n	801893a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801891c:	140c      	asrs	r4, r1, #16
 801891e:	d405      	bmi.n	801892c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018920:	42bc      	cmp	r4, r7
 8018922:	da03      	bge.n	801892c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018924:	1414      	asrs	r4, r2, #16
 8018926:	d401      	bmi.n	801892c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018928:	42b4      	cmp	r4, r6
 801892a:	db07      	blt.n	801893c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801892c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801892e:	3b01      	subs	r3, #1
 8018930:	3002      	adds	r0, #2
 8018932:	4421      	add	r1, r4
 8018934:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018936:	4422      	add	r2, r4
 8018938:	e7ee      	b.n	8018918 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801893a:	d017      	beq.n	801896c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801893c:	1e5c      	subs	r4, r3, #1
 801893e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018940:	fb05 1504 	mla	r5, r5, r4, r1
 8018944:	142d      	asrs	r5, r5, #16
 8018946:	d409      	bmi.n	801895c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018948:	42bd      	cmp	r5, r7
 801894a:	da07      	bge.n	801895c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801894c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801894e:	fb05 2404 	mla	r4, r5, r4, r2
 8018952:	1424      	asrs	r4, r4, #16
 8018954:	d402      	bmi.n	801895c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018956:	42b4      	cmp	r4, r6
 8018958:	f2c0 80b3 	blt.w	8018ac2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801895c:	2600      	movs	r6, #0
 801895e:	199c      	adds	r4, r3, r6
 8018960:	2c00      	cmp	r4, #0
 8018962:	dc3e      	bgt.n	80189e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018964:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018968:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801896c:	f1bb 0f00 	cmp.w	fp, #0
 8018970:	f340 810e 	ble.w	8018b90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018974:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018978:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801897a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801897e:	f1bb 0b01 	subs.w	fp, fp, #1
 8018982:	eeb0 6a62 	vmov.f32	s12, s5
 8018986:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801898a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801898e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018992:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018996:	eeb0 6a43 	vmov.f32	s12, s6
 801899a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801899e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80189a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80189a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80189aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80189ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80189b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80189b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80189ba:	ee12 2a90 	vmov	r2, s5
 80189be:	eef0 2a47 	vmov.f32	s5, s14
 80189c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80189c6:	ee13 2a10 	vmov	r2, s6
 80189ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80189cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80189ce:	eeb0 3a67 	vmov.f32	s6, s15
 80189d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80189d6:	9a03      	ldr	r2, [sp, #12]
 80189d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80189da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80189dc:	bf08      	it	eq
 80189de:	4613      	moveq	r3, r2
 80189e0:	e789      	b.n	80188f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80189e2:	140f      	asrs	r7, r1, #16
 80189e4:	d418      	bmi.n	8018a18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80189e6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80189ea:	42bd      	cmp	r5, r7
 80189ec:	dd14      	ble.n	8018a18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80189ee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80189f2:	d411      	bmi.n	8018a18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80189f4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80189f8:	4564      	cmp	r4, ip
 80189fa:	dd0d      	ble.n	8018a18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80189fc:	b22d      	sxth	r5, r5
 80189fe:	9c01      	ldr	r4, [sp, #4]
 8018a00:	fb0c 7505 	mla	r5, ip, r5, r7
 8018a04:	5d64      	ldrb	r4, [r4, r5]
 8018a06:	2cff      	cmp	r4, #255	@ 0xff
 8018a08:	d10c      	bne.n	8018a24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018a0a:	9c00      	ldr	r4, [sp, #0]
 8018a0c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8018a10:	f06f 0401 	mvn.w	r4, #1
 8018a14:	4374      	muls	r4, r6
 8018a16:	5305      	strh	r5, [r0, r4]
 8018a18:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018a1a:	3e01      	subs	r6, #1
 8018a1c:	4421      	add	r1, r4
 8018a1e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018a20:	4422      	add	r2, r4
 8018a22:	e79c      	b.n	801895e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a24:	2c00      	cmp	r4, #0
 8018a26:	d0f7      	beq.n	8018a18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018a28:	9f00      	ldr	r7, [sp, #0]
 8018a2a:	fa1f fc84 	uxth.w	ip, r4
 8018a2e:	43e4      	mvns	r4, r4
 8018a30:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8018a34:	f06f 0501 	mvn.w	r5, #1
 8018a38:	b2e4      	uxtb	r4, r4
 8018a3a:	4375      	muls	r5, r6
 8018a3c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8018a40:	9502      	str	r5, [sp, #8]
 8018a42:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8018a46:	5b45      	ldrh	r5, [r0, r5]
 8018a48:	122f      	asrs	r7, r5, #8
 8018a4a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018a4e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8018a52:	00ed      	lsls	r5, r5, #3
 8018a54:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8018a58:	fb17 f704 	smulbb	r7, r7, r4
 8018a5c:	b2ed      	uxtb	r5, r5
 8018a5e:	fb1a fa04 	smulbb	sl, sl, r4
 8018a62:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8018a66:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8018a6a:	fb15 f504 	smulbb	r5, r5, r4
 8018a6e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8018a72:	fa1f fe8e 	uxth.w	lr, lr
 8018a76:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8018a7a:	fa5f f989 	uxtb.w	r9, r9
 8018a7e:	fb07 a70c 	mla	r7, r7, ip, sl
 8018a82:	f10e 0401 	add.w	r4, lr, #1
 8018a86:	fb09 550c 	mla	r5, r9, ip, r5
 8018a8a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8018a8e:	9c02      	ldr	r4, [sp, #8]
 8018a90:	b2ad      	uxth	r5, r5
 8018a92:	b2bf      	uxth	r7, r7
 8018a94:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8018a98:	f105 0a01 	add.w	sl, r5, #1
 8018a9c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018aa0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018aa4:	ea4a 0e0e 	orr.w	lr, sl, lr
 8018aa8:	f107 0a01 	add.w	sl, r7, #1
 8018aac:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018ab0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018ab4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8018ab8:	ea4e 0e0a 	orr.w	lr, lr, sl
 8018abc:	f820 e004 	strh.w	lr, [r0, r4]
 8018ac0:	e7aa      	b.n	8018a18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018ac2:	f04f 0900 	mov.w	r9, #0
 8018ac6:	eba3 0409 	sub.w	r4, r3, r9
 8018aca:	2c00      	cmp	r4, #0
 8018acc:	f77f af4a 	ble.w	8018964 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018ad0:	1414      	asrs	r4, r2, #16
 8018ad2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018ad6:	140d      	asrs	r5, r1, #16
 8018ad8:	fb06 5504 	mla	r5, r6, r4, r5
 8018adc:	9c01      	ldr	r4, [sp, #4]
 8018ade:	5d64      	ldrb	r4, [r4, r5]
 8018ae0:	2cff      	cmp	r4, #255	@ 0xff
 8018ae2:	d10b      	bne.n	8018afc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018ae4:	9c00      	ldr	r4, [sp, #0]
 8018ae6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8018aea:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8018aee:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018af0:	f109 0901 	add.w	r9, r9, #1
 8018af4:	4421      	add	r1, r4
 8018af6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018af8:	4422      	add	r2, r4
 8018afa:	e7e4      	b.n	8018ac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8018afc:	2c00      	cmp	r4, #0
 8018afe:	d0f6      	beq.n	8018aee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018b00:	9e00      	ldr	r6, [sp, #0]
 8018b02:	b2a7      	uxth	r7, r4
 8018b04:	43e4      	mvns	r4, r4
 8018b06:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8018b0a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018b0e:	b2e4      	uxtb	r4, r4
 8018b10:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018b14:	122e      	asrs	r6, r5, #8
 8018b16:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018b1a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8018b1e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8018b22:	00ed      	lsls	r5, r5, #3
 8018b24:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8018b28:	fb16 f604 	smulbb	r6, r6, r4
 8018b2c:	b2ed      	uxtb	r5, r5
 8018b2e:	fb1a fa04 	smulbb	sl, sl, r4
 8018b32:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018b36:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018b3a:	fb15 f504 	smulbb	r5, r5, r4
 8018b3e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018b42:	fa1f fc8c 	uxth.w	ip, ip
 8018b46:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8018b4a:	fa5f fe8e 	uxtb.w	lr, lr
 8018b4e:	fb06 a607 	mla	r6, r6, r7, sl
 8018b52:	f10c 0401 	add.w	r4, ip, #1
 8018b56:	fb0e 5507 	mla	r5, lr, r7, r5
 8018b5a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018b5e:	b2ad      	uxth	r5, r5
 8018b60:	b2b6      	uxth	r6, r6
 8018b62:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8018b66:	f105 0a01 	add.w	sl, r5, #1
 8018b6a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018b6e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018b72:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018b76:	f106 0a01 	add.w	sl, r6, #1
 8018b7a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018b7e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018b82:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8018b86:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018b8a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018b8e:	e7ae      	b.n	8018aee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018b90:	b005      	add	sp, #20
 8018b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b96 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b9a:	b085      	sub	sp, #20
 8018b9c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8018b9e:	9203      	str	r2, [sp, #12]
 8018ba0:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018ba4:	9100      	str	r1, [sp, #0]
 8018ba6:	9201      	str	r2, [sp, #4]
 8018ba8:	6841      	ldr	r1, [r0, #4]
 8018baa:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8018bae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8018bb2:	fb01 2404 	mla	r4, r1, r4, r2
 8018bb6:	6802      	ldr	r2, [r0, #0]
 8018bb8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018bbc:	f8de 2000 	ldr.w	r2, [lr]
 8018bc0:	9202      	str	r2, [sp, #8]
 8018bc2:	9a01      	ldr	r2, [sp, #4]
 8018bc4:	43d6      	mvns	r6, r2
 8018bc6:	b2f6      	uxtb	r6, r6
 8018bc8:	9a00      	ldr	r2, [sp, #0]
 8018bca:	2a00      	cmp	r2, #0
 8018bcc:	dc03      	bgt.n	8018bd6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018bce:	9a03      	ldr	r2, [sp, #12]
 8018bd0:	2a00      	cmp	r2, #0
 8018bd2:	f340 8124 	ble.w	8018e1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018bd6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018bd8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8018bdc:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8018be0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018be2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8018be6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	dd0e      	ble.n	8018c0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018bee:	1408      	asrs	r0, r1, #16
 8018bf0:	d405      	bmi.n	8018bfe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018bf2:	4560      	cmp	r0, ip
 8018bf4:	da03      	bge.n	8018bfe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018bf6:	1410      	asrs	r0, r2, #16
 8018bf8:	d401      	bmi.n	8018bfe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018bfa:	42b8      	cmp	r0, r7
 8018bfc:	db07      	blt.n	8018c0e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018bfe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018c00:	3b01      	subs	r3, #1
 8018c02:	3402      	adds	r4, #2
 8018c04:	4401      	add	r1, r0
 8018c06:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018c08:	4402      	add	r2, r0
 8018c0a:	e7ee      	b.n	8018bea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018c0c:	d06e      	beq.n	8018cec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018c0e:	1e58      	subs	r0, r3, #1
 8018c10:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018c12:	fb05 1500 	mla	r5, r5, r0, r1
 8018c16:	142d      	asrs	r5, r5, #16
 8018c18:	d45c      	bmi.n	8018cd4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018c1a:	4565      	cmp	r5, ip
 8018c1c:	da5a      	bge.n	8018cd4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018c1e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018c20:	fb05 2000 	mla	r0, r5, r0, r2
 8018c24:	1400      	asrs	r0, r0, #16
 8018c26:	d455      	bmi.n	8018cd4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018c28:	42b8      	cmp	r0, r7
 8018c2a:	da53      	bge.n	8018cd4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018c2c:	4699      	mov	r9, r3
 8018c2e:	46a2      	mov	sl, r4
 8018c30:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8018c34:	f1b9 0f00 	cmp.w	r9, #0
 8018c38:	dd54      	ble.n	8018ce4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018c3a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018c3e:	140d      	asrs	r5, r1, #16
 8018c40:	1410      	asrs	r0, r2, #16
 8018c42:	f109 39ff 	add.w	r9, r9, #4294967295
 8018c46:	fb07 5000 	mla	r0, r7, r0, r5
 8018c4a:	9d02      	ldr	r5, [sp, #8]
 8018c4c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8018c50:	f8ba 5000 	ldrh.w	r5, [sl]
 8018c54:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018c58:	122f      	asrs	r7, r5, #8
 8018c5a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8018c5e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8018c62:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8018c66:	00ed      	lsls	r5, r5, #3
 8018c68:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8018c6c:	fb17 f706 	smulbb	r7, r7, r6
 8018c70:	b2ed      	uxtb	r5, r5
 8018c72:	fb18 f806 	smulbb	r8, r8, r6
 8018c76:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8018c7a:	10c7      	asrs	r7, r0, #3
 8018c7c:	fb15 f506 	smulbb	r5, r5, r6
 8018c80:	00c0      	lsls	r0, r0, #3
 8018c82:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8018c86:	fa1f fc8c 	uxth.w	ip, ip
 8018c8a:	b2c0      	uxtb	r0, r0
 8018c8c:	fb07 870b 	mla	r7, r7, fp, r8
 8018c90:	fb00 500b 	mla	r0, r0, fp, r5
 8018c94:	f10c 0501 	add.w	r5, ip, #1
 8018c98:	b2bf      	uxth	r7, r7
 8018c9a:	b280      	uxth	r0, r0
 8018c9c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018ca0:	f107 0801 	add.w	r8, r7, #1
 8018ca4:	1c45      	adds	r5, r0, #1
 8018ca6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8018caa:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8018cae:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8018cb2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018cb4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018cb8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018cbc:	4401      	add	r1, r0
 8018cbe:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8018cc2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018cc4:	ea45 0c0c 	orr.w	ip, r5, ip
 8018cc8:	4402      	add	r2, r0
 8018cca:	ea4c 0c08 	orr.w	ip, ip, r8
 8018cce:	f82a cb02 	strh.w	ip, [sl], #2
 8018cd2:	e7af      	b.n	8018c34 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018cd4:	f04f 0800 	mov.w	r8, #0
 8018cd8:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8018cdc:	eb03 0008 	add.w	r0, r3, r8
 8018ce0:	2800      	cmp	r0, #0
 8018ce2:	dc41      	bgt.n	8018d68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8018ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ce8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018cec:	9b00      	ldr	r3, [sp, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	f340 8095 	ble.w	8018e1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018cf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018cf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cfa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018cfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018d02:	eef0 6a62 	vmov.f32	s13, s5
 8018d06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018d0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018d0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018d12:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8018d16:	eef0 6a43 	vmov.f32	s13, s6
 8018d1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018d1e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8018d22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018d26:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018d2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018d2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018d32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018d3a:	ee12 2a90 	vmov	r2, s5
 8018d3e:	eef0 2a47 	vmov.f32	s5, s14
 8018d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d46:	ee13 2a10 	vmov	r2, s6
 8018d4a:	9311      	str	r3, [sp, #68]	@ 0x44
 8018d4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d4e:	eeb0 3a67 	vmov.f32	s6, s15
 8018d52:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d56:	9312      	str	r3, [sp, #72]	@ 0x48
 8018d58:	9b00      	ldr	r3, [sp, #0]
 8018d5a:	9a03      	ldr	r2, [sp, #12]
 8018d5c:	3b01      	subs	r3, #1
 8018d5e:	9300      	str	r3, [sp, #0]
 8018d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d62:	bf08      	it	eq
 8018d64:	4613      	moveq	r3, r2
 8018d66:	e72f      	b.n	8018bc8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8018d68:	140f      	asrs	r7, r1, #16
 8018d6a:	d451      	bmi.n	8018e10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018d6c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018d70:	42bd      	cmp	r5, r7
 8018d72:	dd4d      	ble.n	8018e10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018d74:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018d78:	d44a      	bmi.n	8018e10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018d7a:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018d7e:	4560      	cmp	r0, ip
 8018d80:	dd46      	ble.n	8018e10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018d82:	b22d      	sxth	r5, r5
 8018d84:	9802      	ldr	r0, [sp, #8]
 8018d86:	fb0c 7505 	mla	r5, ip, r5, r7
 8018d8a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8018d8e:	f06f 0501 	mvn.w	r5, #1
 8018d92:	fb05 fb08 	mul.w	fp, r5, r8
 8018d96:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018d9a:	f834 500b 	ldrh.w	r5, [r4, fp]
 8018d9e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8018da2:	122f      	asrs	r7, r5, #8
 8018da4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8018da8:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8018dac:	00ed      	lsls	r5, r5, #3
 8018dae:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8018db2:	fb17 f706 	smulbb	r7, r7, r6
 8018db6:	b2ed      	uxtb	r5, r5
 8018db8:	fb19 f906 	smulbb	r9, r9, r6
 8018dbc:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8018dc0:	10c7      	asrs	r7, r0, #3
 8018dc2:	fb15 f506 	smulbb	r5, r5, r6
 8018dc6:	00c0      	lsls	r0, r0, #3
 8018dc8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8018dcc:	fa1f fc8c 	uxth.w	ip, ip
 8018dd0:	b2c0      	uxtb	r0, r0
 8018dd2:	fb07 970a 	mla	r7, r7, sl, r9
 8018dd6:	fb00 500a 	mla	r0, r0, sl, r5
 8018dda:	f10c 0501 	add.w	r5, ip, #1
 8018dde:	b2bf      	uxth	r7, r7
 8018de0:	b280      	uxth	r0, r0
 8018de2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018de6:	f107 0901 	add.w	r9, r7, #1
 8018dea:	1c45      	adds	r5, r0, #1
 8018dec:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8018df0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8018df4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8018df8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018dfc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018e00:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8018e04:	ea45 0c0c 	orr.w	ip, r5, ip
 8018e08:	ea4c 0c09 	orr.w	ip, ip, r9
 8018e0c:	f824 c00b 	strh.w	ip, [r4, fp]
 8018e10:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018e12:	f108 38ff 	add.w	r8, r8, #4294967295
 8018e16:	4401      	add	r1, r0
 8018e18:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018e1a:	4402      	add	r2, r0
 8018e1c:	e75e      	b.n	8018cdc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018e1e:	b005      	add	sp, #20
 8018e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e28:	b085      	sub	sp, #20
 8018e2a:	4693      	mov	fp, r2
 8018e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018e30:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8018e32:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8018e34:	6870      	ldr	r0, [r6, #4]
 8018e36:	9101      	str	r1, [sp, #4]
 8018e38:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8018e3c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 8018e40:	fb00 2404 	mla	r4, r0, r4, r2
 8018e44:	6832      	ldr	r2, [r6, #0]
 8018e46:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018e4a:	682a      	ldr	r2, [r5, #0]
 8018e4c:	9202      	str	r2, [sp, #8]
 8018e4e:	9a01      	ldr	r2, [sp, #4]
 8018e50:	2a00      	cmp	r2, #0
 8018e52:	dc03      	bgt.n	8018e5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018e54:	f1bb 0f00 	cmp.w	fp, #0
 8018e58:	f340 809a 	ble.w	8018f90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018e5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018e5e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018e62:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018e66:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018e68:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018e6c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	dd0c      	ble.n	8018e8e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018e74:	1406      	asrs	r6, r0, #16
 8018e76:	d405      	bmi.n	8018e84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018e78:	454e      	cmp	r6, r9
 8018e7a:	da03      	bge.n	8018e84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018e7c:	1416      	asrs	r6, r2, #16
 8018e7e:	d401      	bmi.n	8018e84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018e80:	4546      	cmp	r6, r8
 8018e82:	db05      	blt.n	8018e90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018e84:	4470      	add	r0, lr
 8018e86:	4462      	add	r2, ip
 8018e88:	3b01      	subs	r3, #1
 8018e8a:	3402      	adds	r4, #2
 8018e8c:	e7f0      	b.n	8018e70 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018e8e:	d00f      	beq.n	8018eb0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018e90:	1e5e      	subs	r6, r3, #1
 8018e92:	fb0e 0706 	mla	r7, lr, r6, r0
 8018e96:	143f      	asrs	r7, r7, #16
 8018e98:	d541      	bpl.n	8018f1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8018e9a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8018e9e:	4698      	mov	r8, r3
 8018ea0:	9603      	str	r6, [sp, #12]
 8018ea2:	f1b8 0f00 	cmp.w	r8, #0
 8018ea6:	dc56      	bgt.n	8018f56 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8018ea8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018eac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018eb0:	9b01      	ldr	r3, [sp, #4]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	dd6c      	ble.n	8018f90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018eb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ebc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ec0:	eeb0 6a62 	vmov.f32	s12, s5
 8018ec4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ec8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018ecc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ed0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018ed4:	eeb0 6a43 	vmov.f32	s12, s6
 8018ed8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018edc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018ee0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018ee4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018ee8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018eec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018ef0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018ef4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018ef8:	ee12 2a90 	vmov	r2, s5
 8018efc:	eef0 2a47 	vmov.f32	s5, s14
 8018f00:	fb92 fef3 	sdiv	lr, r2, r3
 8018f04:	ee13 2a10 	vmov	r2, s6
 8018f08:	eeb0 3a67 	vmov.f32	s6, s15
 8018f0c:	fb92 fcf3 	sdiv	ip, r2, r3
 8018f10:	9b01      	ldr	r3, [sp, #4]
 8018f12:	3b01      	subs	r3, #1
 8018f14:	9301      	str	r3, [sp, #4]
 8018f16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f18:	bf08      	it	eq
 8018f1a:	465b      	moveq	r3, fp
 8018f1c:	e797      	b.n	8018e4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8018f1e:	454f      	cmp	r7, r9
 8018f20:	dabb      	bge.n	8018e9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018f22:	fb0c 2606 	mla	r6, ip, r6, r2
 8018f26:	1436      	asrs	r6, r6, #16
 8018f28:	d4b7      	bmi.n	8018e9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018f2a:	4546      	cmp	r6, r8
 8018f2c:	dab5      	bge.n	8018e9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018f2e:	461e      	mov	r6, r3
 8018f30:	46a0      	mov	r8, r4
 8018f32:	2e00      	cmp	r6, #0
 8018f34:	ddb8      	ble.n	8018ea8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018f36:	1417      	asrs	r7, r2, #16
 8018f38:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8018f3c:	ea4f 4920 	mov.w	r9, r0, asr #16
 8018f40:	9902      	ldr	r1, [sp, #8]
 8018f42:	4470      	add	r0, lr
 8018f44:	4462      	add	r2, ip
 8018f46:	fb0a 9707 	mla	r7, sl, r7, r9
 8018f4a:	3e01      	subs	r6, #1
 8018f4c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8018f50:	f828 7b02 	strh.w	r7, [r8], #2
 8018f54:	e7ed      	b.n	8018f32 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8018f56:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018f5a:	d414      	bmi.n	8018f86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018f5c:	68ae      	ldr	r6, [r5, #8]
 8018f5e:	454e      	cmp	r6, r9
 8018f60:	dd11      	ble.n	8018f86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018f62:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018f66:	d40e      	bmi.n	8018f86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018f68:	68ef      	ldr	r7, [r5, #12]
 8018f6a:	4557      	cmp	r7, sl
 8018f6c:	dd0b      	ble.n	8018f86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018f6e:	b236      	sxth	r6, r6
 8018f70:	f06f 0101 	mvn.w	r1, #1
 8018f74:	9f02      	ldr	r7, [sp, #8]
 8018f76:	fb0a 9606 	mla	r6, sl, r6, r9
 8018f7a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8018f7e:	fb01 f608 	mul.w	r6, r1, r8
 8018f82:	9903      	ldr	r1, [sp, #12]
 8018f84:	538f      	strh	r7, [r1, r6]
 8018f86:	4470      	add	r0, lr
 8018f88:	4462      	add	r2, ip
 8018f8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8018f8e:	e788      	b.n	8018ea2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018f90:	b005      	add	sp, #20
 8018f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f96 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f9a:	b087      	sub	sp, #28
 8018f9c:	468b      	mov	fp, r1
 8018f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018fa2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8018fa4:	9203      	str	r2, [sp, #12]
 8018fa6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8018faa:	6841      	ldr	r1, [r0, #4]
 8018fac:	9204      	str	r2, [sp, #16]
 8018fae:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8018fb2:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8018fb6:	fb01 2505 	mla	r5, r1, r5, r2
 8018fba:	6802      	ldr	r2, [r0, #0]
 8018fbc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8018fc0:	f8d9 2000 	ldr.w	r2, [r9]
 8018fc4:	9201      	str	r2, [sp, #4]
 8018fc6:	f1bb 0f00 	cmp.w	fp, #0
 8018fca:	dc03      	bgt.n	8018fd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018fcc:	9a03      	ldr	r2, [sp, #12]
 8018fce:	2a00      	cmp	r2, #0
 8018fd0:	f340 8158 	ble.w	8019284 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8018fd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018fd6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8018fda:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018fde:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018fe0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8018fe4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	dd0e      	ble.n	801900a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018fec:	1402      	asrs	r2, r0, #16
 8018fee:	d405      	bmi.n	8018ffc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018ff0:	42ba      	cmp	r2, r7
 8018ff2:	da03      	bge.n	8018ffc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018ff4:	140a      	asrs	r2, r1, #16
 8018ff6:	d401      	bmi.n	8018ffc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018ff8:	42b2      	cmp	r2, r6
 8018ffa:	db07      	blt.n	801900c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018ffc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018ffe:	3b01      	subs	r3, #1
 8019000:	3502      	adds	r5, #2
 8019002:	4410      	add	r0, r2
 8019004:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019006:	4411      	add	r1, r2
 8019008:	e7ee      	b.n	8018fe8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801900a:	d017      	beq.n	801903c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801900c:	1e5a      	subs	r2, r3, #1
 801900e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019010:	fb04 0402 	mla	r4, r4, r2, r0
 8019014:	1424      	asrs	r4, r4, #16
 8019016:	d409      	bmi.n	801902c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019018:	42bc      	cmp	r4, r7
 801901a:	da07      	bge.n	801902c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801901c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801901e:	fb04 1202 	mla	r2, r4, r2, r1
 8019022:	1412      	asrs	r2, r2, #16
 8019024:	d402      	bmi.n	801902c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019026:	42b2      	cmp	r2, r6
 8019028:	f2c0 80bf 	blt.w	80191aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801902c:	2700      	movs	r7, #0
 801902e:	19da      	adds	r2, r3, r7
 8019030:	2a00      	cmp	r2, #0
 8019032:	dc3e      	bgt.n	80190b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019034:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019038:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801903c:	f1bb 0f00 	cmp.w	fp, #0
 8019040:	f340 8120 	ble.w	8019284 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8019044:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019048:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801904a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801904e:	f1bb 0b01 	subs.w	fp, fp, #1
 8019052:	eeb0 6a62 	vmov.f32	s12, s5
 8019056:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801905a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801905e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019062:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8019066:	eeb0 6a43 	vmov.f32	s12, s6
 801906a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801906e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8019072:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019076:	ee61 7a27 	vmul.f32	s15, s2, s15
 801907a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801907e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019082:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019086:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801908a:	ee12 2a90 	vmov	r2, s5
 801908e:	eef0 2a47 	vmov.f32	s5, s14
 8019092:	fb92 f3f3 	sdiv	r3, r2, r3
 8019096:	ee13 2a10 	vmov	r2, s6
 801909a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801909c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801909e:	eeb0 3a67 	vmov.f32	s6, s15
 80190a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80190a6:	9a03      	ldr	r2, [sp, #12]
 80190a8:	9314      	str	r3, [sp, #80]	@ 0x50
 80190aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80190ac:	bf08      	it	eq
 80190ae:	4613      	moveq	r3, r2
 80190b0:	e789      	b.n	8018fc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80190b2:	1406      	asrs	r6, r0, #16
 80190b4:	d42d      	bmi.n	8019112 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190b6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80190ba:	42b4      	cmp	r4, r6
 80190bc:	dd29      	ble.n	8019112 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190be:	ea5f 4c21 	movs.w	ip, r1, asr #16
 80190c2:	d426      	bmi.n	8019112 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190c4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80190c8:	4562      	cmp	r2, ip
 80190ca:	dd22      	ble.n	8019112 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190cc:	b224      	sxth	r4, r4
 80190ce:	9a01      	ldr	r2, [sp, #4]
 80190d0:	fb0c 6404 	mla	r4, ip, r4, r6
 80190d4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80190d8:	0e22      	lsrs	r2, r4, #24
 80190da:	d01a      	beq.n	8019112 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190dc:	9e04      	ldr	r6, [sp, #16]
 80190de:	4372      	muls	r2, r6
 80190e0:	1c56      	adds	r6, r2, #1
 80190e2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80190e6:	0a26      	lsrs	r6, r4, #8
 80190e8:	1212      	asrs	r2, r2, #8
 80190ea:	9605      	str	r6, [sp, #20]
 80190ec:	2aff      	cmp	r2, #255	@ 0xff
 80190ee:	d116      	bne.n	801911e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80190f0:	f06f 0201 	mvn.w	r2, #1
 80190f4:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 80190f8:	fb02 fc07 	mul.w	ip, r2, r7
 80190fc:	0962      	lsrs	r2, r4, #5
 80190fe:	f026 0607 	bic.w	r6, r6, #7
 8019102:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019106:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801910a:	4316      	orrs	r6, r2
 801910c:	4326      	orrs	r6, r4
 801910e:	f825 600c 	strh.w	r6, [r5, ip]
 8019112:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019114:	3f01      	subs	r7, #1
 8019116:	4410      	add	r0, r2
 8019118:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801911a:	4411      	add	r1, r2
 801911c:	e787      	b.n	801902e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801911e:	f06f 0601 	mvn.w	r6, #1
 8019122:	fa1f fa82 	uxth.w	sl, r2
 8019126:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801912a:	43d2      	mvns	r2, r2
 801912c:	437e      	muls	r6, r7
 801912e:	b2e4      	uxtb	r4, r4
 8019130:	fb1c fc0a 	smulbb	ip, ip, sl
 8019134:	b2d2      	uxtb	r2, r2
 8019136:	f835 8006 	ldrh.w	r8, [r5, r6]
 801913a:	fb14 f40a 	smulbb	r4, r4, sl
 801913e:	9602      	str	r6, [sp, #8]
 8019140:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019144:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8019148:	fb16 f60a 	smulbb	r6, r6, sl
 801914c:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8019150:	fb0e ce02 	mla	lr, lr, r2, ip
 8019154:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8019158:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801915c:	fa1f fe8e 	uxth.w	lr, lr
 8019160:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8019164:	fa5f f888 	uxtb.w	r8, r8
 8019168:	fb0c 6c02 	mla	ip, ip, r2, r6
 801916c:	fb08 4402 	mla	r4, r8, r2, r4
 8019170:	f10e 0201 	add.w	r2, lr, #1
 8019174:	fa1f fc8c 	uxth.w	ip, ip
 8019178:	b2a4      	uxth	r4, r4
 801917a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801917e:	9a02      	ldr	r2, [sp, #8]
 8019180:	1c66      	adds	r6, r4, #1
 8019182:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8019186:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801918a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801918e:	ea46 0e0e 	orr.w	lr, r6, lr
 8019192:	f10c 0601 	add.w	r6, ip, #1
 8019196:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801919a:	0976      	lsrs	r6, r6, #5
 801919c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80191a0:	ea4e 0e06 	orr.w	lr, lr, r6
 80191a4:	f825 e002 	strh.w	lr, [r5, r2]
 80191a8:	e7b3      	b.n	8019112 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80191aa:	f04f 0800 	mov.w	r8, #0
 80191ae:	eba3 0208 	sub.w	r2, r3, r8
 80191b2:	2a00      	cmp	r2, #0
 80191b4:	f77f af3e 	ble.w	8019034 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80191b8:	1404      	asrs	r4, r0, #16
 80191ba:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 80191be:	140a      	asrs	r2, r1, #16
 80191c0:	fb06 4202 	mla	r2, r6, r2, r4
 80191c4:	9c01      	ldr	r4, [sp, #4]
 80191c6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 80191ca:	0e22      	lsrs	r2, r4, #24
 80191cc:	d015      	beq.n	80191fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80191ce:	9e04      	ldr	r6, [sp, #16]
 80191d0:	4372      	muls	r2, r6
 80191d2:	1c56      	adds	r6, r2, #1
 80191d4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80191d8:	0a26      	lsrs	r6, r4, #8
 80191da:	1212      	asrs	r2, r2, #8
 80191dc:	2aff      	cmp	r2, #255	@ 0xff
 80191de:	d113      	bne.n	8019208 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80191e0:	0962      	lsrs	r2, r4, #5
 80191e2:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 80191e6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80191ea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80191ee:	f026 0607 	bic.w	r6, r6, #7
 80191f2:	4316      	orrs	r6, r2
 80191f4:	4326      	orrs	r6, r4
 80191f6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80191fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80191fc:	f108 0801 	add.w	r8, r8, #1
 8019200:	4410      	add	r0, r2
 8019202:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019204:	4411      	add	r1, r2
 8019206:	e7d2      	b.n	80191ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019208:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801920c:	fa1f fa82 	uxth.w	sl, r2
 8019210:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8019214:	43d2      	mvns	r2, r2
 8019216:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801921a:	fb17 f70a 	smulbb	r7, r7, sl
 801921e:	b2d2      	uxtb	r2, r2
 8019220:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8019224:	b2e4      	uxtb	r4, r4
 8019226:	b2f6      	uxtb	r6, r6
 8019228:	fb0c 7c02 	mla	ip, ip, r2, r7
 801922c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019230:	fb14 f40a 	smulbb	r4, r4, sl
 8019234:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019238:	fa1f fc8c 	uxth.w	ip, ip
 801923c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8019240:	fb16 f60a 	smulbb	r6, r6, sl
 8019244:	fa5f fe8e 	uxtb.w	lr, lr
 8019248:	fb0e 4402 	mla	r4, lr, r2, r4
 801924c:	fb07 6702 	mla	r7, r7, r2, r6
 8019250:	f10c 0201 	add.w	r2, ip, #1
 8019254:	b2a4      	uxth	r4, r4
 8019256:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801925a:	1c66      	adds	r6, r4, #1
 801925c:	b2bf      	uxth	r7, r7
 801925e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8019262:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8019266:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801926a:	ea46 0c0c 	orr.w	ip, r6, ip
 801926e:	1c7e      	adds	r6, r7, #1
 8019270:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019274:	0976      	lsrs	r6, r6, #5
 8019276:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801927a:	ea4c 0c06 	orr.w	ip, ip, r6
 801927e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8019282:	e7ba      	b.n	80191fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8019284:	b007      	add	sp, #28
 8019286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801928c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019290:	b085      	sub	sp, #20
 8019292:	468b      	mov	fp, r1
 8019294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019298:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801929a:	9203      	str	r2, [sp, #12]
 801929c:	6841      	ldr	r1, [r0, #4]
 801929e:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80192a2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80192a6:	fb01 2404 	mla	r4, r1, r4, r2
 80192aa:	6802      	ldr	r2, [r0, #0]
 80192ac:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80192b0:	f8d8 2000 	ldr.w	r2, [r8]
 80192b4:	9201      	str	r2, [sp, #4]
 80192b6:	f1bb 0f00 	cmp.w	fp, #0
 80192ba:	dc03      	bgt.n	80192c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80192bc:	9a03      	ldr	r2, [sp, #12]
 80192be:	2a00      	cmp	r2, #0
 80192c0:	f340 814f 	ble.w	8019562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80192c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80192c6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80192ca:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80192ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80192d0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80192d4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80192d8:	2b00      	cmp	r3, #0
 80192da:	dd0e      	ble.n	80192fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80192dc:	1408      	asrs	r0, r1, #16
 80192de:	d405      	bmi.n	80192ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80192e0:	42b8      	cmp	r0, r7
 80192e2:	da03      	bge.n	80192ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80192e4:	1410      	asrs	r0, r2, #16
 80192e6:	d401      	bmi.n	80192ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80192e8:	42b0      	cmp	r0, r6
 80192ea:	db07      	blt.n	80192fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80192ec:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80192ee:	3b01      	subs	r3, #1
 80192f0:	3402      	adds	r4, #2
 80192f2:	4401      	add	r1, r0
 80192f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80192f6:	4402      	add	r2, r0
 80192f8:	e7ee      	b.n	80192d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80192fa:	d017      	beq.n	801932c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80192fc:	1e58      	subs	r0, r3, #1
 80192fe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8019300:	fb05 1500 	mla	r5, r5, r0, r1
 8019304:	142d      	asrs	r5, r5, #16
 8019306:	d409      	bmi.n	801931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019308:	42bd      	cmp	r5, r7
 801930a:	da07      	bge.n	801931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801930c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801930e:	fb05 2000 	mla	r0, r5, r0, r2
 8019312:	1400      	asrs	r0, r0, #16
 8019314:	d402      	bmi.n	801931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019316:	42b0      	cmp	r0, r6
 8019318:	f2c0 80ba 	blt.w	8019490 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801931c:	2600      	movs	r6, #0
 801931e:	1998      	adds	r0, r3, r6
 8019320:	2800      	cmp	r0, #0
 8019322:	dc3e      	bgt.n	80193a2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8019324:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019328:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801932c:	f1bb 0f00 	cmp.w	fp, #0
 8019330:	f340 8117 	ble.w	8019562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8019334:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801933a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801933e:	f1bb 0b01 	subs.w	fp, fp, #1
 8019342:	eeb0 6a62 	vmov.f32	s12, s5
 8019346:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801934a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801934e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019352:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8019356:	eeb0 6a43 	vmov.f32	s12, s6
 801935a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801935e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019362:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019366:	ee61 7a27 	vmul.f32	s15, s2, s15
 801936a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801936e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019372:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019376:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801937a:	ee12 2a90 	vmov	r2, s5
 801937e:	eef0 2a47 	vmov.f32	s5, s14
 8019382:	fb92 f3f3 	sdiv	r3, r2, r3
 8019386:	ee13 2a10 	vmov	r2, s6
 801938a:	9311      	str	r3, [sp, #68]	@ 0x44
 801938c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801938e:	eeb0 3a67 	vmov.f32	s6, s15
 8019392:	fb92 f3f3 	sdiv	r3, r2, r3
 8019396:	9a03      	ldr	r2, [sp, #12]
 8019398:	9312      	str	r3, [sp, #72]	@ 0x48
 801939a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801939c:	bf08      	it	eq
 801939e:	4613      	moveq	r3, r2
 80193a0:	e789      	b.n	80192b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80193a2:	140f      	asrs	r7, r1, #16
 80193a4:	d424      	bmi.n	80193f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193a6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80193aa:	42bd      	cmp	r5, r7
 80193ac:	dd20      	ble.n	80193f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193ae:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80193b2:	d41d      	bmi.n	80193f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193b4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80193b8:	4560      	cmp	r0, ip
 80193ba:	dd19      	ble.n	80193f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193bc:	b22d      	sxth	r5, r5
 80193be:	9801      	ldr	r0, [sp, #4]
 80193c0:	fb0c 7505 	mla	r5, ip, r5, r7
 80193c4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80193c8:	0e07      	lsrs	r7, r0, #24
 80193ca:	2fff      	cmp	r7, #255	@ 0xff
 80193cc:	d116      	bne.n	80193fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80193ce:	f06f 0501 	mvn.w	r5, #1
 80193d2:	fb05 f706 	mul.w	r7, r5, r6
 80193d6:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 80193da:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80193de:	0945      	lsrs	r5, r0, #5
 80193e0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80193e4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80193e8:	ea4c 0505 	orr.w	r5, ip, r5
 80193ec:	4305      	orrs	r5, r0
 80193ee:	53e5      	strh	r5, [r4, r7]
 80193f0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80193f2:	3e01      	subs	r6, #1
 80193f4:	4401      	add	r1, r0
 80193f6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80193f8:	4402      	add	r2, r0
 80193fa:	e790      	b.n	801931e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80193fc:	b2fd      	uxtb	r5, r7
 80193fe:	2f00      	cmp	r7, #0
 8019400:	d0f6      	beq.n	80193f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019402:	f06f 0701 	mvn.w	r7, #1
 8019406:	fa1f f985 	uxth.w	r9, r5
 801940a:	43ed      	mvns	r5, r5
 801940c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019410:	4377      	muls	r7, r6
 8019412:	fb1a fa09 	smulbb	sl, sl, r9
 8019416:	b2ed      	uxtb	r5, r5
 8019418:	f834 e007 	ldrh.w	lr, [r4, r7]
 801941c:	9702      	str	r7, [sp, #8]
 801941e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019422:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019426:	fb17 f709 	smulbb	r7, r7, r9
 801942a:	b2c0      	uxtb	r0, r0
 801942c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8019430:	fb10 f009 	smulbb	r0, r0, r9
 8019434:	fb0c 7c05 	mla	ip, ip, r5, r7
 8019438:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801943c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019440:	fa1f fc8c 	uxth.w	ip, ip
 8019444:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8019448:	fa5f fe8e 	uxtb.w	lr, lr
 801944c:	fb07 a705 	mla	r7, r7, r5, sl
 8019450:	fb0e 0005 	mla	r0, lr, r5, r0
 8019454:	f10c 0501 	add.w	r5, ip, #1
 8019458:	b2bf      	uxth	r7, r7
 801945a:	b280      	uxth	r0, r0
 801945c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019460:	f100 0a01 	add.w	sl, r0, #1
 8019464:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8019468:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801946c:	9802      	ldr	r0, [sp, #8]
 801946e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019472:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019476:	f107 0a01 	add.w	sl, r7, #1
 801947a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801947e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019482:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8019486:	ea4c 0c0a 	orr.w	ip, ip, sl
 801948a:	f824 c000 	strh.w	ip, [r4, r0]
 801948e:	e7af      	b.n	80193f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019490:	f04f 0e00 	mov.w	lr, #0
 8019494:	eba3 000e 	sub.w	r0, r3, lr
 8019498:	2800      	cmp	r0, #0
 801949a:	f77f af43 	ble.w	8019324 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801949e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80194a2:	140d      	asrs	r5, r1, #16
 80194a4:	1410      	asrs	r0, r2, #16
 80194a6:	fb06 5000 	mla	r0, r6, r0, r5
 80194aa:	9d01      	ldr	r5, [sp, #4]
 80194ac:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80194b0:	0e2e      	lsrs	r6, r5, #24
 80194b2:	2eff      	cmp	r6, #255	@ 0xff
 80194b4:	d112      	bne.n	80194dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80194b6:	482c      	ldr	r0, [pc, #176]	@ (8019568 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 80194b8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80194bc:	0968      	lsrs	r0, r5, #5
 80194be:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80194c2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80194c6:	4330      	orrs	r0, r6
 80194c8:	4328      	orrs	r0, r5
 80194ca:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 80194ce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80194d0:	f10e 0e01 	add.w	lr, lr, #1
 80194d4:	4401      	add	r1, r0
 80194d6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80194d8:	4402      	add	r2, r0
 80194da:	e7db      	b.n	8019494 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80194dc:	b2f0      	uxtb	r0, r6
 80194de:	2e00      	cmp	r6, #0
 80194e0:	d0f5      	beq.n	80194ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80194e2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80194e6:	fa1f f980 	uxth.w	r9, r0
 80194ea:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80194ee:	43c0      	mvns	r0, r0
 80194f0:	ea4f 272c 	mov.w	r7, ip, asr #8
 80194f4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80194f8:	fb16 f609 	smulbb	r6, r6, r9
 80194fc:	b2c0      	uxtb	r0, r0
 80194fe:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8019502:	b2ed      	uxtb	r5, r5
 8019504:	fb1a fa09 	smulbb	sl, sl, r9
 8019508:	fb07 6700 	mla	r7, r7, r0, r6
 801950c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8019510:	fb15 f509 	smulbb	r5, r5, r9
 8019514:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019518:	b2bf      	uxth	r7, r7
 801951a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801951e:	fa5f fc8c 	uxtb.w	ip, ip
 8019522:	fb06 a600 	mla	r6, r6, r0, sl
 8019526:	fb0c 5500 	mla	r5, ip, r0, r5
 801952a:	1c78      	adds	r0, r7, #1
 801952c:	b2b6      	uxth	r6, r6
 801952e:	b2ad      	uxth	r5, r5
 8019530:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8019534:	f105 0a01 	add.w	sl, r5, #1
 8019538:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801953c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019540:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019544:	ea4a 0707 	orr.w	r7, sl, r7
 8019548:	f106 0a01 	add.w	sl, r6, #1
 801954c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019550:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019554:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8019558:	ea47 070a 	orr.w	r7, r7, sl
 801955c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8019560:	e7b5      	b.n	80194ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8019562:	b005      	add	sp, #20
 8019564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019568:	fffff800 	.word	0xfffff800

0801956c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019570:	b087      	sub	sp, #28
 8019572:	468b      	mov	fp, r1
 8019574:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019578:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801957a:	9203      	str	r2, [sp, #12]
 801957c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019580:	6841      	ldr	r1, [r0, #4]
 8019582:	9204      	str	r2, [sp, #16]
 8019584:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8019588:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801958c:	fb01 2404 	mla	r4, r1, r4, r2
 8019590:	6802      	ldr	r2, [r0, #0]
 8019592:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019596:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801959a:	3201      	adds	r2, #1
 801959c:	f022 0201 	bic.w	r2, r2, #1
 80195a0:	9200      	str	r2, [sp, #0]
 80195a2:	f8d9 2000 	ldr.w	r2, [r9]
 80195a6:	9201      	str	r2, [sp, #4]
 80195a8:	f1bb 0f00 	cmp.w	fp, #0
 80195ac:	dc03      	bgt.n	80195b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80195ae:	9a03      	ldr	r2, [sp, #12]
 80195b0:	2a00      	cmp	r2, #0
 80195b2:	f340 816a 	ble.w	801988a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80195b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80195b8:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80195bc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80195c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80195c2:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80195c6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	dd0e      	ble.n	80195ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80195ce:	1402      	asrs	r2, r0, #16
 80195d0:	d405      	bmi.n	80195de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195d2:	42ba      	cmp	r2, r7
 80195d4:	da03      	bge.n	80195de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195d6:	140a      	asrs	r2, r1, #16
 80195d8:	d401      	bmi.n	80195de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195da:	42b2      	cmp	r2, r6
 80195dc:	db07      	blt.n	80195ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80195de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80195e0:	3b01      	subs	r3, #1
 80195e2:	3402      	adds	r4, #2
 80195e4:	4410      	add	r0, r2
 80195e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80195e8:	4411      	add	r1, r2
 80195ea:	e7ee      	b.n	80195ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80195ec:	d017      	beq.n	801961e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80195ee:	1e5a      	subs	r2, r3, #1
 80195f0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80195f2:	fb05 0502 	mla	r5, r5, r2, r0
 80195f6:	142d      	asrs	r5, r5, #16
 80195f8:	d409      	bmi.n	801960e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80195fa:	42bd      	cmp	r5, r7
 80195fc:	da07      	bge.n	801960e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80195fe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8019600:	fb05 1202 	mla	r2, r5, r2, r1
 8019604:	1412      	asrs	r2, r2, #16
 8019606:	d402      	bmi.n	801960e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019608:	42b2      	cmp	r2, r6
 801960a:	f2c0 80c8 	blt.w	801979e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801960e:	2700      	movs	r7, #0
 8019610:	19da      	adds	r2, r3, r7
 8019612:	2a00      	cmp	r2, #0
 8019614:	dc3e      	bgt.n	8019694 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019616:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801961a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801961e:	f1bb 0f00 	cmp.w	fp, #0
 8019622:	f340 8132 	ble.w	801988a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8019626:	ee30 0a04 	vadd.f32	s0, s0, s8
 801962a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801962c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019630:	f1bb 0b01 	subs.w	fp, fp, #1
 8019634:	eeb0 6a62 	vmov.f32	s12, s5
 8019638:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801963c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019640:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019644:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8019648:	eeb0 6a43 	vmov.f32	s12, s6
 801964c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019650:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8019654:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019658:	ee61 7a27 	vmul.f32	s15, s2, s15
 801965c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019660:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019664:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019668:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801966c:	ee12 2a90 	vmov	r2, s5
 8019670:	eef0 2a47 	vmov.f32	s5, s14
 8019674:	fb92 f3f3 	sdiv	r3, r2, r3
 8019678:	ee13 2a10 	vmov	r2, s6
 801967c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801967e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019680:	eeb0 3a67 	vmov.f32	s6, s15
 8019684:	fb92 f3f3 	sdiv	r3, r2, r3
 8019688:	9a03      	ldr	r2, [sp, #12]
 801968a:	9314      	str	r3, [sp, #80]	@ 0x50
 801968c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801968e:	bf08      	it	eq
 8019690:	4613      	moveq	r3, r2
 8019692:	e789      	b.n	80195a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019694:	1405      	asrs	r5, r0, #16
 8019696:	d436      	bmi.n	8019706 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019698:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801969c:	42aa      	cmp	r2, r5
 801969e:	dd32      	ble.n	8019706 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80196a0:	140e      	asrs	r6, r1, #16
 80196a2:	d430      	bmi.n	8019706 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80196a4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80196a8:	42b2      	cmp	r2, r6
 80196aa:	dd2c      	ble.n	8019706 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80196ac:	9a00      	ldr	r2, [sp, #0]
 80196ae:	fb06 5502 	mla	r5, r6, r2, r5
 80196b2:	9e01      	ldr	r6, [sp, #4]
 80196b4:	086a      	lsrs	r2, r5, #1
 80196b6:	5cb2      	ldrb	r2, [r6, r2]
 80196b8:	07ee      	lsls	r6, r5, #31
 80196ba:	bf54      	ite	pl
 80196bc:	f002 020f 	andpl.w	r2, r2, #15
 80196c0:	1112      	asrmi	r2, r2, #4
 80196c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80196c6:	b2d2      	uxtb	r2, r2
 80196c8:	b1ea      	cbz	r2, 8019706 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80196ca:	9d04      	ldr	r5, [sp, #16]
 80196cc:	436a      	muls	r2, r5
 80196ce:	1c55      	adds	r5, r2, #1
 80196d0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80196d4:	4d6e      	ldr	r5, [pc, #440]	@ (8019890 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80196d6:	1212      	asrs	r2, r2, #8
 80196d8:	682d      	ldr	r5, [r5, #0]
 80196da:	2aff      	cmp	r2, #255	@ 0xff
 80196dc:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80196e0:	9605      	str	r6, [sp, #20]
 80196e2:	d116      	bne.n	8019712 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80196e4:	f06f 0201 	mvn.w	r2, #1
 80196e8:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 80196ec:	fb02 fc07 	mul.w	ip, r2, r7
 80196f0:	096a      	lsrs	r2, r5, #5
 80196f2:	f026 0607 	bic.w	r6, r6, #7
 80196f6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80196fa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80196fe:	4316      	orrs	r6, r2
 8019700:	432e      	orrs	r6, r5
 8019702:	f824 600c 	strh.w	r6, [r4, ip]
 8019706:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019708:	3f01      	subs	r7, #1
 801970a:	4410      	add	r0, r2
 801970c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801970e:	4411      	add	r1, r2
 8019710:	e77e      	b.n	8019610 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8019712:	f06f 0601 	mvn.w	r6, #1
 8019716:	fa1f fa82 	uxth.w	sl, r2
 801971a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801971e:	43d2      	mvns	r2, r2
 8019720:	437e      	muls	r6, r7
 8019722:	b2ed      	uxtb	r5, r5
 8019724:	fb1c fc0a 	smulbb	ip, ip, sl
 8019728:	b2d2      	uxtb	r2, r2
 801972a:	f834 8006 	ldrh.w	r8, [r4, r6]
 801972e:	fb15 f50a 	smulbb	r5, r5, sl
 8019732:	9602      	str	r6, [sp, #8]
 8019734:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019738:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801973c:	fb16 f60a 	smulbb	r6, r6, sl
 8019740:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8019744:	fb0e ce02 	mla	lr, lr, r2, ip
 8019748:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801974c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019750:	fa1f fe8e 	uxth.w	lr, lr
 8019754:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8019758:	fa5f f888 	uxtb.w	r8, r8
 801975c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8019760:	fb08 5502 	mla	r5, r8, r2, r5
 8019764:	f10e 0201 	add.w	r2, lr, #1
 8019768:	fa1f fc8c 	uxth.w	ip, ip
 801976c:	b2ad      	uxth	r5, r5
 801976e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8019772:	9a02      	ldr	r2, [sp, #8]
 8019774:	1c6e      	adds	r6, r5, #1
 8019776:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801977a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801977e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019782:	ea46 0e0e 	orr.w	lr, r6, lr
 8019786:	f10c 0601 	add.w	r6, ip, #1
 801978a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801978e:	0976      	lsrs	r6, r6, #5
 8019790:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8019794:	ea4e 0e06 	orr.w	lr, lr, r6
 8019798:	f824 e002 	strh.w	lr, [r4, r2]
 801979c:	e7b3      	b.n	8019706 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801979e:	f04f 0800 	mov.w	r8, #0
 80197a2:	eba3 0208 	sub.w	r2, r3, r8
 80197a6:	2a00      	cmp	r2, #0
 80197a8:	f77f af35 	ble.w	8019616 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80197ac:	1402      	asrs	r2, r0, #16
 80197ae:	9e00      	ldr	r6, [sp, #0]
 80197b0:	140d      	asrs	r5, r1, #16
 80197b2:	fb06 2505 	mla	r5, r6, r5, r2
 80197b6:	9e01      	ldr	r6, [sp, #4]
 80197b8:	086a      	lsrs	r2, r5, #1
 80197ba:	07ed      	lsls	r5, r5, #31
 80197bc:	5cb2      	ldrb	r2, [r6, r2]
 80197be:	bf54      	ite	pl
 80197c0:	f002 020f 	andpl.w	r2, r2, #15
 80197c4:	1112      	asrmi	r2, r2, #4
 80197c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80197ca:	b2d2      	uxtb	r2, r2
 80197cc:	b1c2      	cbz	r2, 8019800 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80197ce:	9d04      	ldr	r5, [sp, #16]
 80197d0:	436a      	muls	r2, r5
 80197d2:	1c55      	adds	r5, r2, #1
 80197d4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80197d8:	4d2d      	ldr	r5, [pc, #180]	@ (8019890 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80197da:	1212      	asrs	r2, r2, #8
 80197dc:	682e      	ldr	r6, [r5, #0]
 80197de:	2aff      	cmp	r2, #255	@ 0xff
 80197e0:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80197e4:	d113      	bne.n	801980e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80197e6:	0972      	lsrs	r2, r6, #5
 80197e8:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 80197ec:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80197f0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80197f4:	f025 0507 	bic.w	r5, r5, #7
 80197f8:	4315      	orrs	r5, r2
 80197fa:	4335      	orrs	r5, r6
 80197fc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8019800:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019802:	f108 0801 	add.w	r8, r8, #1
 8019806:	4410      	add	r0, r2
 8019808:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801980a:	4411      	add	r1, r2
 801980c:	e7c9      	b.n	80197a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801980e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8019812:	fa1f fa82 	uxth.w	sl, r2
 8019816:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801981a:	43d2      	mvns	r2, r2
 801981c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019820:	fb17 f70a 	smulbb	r7, r7, sl
 8019824:	b2d2      	uxtb	r2, r2
 8019826:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801982a:	b2f6      	uxtb	r6, r6
 801982c:	b2ed      	uxtb	r5, r5
 801982e:	fb0c 7c02 	mla	ip, ip, r2, r7
 8019832:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019836:	fb16 f60a 	smulbb	r6, r6, sl
 801983a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801983e:	fa1f fc8c 	uxth.w	ip, ip
 8019842:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8019846:	fb15 f50a 	smulbb	r5, r5, sl
 801984a:	fa5f fe8e 	uxtb.w	lr, lr
 801984e:	fb0e 6602 	mla	r6, lr, r2, r6
 8019852:	fb07 5702 	mla	r7, r7, r2, r5
 8019856:	f10c 0201 	add.w	r2, ip, #1
 801985a:	b2b6      	uxth	r6, r6
 801985c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019860:	1c75      	adds	r5, r6, #1
 8019862:	b2bf      	uxth	r7, r7
 8019864:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8019868:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801986c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019870:	ea45 0c0c 	orr.w	ip, r5, ip
 8019874:	1c7d      	adds	r5, r7, #1
 8019876:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801987a:	096d      	lsrs	r5, r5, #5
 801987c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8019880:	ea4c 0c05 	orr.w	ip, ip, r5
 8019884:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8019888:	e7ba      	b.n	8019800 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801988a:	b007      	add	sp, #28
 801988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019890:	24004280 	.word	0x24004280

08019894 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019898:	b087      	sub	sp, #28
 801989a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801989e:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 8019ba8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80198a2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80198a4:	9101      	str	r1, [sp, #4]
 80198a6:	9205      	str	r2, [sp, #20]
 80198a8:	6841      	ldr	r1, [r0, #4]
 80198aa:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 80198ae:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 80198b2:	fb01 2404 	mla	r4, r1, r4, r2
 80198b6:	6802      	ldr	r2, [r0, #0]
 80198b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80198bc:	f8db 2008 	ldr.w	r2, [fp, #8]
 80198c0:	3201      	adds	r2, #1
 80198c2:	f022 0201 	bic.w	r2, r2, #1
 80198c6:	9202      	str	r2, [sp, #8]
 80198c8:	f8db 2000 	ldr.w	r2, [fp]
 80198cc:	9203      	str	r2, [sp, #12]
 80198ce:	9a01      	ldr	r2, [sp, #4]
 80198d0:	2a00      	cmp	r2, #0
 80198d2:	dc03      	bgt.n	80198dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80198d4:	9a05      	ldr	r2, [sp, #20]
 80198d6:	2a00      	cmp	r2, #0
 80198d8:	f340 8162 	ble.w	8019ba0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80198dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80198de:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80198e2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80198e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80198e8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80198ec:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	dd0e      	ble.n	8019912 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80198f4:	1402      	asrs	r2, r0, #16
 80198f6:	d405      	bmi.n	8019904 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80198f8:	42ba      	cmp	r2, r7
 80198fa:	da03      	bge.n	8019904 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80198fc:	140a      	asrs	r2, r1, #16
 80198fe:	d401      	bmi.n	8019904 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019900:	42b2      	cmp	r2, r6
 8019902:	db07      	blt.n	8019914 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019904:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019906:	3b01      	subs	r3, #1
 8019908:	3402      	adds	r4, #2
 801990a:	4410      	add	r0, r2
 801990c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801990e:	4411      	add	r1, r2
 8019910:	e7ee      	b.n	80198f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019912:	d017      	beq.n	8019944 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019914:	1e5a      	subs	r2, r3, #1
 8019916:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8019918:	fb05 0502 	mla	r5, r5, r2, r0
 801991c:	142d      	asrs	r5, r5, #16
 801991e:	d409      	bmi.n	8019934 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019920:	42bd      	cmp	r5, r7
 8019922:	da07      	bge.n	8019934 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019924:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8019926:	fb05 1202 	mla	r2, r5, r2, r1
 801992a:	1412      	asrs	r2, r2, #16
 801992c:	d402      	bmi.n	8019934 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801992e:	42b2      	cmp	r2, r6
 8019930:	f2c0 80c3 	blt.w	8019aba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8019934:	2500      	movs	r5, #0
 8019936:	195a      	adds	r2, r3, r5
 8019938:	2a00      	cmp	r2, #0
 801993a:	dc3f      	bgt.n	80199bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801993c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019940:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019944:	9b01      	ldr	r3, [sp, #4]
 8019946:	2b00      	cmp	r3, #0
 8019948:	f340 812a 	ble.w	8019ba0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801994c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019950:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019952:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019956:	eeb0 6a62 	vmov.f32	s12, s5
 801995a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801995e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019962:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019966:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801996a:	eeb0 6a43 	vmov.f32	s12, s6
 801996e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019972:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8019976:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801997a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801997e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019982:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019986:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801998a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801998e:	ee12 2a90 	vmov	r2, s5
 8019992:	eef0 2a47 	vmov.f32	s5, s14
 8019996:	fb92 f3f3 	sdiv	r3, r2, r3
 801999a:	ee13 2a10 	vmov	r2, s6
 801999e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80199a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80199a2:	eeb0 3a67 	vmov.f32	s6, s15
 80199a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80199aa:	9314      	str	r3, [sp, #80]	@ 0x50
 80199ac:	9b01      	ldr	r3, [sp, #4]
 80199ae:	9a05      	ldr	r2, [sp, #20]
 80199b0:	3b01      	subs	r3, #1
 80199b2:	9301      	str	r3, [sp, #4]
 80199b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80199b6:	bf08      	it	eq
 80199b8:	4613      	moveq	r3, r2
 80199ba:	e788      	b.n	80198ce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80199bc:	1406      	asrs	r6, r0, #16
 80199be:	d42c      	bmi.n	8019a1a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80199c0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80199c4:	42b2      	cmp	r2, r6
 80199c6:	dd28      	ble.n	8019a1a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80199c8:	140f      	asrs	r7, r1, #16
 80199ca:	d426      	bmi.n	8019a1a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80199cc:	f8db 200c 	ldr.w	r2, [fp, #12]
 80199d0:	42ba      	cmp	r2, r7
 80199d2:	dd22      	ble.n	8019a1a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80199d4:	9a02      	ldr	r2, [sp, #8]
 80199d6:	fb07 6602 	mla	r6, r7, r2, r6
 80199da:	9f03      	ldr	r7, [sp, #12]
 80199dc:	0872      	lsrs	r2, r6, #1
 80199de:	07f6      	lsls	r6, r6, #31
 80199e0:	5cba      	ldrb	r2, [r7, r2]
 80199e2:	bf54      	ite	pl
 80199e4:	f002 020f 	andpl.w	r2, r2, #15
 80199e8:	1112      	asrmi	r2, r2, #4
 80199ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80199ee:	b2d2      	uxtb	r2, r2
 80199f0:	2aff      	cmp	r2, #255	@ 0xff
 80199f2:	d118      	bne.n	8019a26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80199f4:	f06f 0601 	mvn.w	r6, #1
 80199f8:	f8d8 2000 	ldr.w	r2, [r8]
 80199fc:	fb06 f705 	mul.w	r7, r6, r5
 8019a00:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 8019a04:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8019a08:	0956      	lsrs	r6, r2, #5
 8019a0a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019a0e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8019a12:	ea4c 0606 	orr.w	r6, ip, r6
 8019a16:	4316      	orrs	r6, r2
 8019a18:	53e6      	strh	r6, [r4, r7]
 8019a1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019a1c:	3d01      	subs	r5, #1
 8019a1e:	4410      	add	r0, r2
 8019a20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019a22:	4411      	add	r1, r2
 8019a24:	e787      	b.n	8019936 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019a26:	2a00      	cmp	r2, #0
 8019a28:	d0f7      	beq.n	8019a1a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019a2a:	f06f 0601 	mvn.w	r6, #1
 8019a2e:	f8d8 c000 	ldr.w	ip, [r8]
 8019a32:	fa1f f982 	uxth.w	r9, r2
 8019a36:	43d2      	mvns	r2, r2
 8019a38:	436e      	muls	r6, r5
 8019a3a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8019a3e:	b2d2      	uxtb	r2, r2
 8019a40:	f834 e006 	ldrh.w	lr, [r4, r6]
 8019a44:	fb1a fa09 	smulbb	sl, sl, r9
 8019a48:	9604      	str	r6, [sp, #16]
 8019a4a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8019a4e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019a52:	fb16 f609 	smulbb	r6, r6, r9
 8019a56:	fa5f fc8c 	uxtb.w	ip, ip
 8019a5a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8019a5e:	fb1c fc09 	smulbb	ip, ip, r9
 8019a62:	fb07 6702 	mla	r7, r7, r2, r6
 8019a66:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019a6a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019a6e:	b2bf      	uxth	r7, r7
 8019a70:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8019a74:	fa5f fe8e 	uxtb.w	lr, lr
 8019a78:	fb06 a602 	mla	r6, r6, r2, sl
 8019a7c:	fb0e cc02 	mla	ip, lr, r2, ip
 8019a80:	1c7a      	adds	r2, r7, #1
 8019a82:	b2b6      	uxth	r6, r6
 8019a84:	fa1f fc8c 	uxth.w	ip, ip
 8019a88:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019a8c:	9a04      	ldr	r2, [sp, #16]
 8019a8e:	f10c 0a01 	add.w	sl, ip, #1
 8019a92:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8019a96:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019a9a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019a9e:	ea4a 0707 	orr.w	r7, sl, r7
 8019aa2:	f106 0a01 	add.w	sl, r6, #1
 8019aa6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019aaa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019aae:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8019ab2:	ea47 070a 	orr.w	r7, r7, sl
 8019ab6:	52a7      	strh	r7, [r4, r2]
 8019ab8:	e7af      	b.n	8019a1a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019aba:	f04f 0e00 	mov.w	lr, #0
 8019abe:	eba3 020e 	sub.w	r2, r3, lr
 8019ac2:	2a00      	cmp	r2, #0
 8019ac4:	f77f af3a 	ble.w	801993c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019ac8:	1402      	asrs	r2, r0, #16
 8019aca:	9e02      	ldr	r6, [sp, #8]
 8019acc:	140d      	asrs	r5, r1, #16
 8019ace:	fb06 2505 	mla	r5, r6, r5, r2
 8019ad2:	9e03      	ldr	r6, [sp, #12]
 8019ad4:	086a      	lsrs	r2, r5, #1
 8019ad6:	07ed      	lsls	r5, r5, #31
 8019ad8:	5cb2      	ldrb	r2, [r6, r2]
 8019ada:	bf54      	ite	pl
 8019adc:	f002 020f 	andpl.w	r2, r2, #15
 8019ae0:	1112      	asrmi	r2, r2, #4
 8019ae2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019ae6:	b2d2      	uxtb	r2, r2
 8019ae8:	2aff      	cmp	r2, #255	@ 0xff
 8019aea:	d115      	bne.n	8019b18 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019aec:	f8d8 5000 	ldr.w	r5, [r8]
 8019af0:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 8019af4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8019af8:	096a      	lsrs	r2, r5, #5
 8019afa:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019afe:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8019b02:	4332      	orrs	r2, r6
 8019b04:	432a      	orrs	r2, r5
 8019b06:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8019b0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019b0c:	f10e 0e01 	add.w	lr, lr, #1
 8019b10:	4410      	add	r0, r2
 8019b12:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019b14:	4411      	add	r1, r2
 8019b16:	e7d2      	b.n	8019abe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019b18:	2a00      	cmp	r2, #0
 8019b1a:	d0f6      	beq.n	8019b0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019b1c:	f8d8 7000 	ldr.w	r7, [r8]
 8019b20:	fa1f f982 	uxth.w	r9, r2
 8019b24:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019b28:	43d2      	mvns	r2, r2
 8019b2a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8019b2e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019b32:	ea4f 262c 	mov.w	r6, ip, asr #8
 8019b36:	fb15 f509 	smulbb	r5, r5, r9
 8019b3a:	b2d2      	uxtb	r2, r2
 8019b3c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8019b40:	b2ff      	uxtb	r7, r7
 8019b42:	fb1a fa09 	smulbb	sl, sl, r9
 8019b46:	fb06 5602 	mla	r6, r6, r2, r5
 8019b4a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8019b4e:	fb17 f709 	smulbb	r7, r7, r9
 8019b52:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019b56:	b2b6      	uxth	r6, r6
 8019b58:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8019b5c:	fa5f fc8c 	uxtb.w	ip, ip
 8019b60:	fb05 a502 	mla	r5, r5, r2, sl
 8019b64:	fb0c 7702 	mla	r7, ip, r2, r7
 8019b68:	1c72      	adds	r2, r6, #1
 8019b6a:	b2ad      	uxth	r5, r5
 8019b6c:	b2bf      	uxth	r7, r7
 8019b6e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8019b72:	f107 0a01 	add.w	sl, r7, #1
 8019b76:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8019b7a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019b7e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019b82:	ea4a 0606 	orr.w	r6, sl, r6
 8019b86:	f105 0a01 	add.w	sl, r5, #1
 8019b8a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019b8e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019b92:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8019b96:	ea46 060a 	orr.w	r6, r6, sl
 8019b9a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8019b9e:	e7b4      	b.n	8019b0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019ba0:	b007      	add	sp, #28
 8019ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ba6:	bf00      	nop
 8019ba8:	24004280 	.word	0x24004280

08019bac <_ZN8touchgfx8LCD16bppD1Ev>:
 8019bac:	4770      	bx	lr

08019bae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 8019bae:	4770      	bx	lr

08019bb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 8019bb0:	4770      	bx	lr

08019bb2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8019bb2:	4770      	bx	lr

08019bb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019bb4:	4770      	bx	lr

08019bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019bb6:	4770      	bx	lr

08019bb8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019bb8:	4770      	bx	lr

08019bba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8019bba:	4770      	bx	lr

08019bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019bbc:	4770      	bx	lr

08019bbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019bbe:	4770      	bx	lr

08019bc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019bc0:	4770      	bx	lr

08019bc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019bc2:	4770      	bx	lr

08019bc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019bc4:	4770      	bx	lr

08019bc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019bc6:	4770      	bx	lr

08019bc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019bc8:	4770      	bx	lr

08019bca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019bca:	4770      	bx	lr

08019bcc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019bcc:	4770      	bx	lr

08019bce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019bce:	4770      	bx	lr

08019bd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019bd0:	4770      	bx	lr

08019bd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019bd2:	4770      	bx	lr

08019bd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019bd4:	4770      	bx	lr

08019bd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019bd6:	4770      	bx	lr

08019bd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019bd8:	4770      	bx	lr

08019bda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019bda:	4770      	bx	lr

08019bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019bdc:	4770      	bx	lr

08019bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019bde:	4770      	bx	lr

08019be0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019be0:	4770      	bx	lr

08019be2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019be2:	4770      	bx	lr

08019be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019be4:	4770      	bx	lr

08019be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019be6:	4770      	bx	lr

08019be8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019be8:	4770      	bx	lr

08019bea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019bea:	4770      	bx	lr

08019bec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bf0:	b088      	sub	sp, #32
 8019bf2:	4606      	mov	r6, r0
 8019bf4:	4688      	mov	r8, r1
 8019bf6:	4691      	mov	r9, r2
 8019bf8:	ac08      	add	r4, sp, #32
 8019bfa:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f7fd fc62 	bl	80174c8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019c04:	6833      	ldr	r3, [r6, #0]
 8019c06:	4605      	mov	r5, r0
 8019c08:	4620      	mov	r0, r4
 8019c0a:	699f      	ldr	r7, [r3, #24]
 8019c0c:	f7fd fb6a 	bl	80172e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c10:	4682      	mov	sl, r0
 8019c12:	4620      	mov	r0, r4
 8019c14:	f7fd fb9a 	bl	801734c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c18:	9500      	str	r5, [sp, #0]
 8019c1a:	464b      	mov	r3, r9
 8019c1c:	4642      	mov	r2, r8
 8019c1e:	4631      	mov	r1, r6
 8019c20:	e9cd a001 	strd	sl, r0, [sp, #4]
 8019c24:	a806      	add	r0, sp, #24
 8019c26:	47b8      	blx	r7
 8019c28:	4628      	mov	r0, r5
 8019c2a:	b008      	add	sp, #32
 8019c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019c30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c34:	2300      	movs	r3, #0
 8019c36:	9300      	str	r3, [sp, #0]
 8019c38:	4b3d      	ldr	r3, [pc, #244]	@ (8019d30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8019c3a:	781b      	ldrb	r3, [r3, #0]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d137      	bne.n	8019cb0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8019c40:	4a3c      	ldr	r2, [pc, #240]	@ (8019d34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019c42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019c46:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d132      	bne.n	8019cb4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8019c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8019d38 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8019c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c54:	ac02      	add	r4, sp, #8
 8019c56:	6808      	ldr	r0, [r1, #0]
 8019c58:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019c5c:	ab02      	add	r3, sp, #8
 8019c5e:	6849      	ldr	r1, [r1, #4]
 8019c60:	4d36      	ldr	r5, [pc, #216]	@ (8019d3c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8019c62:	c303      	stmia	r3!, {r0, r1}
 8019c64:	4669      	mov	r1, sp
 8019c66:	4620      	mov	r0, r4
 8019c68:	f7fa fd4c 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c6c:	4668      	mov	r0, sp
 8019c6e:	f7fa fd21 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019c76:	f8bd 2000 	ldrh.w	r2, [sp]
 8019c7a:	462f      	mov	r7, r5
 8019c7c:	6828      	ldr	r0, [r5, #0]
 8019c7e:	4413      	add	r3, r2
 8019c80:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019c84:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019c88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019c8c:	4413      	add	r3, r2
 8019c8e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019c92:	6803      	ldr	r3, [r0, #0]
 8019c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019c96:	4798      	blx	r3
 8019c98:	f010 0f01 	tst.w	r0, #1
 8019c9c:	d00c      	beq.n	8019cb8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8019c9e:	6828      	ldr	r0, [r5, #0]
 8019ca0:	6803      	ldr	r3, [r0, #0]
 8019ca2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019ca8:	4798      	blx	r3
 8019caa:	b004      	add	sp, #16
 8019cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cb0:	4a21      	ldr	r2, [pc, #132]	@ (8019d38 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8019cb2:	e7c6      	b.n	8019c42 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8019cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8019d34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019cb6:	e7cb      	b.n	8019c50 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019cb8:	6838      	ldr	r0, [r7, #0]
 8019cba:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8019cbe:	6803      	ldr	r3, [r0, #0]
 8019cc0:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8019cc4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019cca:	4798      	blx	r3
 8019ccc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8019cd0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019cd4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8019cd8:	fb16 3602 	smlabb	r6, r6, r2, r3
 8019cdc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019ce0:	6838      	ldr	r0, [r7, #0]
 8019ce2:	6803      	ldr	r3, [r0, #0]
 8019ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ce6:	4798      	blx	r3
 8019ce8:	4a12      	ldr	r2, [pc, #72]	@ (8019d34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019cea:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8019cee:	8813      	ldrh	r3, [r2, #0]
 8019cf0:	4691      	mov	r9, r2
 8019cf2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019cf6:	435d      	muls	r5, r3
 8019cf8:	fb03 1404 	mla	r4, r3, r4, r1
 8019cfc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019d00:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019d04:	6838      	ldr	r0, [r7, #0]
 8019d06:	42ac      	cmp	r4, r5
 8019d08:	6803      	ldr	r3, [r0, #0]
 8019d0a:	d20e      	bcs.n	8019d2a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8019d0c:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 8019d10:	4632      	mov	r2, r6
 8019d12:	4643      	mov	r3, r8
 8019d14:	4621      	mov	r1, r4
 8019d16:	47d0      	blx	sl
 8019d18:	f8b9 3000 	ldrh.w	r3, [r9]
 8019d1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019d20:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019d24:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019d28:	e7ec      	b.n	8019d04 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8019d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d2c:	4798      	blx	r3
 8019d2e:	e7bc      	b.n	8019caa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019d30:	24004270 	.word	0x24004270
 8019d34:	24004272 	.word	0x24004272
 8019d38:	24004274 	.word	0x24004274
 8019d3c:	24004278 	.word	0x24004278

08019d40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8019d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d44:	b08b      	sub	sp, #44	@ 0x2c
 8019d46:	460f      	mov	r7, r1
 8019d48:	4616      	mov	r6, r2
 8019d4a:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8019d4e:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8019d52:	f1bb 0f00 	cmp.w	fp, #0
 8019d56:	d04a      	beq.n	8019dee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8019d58:	6810      	ldr	r0, [r2, #0]
 8019d5a:	ad06      	add	r5, sp, #24
 8019d5c:	6851      	ldr	r1, [r2, #4]
 8019d5e:	c503      	stmia	r5!, {r0, r1}
 8019d60:	6818      	ldr	r0, [r3, #0]
 8019d62:	ad08      	add	r5, sp, #32
 8019d64:	6859      	ldr	r1, [r3, #4]
 8019d66:	c503      	stmia	r5!, {r0, r1}
 8019d68:	a806      	add	r0, sp, #24
 8019d6a:	f7fa fca3 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019d6e:	4631      	mov	r1, r6
 8019d70:	a808      	add	r0, sp, #32
 8019d72:	f7fa fcc7 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019d76:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019d7a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019d7e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8019d82:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8019d86:	fb16 2103 	smlabb	r1, r6, r3, r2
 8019d8a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8019d8e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8019d92:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019d96:	4f5f      	ldr	r7, [pc, #380]	@ (8019f14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019d98:	440a      	add	r2, r1
 8019d9a:	6838      	ldr	r0, [r7, #0]
 8019d9c:	46b9      	mov	r9, r7
 8019d9e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019da2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019da6:	4413      	add	r3, r2
 8019da8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019dac:	6803      	ldr	r3, [r0, #0]
 8019dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019db0:	4798      	blx	r3
 8019db2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019db6:	d11d      	bne.n	8019df4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8019db8:	b9fc      	cbnz	r4, 8019dfa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019dba:	f010 0f01 	tst.w	r0, #1
 8019dbe:	d01c      	beq.n	8019dfa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019dc0:	f8d9 0000 	ldr.w	r0, [r9]
 8019dc4:	2700      	movs	r7, #0
 8019dc6:	b2ad      	uxth	r5, r5
 8019dc8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8019dcc:	6801      	ldr	r1, [r0, #0]
 8019dce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019dd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8019dd6:	9501      	str	r5, [sp, #4]
 8019dd8:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8019ddc:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8019de0:	9402      	str	r4, [sp, #8]
 8019de2:	fa1f f488 	uxth.w	r4, r8
 8019de6:	9400      	str	r4, [sp, #0]
 8019de8:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8019dea:	4631      	mov	r1, r6
 8019dec:	47a0      	blx	r4
 8019dee:	b00b      	add	sp, #44	@ 0x2c
 8019df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df4:	f010 0f04 	tst.w	r0, #4
 8019df8:	e7e1      	b.n	8019dbe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8019dfa:	f8d9 0000 	ldr.w	r0, [r9]
 8019dfe:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8019e02:	6803      	ldr	r3, [r0, #0]
 8019e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e06:	4798      	blx	r3
 8019e08:	4b43      	ldr	r3, [pc, #268]	@ (8019f18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8019e0a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8019e0e:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019e12:	881a      	ldrh	r2, [r3, #0]
 8019e14:	469a      	mov	sl, r3
 8019e16:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8019e1a:	fb05 f502 	mul.w	r5, r5, r2
 8019e1e:	fb02 1404 	mla	r4, r2, r4, r1
 8019e22:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019e26:	d059      	beq.n	8019edc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8019e28:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8019e2c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019e30:	fa1f f28b 	uxth.w	r2, fp
 8019e34:	469e      	mov	lr, r3
 8019e36:	fa1f f989 	uxth.w	r9, r9
 8019e3a:	42ac      	cmp	r4, r5
 8019e3c:	d264      	bcs.n	8019f08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8019e3e:	eb04 0a07 	add.w	sl, r4, r7
 8019e42:	4554      	cmp	r4, sl
 8019e44:	d23d      	bcs.n	8019ec2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8019e46:	8821      	ldrh	r1, [r4, #0]
 8019e48:	f836 3b02 	ldrh.w	r3, [r6], #2
 8019e4c:	1208      	asrs	r0, r1, #8
 8019e4e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8019e52:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8019e56:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8019e5a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8019e5e:	00c9      	lsls	r1, r1, #3
 8019e60:	fb10 f009 	smulbb	r0, r0, r9
 8019e64:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8019e68:	b2c9      	uxtb	r1, r1
 8019e6a:	fb0c 0c02 	mla	ip, ip, r2, r0
 8019e6e:	10d8      	asrs	r0, r3, #3
 8019e70:	fb1b fb09 	smulbb	fp, fp, r9
 8019e74:	00db      	lsls	r3, r3, #3
 8019e76:	fa1f fc8c 	uxth.w	ip, ip
 8019e7a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8019e7e:	fb11 f109 	smulbb	r1, r1, r9
 8019e82:	b2db      	uxtb	r3, r3
 8019e84:	fb00 b002 	mla	r0, r0, r2, fp
 8019e88:	f10c 0b01 	add.w	fp, ip, #1
 8019e8c:	fb03 1302 	mla	r3, r3, r2, r1
 8019e90:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019e94:	b29b      	uxth	r3, r3
 8019e96:	b280      	uxth	r0, r0
 8019e98:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8019e9c:	f103 0c01 	add.w	ip, r3, #1
 8019ea0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019ea4:	1c43      	adds	r3, r0, #1
 8019ea6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019eaa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019eae:	0940      	lsrs	r0, r0, #5
 8019eb0:	ea4c 0c0b 	orr.w	ip, ip, fp
 8019eb4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8019eb8:	ea4c 0c00 	orr.w	ip, ip, r0
 8019ebc:	f824 cb02 	strh.w	ip, [r4], #2
 8019ec0:	e7bf      	b.n	8019e42 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8019ec2:	f8be 3000 	ldrh.w	r3, [lr]
 8019ec6:	eba3 0308 	sub.w	r3, r3, r8
 8019eca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ece:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019ed2:	eba3 0308 	sub.w	r3, r3, r8
 8019ed6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019eda:	e7ae      	b.n	8019e3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8019edc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019ee0:	f8d9 0000 	ldr.w	r0, [r9]
 8019ee4:	42ac      	cmp	r4, r5
 8019ee6:	6803      	ldr	r3, [r0, #0]
 8019ee8:	d20e      	bcs.n	8019f08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8019eea:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8019eee:	4632      	mov	r2, r6
 8019ef0:	463b      	mov	r3, r7
 8019ef2:	4621      	mov	r1, r4
 8019ef4:	47c0      	blx	r8
 8019ef6:	f8ba 3000 	ldrh.w	r3, [sl]
 8019efa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019efe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019f02:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019f06:	e7eb      	b.n	8019ee0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8019f08:	4b02      	ldr	r3, [pc, #8]	@ (8019f14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019f0a:	6818      	ldr	r0, [r3, #0]
 8019f0c:	6803      	ldr	r3, [r0, #0]
 8019f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f10:	4798      	blx	r3
 8019f12:	e76c      	b.n	8019dee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8019f14:	24004278 	.word	0x24004278
 8019f18:	24004272 	.word	0x24004272

08019f1c <_ZN8touchgfx8LCD16bppD0Ev>:
 8019f1c:	b510      	push	{r4, lr}
 8019f1e:	4604      	mov	r4, r0
 8019f20:	2188      	movs	r1, #136	@ 0x88
 8019f22:	f00a fe56 	bl	8024bd2 <_ZdlPvj>
 8019f26:	4620      	mov	r0, r4
 8019f28:	bd10      	pop	{r4, pc}

08019f2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8019f2a:	b510      	push	{r4, lr}
 8019f2c:	4604      	mov	r4, r0
 8019f2e:	2104      	movs	r1, #4
 8019f30:	f00a fe4f 	bl	8024bd2 <_ZdlPvj>
 8019f34:	4620      	mov	r0, r4
 8019f36:	bd10      	pop	{r4, pc}

08019f38 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 8019f38:	b510      	push	{r4, lr}
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	2104      	movs	r1, #4
 8019f3e:	f00a fe48 	bl	8024bd2 <_ZdlPvj>
 8019f42:	4620      	mov	r0, r4
 8019f44:	bd10      	pop	{r4, pc}

08019f46 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 8019f46:	b510      	push	{r4, lr}
 8019f48:	4604      	mov	r4, r0
 8019f4a:	f640 0144 	movw	r1, #2116	@ 0x844
 8019f4e:	f00a fe40 	bl	8024bd2 <_ZdlPvj>
 8019f52:	4620      	mov	r0, r4
 8019f54:	bd10      	pop	{r4, pc}

08019f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019f56:	b510      	push	{r4, lr}
 8019f58:	4604      	mov	r4, r0
 8019f5a:	2104      	movs	r1, #4
 8019f5c:	f00a fe39 	bl	8024bd2 <_ZdlPvj>
 8019f60:	4620      	mov	r0, r4
 8019f62:	bd10      	pop	{r4, pc}

08019f64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8019f64:	b510      	push	{r4, lr}
 8019f66:	4604      	mov	r4, r0
 8019f68:	2104      	movs	r1, #4
 8019f6a:	f00a fe32 	bl	8024bd2 <_ZdlPvj>
 8019f6e:	4620      	mov	r0, r4
 8019f70:	bd10      	pop	{r4, pc}

08019f72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019f72:	b510      	push	{r4, lr}
 8019f74:	4604      	mov	r4, r0
 8019f76:	2104      	movs	r1, #4
 8019f78:	f00a fe2b 	bl	8024bd2 <_ZdlPvj>
 8019f7c:	4620      	mov	r0, r4
 8019f7e:	bd10      	pop	{r4, pc}

08019f80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8019f80:	b510      	push	{r4, lr}
 8019f82:	4604      	mov	r4, r0
 8019f84:	2104      	movs	r1, #4
 8019f86:	f00a fe24 	bl	8024bd2 <_ZdlPvj>
 8019f8a:	4620      	mov	r0, r4
 8019f8c:	bd10      	pop	{r4, pc}

08019f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019f8e:	b510      	push	{r4, lr}
 8019f90:	4604      	mov	r4, r0
 8019f92:	2104      	movs	r1, #4
 8019f94:	f00a fe1d 	bl	8024bd2 <_ZdlPvj>
 8019f98:	4620      	mov	r0, r4
 8019f9a:	bd10      	pop	{r4, pc}

08019f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019f9c:	b510      	push	{r4, lr}
 8019f9e:	4604      	mov	r4, r0
 8019fa0:	2104      	movs	r1, #4
 8019fa2:	f00a fe16 	bl	8024bd2 <_ZdlPvj>
 8019fa6:	4620      	mov	r0, r4
 8019fa8:	bd10      	pop	{r4, pc}

08019faa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019faa:	b510      	push	{r4, lr}
 8019fac:	4604      	mov	r4, r0
 8019fae:	2104      	movs	r1, #4
 8019fb0:	f00a fe0f 	bl	8024bd2 <_ZdlPvj>
 8019fb4:	4620      	mov	r0, r4
 8019fb6:	bd10      	pop	{r4, pc}

08019fb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019fb8:	b510      	push	{r4, lr}
 8019fba:	4604      	mov	r4, r0
 8019fbc:	2104      	movs	r1, #4
 8019fbe:	f00a fe08 	bl	8024bd2 <_ZdlPvj>
 8019fc2:	4620      	mov	r0, r4
 8019fc4:	bd10      	pop	{r4, pc}

08019fc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019fc6:	b510      	push	{r4, lr}
 8019fc8:	4604      	mov	r4, r0
 8019fca:	2104      	movs	r1, #4
 8019fcc:	f00a fe01 	bl	8024bd2 <_ZdlPvj>
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	bd10      	pop	{r4, pc}

08019fd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019fd4:	b510      	push	{r4, lr}
 8019fd6:	4604      	mov	r4, r0
 8019fd8:	2104      	movs	r1, #4
 8019fda:	f00a fdfa 	bl	8024bd2 <_ZdlPvj>
 8019fde:	4620      	mov	r0, r4
 8019fe0:	bd10      	pop	{r4, pc}

08019fe2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019fe2:	b510      	push	{r4, lr}
 8019fe4:	4604      	mov	r4, r0
 8019fe6:	2104      	movs	r1, #4
 8019fe8:	f00a fdf3 	bl	8024bd2 <_ZdlPvj>
 8019fec:	4620      	mov	r0, r4
 8019fee:	bd10      	pop	{r4, pc}

08019ff0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019ff0:	b510      	push	{r4, lr}
 8019ff2:	4604      	mov	r4, r0
 8019ff4:	2104      	movs	r1, #4
 8019ff6:	f00a fdec 	bl	8024bd2 <_ZdlPvj>
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	bd10      	pop	{r4, pc}

08019ffe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019ffe:	b510      	push	{r4, lr}
 801a000:	4604      	mov	r4, r0
 801a002:	2104      	movs	r1, #4
 801a004:	f00a fde5 	bl	8024bd2 <_ZdlPvj>
 801a008:	4620      	mov	r0, r4
 801a00a:	bd10      	pop	{r4, pc}

0801a00c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a00c:	b510      	push	{r4, lr}
 801a00e:	4604      	mov	r4, r0
 801a010:	2104      	movs	r1, #4
 801a012:	f00a fdde 	bl	8024bd2 <_ZdlPvj>
 801a016:	4620      	mov	r0, r4
 801a018:	bd10      	pop	{r4, pc}

0801a01a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a01a:	b510      	push	{r4, lr}
 801a01c:	4604      	mov	r4, r0
 801a01e:	2104      	movs	r1, #4
 801a020:	f00a fdd7 	bl	8024bd2 <_ZdlPvj>
 801a024:	4620      	mov	r0, r4
 801a026:	bd10      	pop	{r4, pc}

0801a028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a028:	b510      	push	{r4, lr}
 801a02a:	4604      	mov	r4, r0
 801a02c:	2104      	movs	r1, #4
 801a02e:	f00a fdd0 	bl	8024bd2 <_ZdlPvj>
 801a032:	4620      	mov	r0, r4
 801a034:	bd10      	pop	{r4, pc}

0801a036 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a036:	b510      	push	{r4, lr}
 801a038:	4604      	mov	r4, r0
 801a03a:	2104      	movs	r1, #4
 801a03c:	f00a fdc9 	bl	8024bd2 <_ZdlPvj>
 801a040:	4620      	mov	r0, r4
 801a042:	bd10      	pop	{r4, pc}

0801a044 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a044:	b510      	push	{r4, lr}
 801a046:	4604      	mov	r4, r0
 801a048:	2104      	movs	r1, #4
 801a04a:	f00a fdc2 	bl	8024bd2 <_ZdlPvj>
 801a04e:	4620      	mov	r0, r4
 801a050:	bd10      	pop	{r4, pc}

0801a052 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a052:	b510      	push	{r4, lr}
 801a054:	4604      	mov	r4, r0
 801a056:	2104      	movs	r1, #4
 801a058:	f00a fdbb 	bl	8024bd2 <_ZdlPvj>
 801a05c:	4620      	mov	r0, r4
 801a05e:	bd10      	pop	{r4, pc}

0801a060 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a060:	b510      	push	{r4, lr}
 801a062:	4604      	mov	r4, r0
 801a064:	2104      	movs	r1, #4
 801a066:	f00a fdb4 	bl	8024bd2 <_ZdlPvj>
 801a06a:	4620      	mov	r0, r4
 801a06c:	bd10      	pop	{r4, pc}

0801a06e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a06e:	b510      	push	{r4, lr}
 801a070:	4604      	mov	r4, r0
 801a072:	2104      	movs	r1, #4
 801a074:	f00a fdad 	bl	8024bd2 <_ZdlPvj>
 801a078:	4620      	mov	r0, r4
 801a07a:	bd10      	pop	{r4, pc}

0801a07c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a07c:	b510      	push	{r4, lr}
 801a07e:	4604      	mov	r4, r0
 801a080:	2104      	movs	r1, #4
 801a082:	f00a fda6 	bl	8024bd2 <_ZdlPvj>
 801a086:	4620      	mov	r0, r4
 801a088:	bd10      	pop	{r4, pc}

0801a08a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a08a:	b510      	push	{r4, lr}
 801a08c:	4604      	mov	r4, r0
 801a08e:	2104      	movs	r1, #4
 801a090:	f00a fd9f 	bl	8024bd2 <_ZdlPvj>
 801a094:	4620      	mov	r0, r4
 801a096:	bd10      	pop	{r4, pc}

0801a098 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a098:	b510      	push	{r4, lr}
 801a09a:	4604      	mov	r4, r0
 801a09c:	2104      	movs	r1, #4
 801a09e:	f00a fd98 	bl	8024bd2 <_ZdlPvj>
 801a0a2:	4620      	mov	r0, r4
 801a0a4:	bd10      	pop	{r4, pc}

0801a0a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a0a6:	b510      	push	{r4, lr}
 801a0a8:	4604      	mov	r4, r0
 801a0aa:	2104      	movs	r1, #4
 801a0ac:	f00a fd91 	bl	8024bd2 <_ZdlPvj>
 801a0b0:	4620      	mov	r0, r4
 801a0b2:	bd10      	pop	{r4, pc}

0801a0b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a0b4:	b510      	push	{r4, lr}
 801a0b6:	4604      	mov	r4, r0
 801a0b8:	2104      	movs	r1, #4
 801a0ba:	f00a fd8a 	bl	8024bd2 <_ZdlPvj>
 801a0be:	4620      	mov	r0, r4
 801a0c0:	bd10      	pop	{r4, pc}

0801a0c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a0c2:	b510      	push	{r4, lr}
 801a0c4:	4604      	mov	r4, r0
 801a0c6:	2104      	movs	r1, #4
 801a0c8:	f00a fd83 	bl	8024bd2 <_ZdlPvj>
 801a0cc:	4620      	mov	r0, r4
 801a0ce:	bd10      	pop	{r4, pc}

0801a0d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a0d0:	b510      	push	{r4, lr}
 801a0d2:	4604      	mov	r4, r0
 801a0d4:	2104      	movs	r1, #4
 801a0d6:	f00a fd7c 	bl	8024bd2 <_ZdlPvj>
 801a0da:	4620      	mov	r0, r4
 801a0dc:	bd10      	pop	{r4, pc}
	...

0801a0e0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e4:	b08f      	sub	sp, #60	@ 0x3c
 801a0e6:	461c      	mov	r4, r3
 801a0e8:	9205      	str	r2, [sp, #20]
 801a0ea:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a0ee:	9100      	str	r1, [sp, #0]
 801a0f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a0f2:	9201      	str	r2, [sp, #4]
 801a0f4:	2a00      	cmp	r2, #0
 801a0f6:	f000 8116 	beq.w	801a326 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801a0fa:	6820      	ldr	r0, [r4, #0]
 801a0fc:	aa0a      	add	r2, sp, #40	@ 0x28
 801a0fe:	6861      	ldr	r1, [r4, #4]
 801a100:	c203      	stmia	r2!, {r0, r1}
 801a102:	6818      	ldr	r0, [r3, #0]
 801a104:	aa0c      	add	r2, sp, #48	@ 0x30
 801a106:	6859      	ldr	r1, [r3, #4]
 801a108:	c203      	stmia	r2!, {r0, r1}
 801a10a:	a80a      	add	r0, sp, #40	@ 0x28
 801a10c:	f7fa fad2 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a110:	4621      	mov	r1, r4
 801a112:	a80c      	add	r0, sp, #48	@ 0x30
 801a114:	f7fa faf6 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a118:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801a11c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a120:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a124:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a128:	bfdb      	ittet	le
 801a12a:	b2b3      	uxthle	r3, r6
 801a12c:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a130:	2301      	movgt	r3, #1
 801a132:	fb92 f3f3 	sdivle	r3, r2, r3
 801a136:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a13a:	441d      	add	r5, r3
 801a13c:	fb92 f1f3 	sdiv	r1, r2, r3
 801a140:	fa1f fc81 	uxth.w	ip, r1
 801a144:	3d01      	subs	r5, #1
 801a146:	fb0c 2413 	mls	r4, ip, r3, r2
 801a14a:	4661      	mov	r1, ip
 801a14c:	fb14 f406 	smulbb	r4, r4, r6
 801a150:	4404      	add	r4, r0
 801a152:	fb95 f5f3 	sdiv	r5, r5, r3
 801a156:	b2a4      	uxth	r4, r4
 801a158:	b131      	cbz	r1, 801a168 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801a15a:	9b05      	ldr	r3, [sp, #20]
 801a15c:	9900      	ldr	r1, [sp, #0]
 801a15e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a162:	ba1b      	rev	r3, r3
 801a164:	4419      	add	r1, r3
 801a166:	9100      	str	r1, [sp, #0]
 801a168:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a16c:	b2ad      	uxth	r5, r5
 801a16e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801a172:	4418      	add	r0, r3
 801a174:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a178:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801a17c:	00ad      	lsls	r5, r5, #2
 801a17e:	441a      	add	r2, r3
 801a180:	4b6a      	ldr	r3, [pc, #424]	@ (801a32c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801a182:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a186:	6818      	ldr	r0, [r3, #0]
 801a188:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a18c:	6803      	ldr	r3, [r0, #0]
 801a18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a190:	4798      	blx	r3
 801a192:	4967      	ldr	r1, [pc, #412]	@ (801a330 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801a194:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a198:	2c00      	cmp	r4, #0
 801a19a:	880b      	ldrh	r3, [r1, #0]
 801a19c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a1a0:	bf0c      	ite	eq
 801a1a2:	46c6      	moveq	lr, r8
 801a1a4:	f04f 0e00 	movne.w	lr, #0
 801a1a8:	9109      	str	r1, [sp, #36]	@ 0x24
 801a1aa:	fb03 c202 	mla	r2, r3, r2, ip
 801a1ae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801a1b2:	4373      	muls	r3, r6
 801a1b4:	fa1f fe8e 	uxth.w	lr, lr
 801a1b8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a1bc:	9103      	str	r1, [sp, #12]
 801a1be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a1c2:	9306      	str	r3, [sp, #24]
 801a1c4:	1d2b      	adds	r3, r5, #4
 801a1c6:	9307      	str	r3, [sp, #28]
 801a1c8:	9b01      	ldr	r3, [sp, #4]
 801a1ca:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	b292      	uxth	r2, r2
 801a1d2:	9302      	str	r3, [sp, #8]
 801a1d4:	9204      	str	r2, [sp, #16]
 801a1d6:	9a06      	ldr	r2, [sp, #24]
 801a1d8:	4282      	cmp	r2, r0
 801a1da:	f240 809f 	bls.w	801a31c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801a1de:	b963      	cbnz	r3, 801a1fa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801a1e0:	9b00      	ldr	r3, [sp, #0]
 801a1e2:	781a      	ldrb	r2, [r3, #0]
 801a1e4:	0993      	lsrs	r3, r2, #6
 801a1e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a1ea:	9202      	str	r2, [sp, #8]
 801a1ec:	1e5a      	subs	r2, r3, #1
 801a1ee:	2a02      	cmp	r2, #2
 801a1f0:	d815      	bhi.n	801a21e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801a1f2:	9a00      	ldr	r2, [sp, #0]
 801a1f4:	b29b      	uxth	r3, r3
 801a1f6:	3201      	adds	r2, #1
 801a1f8:	9200      	str	r2, [sp, #0]
 801a1fa:	b1b4      	cbz	r4, 801a22a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801a1fc:	429c      	cmp	r4, r3
 801a1fe:	bf91      	iteee	ls
 801a200:	1b1c      	subls	r4, r3, r4
 801a202:	1ae4      	subhi	r4, r4, r3
 801a204:	4671      	movhi	r1, lr
 801a206:	f04f 0a00 	movhi.w	sl, #0
 801a20a:	bf9b      	ittet	ls
 801a20c:	fa1f fa84 	uxthls.w	sl, r4
 801a210:	2400      	movls	r4, #0
 801a212:	b2a4      	uxthhi	r4, r4
 801a214:	fa1f f188 	uxthls.w	r1, r8
 801a218:	4653      	mov	r3, sl
 801a21a:	468e      	mov	lr, r1
 801a21c:	e7db      	b.n	801a1d6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801a21e:	9a00      	ldr	r2, [sp, #0]
 801a220:	9b00      	ldr	r3, [sp, #0]
 801a222:	3202      	adds	r2, #2
 801a224:	785b      	ldrb	r3, [r3, #1]
 801a226:	9200      	str	r2, [sp, #0]
 801a228:	e7e7      	b.n	801a1fa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801a22a:	2202      	movs	r2, #2
 801a22c:	9907      	ldr	r1, [sp, #28]
 801a22e:	4573      	cmp	r3, lr
 801a230:	4615      	mov	r5, r2
 801a232:	9a02      	ldr	r2, [sp, #8]
 801a234:	bf24      	itt	cs
 801a236:	eba3 0a0e 	subcs.w	sl, r3, lr
 801a23a:	46f1      	movcs	r9, lr
 801a23c:	fb15 1202 	smlabb	r2, r5, r2, r1
 801a240:	9905      	ldr	r1, [sp, #20]
 801a242:	bf34      	ite	cc
 801a244:	4699      	movcc	r9, r3
 801a246:	fa1f fa8a 	uxthcs.w	sl, sl
 801a24a:	f831 c002 	ldrh.w	ip, [r1, r2]
 801a24e:	bf38      	it	cc
 801a250:	ebae 0103 	subcc.w	r1, lr, r3
 801a254:	9a01      	ldr	r2, [sp, #4]
 801a256:	bf2e      	itee	cs
 801a258:	4621      	movcs	r1, r4
 801a25a:	b289      	uxthcc	r1, r1
 801a25c:	46a2      	movcc	sl, r4
 801a25e:	2aff      	cmp	r2, #255	@ 0xff
 801a260:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a264:	d105      	bne.n	801a272 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801a266:	4481      	add	r9, r0
 801a268:	4581      	cmp	r9, r0
 801a26a:	d045      	beq.n	801a2f8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801a26c:	f820 cb02 	strh.w	ip, [r0], #2
 801a270:	e7fa      	b.n	801a268 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801a272:	ea4f 222c 	mov.w	r2, ip, asr #8
 801a276:	9d03      	ldr	r5, [sp, #12]
 801a278:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801a27c:	4481      	add	r9, r0
 801a27e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a282:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801a286:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801a28a:	fa5f fc8c 	uxtb.w	ip, ip
 801a28e:	436a      	muls	r2, r5
 801a290:	fb0b fb05 	mul.w	fp, fp, r5
 801a294:	fb0c fc05 	mul.w	ip, ip, r5
 801a298:	9208      	str	r2, [sp, #32]
 801a29a:	4581      	cmp	r9, r0
 801a29c:	d02c      	beq.n	801a2f8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801a29e:	8802      	ldrh	r2, [r0, #0]
 801a2a0:	9d04      	ldr	r5, [sp, #16]
 801a2a2:	1216      	asrs	r6, r2, #8
 801a2a4:	9f04      	ldr	r7, [sp, #16]
 801a2a6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801a2aa:	fb16 f605 	smulbb	r6, r6, r5
 801a2ae:	9d08      	ldr	r5, [sp, #32]
 801a2b0:	442e      	add	r6, r5
 801a2b2:	10d5      	asrs	r5, r2, #3
 801a2b4:	00d2      	lsls	r2, r2, #3
 801a2b6:	b2b6      	uxth	r6, r6
 801a2b8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801a2bc:	b2d2      	uxtb	r2, r2
 801a2be:	fb15 f507 	smulbb	r5, r5, r7
 801a2c2:	fb12 f207 	smulbb	r2, r2, r7
 801a2c6:	1c77      	adds	r7, r6, #1
 801a2c8:	445d      	add	r5, fp
 801a2ca:	4462      	add	r2, ip
 801a2cc:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801a2d0:	b2ad      	uxth	r5, r5
 801a2d2:	b292      	uxth	r2, r2
 801a2d4:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801a2d8:	1c57      	adds	r7, r2, #1
 801a2da:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801a2de:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a2e2:	4316      	orrs	r6, r2
 801a2e4:	1c6a      	adds	r2, r5, #1
 801a2e6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801a2ea:	096d      	lsrs	r5, r5, #5
 801a2ec:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801a2f0:	432e      	orrs	r6, r5
 801a2f2:	f820 6b02 	strh.w	r6, [r0], #2
 801a2f6:	e7d0      	b.n	801a29a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801a2f8:	4573      	cmp	r3, lr
 801a2fa:	d38d      	bcc.n	801a218 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801a2fc:	fa1f f188 	uxth.w	r1, r8
 801a300:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a306:	1a64      	subs	r4, r4, r1
 801a308:	881b      	ldrh	r3, [r3, #0]
 801a30a:	b2a4      	uxth	r4, r4
 801a30c:	eba3 0308 	sub.w	r3, r3, r8
 801a310:	2c00      	cmp	r4, #0
 801a312:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a316:	bf18      	it	ne
 801a318:	2100      	movne	r1, #0
 801a31a:	e77d      	b.n	801a218 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801a31c:	4b03      	ldr	r3, [pc, #12]	@ (801a32c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801a31e:	6818      	ldr	r0, [r3, #0]
 801a320:	6803      	ldr	r3, [r0, #0]
 801a322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a324:	4798      	blx	r3
 801a326:	b00f      	add	sp, #60	@ 0x3c
 801a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a32c:	24004278 	.word	0x24004278
 801a330:	24004272 	.word	0x24004272

0801a334 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a338:	b09f      	sub	sp, #124	@ 0x7c
 801a33a:	461d      	mov	r5, r3
 801a33c:	4604      	mov	r4, r0
 801a33e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801a340:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801a344:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801a348:	9209      	str	r2, [sp, #36]	@ 0x24
 801a34a:	2a00      	cmp	r2, #0
 801a34c:	f000 81ed 	beq.w	801a72a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 801a350:	6828      	ldr	r0, [r5, #0]
 801a352:	aa1a      	add	r2, sp, #104	@ 0x68
 801a354:	6869      	ldr	r1, [r5, #4]
 801a356:	c203      	stmia	r2!, {r0, r1}
 801a358:	6818      	ldr	r0, [r3, #0]
 801a35a:	aa1c      	add	r2, sp, #112	@ 0x70
 801a35c:	6859      	ldr	r1, [r3, #4]
 801a35e:	c203      	stmia	r2!, {r0, r1}
 801a360:	a81a      	add	r0, sp, #104	@ 0x68
 801a362:	f7fa f9a7 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a366:	4629      	mov	r1, r5
 801a368:	a81c      	add	r0, sp, #112	@ 0x70
 801a36a:	f7fa f9cb 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a36e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801a372:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 801a376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a37a:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 801a37e:	bfdb      	ittet	le
 801a380:	b29a      	uxthle	r2, r3
 801a382:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a386:	2201      	movgt	r2, #1
 801a388:	fb91 f2f2 	sdivle	r2, r1, r2
 801a38c:	9202      	str	r2, [sp, #8]
 801a38e:	9802      	ldr	r0, [sp, #8]
 801a390:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801a394:	9902      	ldr	r1, [sp, #8]
 801a396:	fb92 f0f0 	sdiv	r0, r2, r0
 801a39a:	b280      	uxth	r0, r0
 801a39c:	4488      	add	r8, r1
 801a39e:	9010      	str	r0, [sp, #64]	@ 0x40
 801a3a0:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3a4:	9802      	ldr	r0, [sp, #8]
 801a3a6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a3a8:	fb05 2510 	mls	r5, r5, r0, r2
 801a3ac:	fb98 f8f1 	sdiv	r8, r8, r1
 801a3b0:	fb15 f503 	smulbb	r5, r5, r3
 801a3b4:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801a3b8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801a3bc:	f108 0801 	add.w	r8, r8, #1
 801a3c0:	440d      	add	r5, r1
 801a3c2:	4419      	add	r1, r3
 801a3c4:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801a3c8:	fa1f f888 	uxth.w	r8, r8
 801a3cc:	441a      	add	r2, r3
 801a3ce:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801a3d2:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801a3d6:	b2ad      	uxth	r5, r5
 801a3d8:	9304      	str	r3, [sp, #16]
 801a3da:	4b94      	ldr	r3, [pc, #592]	@ (801a62c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801a3dc:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801a3e0:	6818      	ldr	r0, [r3, #0]
 801a3e2:	6803      	ldr	r3, [r0, #0]
 801a3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a3e6:	4798      	blx	r3
 801a3e8:	4b91      	ldr	r3, [pc, #580]	@ (801a630 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801a3ea:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801a3ee:	2d00      	cmp	r5, #0
 801a3f0:	881a      	ldrh	r2, [r3, #0]
 801a3f2:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801a3f6:	fb02 f606 	mul.w	r6, r2, r6
 801a3fa:	fb02 7101 	mla	r1, r2, r1, r7
 801a3fe:	9318      	str	r3, [sp, #96]	@ 0x60
 801a400:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a404:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801a408:	f04f 0100 	mov.w	r1, #0
 801a40c:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801a410:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a412:	4b88      	ldr	r3, [pc, #544]	@ (801a634 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 801a414:	920a      	str	r2, [sp, #40]	@ 0x28
 801a416:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a418:	eba3 0304 	sub.w	r3, r3, r4
 801a41c:	910d      	str	r1, [sp, #52]	@ 0x34
 801a41e:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801a422:	9319      	str	r3, [sp, #100]	@ 0x64
 801a424:	f108 0204 	add.w	r2, r8, #4
 801a428:	9211      	str	r2, [sp, #68]	@ 0x44
 801a42a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a42c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801a430:	9215      	str	r2, [sp, #84]	@ 0x54
 801a432:	9a04      	ldr	r2, [sp, #16]
 801a434:	bf18      	it	ne
 801a436:	2200      	movne	r2, #0
 801a438:	b292      	uxth	r2, r2
 801a43a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a43c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a43e:	fa11 f383 	uxtah	r3, r1, r3
 801a442:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801a444:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a448:	3304      	adds	r3, #4
 801a44a:	9306      	str	r3, [sp, #24]
 801a44c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a44e:	4283      	cmp	r3, r0
 801a450:	f240 8166 	bls.w	801a720 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 801a454:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801a458:	f04f 0a01 	mov.w	sl, #1
 801a45c:	9902      	ldr	r1, [sp, #8]
 801a45e:	9e06      	ldr	r6, [sp, #24]
 801a460:	46d3      	mov	fp, sl
 801a462:	4657      	mov	r7, sl
 801a464:	7836      	ldrb	r6, [r6, #0]
 801a466:	fbb5 f3f3 	udiv	r3, r5, r3
 801a46a:	1acb      	subs	r3, r1, r3
 801a46c:	9612      	str	r6, [sp, #72]	@ 0x48
 801a46e:	3601      	adds	r6, #1
 801a470:	b29b      	uxth	r3, r3
 801a472:	9605      	str	r6, [sp, #20]
 801a474:	9316      	str	r3, [sp, #88]	@ 0x58
 801a476:	9b06      	ldr	r3, [sp, #24]
 801a478:	7859      	ldrb	r1, [r3, #1]
 801a47a:	789b      	ldrb	r3, [r3, #2]
 801a47c:	021b      	lsls	r3, r3, #8
 801a47e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a482:	9906      	ldr	r1, [sp, #24]
 801a484:	78c9      	ldrb	r1, [r1, #3]
 801a486:	430b      	orrs	r3, r1
 801a488:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a48a:	4419      	add	r1, r3
 801a48c:	1c4e      	adds	r6, r1, #1
 801a48e:	7849      	ldrb	r1, [r1, #1]
 801a490:	9603      	str	r6, [sp, #12]
 801a492:	0209      	lsls	r1, r1, #8
 801a494:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a496:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801a49a:	5cf3      	ldrb	r3, [r6, r3]
 801a49c:	4319      	orrs	r1, r3
 801a49e:	b28b      	uxth	r3, r1
 801a4a0:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801a4a4:	930c      	str	r3, [sp, #48]	@ 0x30
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	9307      	str	r3, [sp, #28]
 801a4aa:	469c      	mov	ip, r3
 801a4ac:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801a4b0:	930e      	str	r3, [sp, #56]	@ 0x38
 801a4b2:	2d00      	cmp	r5, #0
 801a4b4:	d07e      	beq.n	801a5b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 801a4b6:	42af      	cmp	r7, r5
 801a4b8:	d26e      	bcs.n	801a598 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 801a4ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a4bc:	1bed      	subs	r5, r5, r7
 801a4be:	9201      	str	r2, [sp, #4]
 801a4c0:	4283      	cmp	r3, r0
 801a4c2:	b2ad      	uxth	r5, r5
 801a4c4:	d802      	bhi.n	801a4cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 801a4c6:	e073      	b.n	801a5b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d15f      	bne.n	801a58c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 801a4cc:	9b03      	ldr	r3, [sp, #12]
 801a4ce:	f1cb 0207 	rsb	r2, fp, #7
 801a4d2:	785b      	ldrb	r3, [r3, #1]
 801a4d4:	4093      	lsls	r3, r2
 801a4d6:	005b      	lsls	r3, r3, #1
 801a4d8:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801a4dc:	9b03      	ldr	r3, [sp, #12]
 801a4de:	781b      	ldrb	r3, [r3, #0]
 801a4e0:	fa43 f30b 	asr.w	r3, r3, fp
 801a4e4:	b2db      	uxtb	r3, r3
 801a4e6:	4313      	orrs	r3, r2
 801a4e8:	f10b 0201 	add.w	r2, fp, #1
 801a4ec:	fa5f fb82 	uxtb.w	fp, r2
 801a4f0:	9a03      	ldr	r2, [sp, #12]
 801a4f2:	b29f      	uxth	r7, r3
 801a4f4:	f1bb 0f08 	cmp.w	fp, #8
 801a4f8:	bf13      	iteet	ne
 801a4fa:	3201      	addne	r2, #1
 801a4fc:	3202      	addeq	r2, #2
 801a4fe:	f04f 0b00 	moveq.w	fp, #0
 801a502:	9203      	strne	r2, [sp, #12]
 801a504:	bf08      	it	eq
 801a506:	9203      	streq	r2, [sp, #12]
 801a508:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a50a:	42ba      	cmp	r2, r7
 801a50c:	d309      	bcc.n	801a522 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 801a50e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801a512:	2301      	movs	r3, #1
 801a514:	9a05      	ldr	r2, [sp, #20]
 801a516:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801a51a:	d30e      	bcc.n	801a53a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801a51c:	469a      	mov	sl, r3
 801a51e:	2600      	movs	r6, #0
 801a520:	e035      	b.n	801a58e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 801a522:	9b05      	ldr	r3, [sp, #20]
 801a524:	429f      	cmp	r7, r3
 801a526:	d318      	bcc.n	801a55a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 801a528:	eb04 030a 	add.w	r3, r4, sl
 801a52c:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801a530:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801a534:	f10a 0301 	add.w	r3, sl, #1
 801a538:	b29b      	uxth	r3, r3
 801a53a:	9a05      	ldr	r2, [sp, #20]
 801a53c:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801a540:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a544:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a546:	7116      	strb	r6, [r2, #4]
 801a548:	f10a 0601 	add.w	r6, sl, #1
 801a54c:	80d1      	strh	r1, [r2, #6]
 801a54e:	7156      	strb	r6, [r2, #5]
 801a550:	9a05      	ldr	r2, [sp, #20]
 801a552:	3201      	adds	r2, #1
 801a554:	b292      	uxth	r2, r2
 801a556:	9205      	str	r2, [sp, #20]
 801a558:	e7e0      	b.n	801a51c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 801a55a:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801a55e:	463a      	mov	r2, r7
 801a560:	795b      	ldrb	r3, [r3, #5]
 801a562:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801a566:	4426      	add	r6, r4
 801a568:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801a56a:	eb01 0c06 	add.w	ip, r1, r6
 801a56e:	f1bc 0f00 	cmp.w	ip, #0
 801a572:	dd07      	ble.n	801a584 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 801a574:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a578:	f892 c004 	ldrb.w	ip, [r2, #4]
 801a57c:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801a580:	88d2      	ldrh	r2, [r2, #6]
 801a582:	e7f1      	b.n	801a568 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 801a584:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801a588:	b29b      	uxth	r3, r3
 801a58a:	e7c3      	b.n	801a514 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801a58c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a58e:	970c      	str	r7, [sp, #48]	@ 0x30
 801a590:	46b4      	mov	ip, r6
 801a592:	9a01      	ldr	r2, [sp, #4]
 801a594:	461f      	mov	r7, r3
 801a596:	e78c      	b.n	801a4b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 801a598:	1b7b      	subs	r3, r7, r5
 801a59a:	eb0c 0605 	add.w	r6, ip, r5
 801a59e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a5a2:	b29b      	uxth	r3, r3
 801a5a4:	b2b6      	uxth	r6, r6
 801a5a6:	9201      	str	r2, [sp, #4]
 801a5a8:	2500      	movs	r5, #0
 801a5aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a5ac:	4282      	cmp	r2, r0
 801a5ae:	d88b      	bhi.n	801a4c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801a5b0:	9a01      	ldr	r2, [sp, #4]
 801a5b2:	e74b      	b.n	801a44c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801a5b4:	4297      	cmp	r7, r2
 801a5b6:	d332      	bcc.n	801a61e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 801a5b8:	1abb      	subs	r3, r7, r2
 801a5ba:	9208      	str	r2, [sp, #32]
 801a5bc:	9501      	str	r5, [sp, #4]
 801a5be:	b29b      	uxth	r3, r3
 801a5c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a5c2:	29ff      	cmp	r1, #255	@ 0xff
 801a5c4:	9908      	ldr	r1, [sp, #32]
 801a5c6:	eb0c 0601 	add.w	r6, ip, r1
 801a5ca:	d135      	bne.n	801a638 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801a5cc:	f1a0 0e02 	sub.w	lr, r0, #2
 801a5d0:	b2b6      	uxth	r6, r6
 801a5d2:	45b4      	cmp	ip, r6
 801a5d4:	f040 808c 	bne.w	801a6f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 801a5d8:	9908      	ldr	r1, [sp, #32]
 801a5da:	4297      	cmp	r7, r2
 801a5dc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a5e0:	d3e2      	bcc.n	801a5a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 801a5e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a5e4:	9904      	ldr	r1, [sp, #16]
 801a5e6:	8812      	ldrh	r2, [r2, #0]
 801a5e8:	1a52      	subs	r2, r2, r1
 801a5ea:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801a5ec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a5f0:	9a07      	ldr	r2, [sp, #28]
 801a5f2:	3201      	adds	r2, #1
 801a5f4:	428a      	cmp	r2, r1
 801a5f6:	9207      	str	r2, [sp, #28]
 801a5f8:	f040 8087 	bne.w	801a70a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801a5fc:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801a600:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801a604:	9b04      	ldr	r3, [sp, #16]
 801a606:	1bed      	subs	r5, r5, r7
 801a608:	b2ad      	uxth	r5, r5
 801a60a:	2d00      	cmp	r5, #0
 801a60c:	bf08      	it	eq
 801a60e:	461a      	moveq	r2, r3
 801a610:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a612:	bf18      	it	ne
 801a614:	2200      	movne	r2, #0
 801a616:	3301      	adds	r3, #1
 801a618:	b292      	uxth	r2, r2
 801a61a:	930d      	str	r3, [sp, #52]	@ 0x34
 801a61c:	e70d      	b.n	801a43a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801a61e:	1bd1      	subs	r1, r2, r7
 801a620:	9708      	str	r7, [sp, #32]
 801a622:	b28b      	uxth	r3, r1
 801a624:	9301      	str	r3, [sp, #4]
 801a626:	462b      	mov	r3, r5
 801a628:	e7ca      	b.n	801a5c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801a62a:	bf00      	nop
 801a62c:	24004278 	.word	0x24004278
 801a630:	24004272 	.word	0x24004272
 801a634:	fffff7fb 	.word	0xfffff7fb
 801a638:	b2b6      	uxth	r6, r6
 801a63a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a63c:	45b4      	cmp	ip, r6
 801a63e:	d0cb      	beq.n	801a5d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 801a640:	f10c 0101 	add.w	r1, ip, #1
 801a644:	44a4      	add	ip, r4
 801a646:	9117      	str	r1, [sp, #92]	@ 0x5c
 801a648:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801a64c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a64e:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801a652:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a654:	ea4f 2825 	mov.w	r8, r5, asr #8
 801a658:	f8b1 c000 	ldrh.w	ip, [r1]
 801a65c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a65e:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801a662:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801a666:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801a66a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801a66e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a672:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801a676:	fb1e fe01 	smulbb	lr, lr, r1
 801a67a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a67c:	fa5f fc8c 	uxtb.w	ip, ip
 801a680:	fb08 e801 	mla	r8, r8, r1, lr
 801a684:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801a688:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a68a:	00ed      	lsls	r5, r5, #3
 801a68c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801a690:	fa1f f888 	uxth.w	r8, r8
 801a694:	fb19 f901 	smulbb	r9, r9, r1
 801a698:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a69a:	b2ed      	uxtb	r5, r5
 801a69c:	fb0e 9e01 	mla	lr, lr, r1, r9
 801a6a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a6a2:	fb1c fc01 	smulbb	ip, ip, r1
 801a6a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a6a8:	fa1f fe8e 	uxth.w	lr, lr
 801a6ac:	fb05 c501 	mla	r5, r5, r1, ip
 801a6b0:	f108 0c01 	add.w	ip, r8, #1
 801a6b4:	f10e 0901 	add.w	r9, lr, #1
 801a6b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a6ba:	b2ad      	uxth	r5, r5
 801a6bc:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801a6c0:	f105 0c01 	add.w	ip, r5, #1
 801a6c4:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801a6c8:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801a6cc:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801a6d0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a6d4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a6d8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801a6dc:	ea4c 0808 	orr.w	r8, ip, r8
 801a6e0:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 801a6e4:	ea48 0809 	orr.w	r8, r8, r9
 801a6e8:	f821 8b02 	strh.w	r8, [r1], #2
 801a6ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a6ee:	e7a5      	b.n	801a63c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 801a6f0:	f10c 0801 	add.w	r8, ip, #1
 801a6f4:	44a4      	add	ip, r4
 801a6f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a6f8:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801a6fc:	fa1f fc88 	uxth.w	ip, r8
 801a700:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801a704:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801a708:	e763      	b.n	801a5d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801a70a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a70e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801a712:	1aad      	subs	r5, r5, r2
 801a714:	b2ad      	uxth	r5, r5
 801a716:	2d00      	cmp	r5, #0
 801a718:	bf18      	it	ne
 801a71a:	2200      	movne	r2, #0
 801a71c:	9201      	str	r2, [sp, #4]
 801a71e:	e744      	b.n	801a5aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 801a720:	4b03      	ldr	r3, [pc, #12]	@ (801a730 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 801a722:	6818      	ldr	r0, [r3, #0]
 801a724:	6803      	ldr	r3, [r0, #0]
 801a726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a728:	4798      	blx	r3
 801a72a:	b01f      	add	sp, #124	@ 0x7c
 801a72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a730:	24004278 	.word	0x24004278

0801a734 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a738:	b08f      	sub	sp, #60	@ 0x3c
 801a73a:	461c      	mov	r4, r3
 801a73c:	460f      	mov	r7, r1
 801a73e:	9203      	str	r2, [sp, #12]
 801a740:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a744:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a746:	9202      	str	r2, [sp, #8]
 801a748:	2a00      	cmp	r2, #0
 801a74a:	f000 8128 	beq.w	801a99e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a74e:	6820      	ldr	r0, [r4, #0]
 801a750:	aa0a      	add	r2, sp, #40	@ 0x28
 801a752:	6861      	ldr	r1, [r4, #4]
 801a754:	c203      	stmia	r2!, {r0, r1}
 801a756:	6818      	ldr	r0, [r3, #0]
 801a758:	aa0c      	add	r2, sp, #48	@ 0x30
 801a75a:	6859      	ldr	r1, [r3, #4]
 801a75c:	c203      	stmia	r2!, {r0, r1}
 801a75e:	a80a      	add	r0, sp, #40	@ 0x28
 801a760:	f7f9 ffa8 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a764:	4621      	mov	r1, r4
 801a766:	a80c      	add	r0, sp, #48	@ 0x30
 801a768:	f7f9 ffcc 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a76c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801a770:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a774:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a778:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a77c:	bfdb      	ittet	le
 801a77e:	b2b3      	uxthle	r3, r6
 801a780:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a784:	2301      	movgt	r3, #1
 801a786:	fb92 f3f3 	sdivle	r3, r2, r3
 801a78a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a78e:	441d      	add	r5, r3
 801a790:	fb92 f1f3 	sdiv	r1, r2, r3
 801a794:	fa1f fc81 	uxth.w	ip, r1
 801a798:	3d01      	subs	r5, #1
 801a79a:	fb0c 2413 	mls	r4, ip, r3, r2
 801a79e:	4661      	mov	r1, ip
 801a7a0:	fb14 f406 	smulbb	r4, r4, r6
 801a7a4:	4404      	add	r4, r0
 801a7a6:	fb95 f5f3 	sdiv	r5, r5, r3
 801a7aa:	b2a4      	uxth	r4, r4
 801a7ac:	b121      	cbz	r1, 801a7b8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801a7ae:	9b03      	ldr	r3, [sp, #12]
 801a7b0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a7b4:	ba1b      	rev	r3, r3
 801a7b6:	441f      	add	r7, r3
 801a7b8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a7bc:	b2ad      	uxth	r5, r5
 801a7be:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801a7c2:	4418      	add	r0, r3
 801a7c4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a7c8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801a7cc:	00ad      	lsls	r5, r5, #2
 801a7ce:	441a      	add	r2, r3
 801a7d0:	4b74      	ldr	r3, [pc, #464]	@ (801a9a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a7d2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a7d6:	6818      	ldr	r0, [r3, #0]
 801a7d8:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a7dc:	6803      	ldr	r3, [r0, #0]
 801a7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7e0:	4798      	blx	r3
 801a7e2:	4a71      	ldr	r2, [pc, #452]	@ (801a9a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801a7e4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a7e8:	2c00      	cmp	r4, #0
 801a7ea:	8813      	ldrh	r3, [r2, #0]
 801a7ec:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a7f0:	bf0c      	ite	eq
 801a7f2:	46c8      	moveq	r8, r9
 801a7f4:	f04f 0800 	movne.w	r8, #0
 801a7f8:	9209      	str	r2, [sp, #36]	@ 0x24
 801a7fa:	fb03 c101 	mla	r1, r3, r1, ip
 801a7fe:	4373      	muls	r3, r6
 801a800:	fa1f f888 	uxth.w	r8, r8
 801a804:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a808:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a80c:	9304      	str	r3, [sp, #16]
 801a80e:	1d2b      	adds	r3, r5, #4
 801a810:	9305      	str	r3, [sp, #20]
 801a812:	2300      	movs	r3, #0
 801a814:	9301      	str	r3, [sp, #4]
 801a816:	9a04      	ldr	r2, [sp, #16]
 801a818:	4282      	cmp	r2, r0
 801a81a:	f240 80bb 	bls.w	801a994 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801a81e:	b95b      	cbnz	r3, 801a838 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 801a820:	783a      	ldrb	r2, [r7, #0]
 801a822:	0993      	lsrs	r3, r2, #6
 801a824:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a828:	9201      	str	r2, [sp, #4]
 801a82a:	1e5a      	subs	r2, r3, #1
 801a82c:	2a02      	cmp	r2, #2
 801a82e:	bf8d      	iteet	hi
 801a830:	787b      	ldrbhi	r3, [r7, #1]
 801a832:	3701      	addls	r7, #1
 801a834:	b29b      	uxthls	r3, r3
 801a836:	3702      	addhi	r7, #2
 801a838:	b184      	cbz	r4, 801a85c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 801a83a:	429c      	cmp	r4, r3
 801a83c:	bf91      	iteee	ls
 801a83e:	1b1c      	subls	r4, r3, r4
 801a840:	1ae4      	subhi	r4, r4, r3
 801a842:	46c4      	movhi	ip, r8
 801a844:	f04f 0a00 	movhi.w	sl, #0
 801a848:	bf9b      	ittet	ls
 801a84a:	fa1f fa84 	uxthls.w	sl, r4
 801a84e:	2400      	movls	r4, #0
 801a850:	b2a4      	uxthhi	r4, r4
 801a852:	fa1f fc89 	uxthls.w	ip, r9
 801a856:	4653      	mov	r3, sl
 801a858:	46e0      	mov	r8, ip
 801a85a:	e7dc      	b.n	801a816 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 801a85c:	2204      	movs	r2, #4
 801a85e:	9905      	ldr	r1, [sp, #20]
 801a860:	4543      	cmp	r3, r8
 801a862:	4615      	mov	r5, r2
 801a864:	9a01      	ldr	r2, [sp, #4]
 801a866:	bf24      	itt	cs
 801a868:	eba3 0a08 	subcs.w	sl, r3, r8
 801a86c:	46c6      	movcs	lr, r8
 801a86e:	fb15 1202 	smlabb	r2, r5, r2, r1
 801a872:	9903      	ldr	r1, [sp, #12]
 801a874:	bf3c      	itt	cc
 801a876:	eba8 0c03 	subcc.w	ip, r8, r3
 801a87a:	469e      	movcc	lr, r3
 801a87c:	588a      	ldr	r2, [r1, r2]
 801a87e:	bf26      	itte	cs
 801a880:	fa1f fa8a 	uxthcs.w	sl, sl
 801a884:	46a4      	movcs	ip, r4
 801a886:	fa1f fc8c 	uxthcc.w	ip, ip
 801a88a:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801a88e:	bf38      	it	cc
 801a890:	46a2      	movcc	sl, r4
 801a892:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801a896:	2900      	cmp	r1, #0
 801a898:	d066      	beq.n	801a968 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801a89a:	29ff      	cmp	r1, #255	@ 0xff
 801a89c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801a8a0:	d114      	bne.n	801a8cc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801a8a2:	9d02      	ldr	r5, [sp, #8]
 801a8a4:	2dff      	cmp	r5, #255	@ 0xff
 801a8a6:	d111      	bne.n	801a8cc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801a8a8:	0951      	lsrs	r1, r2, #5
 801a8aa:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801a8ae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a8b2:	4486      	add	lr, r0
 801a8b4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801a8b8:	f026 0607 	bic.w	r6, r6, #7
 801a8bc:	430e      	orrs	r6, r1
 801a8be:	4316      	orrs	r6, r2
 801a8c0:	b2b6      	uxth	r6, r6
 801a8c2:	4586      	cmp	lr, r0
 801a8c4:	d051      	beq.n	801a96a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801a8c6:	f820 6b02 	strh.w	r6, [r0], #2
 801a8ca:	e7fa      	b.n	801a8c2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801a8cc:	9d02      	ldr	r5, [sp, #8]
 801a8ce:	b2f6      	uxtb	r6, r6
 801a8d0:	4486      	add	lr, r0
 801a8d2:	4369      	muls	r1, r5
 801a8d4:	1c4d      	adds	r5, r1, #1
 801a8d6:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801a8da:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801a8de:	b2d2      	uxtb	r2, r2
 801a8e0:	122d      	asrs	r5, r5, #8
 801a8e2:	ea6f 0b05 	mvn.w	fp, r5
 801a8e6:	b2ad      	uxth	r5, r5
 801a8e8:	fb11 f105 	smulbb	r1, r1, r5
 801a8ec:	fa5f fb8b 	uxtb.w	fp, fp
 801a8f0:	fb16 f605 	smulbb	r6, r6, r5
 801a8f4:	fb12 f205 	smulbb	r2, r2, r5
 801a8f8:	b289      	uxth	r1, r1
 801a8fa:	b2b6      	uxth	r6, r6
 801a8fc:	b292      	uxth	r2, r2
 801a8fe:	9106      	str	r1, [sp, #24]
 801a900:	9607      	str	r6, [sp, #28]
 801a902:	9208      	str	r2, [sp, #32]
 801a904:	4586      	cmp	lr, r0
 801a906:	d030      	beq.n	801a96a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801a908:	8802      	ldrh	r2, [r0, #0]
 801a90a:	9906      	ldr	r1, [sp, #24]
 801a90c:	1216      	asrs	r6, r2, #8
 801a90e:	10d5      	asrs	r5, r2, #3
 801a910:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801a914:	00d2      	lsls	r2, r2, #3
 801a916:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801a91a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a91e:	b2d2      	uxtb	r2, r2
 801a920:	fb06 160b 	mla	r6, r6, fp, r1
 801a924:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a928:	9907      	ldr	r1, [sp, #28]
 801a92a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a92e:	b2b6      	uxth	r6, r6
 801a930:	fb05 150b 	mla	r5, r5, fp, r1
 801a934:	9908      	ldr	r1, [sp, #32]
 801a936:	fb02 120b 	mla	r2, r2, fp, r1
 801a93a:	1c71      	adds	r1, r6, #1
 801a93c:	b2ad      	uxth	r5, r5
 801a93e:	b292      	uxth	r2, r2
 801a940:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801a944:	1c51      	adds	r1, r2, #1
 801a946:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801a94a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a94e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a952:	4316      	orrs	r6, r2
 801a954:	1c6a      	adds	r2, r5, #1
 801a956:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801a95a:	096d      	lsrs	r5, r5, #5
 801a95c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801a960:	432e      	orrs	r6, r5
 801a962:	f820 6b02 	strh.w	r6, [r0], #2
 801a966:	e7cd      	b.n	801a904 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801a968:	4470      	add	r0, lr
 801a96a:	4543      	cmp	r3, r8
 801a96c:	f4ff af73 	bcc.w	801a856 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801a970:	fa1f fc89 	uxth.w	ip, r9
 801a974:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a97a:	eba4 040c 	sub.w	r4, r4, ip
 801a97e:	881b      	ldrh	r3, [r3, #0]
 801a980:	b2a4      	uxth	r4, r4
 801a982:	eba3 0309 	sub.w	r3, r3, r9
 801a986:	2c00      	cmp	r4, #0
 801a988:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a98c:	bf18      	it	ne
 801a98e:	f04f 0c00 	movne.w	ip, #0
 801a992:	e760      	b.n	801a856 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801a994:	4b03      	ldr	r3, [pc, #12]	@ (801a9a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a996:	6818      	ldr	r0, [r3, #0]
 801a998:	6803      	ldr	r3, [r0, #0]
 801a99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a99c:	4798      	blx	r3
 801a99e:	b00f      	add	sp, #60	@ 0x3c
 801a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9a4:	24004278 	.word	0x24004278
 801a9a8:	24004272 	.word	0x24004272

0801a9ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b0:	b093      	sub	sp, #76	@ 0x4c
 801a9b2:	461c      	mov	r4, r3
 801a9b4:	9205      	str	r2, [sp, #20]
 801a9b6:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 801a9ba:	9101      	str	r1, [sp, #4]
 801a9bc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a9be:	9202      	str	r2, [sp, #8]
 801a9c0:	2a00      	cmp	r2, #0
 801a9c2:	f000 812e 	beq.w	801ac22 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801a9c6:	6820      	ldr	r0, [r4, #0]
 801a9c8:	aa0e      	add	r2, sp, #56	@ 0x38
 801a9ca:	6861      	ldr	r1, [r4, #4]
 801a9cc:	c203      	stmia	r2!, {r0, r1}
 801a9ce:	6818      	ldr	r0, [r3, #0]
 801a9d0:	aa10      	add	r2, sp, #64	@ 0x40
 801a9d2:	6859      	ldr	r1, [r3, #4]
 801a9d4:	c203      	stmia	r2!, {r0, r1}
 801a9d6:	a80e      	add	r0, sp, #56	@ 0x38
 801a9d8:	f7f9 fe6c 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a9dc:	4621      	mov	r1, r4
 801a9de:	a810      	add	r0, sp, #64	@ 0x40
 801a9e0:	f7f9 fe90 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a9e4:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801a9e8:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801a9ec:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a9f0:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801a9f4:	bfdb      	ittet	le
 801a9f6:	b2b3      	uxthle	r3, r6
 801a9f8:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a9fc:	2301      	movgt	r3, #1
 801a9fe:	fb92 f3f3 	sdivle	r3, r2, r3
 801aa02:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801aa06:	441d      	add	r5, r3
 801aa08:	fb92 f1f3 	sdiv	r1, r2, r3
 801aa0c:	fa1f fc81 	uxth.w	ip, r1
 801aa10:	3d01      	subs	r5, #1
 801aa12:	fb0c 2413 	mls	r4, ip, r3, r2
 801aa16:	4661      	mov	r1, ip
 801aa18:	fb14 f406 	smulbb	r4, r4, r6
 801aa1c:	4404      	add	r4, r0
 801aa1e:	fb95 f5f3 	sdiv	r5, r5, r3
 801aa22:	b2a4      	uxth	r4, r4
 801aa24:	b131      	cbz	r1, 801aa34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801aa26:	9b05      	ldr	r3, [sp, #20]
 801aa28:	9901      	ldr	r1, [sp, #4]
 801aa2a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801aa2e:	ba1b      	rev	r3, r3
 801aa30:	4419      	add	r1, r3
 801aa32:	9101      	str	r1, [sp, #4]
 801aa34:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801aa38:	b2ad      	uxth	r5, r5
 801aa3a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801aa3e:	4418      	add	r0, r3
 801aa40:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801aa44:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 801aa48:	00ad      	lsls	r5, r5, #2
 801aa4a:	441a      	add	r2, r3
 801aa4c:	4b76      	ldr	r3, [pc, #472]	@ (801ac28 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801aa4e:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801aa52:	6818      	ldr	r0, [r3, #0]
 801aa54:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801aa58:	6803      	ldr	r3, [r0, #0]
 801aa5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aa5c:	4798      	blx	r3
 801aa5e:	4973      	ldr	r1, [pc, #460]	@ (801ac2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801aa60:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 801aa64:	2c00      	cmp	r4, #0
 801aa66:	880b      	ldrh	r3, [r1, #0]
 801aa68:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801aa6c:	910d      	str	r1, [sp, #52]	@ 0x34
 801aa6e:	fb03 c202 	mla	r2, r3, r2, ip
 801aa72:	bf08      	it	eq
 801aa74:	46dc      	moveq	ip, fp
 801aa76:	fb03 f306 	mul.w	r3, r3, r6
 801aa7a:	bf18      	it	ne
 801aa7c:	f04f 0c00 	movne.w	ip, #0
 801aa80:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801aa84:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801aa88:	fa1f fc8c 	uxth.w	ip, ip
 801aa8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801aa90:	9106      	str	r1, [sp, #24]
 801aa92:	9308      	str	r3, [sp, #32]
 801aa94:	1d2b      	adds	r3, r5, #4
 801aa96:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa98:	9b02      	ldr	r3, [sp, #8]
 801aa9a:	43da      	mvns	r2, r3
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	b2d2      	uxtb	r2, r2
 801aaa0:	9303      	str	r3, [sp, #12]
 801aaa2:	9207      	str	r2, [sp, #28]
 801aaa4:	9a08      	ldr	r2, [sp, #32]
 801aaa6:	4282      	cmp	r2, r0
 801aaa8:	f240 80b6 	bls.w	801ac18 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 801aaac:	b963      	cbnz	r3, 801aac8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801aaae:	9b01      	ldr	r3, [sp, #4]
 801aab0:	781a      	ldrb	r2, [r3, #0]
 801aab2:	0993      	lsrs	r3, r2, #6
 801aab4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801aab8:	9203      	str	r2, [sp, #12]
 801aaba:	1e5a      	subs	r2, r3, #1
 801aabc:	2a02      	cmp	r2, #2
 801aabe:	d815      	bhi.n	801aaec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 801aac0:	9a01      	ldr	r2, [sp, #4]
 801aac2:	b29b      	uxth	r3, r3
 801aac4:	3201      	adds	r2, #1
 801aac6:	9201      	str	r2, [sp, #4]
 801aac8:	b1b4      	cbz	r4, 801aaf8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 801aaca:	429c      	cmp	r4, r3
 801aacc:	bf91      	iteee	ls
 801aace:	1b1c      	subls	r4, r3, r4
 801aad0:	1ae4      	subhi	r4, r4, r3
 801aad2:	4666      	movhi	r6, ip
 801aad4:	f04f 0800 	movhi.w	r8, #0
 801aad8:	bf9b      	ittet	ls
 801aada:	fa1f f884 	uxthls.w	r8, r4
 801aade:	2400      	movls	r4, #0
 801aae0:	b2a4      	uxthhi	r4, r4
 801aae2:	fa1f f68b 	uxthls.w	r6, fp
 801aae6:	4643      	mov	r3, r8
 801aae8:	46b4      	mov	ip, r6
 801aaea:	e7db      	b.n	801aaa4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 801aaec:	9a01      	ldr	r2, [sp, #4]
 801aaee:	9b01      	ldr	r3, [sp, #4]
 801aaf0:	3202      	adds	r2, #2
 801aaf2:	785b      	ldrb	r3, [r3, #1]
 801aaf4:	9201      	str	r2, [sp, #4]
 801aaf6:	e7e7      	b.n	801aac8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801aaf8:	2203      	movs	r2, #3
 801aafa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aafc:	4563      	cmp	r3, ip
 801aafe:	4615      	mov	r5, r2
 801ab00:	9a03      	ldr	r2, [sp, #12]
 801ab02:	bf2c      	ite	cs
 801ab04:	eba3 080c 	subcs.w	r8, r3, ip
 801ab08:	ebac 0603 	subcc.w	r6, ip, r3
 801ab0c:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ab10:	9905      	ldr	r1, [sp, #20]
 801ab12:	bf24      	itt	cs
 801ab14:	fa1f f888 	uxthcs.w	r8, r8
 801ab18:	46e1      	movcs	r9, ip
 801ab1a:	eb01 0502 	add.w	r5, r1, r2
 801ab1e:	9902      	ldr	r1, [sp, #8]
 801ab20:	bf2f      	iteee	cs
 801ab22:	4626      	movcs	r6, r4
 801ab24:	b2b6      	uxthcc	r6, r6
 801ab26:	4699      	movcc	r9, r3
 801ab28:	46a0      	movcc	r8, r4
 801ab2a:	29ff      	cmp	r1, #255	@ 0xff
 801ab2c:	d04a      	beq.n	801abc4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801ab2e:	9f06      	ldr	r7, [sp, #24]
 801ab30:	46ca      	mov	sl, r9
 801ab32:	78a9      	ldrb	r1, [r5, #2]
 801ab34:	9004      	str	r0, [sp, #16]
 801ab36:	4379      	muls	r1, r7
 801ab38:	910a      	str	r1, [sp, #40]	@ 0x28
 801ab3a:	7869      	ldrb	r1, [r5, #1]
 801ab3c:	4379      	muls	r1, r7
 801ab3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ab40:	9905      	ldr	r1, [sp, #20]
 801ab42:	5c8a      	ldrb	r2, [r1, r2]
 801ab44:	437a      	muls	r2, r7
 801ab46:	920c      	str	r2, [sp, #48]	@ 0x30
 801ab48:	f1ba 0f00 	cmp.w	sl, #0
 801ab4c:	d03d      	beq.n	801abca <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801ab4e:	9a04      	ldr	r2, [sp, #16]
 801ab50:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ab54:	9f07      	ldr	r7, [sp, #28]
 801ab56:	8812      	ldrh	r2, [r2, #0]
 801ab58:	fa1f fa8a 	uxth.w	sl, sl
 801ab5c:	46be      	mov	lr, r7
 801ab5e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ab60:	1215      	asrs	r5, r2, #8
 801ab62:	10d1      	asrs	r1, r2, #3
 801ab64:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801ab68:	00d2      	lsls	r2, r2, #3
 801ab6a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801ab6e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ab72:	b2d2      	uxtb	r2, r2
 801ab74:	fb05 750e 	mla	r5, r5, lr, r7
 801ab78:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801ab7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ab7e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ab82:	b2ad      	uxth	r5, r5
 801ab84:	fb01 710e 	mla	r1, r1, lr, r7
 801ab88:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ab8a:	fb02 720e 	mla	r2, r2, lr, r7
 801ab8e:	f105 0e01 	add.w	lr, r5, #1
 801ab92:	b289      	uxth	r1, r1
 801ab94:	b292      	uxth	r2, r2
 801ab96:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801ab9a:	f102 0e01 	add.w	lr, r2, #1
 801ab9e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801aba2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801aba6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801abaa:	4315      	orrs	r5, r2
 801abac:	1c4a      	adds	r2, r1, #1
 801abae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801abb2:	9a04      	ldr	r2, [sp, #16]
 801abb4:	0949      	lsrs	r1, r1, #5
 801abb6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801abba:	430d      	orrs	r5, r1
 801abbc:	f822 5b02 	strh.w	r5, [r2], #2
 801abc0:	9204      	str	r2, [sp, #16]
 801abc2:	e7c1      	b.n	801ab48 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801abc4:	4649      	mov	r1, r9
 801abc6:	4686      	mov	lr, r0
 801abc8:	b999      	cbnz	r1, 801abf2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 801abca:	4563      	cmp	r3, ip
 801abcc:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801abd0:	d389      	bcc.n	801aae6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801abd2:	fa1f f68b 	uxth.w	r6, fp
 801abd6:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 801abda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801abdc:	1ba4      	subs	r4, r4, r6
 801abde:	881b      	ldrh	r3, [r3, #0]
 801abe0:	b2a4      	uxth	r4, r4
 801abe2:	eba3 030b 	sub.w	r3, r3, fp
 801abe6:	2c00      	cmp	r4, #0
 801abe8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801abec:	bf18      	it	ne
 801abee:	2600      	movne	r6, #0
 801abf0:	e779      	b.n	801aae6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801abf2:	78aa      	ldrb	r2, [r5, #2]
 801abf4:	3901      	subs	r1, #1
 801abf6:	4f0e      	ldr	r7, [pc, #56]	@ (801ac30 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 801abf8:	b289      	uxth	r1, r1
 801abfa:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801abfe:	786a      	ldrb	r2, [r5, #1]
 801ac00:	00d2      	lsls	r2, r2, #3
 801ac02:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ac06:	ea4a 0202 	orr.w	r2, sl, r2
 801ac0a:	f895 a000 	ldrb.w	sl, [r5]
 801ac0e:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801ac12:	f82e 2b02 	strh.w	r2, [lr], #2
 801ac16:	e7d7      	b.n	801abc8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801ac18:	4b03      	ldr	r3, [pc, #12]	@ (801ac28 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801ac1a:	6818      	ldr	r0, [r3, #0]
 801ac1c:	6803      	ldr	r3, [r0, #0]
 801ac1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac20:	4798      	blx	r3
 801ac22:	b013      	add	sp, #76	@ 0x4c
 801ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac28:	24004278 	.word	0x24004278
 801ac2c:	24004272 	.word	0x24004272
 801ac30:	fffff800 	.word	0xfffff800

0801ac34 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac38:	b09d      	sub	sp, #116	@ 0x74
 801ac3a:	461c      	mov	r4, r3
 801ac3c:	4683      	mov	fp, r0
 801ac3e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ac40:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 801ac44:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801ac48:	920e      	str	r2, [sp, #56]	@ 0x38
 801ac4a:	2a00      	cmp	r2, #0
 801ac4c:	f000 81e4 	beq.w	801b018 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 801ac50:	6820      	ldr	r0, [r4, #0]
 801ac52:	aa18      	add	r2, sp, #96	@ 0x60
 801ac54:	6861      	ldr	r1, [r4, #4]
 801ac56:	c203      	stmia	r2!, {r0, r1}
 801ac58:	6818      	ldr	r0, [r3, #0]
 801ac5a:	aa1a      	add	r2, sp, #104	@ 0x68
 801ac5c:	6859      	ldr	r1, [r3, #4]
 801ac5e:	c203      	stmia	r2!, {r0, r1}
 801ac60:	a818      	add	r0, sp, #96	@ 0x60
 801ac62:	f7f9 fd27 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac66:	4621      	mov	r1, r4
 801ac68:	a81a      	add	r0, sp, #104	@ 0x68
 801ac6a:	f7f9 fd4b 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ac6e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801ac72:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 801ac76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ac7a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801ac7e:	bfdb      	ittet	le
 801ac80:	b29a      	uxthle	r2, r3
 801ac82:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ac86:	2201      	movgt	r2, #1
 801ac88:	fb91 f2f2 	sdivle	r2, r1, r2
 801ac8c:	9202      	str	r2, [sp, #8]
 801ac8e:	9802      	ldr	r0, [sp, #8]
 801ac90:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801ac94:	9902      	ldr	r1, [sp, #8]
 801ac96:	fb92 f0f0 	sdiv	r0, r2, r0
 801ac9a:	b280      	uxth	r0, r0
 801ac9c:	440c      	add	r4, r1
 801ac9e:	900f      	str	r0, [sp, #60]	@ 0x3c
 801aca0:	3c01      	subs	r4, #1
 801aca2:	9802      	ldr	r0, [sp, #8]
 801aca4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801aca6:	fb05 2510 	mls	r5, r5, r0, r2
 801acaa:	fb94 f4f1 	sdiv	r4, r4, r1
 801acae:	fb15 f503 	smulbb	r5, r5, r3
 801acb2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801acb6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801acba:	3401      	adds	r4, #1
 801acbc:	440d      	add	r5, r1
 801acbe:	4419      	add	r1, r3
 801acc0:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801acc4:	b2a4      	uxth	r4, r4
 801acc6:	441a      	add	r2, r3
 801acc8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801accc:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801acd0:	00a4      	lsls	r4, r4, #2
 801acd2:	9306      	str	r3, [sp, #24]
 801acd4:	b2ad      	uxth	r5, r5
 801acd6:	4bb3      	ldr	r3, [pc, #716]	@ (801afa4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801acd8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801acdc:	6818      	ldr	r0, [r3, #0]
 801acde:	6803      	ldr	r3, [r0, #0]
 801ace0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ace2:	4798      	blx	r3
 801ace4:	4bb0      	ldr	r3, [pc, #704]	@ (801afa8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801ace6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801acea:	2d00      	cmp	r5, #0
 801acec:	881a      	ldrh	r2, [r3, #0]
 801acee:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 801acf2:	fb02 f606 	mul.w	r6, r2, r6
 801acf6:	fb02 7101 	mla	r1, r2, r1, r7
 801acfa:	9316      	str	r3, [sp, #88]	@ 0x58
 801acfc:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801ad00:	4baa      	ldr	r3, [pc, #680]	@ (801afac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 801ad02:	bf18      	it	ne
 801ad04:	2100      	movne	r1, #0
 801ad06:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801ad0a:	eba3 030b 	sub.w	r3, r3, fp
 801ad0e:	920a      	str	r2, [sp, #40]	@ 0x28
 801ad10:	f104 0204 	add.w	r2, r4, #4
 801ad14:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ad16:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ad18:	9a06      	ldr	r2, [sp, #24]
 801ad1a:	bf08      	it	eq
 801ad1c:	4611      	moveq	r1, r2
 801ad1e:	2200      	movs	r2, #0
 801ad20:	b289      	uxth	r1, r1
 801ad22:	920d      	str	r2, [sp, #52]	@ 0x34
 801ad24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ad26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ad28:	fa12 f383 	uxtah	r3, r2, r3
 801ad2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ad2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ad32:	3304      	adds	r3, #4
 801ad34:	9308      	str	r3, [sp, #32]
 801ad36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad38:	4543      	cmp	r3, r8
 801ad3a:	f240 8168 	bls.w	801b00e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 801ad3e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801ad42:	f04f 0e01 	mov.w	lr, #1
 801ad46:	9a02      	ldr	r2, [sp, #8]
 801ad48:	9808      	ldr	r0, [sp, #32]
 801ad4a:	fbb5 f3f3 	udiv	r3, r5, r3
 801ad4e:	1ad3      	subs	r3, r2, r3
 801ad50:	7800      	ldrb	r0, [r0, #0]
 801ad52:	b29b      	uxth	r3, r3
 801ad54:	9010      	str	r0, [sp, #64]	@ 0x40
 801ad56:	3001      	adds	r0, #1
 801ad58:	9314      	str	r3, [sp, #80]	@ 0x50
 801ad5a:	9b08      	ldr	r3, [sp, #32]
 801ad5c:	9007      	str	r0, [sp, #28]
 801ad5e:	785a      	ldrb	r2, [r3, #1]
 801ad60:	789b      	ldrb	r3, [r3, #2]
 801ad62:	021b      	lsls	r3, r3, #8
 801ad64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ad68:	9a08      	ldr	r2, [sp, #32]
 801ad6a:	78d2      	ldrb	r2, [r2, #3]
 801ad6c:	4313      	orrs	r3, r2
 801ad6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ad70:	441a      	add	r2, r3
 801ad72:	1c50      	adds	r0, r2, #1
 801ad74:	7852      	ldrb	r2, [r2, #1]
 801ad76:	9005      	str	r0, [sp, #20]
 801ad78:	0212      	lsls	r2, r2, #8
 801ad7a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ad7c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801ad80:	5cc3      	ldrb	r3, [r0, r3]
 801ad82:	431a      	orrs	r2, r3
 801ad84:	b293      	uxth	r3, r2
 801ad86:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 801ad8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad8c:	2300      	movs	r3, #0
 801ad8e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad90:	2301      	movs	r3, #1
 801ad92:	9301      	str	r3, [sp, #4]
 801ad94:	9304      	str	r3, [sp, #16]
 801ad96:	2300      	movs	r3, #0
 801ad98:	9303      	str	r3, [sp, #12]
 801ad9a:	2d00      	cmp	r5, #0
 801ad9c:	d07d      	beq.n	801ae9a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801ad9e:	45ae      	cmp	lr, r5
 801ada0:	d26c      	bcs.n	801ae7c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 801ada2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ada4:	eba5 050e 	sub.w	r5, r5, lr
 801ada8:	460c      	mov	r4, r1
 801adaa:	4543      	cmp	r3, r8
 801adac:	b2ad      	uxth	r5, r5
 801adae:	d802      	bhi.n	801adb6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801adb0:	e071      	b.n	801ae96 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d15d      	bne.n	801ae72 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 801adb6:	9b05      	ldr	r3, [sp, #20]
 801adb8:	9a04      	ldr	r2, [sp, #16]
 801adba:	785b      	ldrb	r3, [r3, #1]
 801adbc:	f1c2 0207 	rsb	r2, r2, #7
 801adc0:	9904      	ldr	r1, [sp, #16]
 801adc2:	4093      	lsls	r3, r2
 801adc4:	005b      	lsls	r3, r3, #1
 801adc6:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801adca:	9b05      	ldr	r3, [sp, #20]
 801adcc:	781b      	ldrb	r3, [r3, #0]
 801adce:	410b      	asrs	r3, r1
 801add0:	3101      	adds	r1, #1
 801add2:	b2c9      	uxtb	r1, r1
 801add4:	b2db      	uxtb	r3, r3
 801add6:	2908      	cmp	r1, #8
 801add8:	9104      	str	r1, [sp, #16]
 801adda:	9905      	ldr	r1, [sp, #20]
 801addc:	ea43 0302 	orr.w	r3, r3, r2
 801ade0:	bf0c      	ite	eq
 801ade2:	3102      	addeq	r1, #2
 801ade4:	3101      	addne	r1, #1
 801ade6:	b29a      	uxth	r2, r3
 801ade8:	bf05      	ittet	eq
 801adea:	9105      	streq	r1, [sp, #20]
 801adec:	2100      	moveq	r1, #0
 801adee:	9105      	strne	r1, [sp, #20]
 801adf0:	9104      	streq	r1, [sp, #16]
 801adf2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801adf4:	4291      	cmp	r1, r2
 801adf6:	d30a      	bcc.n	801ae0e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 801adf8:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 801adfc:	2301      	movs	r3, #1
 801adfe:	9907      	ldr	r1, [sp, #28]
 801ae00:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801ae04:	d30f      	bcc.n	801ae26 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801ae06:	2100      	movs	r1, #0
 801ae08:	9301      	str	r3, [sp, #4]
 801ae0a:	9103      	str	r1, [sp, #12]
 801ae0c:	e032      	b.n	801ae74 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801ae0e:	9b07      	ldr	r3, [sp, #28]
 801ae10:	429a      	cmp	r2, r3
 801ae12:	d318      	bcc.n	801ae46 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 801ae14:	9b01      	ldr	r3, [sp, #4]
 801ae16:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 801ae1a:	445b      	add	r3, fp
 801ae1c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801ae20:	9b01      	ldr	r3, [sp, #4]
 801ae22:	3301      	adds	r3, #1
 801ae24:	b29b      	uxth	r3, r3
 801ae26:	9907      	ldr	r1, [sp, #28]
 801ae28:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 801ae2c:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801ae30:	7108      	strb	r0, [r1, #4]
 801ae32:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ae34:	80c8      	strh	r0, [r1, #6]
 801ae36:	9801      	ldr	r0, [sp, #4]
 801ae38:	3001      	adds	r0, #1
 801ae3a:	7148      	strb	r0, [r1, #5]
 801ae3c:	9907      	ldr	r1, [sp, #28]
 801ae3e:	3101      	adds	r1, #1
 801ae40:	b289      	uxth	r1, r1
 801ae42:	9107      	str	r1, [sp, #28]
 801ae44:	e7df      	b.n	801ae06 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801ae46:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801ae4a:	4611      	mov	r1, r2
 801ae4c:	795b      	ldrb	r3, [r3, #5]
 801ae4e:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 801ae52:	4458      	add	r0, fp
 801ae54:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801ae56:	4406      	add	r6, r0
 801ae58:	2e00      	cmp	r6, #0
 801ae5a:	dd06      	ble.n	801ae6a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801ae5c:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801ae60:	790e      	ldrb	r6, [r1, #4]
 801ae62:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801ae66:	88c9      	ldrh	r1, [r1, #6]
 801ae68:	e7f4      	b.n	801ae54 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 801ae6a:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 801ae6e:	b29b      	uxth	r3, r3
 801ae70:	e7c5      	b.n	801adfe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801ae72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ae74:	4621      	mov	r1, r4
 801ae76:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ae78:	469e      	mov	lr, r3
 801ae7a:	e78e      	b.n	801ad9a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 801ae7c:	9a03      	ldr	r2, [sp, #12]
 801ae7e:	ebae 0305 	sub.w	r3, lr, r5
 801ae82:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801ae86:	442a      	add	r2, r5
 801ae88:	b29b      	uxth	r3, r3
 801ae8a:	b292      	uxth	r2, r2
 801ae8c:	9203      	str	r2, [sp, #12]
 801ae8e:	2500      	movs	r5, #0
 801ae90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ae92:	4542      	cmp	r2, r8
 801ae94:	d88d      	bhi.n	801adb2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 801ae96:	4621      	mov	r1, r4
 801ae98:	e74d      	b.n	801ad36 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 801ae9a:	458e      	cmp	lr, r1
 801ae9c:	f04f 0900 	mov.w	r9, #0
 801aea0:	bf2b      	itete	cs
 801aea2:	ebae 0301 	subcs.w	r3, lr, r1
 801aea6:	eba1 040e 	subcc.w	r4, r1, lr
 801aeaa:	462c      	movcs	r4, r5
 801aeac:	462b      	movcc	r3, r5
 801aeae:	bf27      	ittee	cs
 801aeb0:	b29b      	uxthcs	r3, r3
 801aeb2:	910c      	strcs	r1, [sp, #48]	@ 0x30
 801aeb4:	b2a4      	uxthcc	r4, r4
 801aeb6:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 801aeba:	9a03      	ldr	r2, [sp, #12]
 801aebc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801aebe:	444a      	add	r2, r9
 801aec0:	4548      	cmp	r0, r9
 801aec2:	b292      	uxth	r2, r2
 801aec4:	d074      	beq.n	801afb0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 801aec6:	2004      	movs	r0, #4
 801aec8:	445a      	add	r2, fp
 801aeca:	4605      	mov	r5, r0
 801aecc:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801aed0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801aed2:	fb15 0202 	smlabb	r2, r5, r2, r0
 801aed6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801aed8:	5880      	ldr	r0, [r0, r2]
 801aeda:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801aede:	d014      	beq.n	801af0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801aee0:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801aee4:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801aee8:	d112      	bne.n	801af10 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801aeea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aeec:	2aff      	cmp	r2, #255	@ 0xff
 801aeee:	d10f      	bne.n	801af10 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801aef0:	0942      	lsrs	r2, r0, #5
 801aef2:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801aef6:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801aefa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801aefe:	f025 0507 	bic.w	r5, r5, #7
 801af02:	4315      	orrs	r5, r2
 801af04:	4305      	orrs	r5, r0
 801af06:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801af0a:	f109 0901 	add.w	r9, r9, #1
 801af0e:	e7d4      	b.n	801aeba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 801af10:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801af14:	b2ed      	uxtb	r5, r5
 801af16:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801af1a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801af1e:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 801af22:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801af26:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801af2a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801af2e:	9215      	str	r2, [sp, #84]	@ 0x54
 801af30:	fa5f fc8c 	uxtb.w	ip, ip
 801af34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801af36:	b2c0      	uxtb	r0, r0
 801af38:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801af3c:	fb02 fa0a 	mul.w	sl, r2, sl
 801af40:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801af44:	f10a 0201 	add.w	r2, sl, #1
 801af48:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801af4c:	1212      	asrs	r2, r2, #8
 801af4e:	fa1f fa82 	uxth.w	sl, r2
 801af52:	43d2      	mvns	r2, r2
 801af54:	fb16 f60a 	smulbb	r6, r6, sl
 801af58:	b2d2      	uxtb	r2, r2
 801af5a:	fb10 f00a 	smulbb	r0, r0, sl
 801af5e:	fb07 6702 	mla	r7, r7, r2, r6
 801af62:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801af64:	fb0c 0002 	mla	r0, ip, r2, r0
 801af68:	fb15 f50a 	smulbb	r5, r5, sl
 801af6c:	b2bf      	uxth	r7, r7
 801af6e:	b280      	uxth	r0, r0
 801af70:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801af74:	fb06 5602 	mla	r6, r6, r2, r5
 801af78:	1c7a      	adds	r2, r7, #1
 801af7a:	1c45      	adds	r5, r0, #1
 801af7c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801af80:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801af84:	b2b6      	uxth	r6, r6
 801af86:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801af8a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801af8e:	432f      	orrs	r7, r5
 801af90:	1c75      	adds	r5, r6, #1
 801af92:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801af96:	096d      	lsrs	r5, r5, #5
 801af98:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801af9c:	432f      	orrs	r7, r5
 801af9e:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801afa2:	e7b2      	b.n	801af0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801afa4:	24004278 	.word	0x24004278
 801afa8:	24004272 	.word	0x24004272
 801afac:	fffff7fb 	.word	0xfffff7fb
 801afb0:	9203      	str	r2, [sp, #12]
 801afb2:	458e      	cmp	lr, r1
 801afb4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801afb6:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801afba:	f4ff af68 	bcc.w	801ae8e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801afbe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801afc0:	9906      	ldr	r1, [sp, #24]
 801afc2:	8812      	ldrh	r2, [r2, #0]
 801afc4:	1a52      	subs	r2, r2, r1
 801afc6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801afc8:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801afcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801afce:	3201      	adds	r2, #1
 801afd0:	428a      	cmp	r2, r1
 801afd2:	9209      	str	r2, [sp, #36]	@ 0x24
 801afd4:	d111      	bne.n	801affa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 801afd6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801afda:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 801afde:	9b06      	ldr	r3, [sp, #24]
 801afe0:	eba5 0509 	sub.w	r5, r5, r9
 801afe4:	b2ad      	uxth	r5, r5
 801afe6:	2d00      	cmp	r5, #0
 801afe8:	bf08      	it	eq
 801afea:	4619      	moveq	r1, r3
 801afec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801afee:	bf18      	it	ne
 801aff0:	2100      	movne	r1, #0
 801aff2:	3301      	adds	r3, #1
 801aff4:	b289      	uxth	r1, r1
 801aff6:	930d      	str	r3, [sp, #52]	@ 0x34
 801aff8:	e694      	b.n	801ad24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 801affa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801affe:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801b002:	1b2d      	subs	r5, r5, r4
 801b004:	b2ad      	uxth	r5, r5
 801b006:	2d00      	cmp	r5, #0
 801b008:	bf18      	it	ne
 801b00a:	2400      	movne	r4, #0
 801b00c:	e740      	b.n	801ae90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 801b00e:	4b04      	ldr	r3, [pc, #16]	@ (801b020 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 801b010:	6818      	ldr	r0, [r3, #0]
 801b012:	6803      	ldr	r3, [r0, #0]
 801b014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b016:	4798      	blx	r3
 801b018:	b01d      	add	sp, #116	@ 0x74
 801b01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b01e:	bf00      	nop
 801b020:	24004278 	.word	0x24004278

0801b024 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801b024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b028:	b09f      	sub	sp, #124	@ 0x7c
 801b02a:	461d      	mov	r5, r3
 801b02c:	4604      	mov	r4, r0
 801b02e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b030:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801b034:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801b038:	920a      	str	r2, [sp, #40]	@ 0x28
 801b03a:	2a00      	cmp	r2, #0
 801b03c:	f000 81fe 	beq.w	801b43c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 801b040:	6828      	ldr	r0, [r5, #0]
 801b042:	aa1a      	add	r2, sp, #104	@ 0x68
 801b044:	6869      	ldr	r1, [r5, #4]
 801b046:	c203      	stmia	r2!, {r0, r1}
 801b048:	6818      	ldr	r0, [r3, #0]
 801b04a:	aa1c      	add	r2, sp, #112	@ 0x70
 801b04c:	6859      	ldr	r1, [r3, #4]
 801b04e:	c203      	stmia	r2!, {r0, r1}
 801b050:	a81a      	add	r0, sp, #104	@ 0x68
 801b052:	f7f9 fb2f 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b056:	4629      	mov	r1, r5
 801b058:	a81c      	add	r0, sp, #112	@ 0x70
 801b05a:	f7f9 fb53 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b05e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801b062:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801b066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b06a:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 801b06e:	bfdb      	ittet	le
 801b070:	b29a      	uxthle	r2, r3
 801b072:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801b076:	2201      	movgt	r2, #1
 801b078:	fb91 f2f2 	sdivle	r2, r1, r2
 801b07c:	9201      	str	r2, [sp, #4]
 801b07e:	9801      	ldr	r0, [sp, #4]
 801b080:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801b084:	9901      	ldr	r1, [sp, #4]
 801b086:	fb92 f0f0 	sdiv	r0, r2, r0
 801b08a:	b280      	uxth	r0, r0
 801b08c:	440e      	add	r6, r1
 801b08e:	9010      	str	r0, [sp, #64]	@ 0x40
 801b090:	3e01      	subs	r6, #1
 801b092:	9801      	ldr	r0, [sp, #4]
 801b094:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801b096:	fb05 2510 	mls	r5, r5, r0, r2
 801b09a:	fb96 f6f1 	sdiv	r6, r6, r1
 801b09e:	fb15 f503 	smulbb	r5, r5, r3
 801b0a2:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801b0a6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801b0aa:	3601      	adds	r6, #1
 801b0ac:	440d      	add	r5, r1
 801b0ae:	4419      	add	r1, r3
 801b0b0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801b0b4:	b2b6      	uxth	r6, r6
 801b0b6:	441a      	add	r2, r3
 801b0b8:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801b0bc:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801b0c0:	b2ad      	uxth	r5, r5
 801b0c2:	9304      	str	r3, [sp, #16]
 801b0c4:	4b96      	ldr	r3, [pc, #600]	@ (801b320 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801b0c6:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801b0ca:	6818      	ldr	r0, [r3, #0]
 801b0cc:	6803      	ldr	r3, [r0, #0]
 801b0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b0d0:	4798      	blx	r3
 801b0d2:	4b94      	ldr	r3, [pc, #592]	@ (801b324 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 801b0d4:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801b0d8:	2d00      	cmp	r5, #0
 801b0da:	881a      	ldrh	r2, [r3, #0]
 801b0dc:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 801b0e0:	fb02 f707 	mul.w	r7, r2, r7
 801b0e4:	fb02 c101 	mla	r1, r2, r1, ip
 801b0e8:	9318      	str	r3, [sp, #96]	@ 0x60
 801b0ea:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801b0ee:	4b8e      	ldr	r3, [pc, #568]	@ (801b328 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801b0f0:	bf18      	it	ne
 801b0f2:	2100      	movne	r1, #0
 801b0f4:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801b0f8:	eba3 0304 	sub.w	r3, r3, r4
 801b0fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b0fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b100:	9319      	str	r3, [sp, #100]	@ 0x64
 801b102:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b106:	f106 0204 	add.w	r2, r6, #4
 801b10a:	9206      	str	r2, [sp, #24]
 801b10c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b10e:	ea6f 0202 	mvn.w	r2, r2
 801b112:	b2d2      	uxtb	r2, r2
 801b114:	9215      	str	r2, [sp, #84]	@ 0x54
 801b116:	9a04      	ldr	r2, [sp, #16]
 801b118:	bf08      	it	eq
 801b11a:	4611      	moveq	r1, r2
 801b11c:	2200      	movs	r2, #0
 801b11e:	b289      	uxth	r1, r1
 801b120:	920d      	str	r2, [sp, #52]	@ 0x34
 801b122:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b124:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b126:	fa12 f383 	uxtah	r3, r2, r3
 801b12a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b12c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b130:	3304      	adds	r3, #4
 801b132:	9307      	str	r3, [sp, #28]
 801b134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b136:	455b      	cmp	r3, fp
 801b138:	f240 817b 	bls.w	801b432 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 801b13c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801b140:	f04f 0801 	mov.w	r8, #1
 801b144:	9a01      	ldr	r2, [sp, #4]
 801b146:	9807      	ldr	r0, [sp, #28]
 801b148:	46c4      	mov	ip, r8
 801b14a:	f8cd 8008 	str.w	r8, [sp, #8]
 801b14e:	7800      	ldrb	r0, [r0, #0]
 801b150:	fbb5 f3f3 	udiv	r3, r5, r3
 801b154:	1ad3      	subs	r3, r2, r3
 801b156:	9011      	str	r0, [sp, #68]	@ 0x44
 801b158:	3001      	adds	r0, #1
 801b15a:	b29b      	uxth	r3, r3
 801b15c:	9005      	str	r0, [sp, #20]
 801b15e:	9316      	str	r3, [sp, #88]	@ 0x58
 801b160:	9b07      	ldr	r3, [sp, #28]
 801b162:	785a      	ldrb	r2, [r3, #1]
 801b164:	789b      	ldrb	r3, [r3, #2]
 801b166:	021b      	lsls	r3, r3, #8
 801b168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b16c:	9a07      	ldr	r2, [sp, #28]
 801b16e:	78d2      	ldrb	r2, [r2, #3]
 801b170:	4313      	orrs	r3, r2
 801b172:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b174:	441a      	add	r2, r3
 801b176:	1c50      	adds	r0, r2, #1
 801b178:	7852      	ldrb	r2, [r2, #1]
 801b17a:	9003      	str	r0, [sp, #12]
 801b17c:	0212      	lsls	r2, r2, #8
 801b17e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b180:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801b184:	5cc3      	ldrb	r3, [r0, r3]
 801b186:	431a      	orrs	r2, r3
 801b188:	b293      	uxth	r3, r2
 801b18a:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801b18e:	930c      	str	r3, [sp, #48]	@ 0x30
 801b190:	2300      	movs	r3, #0
 801b192:	9308      	str	r3, [sp, #32]
 801b194:	461a      	mov	r2, r3
 801b196:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b19a:	930e      	str	r3, [sp, #56]	@ 0x38
 801b19c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801b1a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b1a2:	2d00      	cmp	r5, #0
 801b1a4:	d07d      	beq.n	801b2a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 801b1a6:	45ac      	cmp	ip, r5
 801b1a8:	d26d      	bcs.n	801b286 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 801b1aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b1ac:	eba5 050c 	sub.w	r5, r5, ip
 801b1b0:	4608      	mov	r0, r1
 801b1b2:	455b      	cmp	r3, fp
 801b1b4:	b2ad      	uxth	r5, r5
 801b1b6:	d802      	bhi.n	801b1be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801b1b8:	e071      	b.n	801b29e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d15d      	bne.n	801b27a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801b1be:	9b03      	ldr	r3, [sp, #12]
 801b1c0:	9a02      	ldr	r2, [sp, #8]
 801b1c2:	785b      	ldrb	r3, [r3, #1]
 801b1c4:	f1c2 0207 	rsb	r2, r2, #7
 801b1c8:	9902      	ldr	r1, [sp, #8]
 801b1ca:	4093      	lsls	r3, r2
 801b1cc:	005b      	lsls	r3, r3, #1
 801b1ce:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801b1d2:	9b03      	ldr	r3, [sp, #12]
 801b1d4:	781b      	ldrb	r3, [r3, #0]
 801b1d6:	410b      	asrs	r3, r1
 801b1d8:	3101      	adds	r1, #1
 801b1da:	b2c9      	uxtb	r1, r1
 801b1dc:	b2db      	uxtb	r3, r3
 801b1de:	2908      	cmp	r1, #8
 801b1e0:	9102      	str	r1, [sp, #8]
 801b1e2:	9903      	ldr	r1, [sp, #12]
 801b1e4:	ea43 0302 	orr.w	r3, r3, r2
 801b1e8:	bf0c      	ite	eq
 801b1ea:	3102      	addeq	r1, #2
 801b1ec:	3101      	addne	r1, #1
 801b1ee:	b29a      	uxth	r2, r3
 801b1f0:	bf05      	ittet	eq
 801b1f2:	9103      	streq	r1, [sp, #12]
 801b1f4:	2100      	moveq	r1, #0
 801b1f6:	9103      	strne	r1, [sp, #12]
 801b1f8:	9102      	streq	r1, [sp, #8]
 801b1fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b1fc:	4291      	cmp	r1, r2
 801b1fe:	d30a      	bcc.n	801b216 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801b200:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801b204:	2301      	movs	r3, #1
 801b206:	9905      	ldr	r1, [sp, #20]
 801b208:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801b20c:	d30f      	bcc.n	801b22e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801b20e:	2100      	movs	r1, #0
 801b210:	4698      	mov	r8, r3
 801b212:	9100      	str	r1, [sp, #0]
 801b214:	e032      	b.n	801b27c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 801b216:	9b05      	ldr	r3, [sp, #20]
 801b218:	429a      	cmp	r2, r3
 801b21a:	d318      	bcc.n	801b24e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801b21c:	eb04 0308 	add.w	r3, r4, r8
 801b220:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801b224:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801b228:	f108 0301 	add.w	r3, r8, #1
 801b22c:	b29b      	uxth	r3, r3
 801b22e:	9905      	ldr	r1, [sp, #20]
 801b230:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801b234:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b238:	710e      	strb	r6, [r1, #4]
 801b23a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b23c:	80ce      	strh	r6, [r1, #6]
 801b23e:	f108 0601 	add.w	r6, r8, #1
 801b242:	714e      	strb	r6, [r1, #5]
 801b244:	9905      	ldr	r1, [sp, #20]
 801b246:	3101      	adds	r1, #1
 801b248:	b289      	uxth	r1, r1
 801b24a:	9105      	str	r1, [sp, #20]
 801b24c:	e7df      	b.n	801b20e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801b24e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b252:	4611      	mov	r1, r2
 801b254:	795b      	ldrb	r3, [r3, #5]
 801b256:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801b25a:	4426      	add	r6, r4
 801b25c:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801b25e:	4437      	add	r7, r6
 801b260:	2f00      	cmp	r7, #0
 801b262:	dd06      	ble.n	801b272 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 801b264:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b268:	790f      	ldrb	r7, [r1, #4]
 801b26a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b26e:	88c9      	ldrh	r1, [r1, #6]
 801b270:	e7f4      	b.n	801b25c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801b272:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801b276:	b29b      	uxth	r3, r3
 801b278:	e7c5      	b.n	801b206 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801b27a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b27c:	920c      	str	r2, [sp, #48]	@ 0x30
 801b27e:	4601      	mov	r1, r0
 801b280:	9a00      	ldr	r2, [sp, #0]
 801b282:	469c      	mov	ip, r3
 801b284:	e78d      	b.n	801b1a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801b286:	ebac 0305 	sub.w	r3, ip, r5
 801b28a:	1957      	adds	r7, r2, r5
 801b28c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801b290:	b2ba      	uxth	r2, r7
 801b292:	b29b      	uxth	r3, r3
 801b294:	9200      	str	r2, [sp, #0]
 801b296:	2500      	movs	r5, #0
 801b298:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b29a:	455a      	cmp	r2, fp
 801b29c:	d88d      	bhi.n	801b1ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801b29e:	4601      	mov	r1, r0
 801b2a0:	e748      	b.n	801b134 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 801b2a2:	458c      	cmp	ip, r1
 801b2a4:	bf27      	ittee	cs
 801b2a6:	ebac 0301 	subcs.w	r3, ip, r1
 801b2aa:	4628      	movcs	r0, r5
 801b2ac:	eba1 000c 	subcc.w	r0, r1, ip
 801b2b0:	462b      	movcc	r3, r5
 801b2b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b2b4:	bf27      	ittee	cs
 801b2b6:	b29b      	uxthcs	r3, r3
 801b2b8:	9109      	strcs	r1, [sp, #36]	@ 0x24
 801b2ba:	b280      	uxthcc	r0, r0
 801b2bc:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 801b2c0:	2dff      	cmp	r5, #255	@ 0xff
 801b2c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b2c4:	eb02 0705 	add.w	r7, r2, r5
 801b2c8:	b2bd      	uxth	r5, r7
 801b2ca:	9500      	str	r5, [sp, #0]
 801b2cc:	d12e      	bne.n	801b32c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 801b2ce:	465e      	mov	r6, fp
 801b2d0:	9d00      	ldr	r5, [sp, #0]
 801b2d2:	42aa      	cmp	r2, r5
 801b2d4:	f040 8083 	bne.w	801b3de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801b2d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b2da:	458c      	cmp	ip, r1
 801b2dc:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801b2e0:	d3d9      	bcc.n	801b296 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801b2e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b2e4:	9904      	ldr	r1, [sp, #16]
 801b2e6:	8812      	ldrh	r2, [r2, #0]
 801b2e8:	1a52      	subs	r2, r2, r1
 801b2ea:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801b2ec:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801b2f0:	9a08      	ldr	r2, [sp, #32]
 801b2f2:	3201      	adds	r2, #1
 801b2f4:	428a      	cmp	r2, r1
 801b2f6:	9208      	str	r2, [sp, #32]
 801b2f8:	f040 8091 	bne.w	801b41e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 801b2fc:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801b300:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 801b304:	9b04      	ldr	r3, [sp, #16]
 801b306:	eba5 050c 	sub.w	r5, r5, ip
 801b30a:	b2ad      	uxth	r5, r5
 801b30c:	2d00      	cmp	r5, #0
 801b30e:	bf08      	it	eq
 801b310:	4619      	moveq	r1, r3
 801b312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b314:	bf18      	it	ne
 801b316:	2100      	movne	r1, #0
 801b318:	3301      	adds	r3, #1
 801b31a:	b289      	uxth	r1, r1
 801b31c:	930d      	str	r3, [sp, #52]	@ 0x34
 801b31e:	e700      	b.n	801b122 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 801b320:	24004278 	.word	0x24004278
 801b324:	24004272 	.word	0x24004272
 801b328:	fffff7fb 	.word	0xfffff7fb
 801b32c:	46d9      	mov	r9, fp
 801b32e:	9d00      	ldr	r5, [sp, #0]
 801b330:	42aa      	cmp	r2, r5
 801b332:	d0d1      	beq.n	801b2d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 801b334:	1c55      	adds	r5, r2, #1
 801b336:	4422      	add	r2, r4
 801b338:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 801b33c:	9a06      	ldr	r2, [sp, #24]
 801b33e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b342:	9517      	str	r5, [sp, #92]	@ 0x5c
 801b344:	4472      	add	r2, lr
 801b346:	9212      	str	r2, [sp, #72]	@ 0x48
 801b348:	f8b9 2000 	ldrh.w	r2, [r9]
 801b34c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801b34e:	1216      	asrs	r6, r2, #8
 801b350:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b354:	10d5      	asrs	r5, r2, #3
 801b356:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801b358:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801b35c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801b360:	00d2      	lsls	r2, r2, #3
 801b362:	fb1a fa07 	smulbb	sl, sl, r7
 801b366:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801b36a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b36c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801b370:	b2d2      	uxtb	r2, r2
 801b372:	fb06 a607 	mla	r6, r6, r7, sl
 801b376:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801b378:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b37c:	f897 a001 	ldrb.w	sl, [r7, #1]
 801b380:	b2b6      	uxth	r6, r6
 801b382:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801b384:	fb1a fa07 	smulbb	sl, sl, r7
 801b388:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b38a:	fb05 a507 	mla	r5, r5, r7, sl
 801b38e:	9f06      	ldr	r7, [sp, #24]
 801b390:	f106 0a01 	add.w	sl, r6, #1
 801b394:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b398:	b2ad      	uxth	r5, r5
 801b39a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801b39c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801b3a0:	f105 0a01 	add.w	sl, r5, #1
 801b3a4:	fb1e fe07 	smulbb	lr, lr, r7
 801b3a8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b3aa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b3ae:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801b3b2:	fb02 e207 	mla	r2, r2, r7, lr
 801b3b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b3ba:	b292      	uxth	r2, r2
 801b3bc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b3c0:	f102 0e01 	add.w	lr, r2, #1
 801b3c4:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801b3c8:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801b3cc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b3d0:	ea4e 0606 	orr.w	r6, lr, r6
 801b3d4:	ea46 060a 	orr.w	r6, r6, sl
 801b3d8:	f829 6b02 	strh.w	r6, [r9], #2
 801b3dc:	e7a7      	b.n	801b32e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 801b3de:	f102 0e01 	add.w	lr, r2, #1
 801b3e2:	4422      	add	r2, r4
 801b3e4:	9f06      	ldr	r7, [sp, #24]
 801b3e6:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 801b3ea:	9a06      	ldr	r2, [sp, #24]
 801b3ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3f0:	eb02 0a05 	add.w	sl, r2, r5
 801b3f4:	4a13      	ldr	r2, [pc, #76]	@ (801b444 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 801b3f6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b3fa:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801b3fe:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801b402:	00d2      	lsls	r2, r2, #3
 801b404:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801b408:	ea49 0202 	orr.w	r2, r9, r2
 801b40c:	f817 9005 	ldrb.w	r9, [r7, r5]
 801b410:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801b414:	f826 2b02 	strh.w	r2, [r6], #2
 801b418:	fa1f f28e 	uxth.w	r2, lr
 801b41c:	e758      	b.n	801b2d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 801b41e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801b422:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801b426:	1a2d      	subs	r5, r5, r0
 801b428:	b2ad      	uxth	r5, r5
 801b42a:	2d00      	cmp	r5, #0
 801b42c:	bf18      	it	ne
 801b42e:	2000      	movne	r0, #0
 801b430:	e732      	b.n	801b298 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801b432:	4b05      	ldr	r3, [pc, #20]	@ (801b448 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 801b434:	6818      	ldr	r0, [r3, #0]
 801b436:	6803      	ldr	r3, [r0, #0]
 801b438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b43a:	4798      	blx	r3
 801b43c:	b01f      	add	sp, #124	@ 0x7c
 801b43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b442:	bf00      	nop
 801b444:	fffff800 	.word	0xfffff800
 801b448:	24004278 	.word	0x24004278

0801b44c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b450:	b091      	sub	sp, #68	@ 0x44
 801b452:	469b      	mov	fp, r3
 801b454:	4616      	mov	r6, r2
 801b456:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b45a:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801b45e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b462:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 801b466:	4604      	mov	r4, r0
 801b468:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801b46c:	4640      	mov	r0, r8
 801b46e:	460d      	mov	r5, r1
 801b470:	4659      	mov	r1, fp
 801b472:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801b476:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b47a:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801b47e:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 801b482:	f7f7 fa25 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 801b486:	4631      	mov	r1, r6
 801b488:	4640      	mov	r0, r8
 801b48a:	f7f7 fa21 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 801b48e:	4b74      	ldr	r3, [pc, #464]	@ (801b660 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801b490:	8818      	ldrh	r0, [r3, #0]
 801b492:	4b74      	ldr	r3, [pc, #464]	@ (801b664 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801b494:	b202      	sxth	r2, r0
 801b496:	8819      	ldrh	r1, [r3, #0]
 801b498:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801b49c:	b20e      	sxth	r6, r1
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	da07      	bge.n	801b4b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801b4a2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801b4a6:	4463      	add	r3, ip
 801b4a8:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801b4ac:	2300      	movs	r3, #0
 801b4ae:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801b4b2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801b4b6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801b4ba:	1ad2      	subs	r2, r2, r3
 801b4bc:	4594      	cmp	ip, r2
 801b4be:	bfc4      	itt	gt
 801b4c0:	1ac2      	subgt	r2, r0, r3
 801b4c2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801b4c6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b4ca:	2a00      	cmp	r2, #0
 801b4cc:	da07      	bge.n	801b4de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801b4ce:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801b4d2:	4462      	add	r2, ip
 801b4d4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801b4d8:	2200      	movs	r2, #0
 801b4da:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801b4de:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801b4e2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801b4e6:	eba6 060a 	sub.w	r6, r6, sl
 801b4ea:	42b2      	cmp	r2, r6
 801b4ec:	bfc4      	itt	gt
 801b4ee:	eba1 020a 	subgt.w	r2, r1, sl
 801b4f2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 801b4f6:	4a5c      	ldr	r2, [pc, #368]	@ (801b668 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801b4f8:	7812      	ldrb	r2, [r2, #0]
 801b4fa:	b9a2      	cbnz	r2, 801b526 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801b4fc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801b500:	4286      	cmp	r6, r0
 801b502:	4640      	mov	r0, r8
 801b504:	9303      	str	r3, [sp, #12]
 801b506:	bf14      	ite	ne
 801b508:	2600      	movne	r6, #0
 801b50a:	2601      	moveq	r6, #1
 801b50c:	f7f7 fa23 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b510:	9b03      	ldr	r3, [sp, #12]
 801b512:	b160      	cbz	r0, 801b52e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801b514:	2300      	movs	r3, #0
 801b516:	8023      	strh	r3, [r4, #0]
 801b518:	8063      	strh	r3, [r4, #2]
 801b51a:	80a3      	strh	r3, [r4, #4]
 801b51c:	4620      	mov	r0, r4
 801b51e:	80e3      	strh	r3, [r4, #6]
 801b520:	b011      	add	sp, #68	@ 0x44
 801b522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b526:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801b52a:	428e      	cmp	r6, r1
 801b52c:	e7e9      	b.n	801b502 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801b52e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b532:	a90e      	add	r1, sp, #56	@ 0x38
 801b534:	900e      	str	r0, [sp, #56]	@ 0x38
 801b536:	a80c      	add	r0, sp, #48	@ 0x30
 801b538:	9205      	str	r2, [sp, #20]
 801b53a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801b53e:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 801b542:	9206      	str	r2, [sp, #24]
 801b544:	f8bb 2000 	ldrh.w	r2, [fp]
 801b548:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 801b54c:	1a9b      	subs	r3, r3, r2
 801b54e:	b21b      	sxth	r3, r3
 801b550:	9303      	str	r3, [sp, #12]
 801b552:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801b556:	f8df b118 	ldr.w	fp, [pc, #280]	@ 801b670 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801b55a:	ebaa 0a03 	sub.w	sl, sl, r3
 801b55e:	fa0f f38a 	sxth.w	r3, sl
 801b562:	9304      	str	r3, [sp, #16]
 801b564:	9b03      	ldr	r3, [sp, #12]
 801b566:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801b56a:	9b04      	ldr	r3, [sp, #16]
 801b56c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b570:	9b05      	ldr	r3, [sp, #20]
 801b572:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801b576:	9b06      	ldr	r3, [sp, #24]
 801b578:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801b57c:	f7f9 f8c2 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b580:	4640      	mov	r0, r8
 801b582:	f7f9 f897 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b586:	a80e      	add	r0, sp, #56	@ 0x38
 801b588:	f7f9 f894 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b58c:	4b37      	ldr	r3, [pc, #220]	@ (801b66c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801b58e:	4628      	mov	r0, r5
 801b590:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 801b594:	881b      	ldrh	r3, [r3, #0]
 801b596:	9307      	str	r3, [sp, #28]
 801b598:	682b      	ldr	r3, [r5, #0]
 801b59a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b59c:	4798      	blx	r3
 801b59e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 801b5a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b5a6:	4681      	mov	r9, r0
 801b5a8:	f8db 0000 	ldr.w	r0, [fp]
 801b5ac:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801b5b0:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801b5b2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b5b6:	6803      	ldr	r3, [r0, #0]
 801b5b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b5ba:	4798      	blx	r3
 801b5bc:	4607      	mov	r7, r0
 801b5be:	f8db 0000 	ldr.w	r0, [fp]
 801b5c2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801b5c6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b5ca:	6803      	ldr	r3, [r0, #0]
 801b5cc:	9109      	str	r1, [sp, #36]	@ 0x24
 801b5ce:	9208      	str	r2, [sp, #32]
 801b5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b5d2:	4798      	blx	r3
 801b5d4:	f010 0f01 	tst.w	r0, #1
 801b5d8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b5dc:	d012      	beq.n	801b604 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801b5de:	f8db 0000 	ldr.w	r0, [fp]
 801b5e2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801b5e6:	6803      	ldr	r3, [r0, #0]
 801b5e8:	9200      	str	r2, [sp, #0]
 801b5ea:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801b5ec:	462b      	mov	r3, r5
 801b5ee:	e898 0006 	ldmia.w	r8, {r1, r2}
 801b5f2:	47b0      	blx	r6
 801b5f4:	9b03      	ldr	r3, [sp, #12]
 801b5f6:	8023      	strh	r3, [r4, #0]
 801b5f8:	9b04      	ldr	r3, [sp, #16]
 801b5fa:	8063      	strh	r3, [r4, #2]
 801b5fc:	9b05      	ldr	r3, [sp, #20]
 801b5fe:	80a3      	strh	r3, [r4, #4]
 801b600:	9b06      	ldr	r3, [sp, #24]
 801b602:	e78b      	b.n	801b51c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801b604:	fb09 f202 	mul.w	r2, r9, r2
 801b608:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801b60c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801b610:	440f      	add	r7, r1
 801b612:	b166      	cbz	r6, 801b62e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801b614:	9a07      	ldr	r2, [sp, #28]
 801b616:	4592      	cmp	sl, r2
 801b618:	d109      	bne.n	801b62e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801b61a:	f8db 0000 	ldr.w	r0, [fp]
 801b61e:	fb09 f303 	mul.w	r3, r9, r3
 801b622:	4629      	mov	r1, r5
 801b624:	6802      	ldr	r2, [r0, #0]
 801b626:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 801b628:	463a      	mov	r2, r7
 801b62a:	47b0      	blx	r6
 801b62c:	e7e2      	b.n	801b5f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801b62e:	fb0a f303 	mul.w	r3, sl, r3
 801b632:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801b636:	f8df b038 	ldr.w	fp, [pc, #56]	@ 801b670 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801b63a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801b63e:	4545      	cmp	r5, r8
 801b640:	d2d8      	bcs.n	801b5f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801b642:	f8db 0000 	ldr.w	r0, [fp]
 801b646:	4629      	mov	r1, r5
 801b648:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801b64c:	4435      	add	r5, r6
 801b64e:	6802      	ldr	r2, [r0, #0]
 801b650:	005b      	lsls	r3, r3, #1
 801b652:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801b656:	463a      	mov	r2, r7
 801b658:	47d0      	blx	sl
 801b65a:	444f      	add	r7, r9
 801b65c:	e7ef      	b.n	801b63e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801b65e:	bf00      	nop
 801b660:	2400426c 	.word	0x2400426c
 801b664:	2400426e 	.word	0x2400426e
 801b668:	24004270 	.word	0x24004270
 801b66c:	24004272 	.word	0x24004272
 801b670:	24004278 	.word	0x24004278

0801b674 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801b674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b676:	4606      	mov	r6, r0
 801b678:	b087      	sub	sp, #28
 801b67a:	460c      	mov	r4, r1
 801b67c:	4617      	mov	r7, r2
 801b67e:	461d      	mov	r5, r3
 801b680:	b333      	cbz	r3, 801b6d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b682:	4608      	mov	r0, r1
 801b684:	f7f7 f967 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b688:	bb10      	cbnz	r0, 801b6d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b68a:	6820      	ldr	r0, [r4, #0]
 801b68c:	ab04      	add	r3, sp, #16
 801b68e:	6861      	ldr	r1, [r4, #4]
 801b690:	4c1b      	ldr	r4, [pc, #108]	@ (801b700 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801b692:	c303      	stmia	r3!, {r0, r1}
 801b694:	a804      	add	r0, sp, #16
 801b696:	f7f9 f80d 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b69a:	6820      	ldr	r0, [r4, #0]
 801b69c:	6803      	ldr	r3, [r0, #0]
 801b69e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b6a0:	4798      	blx	r3
 801b6a2:	2dff      	cmp	r5, #255	@ 0xff
 801b6a4:	d016      	beq.n	801b6d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801b6a6:	f010 0f08 	tst.w	r0, #8
 801b6aa:	6820      	ldr	r0, [r4, #0]
 801b6ac:	d015      	beq.n	801b6da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801b6ae:	2400      	movs	r4, #0
 801b6b0:	6801      	ldr	r1, [r0, #0]
 801b6b2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b6b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b6ba:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801b6be:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801b6c2:	9401      	str	r4, [sp, #4]
 801b6c4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801b6c8:	9400      	str	r4, [sp, #0]
 801b6ca:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801b6cc:	4639      	mov	r1, r7
 801b6ce:	47a0      	blx	r4
 801b6d0:	b007      	add	sp, #28
 801b6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6d4:	f010 0f02 	tst.w	r0, #2
 801b6d8:	e7e7      	b.n	801b6aa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801b6da:	6803      	ldr	r3, [r0, #0]
 801b6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b6de:	4798      	blx	r3
 801b6e0:	4b08      	ldr	r3, [pc, #32]	@ (801b704 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801b6e2:	4601      	mov	r1, r0
 801b6e4:	4630      	mov	r0, r6
 801b6e6:	881a      	ldrh	r2, [r3, #0]
 801b6e8:	6833      	ldr	r3, [r6, #0]
 801b6ea:	e9cd 7500 	strd	r7, r5, [sp]
 801b6ee:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801b6f0:	ab04      	add	r3, sp, #16
 801b6f2:	47a8      	blx	r5
 801b6f4:	6820      	ldr	r0, [r4, #0]
 801b6f6:	6803      	ldr	r3, [r0, #0]
 801b6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6fa:	4798      	blx	r3
 801b6fc:	e7e8      	b.n	801b6d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b6fe:	bf00      	nop
 801b700:	24004278 	.word	0x24004278
 801b704:	24004272 	.word	0x24004272

0801b708 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b70c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801b710:	4688      	mov	r8, r1
 801b712:	4614      	mov	r4, r2
 801b714:	461d      	mov	r5, r3
 801b716:	9e08      	ldr	r6, [sp, #32]
 801b718:	2f00      	cmp	r7, #0
 801b71a:	f000 80ab 	beq.w	801b874 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801b71e:	4618      	mov	r0, r3
 801b720:	f7f7 f919 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b724:	2800      	cmp	r0, #0
 801b726:	f040 80a5 	bne.w	801b874 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801b72a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801b72e:	2fff      	cmp	r7, #255	@ 0xff
 801b730:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b734:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801b738:	fb04 1303 	mla	r3, r4, r3, r1
 801b73c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801b740:	eba4 0200 	sub.w	r2, r4, r0
 801b744:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801b748:	fb04 f505 	mul.w	r5, r4, r5
 801b74c:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801b750:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801b754:	d04a      	beq.n	801b7ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801b756:	b2bc      	uxth	r4, r7
 801b758:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801b75c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801b760:	fa5f f788 	uxtb.w	r7, r8
 801b764:	b2f3      	uxtb	r3, r6
 801b766:	0040      	lsls	r0, r0, #1
 801b768:	fb0e fe04 	mul.w	lr, lr, r4
 801b76c:	4367      	muls	r7, r4
 801b76e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801b772:	4363      	muls	r3, r4
 801b774:	fa1f fc8c 	uxth.w	ip, ip
 801b778:	42a9      	cmp	r1, r5
 801b77a:	d27b      	bcs.n	801b874 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801b77c:	eb01 0900 	add.w	r9, r1, r0
 801b780:	4549      	cmp	r1, r9
 801b782:	d231      	bcs.n	801b7e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801b784:	880a      	ldrh	r2, [r1, #0]
 801b786:	1214      	asrs	r4, r2, #8
 801b788:	10d6      	asrs	r6, r2, #3
 801b78a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801b78e:	00d2      	lsls	r2, r2, #3
 801b790:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b794:	b2d2      	uxtb	r2, r2
 801b796:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801b79a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b79e:	fb14 f40c 	smulbb	r4, r4, ip
 801b7a2:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801b7a6:	fb12 f20c 	smulbb	r2, r2, ip
 801b7aa:	fb16 f60c 	smulbb	r6, r6, ip
 801b7ae:	4474      	add	r4, lr
 801b7b0:	441a      	add	r2, r3
 801b7b2:	b2a4      	uxth	r4, r4
 801b7b4:	443e      	add	r6, r7
 801b7b6:	b292      	uxth	r2, r2
 801b7b8:	f104 0a01 	add.w	sl, r4, #1
 801b7bc:	b2b6      	uxth	r6, r6
 801b7be:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801b7c2:	f102 0a01 	add.w	sl, r2, #1
 801b7c6:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801b7ca:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801b7ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b7d2:	4322      	orrs	r2, r4
 801b7d4:	1c74      	adds	r4, r6, #1
 801b7d6:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801b7da:	0976      	lsrs	r6, r6, #5
 801b7dc:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801b7e0:	4332      	orrs	r2, r6
 801b7e2:	f821 2b02 	strh.w	r2, [r1], #2
 801b7e6:	e7cb      	b.n	801b780 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801b7e8:	4441      	add	r1, r8
 801b7ea:	e7c5      	b.n	801b778 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801b7ec:	0973      	lsrs	r3, r6, #5
 801b7ee:	4f22      	ldr	r7, [pc, #136]	@ (801b878 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801b7f0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801b7f4:	ea08 0707 	and.w	r7, r8, r7
 801b7f8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801b7fc:	433b      	orrs	r3, r7
 801b7fe:	07e7      	lsls	r7, r4, #31
 801b800:	ea43 0306 	orr.w	r3, r3, r6
 801b804:	b29b      	uxth	r3, r3
 801b806:	d50b      	bpl.n	801b820 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801b808:	0040      	lsls	r0, r0, #1
 801b80a:	0052      	lsls	r2, r2, #1
 801b80c:	42a9      	cmp	r1, r5
 801b80e:	d231      	bcs.n	801b874 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801b810:	180c      	adds	r4, r1, r0
 801b812:	42a1      	cmp	r1, r4
 801b814:	d202      	bcs.n	801b81c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801b816:	f821 3b02 	strh.w	r3, [r1], #2
 801b81a:	e7fa      	b.n	801b812 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801b81c:	4411      	add	r1, r2
 801b81e:	e7f5      	b.n	801b80c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801b820:	078e      	lsls	r6, r1, #30
 801b822:	d008      	beq.n	801b836 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801b824:	0066      	lsls	r6, r4, #1
 801b826:	460a      	mov	r2, r1
 801b828:	42aa      	cmp	r2, r5
 801b82a:	d202      	bcs.n	801b832 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801b82c:	8013      	strh	r3, [r2, #0]
 801b82e:	4432      	add	r2, r6
 801b830:	e7fa      	b.n	801b828 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801b832:	3102      	adds	r1, #2
 801b834:	3801      	subs	r0, #1
 801b836:	07c2      	lsls	r2, r0, #31
 801b838:	d50b      	bpl.n	801b852 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801b83a:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801b83e:	0066      	lsls	r6, r4, #1
 801b840:	3a01      	subs	r2, #1
 801b842:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801b846:	42aa      	cmp	r2, r5
 801b848:	d202      	bcs.n	801b850 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801b84a:	8013      	strh	r3, [r2, #0]
 801b84c:	4432      	add	r2, r6
 801b84e:	e7fa      	b.n	801b846 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801b850:	3801      	subs	r0, #1
 801b852:	b178      	cbz	r0, 801b874 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801b854:	1040      	asrs	r0, r0, #1
 801b856:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801b85a:	0080      	lsls	r0, r0, #2
 801b85c:	0064      	lsls	r4, r4, #1
 801b85e:	42a9      	cmp	r1, r5
 801b860:	d208      	bcs.n	801b874 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801b862:	180e      	adds	r6, r1, r0
 801b864:	460a      	mov	r2, r1
 801b866:	42b2      	cmp	r2, r6
 801b868:	d202      	bcs.n	801b870 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801b86a:	f842 3b04 	str.w	r3, [r2], #4
 801b86e:	e7fa      	b.n	801b866 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801b870:	4421      	add	r1, r4
 801b872:	e7f4      	b.n	801b85e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801b874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b878:	00fff800 	.word	0x00fff800

0801b87c <_ZN8touchgfx8LCD16bppC1Ev>:
 801b87c:	2200      	movs	r2, #0
 801b87e:	4912      	ldr	r1, [pc, #72]	@ (801b8c8 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801b880:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801b884:	6001      	str	r1, [r0, #0]
 801b886:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b88a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b88e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801b892:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801b896:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801b89a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801b89e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801b8a2:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801b8a6:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801b8aa:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801b8ae:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801b8b2:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801b8b6:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 801b8ba:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 801b8be:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 801b8c2:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
 801b8c6:	4770      	bx	lr
 801b8c8:	0802a868 	.word	0x0802a868

0801b8cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8d0:	b08d      	sub	sp, #52	@ 0x34
 801b8d2:	460d      	mov	r5, r1
 801b8d4:	4604      	mov	r4, r0
 801b8d6:	4699      	mov	r9, r3
 801b8d8:	6808      	ldr	r0, [r1, #0]
 801b8da:	ab08      	add	r3, sp, #32
 801b8dc:	6849      	ldr	r1, [r1, #4]
 801b8de:	c303      	stmia	r3!, {r0, r1}
 801b8e0:	6810      	ldr	r0, [r2, #0]
 801b8e2:	ab0a      	add	r3, sp, #40	@ 0x28
 801b8e4:	6851      	ldr	r1, [r2, #4]
 801b8e6:	c303      	stmia	r3!, {r0, r1}
 801b8e8:	a808      	add	r0, sp, #32
 801b8ea:	f7f8 fee3 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b8ee:	4629      	mov	r1, r5
 801b8f0:	a80a      	add	r0, sp, #40	@ 0x28
 801b8f2:	4d67      	ldr	r5, [pc, #412]	@ (801ba90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801b8f4:	f7f8 ff06 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b8f8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801b8fc:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 801b900:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801b904:	6828      	ldr	r0, [r5, #0]
 801b906:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b90a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 801b90e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801b912:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b916:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801b91a:	440a      	add	r2, r1
 801b91c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801b920:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801b924:	4413      	add	r3, r2
 801b926:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b92a:	6803      	ldr	r3, [r0, #0]
 801b92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b92e:	4798      	blx	r3
 801b930:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801b934:	d119      	bne.n	801b96a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801b936:	f010 0f20 	tst.w	r0, #32
 801b93a:	6828      	ldr	r0, [r5, #0]
 801b93c:	d018      	beq.n	801b970 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801b93e:	2500      	movs	r5, #0
 801b940:	6801      	ldr	r1, [r0, #0]
 801b942:	b2b6      	uxth	r6, r6
 801b944:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801b948:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801b94c:	9601      	str	r6, [sp, #4]
 801b94e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801b952:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801b956:	9502      	str	r5, [sp, #8]
 801b958:	fa1f f588 	uxth.w	r5, r8
 801b95c:	9500      	str	r5, [sp, #0]
 801b95e:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801b960:	4621      	mov	r1, r4
 801b962:	47a8      	blx	r5
 801b964:	b00d      	add	sp, #52	@ 0x34
 801b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b96a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801b96e:	e7e4      	b.n	801b93a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801b970:	6803      	ldr	r3, [r0, #0]
 801b972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b974:	4798      	blx	r3
 801b976:	4947      	ldr	r1, [pc, #284]	@ (801ba94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801b978:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b97c:	880b      	ldrh	r3, [r1, #0]
 801b97e:	468a      	mov	sl, r1
 801b980:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 801b984:	fb03 5202 	mla	r2, r3, r2, r5
 801b988:	4373      	muls	r3, r6
 801b98a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b98e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b992:	9307      	str	r3, [sp, #28]
 801b994:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801b998:	9306      	str	r3, [sp, #24]
 801b99a:	9b07      	ldr	r3, [sp, #28]
 801b99c:	4298      	cmp	r0, r3
 801b99e:	d270      	bcs.n	801ba82 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801b9a0:	9b06      	ldr	r3, [sp, #24]
 801b9a2:	4621      	mov	r1, r4
 801b9a4:	eb00 0b03 	add.w	fp, r0, r3
 801b9a8:	4558      	cmp	r0, fp
 801b9aa:	d25d      	bcs.n	801ba68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801b9ac:	f851 4b04 	ldr.w	r4, [r1], #4
 801b9b0:	0e23      	lsrs	r3, r4, #24
 801b9b2:	d014      	beq.n	801b9de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801b9b4:	2bff      	cmp	r3, #255	@ 0xff
 801b9b6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801b9ba:	d112      	bne.n	801b9e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801b9bc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801b9c0:	d10f      	bne.n	801b9e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801b9c2:	0963      	lsrs	r3, r4, #5
 801b9c4:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 801b9c8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b9cc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801b9d0:	f02c 0c07 	bic.w	ip, ip, #7
 801b9d4:	ea43 0c0c 	orr.w	ip, r3, ip
 801b9d8:	ea4c 0404 	orr.w	r4, ip, r4
 801b9dc:	8004      	strh	r4, [r0, #0]
 801b9de:	3002      	adds	r0, #2
 801b9e0:	e7e2      	b.n	801b9a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801b9e2:	fb09 f303 	mul.w	r3, r9, r3
 801b9e6:	8807      	ldrh	r7, [r0, #0]
 801b9e8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801b9ec:	fa5f fc8c 	uxtb.w	ip, ip
 801b9f0:	1c5a      	adds	r2, r3, #1
 801b9f2:	123e      	asrs	r6, r7, #8
 801b9f4:	10fd      	asrs	r5, r7, #3
 801b9f6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801b9fa:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801b9fe:	00ff      	lsls	r7, r7, #3
 801ba00:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801ba04:	1212      	asrs	r2, r2, #8
 801ba06:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ba0a:	b293      	uxth	r3, r2
 801ba0c:	43d2      	mvns	r2, r2
 801ba0e:	b2ff      	uxtb	r7, r7
 801ba10:	fb1e fe03 	smulbb	lr, lr, r3
 801ba14:	b2d2      	uxtb	r2, r2
 801ba16:	fb1c fc03 	smulbb	ip, ip, r3
 801ba1a:	b2e4      	uxtb	r4, r4
 801ba1c:	fb06 e602 	mla	r6, r6, r2, lr
 801ba20:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ba24:	fb14 f403 	smulbb	r4, r4, r3
 801ba28:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ba2c:	b2b6      	uxth	r6, r6
 801ba2e:	fb05 c502 	mla	r5, r5, r2, ip
 801ba32:	fb07 4702 	mla	r7, r7, r2, r4
 801ba36:	f106 0e01 	add.w	lr, r6, #1
 801ba3a:	b2ad      	uxth	r5, r5
 801ba3c:	b2bf      	uxth	r7, r7
 801ba3e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ba42:	f105 0c01 	add.w	ip, r5, #1
 801ba46:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801ba4a:	1c7e      	adds	r6, r7, #1
 801ba4c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ba50:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ba54:	096d      	lsrs	r5, r5, #5
 801ba56:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ba5a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ba5e:	ea46 060e 	orr.w	r6, r6, lr
 801ba62:	432e      	orrs	r6, r5
 801ba64:	8006      	strh	r6, [r0, #0]
 801ba66:	e7ba      	b.n	801b9de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ba68:	f8ba 3000 	ldrh.w	r3, [sl]
 801ba6c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 801ba70:	eba3 0308 	sub.w	r3, r3, r8
 801ba74:	eba4 0408 	sub.w	r4, r4, r8
 801ba78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ba7c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ba80:	e78b      	b.n	801b99a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801ba82:	4b03      	ldr	r3, [pc, #12]	@ (801ba90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801ba84:	6818      	ldr	r0, [r3, #0]
 801ba86:	6803      	ldr	r3, [r0, #0]
 801ba88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba8a:	4798      	blx	r3
 801ba8c:	e76a      	b.n	801b964 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ba8e:	bf00      	nop
 801ba90:	24004278 	.word	0x24004278
 801ba94:	24004272 	.word	0x24004272

0801ba98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801ba98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba9c:	b085      	sub	sp, #20
 801ba9e:	6810      	ldr	r0, [r2, #0]
 801baa0:	460c      	mov	r4, r1
 801baa2:	6851      	ldr	r1, [r2, #4]
 801baa4:	466d      	mov	r5, sp
 801baa6:	4616      	mov	r6, r2
 801baa8:	c503      	stmia	r5!, {r0, r1}
 801baaa:	6818      	ldr	r0, [r3, #0]
 801baac:	6859      	ldr	r1, [r3, #4]
 801baae:	c503      	stmia	r5!, {r0, r1}
 801bab0:	4668      	mov	r0, sp
 801bab2:	4d2e      	ldr	r5, [pc, #184]	@ (801bb6c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801bab4:	f7f8 fdfe 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bab8:	4631      	mov	r1, r6
 801baba:	a802      	add	r0, sp, #8
 801babc:	4e2c      	ldr	r6, [pc, #176]	@ (801bb70 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801babe:	f7f8 fe21 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bac2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801bac6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801baca:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801bace:	6828      	ldr	r0, [r5, #0]
 801bad0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bad4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801bad8:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801badc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801bae0:	f8bd 1000 	ldrh.w	r1, [sp]
 801bae4:	440a      	add	r2, r1
 801bae6:	f8ad 2008 	strh.w	r2, [sp, #8]
 801baea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801baee:	4413      	add	r3, r2
 801baf0:	f8ad 300a 	strh.w	r3, [sp, #10]
 801baf4:	6803      	ldr	r3, [r0, #0]
 801baf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801baf8:	4798      	blx	r3
 801bafa:	8833      	ldrh	r3, [r6, #0]
 801bafc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801bb00:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801bb04:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801bb08:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801bb74 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801bb0c:	fb03 1202 	mla	r2, r3, r2, r1
 801bb10:	fb08 f303 	mul.w	r3, r8, r3
 801bb14:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bb18:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bb1c:	4298      	cmp	r0, r3
 801bb1e:	d21d      	bcs.n	801bb5c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801bb20:	eb00 080c 	add.w	r8, r0, ip
 801bb24:	4540      	cmp	r0, r8
 801bb26:	d20f      	bcs.n	801bb48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801bb28:	f854 1b04 	ldr.w	r1, [r4], #4
 801bb2c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801bb30:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801bb34:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801bb38:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801bb3c:	ea42 0209 	orr.w	r2, r2, r9
 801bb40:	430a      	orrs	r2, r1
 801bb42:	f820 2b02 	strh.w	r2, [r0], #2
 801bb46:	e7ed      	b.n	801bb24 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801bb48:	8832      	ldrh	r2, [r6, #0]
 801bb4a:	1bd2      	subs	r2, r2, r7
 801bb4c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bb50:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801bb54:	1bd2      	subs	r2, r2, r7
 801bb56:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801bb5a:	e7df      	b.n	801bb1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801bb5c:	6828      	ldr	r0, [r5, #0]
 801bb5e:	6803      	ldr	r3, [r0, #0]
 801bb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb62:	4798      	blx	r3
 801bb64:	b005      	add	sp, #20
 801bb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb6a:	bf00      	nop
 801bb6c:	24004278 	.word	0x24004278
 801bb70:	24004272 	.word	0x24004272
 801bb74:	fffff800 	.word	0xfffff800

0801bb78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801bb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb7c:	b08e      	sub	sp, #56	@ 0x38
 801bb7e:	460e      	mov	r6, r1
 801bb80:	4604      	mov	r4, r0
 801bb82:	461d      	mov	r5, r3
 801bb84:	6808      	ldr	r0, [r1, #0]
 801bb86:	ab0a      	add	r3, sp, #40	@ 0x28
 801bb88:	6849      	ldr	r1, [r1, #4]
 801bb8a:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 801bd60 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801bb8e:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 801bd64 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801bb92:	c303      	stmia	r3!, {r0, r1}
 801bb94:	6810      	ldr	r0, [r2, #0]
 801bb96:	ab0c      	add	r3, sp, #48	@ 0x30
 801bb98:	6851      	ldr	r1, [r2, #4]
 801bb9a:	c303      	stmia	r3!, {r0, r1}
 801bb9c:	a80a      	add	r0, sp, #40	@ 0x28
 801bb9e:	f7f8 fd89 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bba2:	4631      	mov	r1, r6
 801bba4:	a80c      	add	r0, sp, #48	@ 0x30
 801bba6:	f7f8 fdad 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bbaa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801bbae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801bbb2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801bbb6:	f8d8 0000 	ldr.w	r0, [r8]
 801bbba:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bbbe:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801bbc2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801bbc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bbca:	440c      	add	r4, r1
 801bbcc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801bbd0:	440a      	add	r2, r1
 801bbd2:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801bbd6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801bbda:	4413      	add	r3, r2
 801bbdc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801bbe0:	6803      	ldr	r3, [r0, #0]
 801bbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bbe4:	4798      	blx	r3
 801bbe6:	2dff      	cmp	r5, #255	@ 0xff
 801bbe8:	d124      	bne.n	801bc34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801bbea:	f010 0f01 	tst.w	r0, #1
 801bbee:	f8d8 0000 	ldr.w	r0, [r8]
 801bbf2:	d022      	beq.n	801bc3a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801bbf4:	2100      	movs	r1, #0
 801bbf6:	f04f 0e01 	mov.w	lr, #1
 801bbfa:	f8d0 c000 	ldr.w	ip, [r0]
 801bbfe:	b2b6      	uxth	r6, r6
 801bc00:	f8cd e018 	str.w	lr, [sp, #24]
 801bc04:	b2bf      	uxth	r7, r7
 801bc06:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801bc0a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801bc0e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801bc12:	f8b9 e000 	ldrh.w	lr, [r9]
 801bc16:	9503      	str	r5, [sp, #12]
 801bc18:	9601      	str	r6, [sp, #4]
 801bc1a:	9700      	str	r7, [sp, #0]
 801bc1c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801bc20:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801bc24:	9102      	str	r1, [sp, #8]
 801bc26:	4621      	mov	r1, r4
 801bc28:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 801bc2c:	47a8      	blx	r5
 801bc2e:	b00e      	add	sp, #56	@ 0x38
 801bc30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc34:	f010 0f04 	tst.w	r0, #4
 801bc38:	e7d9      	b.n	801bbee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801bc3a:	6803      	ldr	r3, [r0, #0]
 801bc3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc3e:	4798      	blx	r3
 801bc40:	f8b9 3000 	ldrh.w	r3, [r9]
 801bc44:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bc48:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801bc4c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801bc50:	435e      	muls	r6, r3
 801bc52:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801bc56:	2dff      	cmp	r5, #255	@ 0xff
 801bc58:	fb03 1202 	mla	r2, r3, r2, r1
 801bc5c:	ebac 0c07 	sub.w	ip, ip, r7
 801bc60:	eba3 0707 	sub.w	r7, r3, r7
 801bc64:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bc68:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bc6c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801bc70:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801bc74:	d049      	beq.n	801bd0a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801bc76:	43eb      	mvns	r3, r5
 801bc78:	fa1f f985 	uxth.w	r9, r5
 801bc7c:	b2db      	uxtb	r3, r3
 801bc7e:	42b0      	cmp	r0, r6
 801bc80:	d266      	bcs.n	801bd50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801bc82:	eb00 0a0e 	add.w	sl, r0, lr
 801bc86:	4550      	cmp	r0, sl
 801bc88:	4621      	mov	r1, r4
 801bc8a:	f104 0403 	add.w	r4, r4, #3
 801bc8e:	d25b      	bcs.n	801bd48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801bc90:	8802      	ldrh	r2, [r0, #0]
 801bc92:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801bc96:	ea4f 2822 	mov.w	r8, r2, asr #8
 801bc9a:	fb11 f109 	smulbb	r1, r1, r9
 801bc9e:	10d5      	asrs	r5, r2, #3
 801bca0:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801bca4:	00d2      	lsls	r2, r2, #3
 801bca6:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801bcaa:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801bcae:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801bcb2:	fb08 1803 	mla	r8, r8, r3, r1
 801bcb6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801bcba:	b2d2      	uxtb	r2, r2
 801bcbc:	fb11 f109 	smulbb	r1, r1, r9
 801bcc0:	fa1f f888 	uxth.w	r8, r8
 801bcc4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bcc8:	fb05 1503 	mla	r5, r5, r3, r1
 801bccc:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801bcd0:	fb11 f109 	smulbb	r1, r1, r9
 801bcd4:	b2ad      	uxth	r5, r5
 801bcd6:	fb02 1203 	mla	r2, r2, r3, r1
 801bcda:	f108 0101 	add.w	r1, r8, #1
 801bcde:	b292      	uxth	r2, r2
 801bce0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801bce4:	1c51      	adds	r1, r2, #1
 801bce6:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801bcea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bcee:	1c69      	adds	r1, r5, #1
 801bcf0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801bcf4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bcf8:	096d      	lsrs	r5, r5, #5
 801bcfa:	ea42 0208 	orr.w	r2, r2, r8
 801bcfe:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801bd02:	432a      	orrs	r2, r5
 801bd04:	f820 2b02 	strh.w	r2, [r0], #2
 801bd08:	e7bd      	b.n	801bc86 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801bd0a:	4a14      	ldr	r2, [pc, #80]	@ (801bd5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801bd0c:	42b0      	cmp	r0, r6
 801bd0e:	d21f      	bcs.n	801bd50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801bd10:	eb00 050e 	add.w	r5, r0, lr
 801bd14:	42a8      	cmp	r0, r5
 801bd16:	4621      	mov	r1, r4
 801bd18:	f104 0403 	add.w	r4, r4, #3
 801bd1c:	d210      	bcs.n	801bd40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801bd1e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801bd22:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801bd26:	00db      	lsls	r3, r3, #3
 801bd28:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801bd2c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801bd30:	430b      	orrs	r3, r1
 801bd32:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801bd36:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801bd3a:	f820 3b02 	strh.w	r3, [r0], #2
 801bd3e:	e7e9      	b.n	801bd14 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801bd40:	4438      	add	r0, r7
 801bd42:	eb01 040c 	add.w	r4, r1, ip
 801bd46:	e7e1      	b.n	801bd0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801bd48:	4438      	add	r0, r7
 801bd4a:	eb01 040c 	add.w	r4, r1, ip
 801bd4e:	e796      	b.n	801bc7e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801bd50:	4b03      	ldr	r3, [pc, #12]	@ (801bd60 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801bd52:	6818      	ldr	r0, [r3, #0]
 801bd54:	6803      	ldr	r3, [r0, #0]
 801bd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd58:	4798      	blx	r3
 801bd5a:	e768      	b.n	801bc2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801bd5c:	fffff800 	.word	0xfffff800
 801bd60:	24004278 	.word	0x24004278
 801bd64:	24004272 	.word	0x24004272

0801bd68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801bd68:	b4f0      	push	{r4, r5, r6, r7}
 801bd6a:	4616      	mov	r6, r2
 801bd6c:	461c      	mov	r4, r3
 801bd6e:	460d      	mov	r5, r1
 801bd70:	9a04      	ldr	r2, [sp, #16]
 801bd72:	2e01      	cmp	r6, #1
 801bd74:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801bd78:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801bd7c:	d012      	beq.n	801bda4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801bd7e:	d303      	bcc.n	801bd88 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801bd80:	2e02      	cmp	r6, #2
 801bd82:	d00a      	beq.n	801bd9a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801bd84:	bcf0      	pop	{r4, r5, r6, r7}
 801bd86:	4770      	bx	lr
 801bd88:	6805      	ldr	r5, [r0, #0]
 801bd8a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801bd8e:	68ed      	ldr	r5, [r5, #12]
 801bd90:	4613      	mov	r3, r2
 801bd92:	4622      	mov	r2, r4
 801bd94:	46ac      	mov	ip, r5
 801bd96:	bcf0      	pop	{r4, r5, r6, r7}
 801bd98:	4760      	bx	ip
 801bd9a:	4621      	mov	r1, r4
 801bd9c:	4628      	mov	r0, r5
 801bd9e:	bcf0      	pop	{r4, r5, r6, r7}
 801bda0:	f7ff bd94 	b.w	801b8cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801bda4:	4621      	mov	r1, r4
 801bda6:	4628      	mov	r0, r5
 801bda8:	bcf0      	pop	{r4, r5, r6, r7}
 801bdaa:	f7ff bee5 	b.w	801bb78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801bdb0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdb4:	b093      	sub	sp, #76	@ 0x4c
 801bdb6:	4681      	mov	r9, r0
 801bdb8:	4688      	mov	r8, r1
 801bdba:	6810      	ldr	r0, [r2, #0]
 801bdbc:	6851      	ldr	r1, [r2, #4]
 801bdbe:	ac0e      	add	r4, sp, #56	@ 0x38
 801bdc0:	4616      	mov	r6, r2
 801bdc2:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 801bdc6:	4f6b      	ldr	r7, [pc, #428]	@ (801bf74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801bdc8:	c403      	stmia	r4!, {r0, r1}
 801bdca:	6818      	ldr	r0, [r3, #0]
 801bdcc:	ac10      	add	r4, sp, #64	@ 0x40
 801bdce:	6859      	ldr	r1, [r3, #4]
 801bdd0:	c403      	stmia	r4!, {r0, r1}
 801bdd2:	a80e      	add	r0, sp, #56	@ 0x38
 801bdd4:	f7f8 fc6e 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bdd8:	4631      	mov	r1, r6
 801bdda:	a810      	add	r0, sp, #64	@ 0x40
 801bddc:	4e66      	ldr	r6, [pc, #408]	@ (801bf78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801bdde:	f7f8 fc91 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bde2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801bde6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801bdea:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 801bdee:	6830      	ldr	r0, [r6, #0]
 801bdf0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bdf4:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 801bdf8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801bdfc:	4489      	add	r9, r1
 801bdfe:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 801be02:	440a      	add	r2, r1
 801be04:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801be08:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801be0c:	4413      	add	r3, r2
 801be0e:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801be12:	6803      	ldr	r3, [r0, #0]
 801be14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be16:	4798      	blx	r3
 801be18:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801be1c:	6830      	ldr	r0, [r6, #0]
 801be1e:	d01d      	beq.n	801be5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801be20:	2200      	movs	r2, #0
 801be22:	6801      	ldr	r1, [r0, #0]
 801be24:	b2a4      	uxth	r4, r4
 801be26:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801be2a:	b2ad      	uxth	r5, r5
 801be2c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801be30:	220b      	movs	r2, #11
 801be32:	9207      	str	r2, [sp, #28]
 801be34:	883a      	ldrh	r2, [r7, #0]
 801be36:	9502      	str	r5, [sp, #8]
 801be38:	9206      	str	r2, [sp, #24]
 801be3a:	2201      	movs	r2, #1
 801be3c:	9401      	str	r4, [sp, #4]
 801be3e:	e9cd a204 	strd	sl, r2, [sp, #16]
 801be42:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 801be46:	9203      	str	r2, [sp, #12]
 801be48:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801be4c:	9200      	str	r2, [sp, #0]
 801be4e:	4642      	mov	r2, r8
 801be50:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801be52:	4649      	mov	r1, r9
 801be54:	47a0      	blx	r4
 801be56:	b013      	add	sp, #76	@ 0x4c
 801be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be5c:	6803      	ldr	r3, [r0, #0]
 801be5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be60:	4798      	blx	r3
 801be62:	883b      	ldrh	r3, [r7, #0]
 801be64:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801be68:	f04f 0e04 	mov.w	lr, #4
 801be6c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 801be70:	435d      	muls	r5, r3
 801be72:	fb03 1202 	mla	r2, r3, r2, r1
 801be76:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801be7a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801be7e:	920c      	str	r2, [sp, #48]	@ 0x30
 801be80:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801be84:	1b12      	subs	r2, r2, r4
 801be86:	920d      	str	r2, [sp, #52]	@ 0x34
 801be88:	0062      	lsls	r2, r4, #1
 801be8a:	1b1c      	subs	r4, r3, r4
 801be8c:	920a      	str	r2, [sp, #40]	@ 0x28
 801be8e:	0063      	lsls	r3, r4, #1
 801be90:	930b      	str	r3, [sp, #44]	@ 0x2c
 801be92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801be94:	4298      	cmp	r0, r3
 801be96:	d266      	bcs.n	801bf66 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801be98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be9a:	eb00 0b03 	add.w	fp, r0, r3
 801be9e:	4558      	cmp	r0, fp
 801bea0:	d25c      	bcs.n	801bf5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801bea2:	f819 3b01 	ldrb.w	r3, [r9], #1
 801bea6:	fb1e e303 	smlabb	r3, lr, r3, lr
 801beaa:	f858 2003 	ldr.w	r2, [r8, r3]
 801beae:	0e11      	lsrs	r1, r2, #24
 801beb0:	d012      	beq.n	801bed8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801beb2:	29ff      	cmp	r1, #255	@ 0xff
 801beb4:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801beb8:	d110      	bne.n	801bedc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801beba:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801bebe:	d10d      	bne.n	801bedc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801bec0:	0953      	lsrs	r3, r2, #5
 801bec2:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 801bec6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801beca:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801bece:	f027 0707 	bic.w	r7, r7, #7
 801bed2:	431f      	orrs	r7, r3
 801bed4:	433a      	orrs	r2, r7
 801bed6:	8002      	strh	r2, [r0, #0]
 801bed8:	3002      	adds	r0, #2
 801beda:	e7e0      	b.n	801be9e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801bedc:	fb0a f101 	mul.w	r1, sl, r1
 801bee0:	8806      	ldrh	r6, [r0, #0]
 801bee2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801bee6:	b2d2      	uxtb	r2, r2
 801bee8:	1c4b      	adds	r3, r1, #1
 801beea:	1235      	asrs	r5, r6, #8
 801beec:	10f4      	asrs	r4, r6, #3
 801beee:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801bef2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801bef6:	00f6      	lsls	r6, r6, #3
 801bef8:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801befc:	121b      	asrs	r3, r3, #8
 801befe:	b2f6      	uxtb	r6, r6
 801bf00:	b299      	uxth	r1, r3
 801bf02:	43db      	mvns	r3, r3
 801bf04:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801bf08:	fb1c fc01 	smulbb	ip, ip, r1
 801bf0c:	b2db      	uxtb	r3, r3
 801bf0e:	fb12 f201 	smulbb	r2, r2, r1
 801bf12:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801bf16:	fb05 c503 	mla	r5, r5, r3, ip
 801bf1a:	b2ff      	uxtb	r7, r7
 801bf1c:	fb06 2203 	mla	r2, r6, r3, r2
 801bf20:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801bf24:	fb17 f701 	smulbb	r7, r7, r1
 801bf28:	b2ad      	uxth	r5, r5
 801bf2a:	b292      	uxth	r2, r2
 801bf2c:	fb04 7403 	mla	r4, r4, r3, r7
 801bf30:	f105 0c01 	add.w	ip, r5, #1
 801bf34:	1c57      	adds	r7, r2, #1
 801bf36:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801bf3a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801bf3e:	b2a4      	uxth	r4, r4
 801bf40:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801bf44:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801bf48:	433d      	orrs	r5, r7
 801bf4a:	1c67      	adds	r7, r4, #1
 801bf4c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801bf50:	0964      	lsrs	r4, r4, #5
 801bf52:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801bf56:	4325      	orrs	r5, r4
 801bf58:	8005      	strh	r5, [r0, #0]
 801bf5a:	e7bd      	b.n	801bed8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801bf5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf5e:	4418      	add	r0, r3
 801bf60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bf62:	4499      	add	r9, r3
 801bf64:	e795      	b.n	801be92 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801bf66:	4b04      	ldr	r3, [pc, #16]	@ (801bf78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801bf68:	6818      	ldr	r0, [r3, #0]
 801bf6a:	6803      	ldr	r3, [r0, #0]
 801bf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bf6e:	4798      	blx	r3
 801bf70:	e771      	b.n	801be56 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801bf72:	bf00      	nop
 801bf74:	24004272 	.word	0x24004272
 801bf78:	24004278 	.word	0x24004278

0801bf7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf80:	b087      	sub	sp, #28
 801bf82:	4680      	mov	r8, r0
 801bf84:	460d      	mov	r5, r1
 801bf86:	4614      	mov	r4, r2
 801bf88:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 801bf8c:	2e00      	cmp	r6, #0
 801bf8e:	f000 80b9 	beq.w	801c104 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801bf92:	6810      	ldr	r0, [r2, #0]
 801bf94:	af02      	add	r7, sp, #8
 801bf96:	6851      	ldr	r1, [r2, #4]
 801bf98:	c703      	stmia	r7!, {r0, r1}
 801bf9a:	6818      	ldr	r0, [r3, #0]
 801bf9c:	af04      	add	r7, sp, #16
 801bf9e:	6859      	ldr	r1, [r3, #4]
 801bfa0:	c703      	stmia	r7!, {r0, r1}
 801bfa2:	a802      	add	r0, sp, #8
 801bfa4:	f7f8 fb86 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bfa8:	4621      	mov	r1, r4
 801bfaa:	a804      	add	r0, sp, #16
 801bfac:	f7f8 fbaa 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bfb0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801bfb4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801bfb8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801bfbc:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801bfc0:	fb14 2103 	smlabb	r1, r4, r3, r2
 801bfc4:	eb08 0401 	add.w	r4, r8, r1
 801bfc8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801bfcc:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801bfd0:	440a      	add	r2, r1
 801bfd2:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801bfd6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bfda:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801bfde:	4413      	add	r3, r2
 801bfe0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bfe4:	4b49      	ldr	r3, [pc, #292]	@ (801c10c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801bfe6:	6818      	ldr	r0, [r3, #0]
 801bfe8:	6803      	ldr	r3, [r0, #0]
 801bfea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bfec:	4798      	blx	r3
 801bfee:	4b48      	ldr	r3, [pc, #288]	@ (801c110 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801bff0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801bff4:	2eff      	cmp	r6, #255	@ 0xff
 801bff6:	881a      	ldrh	r2, [r3, #0]
 801bff8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801bffc:	fb02 c101 	mla	r1, r2, r1, ip
 801c000:	fb02 f207 	mul.w	r2, r2, r7
 801c004:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c008:	f105 0104 	add.w	r1, r5, #4
 801c00c:	461d      	mov	r5, r3
 801c00e:	d05a      	beq.n	801c0c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801c010:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 801c014:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c018:	b2b6      	uxth	r6, r6
 801c01a:	9301      	str	r3, [sp, #4]
 801c01c:	fa1f fe8e 	uxth.w	lr, lr
 801c020:	4282      	cmp	r2, r0
 801c022:	d96a      	bls.n	801c0fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801c024:	eb00 0b0a 	add.w	fp, r0, sl
 801c028:	4583      	cmp	fp, r0
 801c02a:	d940      	bls.n	801c0ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801c02c:	8805      	ldrh	r5, [r0, #0]
 801c02e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c032:	122f      	asrs	r7, r5, #8
 801c034:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801c038:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c03c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c040:	00ed      	lsls	r5, r5, #3
 801c042:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c046:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801c04a:	fb17 f70e 	smulbb	r7, r7, lr
 801c04e:	b2ed      	uxtb	r5, r5
 801c050:	fb19 f90e 	smulbb	r9, r9, lr
 801c054:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c058:	fb15 f50e 	smulbb	r5, r5, lr
 801c05c:	fb0c 7c06 	mla	ip, ip, r6, r7
 801c060:	10df      	asrs	r7, r3, #3
 801c062:	00db      	lsls	r3, r3, #3
 801c064:	fa1f fc8c 	uxth.w	ip, ip
 801c068:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c06c:	b2db      	uxtb	r3, r3
 801c06e:	fb07 9706 	mla	r7, r7, r6, r9
 801c072:	f10c 0901 	add.w	r9, ip, #1
 801c076:	fb03 5306 	mla	r3, r3, r6, r5
 801c07a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801c07e:	b29b      	uxth	r3, r3
 801c080:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 801c084:	b2bf      	uxth	r7, r7
 801c086:	f103 0c01 	add.w	ip, r3, #1
 801c08a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c08e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c092:	ea4c 0c09 	orr.w	ip, ip, r9
 801c096:	f107 0901 	add.w	r9, r7, #1
 801c09a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801c09e:	097f      	lsrs	r7, r7, #5
 801c0a0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801c0a4:	ea4c 0c07 	orr.w	ip, ip, r7
 801c0a8:	f820 cb02 	strh.w	ip, [r0], #2
 801c0ac:	e7bc      	b.n	801c028 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801c0ae:	9b01      	ldr	r3, [sp, #4]
 801c0b0:	881b      	ldrh	r3, [r3, #0]
 801c0b2:	eba3 0308 	sub.w	r3, r3, r8
 801c0b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c0ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c0be:	eba3 0308 	sub.w	r3, r3, r8
 801c0c2:	441c      	add	r4, r3
 801c0c4:	e7ac      	b.n	801c020 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801c0c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c0ca:	4282      	cmp	r2, r0
 801c0cc:	d915      	bls.n	801c0fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801c0ce:	eb00 060a 	add.w	r6, r0, sl
 801c0d2:	4286      	cmp	r6, r0
 801c0d4:	d906      	bls.n	801c0e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801c0d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c0da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801c0de:	f820 3b02 	strh.w	r3, [r0], #2
 801c0e2:	e7f6      	b.n	801c0d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801c0e4:	882b      	ldrh	r3, [r5, #0]
 801c0e6:	eba3 0308 	sub.w	r3, r3, r8
 801c0ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c0ee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c0f2:	eba3 0308 	sub.w	r3, r3, r8
 801c0f6:	441c      	add	r4, r3
 801c0f8:	e7e7      	b.n	801c0ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801c0fa:	4b04      	ldr	r3, [pc, #16]	@ (801c10c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801c0fc:	6818      	ldr	r0, [r3, #0]
 801c0fe:	6803      	ldr	r3, [r0, #0]
 801c100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c102:	4798      	blx	r3
 801c104:	b007      	add	sp, #28
 801c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c10a:	bf00      	nop
 801c10c:	24004278 	.word	0x24004278
 801c110:	24004272 	.word	0x24004272

0801c114 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801c114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c118:	b091      	sub	sp, #68	@ 0x44
 801c11a:	4680      	mov	r8, r0
 801c11c:	460f      	mov	r7, r1
 801c11e:	4614      	mov	r4, r2
 801c120:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 801c124:	2d00      	cmp	r5, #0
 801c126:	d051      	beq.n	801c1cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801c128:	6810      	ldr	r0, [r2, #0]
 801c12a:	ae0c      	add	r6, sp, #48	@ 0x30
 801c12c:	6851      	ldr	r1, [r2, #4]
 801c12e:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 801c330 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801c132:	c603      	stmia	r6!, {r0, r1}
 801c134:	6818      	ldr	r0, [r3, #0]
 801c136:	ae0e      	add	r6, sp, #56	@ 0x38
 801c138:	6859      	ldr	r1, [r3, #4]
 801c13a:	c603      	stmia	r6!, {r0, r1}
 801c13c:	a80c      	add	r0, sp, #48	@ 0x30
 801c13e:	f7f8 fab9 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c142:	4621      	mov	r1, r4
 801c144:	a80e      	add	r0, sp, #56	@ 0x38
 801c146:	f7f8 fadd 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c14a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801c14e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801c152:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801c156:	f8d9 0000 	ldr.w	r0, [r9]
 801c15a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c15e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801c162:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 801c166:	eb08 0401 	add.w	r4, r8, r1
 801c16a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801c16e:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 801c334 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801c172:	440a      	add	r2, r1
 801c174:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801c178:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801c17c:	4413      	add	r3, r2
 801c17e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801c182:	6803      	ldr	r3, [r0, #0]
 801c184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c186:	4798      	blx	r3
 801c188:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801c18c:	f8d9 0000 	ldr.w	r0, [r9]
 801c190:	d01f      	beq.n	801c1d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801c192:	2200      	movs	r2, #0
 801c194:	6801      	ldr	r1, [r0, #0]
 801c196:	b2b6      	uxth	r6, r6
 801c198:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801c19c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801c1a0:	220b      	movs	r2, #11
 801c1a2:	9207      	str	r2, [sp, #28]
 801c1a4:	f8b8 2000 	ldrh.w	r2, [r8]
 801c1a8:	9601      	str	r6, [sp, #4]
 801c1aa:	9206      	str	r2, [sp, #24]
 801c1ac:	2201      	movs	r2, #1
 801c1ae:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801c1b2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801c1b6:	9203      	str	r2, [sp, #12]
 801c1b8:	fa1f f28a 	uxth.w	r2, sl
 801c1bc:	9202      	str	r2, [sp, #8]
 801c1be:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801c1c2:	9200      	str	r2, [sp, #0]
 801c1c4:	463a      	mov	r2, r7
 801c1c6:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801c1c8:	4621      	mov	r1, r4
 801c1ca:	47a8      	blx	r5
 801c1cc:	b011      	add	sp, #68	@ 0x44
 801c1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1d2:	6803      	ldr	r3, [r0, #0]
 801c1d4:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801c1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1da:	4798      	blx	r3
 801c1dc:	f8b8 2000 	ldrh.w	r2, [r8]
 801c1e0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801c1e4:	2dff      	cmp	r5, #255	@ 0xff
 801c1e6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801c1ea:	fb0a fa02 	mul.w	sl, sl, r2
 801c1ee:	fb02 1303 	mla	r3, r2, r3, r1
 801c1f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c1f6:	d062      	beq.n	801c2be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801c1f8:	ea6f 0c05 	mvn.w	ip, r5
 801c1fc:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801c200:	b2ad      	uxth	r5, r5
 801c202:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801c206:	fa5f fc8c 	uxtb.w	ip, ip
 801c20a:	930a      	str	r3, [sp, #40]	@ 0x28
 801c20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c20e:	4298      	cmp	r0, r3
 801c210:	f080 8085 	bcs.w	801c31e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801c214:	eb00 0b09 	add.w	fp, r0, r9
 801c218:	4558      	cmp	r0, fp
 801c21a:	d246      	bcs.n	801c2aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801c21c:	f814 eb01 	ldrb.w	lr, [r4], #1
 801c220:	2303      	movs	r3, #3
 801c222:	2204      	movs	r2, #4
 801c224:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801c228:	8803      	ldrh	r3, [r0, #0]
 801c22a:	eb07 0a0e 	add.w	sl, r7, lr
 801c22e:	1219      	asrs	r1, r3, #8
 801c230:	10da      	asrs	r2, r3, #3
 801c232:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c236:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801c23a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801c23e:	00db      	lsls	r3, r3, #3
 801c240:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801c244:	fb18 f805 	smulbb	r8, r8, r5
 801c248:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801c24c:	fb1e fe05 	smulbb	lr, lr, r5
 801c250:	b2db      	uxtb	r3, r3
 801c252:	fb01 810c 	mla	r1, r1, ip, r8
 801c256:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801c25a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801c25e:	fb18 f805 	smulbb	r8, r8, r5
 801c262:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801c266:	b289      	uxth	r1, r1
 801c268:	fb02 820c 	mla	r2, r2, ip, r8
 801c26c:	fb03 e30c 	mla	r3, r3, ip, lr
 801c270:	f101 0801 	add.w	r8, r1, #1
 801c274:	b292      	uxth	r2, r2
 801c276:	b29b      	uxth	r3, r3
 801c278:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c27c:	f102 0801 	add.w	r8, r2, #1
 801c280:	f103 0e01 	add.w	lr, r3, #1
 801c284:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801c288:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801c28c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801c290:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c294:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801c298:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801c29c:	ea4e 0101 	orr.w	r1, lr, r1
 801c2a0:	ea41 0108 	orr.w	r1, r1, r8
 801c2a4:	f820 1b02 	strh.w	r1, [r0], #2
 801c2a8:	e7b6      	b.n	801c218 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801c2aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c2ac:	881b      	ldrh	r3, [r3, #0]
 801c2ae:	1b9b      	subs	r3, r3, r6
 801c2b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c2b4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801c2b8:	1b9b      	subs	r3, r3, r6
 801c2ba:	441c      	add	r4, r3
 801c2bc:	e7a6      	b.n	801c20c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801c2be:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801c2c2:	2203      	movs	r2, #3
 801c2c4:	2504      	movs	r5, #4
 801c2c6:	4919      	ldr	r1, [pc, #100]	@ (801c32c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801c2c8:	4550      	cmp	r0, sl
 801c2ca:	d228      	bcs.n	801c31e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801c2cc:	eb00 0c09 	add.w	ip, r0, r9
 801c2d0:	4560      	cmp	r0, ip
 801c2d2:	4623      	mov	r3, r4
 801c2d4:	d219      	bcs.n	801c30a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801c2d6:	f893 e000 	ldrb.w	lr, [r3]
 801c2da:	3401      	adds	r4, #1
 801c2dc:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801c2e0:	eb07 0b0e 	add.w	fp, r7, lr
 801c2e4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c2e8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801c2ec:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c2f0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801c2f4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801c2f8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801c2fc:	ea43 030b 	orr.w	r3, r3, fp
 801c300:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801c304:	f820 3b02 	strh.w	r3, [r0], #2
 801c308:	e7e2      	b.n	801c2d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801c30a:	f8b8 3000 	ldrh.w	r3, [r8]
 801c30e:	1b9b      	subs	r3, r3, r6
 801c310:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c314:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801c318:	1b9b      	subs	r3, r3, r6
 801c31a:	441c      	add	r4, r3
 801c31c:	e7d4      	b.n	801c2c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801c31e:	4b04      	ldr	r3, [pc, #16]	@ (801c330 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801c320:	6818      	ldr	r0, [r3, #0]
 801c322:	6803      	ldr	r3, [r0, #0]
 801c324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c326:	4798      	blx	r3
 801c328:	e750      	b.n	801c1cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801c32a:	bf00      	nop
 801c32c:	fffff800 	.word	0xfffff800
 801c330:	24004278 	.word	0x24004278
 801c334:	24004272 	.word	0x24004272

0801c338 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801c338:	b4f0      	push	{r4, r5, r6, r7}
 801c33a:	460c      	mov	r4, r1
 801c33c:	4611      	mov	r1, r2
 801c33e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c342:	461a      	mov	r2, r3
 801c344:	780f      	ldrb	r7, [r1, #0]
 801c346:	9b04      	ldr	r3, [sp, #16]
 801c348:	2f01      	cmp	r7, #1
 801c34a:	784e      	ldrb	r6, [r1, #1]
 801c34c:	d038      	beq.n	801c3c0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 801c34e:	d31f      	bcc.n	801c390 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 801c350:	2f02      	cmp	r7, #2
 801c352:	d14d      	bne.n	801c3f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c354:	2e03      	cmp	r6, #3
 801c356:	d84b      	bhi.n	801c3f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c358:	e8df f006 	tbb	[pc, r6]
 801c35c:	17140702 	.word	0x17140702
 801c360:	9504      	str	r5, [sp, #16]
 801c362:	4620      	mov	r0, r4
 801c364:	bcf0      	pop	{r4, r5, r6, r7}
 801c366:	f7ff be09 	b.w	801bf7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801c36a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801c36c:	2800      	cmp	r0, #0
 801c36e:	d03f      	beq.n	801c3f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c370:	6806      	ldr	r6, [r0, #0]
 801c372:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c376:	68b5      	ldr	r5, [r6, #8]
 801c378:	4613      	mov	r3, r2
 801c37a:	46ac      	mov	ip, r5
 801c37c:	460a      	mov	r2, r1
 801c37e:	4621      	mov	r1, r4
 801c380:	bcf0      	pop	{r4, r5, r6, r7}
 801c382:	4760      	bx	ip
 801c384:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801c388:	e7f0      	b.n	801c36c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801c38a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801c38e:	e7ed      	b.n	801c36c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801c390:	2e03      	cmp	r6, #3
 801c392:	d82d      	bhi.n	801c3f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c394:	e8df f006 	tbb	[pc, r6]
 801c398:	110e0702 	.word	0x110e0702
 801c39c:	9504      	str	r5, [sp, #16]
 801c39e:	4620      	mov	r0, r4
 801c3a0:	bcf0      	pop	{r4, r5, r6, r7}
 801c3a2:	f7ff bd05 	b.w	801bdb0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801c3a6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801c3a8:	b310      	cbz	r0, 801c3f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c3aa:	6806      	ldr	r6, [r0, #0]
 801c3ac:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c3b0:	68f5      	ldr	r5, [r6, #12]
 801c3b2:	e7e1      	b.n	801c378 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801c3b4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801c3b8:	e7f6      	b.n	801c3a8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801c3ba:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801c3be:	e7f3      	b.n	801c3a8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801c3c0:	2e03      	cmp	r6, #3
 801c3c2:	d815      	bhi.n	801c3f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c3c4:	e8df f006 	tbb	[pc, r6]
 801c3c8:	110e0702 	.word	0x110e0702
 801c3cc:	9504      	str	r5, [sp, #16]
 801c3ce:	4620      	mov	r0, r4
 801c3d0:	bcf0      	pop	{r4, r5, r6, r7}
 801c3d2:	f7ff be9f 	b.w	801c114 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801c3d6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801c3d8:	b150      	cbz	r0, 801c3f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c3da:	6806      	ldr	r6, [r0, #0]
 801c3dc:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c3e0:	6935      	ldr	r5, [r6, #16]
 801c3e2:	e7c9      	b.n	801c378 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801c3e4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801c3e8:	e7f6      	b.n	801c3d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801c3ea:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801c3ee:	e7f3      	b.n	801c3d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801c3f0:	bcf0      	pop	{r4, r5, r6, r7}
 801c3f2:	4770      	bx	lr

0801c3f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801c3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3f8:	b087      	sub	sp, #28
 801c3fa:	4604      	mov	r4, r0
 801c3fc:	460e      	mov	r6, r1
 801c3fe:	6810      	ldr	r0, [r2, #0]
 801c400:	6851      	ldr	r1, [r2, #4]
 801c402:	ad02      	add	r5, sp, #8
 801c404:	4617      	mov	r7, r2
 801c406:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 801c40a:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 801c63c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801c40e:	c503      	stmia	r5!, {r0, r1}
 801c410:	6818      	ldr	r0, [r3, #0]
 801c412:	ad04      	add	r5, sp, #16
 801c414:	6859      	ldr	r1, [r3, #4]
 801c416:	c503      	stmia	r5!, {r0, r1}
 801c418:	a802      	add	r0, sp, #8
 801c41a:	f7f8 f94b 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c41e:	4639      	mov	r1, r7
 801c420:	a804      	add	r0, sp, #16
 801c422:	f7f8 f96f 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c426:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c42a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c42e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c432:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801c436:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c43a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801c43e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801c442:	440e      	add	r6, r1
 801c444:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c448:	440a      	add	r2, r1
 801c44a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c44e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c452:	4413      	add	r3, r2
 801c454:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c458:	4b77      	ldr	r3, [pc, #476]	@ (801c638 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801c45a:	6818      	ldr	r0, [r3, #0]
 801c45c:	6803      	ldr	r3, [r0, #0]
 801c45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c460:	4798      	blx	r3
 801c462:	f8b9 b000 	ldrh.w	fp, [r9]
 801c466:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c46a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801c46e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c472:	fb05 f50b 	mul.w	r5, r5, fp
 801c476:	fb0b 2303 	mla	r3, fp, r3, r2
 801c47a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c47e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c482:	9300      	str	r3, [sp, #0]
 801c484:	d069      	beq.n	801c55a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801c486:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801c48a:	4558      	cmp	r0, fp
 801c48c:	f080 80cc 	bcs.w	801c628 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801c490:	9b00      	ldr	r3, [sp, #0]
 801c492:	4631      	mov	r1, r6
 801c494:	18c3      	adds	r3, r0, r3
 801c496:	9301      	str	r3, [sp, #4]
 801c498:	9b01      	ldr	r3, [sp, #4]
 801c49a:	4298      	cmp	r0, r3
 801c49c:	d24f      	bcs.n	801c53e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801c49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c4a2:	2a00      	cmp	r2, #0
 801c4a4:	d048      	beq.n	801c538 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801c4a6:	fb0a f202 	mul.w	r2, sl, r2
 801c4aa:	1c53      	adds	r3, r2, #1
 801c4ac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c4b0:	121b      	asrs	r3, r3, #8
 801c4b2:	d041      	beq.n	801c538 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801c4b4:	8802      	ldrh	r2, [r0, #0]
 801c4b6:	b29e      	uxth	r6, r3
 801c4b8:	f8b4 c000 	ldrh.w	ip, [r4]
 801c4bc:	43db      	mvns	r3, r3
 801c4be:	1215      	asrs	r5, r2, #8
 801c4c0:	b2db      	uxtb	r3, r3
 801c4c2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c4c6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801c4ca:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801c4ce:	fb15 f503 	smulbb	r5, r5, r3
 801c4d2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c4d6:	00d2      	lsls	r2, r2, #3
 801c4d8:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801c4dc:	fb07 5706 	mla	r7, r7, r6, r5
 801c4e0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c4e4:	b2d2      	uxtb	r2, r2
 801c4e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c4ea:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801c4ee:	fb1e fe03 	smulbb	lr, lr, r3
 801c4f2:	b2bf      	uxth	r7, r7
 801c4f4:	fb12 f203 	smulbb	r2, r2, r3
 801c4f8:	fa5f fc8c 	uxtb.w	ip, ip
 801c4fc:	fb05 e506 	mla	r5, r5, r6, lr
 801c500:	f107 0e01 	add.w	lr, r7, #1
 801c504:	fb0c 2c06 	mla	ip, ip, r6, r2
 801c508:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c50c:	fa1f fc8c 	uxth.w	ip, ip
 801c510:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 801c514:	b2ad      	uxth	r5, r5
 801c516:	f10c 0701 	add.w	r7, ip, #1
 801c51a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c51e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c522:	ea47 070e 	orr.w	r7, r7, lr
 801c526:	f105 0e01 	add.w	lr, r5, #1
 801c52a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801c52e:	096d      	lsrs	r5, r5, #5
 801c530:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801c534:	432f      	orrs	r7, r5
 801c536:	8007      	strh	r7, [r0, #0]
 801c538:	3002      	adds	r0, #2
 801c53a:	3402      	adds	r4, #2
 801c53c:	e7ac      	b.n	801c498 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801c53e:	f8b9 3000 	ldrh.w	r3, [r9]
 801c542:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801c546:	eba3 0308 	sub.w	r3, r3, r8
 801c54a:	eba6 0608 	sub.w	r6, r6, r8
 801c54e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c552:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801c556:	440e      	add	r6, r1
 801c558:	e797      	b.n	801c48a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801c55a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801c55e:	42a8      	cmp	r0, r5
 801c560:	d262      	bcs.n	801c628 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801c562:	9b00      	ldr	r3, [sp, #0]
 801c564:	4631      	mov	r1, r6
 801c566:	eb00 0b03 	add.w	fp, r0, r3
 801c56a:	4558      	cmp	r0, fp
 801c56c:	d24e      	bcs.n	801c60c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801c56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c572:	b12b      	cbz	r3, 801c580 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801c574:	2bff      	cmp	r3, #255	@ 0xff
 801c576:	f8b4 e000 	ldrh.w	lr, [r4]
 801c57a:	d104      	bne.n	801c586 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801c57c:	f8a0 e000 	strh.w	lr, [r0]
 801c580:	3002      	adds	r0, #2
 801c582:	3402      	adds	r4, #2
 801c584:	e7f1      	b.n	801c56a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801c586:	8802      	ldrh	r2, [r0, #0]
 801c588:	b29f      	uxth	r7, r3
 801c58a:	43db      	mvns	r3, r3
 801c58c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c590:	1216      	asrs	r6, r2, #8
 801c592:	b2db      	uxtb	r3, r3
 801c594:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c598:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801c59c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801c5a0:	00d2      	lsls	r2, r2, #3
 801c5a2:	fb16 f603 	smulbb	r6, r6, r3
 801c5a6:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801c5aa:	b2d2      	uxtb	r2, r2
 801c5ac:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c5b0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c5b4:	fb1a fa03 	smulbb	sl, sl, r3
 801c5b8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c5bc:	fa1f fc8c 	uxth.w	ip, ip
 801c5c0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c5c4:	fb12 f303 	smulbb	r3, r2, r3
 801c5c8:	fa5f fe8e 	uxtb.w	lr, lr
 801c5cc:	fb06 a607 	mla	r6, r6, r7, sl
 801c5d0:	f10c 0201 	add.w	r2, ip, #1
 801c5d4:	fb0e 3307 	mla	r3, lr, r7, r3
 801c5d8:	b2b6      	uxth	r6, r6
 801c5da:	b29b      	uxth	r3, r3
 801c5dc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c5e0:	f106 0a01 	add.w	sl, r6, #1
 801c5e4:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 801c5e8:	f103 0c01 	add.w	ip, r3, #1
 801c5ec:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801c5f0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c5f4:	0976      	lsrs	r6, r6, #5
 801c5f6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c5fa:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c5fe:	ea4c 0c02 	orr.w	ip, ip, r2
 801c602:	ea4c 0c06 	orr.w	ip, ip, r6
 801c606:	f8a0 c000 	strh.w	ip, [r0]
 801c60a:	e7b9      	b.n	801c580 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801c60c:	f8b9 3000 	ldrh.w	r3, [r9]
 801c610:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801c614:	eba3 0308 	sub.w	r3, r3, r8
 801c618:	eba6 0608 	sub.w	r6, r6, r8
 801c61c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c620:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801c624:	440e      	add	r6, r1
 801c626:	e79a      	b.n	801c55e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801c628:	4b03      	ldr	r3, [pc, #12]	@ (801c638 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801c62a:	6818      	ldr	r0, [r3, #0]
 801c62c:	6803      	ldr	r3, [r0, #0]
 801c62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c630:	4798      	blx	r3
 801c632:	b007      	add	sp, #28
 801c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c638:	24004278 	.word	0x24004278
 801c63c:	24004272 	.word	0x24004272

0801c640 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c644:	b089      	sub	sp, #36	@ 0x24
 801c646:	4682      	mov	sl, r0
 801c648:	460f      	mov	r7, r1
 801c64a:	4691      	mov	r9, r2
 801c64c:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801c650:	4698      	mov	r8, r3
 801c652:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c654:	2e00      	cmp	r6, #0
 801c656:	d03d      	beq.n	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c658:	4608      	mov	r0, r1
 801c65a:	f7fa fe43 	bl	80172e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c65e:	4605      	mov	r5, r0
 801c660:	4638      	mov	r0, r7
 801c662:	f7fa fe73 	bl	801734c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c666:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c66a:	4638      	mov	r0, r7
 801c66c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801c670:	f8ad 500c 	strh.w	r5, [sp, #12]
 801c674:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c678:	f7fa ff26 	bl	80174c8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c67c:	4605      	mov	r5, r0
 801c67e:	4638      	mov	r0, r7
 801c680:	f7fa ff52 	bl	8017528 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c684:	4681      	mov	r9, r0
 801c686:	4638      	mov	r0, r7
 801c688:	f7fa ffa2 	bl	80175d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c68c:	280b      	cmp	r0, #11
 801c68e:	d821      	bhi.n	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c690:	e8df f000 	tbb	[pc, r0]
 801c694:	2006aebe 	.word	0x2006aebe
 801c698:	20202020 	.word	0x20202020
 801c69c:	b5202020 	.word	0xb5202020
 801c6a0:	4bb0      	ldr	r3, [pc, #704]	@ (801c964 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801c6a2:	6818      	ldr	r0, [r3, #0]
 801c6a4:	6803      	ldr	r3, [r0, #0]
 801c6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c6a8:	4798      	blx	r3
 801c6aa:	2eff      	cmp	r6, #255	@ 0xff
 801c6ac:	d101      	bne.n	801c6b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801c6ae:	0683      	lsls	r3, r0, #26
 801c6b0:	d506      	bpl.n	801c6c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 801c6b2:	4633      	mov	r3, r6
 801c6b4:	4622      	mov	r2, r4
 801c6b6:	a902      	add	r1, sp, #8
 801c6b8:	4628      	mov	r0, r5
 801c6ba:	f7ff f907 	bl	801b8cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c6be:	e009      	b.n	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c6c0:	4638      	mov	r0, r7
 801c6c2:	f7fa fec9 	bl	8017458 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c6c6:	b940      	cbnz	r0, 801c6da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801c6c8:	4623      	mov	r3, r4
 801c6ca:	aa02      	add	r2, sp, #8
 801c6cc:	4629      	mov	r1, r5
 801c6ce:	4650      	mov	r0, sl
 801c6d0:	f7ff f9e2 	bl	801ba98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801c6d4:	b009      	add	sp, #36	@ 0x24
 801c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6da:	f10d 0818 	add.w	r8, sp, #24
 801c6de:	4639      	mov	r1, r7
 801c6e0:	af04      	add	r7, sp, #16
 801c6e2:	4640      	mov	r0, r8
 801c6e4:	f7fa fe66 	bl	80173b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c6e8:	e898 0003 	ldmia.w	r8, {r0, r1}
 801c6ec:	e887 0003 	stmia.w	r7, {r0, r1}
 801c6f0:	4638      	mov	r0, r7
 801c6f2:	4621      	mov	r1, r4
 801c6f4:	f7f6 f8ec 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 801c6f8:	4638      	mov	r0, r7
 801c6fa:	f7f6 f92c 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c6fe:	2800      	cmp	r0, #0
 801c700:	d1d7      	bne.n	801c6b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801c702:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c706:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c70a:	4293      	cmp	r3, r2
 801c70c:	dd12      	ble.n	801c734 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 801c70e:	1a9b      	subs	r3, r3, r2
 801c710:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c714:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c718:	f8ad 0018 	strh.w	r0, [sp, #24]
 801c71c:	4628      	mov	r0, r5
 801c71e:	f8ad 201a 	strh.w	r2, [sp, #26]
 801c722:	4642      	mov	r2, r8
 801c724:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c728:	a902      	add	r1, sp, #8
 801c72a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c72e:	4633      	mov	r3, r6
 801c730:	f7ff f8cc 	bl	801b8cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c734:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801c738:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c73c:	4293      	cmp	r3, r2
 801c73e:	dd12      	ble.n	801c766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 801c740:	1a9b      	subs	r3, r3, r2
 801c742:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801c746:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801c74a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c74e:	4642      	mov	r2, r8
 801c750:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c754:	4628      	mov	r0, r5
 801c756:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c75a:	23ff      	movs	r3, #255	@ 0xff
 801c75c:	f8ad 101e 	strh.w	r1, [sp, #30]
 801c760:	a902      	add	r1, sp, #8
 801c762:	f7ff f8b3 	bl	801b8cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c766:	463b      	mov	r3, r7
 801c768:	aa02      	add	r2, sp, #8
 801c76a:	4629      	mov	r1, r5
 801c76c:	4650      	mov	r0, sl
 801c76e:	f7ff f993 	bl	801ba98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801c772:	88a2      	ldrh	r2, [r4, #4]
 801c774:	8823      	ldrh	r3, [r4, #0]
 801c776:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c77a:	4413      	add	r3, r2
 801c77c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c780:	440a      	add	r2, r1
 801c782:	b29b      	uxth	r3, r3
 801c784:	b292      	uxth	r2, r2
 801c786:	b218      	sxth	r0, r3
 801c788:	b211      	sxth	r1, r2
 801c78a:	4288      	cmp	r0, r1
 801c78c:	dd12      	ble.n	801c7b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801c78e:	1a9b      	subs	r3, r3, r2
 801c790:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801c794:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801c798:	4642      	mov	r2, r8
 801c79a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801c79e:	a902      	add	r1, sp, #8
 801c7a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c7a4:	23ff      	movs	r3, #255	@ 0xff
 801c7a6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801c7aa:	4628      	mov	r0, r5
 801c7ac:	f8ad 601a 	strh.w	r6, [sp, #26]
 801c7b0:	f7ff f88c 	bl	801b8cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c7b4:	88e2      	ldrh	r2, [r4, #6]
 801c7b6:	8863      	ldrh	r3, [r4, #2]
 801c7b8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801c7bc:	4413      	add	r3, r2
 801c7be:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801c7c2:	440a      	add	r2, r1
 801c7c4:	b29b      	uxth	r3, r3
 801c7c6:	b292      	uxth	r2, r2
 801c7c8:	b218      	sxth	r0, r3
 801c7ca:	b211      	sxth	r1, r2
 801c7cc:	4288      	cmp	r0, r1
 801c7ce:	dd81      	ble.n	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c7d0:	1a9b      	subs	r3, r3, r2
 801c7d2:	f9b4 6000 	ldrsh.w	r6, [r4]
 801c7d6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c7da:	4642      	mov	r2, r8
 801c7dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c7e0:	23ff      	movs	r3, #255	@ 0xff
 801c7e2:	f8ad 6018 	strh.w	r6, [sp, #24]
 801c7e6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801c7ea:	f8ad 001c 	strh.w	r0, [sp, #28]
 801c7ee:	e762      	b.n	801c6b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801c7f0:	4633      	mov	r3, r6
 801c7f2:	4622      	mov	r2, r4
 801c7f4:	a902      	add	r1, sp, #8
 801c7f6:	4628      	mov	r0, r5
 801c7f8:	f7ff f9be 	bl	801bb78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801c7fc:	e76a      	b.n	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c7fe:	e9cd 4600 	strd	r4, r6, [sp]
 801c802:	ab02      	add	r3, sp, #8
 801c804:	464a      	mov	r2, r9
 801c806:	4629      	mov	r1, r5
 801c808:	4650      	mov	r0, sl
 801c80a:	f7ff fd95 	bl	801c338 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c80e:	e761      	b.n	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c810:	4638      	mov	r0, r7
 801c812:	f7fa fe21 	bl	8017458 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c816:	b950      	cbnz	r0, 801c82e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 801c818:	f8da 3000 	ldr.w	r3, [sl]
 801c81c:	aa02      	add	r2, sp, #8
 801c81e:	4629      	mov	r1, r5
 801c820:	e9cd 6000 	strd	r6, r0, [sp]
 801c824:	4650      	mov	r0, sl
 801c826:	68de      	ldr	r6, [r3, #12]
 801c828:	4623      	mov	r3, r4
 801c82a:	47b0      	blx	r6
 801c82c:	e752      	b.n	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c82e:	f10d 0818 	add.w	r8, sp, #24
 801c832:	4639      	mov	r1, r7
 801c834:	af04      	add	r7, sp, #16
 801c836:	4640      	mov	r0, r8
 801c838:	f7fa fdbc 	bl	80173b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c83c:	e898 0003 	ldmia.w	r8, {r0, r1}
 801c840:	e887 0003 	stmia.w	r7, {r0, r1}
 801c844:	4638      	mov	r0, r7
 801c846:	4621      	mov	r1, r4
 801c848:	f7f6 f842 	bl	80128d0 <_ZN8touchgfx4RectaNERKS0_>
 801c84c:	4638      	mov	r0, r7
 801c84e:	f7f6 f882 	bl	8012956 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c852:	b138      	cbz	r0, 801c864 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801c854:	4623      	mov	r3, r4
 801c856:	9600      	str	r6, [sp, #0]
 801c858:	aa02      	add	r2, sp, #8
 801c85a:	4649      	mov	r1, r9
 801c85c:	4628      	mov	r0, r5
 801c85e:	f7ff fdc9 	bl	801c3f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801c862:	e737      	b.n	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c864:	f8da 3000 	ldr.w	r3, [sl]
 801c868:	aa02      	add	r2, sp, #8
 801c86a:	4629      	mov	r1, r5
 801c86c:	e9cd 6000 	strd	r6, r0, [sp]
 801c870:	4650      	mov	r0, sl
 801c872:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801c876:	463b      	mov	r3, r7
 801c878:	47d8      	blx	fp
 801c87a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c87e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c882:	4293      	cmp	r3, r2
 801c884:	dd13      	ble.n	801c8ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 801c886:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c88a:	1a9b      	subs	r3, r3, r2
 801c88c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c890:	f8ad 0018 	strh.w	r0, [sp, #24]
 801c894:	4628      	mov	r0, r5
 801c896:	f8ad 201a 	strh.w	r2, [sp, #26]
 801c89a:	aa02      	add	r2, sp, #8
 801c89c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c8a0:	4649      	mov	r1, r9
 801c8a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c8a6:	4643      	mov	r3, r8
 801c8a8:	9600      	str	r6, [sp, #0]
 801c8aa:	f7ff fda3 	bl	801c3f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801c8ae:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801c8b2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c8b6:	4293      	cmp	r3, r2
 801c8b8:	dd13      	ble.n	801c8e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 801c8ba:	1a9b      	subs	r3, r3, r2
 801c8bc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801c8c0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801c8c4:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c8c8:	aa02      	add	r2, sp, #8
 801c8ca:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c8ce:	4628      	mov	r0, r5
 801c8d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c8d4:	4643      	mov	r3, r8
 801c8d6:	f8ad 101e 	strh.w	r1, [sp, #30]
 801c8da:	4649      	mov	r1, r9
 801c8dc:	9600      	str	r6, [sp, #0]
 801c8de:	f7ff fd89 	bl	801c3f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801c8e2:	88a2      	ldrh	r2, [r4, #4]
 801c8e4:	8823      	ldrh	r3, [r4, #0]
 801c8e6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c8ea:	4413      	add	r3, r2
 801c8ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c8f0:	440a      	add	r2, r1
 801c8f2:	b29b      	uxth	r3, r3
 801c8f4:	b292      	uxth	r2, r2
 801c8f6:	b218      	sxth	r0, r3
 801c8f8:	b211      	sxth	r1, r2
 801c8fa:	4288      	cmp	r0, r1
 801c8fc:	dd13      	ble.n	801c926 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 801c8fe:	1a9b      	subs	r3, r3, r2
 801c900:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801c904:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801c908:	aa02      	add	r2, sp, #8
 801c90a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801c90e:	4649      	mov	r1, r9
 801c910:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c914:	4643      	mov	r3, r8
 801c916:	f8ad 001e 	strh.w	r0, [sp, #30]
 801c91a:	4628      	mov	r0, r5
 801c91c:	9600      	str	r6, [sp, #0]
 801c91e:	f8ad 701a 	strh.w	r7, [sp, #26]
 801c922:	f7ff fd67 	bl	801c3f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801c926:	88e2      	ldrh	r2, [r4, #6]
 801c928:	8863      	ldrh	r3, [r4, #2]
 801c92a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801c92e:	4413      	add	r3, r2
 801c930:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801c934:	440a      	add	r2, r1
 801c936:	b29b      	uxth	r3, r3
 801c938:	b292      	uxth	r2, r2
 801c93a:	b218      	sxth	r0, r3
 801c93c:	b211      	sxth	r1, r2
 801c93e:	4288      	cmp	r0, r1
 801c940:	f77f aec8 	ble.w	801c6d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c944:	f9b4 7000 	ldrsh.w	r7, [r4]
 801c948:	1a9b      	subs	r3, r3, r2
 801c94a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c94e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c952:	4643      	mov	r3, r8
 801c954:	f8ad 7018 	strh.w	r7, [sp, #24]
 801c958:	f8ad 101a 	strh.w	r1, [sp, #26]
 801c95c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801c960:	9600      	str	r6, [sp, #0]
 801c962:	e779      	b.n	801c858 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 801c964:	24004278 	.word	0x24004278

0801c968 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801c968:	b180      	cbz	r0, 801c98c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801c96a:	2903      	cmp	r1, #3
 801c96c:	d81c      	bhi.n	801c9a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801c96e:	e8df f001 	tbb	[pc, r1]
 801c972:	1d02      	.short	0x1d02
 801c974:	1f08      	.short	0x1f08
 801c976:	4b10      	ldr	r3, [pc, #64]	@ (801c9b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801c978:	8818      	ldrh	r0, [r3, #0]
 801c97a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801c97e:	4240      	negs	r0, r0
 801c980:	4770      	bx	lr
 801c982:	4b0d      	ldr	r3, [pc, #52]	@ (801c9b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801c984:	8818      	ldrh	r0, [r3, #0]
 801c986:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801c98a:	4770      	bx	lr
 801c98c:	2903      	cmp	r1, #3
 801c98e:	d80b      	bhi.n	801c9a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801c990:	a301      	add	r3, pc, #4	@ (adr r3, 801c998 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801c992:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c996:	bf00      	nop
 801c998:	0801c9ad 	.word	0x0801c9ad
 801c99c:	0801c983 	.word	0x0801c983
 801c9a0:	0801c9b1 	.word	0x0801c9b1
 801c9a4:	0801c977 	.word	0x0801c977
 801c9a8:	2000      	movs	r0, #0
 801c9aa:	4770      	bx	lr
 801c9ac:	2001      	movs	r0, #1
 801c9ae:	4770      	bx	lr
 801c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 801c9b4:	4770      	bx	lr
 801c9b6:	bf00      	nop
 801c9b8:	24004272 	.word	0x24004272

0801c9bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801c9bc:	b180      	cbz	r0, 801c9e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801c9be:	2903      	cmp	r1, #3
 801c9c0:	d81c      	bhi.n	801c9fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801c9c2:	e8df f001 	tbb	[pc, r1]
 801c9c6:	021d      	.short	0x021d
 801c9c8:	071f      	.short	0x071f
 801c9ca:	4b10      	ldr	r3, [pc, #64]	@ (801ca0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801c9cc:	8818      	ldrh	r0, [r3, #0]
 801c9ce:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801c9d2:	4770      	bx	lr
 801c9d4:	4b0d      	ldr	r3, [pc, #52]	@ (801ca0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801c9d6:	8818      	ldrh	r0, [r3, #0]
 801c9d8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801c9dc:	4240      	negs	r0, r0
 801c9de:	4770      	bx	lr
 801c9e0:	2903      	cmp	r1, #3
 801c9e2:	d80b      	bhi.n	801c9fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801c9e4:	a301      	add	r3, pc, #4	@ (adr r3, 801c9ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801c9e6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c9ea:	bf00      	nop
 801c9ec:	0801c9cb 	.word	0x0801c9cb
 801c9f0:	0801ca05 	.word	0x0801ca05
 801c9f4:	0801c9d5 	.word	0x0801c9d5
 801c9f8:	0801ca01 	.word	0x0801ca01
 801c9fc:	2000      	movs	r0, #0
 801c9fe:	4770      	bx	lr
 801ca00:	2001      	movs	r0, #1
 801ca02:	4770      	bx	lr
 801ca04:	f04f 30ff 	mov.w	r0, #4294967295
 801ca08:	4770      	bx	lr
 801ca0a:	bf00      	nop
 801ca0c:	24004272 	.word	0x24004272

0801ca10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ca10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca14:	b099      	sub	sp, #100	@ 0x64
 801ca16:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ca18:	a914      	add	r1, sp, #80	@ 0x50
 801ca1a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 801ca1e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 801ca22:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 801ca26:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 801ca2a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 801ca2e:	e881 000c 	stmia.w	r1, {r2, r3}
 801ca32:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 801ca36:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 801ca3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca3c:	f891 900d 	ldrb.w	r9, [r1, #13]
 801ca40:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801ca44:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801ca48:	9310      	str	r3, [sp, #64]	@ 0x40
 801ca4a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 801ca4e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ca50:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 801ca54:	798f      	ldrb	r7, [r1, #6]
 801ca56:	431f      	orrs	r7, r3
 801ca58:	f000 8195 	beq.w	801cd86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ca5c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801ca60:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801ca64:	f891 9007 	ldrb.w	r9, [r1, #7]
 801ca68:	ea59 0903 	orrs.w	r9, r9, r3
 801ca6c:	f000 818b 	beq.w	801cd86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ca70:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ca74:	b29b      	uxth	r3, r3
 801ca76:	2d00      	cmp	r5, #0
 801ca78:	f000 812e 	beq.w	801ccd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801ca7c:	1aed      	subs	r5, r5, r3
 801ca7e:	b2ad      	uxth	r5, r5
 801ca80:	042b      	lsls	r3, r5, #16
 801ca82:	d502      	bpl.n	801ca8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ca84:	1b64      	subs	r4, r4, r5
 801ca86:	2500      	movs	r5, #0
 801ca88:	b224      	sxth	r4, r4
 801ca8a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ca8e:	a814      	add	r0, sp, #80	@ 0x50
 801ca90:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801ca94:	428c      	cmp	r4, r1
 801ca96:	b28b      	uxth	r3, r1
 801ca98:	bfbf      	itttt	lt
 801ca9a:	18ed      	addlt	r5, r5, r3
 801ca9c:	1b2c      	sublt	r4, r5, r4
 801ca9e:	b2a5      	uxthlt	r5, r4
 801caa0:	460c      	movlt	r4, r1
 801caa2:	8891      	ldrh	r1, [r2, #4]
 801caa4:	440b      	add	r3, r1
 801caa6:	4621      	mov	r1, r4
 801caa8:	b21b      	sxth	r3, r3
 801caaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 801caac:	88d3      	ldrh	r3, [r2, #6]
 801caae:	8852      	ldrh	r2, [r2, #2]
 801cab0:	4413      	add	r3, r2
 801cab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cab4:	b21b      	sxth	r3, r3
 801cab6:	930d      	str	r3, [sp, #52]	@ 0x34
 801cab8:	4bbd      	ldr	r3, [pc, #756]	@ (801cdb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801caba:	f893 b000 	ldrb.w	fp, [r3]
 801cabe:	f10b 3cff 	add.w	ip, fp, #4294967295
 801cac2:	f1dc 0300 	rsbs	r3, ip, #0
 801cac6:	eb43 030c 	adc.w	r3, r3, ip
 801caca:	930e      	str	r3, [sp, #56]	@ 0x38
 801cacc:	4653      	mov	r3, sl
 801cace:	f7f7 fc65 	bl	801439c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801cad2:	4621      	mov	r1, r4
 801cad4:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 801cad8:	4653      	mov	r3, sl
 801cada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cadc:	a814      	add	r0, sp, #80	@ 0x50
 801cade:	f7f7 fc7a 	bl	80143d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801cae2:	a918      	add	r1, sp, #96	@ 0x60
 801cae4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801cae8:	a817      	add	r0, sp, #92	@ 0x5c
 801caea:	f7f7 fda1 	bl	8014630 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801caee:	f1ba 0f00 	cmp.w	sl, #0
 801caf2:	f040 80f4 	bne.w	801ccde <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801caf6:	f1bb 0f01 	cmp.w	fp, #1
 801cafa:	f040 80f8 	bne.w	801ccee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801cafe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	f040 8145 	bne.w	801cd90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801cb06:	b2ba      	uxth	r2, r7
 801cb08:	b905      	cbnz	r5, 801cb0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801cb0a:	b16e      	cbz	r6, 801cb28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801cb0c:	fb06 5302 	mla	r3, r6, r2, r5
 801cb10:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801cb12:	4631      	mov	r1, r6
 801cb14:	fb08 f303 	mul.w	r3, r8, r3
 801cb18:	f003 0607 	and.w	r6, r3, #7
 801cb1c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801cb20:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cb22:	eba9 0301 	sub.w	r3, r9, r1
 801cb26:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb28:	4651      	mov	r1, sl
 801cb2a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801cb2c:	f7ff ff1c 	bl	801c968 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801cb30:	4681      	mov	r9, r0
 801cb32:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801cb34:	f7ff ff42 	bl	801c9bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801cb38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cb3c:	4683      	mov	fp, r0
 801cb3e:	eba3 0a01 	sub.w	sl, r3, r1
 801cb42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cb44:	459a      	cmp	sl, r3
 801cb46:	bfa8      	it	ge
 801cb48:	469a      	movge	sl, r3
 801cb4a:	f1ba 0f00 	cmp.w	sl, #0
 801cb4e:	f340 811a 	ble.w	801cd86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801cb52:	1b64      	subs	r4, r4, r5
 801cb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb56:	1b1c      	subs	r4, r3, r4
 801cb58:	42bc      	cmp	r4, r7
 801cb5a:	bfd4      	ite	le
 801cb5c:	ebc5 0504 	rsble	r5, r5, r4
 801cb60:	ebc5 0507 	rsbgt	r5, r5, r7
 801cb64:	2d00      	cmp	r5, #0
 801cb66:	f340 810e 	ble.w	801cd86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801cb6a:	1b52      	subs	r2, r2, r5
 801cb6c:	fb08 f302 	mul.w	r3, r8, r2
 801cb70:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cb72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	f040 8116 	bne.w	801cda6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801cb7a:	4b8e      	ldr	r3, [pc, #568]	@ (801cdb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801cb7c:	6818      	ldr	r0, [r3, #0]
 801cb7e:	6803      	ldr	r3, [r0, #0]
 801cb80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb82:	4798      	blx	r3
 801cb84:	2301      	movs	r3, #1
 801cb86:	4a8c      	ldr	r2, [pc, #560]	@ (801cdb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801cb88:	fa03 f308 	lsl.w	r3, r3, r8
 801cb8c:	8811      	ldrh	r1, [r2, #0]
 801cb8e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 801cb92:	3b01      	subs	r3, #1
 801cb94:	b2db      	uxtb	r3, r3
 801cb96:	930e      	str	r3, [sp, #56]	@ 0x38
 801cb98:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801cb9c:	fb01 2303 	mla	r3, r1, r3, r2
 801cba0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cba4:	930a      	str	r3, [sp, #40]	@ 0x28
 801cba6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801cba8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801cbac:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cbae:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801cbb0:	0a19      	lsrs	r1, r3, #8
 801cbb2:	b2cb      	uxtb	r3, r1
 801cbb4:	9312      	str	r3, [sp, #72]	@ 0x48
 801cbb6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801cbb8:	b2db      	uxtb	r3, r3
 801cbba:	9311      	str	r3, [sp, #68]	@ 0x44
 801cbbc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801cbbe:	095a      	lsrs	r2, r3, #5
 801cbc0:	4b7e      	ldr	r3, [pc, #504]	@ (801cdbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801cbc2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801cbc6:	400b      	ands	r3, r1
 801cbc8:	4313      	orrs	r3, r2
 801cbca:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801cbcc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801cbd0:	4313      	orrs	r3, r2
 801cbd2:	b29b      	uxth	r3, r3
 801cbd4:	9310      	str	r3, [sp, #64]	@ 0x40
 801cbd6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cbd8:	781a      	ldrb	r2, [r3, #0]
 801cbda:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801cbde:	fb05 b919 	mls	r9, r5, r9, fp
 801cbe2:	4132      	asrs	r2, r6
 801cbe4:	fb03 fb05 	mul.w	fp, r3, r5
 801cbe8:	930d      	str	r3, [sp, #52]	@ 0x34
 801cbea:	b2d2      	uxtb	r2, r2
 801cbec:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801cbf0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801cbf4:	f0c0 80f5 	bcc.w	801cde2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801cbf8:	46ae      	mov	lr, r5
 801cbfa:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 801cbfe:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801cc02:	f0c0 80dd 	bcc.w	801cdc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801cc06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc08:	4013      	ands	r3, r2
 801cc0a:	d055      	beq.n	801ccb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801cc0c:	20ff      	movs	r0, #255	@ 0xff
 801cc0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801cc10:	fb90 f1f1 	sdiv	r1, r0, r1
 801cc14:	434b      	muls	r3, r1
 801cc16:	2bfe      	cmp	r3, #254	@ 0xfe
 801cc18:	dd03      	ble.n	801cc22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801cc1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cc1c:	4281      	cmp	r1, r0
 801cc1e:	f000 80c4 	beq.w	801cdaa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801cc22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cc24:	f8bc 4000 	ldrh.w	r4, [ip]
 801cc28:	fb11 f303 	smulbb	r3, r1, r3
 801cc2c:	1220      	asrs	r0, r4, #8
 801cc2e:	b29b      	uxth	r3, r3
 801cc30:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801cc34:	1c59      	adds	r1, r3, #1
 801cc36:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801cc3a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801cc3e:	10e1      	asrs	r1, r4, #3
 801cc40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cc44:	00e4      	lsls	r4, r4, #3
 801cc46:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801cc4a:	b29f      	uxth	r7, r3
 801cc4c:	43db      	mvns	r3, r3
 801cc4e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801cc52:	b2db      	uxtb	r3, r3
 801cc54:	b2e4      	uxtb	r4, r4
 801cc56:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cc5a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801cc5e:	fb13 f907 	smulbb	r9, r3, r7
 801cc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc64:	fb00 9003 	mla	r0, r0, r3, r9
 801cc68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cc6a:	fb13 f907 	smulbb	r9, r3, r7
 801cc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc70:	b280      	uxth	r0, r0
 801cc72:	fb01 9103 	mla	r1, r1, r3, r9
 801cc76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cc78:	fb13 f707 	smulbb	r7, r3, r7
 801cc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc7e:	b289      	uxth	r1, r1
 801cc80:	fb04 7403 	mla	r4, r4, r3, r7
 801cc84:	1c43      	adds	r3, r0, #1
 801cc86:	b2a4      	uxth	r4, r4
 801cc88:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cc8c:	f104 0901 	add.w	r9, r4, #1
 801cc90:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801cc94:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801cc98:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801cc9c:	ea49 0000 	orr.w	r0, r9, r0
 801cca0:	f101 0901 	add.w	r9, r1, #1
 801cca4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801cca8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ccac:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801ccb0:	ea40 0009 	orr.w	r0, r0, r9
 801ccb4:	f8ac 0000 	strh.w	r0, [ip]
 801ccb8:	4446      	add	r6, r8
 801ccba:	b2b6      	uxth	r6, r6
 801ccbc:	2e07      	cmp	r6, #7
 801ccbe:	bf89      	itett	hi
 801ccc0:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 801ccc2:	fa42 f208 	asrls.w	r2, r2, r8
 801ccc6:	2600      	movhi	r6, #0
 801ccc8:	785a      	ldrbhi	r2, [r3, #1]
 801ccca:	bf8a      	itet	hi
 801cccc:	3301      	addhi	r3, #1
 801ccce:	b2d2      	uxtbls	r2, r2
 801ccd0:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 801ccd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ccd4:	449c      	add	ip, r3
 801ccd6:	e792      	b.n	801cbfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801ccd8:	441c      	add	r4, r3
 801ccda:	b224      	sxth	r4, r4
 801ccdc:	e6d5      	b.n	801ca8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ccde:	f1ba 0f01 	cmp.w	sl, #1
 801cce2:	f47f af0c 	bne.w	801cafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801cce6:	f1bb 0f01 	cmp.w	fp, #1
 801ccea:	f47f af08 	bne.w	801cafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ccee:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 801cdb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801ccf2:	f8db 0000 	ldr.w	r0, [fp]
 801ccf6:	6803      	ldr	r3, [r0, #0]
 801ccf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ccfa:	4798      	blx	r3
 801ccfc:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801cd00:	465a      	mov	r2, fp
 801cd02:	d006      	beq.n	801cd12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801cd04:	f1b8 0f04 	cmp.w	r8, #4
 801cd08:	d140      	bne.n	801cd8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801cd0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cd0c:	3300      	adds	r3, #0
 801cd0e:	bf18      	it	ne
 801cd10:	2301      	movne	r3, #1
 801cd12:	0580      	lsls	r0, r0, #22
 801cd14:	d56e      	bpl.n	801cdf4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801cd16:	f1b8 0f08 	cmp.w	r8, #8
 801cd1a:	d16b      	bne.n	801cdf4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	bf0c      	ite	eq
 801cd20:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801cd24:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801cd28:	2d00      	cmp	r5, #0
 801cd2a:	f47f aee8 	bne.w	801cafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801cd2e:	2e00      	cmp	r6, #0
 801cd30:	f47f aee5 	bne.w	801cafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801cd34:	19e3      	adds	r3, r4, r7
 801cd36:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801cd38:	4283      	cmp	r3, r0
 801cd3a:	f73f aee0 	bgt.w	801cafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801cd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd40:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801cd42:	444b      	add	r3, r9
 801cd44:	4283      	cmp	r3, r0
 801cd46:	f73f aeda 	bgt.w	801cafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801cd4a:	b2bf      	uxth	r7, r7
 801cd4c:	f1b8 0f08 	cmp.w	r8, #8
 801cd50:	6810      	ldr	r0, [r2, #0]
 801cd52:	f04f 0500 	mov.w	r5, #0
 801cd56:	bf18      	it	ne
 801cd58:	3701      	addne	r7, #1
 801cd5a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 801cd5e:	6804      	ldr	r4, [r0, #0]
 801cd60:	bf18      	it	ne
 801cd62:	f027 0701 	bicne.w	r7, r7, #1
 801cd66:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801cd6a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801cd6e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cd70:	bf18      	it	ne
 801cd72:	b2bf      	uxthne	r7, r7
 801cd74:	9104      	str	r1, [sp, #16]
 801cd76:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801cd78:	e9cd 7900 	strd	r7, r9, [sp]
 801cd7c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801cd80:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801cd82:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801cd84:	47a0      	blx	r4
 801cd86:	b019      	add	sp, #100	@ 0x64
 801cd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd8c:	2300      	movs	r3, #0
 801cd8e:	e7c0      	b.n	801cd12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801cd90:	2208      	movs	r2, #8
 801cd92:	fb92 f3f8 	sdiv	r3, r2, r8
 801cd96:	1e5a      	subs	r2, r3, #1
 801cd98:	443a      	add	r2, r7
 801cd9a:	fb92 f2f3 	sdiv	r2, r2, r3
 801cd9e:	fb12 f203 	smulbb	r2, r2, r3
 801cda2:	b292      	uxth	r2, r2
 801cda4:	e6b0      	b.n	801cb08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801cda6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801cda8:	e6ec      	b.n	801cb84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801cdaa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801cdac:	e782      	b.n	801ccb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801cdae:	bf00      	nop
 801cdb0:	24004270 	.word	0x24004270
 801cdb4:	24004278 	.word	0x24004278
 801cdb8:	24004272 	.word	0x24004272
 801cdbc:	00fff800 	.word	0x00fff800
 801cdc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cdc2:	b153      	cbz	r3, 801cdda <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801cdc4:	441e      	add	r6, r3
 801cdc6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cdc8:	b2b6      	uxth	r6, r6
 801cdca:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801cdce:	f006 0607 	and.w	r6, r6, #7
 801cdd2:	781a      	ldrb	r2, [r3, #0]
 801cdd4:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cdd6:	4132      	asrs	r2, r6
 801cdd8:	b2d2      	uxtb	r2, r2
 801cdda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cddc:	445b      	add	r3, fp
 801cdde:	930a      	str	r3, [sp, #40]	@ 0x28
 801cde0:	e706      	b.n	801cbf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801cde2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d1ce      	bne.n	801cd86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801cde8:	4b05      	ldr	r3, [pc, #20]	@ (801ce00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801cdea:	6818      	ldr	r0, [r3, #0]
 801cdec:	6803      	ldr	r3, [r0, #0]
 801cdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdf0:	4798      	blx	r3
 801cdf2:	e7c8      	b.n	801cd86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	f43f ae82 	beq.w	801cafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801cdfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801cdfe:	e793      	b.n	801cd28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801ce00:	24004278 	.word	0x24004278

0801ce04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801ce04:	b538      	push	{r3, r4, r5, lr}
 801ce06:	4c15      	ldr	r4, [pc, #84]	@ (801ce5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801ce08:	4605      	mov	r5, r0
 801ce0a:	7823      	ldrb	r3, [r4, #0]
 801ce0c:	f3bf 8f5b 	dmb	ish
 801ce10:	07da      	lsls	r2, r3, #31
 801ce12:	d40b      	bmi.n	801ce2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801ce14:	4620      	mov	r0, r4
 801ce16:	f007 fede 	bl	8024bd6 <__cxa_guard_acquire>
 801ce1a:	b138      	cbz	r0, 801ce2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801ce1c:	4620      	mov	r0, r4
 801ce1e:	f007 fee6 	bl	8024bee <__cxa_guard_release>
 801ce22:	4a0f      	ldr	r2, [pc, #60]	@ (801ce60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801ce24:	490f      	ldr	r1, [pc, #60]	@ (801ce64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801ce26:	4810      	ldr	r0, [pc, #64]	@ (801ce68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801ce28:	f007 fece 	bl	8024bc8 <__aeabi_atexit>
 801ce2c:	4c0f      	ldr	r4, [pc, #60]	@ (801ce6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801ce2e:	7823      	ldrb	r3, [r4, #0]
 801ce30:	f3bf 8f5b 	dmb	ish
 801ce34:	07db      	lsls	r3, r3, #31
 801ce36:	d40b      	bmi.n	801ce50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801ce38:	4620      	mov	r0, r4
 801ce3a:	f007 fecc 	bl	8024bd6 <__cxa_guard_acquire>
 801ce3e:	b138      	cbz	r0, 801ce50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801ce40:	4620      	mov	r0, r4
 801ce42:	f007 fed4 	bl	8024bee <__cxa_guard_release>
 801ce46:	4a06      	ldr	r2, [pc, #24]	@ (801ce60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801ce48:	4909      	ldr	r1, [pc, #36]	@ (801ce70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801ce4a:	480a      	ldr	r0, [pc, #40]	@ (801ce74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801ce4c:	f007 febc 	bl	8024bc8 <__aeabi_atexit>
 801ce50:	4b05      	ldr	r3, [pc, #20]	@ (801ce68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801ce52:	616b      	str	r3, [r5, #20]
 801ce54:	4b07      	ldr	r3, [pc, #28]	@ (801ce74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801ce56:	61ab      	str	r3, [r5, #24]
 801ce58:	bd38      	pop	{r3, r4, r5, pc}
 801ce5a:	bf00      	nop
 801ce5c:	24004350 	.word	0x24004350
 801ce60:	24000000 	.word	0x24000000
 801ce64:	08019be7 	.word	0x08019be7
 801ce68:	24000128 	.word	0x24000128
 801ce6c:	24004354 	.word	0x24004354
 801ce70:	08019be5 	.word	0x08019be5
 801ce74:	2400012c 	.word	0x2400012c

0801ce78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ce78:	b538      	push	{r3, r4, r5, lr}
 801ce7a:	4c15      	ldr	r4, [pc, #84]	@ (801ced0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ce7c:	4605      	mov	r5, r0
 801ce7e:	7823      	ldrb	r3, [r4, #0]
 801ce80:	f3bf 8f5b 	dmb	ish
 801ce84:	07da      	lsls	r2, r3, #31
 801ce86:	d40b      	bmi.n	801cea0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ce88:	4620      	mov	r0, r4
 801ce8a:	f007 fea4 	bl	8024bd6 <__cxa_guard_acquire>
 801ce8e:	b138      	cbz	r0, 801cea0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ce90:	4620      	mov	r0, r4
 801ce92:	f007 feac 	bl	8024bee <__cxa_guard_release>
 801ce96:	4a0f      	ldr	r2, [pc, #60]	@ (801ced4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ce98:	490f      	ldr	r1, [pc, #60]	@ (801ced8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ce9a:	4810      	ldr	r0, [pc, #64]	@ (801cedc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ce9c:	f007 fe94 	bl	8024bc8 <__aeabi_atexit>
 801cea0:	4c0f      	ldr	r4, [pc, #60]	@ (801cee0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801cea2:	7823      	ldrb	r3, [r4, #0]
 801cea4:	f3bf 8f5b 	dmb	ish
 801cea8:	07db      	lsls	r3, r3, #31
 801ceaa:	d40b      	bmi.n	801cec4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ceac:	4620      	mov	r0, r4
 801ceae:	f007 fe92 	bl	8024bd6 <__cxa_guard_acquire>
 801ceb2:	b138      	cbz	r0, 801cec4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ceb4:	4620      	mov	r0, r4
 801ceb6:	f007 fe9a 	bl	8024bee <__cxa_guard_release>
 801ceba:	4a06      	ldr	r2, [pc, #24]	@ (801ced4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801cebc:	4909      	ldr	r1, [pc, #36]	@ (801cee4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801cebe:	480a      	ldr	r0, [pc, #40]	@ (801cee8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801cec0:	f007 fe82 	bl	8024bc8 <__aeabi_atexit>
 801cec4:	4b05      	ldr	r3, [pc, #20]	@ (801cedc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801cec6:	60eb      	str	r3, [r5, #12]
 801cec8:	4b07      	ldr	r3, [pc, #28]	@ (801cee8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ceca:	612b      	str	r3, [r5, #16]
 801cecc:	bd38      	pop	{r3, r4, r5, pc}
 801cece:	bf00      	nop
 801ced0:	24004328 	.word	0x24004328
 801ced4:	24000000 	.word	0x24000000
 801ced8:	08019beb 	.word	0x08019beb
 801cedc:	24000100 	.word	0x24000100
 801cee0:	2400432c 	.word	0x2400432c
 801cee4:	08019be9 	.word	0x08019be9
 801cee8:	24000104 	.word	0x24000104

0801ceec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801ceec:	b510      	push	{r4, lr}
 801ceee:	4604      	mov	r4, r0
 801cef0:	f7ff ff88 	bl	801ce04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801cef4:	4620      	mov	r0, r4
 801cef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cefa:	f7ff bfbd 	b.w	801ce78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801cf00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801cf00:	b538      	push	{r3, r4, r5, lr}
 801cf02:	4c15      	ldr	r4, [pc, #84]	@ (801cf58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801cf04:	4605      	mov	r5, r0
 801cf06:	7823      	ldrb	r3, [r4, #0]
 801cf08:	f3bf 8f5b 	dmb	ish
 801cf0c:	07da      	lsls	r2, r3, #31
 801cf0e:	d40b      	bmi.n	801cf28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801cf10:	4620      	mov	r0, r4
 801cf12:	f007 fe60 	bl	8024bd6 <__cxa_guard_acquire>
 801cf16:	b138      	cbz	r0, 801cf28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801cf18:	4620      	mov	r0, r4
 801cf1a:	f007 fe68 	bl	8024bee <__cxa_guard_release>
 801cf1e:	4a0f      	ldr	r2, [pc, #60]	@ (801cf5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801cf20:	490f      	ldr	r1, [pc, #60]	@ (801cf60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801cf22:	4810      	ldr	r0, [pc, #64]	@ (801cf64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801cf24:	f007 fe50 	bl	8024bc8 <__aeabi_atexit>
 801cf28:	4c0f      	ldr	r4, [pc, #60]	@ (801cf68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801cf2a:	7823      	ldrb	r3, [r4, #0]
 801cf2c:	f3bf 8f5b 	dmb	ish
 801cf30:	07db      	lsls	r3, r3, #31
 801cf32:	d40b      	bmi.n	801cf4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801cf34:	4620      	mov	r0, r4
 801cf36:	f007 fe4e 	bl	8024bd6 <__cxa_guard_acquire>
 801cf3a:	b138      	cbz	r0, 801cf4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801cf3c:	4620      	mov	r0, r4
 801cf3e:	f007 fe56 	bl	8024bee <__cxa_guard_release>
 801cf42:	4a06      	ldr	r2, [pc, #24]	@ (801cf5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801cf44:	4909      	ldr	r1, [pc, #36]	@ (801cf6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801cf46:	480a      	ldr	r0, [pc, #40]	@ (801cf70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801cf48:	f007 fe3e 	bl	8024bc8 <__aeabi_atexit>
 801cf4c:	4b05      	ldr	r3, [pc, #20]	@ (801cf64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801cf4e:	626b      	str	r3, [r5, #36]	@ 0x24
 801cf50:	4b07      	ldr	r3, [pc, #28]	@ (801cf70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801cf52:	62ab      	str	r3, [r5, #40]	@ 0x28
 801cf54:	bd38      	pop	{r3, r4, r5, pc}
 801cf56:	bf00      	nop
 801cf58:	24004358 	.word	0x24004358
 801cf5c:	24000000 	.word	0x24000000
 801cf60:	08019bdf 	.word	0x08019bdf
 801cf64:	24000130 	.word	0x24000130
 801cf68:	2400435c 	.word	0x2400435c
 801cf6c:	08019bdd 	.word	0x08019bdd
 801cf70:	24000134 	.word	0x24000134

0801cf74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801cf74:	b538      	push	{r3, r4, r5, lr}
 801cf76:	4c15      	ldr	r4, [pc, #84]	@ (801cfcc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801cf78:	4605      	mov	r5, r0
 801cf7a:	7823      	ldrb	r3, [r4, #0]
 801cf7c:	f3bf 8f5b 	dmb	ish
 801cf80:	07da      	lsls	r2, r3, #31
 801cf82:	d40b      	bmi.n	801cf9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801cf84:	4620      	mov	r0, r4
 801cf86:	f007 fe26 	bl	8024bd6 <__cxa_guard_acquire>
 801cf8a:	b138      	cbz	r0, 801cf9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801cf8c:	4620      	mov	r0, r4
 801cf8e:	f007 fe2e 	bl	8024bee <__cxa_guard_release>
 801cf92:	4a0f      	ldr	r2, [pc, #60]	@ (801cfd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801cf94:	490f      	ldr	r1, [pc, #60]	@ (801cfd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801cf96:	4810      	ldr	r0, [pc, #64]	@ (801cfd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801cf98:	f007 fe16 	bl	8024bc8 <__aeabi_atexit>
 801cf9c:	4c0f      	ldr	r4, [pc, #60]	@ (801cfdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801cf9e:	7823      	ldrb	r3, [r4, #0]
 801cfa0:	f3bf 8f5b 	dmb	ish
 801cfa4:	07db      	lsls	r3, r3, #31
 801cfa6:	d40b      	bmi.n	801cfc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801cfa8:	4620      	mov	r0, r4
 801cfaa:	f007 fe14 	bl	8024bd6 <__cxa_guard_acquire>
 801cfae:	b138      	cbz	r0, 801cfc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801cfb0:	4620      	mov	r0, r4
 801cfb2:	f007 fe1c 	bl	8024bee <__cxa_guard_release>
 801cfb6:	4a06      	ldr	r2, [pc, #24]	@ (801cfd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801cfb8:	4909      	ldr	r1, [pc, #36]	@ (801cfe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801cfba:	480a      	ldr	r0, [pc, #40]	@ (801cfe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801cfbc:	f007 fe04 	bl	8024bc8 <__aeabi_atexit>
 801cfc0:	4b05      	ldr	r3, [pc, #20]	@ (801cfd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801cfc2:	61eb      	str	r3, [r5, #28]
 801cfc4:	4b07      	ldr	r3, [pc, #28]	@ (801cfe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801cfc6:	622b      	str	r3, [r5, #32]
 801cfc8:	bd38      	pop	{r3, r4, r5, pc}
 801cfca:	bf00      	nop
 801cfcc:	24004330 	.word	0x24004330
 801cfd0:	24000000 	.word	0x24000000
 801cfd4:	08019be3 	.word	0x08019be3
 801cfd8:	24000108 	.word	0x24000108
 801cfdc:	24004334 	.word	0x24004334
 801cfe0:	08019be1 	.word	0x08019be1
 801cfe4:	2400010c 	.word	0x2400010c

0801cfe8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801cfe8:	b510      	push	{r4, lr}
 801cfea:	4604      	mov	r4, r0
 801cfec:	f7ff ff88 	bl	801cf00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801cff0:	4620      	mov	r0, r4
 801cff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cff6:	f7ff bfbd 	b.w	801cf74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801cffc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801cffc:	b538      	push	{r3, r4, r5, lr}
 801cffe:	4c15      	ldr	r4, [pc, #84]	@ (801d054 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d000:	4605      	mov	r5, r0
 801d002:	7823      	ldrb	r3, [r4, #0]
 801d004:	f3bf 8f5b 	dmb	ish
 801d008:	07da      	lsls	r2, r3, #31
 801d00a:	d40b      	bmi.n	801d024 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d00c:	4620      	mov	r0, r4
 801d00e:	f007 fde2 	bl	8024bd6 <__cxa_guard_acquire>
 801d012:	b138      	cbz	r0, 801d024 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d014:	4620      	mov	r0, r4
 801d016:	f007 fdea 	bl	8024bee <__cxa_guard_release>
 801d01a:	4a0f      	ldr	r2, [pc, #60]	@ (801d058 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d01c:	490f      	ldr	r1, [pc, #60]	@ (801d05c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d01e:	4810      	ldr	r0, [pc, #64]	@ (801d060 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d020:	f007 fdd2 	bl	8024bc8 <__aeabi_atexit>
 801d024:	4c0f      	ldr	r4, [pc, #60]	@ (801d064 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d026:	7823      	ldrb	r3, [r4, #0]
 801d028:	f3bf 8f5b 	dmb	ish
 801d02c:	07db      	lsls	r3, r3, #31
 801d02e:	d40b      	bmi.n	801d048 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d030:	4620      	mov	r0, r4
 801d032:	f007 fdd0 	bl	8024bd6 <__cxa_guard_acquire>
 801d036:	b138      	cbz	r0, 801d048 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d038:	4620      	mov	r0, r4
 801d03a:	f007 fdd8 	bl	8024bee <__cxa_guard_release>
 801d03e:	4a06      	ldr	r2, [pc, #24]	@ (801d058 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d040:	4909      	ldr	r1, [pc, #36]	@ (801d068 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d042:	480a      	ldr	r0, [pc, #40]	@ (801d06c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d044:	f007 fdc0 	bl	8024bc8 <__aeabi_atexit>
 801d048:	4b05      	ldr	r3, [pc, #20]	@ (801d060 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d04a:	636b      	str	r3, [r5, #52]	@ 0x34
 801d04c:	4b07      	ldr	r3, [pc, #28]	@ (801d06c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d04e:	63ab      	str	r3, [r5, #56]	@ 0x38
 801d050:	bd38      	pop	{r3, r4, r5, pc}
 801d052:	bf00      	nop
 801d054:	24004368 	.word	0x24004368
 801d058:	24000000 	.word	0x24000000
 801d05c:	08019bd7 	.word	0x08019bd7
 801d060:	24000140 	.word	0x24000140
 801d064:	2400436c 	.word	0x2400436c
 801d068:	08019bd5 	.word	0x08019bd5
 801d06c:	24000144 	.word	0x24000144

0801d070 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d070:	b538      	push	{r3, r4, r5, lr}
 801d072:	4c15      	ldr	r4, [pc, #84]	@ (801d0c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d074:	4605      	mov	r5, r0
 801d076:	7823      	ldrb	r3, [r4, #0]
 801d078:	f3bf 8f5b 	dmb	ish
 801d07c:	07da      	lsls	r2, r3, #31
 801d07e:	d40b      	bmi.n	801d098 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d080:	4620      	mov	r0, r4
 801d082:	f007 fda8 	bl	8024bd6 <__cxa_guard_acquire>
 801d086:	b138      	cbz	r0, 801d098 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d088:	4620      	mov	r0, r4
 801d08a:	f007 fdb0 	bl	8024bee <__cxa_guard_release>
 801d08e:	4a0f      	ldr	r2, [pc, #60]	@ (801d0cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d090:	490f      	ldr	r1, [pc, #60]	@ (801d0d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d092:	4810      	ldr	r0, [pc, #64]	@ (801d0d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d094:	f007 fd98 	bl	8024bc8 <__aeabi_atexit>
 801d098:	4c0f      	ldr	r4, [pc, #60]	@ (801d0d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d09a:	7823      	ldrb	r3, [r4, #0]
 801d09c:	f3bf 8f5b 	dmb	ish
 801d0a0:	07db      	lsls	r3, r3, #31
 801d0a2:	d40b      	bmi.n	801d0bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d0a4:	4620      	mov	r0, r4
 801d0a6:	f007 fd96 	bl	8024bd6 <__cxa_guard_acquire>
 801d0aa:	b138      	cbz	r0, 801d0bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d0ac:	4620      	mov	r0, r4
 801d0ae:	f007 fd9e 	bl	8024bee <__cxa_guard_release>
 801d0b2:	4a06      	ldr	r2, [pc, #24]	@ (801d0cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d0b4:	4909      	ldr	r1, [pc, #36]	@ (801d0dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d0b6:	480a      	ldr	r0, [pc, #40]	@ (801d0e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d0b8:	f007 fd86 	bl	8024bc8 <__aeabi_atexit>
 801d0bc:	4b05      	ldr	r3, [pc, #20]	@ (801d0d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d0be:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801d0c0:	4b07      	ldr	r3, [pc, #28]	@ (801d0e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d0c2:	632b      	str	r3, [r5, #48]	@ 0x30
 801d0c4:	bd38      	pop	{r3, r4, r5, pc}
 801d0c6:	bf00      	nop
 801d0c8:	24004338 	.word	0x24004338
 801d0cc:	24000000 	.word	0x24000000
 801d0d0:	08019bdb 	.word	0x08019bdb
 801d0d4:	24000110 	.word	0x24000110
 801d0d8:	2400433c 	.word	0x2400433c
 801d0dc:	08019bd9 	.word	0x08019bd9
 801d0e0:	24000114 	.word	0x24000114

0801d0e4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d0e4:	b510      	push	{r4, lr}
 801d0e6:	4604      	mov	r4, r0
 801d0e8:	f7ff ff88 	bl	801cffc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d0ec:	4620      	mov	r0, r4
 801d0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0f2:	f7ff bfbd 	b.w	801d070 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d0f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801d0f8:	b538      	push	{r3, r4, r5, lr}
 801d0fa:	4c15      	ldr	r4, [pc, #84]	@ (801d150 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801d0fc:	4605      	mov	r5, r0
 801d0fe:	7823      	ldrb	r3, [r4, #0]
 801d100:	f3bf 8f5b 	dmb	ish
 801d104:	07da      	lsls	r2, r3, #31
 801d106:	d40b      	bmi.n	801d120 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d108:	4620      	mov	r0, r4
 801d10a:	f007 fd64 	bl	8024bd6 <__cxa_guard_acquire>
 801d10e:	b138      	cbz	r0, 801d120 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d110:	4620      	mov	r0, r4
 801d112:	f007 fd6c 	bl	8024bee <__cxa_guard_release>
 801d116:	4a0f      	ldr	r2, [pc, #60]	@ (801d154 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d118:	490f      	ldr	r1, [pc, #60]	@ (801d158 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801d11a:	4810      	ldr	r0, [pc, #64]	@ (801d15c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d11c:	f007 fd54 	bl	8024bc8 <__aeabi_atexit>
 801d120:	4c0f      	ldr	r4, [pc, #60]	@ (801d160 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801d122:	7823      	ldrb	r3, [r4, #0]
 801d124:	f3bf 8f5b 	dmb	ish
 801d128:	07db      	lsls	r3, r3, #31
 801d12a:	d40b      	bmi.n	801d144 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d12c:	4620      	mov	r0, r4
 801d12e:	f007 fd52 	bl	8024bd6 <__cxa_guard_acquire>
 801d132:	b138      	cbz	r0, 801d144 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d134:	4620      	mov	r0, r4
 801d136:	f007 fd5a 	bl	8024bee <__cxa_guard_release>
 801d13a:	4a06      	ldr	r2, [pc, #24]	@ (801d154 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d13c:	4909      	ldr	r1, [pc, #36]	@ (801d164 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801d13e:	480a      	ldr	r0, [pc, #40]	@ (801d168 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d140:	f007 fd42 	bl	8024bc8 <__aeabi_atexit>
 801d144:	4b05      	ldr	r3, [pc, #20]	@ (801d15c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d146:	656b      	str	r3, [r5, #84]	@ 0x54
 801d148:	4b07      	ldr	r3, [pc, #28]	@ (801d168 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d14a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801d14c:	bd38      	pop	{r3, r4, r5, pc}
 801d14e:	bf00      	nop
 801d150:	24004370 	.word	0x24004370
 801d154:	24000000 	.word	0x24000000
 801d158:	08019bc7 	.word	0x08019bc7
 801d15c:	24000148 	.word	0x24000148
 801d160:	24004374 	.word	0x24004374
 801d164:	08019bc5 	.word	0x08019bc5
 801d168:	2400014c 	.word	0x2400014c

0801d16c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801d16c:	b538      	push	{r3, r4, r5, lr}
 801d16e:	4c15      	ldr	r4, [pc, #84]	@ (801d1c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801d170:	4605      	mov	r5, r0
 801d172:	7823      	ldrb	r3, [r4, #0]
 801d174:	f3bf 8f5b 	dmb	ish
 801d178:	07da      	lsls	r2, r3, #31
 801d17a:	d40b      	bmi.n	801d194 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d17c:	4620      	mov	r0, r4
 801d17e:	f007 fd2a 	bl	8024bd6 <__cxa_guard_acquire>
 801d182:	b138      	cbz	r0, 801d194 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d184:	4620      	mov	r0, r4
 801d186:	f007 fd32 	bl	8024bee <__cxa_guard_release>
 801d18a:	4a0f      	ldr	r2, [pc, #60]	@ (801d1c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d18c:	490f      	ldr	r1, [pc, #60]	@ (801d1cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801d18e:	4810      	ldr	r0, [pc, #64]	@ (801d1d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d190:	f007 fd1a 	bl	8024bc8 <__aeabi_atexit>
 801d194:	4c0f      	ldr	r4, [pc, #60]	@ (801d1d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801d196:	7823      	ldrb	r3, [r4, #0]
 801d198:	f3bf 8f5b 	dmb	ish
 801d19c:	07db      	lsls	r3, r3, #31
 801d19e:	d40b      	bmi.n	801d1b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d1a0:	4620      	mov	r0, r4
 801d1a2:	f007 fd18 	bl	8024bd6 <__cxa_guard_acquire>
 801d1a6:	b138      	cbz	r0, 801d1b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d1a8:	4620      	mov	r0, r4
 801d1aa:	f007 fd20 	bl	8024bee <__cxa_guard_release>
 801d1ae:	4a06      	ldr	r2, [pc, #24]	@ (801d1c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d1b0:	4909      	ldr	r1, [pc, #36]	@ (801d1d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801d1b2:	480a      	ldr	r0, [pc, #40]	@ (801d1dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d1b4:	f007 fd08 	bl	8024bc8 <__aeabi_atexit>
 801d1b8:	4b05      	ldr	r3, [pc, #20]	@ (801d1d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d1ba:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801d1bc:	4b07      	ldr	r3, [pc, #28]	@ (801d1dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d1be:	652b      	str	r3, [r5, #80]	@ 0x50
 801d1c0:	bd38      	pop	{r3, r4, r5, pc}
 801d1c2:	bf00      	nop
 801d1c4:	24004378 	.word	0x24004378
 801d1c8:	24000000 	.word	0x24000000
 801d1cc:	08019bcb 	.word	0x08019bcb
 801d1d0:	24000150 	.word	0x24000150
 801d1d4:	2400437c 	.word	0x2400437c
 801d1d8:	08019bc9 	.word	0x08019bc9
 801d1dc:	24000154 	.word	0x24000154

0801d1e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801d1e0:	b538      	push	{r3, r4, r5, lr}
 801d1e2:	4c15      	ldr	r4, [pc, #84]	@ (801d238 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801d1e4:	4605      	mov	r5, r0
 801d1e6:	7823      	ldrb	r3, [r4, #0]
 801d1e8:	f3bf 8f5b 	dmb	ish
 801d1ec:	07da      	lsls	r2, r3, #31
 801d1ee:	d40b      	bmi.n	801d208 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801d1f0:	4620      	mov	r0, r4
 801d1f2:	f007 fcf0 	bl	8024bd6 <__cxa_guard_acquire>
 801d1f6:	b138      	cbz	r0, 801d208 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801d1f8:	4620      	mov	r0, r4
 801d1fa:	f007 fcf8 	bl	8024bee <__cxa_guard_release>
 801d1fe:	4a0f      	ldr	r2, [pc, #60]	@ (801d23c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801d200:	490f      	ldr	r1, [pc, #60]	@ (801d240 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801d202:	4810      	ldr	r0, [pc, #64]	@ (801d244 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801d204:	f007 fce0 	bl	8024bc8 <__aeabi_atexit>
 801d208:	4c0f      	ldr	r4, [pc, #60]	@ (801d248 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801d20a:	7823      	ldrb	r3, [r4, #0]
 801d20c:	f3bf 8f5b 	dmb	ish
 801d210:	07db      	lsls	r3, r3, #31
 801d212:	d40b      	bmi.n	801d22c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801d214:	4620      	mov	r0, r4
 801d216:	f007 fcde 	bl	8024bd6 <__cxa_guard_acquire>
 801d21a:	b138      	cbz	r0, 801d22c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801d21c:	4620      	mov	r0, r4
 801d21e:	f007 fce6 	bl	8024bee <__cxa_guard_release>
 801d222:	4a06      	ldr	r2, [pc, #24]	@ (801d23c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801d224:	4909      	ldr	r1, [pc, #36]	@ (801d24c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801d226:	480a      	ldr	r0, [pc, #40]	@ (801d250 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801d228:	f007 fcce 	bl	8024bc8 <__aeabi_atexit>
 801d22c:	4b05      	ldr	r3, [pc, #20]	@ (801d244 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801d22e:	646b      	str	r3, [r5, #68]	@ 0x44
 801d230:	4b07      	ldr	r3, [pc, #28]	@ (801d250 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801d232:	64ab      	str	r3, [r5, #72]	@ 0x48
 801d234:	bd38      	pop	{r3, r4, r5, pc}
 801d236:	bf00      	nop
 801d238:	24004340 	.word	0x24004340
 801d23c:	24000000 	.word	0x24000000
 801d240:	08019bcf 	.word	0x08019bcf
 801d244:	24000118 	.word	0x24000118
 801d248:	24004344 	.word	0x24004344
 801d24c:	08019bcd 	.word	0x08019bcd
 801d250:	2400011c 	.word	0x2400011c

0801d254 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801d254:	b538      	push	{r3, r4, r5, lr}
 801d256:	4c15      	ldr	r4, [pc, #84]	@ (801d2ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801d258:	4605      	mov	r5, r0
 801d25a:	7823      	ldrb	r3, [r4, #0]
 801d25c:	f3bf 8f5b 	dmb	ish
 801d260:	07da      	lsls	r2, r3, #31
 801d262:	d40b      	bmi.n	801d27c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801d264:	4620      	mov	r0, r4
 801d266:	f007 fcb6 	bl	8024bd6 <__cxa_guard_acquire>
 801d26a:	b138      	cbz	r0, 801d27c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801d26c:	4620      	mov	r0, r4
 801d26e:	f007 fcbe 	bl	8024bee <__cxa_guard_release>
 801d272:	4a0f      	ldr	r2, [pc, #60]	@ (801d2b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801d274:	490f      	ldr	r1, [pc, #60]	@ (801d2b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801d276:	4810      	ldr	r0, [pc, #64]	@ (801d2b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801d278:	f007 fca6 	bl	8024bc8 <__aeabi_atexit>
 801d27c:	4c0f      	ldr	r4, [pc, #60]	@ (801d2bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801d27e:	7823      	ldrb	r3, [r4, #0]
 801d280:	f3bf 8f5b 	dmb	ish
 801d284:	07db      	lsls	r3, r3, #31
 801d286:	d40b      	bmi.n	801d2a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801d288:	4620      	mov	r0, r4
 801d28a:	f007 fca4 	bl	8024bd6 <__cxa_guard_acquire>
 801d28e:	b138      	cbz	r0, 801d2a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801d290:	4620      	mov	r0, r4
 801d292:	f007 fcac 	bl	8024bee <__cxa_guard_release>
 801d296:	4a06      	ldr	r2, [pc, #24]	@ (801d2b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801d298:	4909      	ldr	r1, [pc, #36]	@ (801d2c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801d29a:	480a      	ldr	r0, [pc, #40]	@ (801d2c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801d29c:	f007 fc94 	bl	8024bc8 <__aeabi_atexit>
 801d2a0:	4b05      	ldr	r3, [pc, #20]	@ (801d2b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801d2a2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801d2a4:	4b07      	ldr	r3, [pc, #28]	@ (801d2c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801d2a6:	642b      	str	r3, [r5, #64]	@ 0x40
 801d2a8:	bd38      	pop	{r3, r4, r5, pc}
 801d2aa:	bf00      	nop
 801d2ac:	24004360 	.word	0x24004360
 801d2b0:	24000000 	.word	0x24000000
 801d2b4:	08019bd3 	.word	0x08019bd3
 801d2b8:	24000138 	.word	0x24000138
 801d2bc:	24004364 	.word	0x24004364
 801d2c0:	08019bd1 	.word	0x08019bd1
 801d2c4:	2400013c 	.word	0x2400013c

0801d2c8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801d2c8:	b510      	push	{r4, lr}
 801d2ca:	4604      	mov	r4, r0
 801d2cc:	f7ff ff14 	bl	801d0f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801d2d0:	4620      	mov	r0, r4
 801d2d2:	f7ff ff85 	bl	801d1e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801d2d6:	4620      	mov	r0, r4
 801d2d8:	f7ff ff48 	bl	801d16c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801d2dc:	4620      	mov	r0, r4
 801d2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2e2:	f7ff bfb7 	b.w	801d254 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801d2e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801d2e8:	b538      	push	{r3, r4, r5, lr}
 801d2ea:	4c15      	ldr	r4, [pc, #84]	@ (801d340 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801d2ec:	4605      	mov	r5, r0
 801d2ee:	7823      	ldrb	r3, [r4, #0]
 801d2f0:	f3bf 8f5b 	dmb	ish
 801d2f4:	07da      	lsls	r2, r3, #31
 801d2f6:	d40b      	bmi.n	801d310 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d2f8:	4620      	mov	r0, r4
 801d2fa:	f007 fc6c 	bl	8024bd6 <__cxa_guard_acquire>
 801d2fe:	b138      	cbz	r0, 801d310 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d300:	4620      	mov	r0, r4
 801d302:	f007 fc74 	bl	8024bee <__cxa_guard_release>
 801d306:	4a0f      	ldr	r2, [pc, #60]	@ (801d344 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d308:	490f      	ldr	r1, [pc, #60]	@ (801d348 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801d30a:	4810      	ldr	r0, [pc, #64]	@ (801d34c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d30c:	f007 fc5c 	bl	8024bc8 <__aeabi_atexit>
 801d310:	4c0f      	ldr	r4, [pc, #60]	@ (801d350 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801d312:	7823      	ldrb	r3, [r4, #0]
 801d314:	f3bf 8f5b 	dmb	ish
 801d318:	07db      	lsls	r3, r3, #31
 801d31a:	d40b      	bmi.n	801d334 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d31c:	4620      	mov	r0, r4
 801d31e:	f007 fc5a 	bl	8024bd6 <__cxa_guard_acquire>
 801d322:	b138      	cbz	r0, 801d334 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d324:	4620      	mov	r0, r4
 801d326:	f007 fc62 	bl	8024bee <__cxa_guard_release>
 801d32a:	4a06      	ldr	r2, [pc, #24]	@ (801d344 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d32c:	4909      	ldr	r1, [pc, #36]	@ (801d354 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801d32e:	480a      	ldr	r0, [pc, #40]	@ (801d358 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d330:	f007 fc4a 	bl	8024bc8 <__aeabi_atexit>
 801d334:	4b05      	ldr	r3, [pc, #20]	@ (801d34c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d336:	666b      	str	r3, [r5, #100]	@ 0x64
 801d338:	4b07      	ldr	r3, [pc, #28]	@ (801d358 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d33a:	66ab      	str	r3, [r5, #104]	@ 0x68
 801d33c:	bd38      	pop	{r3, r4, r5, pc}
 801d33e:	bf00      	nop
 801d340:	24004348 	.word	0x24004348
 801d344:	24000000 	.word	0x24000000
 801d348:	08019bbf 	.word	0x08019bbf
 801d34c:	24000120 	.word	0x24000120
 801d350:	2400434c 	.word	0x2400434c
 801d354:	08019bbd 	.word	0x08019bbd
 801d358:	24000124 	.word	0x24000124

0801d35c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801d35c:	b538      	push	{r3, r4, r5, lr}
 801d35e:	4c15      	ldr	r4, [pc, #84]	@ (801d3b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801d360:	4605      	mov	r5, r0
 801d362:	7823      	ldrb	r3, [r4, #0]
 801d364:	f3bf 8f5b 	dmb	ish
 801d368:	07da      	lsls	r2, r3, #31
 801d36a:	d40b      	bmi.n	801d384 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d36c:	4620      	mov	r0, r4
 801d36e:	f007 fc32 	bl	8024bd6 <__cxa_guard_acquire>
 801d372:	b138      	cbz	r0, 801d384 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d374:	4620      	mov	r0, r4
 801d376:	f007 fc3a 	bl	8024bee <__cxa_guard_release>
 801d37a:	4a0f      	ldr	r2, [pc, #60]	@ (801d3b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d37c:	490f      	ldr	r1, [pc, #60]	@ (801d3bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801d37e:	4810      	ldr	r0, [pc, #64]	@ (801d3c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d380:	f007 fc22 	bl	8024bc8 <__aeabi_atexit>
 801d384:	4c0f      	ldr	r4, [pc, #60]	@ (801d3c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801d386:	7823      	ldrb	r3, [r4, #0]
 801d388:	f3bf 8f5b 	dmb	ish
 801d38c:	07db      	lsls	r3, r3, #31
 801d38e:	d40b      	bmi.n	801d3a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d390:	4620      	mov	r0, r4
 801d392:	f007 fc20 	bl	8024bd6 <__cxa_guard_acquire>
 801d396:	b138      	cbz	r0, 801d3a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d398:	4620      	mov	r0, r4
 801d39a:	f007 fc28 	bl	8024bee <__cxa_guard_release>
 801d39e:	4a06      	ldr	r2, [pc, #24]	@ (801d3b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d3a0:	4909      	ldr	r1, [pc, #36]	@ (801d3c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801d3a2:	480a      	ldr	r0, [pc, #40]	@ (801d3cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d3a4:	f007 fc10 	bl	8024bc8 <__aeabi_atexit>
 801d3a8:	4b05      	ldr	r3, [pc, #20]	@ (801d3c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d3aa:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801d3ac:	4b07      	ldr	r3, [pc, #28]	@ (801d3cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d3ae:	662b      	str	r3, [r5, #96]	@ 0x60
 801d3b0:	bd38      	pop	{r3, r4, r5, pc}
 801d3b2:	bf00      	nop
 801d3b4:	24004320 	.word	0x24004320
 801d3b8:	24000000 	.word	0x24000000
 801d3bc:	08019bc3 	.word	0x08019bc3
 801d3c0:	240000f8 	.word	0x240000f8
 801d3c4:	24004324 	.word	0x24004324
 801d3c8:	08019bc1 	.word	0x08019bc1
 801d3cc:	240000fc 	.word	0x240000fc

0801d3d0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801d3d0:	b510      	push	{r4, lr}
 801d3d2:	4604      	mov	r4, r0
 801d3d4:	f7ff ff88 	bl	801d2e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801d3d8:	4620      	mov	r0, r4
 801d3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3de:	f7ff bfbd 	b.w	801d35c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801d3e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801d3e4:	b538      	push	{r3, r4, r5, lr}
 801d3e6:	4c15      	ldr	r4, [pc, #84]	@ (801d43c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801d3e8:	4605      	mov	r5, r0
 801d3ea:	7823      	ldrb	r3, [r4, #0]
 801d3ec:	f3bf 8f5b 	dmb	ish
 801d3f0:	07da      	lsls	r2, r3, #31
 801d3f2:	d40b      	bmi.n	801d40c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d3f4:	4620      	mov	r0, r4
 801d3f6:	f007 fbee 	bl	8024bd6 <__cxa_guard_acquire>
 801d3fa:	b138      	cbz	r0, 801d40c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	f007 fbf6 	bl	8024bee <__cxa_guard_release>
 801d402:	4a0f      	ldr	r2, [pc, #60]	@ (801d440 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d404:	490f      	ldr	r1, [pc, #60]	@ (801d444 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801d406:	4810      	ldr	r0, [pc, #64]	@ (801d448 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d408:	f007 fbde 	bl	8024bc8 <__aeabi_atexit>
 801d40c:	4c0f      	ldr	r4, [pc, #60]	@ (801d44c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801d40e:	7823      	ldrb	r3, [r4, #0]
 801d410:	f3bf 8f5b 	dmb	ish
 801d414:	07db      	lsls	r3, r3, #31
 801d416:	d40b      	bmi.n	801d430 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d418:	4620      	mov	r0, r4
 801d41a:	f007 fbdc 	bl	8024bd6 <__cxa_guard_acquire>
 801d41e:	b138      	cbz	r0, 801d430 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d420:	4620      	mov	r0, r4
 801d422:	f007 fbe4 	bl	8024bee <__cxa_guard_release>
 801d426:	4a06      	ldr	r2, [pc, #24]	@ (801d440 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d428:	4909      	ldr	r1, [pc, #36]	@ (801d450 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801d42a:	480a      	ldr	r0, [pc, #40]	@ (801d454 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d42c:	f007 fbcc 	bl	8024bc8 <__aeabi_atexit>
 801d430:	4b05      	ldr	r3, [pc, #20]	@ (801d448 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d432:	676b      	str	r3, [r5, #116]	@ 0x74
 801d434:	4b07      	ldr	r3, [pc, #28]	@ (801d454 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d436:	67ab      	str	r3, [r5, #120]	@ 0x78
 801d438:	bd38      	pop	{r3, r4, r5, pc}
 801d43a:	bf00      	nop
 801d43c:	24004318 	.word	0x24004318
 801d440:	24000000 	.word	0x24000000
 801d444:	08019bb7 	.word	0x08019bb7
 801d448:	240000f0 	.word	0x240000f0
 801d44c:	2400431c 	.word	0x2400431c
 801d450:	08019bb5 	.word	0x08019bb5
 801d454:	240000f4 	.word	0x240000f4

0801d458 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801d458:	b538      	push	{r3, r4, r5, lr}
 801d45a:	4c15      	ldr	r4, [pc, #84]	@ (801d4b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801d45c:	4605      	mov	r5, r0
 801d45e:	7823      	ldrb	r3, [r4, #0]
 801d460:	f3bf 8f5b 	dmb	ish
 801d464:	07da      	lsls	r2, r3, #31
 801d466:	d40b      	bmi.n	801d480 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d468:	4620      	mov	r0, r4
 801d46a:	f007 fbb4 	bl	8024bd6 <__cxa_guard_acquire>
 801d46e:	b138      	cbz	r0, 801d480 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d470:	4620      	mov	r0, r4
 801d472:	f007 fbbc 	bl	8024bee <__cxa_guard_release>
 801d476:	4a0f      	ldr	r2, [pc, #60]	@ (801d4b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d478:	490f      	ldr	r1, [pc, #60]	@ (801d4b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801d47a:	4810      	ldr	r0, [pc, #64]	@ (801d4bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d47c:	f007 fba4 	bl	8024bc8 <__aeabi_atexit>
 801d480:	4c0f      	ldr	r4, [pc, #60]	@ (801d4c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801d482:	7823      	ldrb	r3, [r4, #0]
 801d484:	f3bf 8f5b 	dmb	ish
 801d488:	07db      	lsls	r3, r3, #31
 801d48a:	d40b      	bmi.n	801d4a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d48c:	4620      	mov	r0, r4
 801d48e:	f007 fba2 	bl	8024bd6 <__cxa_guard_acquire>
 801d492:	b138      	cbz	r0, 801d4a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d494:	4620      	mov	r0, r4
 801d496:	f007 fbaa 	bl	8024bee <__cxa_guard_release>
 801d49a:	4a06      	ldr	r2, [pc, #24]	@ (801d4b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d49c:	4909      	ldr	r1, [pc, #36]	@ (801d4c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801d49e:	480a      	ldr	r0, [pc, #40]	@ (801d4c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d4a0:	f007 fb92 	bl	8024bc8 <__aeabi_atexit>
 801d4a4:	4b05      	ldr	r3, [pc, #20]	@ (801d4bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d4a6:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801d4a8:	4b07      	ldr	r3, [pc, #28]	@ (801d4c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d4aa:	672b      	str	r3, [r5, #112]	@ 0x70
 801d4ac:	bd38      	pop	{r3, r4, r5, pc}
 801d4ae:	bf00      	nop
 801d4b0:	24004310 	.word	0x24004310
 801d4b4:	24000000 	.word	0x24000000
 801d4b8:	08019bbb 	.word	0x08019bbb
 801d4bc:	240000e8 	.word	0x240000e8
 801d4c0:	24004314 	.word	0x24004314
 801d4c4:	08019bb9 	.word	0x08019bb9
 801d4c8:	240000ec 	.word	0x240000ec

0801d4cc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801d4cc:	b510      	push	{r4, lr}
 801d4ce:	4604      	mov	r4, r0
 801d4d0:	f7ff ff88 	bl	801d3e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801d4d4:	4620      	mov	r0, r4
 801d4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4da:	f7ff bfbd 	b.w	801d458 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801d4de <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801d4de:	b510      	push	{r4, lr}
 801d4e0:	4604      	mov	r4, r0
 801d4e2:	f7ff fff3 	bl	801d4cc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801d4e6:	4620      	mov	r0, r4
 801d4e8:	f7ff ff72 	bl	801d3d0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801d4ec:	4620      	mov	r0, r4
 801d4ee:	f7ff fdf9 	bl	801d0e4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801d4f2:	4620      	mov	r0, r4
 801d4f4:	f7ff fcfa 	bl	801ceec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801d4f8:	4620      	mov	r0, r4
 801d4fa:	f7ff fd75 	bl	801cfe8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801d4fe:	4620      	mov	r0, r4
 801d500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d504:	f7ff bee0 	b.w	801d2c8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801d508 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801d508:	b538      	push	{r3, r4, r5, lr}
 801d50a:	4c0b      	ldr	r4, [pc, #44]	@ (801d538 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 801d50c:	4605      	mov	r5, r0
 801d50e:	7823      	ldrb	r3, [r4, #0]
 801d510:	f3bf 8f5b 	dmb	ish
 801d514:	07db      	lsls	r3, r3, #31
 801d516:	d40b      	bmi.n	801d530 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801d518:	4620      	mov	r0, r4
 801d51a:	f007 fb5c 	bl	8024bd6 <__cxa_guard_acquire>
 801d51e:	b138      	cbz	r0, 801d530 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801d520:	4620      	mov	r0, r4
 801d522:	f007 fb64 	bl	8024bee <__cxa_guard_release>
 801d526:	4a05      	ldr	r2, [pc, #20]	@ (801d53c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801d528:	4905      	ldr	r1, [pc, #20]	@ (801d540 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801d52a:	4806      	ldr	r0, [pc, #24]	@ (801d544 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801d52c:	f007 fb4c 	bl	8024bc8 <__aeabi_atexit>
 801d530:	4b04      	ldr	r3, [pc, #16]	@ (801d544 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801d532:	67eb      	str	r3, [r5, #124]	@ 0x7c
 801d534:	bd38      	pop	{r3, r4, r5, pc}
 801d536:	bf00      	nop
 801d538:	24004304 	.word	0x24004304
 801d53c:	24000000 	.word	0x24000000
 801d540:	08019bb3 	.word	0x08019bb3
 801d544:	240000e0 	.word	0x240000e0

0801d548 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 801d548:	b538      	push	{r3, r4, r5, lr}
 801d54a:	4c0b      	ldr	r4, [pc, #44]	@ (801d578 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 801d54c:	4605      	mov	r5, r0
 801d54e:	7823      	ldrb	r3, [r4, #0]
 801d550:	f3bf 8f5b 	dmb	ish
 801d554:	07db      	lsls	r3, r3, #31
 801d556:	d40b      	bmi.n	801d570 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801d558:	4620      	mov	r0, r4
 801d55a:	f007 fb3c 	bl	8024bd6 <__cxa_guard_acquire>
 801d55e:	b138      	cbz	r0, 801d570 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801d560:	4620      	mov	r0, r4
 801d562:	f007 fb44 	bl	8024bee <__cxa_guard_release>
 801d566:	4a05      	ldr	r2, [pc, #20]	@ (801d57c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 801d568:	4905      	ldr	r1, [pc, #20]	@ (801d580 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 801d56a:	4806      	ldr	r0, [pc, #24]	@ (801d584 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801d56c:	f007 fb2c 	bl	8024bc8 <__aeabi_atexit>
 801d570:	4b04      	ldr	r3, [pc, #16]	@ (801d584 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801d572:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 801d576:	bd38      	pop	{r3, r4, r5, pc}
 801d578:	24004308 	.word	0x24004308
 801d57c:	24000000 	.word	0x24000000
 801d580:	08019bb1 	.word	0x08019bb1
 801d584:	240000e4 	.word	0x240000e4

0801d588 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 801d588:	b570      	push	{r4, r5, r6, lr}
 801d58a:	4d0d      	ldr	r5, [pc, #52]	@ (801d5c0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801d58c:	4606      	mov	r6, r0
 801d58e:	4c0d      	ldr	r4, [pc, #52]	@ (801d5c4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801d590:	782b      	ldrb	r3, [r5, #0]
 801d592:	f3bf 8f5b 	dmb	ish
 801d596:	f013 0f01 	tst.w	r3, #1
 801d59a:	d10d      	bne.n	801d5b8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801d59c:	4628      	mov	r0, r5
 801d59e:	f007 fb1a 	bl	8024bd6 <__cxa_guard_acquire>
 801d5a2:	b148      	cbz	r0, 801d5b8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801d5a4:	4b08      	ldr	r3, [pc, #32]	@ (801d5c8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801d5a6:	4628      	mov	r0, r5
 801d5a8:	6023      	str	r3, [r4, #0]
 801d5aa:	f007 fb20 	bl	8024bee <__cxa_guard_release>
 801d5ae:	4a07      	ldr	r2, [pc, #28]	@ (801d5cc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801d5b0:	4620      	mov	r0, r4
 801d5b2:	4907      	ldr	r1, [pc, #28]	@ (801d5d0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 801d5b4:	f007 fb08 	bl	8024bc8 <__aeabi_atexit>
 801d5b8:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 801d5bc:	bd70      	pop	{r4, r5, r6, pc}
 801d5be:	bf00      	nop
 801d5c0:	2400430c 	.word	0x2400430c
 801d5c4:	24004380 	.word	0x24004380
 801d5c8:	0802a61c 	.word	0x0802a61c
 801d5cc:	24000000 	.word	0x24000000
 801d5d0:	08019baf 	.word	0x08019baf

0801d5d4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 801d5d4:	b510      	push	{r4, lr}
 801d5d6:	4604      	mov	r4, r0
 801d5d8:	f7ff ff96 	bl	801d508 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 801d5dc:	4620      	mov	r0, r4
 801d5de:	f7ff ffb3 	bl	801d548 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5e8:	f7ff bfce 	b.w	801d588 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

0801d5ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5f0:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 801d5f4:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 801d5f8:	2d00      	cmp	r5, #0
 801d5fa:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 801d5fe:	fb05 4c0e 	mla	ip, r5, lr, r4
 801d602:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 801d606:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 801d60a:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801d60e:	eb02 0a0c 	add.w	sl, r2, ip
 801d612:	8808      	ldrh	r0, [r1, #0]
 801d614:	f2c0 80b0 	blt.w	801d778 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801d618:	45ab      	cmp	fp, r5
 801d61a:	f340 80ad 	ble.w	801d778 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801d61e:	2c00      	cmp	r4, #0
 801d620:	f2c0 80a8 	blt.w	801d774 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801d624:	45a6      	cmp	lr, r4
 801d626:	f340 80a5 	ble.w	801d774 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801d62a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801d62e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801d632:	1c62      	adds	r2, r4, #1
 801d634:	f100 80a3 	bmi.w	801d77e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801d638:	4596      	cmp	lr, r2
 801d63a:	f340 80a0 	ble.w	801d77e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801d63e:	f1b9 0f00 	cmp.w	r9, #0
 801d642:	f000 809c 	beq.w	801d77e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801d646:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d64a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801d64e:	3501      	adds	r5, #1
 801d650:	f100 8099 	bmi.w	801d786 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801d654:	45ab      	cmp	fp, r5
 801d656:	f340 8096 	ble.w	801d786 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801d65a:	2f00      	cmp	r7, #0
 801d65c:	f000 8093 	beq.w	801d786 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801d660:	2c00      	cmp	r4, #0
 801d662:	f2c0 808e 	blt.w	801d782 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801d666:	45a6      	cmp	lr, r4
 801d668:	f340 808b 	ble.w	801d782 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801d66c:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801d670:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801d674:	3401      	adds	r4, #1
 801d676:	f100 8089 	bmi.w	801d78c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801d67a:	45a6      	cmp	lr, r4
 801d67c:	f340 8086 	ble.w	801d78c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801d680:	f1b9 0f00 	cmp.w	r9, #0
 801d684:	f000 8082 	beq.w	801d78c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801d688:	44d6      	add	lr, sl
 801d68a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d68e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801d692:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801d696:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 801d69a:	fb19 fe07 	smulbb	lr, r9, r7
 801d69e:	f1c7 0210 	rsb	r2, r7, #16
 801d6a2:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801d6a6:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801d6aa:	eba2 0209 	sub.w	r2, r2, r9
 801d6ae:	ea44 0808 	orr.w	r8, r4, r8
 801d6b2:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801d6b6:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801d6ba:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801d6be:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801d6c2:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801d6c6:	ea44 0c0c 	orr.w	ip, r4, ip
 801d6ca:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801d6ce:	fb04 f40c 	mul.w	r4, r4, ip
 801d6d2:	fb02 4808 	mla	r8, r2, r8, r4
 801d6d6:	041a      	lsls	r2, r3, #16
 801d6d8:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801d6dc:	b2b4      	uxth	r4, r6
 801d6de:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801d6e2:	43f6      	mvns	r6, r6
 801d6e4:	4313      	orrs	r3, r2
 801d6e6:	042a      	lsls	r2, r5, #16
 801d6e8:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801d6ec:	b2f6      	uxtb	r6, r6
 801d6ee:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801d6f2:	fb0e 8303 	mla	r3, lr, r3, r8
 801d6f6:	432a      	orrs	r2, r5
 801d6f8:	fb07 3202 	mla	r2, r7, r2, r3
 801d6fc:	10c7      	asrs	r7, r0, #3
 801d6fe:	0d53      	lsrs	r3, r2, #21
 801d700:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d704:	0952      	lsrs	r2, r2, #5
 801d706:	fb17 f706 	smulbb	r7, r7, r6
 801d70a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801d70e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801d712:	431a      	orrs	r2, r3
 801d714:	b293      	uxth	r3, r2
 801d716:	1202      	asrs	r2, r0, #8
 801d718:	121d      	asrs	r5, r3, #8
 801d71a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801d71e:	00c0      	lsls	r0, r0, #3
 801d720:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801d724:	fb12 f206 	smulbb	r2, r2, r6
 801d728:	b2c0      	uxtb	r0, r0
 801d72a:	fb05 2504 	mla	r5, r5, r4, r2
 801d72e:	10da      	asrs	r2, r3, #3
 801d730:	fb10 f006 	smulbb	r0, r0, r6
 801d734:	00db      	lsls	r3, r3, #3
 801d736:	b2ad      	uxth	r5, r5
 801d738:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801d73c:	b2db      	uxtb	r3, r3
 801d73e:	fb02 7204 	mla	r2, r2, r4, r7
 801d742:	fb03 0004 	mla	r0, r3, r4, r0
 801d746:	1c6b      	adds	r3, r5, #1
 801d748:	b292      	uxth	r2, r2
 801d74a:	b280      	uxth	r0, r0
 801d74c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d750:	1c43      	adds	r3, r0, #1
 801d752:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801d756:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d75a:	1c50      	adds	r0, r2, #1
 801d75c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d760:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d764:	0952      	lsrs	r2, r2, #5
 801d766:	432b      	orrs	r3, r5
 801d768:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d76c:	4313      	orrs	r3, r2
 801d76e:	800b      	strh	r3, [r1, #0]
 801d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d774:	4680      	mov	r8, r0
 801d776:	e75c      	b.n	801d632 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801d778:	4684      	mov	ip, r0
 801d77a:	4680      	mov	r8, r0
 801d77c:	e767      	b.n	801d64e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801d77e:	4684      	mov	ip, r0
 801d780:	e765      	b.n	801d64e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801d782:	4605      	mov	r5, r0
 801d784:	e776      	b.n	801d674 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801d786:	4603      	mov	r3, r0
 801d788:	4605      	mov	r5, r0
 801d78a:	e782      	b.n	801d692 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801d78c:	4603      	mov	r3, r0
 801d78e:	e780      	b.n	801d692 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801d790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d794:	b099      	sub	sp, #100	@ 0x64
 801d796:	9215      	str	r2, [sp, #84]	@ 0x54
 801d798:	9309      	str	r3, [sp, #36]	@ 0x24
 801d79a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801d79c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 801d7a0:	9016      	str	r0, [sp, #88]	@ 0x58
 801d7a2:	930d      	str	r3, [sp, #52]	@ 0x34
 801d7a4:	6850      	ldr	r0, [r2, #4]
 801d7a6:	910c      	str	r1, [sp, #48]	@ 0x30
 801d7a8:	6812      	ldr	r2, [r2, #0]
 801d7aa:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801d7ae:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 801d7b2:	fb00 1303 	mla	r3, r0, r3, r1
 801d7b6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801d7ba:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d7c0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d7c2:	685e      	ldr	r6, [r3, #4]
 801d7c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d7c6:	3604      	adds	r6, #4
 801d7c8:	43db      	mvns	r3, r3
 801d7ca:	b2db      	uxtb	r3, r3
 801d7cc:	930a      	str	r3, [sp, #40]	@ 0x28
 801d7ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	dc03      	bgt.n	801d7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d7d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	f340 8225 	ble.w	801dc26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801d7dc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d7de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d7e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d7e6:	1e48      	subs	r0, r1, #1
 801d7e8:	1e57      	subs	r7, r2, #1
 801d7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	f340 80e3 	ble.w	801d9b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d7f2:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801d7f6:	ea4f 4325 	mov.w	r3, r5, asr #16
 801d7fa:	d406      	bmi.n	801d80a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d7fc:	4584      	cmp	ip, r0
 801d7fe:	da04      	bge.n	801d80a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d800:	2b00      	cmp	r3, #0
 801d802:	db02      	blt.n	801d80a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d804:	42bb      	cmp	r3, r7
 801d806:	f2c0 80d8 	blt.w	801d9ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d80a:	f11c 0c01 	adds.w	ip, ip, #1
 801d80e:	f100 80c9 	bmi.w	801d9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d812:	4561      	cmp	r1, ip
 801d814:	f2c0 80c6 	blt.w	801d9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d818:	3301      	adds	r3, #1
 801d81a:	f100 80c3 	bmi.w	801d9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d81e:	429a      	cmp	r2, r3
 801d820:	f2c0 80c0 	blt.w	801d9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d824:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801d828:	4647      	mov	r7, r8
 801d82a:	f1bb 0f00 	cmp.w	fp, #0
 801d82e:	f340 80e3 	ble.w	801d9f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801d832:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801d834:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d838:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d83a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801d83e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801d842:	ea5f 422a 	movs.w	r2, sl, asr #16
 801d846:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d84a:	689b      	ldr	r3, [r3, #8]
 801d84c:	f100 8121 	bmi.w	801da92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801d850:	f103 39ff 	add.w	r9, r3, #4294967295
 801d854:	454a      	cmp	r2, r9
 801d856:	f280 811c 	bge.w	801da92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801d85a:	f1bc 0f00 	cmp.w	ip, #0
 801d85e:	f2c0 8118 	blt.w	801da92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801d862:	f10e 39ff 	add.w	r9, lr, #4294967295
 801d866:	45cc      	cmp	ip, r9
 801d868:	f280 8113 	bge.w	801da92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801d86c:	b21b      	sxth	r3, r3
 801d86e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d870:	fb0c 2203 	mla	r2, ip, r3, r2
 801d874:	eb04 0902 	add.w	r9, r4, r2
 801d878:	5ca2      	ldrb	r2, [r4, r2]
 801d87a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801d87e:	2800      	cmp	r0, #0
 801d880:	f000 80fe 	beq.w	801da80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801d884:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d888:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801d88c:	9211      	str	r2, [sp, #68]	@ 0x44
 801d88e:	b151      	cbz	r1, 801d8a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d890:	eb09 0203 	add.w	r2, r9, r3
 801d894:	f819 3003 	ldrb.w	r3, [r9, r3]
 801d898:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801d89c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d89e:	7853      	ldrb	r3, [r2, #1]
 801d8a0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801d8a4:	9312      	str	r3, [sp, #72]	@ 0x48
 801d8a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d8a8:	fb10 f201 	smulbb	r2, r0, r1
 801d8ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d8ae:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801d8b2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801d8b6:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801d8ba:	10d2      	asrs	r2, r2, #3
 801d8bc:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801d8c0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801d8c4:	ea4c 0c03 	orr.w	ip, ip, r3
 801d8c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d8ca:	041b      	lsls	r3, r3, #16
 801d8cc:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801d8d0:	4323      	orrs	r3, r4
 801d8d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d8d4:	4353      	muls	r3, r2
 801d8d6:	fb09 330c 	mla	r3, r9, ip, r3
 801d8da:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801d8de:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801d8e2:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801d8e6:	ea4c 0e0e 	orr.w	lr, ip, lr
 801d8ea:	f1c1 0c10 	rsb	ip, r1, #16
 801d8ee:	ebac 0c00 	sub.w	ip, ip, r0
 801d8f2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801d8f6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801d8fa:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801d8fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d900:	0418      	lsls	r0, r3, #16
 801d902:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801d906:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801d90a:	4318      	orrs	r0, r3
 801d90c:	fb02 c200 	mla	r2, r2, r0, ip
 801d910:	8838      	ldrh	r0, [r7, #0]
 801d912:	0d53      	lsrs	r3, r2, #21
 801d914:	0952      	lsrs	r2, r2, #5
 801d916:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801d91a:	1201      	asrs	r1, r0, #8
 801d91c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801d920:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801d924:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801d928:	00c0      	lsls	r0, r0, #3
 801d92a:	431a      	orrs	r2, r3
 801d92c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 801d930:	fb11 f104 	smulbb	r1, r1, r4
 801d934:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801d938:	b292      	uxth	r2, r2
 801d93a:	fb1e fe04 	smulbb	lr, lr, r4
 801d93e:	b2c0      	uxtb	r0, r0
 801d940:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801d944:	fb10 f004 	smulbb	r0, r0, r4
 801d948:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d94c:	fb0c 1c03 	mla	ip, ip, r3, r1
 801d950:	10d1      	asrs	r1, r2, #3
 801d952:	00d2      	lsls	r2, r2, #3
 801d954:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801d958:	fa1f fc8c 	uxth.w	ip, ip
 801d95c:	b2d2      	uxtb	r2, r2
 801d95e:	fb01 e103 	mla	r1, r1, r3, lr
 801d962:	fb02 0303 	mla	r3, r2, r3, r0
 801d966:	b289      	uxth	r1, r1
 801d968:	b29a      	uxth	r2, r3
 801d96a:	f10c 0301 	add.w	r3, ip, #1
 801d96e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d972:	1c53      	adds	r3, r2, #1
 801d974:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d978:	1c4a      	adds	r2, r1, #1
 801d97a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d97e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d982:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d986:	0949      	lsrs	r1, r1, #5
 801d988:	ea43 030c 	orr.w	r3, r3, ip
 801d98c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801d990:	430b      	orrs	r3, r1
 801d992:	803b      	strh	r3, [r7, #0]
 801d994:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d996:	3702      	adds	r7, #2
 801d998:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d99c:	449a      	add	sl, r3
 801d99e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d9a0:	441d      	add	r5, r3
 801d9a2:	e742      	b.n	801d82a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d9a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d9a6:	f108 0802 	add.w	r8, r8, #2
 801d9aa:	449a      	add	sl, r3
 801d9ac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d9ae:	441d      	add	r5, r3
 801d9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9b2:	3b01      	subs	r3, #1
 801d9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9b6:	e718      	b.n	801d7ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d9b8:	d023      	beq.n	801da02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801d9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9bc:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801d9be:	3b01      	subs	r3, #1
 801d9c0:	fb00 a003 	mla	r0, r0, r3, sl
 801d9c4:	1400      	asrs	r0, r0, #16
 801d9c6:	f53f af2d 	bmi.w	801d824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d9ca:	3901      	subs	r1, #1
 801d9cc:	4288      	cmp	r0, r1
 801d9ce:	f6bf af29 	bge.w	801d824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d9d2:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801d9d4:	fb01 5303 	mla	r3, r1, r3, r5
 801d9d8:	141b      	asrs	r3, r3, #16
 801d9da:	f53f af23 	bmi.w	801d824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d9de:	3a01      	subs	r2, #1
 801d9e0:	4293      	cmp	r3, r2
 801d9e2:	f6bf af1f 	bge.w	801d824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d9e6:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801d9ea:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 801d9ee:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801d9f2:	f1be 0f00 	cmp.w	lr, #0
 801d9f6:	dc6c      	bgt.n	801dad2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9fa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d9fe:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801da02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da04:	2b00      	cmp	r3, #0
 801da06:	f340 810e 	ble.w	801dc26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801da0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801da0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801da10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da18:	eef0 6a62 	vmov.f32	s13, s5
 801da1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da28:	ee16 aa90 	vmov	sl, s13
 801da2c:	eef0 6a43 	vmov.f32	s13, s6
 801da30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da34:	ee16 5a90 	vmov	r5, s13
 801da38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801da3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801da44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801da48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801da4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801da50:	ee12 2a90 	vmov	r2, s5
 801da54:	eef0 2a47 	vmov.f32	s5, s14
 801da58:	fb92 f3f3 	sdiv	r3, r2, r3
 801da5c:	ee13 2a10 	vmov	r2, s6
 801da60:	9325      	str	r3, [sp, #148]	@ 0x94
 801da62:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801da64:	eeb0 3a67 	vmov.f32	s6, s15
 801da68:	fb92 f3f3 	sdiv	r3, r2, r3
 801da6c:	9326      	str	r3, [sp, #152]	@ 0x98
 801da6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801da72:	3b01      	subs	r3, #1
 801da74:	930c      	str	r3, [sp, #48]	@ 0x30
 801da76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801da78:	bf08      	it	eq
 801da7a:	4613      	moveq	r3, r2
 801da7c:	9309      	str	r3, [sp, #36]	@ 0x24
 801da7e:	e6a6      	b.n	801d7ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801da80:	2900      	cmp	r1, #0
 801da82:	f43f af10 	beq.w	801d8a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801da86:	f819 3003 	ldrb.w	r3, [r9, r3]
 801da8a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801da8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801da90:	e709      	b.n	801d8a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801da92:	f112 0901 	adds.w	r9, r2, #1
 801da96:	f53f af7d 	bmi.w	801d994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801da9a:	454b      	cmp	r3, r9
 801da9c:	f6ff af7a 	blt.w	801d994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801daa0:	f11c 0901 	adds.w	r9, ip, #1
 801daa4:	f53f af76 	bmi.w	801d994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801daa8:	45ce      	cmp	lr, r9
 801daaa:	f6ff af73 	blt.w	801d994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801daae:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dab0:	b21b      	sxth	r3, r3
 801dab2:	9202      	str	r2, [sp, #8]
 801dab4:	fa0f f28e 	sxth.w	r2, lr
 801dab8:	9300      	str	r3, [sp, #0]
 801daba:	4633      	mov	r3, r6
 801dabc:	9201      	str	r2, [sp, #4]
 801dabe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dac0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801dac4:	e9cd c003 	strd	ip, r0, [sp, #12]
 801dac8:	4639      	mov	r1, r7
 801daca:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801dacc:	f7ff fd8e 	bl	801d5ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801dad0:	e760      	b.n	801d994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dad2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801dad4:	ea4f 422a 	mov.w	r2, sl, asr #16
 801dad8:	1429      	asrs	r1, r5, #16
 801dada:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dadc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801dae0:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801dae4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dae8:	fb03 2101 	mla	r1, r3, r1, r2
 801daec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801daee:	440a      	add	r2, r1
 801daf0:	5c61      	ldrb	r1, [r4, r1]
 801daf2:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801daf6:	f1bc 0f00 	cmp.w	ip, #0
 801dafa:	f000 808c 	beq.w	801dc16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801dafe:	7857      	ldrb	r7, [r2, #1]
 801db00:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801db04:	9413      	str	r4, [sp, #76]	@ 0x4c
 801db06:	b140      	cbz	r0, 801db1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801db08:	18d7      	adds	r7, r2, r3
 801db0a:	5cd3      	ldrb	r3, [r2, r3]
 801db0c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801db10:	9310      	str	r3, [sp, #64]	@ 0x40
 801db12:	787b      	ldrb	r3, [r7, #1]
 801db14:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801db18:	9314      	str	r3, [sp, #80]	@ 0x50
 801db1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801db1c:	fb1c f200 	smulbb	r2, ip, r0
 801db20:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801db22:	f10e 3eff 	add.w	lr, lr, #4294967295
 801db26:	041f      	lsls	r7, r3, #16
 801db28:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801db2c:	10d2      	asrs	r2, r2, #3
 801db2e:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 801db32:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 801db36:	431f      	orrs	r7, r3
 801db38:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801db3c:	9317      	str	r3, [sp, #92]	@ 0x5c
 801db3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801db40:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801db42:	041b      	lsls	r3, r3, #16
 801db44:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801db48:	ea43 030b 	orr.w	r3, r3, fp
 801db4c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801db50:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801db54:	4353      	muls	r3, r2
 801db56:	fb04 3707 	mla	r7, r4, r7, r3
 801db5a:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801db5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801db60:	ea43 0b01 	orr.w	fp, r3, r1
 801db64:	f1c0 0110 	rsb	r1, r0, #16
 801db68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801db6a:	eba1 0c0c 	sub.w	ip, r1, ip
 801db6e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801db72:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801db76:	fb0c 770b 	mla	r7, ip, fp, r7
 801db7a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801db7e:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 801db82:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801db86:	ea4c 0c0b 	orr.w	ip, ip, fp
 801db8a:	fb02 770c 	mla	r7, r2, ip, r7
 801db8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db90:	0d79      	lsrs	r1, r7, #21
 801db92:	8812      	ldrh	r2, [r2, #0]
 801db94:	097f      	lsrs	r7, r7, #5
 801db96:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801db9a:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801db9e:	430f      	orrs	r7, r1
 801dba0:	1211      	asrs	r1, r2, #8
 801dba2:	b2bb      	uxth	r3, r7
 801dba4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801dba8:	10d7      	asrs	r7, r2, #3
 801dbaa:	fb11 f104 	smulbb	r1, r1, r4
 801dbae:	1218      	asrs	r0, r3, #8
 801dbb0:	00d2      	lsls	r2, r2, #3
 801dbb2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801dbb6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801dbba:	fb17 f704 	smulbb	r7, r7, r4
 801dbbe:	b2d2      	uxtb	r2, r2
 801dbc0:	fb00 1009 	mla	r0, r0, r9, r1
 801dbc4:	10d9      	asrs	r1, r3, #3
 801dbc6:	fb12 f204 	smulbb	r2, r2, r4
 801dbca:	00db      	lsls	r3, r3, #3
 801dbcc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801dbd0:	b280      	uxth	r0, r0
 801dbd2:	b2db      	uxtb	r3, r3
 801dbd4:	fb01 7109 	mla	r1, r1, r9, r7
 801dbd8:	fb03 2309 	mla	r3, r3, r9, r2
 801dbdc:	1c42      	adds	r2, r0, #1
 801dbde:	b289      	uxth	r1, r1
 801dbe0:	b29b      	uxth	r3, r3
 801dbe2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801dbe6:	1c4f      	adds	r7, r1, #1
 801dbe8:	1c5a      	adds	r2, r3, #1
 801dbea:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801dbee:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801dbf2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dbf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbf8:	0949      	lsrs	r1, r1, #5
 801dbfa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801dbfe:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801dc02:	4310      	orrs	r0, r2
 801dc04:	4308      	orrs	r0, r1
 801dc06:	f823 0b02 	strh.w	r0, [r3], #2
 801dc0a:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc0c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dc0e:	449a      	add	sl, r3
 801dc10:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801dc12:	441d      	add	r5, r3
 801dc14:	e6ed      	b.n	801d9f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801dc16:	2800      	cmp	r0, #0
 801dc18:	f43f af7f 	beq.w	801db1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801dc1c:	5cd3      	ldrb	r3, [r2, r3]
 801dc1e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801dc22:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc24:	e779      	b.n	801db1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801dc26:	b019      	add	sp, #100	@ 0x64
 801dc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801dc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc30:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 801dc34:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801dc38:	f1b8 0f00 	cmp.w	r8, #0
 801dc3c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 801dc40:	fb08 470e 	mla	r7, r8, lr, r4
 801dc44:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 801dc48:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 801dc4c:	eb02 0907 	add.w	r9, r2, r7
 801dc50:	8808      	ldrh	r0, [r1, #0]
 801dc52:	db67      	blt.n	801dd24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801dc54:	45c2      	cmp	sl, r8
 801dc56:	dd65      	ble.n	801dd24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801dc58:	2c00      	cmp	r4, #0
 801dc5a:	db61      	blt.n	801dd20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801dc5c:	45a6      	cmp	lr, r4
 801dc5e:	dd5f      	ble.n	801dd20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801dc60:	5dd2      	ldrb	r2, [r2, r7]
 801dc62:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801dc66:	1c62      	adds	r2, r4, #1
 801dc68:	d45f      	bmi.n	801dd2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801dc6a:	4596      	cmp	lr, r2
 801dc6c:	dd5d      	ble.n	801dd2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801dc6e:	2d00      	cmp	r5, #0
 801dc70:	d05b      	beq.n	801dd2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801dc72:	f899 2001 	ldrb.w	r2, [r9, #1]
 801dc76:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801dc7a:	f118 0801 	adds.w	r8, r8, #1
 801dc7e:	d458      	bmi.n	801dd32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801dc80:	45c2      	cmp	sl, r8
 801dc82:	dd56      	ble.n	801dd32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801dc84:	2e00      	cmp	r6, #0
 801dc86:	d054      	beq.n	801dd32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801dc88:	2c00      	cmp	r4, #0
 801dc8a:	db50      	blt.n	801dd2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801dc8c:	45a6      	cmp	lr, r4
 801dc8e:	dd4e      	ble.n	801dd2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801dc90:	f819 200e 	ldrb.w	r2, [r9, lr]
 801dc94:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801dc98:	3401      	adds	r4, #1
 801dc9a:	d407      	bmi.n	801dcac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801dc9c:	45a6      	cmp	lr, r4
 801dc9e:	dd05      	ble.n	801dcac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801dca0:	b125      	cbz	r5, 801dcac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801dca2:	44ce      	add	lr, r9
 801dca4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801dca8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801dcac:	fb15 f406 	smulbb	r4, r5, r6
 801dcb0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801dcb4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801dcb8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801dcbc:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801dcc0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801dcc4:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801dcc8:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801dccc:	ea43 0c0c 	orr.w	ip, r3, ip
 801dcd0:	f1c6 0310 	rsb	r3, r6, #16
 801dcd4:	ea4e 0707 	orr.w	r7, lr, r7
 801dcd8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801dcdc:	1b5b      	subs	r3, r3, r5
 801dcde:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801dce2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dce6:	437d      	muls	r5, r7
 801dce8:	fb03 5c0c 	mla	ip, r3, ip, r5
 801dcec:	0403      	lsls	r3, r0, #16
 801dcee:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801dcf2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801dcf6:	4318      	orrs	r0, r3
 801dcf8:	0413      	lsls	r3, r2, #16
 801dcfa:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801dcfe:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801dd02:	fb04 c000 	mla	r0, r4, r0, ip
 801dd06:	4313      	orrs	r3, r2
 801dd08:	fb06 0003 	mla	r0, r6, r3, r0
 801dd0c:	0d43      	lsrs	r3, r0, #21
 801dd0e:	0940      	lsrs	r0, r0, #5
 801dd10:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801dd14:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801dd18:	4318      	orrs	r0, r3
 801dd1a:	8008      	strh	r0, [r1, #0]
 801dd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd20:	4684      	mov	ip, r0
 801dd22:	e7a0      	b.n	801dc66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801dd24:	4607      	mov	r7, r0
 801dd26:	4684      	mov	ip, r0
 801dd28:	e7a7      	b.n	801dc7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801dd2a:	4607      	mov	r7, r0
 801dd2c:	e7a5      	b.n	801dc7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801dd2e:	4602      	mov	r2, r0
 801dd30:	e7b2      	b.n	801dc98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801dd32:	4602      	mov	r2, r0
 801dd34:	e7ba      	b.n	801dcac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801dd36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd3a:	b093      	sub	sp, #76	@ 0x4c
 801dd3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd40:	920f      	str	r2, [sp, #60]	@ 0x3c
 801dd42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801dd44:	9010      	str	r0, [sp, #64]	@ 0x40
 801dd46:	9108      	str	r1, [sp, #32]
 801dd48:	6850      	ldr	r0, [r2, #4]
 801dd4a:	9306      	str	r3, [sp, #24]
 801dd4c:	6812      	ldr	r2, [r2, #0]
 801dd4e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801dd52:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 801dd56:	fb00 1303 	mla	r3, r0, r3, r1
 801dd5a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801dd5e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	9307      	str	r3, [sp, #28]
 801dd64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd66:	685f      	ldr	r7, [r3, #4]
 801dd68:	3704      	adds	r7, #4
 801dd6a:	9b08      	ldr	r3, [sp, #32]
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	dc03      	bgt.n	801dd78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801dd70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	f340 81b2 	ble.w	801e0dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801dd78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dd7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dd82:	1e48      	subs	r0, r1, #1
 801dd84:	f102 3cff 	add.w	ip, r2, #4294967295
 801dd88:	9b06      	ldr	r3, [sp, #24]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	f340 80a9 	ble.w	801dee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dd90:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801dd94:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dd98:	d406      	bmi.n	801dda8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd9a:	4586      	cmp	lr, r0
 801dd9c:	da04      	bge.n	801dda8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	db02      	blt.n	801dda8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dda2:	4563      	cmp	r3, ip
 801dda4:	f2c0 809e 	blt.w	801dee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801dda8:	f11e 0e01 	adds.w	lr, lr, #1
 801ddac:	f100 808f 	bmi.w	801dece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ddb0:	4571      	cmp	r1, lr
 801ddb2:	f2c0 808c 	blt.w	801dece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ddb6:	3301      	adds	r3, #1
 801ddb8:	f100 8089 	bmi.w	801dece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ddbc:	429a      	cmp	r2, r3
 801ddbe:	f2c0 8086 	blt.w	801dece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ddc2:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ddc6:	46c8      	mov	r8, r9
 801ddc8:	f1bb 0f00 	cmp.w	fp, #0
 801ddcc:	f340 80a6 	ble.w	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ddd0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ddd2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ddd6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ddd8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801dddc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801dde0:	1422      	asrs	r2, r4, #16
 801dde2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801dde6:	689b      	ldr	r3, [r3, #8]
 801dde8:	f100 80e3 	bmi.w	801dfb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ddec:	f103 3aff 	add.w	sl, r3, #4294967295
 801ddf0:	4552      	cmp	r2, sl
 801ddf2:	f280 80de 	bge.w	801dfb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ddf6:	f1bc 0f00 	cmp.w	ip, #0
 801ddfa:	f2c0 80da 	blt.w	801dfb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ddfe:	f10e 3aff 	add.w	sl, lr, #4294967295
 801de02:	45d4      	cmp	ip, sl
 801de04:	f280 80d5 	bge.w	801dfb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801de08:	b21b      	sxth	r3, r3
 801de0a:	9d07      	ldr	r5, [sp, #28]
 801de0c:	fb0c 2203 	mla	r2, ip, r3, r2
 801de10:	eb05 0a02 	add.w	sl, r5, r2
 801de14:	5caa      	ldrb	r2, [r5, r2]
 801de16:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801de1a:	2800      	cmp	r0, #0
 801de1c:	f000 80c0 	beq.w	801dfa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801de20:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801de24:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801de28:	920b      	str	r2, [sp, #44]	@ 0x2c
 801de2a:	b151      	cbz	r1, 801de42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801de2c:	eb0a 0203 	add.w	r2, sl, r3
 801de30:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801de34:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801de38:	9309      	str	r3, [sp, #36]	@ 0x24
 801de3a:	7853      	ldrb	r3, [r2, #1]
 801de3c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801de40:	930c      	str	r3, [sp, #48]	@ 0x30
 801de42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801de44:	fb10 f201 	smulbb	r2, r0, r1
 801de48:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801de4a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801de4e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801de52:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801de56:	10d2      	asrs	r2, r2, #3
 801de58:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801de5c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801de60:	ea4c 0c03 	orr.w	ip, ip, r3
 801de64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de66:	041b      	lsls	r3, r3, #16
 801de68:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801de6c:	432b      	orrs	r3, r5
 801de6e:	4353      	muls	r3, r2
 801de70:	fb0a 330c 	mla	r3, sl, ip, r3
 801de74:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801de78:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801de7c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801de80:	ea4c 0e0e 	orr.w	lr, ip, lr
 801de84:	f1c1 0c10 	rsb	ip, r1, #16
 801de88:	ebac 0c00 	sub.w	ip, ip, r0
 801de8c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801de90:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801de94:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801de98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de9a:	0418      	lsls	r0, r3, #16
 801de9c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801dea0:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801dea4:	4318      	orrs	r0, r3
 801dea6:	fb02 c200 	mla	r2, r2, r0, ip
 801deaa:	0d53      	lsrs	r3, r2, #21
 801deac:	0952      	lsrs	r2, r2, #5
 801deae:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801deb2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801deb6:	431a      	orrs	r2, r3
 801deb8:	f8a8 2000 	strh.w	r2, [r8]
 801debc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801debe:	f108 0802 	add.w	r8, r8, #2
 801dec2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dec6:	441c      	add	r4, r3
 801dec8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801deca:	441e      	add	r6, r3
 801decc:	e77c      	b.n	801ddc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801dece:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ded0:	f109 0902 	add.w	r9, r9, #2
 801ded4:	441c      	add	r4, r3
 801ded6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ded8:	441e      	add	r6, r3
 801deda:	9b06      	ldr	r3, [sp, #24]
 801dedc:	3b01      	subs	r3, #1
 801dede:	9306      	str	r3, [sp, #24]
 801dee0:	e752      	b.n	801dd88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801dee2:	d020      	beq.n	801df26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dee4:	9b06      	ldr	r3, [sp, #24]
 801dee6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801dee8:	3b01      	subs	r3, #1
 801deea:	fb00 4003 	mla	r0, r0, r3, r4
 801deee:	1400      	asrs	r0, r0, #16
 801def0:	f53f af67 	bmi.w	801ddc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801def4:	3901      	subs	r1, #1
 801def6:	4288      	cmp	r0, r1
 801def8:	f6bf af63 	bge.w	801ddc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801defc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801defe:	fb01 6303 	mla	r3, r1, r3, r6
 801df02:	141b      	asrs	r3, r3, #16
 801df04:	f53f af5d 	bmi.w	801ddc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801df08:	3a01      	subs	r2, #1
 801df0a:	4293      	cmp	r3, r2
 801df0c:	f6bf af59 	bge.w	801ddc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801df10:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801df14:	46ca      	mov	sl, r9
 801df16:	f1b8 0f00 	cmp.w	r8, #0
 801df1a:	dc67      	bgt.n	801dfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801df1c:	9b06      	ldr	r3, [sp, #24]
 801df1e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801df22:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801df26:	9b08      	ldr	r3, [sp, #32]
 801df28:	2b00      	cmp	r3, #0
 801df2a:	f340 80d7 	ble.w	801e0dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801df2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df32:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801df34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df38:	eeb0 6a62 	vmov.f32	s12, s5
 801df3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801df40:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df48:	ee16 4a10 	vmov	r4, s12
 801df4c:	eeb0 6a43 	vmov.f32	s12, s6
 801df50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df54:	ee16 6a10 	vmov	r6, s12
 801df58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df60:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df70:	ee12 2a90 	vmov	r2, s5
 801df74:	eef0 2a47 	vmov.f32	s5, s14
 801df78:	fb92 f3f3 	sdiv	r3, r2, r3
 801df7c:	ee13 2a10 	vmov	r2, s6
 801df80:	931f      	str	r3, [sp, #124]	@ 0x7c
 801df82:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801df84:	eeb0 3a67 	vmov.f32	s6, s15
 801df88:	fb92 f3f3 	sdiv	r3, r2, r3
 801df8c:	9320      	str	r3, [sp, #128]	@ 0x80
 801df8e:	9b08      	ldr	r3, [sp, #32]
 801df90:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801df92:	3b01      	subs	r3, #1
 801df94:	9308      	str	r3, [sp, #32]
 801df96:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801df98:	bf08      	it	eq
 801df9a:	4613      	moveq	r3, r2
 801df9c:	9306      	str	r3, [sp, #24]
 801df9e:	e6e4      	b.n	801dd6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801dfa0:	2900      	cmp	r1, #0
 801dfa2:	f43f af4e 	beq.w	801de42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801dfa6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801dfaa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801dfae:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfb0:	e747      	b.n	801de42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801dfb2:	f112 0a01 	adds.w	sl, r2, #1
 801dfb6:	d481      	bmi.n	801debc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dfb8:	4553      	cmp	r3, sl
 801dfba:	f6ff af7f 	blt.w	801debc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dfbe:	f11c 0a01 	adds.w	sl, ip, #1
 801dfc2:	f53f af7b 	bmi.w	801debc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dfc6:	45d6      	cmp	lr, sl
 801dfc8:	f6ff af78 	blt.w	801debc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dfcc:	b21b      	sxth	r3, r3
 801dfce:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801dfd2:	fa0f f28e 	sxth.w	r2, lr
 801dfd6:	9300      	str	r3, [sp, #0]
 801dfd8:	463b      	mov	r3, r7
 801dfda:	9201      	str	r2, [sp, #4]
 801dfdc:	9a07      	ldr	r2, [sp, #28]
 801dfde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dfe2:	4641      	mov	r1, r8
 801dfe4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801dfe6:	f7ff fe21 	bl	801dc2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801dfea:	e767      	b.n	801debc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dfec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dfee:	1422      	asrs	r2, r4, #16
 801dff0:	1431      	asrs	r1, r6, #16
 801dff2:	9d07      	ldr	r5, [sp, #28]
 801dff4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801dff8:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801dffc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e000:	fb03 2101 	mla	r1, r3, r1, r2
 801e004:	9a07      	ldr	r2, [sp, #28]
 801e006:	440a      	add	r2, r1
 801e008:	5c69      	ldrb	r1, [r5, r1]
 801e00a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801e00e:	f1be 0f00 	cmp.w	lr, #0
 801e012:	d05c      	beq.n	801e0ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801e014:	f892 c001 	ldrb.w	ip, [r2, #1]
 801e018:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801e01c:	950d      	str	r5, [sp, #52]	@ 0x34
 801e01e:	b150      	cbz	r0, 801e036 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801e020:	eb02 0c03 	add.w	ip, r2, r3
 801e024:	5cd3      	ldrb	r3, [r2, r3]
 801e026:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e02a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e02c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e030:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e034:	930e      	str	r3, [sp, #56]	@ 0x38
 801e036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e038:	fb1e f200 	smulbb	r2, lr, r0
 801e03c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801e03e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e042:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e046:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801e04a:	10d2      	asrs	r2, r2, #3
 801e04c:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 801e050:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801e054:	ea4c 0c03 	orr.w	ip, ip, r3
 801e058:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801e05c:	9311      	str	r3, [sp, #68]	@ 0x44
 801e05e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e060:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e062:	041b      	lsls	r3, r3, #16
 801e064:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801e068:	ea43 030b 	orr.w	r3, r3, fp
 801e06c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e070:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801e074:	4353      	muls	r3, r2
 801e076:	fb05 3c0c 	mla	ip, r5, ip, r3
 801e07a:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801e07e:	ea43 0b01 	orr.w	fp, r3, r1
 801e082:	f1c0 0110 	rsb	r1, r0, #16
 801e086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e088:	eba1 0e0e 	sub.w	lr, r1, lr
 801e08c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801e090:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e094:	fb0e cc0b 	mla	ip, lr, fp, ip
 801e098:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801e09c:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 801e0a0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801e0a4:	ea4b 0e0e 	orr.w	lr, fp, lr
 801e0a8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e0ac:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801e0b0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e0b4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e0b8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801e0bc:	ea43 0c0c 	orr.w	ip, r3, ip
 801e0c0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e0c2:	441c      	add	r4, r3
 801e0c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e0c6:	f82a cb02 	strh.w	ip, [sl], #2
 801e0ca:	441e      	add	r6, r3
 801e0cc:	e723      	b.n	801df16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e0ce:	2800      	cmp	r0, #0
 801e0d0:	d0b1      	beq.n	801e036 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801e0d2:	5cd3      	ldrb	r3, [r2, r3]
 801e0d4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e0d8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e0da:	e7ac      	b.n	801e036 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801e0dc:	b013      	add	sp, #76	@ 0x4c
 801e0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e0e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801e0e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0e6:	880d      	ldrh	r5, [r1, #0]
 801e0e8:	b087      	sub	sp, #28
 801e0ea:	10ef      	asrs	r7, r5, #3
 801e0ec:	9103      	str	r1, [sp, #12]
 801e0ee:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801e0f2:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 801e0f6:	00ed      	lsls	r5, r5, #3
 801e0f8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e0fc:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801e100:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801e104:	b2ed      	uxtb	r5, r5
 801e106:	9701      	str	r7, [sp, #4]
 801e108:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801e10c:	9502      	str	r5, [sp, #8]
 801e10e:	9d01      	ldr	r5, [sp, #4]
 801e110:	9902      	ldr	r1, [sp, #8]
 801e112:	022d      	lsls	r5, r5, #8
 801e114:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 801e118:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 801e11c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801e120:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801e124:	430d      	orrs	r5, r1
 801e126:	fb06 0709 	mla	r7, r6, r9, r0
 801e12a:	2e00      	cmp	r6, #0
 801e12c:	9505      	str	r5, [sp, #20]
 801e12e:	eb02 0c07 	add.w	ip, r2, r7
 801e132:	f2c0 80b6 	blt.w	801e2a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801e136:	45b3      	cmp	fp, r6
 801e138:	f340 80b3 	ble.w	801e2a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801e13c:	2800      	cmp	r0, #0
 801e13e:	f2c0 80ae 	blt.w	801e29e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801e142:	4581      	cmp	r9, r0
 801e144:	f340 80ab 	ble.w	801e29e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801e148:	5dd7      	ldrb	r7, [r2, r7]
 801e14a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e14e:	441f      	add	r7, r3
 801e150:	1c42      	adds	r2, r0, #1
 801e152:	f100 80a9 	bmi.w	801e2a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801e156:	4591      	cmp	r9, r2
 801e158:	f340 80a6 	ble.w	801e2a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801e15c:	2c00      	cmp	r4, #0
 801e15e:	f000 80a3 	beq.w	801e2a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801e162:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e166:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e16a:	441d      	add	r5, r3
 801e16c:	3601      	adds	r6, #1
 801e16e:	f100 809f 	bmi.w	801e2b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801e172:	45b3      	cmp	fp, r6
 801e174:	f340 809c 	ble.w	801e2b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801e178:	f1be 0f00 	cmp.w	lr, #0
 801e17c:	f000 8098 	beq.w	801e2b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801e180:	2800      	cmp	r0, #0
 801e182:	f2c0 8093 	blt.w	801e2ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801e186:	4581      	cmp	r9, r0
 801e188:	f340 8090 	ble.w	801e2ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801e18c:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801e190:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e194:	441e      	add	r6, r3
 801e196:	3001      	adds	r0, #1
 801e198:	f100 808d 	bmi.w	801e2b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801e19c:	4581      	cmp	r9, r0
 801e19e:	f340 808a 	ble.w	801e2b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801e1a2:	2c00      	cmp	r4, #0
 801e1a4:	f000 8087 	beq.w	801e2b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801e1a8:	44e1      	add	r9, ip
 801e1aa:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e1ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e1b2:	4413      	add	r3, r2
 801e1b4:	b2a4      	uxth	r4, r4
 801e1b6:	f897 c002 	ldrb.w	ip, [r7, #2]
 801e1ba:	fa1f fe8e 	uxth.w	lr, lr
 801e1be:	9901      	ldr	r1, [sp, #4]
 801e1c0:	fb04 fb0e 	mul.w	fp, r4, lr
 801e1c4:	0124      	lsls	r4, r4, #4
 801e1c6:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801e1ca:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 801e1ce:	eba4 040b 	sub.w	r4, r4, fp
 801e1d2:	fa1f f08e 	uxth.w	r0, lr
 801e1d6:	b2a2      	uxth	r2, r4
 801e1d8:	78ac      	ldrb	r4, [r5, #2]
 801e1da:	eba9 0900 	sub.w	r9, r9, r0
 801e1de:	fa1f fe88 	uxth.w	lr, r8
 801e1e2:	4354      	muls	r4, r2
 801e1e4:	ea6f 0808 	mvn.w	r8, r8
 801e1e8:	fa1f f989 	uxth.w	r9, r9
 801e1ec:	fa5f f888 	uxtb.w	r8, r8
 801e1f0:	fb09 440c 	mla	r4, r9, ip, r4
 801e1f4:	f896 c002 	ldrb.w	ip, [r6, #2]
 801e1f8:	fb1a fa08 	smulbb	sl, sl, r8
 801e1fc:	fb00 440c 	mla	r4, r0, ip, r4
 801e200:	f893 c002 	ldrb.w	ip, [r3, #2]
 801e204:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801e208:	787c      	ldrb	r4, [r7, #1]
 801e20a:	783f      	ldrb	r7, [r7, #0]
 801e20c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e210:	fb0c ac0e 	mla	ip, ip, lr, sl
 801e214:	f895 a001 	ldrb.w	sl, [r5, #1]
 801e218:	782d      	ldrb	r5, [r5, #0]
 801e21a:	fb02 fa0a 	mul.w	sl, r2, sl
 801e21e:	fa1f fc8c 	uxth.w	ip, ip
 801e222:	436a      	muls	r2, r5
 801e224:	7835      	ldrb	r5, [r6, #0]
 801e226:	fb09 aa04 	mla	sl, r9, r4, sl
 801e22a:	7874      	ldrb	r4, [r6, #1]
 801e22c:	fb09 2207 	mla	r2, r9, r7, r2
 801e230:	fb00 aa04 	mla	sl, r0, r4, sl
 801e234:	785c      	ldrb	r4, [r3, #1]
 801e236:	fb00 2005 	mla	r0, r0, r5, r2
 801e23a:	781b      	ldrb	r3, [r3, #0]
 801e23c:	fb0b a404 	mla	r4, fp, r4, sl
 801e240:	fb11 fa08 	smulbb	sl, r1, r8
 801e244:	fb0b 0b03 	mla	fp, fp, r3, r0
 801e248:	9b02      	ldr	r3, [sp, #8]
 801e24a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e24e:	fb13 f808 	smulbb	r8, r3, r8
 801e252:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801e256:	fb04 a40e 	mla	r4, r4, lr, sl
 801e25a:	f10c 0301 	add.w	r3, ip, #1
 801e25e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801e262:	b2a4      	uxth	r4, r4
 801e264:	fa1f fe8e 	uxth.w	lr, lr
 801e268:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e26c:	f104 0a01 	add.w	sl, r4, #1
 801e270:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 801e274:	f10e 0c01 	add.w	ip, lr, #1
 801e278:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e27c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e280:	0964      	lsrs	r4, r4, #5
 801e282:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e286:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801e28a:	ea4c 0c03 	orr.w	ip, ip, r3
 801e28e:	9b03      	ldr	r3, [sp, #12]
 801e290:	ea4c 0c04 	orr.w	ip, ip, r4
 801e294:	f8a3 c000 	strh.w	ip, [r3]
 801e298:	b007      	add	sp, #28
 801e29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e29e:	af05      	add	r7, sp, #20
 801e2a0:	e756      	b.n	801e150 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801e2a2:	ad05      	add	r5, sp, #20
 801e2a4:	462f      	mov	r7, r5
 801e2a6:	e761      	b.n	801e16c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801e2a8:	ad05      	add	r5, sp, #20
 801e2aa:	e75f      	b.n	801e16c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801e2ac:	ae05      	add	r6, sp, #20
 801e2ae:	e772      	b.n	801e196 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801e2b0:	ab05      	add	r3, sp, #20
 801e2b2:	461e      	mov	r6, r3
 801e2b4:	e77e      	b.n	801e1b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801e2b6:	ab05      	add	r3, sp, #20
 801e2b8:	e77c      	b.n	801e1b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801e2ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e2ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2be:	b095      	sub	sp, #84	@ 0x54
 801e2c0:	9212      	str	r2, [sp, #72]	@ 0x48
 801e2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2c4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e2c6:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801e2ca:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e2cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e2ce:	6850      	ldr	r0, [r2, #4]
 801e2d0:	910e      	str	r1, [sp, #56]	@ 0x38
 801e2d2:	6812      	ldr	r2, [r2, #0]
 801e2d4:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 801e2d8:	fb00 1303 	mla	r3, r0, r3, r1
 801e2dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e2e0:	930a      	str	r3, [sp, #40]	@ 0x28
 801e2e2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2e8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e2ea:	685c      	ldr	r4, [r3, #4]
 801e2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e2ee:	3404      	adds	r4, #4
 801e2f0:	43db      	mvns	r3, r3
 801e2f2:	b2db      	uxtb	r3, r3
 801e2f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e2f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	dc03      	bgt.n	801e304 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e2fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	f340 8255 	ble.w	801e7ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801e304:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e306:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e30a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e30e:	1e48      	subs	r0, r1, #1
 801e310:	1e55      	subs	r5, r2, #1
 801e312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e314:	2b00      	cmp	r3, #0
 801e316:	f340 80f9 	ble.w	801e50c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801e31a:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801e31c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e31e:	1436      	asrs	r6, r6, #16
 801e320:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e324:	d406      	bmi.n	801e334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e326:	4286      	cmp	r6, r0
 801e328:	da04      	bge.n	801e334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	db02      	blt.n	801e334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e32e:	42ab      	cmp	r3, r5
 801e330:	f2c0 80ed 	blt.w	801e50e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e334:	3601      	adds	r6, #1
 801e336:	f100 80da 	bmi.w	801e4ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e33a:	42b1      	cmp	r1, r6
 801e33c:	f2c0 80d7 	blt.w	801e4ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e340:	3301      	adds	r3, #1
 801e342:	f100 80d4 	bmi.w	801e4ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e346:	429a      	cmp	r2, r3
 801e348:	f2c0 80d1 	blt.w	801e4ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e34e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e352:	930c      	str	r3, [sp, #48]	@ 0x30
 801e354:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e356:	2b00      	cmp	r3, #0
 801e358:	f340 80fa 	ble.w	801e550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801e35c:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801e35e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e360:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e362:	68c6      	ldr	r6, [r0, #12]
 801e364:	141d      	asrs	r5, r3, #16
 801e366:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801e368:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e36c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e36e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e370:	1400      	asrs	r0, r0, #16
 801e372:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e376:	6892      	ldr	r2, [r2, #8]
 801e378:	f100 813e 	bmi.w	801e5f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e37c:	1e57      	subs	r7, r2, #1
 801e37e:	42b8      	cmp	r0, r7
 801e380:	f280 813a 	bge.w	801e5f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e384:	2d00      	cmp	r5, #0
 801e386:	f2c0 8137 	blt.w	801e5f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e38a:	1e77      	subs	r7, r6, #1
 801e38c:	42bd      	cmp	r5, r7
 801e38e:	f280 8133 	bge.w	801e5f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e392:	b212      	sxth	r2, r2
 801e394:	fb05 0002 	mla	r0, r5, r2, r0
 801e398:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801e39a:	f815 a000 	ldrb.w	sl, [r5, r0]
 801e39e:	182e      	adds	r6, r5, r0
 801e3a0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801e3a4:	eb04 050a 	add.w	r5, r4, sl
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	f000 8117 	beq.w	801e5dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801e3ae:	f896 c001 	ldrb.w	ip, [r6, #1]
 801e3b2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e3b6:	44a4      	add	ip, r4
 801e3b8:	2900      	cmp	r1, #0
 801e3ba:	f000 8117 	beq.w	801e5ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801e3be:	18b0      	adds	r0, r6, r2
 801e3c0:	5cb2      	ldrb	r2, [r6, r2]
 801e3c2:	7840      	ldrb	r0, [r0, #1]
 801e3c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e3c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e3cc:	4422      	add	r2, r4
 801e3ce:	4420      	add	r0, r4
 801e3d0:	b29b      	uxth	r3, r3
 801e3d2:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801e3d6:	b289      	uxth	r1, r1
 801e3d8:	f895 b002 	ldrb.w	fp, [r5, #2]
 801e3dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e3de:	fb03 f901 	mul.w	r9, r3, r1
 801e3e2:	011b      	lsls	r3, r3, #4
 801e3e4:	f8b6 e000 	ldrh.w	lr, [r6]
 801e3e8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e3ec:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801e3f0:	eba3 0309 	sub.w	r3, r3, r9
 801e3f4:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 801e3f8:	b289      	uxth	r1, r1
 801e3fa:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801e3fe:	b29b      	uxth	r3, r3
 801e400:	eba8 0801 	sub.w	r8, r8, r1
 801e404:	435f      	muls	r7, r3
 801e406:	fa1f f888 	uxth.w	r8, r8
 801e40a:	9310      	str	r3, [sp, #64]	@ 0x40
 801e40c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e40e:	fb08 770b 	mla	r7, r8, fp, r7
 801e412:	f892 b002 	ldrb.w	fp, [r2, #2]
 801e416:	fb01 770b 	mla	r7, r1, fp, r7
 801e41a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801e41e:	fb09 770b 	mla	r7, r9, fp, r7
 801e422:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801e426:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801e42a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e42e:	fb1b fb03 	smulbb	fp, fp, r3
 801e432:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e434:	fb07 b706 	mla	r7, r7, r6, fp
 801e438:	f895 b001 	ldrb.w	fp, [r5, #1]
 801e43c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e440:	f89c c000 	ldrb.w	ip, [ip]
 801e444:	b2bf      	uxth	r7, r7
 801e446:	435d      	muls	r5, r3
 801e448:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e44a:	fb08 550b 	mla	r5, r8, fp, r5
 801e44e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e452:	fb01 550b 	mla	r5, r1, fp, r5
 801e456:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e45a:	fb09 550b 	mla	r5, r9, fp, r5
 801e45e:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801e462:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e466:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801e46a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e46e:	fa5f fe8e 	uxtb.w	lr, lr
 801e472:	fb1b fb03 	smulbb	fp, fp, r3
 801e476:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e478:	fb03 f30c 	mul.w	r3, r3, ip
 801e47c:	f892 c000 	ldrb.w	ip, [r2]
 801e480:	fb05 b506 	mla	r5, r5, r6, fp
 801e484:	fb08 330a 	mla	r3, r8, sl, r3
 801e488:	b2ad      	uxth	r5, r5
 801e48a:	fb01 330c 	mla	r3, r1, ip, r3
 801e48e:	f890 c000 	ldrb.w	ip, [r0]
 801e492:	f105 0b01 	add.w	fp, r5, #1
 801e496:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e49a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e49c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801e4a0:	fb1e fe03 	smulbb	lr, lr, r3
 801e4a4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e4a8:	1c7b      	adds	r3, r7, #1
 801e4aa:	096d      	lsrs	r5, r5, #5
 801e4ac:	fb0c e606 	mla	r6, ip, r6, lr
 801e4b0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e4b4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e4b8:	b2b6      	uxth	r6, r6
 801e4ba:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 801e4be:	1c77      	adds	r7, r6, #1
 801e4c0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801e4c4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e4c8:	431f      	orrs	r7, r3
 801e4ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4cc:	433d      	orrs	r5, r7
 801e4ce:	801d      	strh	r5, [r3, #0]
 801e4d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e4d4:	3302      	adds	r3, #2
 801e4d6:	930c      	str	r3, [sp, #48]	@ 0x30
 801e4d8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e4da:	4413      	add	r3, r2
 801e4dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801e4de:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e4e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e4e2:	4413      	add	r3, r2
 801e4e4:	9320      	str	r3, [sp, #128]	@ 0x80
 801e4e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e4e8:	3b01      	subs	r3, #1
 801e4ea:	9311      	str	r3, [sp, #68]	@ 0x44
 801e4ec:	e732      	b.n	801e354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e4ee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e4f0:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 801e4f2:	4433      	add	r3, r6
 801e4f4:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e4f6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e4f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e4fa:	4433      	add	r3, r6
 801e4fc:	9320      	str	r3, [sp, #128]	@ 0x80
 801e4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e500:	3b01      	subs	r3, #1
 801e502:	9309      	str	r3, [sp, #36]	@ 0x24
 801e504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e506:	3302      	adds	r3, #2
 801e508:	930a      	str	r3, [sp, #40]	@ 0x28
 801e50a:	e702      	b.n	801e312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e50c:	d027      	beq.n	801e55e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801e50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e510:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801e512:	3b01      	subs	r3, #1
 801e514:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801e516:	fb00 5003 	mla	r0, r0, r3, r5
 801e51a:	1400      	asrs	r0, r0, #16
 801e51c:	f53f af16 	bmi.w	801e34c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e520:	3901      	subs	r1, #1
 801e522:	4288      	cmp	r0, r1
 801e524:	f6bf af12 	bge.w	801e34c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e528:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801e52a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801e52c:	fb01 0303 	mla	r3, r1, r3, r0
 801e530:	141b      	asrs	r3, r3, #16
 801e532:	f53f af0b 	bmi.w	801e34c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e536:	3a01      	subs	r2, #1
 801e538:	4293      	cmp	r3, r2
 801e53a:	f6bf af07 	bge.w	801e34c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e540:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 801e544:	9311      	str	r3, [sp, #68]	@ 0x44
 801e546:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e548:	930c      	str	r3, [sp, #48]	@ 0x30
 801e54a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	dc70      	bgt.n	801e632 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801e550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e552:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e558:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e55c:	930a      	str	r3, [sp, #40]	@ 0x28
 801e55e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e560:	2b00      	cmp	r3, #0
 801e562:	f340 8124 	ble.w	801e7ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801e566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e56a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e56c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e570:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e574:	eef0 6a62 	vmov.f32	s13, s5
 801e578:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e57c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e580:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e584:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801e588:	eef0 6a43 	vmov.f32	s13, s6
 801e58c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e590:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 801e594:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e598:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e59c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e5a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e5a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e5a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e5ac:	ee12 2a90 	vmov	r2, s5
 801e5b0:	eef0 2a47 	vmov.f32	s5, s14
 801e5b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5b8:	ee13 2a10 	vmov	r2, s6
 801e5bc:	9321      	str	r3, [sp, #132]	@ 0x84
 801e5be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e5c0:	eeb0 3a67 	vmov.f32	s6, s15
 801e5c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5c8:	9322      	str	r3, [sp, #136]	@ 0x88
 801e5ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e5ce:	3b01      	subs	r3, #1
 801e5d0:	930e      	str	r3, [sp, #56]	@ 0x38
 801e5d2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e5d4:	bf08      	it	eq
 801e5d6:	4613      	moveq	r3, r2
 801e5d8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e5da:	e68c      	b.n	801e2f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e5dc:	b149      	cbz	r1, 801e5f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801e5de:	5cb2      	ldrb	r2, [r6, r2]
 801e5e0:	4628      	mov	r0, r5
 801e5e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e5e6:	4422      	add	r2, r4
 801e5e8:	46ac      	mov	ip, r5
 801e5ea:	e6f1      	b.n	801e3d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e5ec:	4628      	mov	r0, r5
 801e5ee:	462a      	mov	r2, r5
 801e5f0:	e6ee      	b.n	801e3d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e5f2:	4628      	mov	r0, r5
 801e5f4:	462a      	mov	r2, r5
 801e5f6:	e7f7      	b.n	801e5e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801e5f8:	1c47      	adds	r7, r0, #1
 801e5fa:	f53f af69 	bmi.w	801e4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e5fe:	42ba      	cmp	r2, r7
 801e600:	f6ff af66 	blt.w	801e4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e604:	1c6f      	adds	r7, r5, #1
 801e606:	f53f af63 	bmi.w	801e4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e60a:	42be      	cmp	r6, r7
 801e60c:	f6ff af60 	blt.w	801e4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e610:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e612:	b236      	sxth	r6, r6
 801e614:	b212      	sxth	r2, r2
 801e616:	9002      	str	r0, [sp, #8]
 801e618:	9601      	str	r6, [sp, #4]
 801e61a:	9200      	str	r2, [sp, #0]
 801e61c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e61e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801e622:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801e626:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 801e62a:	4623      	mov	r3, r4
 801e62c:	f7ff fd59 	bl	801e0e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801e630:	e74e      	b.n	801e4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e632:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e634:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801e636:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e63a:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801e63c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e63e:	1400      	asrs	r0, r0, #16
 801e640:	142d      	asrs	r5, r5, #16
 801e642:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e644:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e648:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e64c:	fb02 5000 	mla	r0, r2, r0, r5
 801e650:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801e652:	f815 9000 	ldrb.w	r9, [r5, r0]
 801e656:	182e      	adds	r6, r5, r0
 801e658:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e65c:	eb04 0509 	add.w	r5, r4, r9
 801e660:	2b00      	cmp	r3, #0
 801e662:	f000 8096 	beq.w	801e792 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801e666:	7877      	ldrb	r7, [r6, #1]
 801e668:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e66c:	4427      	add	r7, r4
 801e66e:	2900      	cmp	r1, #0
 801e670:	f000 8097 	beq.w	801e7a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801e674:	18b0      	adds	r0, r6, r2
 801e676:	5cb2      	ldrb	r2, [r6, r2]
 801e678:	7840      	ldrb	r0, [r0, #1]
 801e67a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e67e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e682:	4422      	add	r2, r4
 801e684:	4420      	add	r0, r4
 801e686:	b29b      	uxth	r3, r3
 801e688:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e68a:	b289      	uxth	r1, r1
 801e68c:	f895 b002 	ldrb.w	fp, [r5, #2]
 801e690:	f8b6 c000 	ldrh.w	ip, [r6]
 801e694:	fb03 f801 	mul.w	r8, r3, r1
 801e698:	011b      	lsls	r3, r3, #4
 801e69a:	78be      	ldrb	r6, [r7, #2]
 801e69c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801e6a0:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801e6a4:	eba3 0308 	sub.w	r3, r3, r8
 801e6a8:	f814 9009 	ldrb.w	r9, [r4, r9]
 801e6ac:	b289      	uxth	r1, r1
 801e6ae:	b29b      	uxth	r3, r3
 801e6b0:	ebae 0e01 	sub.w	lr, lr, r1
 801e6b4:	435e      	muls	r6, r3
 801e6b6:	fa1f fe8e 	uxth.w	lr, lr
 801e6ba:	9310      	str	r3, [sp, #64]	@ 0x40
 801e6bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6be:	fb0e 660b 	mla	r6, lr, fp, r6
 801e6c2:	f892 b002 	ldrb.w	fp, [r2, #2]
 801e6c6:	fb01 660b 	mla	r6, r1, fp, r6
 801e6ca:	f890 b002 	ldrb.w	fp, [r0, #2]
 801e6ce:	fb08 660b 	mla	r6, r8, fp, r6
 801e6d2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801e6d6:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801e6da:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e6de:	fb1b fb03 	smulbb	fp, fp, r3
 801e6e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e6e4:	fb06 b60a 	mla	r6, r6, sl, fp
 801e6e8:	f895 b001 	ldrb.w	fp, [r5, #1]
 801e6ec:	787d      	ldrb	r5, [r7, #1]
 801e6ee:	783f      	ldrb	r7, [r7, #0]
 801e6f0:	b2b6      	uxth	r6, r6
 801e6f2:	435d      	muls	r5, r3
 801e6f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6f6:	fb0e 550b 	mla	r5, lr, fp, r5
 801e6fa:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e6fe:	fb01 550b 	mla	r5, r1, fp, r5
 801e702:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e706:	fb08 550b 	mla	r5, r8, fp, r5
 801e70a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801e70e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e712:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801e716:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e71a:	fa5f fc8c 	uxtb.w	ip, ip
 801e71e:	fb1b fb03 	smulbb	fp, fp, r3
 801e722:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e724:	437b      	muls	r3, r7
 801e726:	7817      	ldrb	r7, [r2, #0]
 801e728:	fb05 b50a 	mla	r5, r5, sl, fp
 801e72c:	fb0e 3309 	mla	r3, lr, r9, r3
 801e730:	b2ad      	uxth	r5, r5
 801e732:	fb01 3307 	mla	r3, r1, r7, r3
 801e736:	7807      	ldrb	r7, [r0, #0]
 801e738:	f105 0b01 	add.w	fp, r5, #1
 801e73c:	fb08 3707 	mla	r7, r8, r7, r3
 801e740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e742:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801e746:	fb1c fc03 	smulbb	ip, ip, r3
 801e74a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e74e:	1c73      	adds	r3, r6, #1
 801e750:	096d      	lsrs	r5, r5, #5
 801e752:	fb07 c70a 	mla	r7, r7, sl, ip
 801e756:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e75a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e75e:	b2bf      	uxth	r7, r7
 801e760:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e762:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801e766:	1c7a      	adds	r2, r7, #1
 801e768:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801e76c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e770:	4316      	orrs	r6, r2
 801e772:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e774:	432e      	orrs	r6, r5
 801e776:	f823 6b02 	strh.w	r6, [r3], #2
 801e77a:	930c      	str	r3, [sp, #48]	@ 0x30
 801e77c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e77e:	4413      	add	r3, r2
 801e780:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801e782:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e784:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e786:	4413      	add	r3, r2
 801e788:	9320      	str	r3, [sp, #128]	@ 0x80
 801e78a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e78c:	3b01      	subs	r3, #1
 801e78e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e790:	e6db      	b.n	801e54a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801e792:	b149      	cbz	r1, 801e7a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801e794:	5cb2      	ldrb	r2, [r6, r2]
 801e796:	4628      	mov	r0, r5
 801e798:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e79c:	4422      	add	r2, r4
 801e79e:	462f      	mov	r7, r5
 801e7a0:	e771      	b.n	801e686 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801e7a2:	4628      	mov	r0, r5
 801e7a4:	462a      	mov	r2, r5
 801e7a6:	e76e      	b.n	801e686 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801e7a8:	4628      	mov	r0, r5
 801e7aa:	462a      	mov	r2, r5
 801e7ac:	e7f7      	b.n	801e79e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801e7ae:	b015      	add	sp, #84	@ 0x54
 801e7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801e7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7b8:	880f      	ldrh	r7, [r1, #0]
 801e7ba:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801e7be:	023c      	lsls	r4, r7, #8
 801e7c0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801e7c4:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 801e7c8:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 801e7cc:	017c      	lsls	r4, r7, #5
 801e7ce:	00ff      	lsls	r7, r7, #3
 801e7d0:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801e7d4:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 801e7d8:	b2ff      	uxtb	r7, r7
 801e7da:	ea4b 0404 	orr.w	r4, fp, r4
 801e7de:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 801e7e2:	4327      	orrs	r7, r4
 801e7e4:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e7e8:	2d00      	cmp	r5, #0
 801e7ea:	9701      	str	r7, [sp, #4]
 801e7ec:	eb02 080a 	add.w	r8, r2, sl
 801e7f0:	db7e      	blt.n	801e8f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801e7f2:	45a9      	cmp	r9, r5
 801e7f4:	dd7c      	ble.n	801e8f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801e7f6:	f1bc 0f00 	cmp.w	ip, #0
 801e7fa:	db77      	blt.n	801e8ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801e7fc:	45e6      	cmp	lr, ip
 801e7fe:	dd75      	ble.n	801e8ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801e800:	f812 700a 	ldrb.w	r7, [r2, sl]
 801e804:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e808:	441f      	add	r7, r3
 801e80a:	f11c 0201 	adds.w	r2, ip, #1
 801e80e:	d472      	bmi.n	801e8f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801e810:	4596      	cmp	lr, r2
 801e812:	dd70      	ble.n	801e8f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801e814:	2800      	cmp	r0, #0
 801e816:	d06e      	beq.n	801e8f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801e818:	f898 4001 	ldrb.w	r4, [r8, #1]
 801e81c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e820:	441c      	add	r4, r3
 801e822:	3501      	adds	r5, #1
 801e824:	d46b      	bmi.n	801e8fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801e826:	45a9      	cmp	r9, r5
 801e828:	dd69      	ble.n	801e8fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801e82a:	2e00      	cmp	r6, #0
 801e82c:	d067      	beq.n	801e8fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801e82e:	f1bc 0f00 	cmp.w	ip, #0
 801e832:	db62      	blt.n	801e8fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801e834:	45e6      	cmp	lr, ip
 801e836:	dd60      	ble.n	801e8fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801e838:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e83c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e840:	441d      	add	r5, r3
 801e842:	f11c 0201 	adds.w	r2, ip, #1
 801e846:	d45d      	bmi.n	801e904 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801e848:	4596      	cmp	lr, r2
 801e84a:	dd5b      	ble.n	801e904 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801e84c:	2800      	cmp	r0, #0
 801e84e:	d059      	beq.n	801e904 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801e850:	44c6      	add	lr, r8
 801e852:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e856:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e85a:	4413      	add	r3, r2
 801e85c:	b280      	uxth	r0, r0
 801e85e:	f897 e002 	ldrb.w	lr, [r7, #2]
 801e862:	b2b2      	uxth	r2, r6
 801e864:	f897 9000 	ldrb.w	r9, [r7]
 801e868:	787f      	ldrb	r7, [r7, #1]
 801e86a:	fb00 f602 	mul.w	r6, r0, r2
 801e86e:	0100      	lsls	r0, r0, #4
 801e870:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801e874:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 801e878:	1b80      	subs	r0, r0, r6
 801e87a:	fa1f fc82 	uxth.w	ip, r2
 801e87e:	b282      	uxth	r2, r0
 801e880:	78a0      	ldrb	r0, [r4, #2]
 801e882:	eba8 080c 	sub.w	r8, r8, ip
 801e886:	4350      	muls	r0, r2
 801e888:	fa1f f888 	uxth.w	r8, r8
 801e88c:	fb08 0e0e 	mla	lr, r8, lr, r0
 801e890:	78a8      	ldrb	r0, [r5, #2]
 801e892:	fb0c e000 	mla	r0, ip, r0, lr
 801e896:	f893 e002 	ldrb.w	lr, [r3, #2]
 801e89a:	fb06 0e0e 	mla	lr, r6, lr, r0
 801e89e:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 801e8a2:	f894 e000 	ldrb.w	lr, [r4]
 801e8a6:	fb02 fe0e 	mul.w	lr, r2, lr
 801e8aa:	fb08 e909 	mla	r9, r8, r9, lr
 801e8ae:	f895 e000 	ldrb.w	lr, [r5]
 801e8b2:	fb0c 990e 	mla	r9, ip, lr, r9
 801e8b6:	f893 e000 	ldrb.w	lr, [r3]
 801e8ba:	785b      	ldrb	r3, [r3, #1]
 801e8bc:	fb06 9e0e 	mla	lr, r6, lr, r9
 801e8c0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801e8c4:	ea4e 0e00 	orr.w	lr, lr, r0
 801e8c8:	7860      	ldrb	r0, [r4, #1]
 801e8ca:	4350      	muls	r0, r2
 801e8cc:	786a      	ldrb	r2, [r5, #1]
 801e8ce:	fb08 0007 	mla	r0, r8, r7, r0
 801e8d2:	fb0c 0202 	mla	r2, ip, r2, r0
 801e8d6:	fb06 2303 	mla	r3, r6, r3, r2
 801e8da:	095b      	lsrs	r3, r3, #5
 801e8dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e8e0:	ea4e 0303 	orr.w	r3, lr, r3
 801e8e4:	800b      	strh	r3, [r1, #0]
 801e8e6:	b003      	add	sp, #12
 801e8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8ec:	af01      	add	r7, sp, #4
 801e8ee:	e78c      	b.n	801e80a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801e8f0:	ac01      	add	r4, sp, #4
 801e8f2:	4627      	mov	r7, r4
 801e8f4:	e795      	b.n	801e822 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801e8f6:	ac01      	add	r4, sp, #4
 801e8f8:	e793      	b.n	801e822 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801e8fa:	ad01      	add	r5, sp, #4
 801e8fc:	e7a1      	b.n	801e842 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801e8fe:	ab01      	add	r3, sp, #4
 801e900:	461d      	mov	r5, r3
 801e902:	e7ab      	b.n	801e85c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801e904:	ab01      	add	r3, sp, #4
 801e906:	e7a9      	b.n	801e85c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801e908 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e90c:	b08f      	sub	sp, #60	@ 0x3c
 801e90e:	920c      	str	r2, [sp, #48]	@ 0x30
 801e910:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e912:	900d      	str	r0, [sp, #52]	@ 0x34
 801e914:	910a      	str	r1, [sp, #40]	@ 0x28
 801e916:	6850      	ldr	r0, [r2, #4]
 801e918:	9306      	str	r3, [sp, #24]
 801e91a:	6812      	ldr	r2, [r2, #0]
 801e91c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 801e920:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 801e924:	fb00 1303 	mla	r3, r0, r3, r1
 801e928:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e92c:	9307      	str	r3, [sp, #28]
 801e92e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e930:	681b      	ldr	r3, [r3, #0]
 801e932:	9308      	str	r3, [sp, #32]
 801e934:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e936:	685c      	ldr	r4, [r3, #4]
 801e938:	3404      	adds	r4, #4
 801e93a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	dc03      	bgt.n	801e948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e942:	2b00      	cmp	r3, #0
 801e944:	f340 81d5 	ble.w	801ecf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801e948:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e94a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e94e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e952:	1e48      	subs	r0, r1, #1
 801e954:	1e56      	subs	r6, r2, #1
 801e956:	9b06      	ldr	r3, [sp, #24]
 801e958:	2b00      	cmp	r3, #0
 801e95a:	f340 80b6 	ble.w	801eaca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e95e:	ea5f 472b 	movs.w	r7, fp, asr #16
 801e962:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e966:	d406      	bmi.n	801e976 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e968:	4287      	cmp	r7, r0
 801e96a:	da04      	bge.n	801e976 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	db02      	blt.n	801e976 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e970:	42b3      	cmp	r3, r6
 801e972:	f2c0 80ab 	blt.w	801eacc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801e976:	3701      	adds	r7, #1
 801e978:	f100 809c 	bmi.w	801eab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e97c:	42b9      	cmp	r1, r7
 801e97e:	f2c0 8099 	blt.w	801eab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e982:	3301      	adds	r3, #1
 801e984:	f100 8096 	bmi.w	801eab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e988:	429a      	cmp	r2, r3
 801e98a:	f2c0 8093 	blt.w	801eab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e98e:	9b06      	ldr	r3, [sp, #24]
 801e990:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e992:	9b07      	ldr	r3, [sp, #28]
 801e994:	9309      	str	r3, [sp, #36]	@ 0x24
 801e996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e998:	2b00      	cmp	r3, #0
 801e99a:	f340 80b4 	ble.w	801eb06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801e99e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801e9a0:	142e      	asrs	r6, r5, #16
 801e9a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e9a4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801e9a8:	68c7      	ldr	r7, [r0, #12]
 801e9aa:	ea5f 402b 	movs.w	r0, fp, asr #16
 801e9ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e9b2:	6892      	ldr	r2, [r2, #8]
 801e9b4:	f100 80fb 	bmi.w	801ebae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e9b8:	f102 3cff 	add.w	ip, r2, #4294967295
 801e9bc:	4560      	cmp	r0, ip
 801e9be:	f280 80f6 	bge.w	801ebae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e9c2:	2e00      	cmp	r6, #0
 801e9c4:	f2c0 80f3 	blt.w	801ebae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e9c8:	f107 3cff 	add.w	ip, r7, #4294967295
 801e9cc:	4566      	cmp	r6, ip
 801e9ce:	f280 80ee 	bge.w	801ebae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e9d2:	b212      	sxth	r2, r2
 801e9d4:	fb06 0002 	mla	r0, r6, r2, r0
 801e9d8:	9e08      	ldr	r6, [sp, #32]
 801e9da:	1837      	adds	r7, r6, r0
 801e9dc:	5c30      	ldrb	r0, [r6, r0]
 801e9de:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801e9e2:	eb04 0c08 	add.w	ip, r4, r8
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	f000 80d3 	beq.w	801eb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e9ec:	787e      	ldrb	r6, [r7, #1]
 801e9ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e9f2:	4426      	add	r6, r4
 801e9f4:	2900      	cmp	r1, #0
 801e9f6:	f000 80d4 	beq.w	801eba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e9fa:	18b8      	adds	r0, r7, r2
 801e9fc:	5cba      	ldrb	r2, [r7, r2]
 801e9fe:	7840      	ldrb	r0, [r0, #1]
 801ea00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ea04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea08:	4422      	add	r2, r4
 801ea0a:	4420      	add	r0, r4
 801ea0c:	b29b      	uxth	r3, r3
 801ea0e:	78b7      	ldrb	r7, [r6, #2]
 801ea10:	b289      	uxth	r1, r1
 801ea12:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ea16:	f89c c001 	ldrb.w	ip, [ip, #1]
 801ea1a:	fb03 f901 	mul.w	r9, r3, r1
 801ea1e:	011b      	lsls	r3, r3, #4
 801ea20:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ea24:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801ea28:	eba3 0309 	sub.w	r3, r3, r9
 801ea2c:	b289      	uxth	r1, r1
 801ea2e:	b29b      	uxth	r3, r3
 801ea30:	ebae 0e01 	sub.w	lr, lr, r1
 801ea34:	435f      	muls	r7, r3
 801ea36:	fa1f fe8e 	uxth.w	lr, lr
 801ea3a:	fb0e 770a 	mla	r7, lr, sl, r7
 801ea3e:	f892 a002 	ldrb.w	sl, [r2, #2]
 801ea42:	fb01 770a 	mla	r7, r1, sl, r7
 801ea46:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ea4a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801ea4e:	f814 7008 	ldrb.w	r7, [r4, r8]
 801ea52:	f896 8000 	ldrb.w	r8, [r6]
 801ea56:	7876      	ldrb	r6, [r6, #1]
 801ea58:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801ea5c:	fb03 f808 	mul.w	r8, r3, r8
 801ea60:	4373      	muls	r3, r6
 801ea62:	fb0e 8807 	mla	r8, lr, r7, r8
 801ea66:	7817      	ldrb	r7, [r2, #0]
 801ea68:	fb0e 330c 	mla	r3, lr, ip, r3
 801ea6c:	fb01 8807 	mla	r8, r1, r7, r8
 801ea70:	7807      	ldrb	r7, [r0, #0]
 801ea72:	fb09 8707 	mla	r7, r9, r7, r8
 801ea76:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ea7a:	ea47 070a 	orr.w	r7, r7, sl
 801ea7e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ea82:	fb01 310a 	mla	r1, r1, sl, r3
 801ea86:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ea8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea8c:	fb09 1a0a 	mla	sl, r9, sl, r1
 801ea90:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ea94:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ea98:	ea47 070a 	orr.w	r7, r7, sl
 801ea9c:	801f      	strh	r7, [r3, #0]
 801ea9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eaa0:	3302      	adds	r3, #2
 801eaa2:	9309      	str	r3, [sp, #36]	@ 0x24
 801eaa4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801eaa6:	449b      	add	fp, r3
 801eaa8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801eaaa:	441d      	add	r5, r3
 801eaac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eaae:	3b01      	subs	r3, #1
 801eab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eab2:	e770      	b.n	801e996 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801eab4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801eab6:	449b      	add	fp, r3
 801eab8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801eaba:	441d      	add	r5, r3
 801eabc:	9b06      	ldr	r3, [sp, #24]
 801eabe:	3b01      	subs	r3, #1
 801eac0:	9306      	str	r3, [sp, #24]
 801eac2:	9b07      	ldr	r3, [sp, #28]
 801eac4:	3302      	adds	r3, #2
 801eac6:	9307      	str	r3, [sp, #28]
 801eac8:	e745      	b.n	801e956 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801eaca:	d023      	beq.n	801eb14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801eacc:	9b06      	ldr	r3, [sp, #24]
 801eace:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801ead0:	3b01      	subs	r3, #1
 801ead2:	fb00 b003 	mla	r0, r0, r3, fp
 801ead6:	1400      	asrs	r0, r0, #16
 801ead8:	f53f af59 	bmi.w	801e98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eadc:	3901      	subs	r1, #1
 801eade:	4288      	cmp	r0, r1
 801eae0:	f6bf af55 	bge.w	801e98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eae4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801eae6:	fb01 5303 	mla	r3, r1, r3, r5
 801eaea:	141b      	asrs	r3, r3, #16
 801eaec:	f53f af4f 	bmi.w	801e98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eaf0:	3a01      	subs	r2, #1
 801eaf2:	4293      	cmp	r3, r2
 801eaf4:	f6bf af4b 	bge.w	801e98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eaf8:	9b06      	ldr	r3, [sp, #24]
 801eafa:	9309      	str	r3, [sp, #36]	@ 0x24
 801eafc:	9b07      	ldr	r3, [sp, #28]
 801eafe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	dc70      	bgt.n	801ebe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801eb06:	9b06      	ldr	r3, [sp, #24]
 801eb08:	9a07      	ldr	r2, [sp, #28]
 801eb0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb0e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eb12:	9307      	str	r3, [sp, #28]
 801eb14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	f340 80eb 	ble.w	801ecf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801eb1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eb20:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801eb22:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb2a:	eef0 6a62 	vmov.f32	s13, s5
 801eb2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eb32:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb3a:	ee16 ba90 	vmov	fp, s13
 801eb3e:	eef0 6a43 	vmov.f32	s13, s6
 801eb42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb46:	ee16 5a90 	vmov	r5, s13
 801eb4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb52:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb62:	ee12 2a90 	vmov	r2, s5
 801eb66:	eef0 2a47 	vmov.f32	s5, s14
 801eb6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb6e:	ee13 2a10 	vmov	r2, s6
 801eb72:	931b      	str	r3, [sp, #108]	@ 0x6c
 801eb74:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801eb76:	eeb0 3a67 	vmov.f32	s6, s15
 801eb7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb7e:	931c      	str	r3, [sp, #112]	@ 0x70
 801eb80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb84:	3b01      	subs	r3, #1
 801eb86:	930a      	str	r3, [sp, #40]	@ 0x28
 801eb88:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801eb8a:	bf08      	it	eq
 801eb8c:	4613      	moveq	r3, r2
 801eb8e:	9306      	str	r3, [sp, #24]
 801eb90:	e6d3      	b.n	801e93a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801eb92:	b149      	cbz	r1, 801eba8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801eb94:	5cba      	ldrb	r2, [r7, r2]
 801eb96:	4660      	mov	r0, ip
 801eb98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb9c:	4422      	add	r2, r4
 801eb9e:	4666      	mov	r6, ip
 801eba0:	e734      	b.n	801ea0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801eba2:	4660      	mov	r0, ip
 801eba4:	4662      	mov	r2, ip
 801eba6:	e731      	b.n	801ea0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801eba8:	4660      	mov	r0, ip
 801ebaa:	4662      	mov	r2, ip
 801ebac:	e7f7      	b.n	801eb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ebae:	f110 0c01 	adds.w	ip, r0, #1
 801ebb2:	f53f af74 	bmi.w	801ea9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ebb6:	4562      	cmp	r2, ip
 801ebb8:	f6ff af71 	blt.w	801ea9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ebbc:	f116 0c01 	adds.w	ip, r6, #1
 801ebc0:	f53f af6d 	bmi.w	801ea9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ebc4:	4567      	cmp	r7, ip
 801ebc6:	f6ff af6a 	blt.w	801ea9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ebca:	b23f      	sxth	r7, r7
 801ebcc:	b212      	sxth	r2, r2
 801ebce:	9701      	str	r7, [sp, #4]
 801ebd0:	9200      	str	r2, [sp, #0]
 801ebd2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801ebd6:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801ebda:	4623      	mov	r3, r4
 801ebdc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ebde:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ebe2:	f7ff fde7 	bl	801e7b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801ebe6:	e75a      	b.n	801ea9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ebe8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ebea:	ea4f 462b 	mov.w	r6, fp, asr #16
 801ebee:	1428      	asrs	r0, r5, #16
 801ebf0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ebf4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ebf8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ebfc:	fb02 6000 	mla	r0, r2, r0, r6
 801ec00:	9e08      	ldr	r6, [sp, #32]
 801ec02:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ec06:	1837      	adds	r7, r6, r0
 801ec08:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ec0c:	eb04 0c08 	add.w	ip, r4, r8
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d060      	beq.n	801ecd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801ec14:	787e      	ldrb	r6, [r7, #1]
 801ec16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ec1a:	4426      	add	r6, r4
 801ec1c:	2900      	cmp	r1, #0
 801ec1e:	d062      	beq.n	801ece6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801ec20:	18b8      	adds	r0, r7, r2
 801ec22:	5cba      	ldrb	r2, [r7, r2]
 801ec24:	7840      	ldrb	r0, [r0, #1]
 801ec26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec2e:	4422      	add	r2, r4
 801ec30:	4420      	add	r0, r4
 801ec32:	b29b      	uxth	r3, r3
 801ec34:	78b7      	ldrb	r7, [r6, #2]
 801ec36:	b289      	uxth	r1, r1
 801ec38:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ec3c:	f89c c001 	ldrb.w	ip, [ip, #1]
 801ec40:	fb03 f901 	mul.w	r9, r3, r1
 801ec44:	011b      	lsls	r3, r3, #4
 801ec46:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ec4a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801ec4e:	eba3 0309 	sub.w	r3, r3, r9
 801ec52:	b289      	uxth	r1, r1
 801ec54:	b29b      	uxth	r3, r3
 801ec56:	ebae 0e01 	sub.w	lr, lr, r1
 801ec5a:	435f      	muls	r7, r3
 801ec5c:	fa1f fe8e 	uxth.w	lr, lr
 801ec60:	fb0e 770a 	mla	r7, lr, sl, r7
 801ec64:	f892 a002 	ldrb.w	sl, [r2, #2]
 801ec68:	fb01 770a 	mla	r7, r1, sl, r7
 801ec6c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ec70:	fb09 7a0a 	mla	sl, r9, sl, r7
 801ec74:	f814 7008 	ldrb.w	r7, [r4, r8]
 801ec78:	f896 8000 	ldrb.w	r8, [r6]
 801ec7c:	7876      	ldrb	r6, [r6, #1]
 801ec7e:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801ec82:	fb03 f808 	mul.w	r8, r3, r8
 801ec86:	4373      	muls	r3, r6
 801ec88:	7856      	ldrb	r6, [r2, #1]
 801ec8a:	fb0e 8807 	mla	r8, lr, r7, r8
 801ec8e:	7817      	ldrb	r7, [r2, #0]
 801ec90:	fb0e 330c 	mla	r3, lr, ip, r3
 801ec94:	fb01 8807 	mla	r8, r1, r7, r8
 801ec98:	7807      	ldrb	r7, [r0, #0]
 801ec9a:	fb01 3306 	mla	r3, r1, r6, r3
 801ec9e:	fb09 8707 	mla	r7, r9, r7, r8
 801eca2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801eca6:	ea47 070a 	orr.w	r7, r7, sl
 801ecaa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ecae:	fb09 3a0a 	mla	sl, r9, sl, r3
 801ecb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ecb4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ecb8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ecbc:	ea47 070a 	orr.w	r7, r7, sl
 801ecc0:	f823 7b02 	strh.w	r7, [r3], #2
 801ecc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ecc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ecc8:	449b      	add	fp, r3
 801ecca:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801eccc:	441d      	add	r5, r3
 801ecce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecd0:	3b01      	subs	r3, #1
 801ecd2:	9309      	str	r3, [sp, #36]	@ 0x24
 801ecd4:	e714      	b.n	801eb00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801ecd6:	b149      	cbz	r1, 801ecec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801ecd8:	5cba      	ldrb	r2, [r7, r2]
 801ecda:	4660      	mov	r0, ip
 801ecdc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ece0:	4422      	add	r2, r4
 801ece2:	4666      	mov	r6, ip
 801ece4:	e7a5      	b.n	801ec32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801ece6:	4660      	mov	r0, ip
 801ece8:	4662      	mov	r2, ip
 801ecea:	e7a2      	b.n	801ec32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801ecec:	4660      	mov	r0, ip
 801ecee:	4662      	mov	r2, ip
 801ecf0:	e7f7      	b.n	801ece2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801ecf2:	b00f      	add	sp, #60	@ 0x3c
 801ecf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecf8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecfc:	b085      	sub	sp, #20
 801ecfe:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 801ed02:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 801ed06:	9102      	str	r1, [sp, #8]
 801ed08:	2c00      	cmp	r4, #0
 801ed0a:	fb04 710c 	mla	r1, r4, ip, r7
 801ed0e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801ed12:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 801ed16:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801ed1a:	eb02 0e01 	add.w	lr, r2, r1
 801ed1e:	f2c0 8122 	blt.w	801ef66 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801ed22:	45a0      	cmp	r8, r4
 801ed24:	f340 811f 	ble.w	801ef66 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801ed28:	2f00      	cmp	r7, #0
 801ed2a:	f2c0 811a 	blt.w	801ef62 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801ed2e:	45bc      	cmp	ip, r7
 801ed30:	f340 8117 	ble.w	801ef62 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801ed34:	5c52      	ldrb	r2, [r2, r1]
 801ed36:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ed3a:	1c7a      	adds	r2, r7, #1
 801ed3c:	f100 8116 	bmi.w	801ef6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801ed40:	4594      	cmp	ip, r2
 801ed42:	f340 8113 	ble.w	801ef6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801ed46:	2e00      	cmp	r6, #0
 801ed48:	f000 8112 	beq.w	801ef70 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801ed4c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ed50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ed54:	3401      	adds	r4, #1
 801ed56:	f100 810f 	bmi.w	801ef78 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801ed5a:	45a0      	cmp	r8, r4
 801ed5c:	f340 810c 	ble.w	801ef78 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801ed60:	2800      	cmp	r0, #0
 801ed62:	f000 810c 	beq.w	801ef7e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801ed66:	2f00      	cmp	r7, #0
 801ed68:	f2c0 8104 	blt.w	801ef74 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801ed6c:	45bc      	cmp	ip, r7
 801ed6e:	f340 8101 	ble.w	801ef74 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801ed72:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801ed76:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801ed7a:	3701      	adds	r7, #1
 801ed7c:	f100 8102 	bmi.w	801ef84 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801ed80:	45bc      	cmp	ip, r7
 801ed82:	f340 80ff 	ble.w	801ef84 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801ed86:	2e00      	cmp	r6, #0
 801ed88:	f000 80fe 	beq.w	801ef88 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801ed8c:	44f4      	add	ip, lr
 801ed8e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ed92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ed96:	b2b6      	uxth	r6, r6
 801ed98:	b280      	uxth	r0, r0
 801ed9a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801ed9e:	fb00 fe06 	mul.w	lr, r0, r6
 801eda2:	0136      	lsls	r6, r6, #4
 801eda4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801eda8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801edac:	eba6 070e 	sub.w	r7, r6, lr
 801edb0:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 801edb4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801edb8:	b280      	uxth	r0, r0
 801edba:	b2bf      	uxth	r7, r7
 801edbc:	1a1b      	subs	r3, r3, r0
 801edbe:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801edc2:	fb0a f607 	mul.w	r6, sl, r7
 801edc6:	b29b      	uxth	r3, r3
 801edc8:	fb0b 6603 	mla	r6, fp, r3, r6
 801edcc:	fb00 6609 	mla	r6, r0, r9, r6
 801edd0:	fb0e 6608 	mla	r6, lr, r8, r6
 801edd4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801edd8:	9600      	str	r6, [sp, #0]
 801edda:	2e00      	cmp	r6, #0
 801eddc:	f000 80be 	beq.w	801ef5c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801ede0:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801ede4:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ede8:	9e02      	ldr	r6, [sp, #8]
 801edea:	fb0b fc0c 	mul.w	ip, fp, ip
 801edee:	fb0b f505 	mul.w	r5, fp, r5
 801edf2:	8836      	ldrh	r6, [r6, #0]
 801edf4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801edf8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801edfc:	9501      	str	r5, [sp, #4]
 801edfe:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801ee02:	44dc      	add	ip, fp
 801ee04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee08:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 801ee0c:	9503      	str	r5, [sp, #12]
 801ee0e:	9d01      	ldr	r5, [sp, #4]
 801ee10:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 801ee14:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ee18:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 801ee1c:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801ee20:	fb0a fc0c 	mul.w	ip, sl, ip
 801ee24:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801ee28:	fb0a fa01 	mul.w	sl, sl, r1
 801ee2c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801ee30:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ee34:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 801ee38:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801ee3c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801ee40:	4465      	add	r5, ip
 801ee42:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ee46:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 801ee4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee4e:	fb09 fc0c 	mul.w	ip, r9, ip
 801ee52:	0a2d      	lsrs	r5, r5, #8
 801ee54:	fb09 f904 	mul.w	r9, r9, r4
 801ee58:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ee5c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801ee60:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801ee64:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 801ee68:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ee6c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801ee70:	437d      	muls	r5, r7
 801ee72:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ee76:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 801ee7a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ee7e:	4461      	add	r1, ip
 801ee80:	fb08 f404 	mul.w	r4, r8, r4
 801ee84:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ee88:	fb08 f802 	mul.w	r8, r8, r2
 801ee8c:	0a09      	lsrs	r1, r1, #8
 801ee8e:	0a22      	lsrs	r2, r4, #8
 801ee90:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 801ee94:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801ee98:	fb07 f70a 	mul.w	r7, r7, sl
 801ee9c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801eea0:	4414      	add	r4, r2
 801eea2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801eea6:	0a24      	lsrs	r4, r4, #8
 801eea8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801eeac:	9a03      	ldr	r2, [sp, #12]
 801eeae:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 801eeb2:	fb02 5503 	mla	r5, r2, r3, r5
 801eeb6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801eeba:	9a00      	ldr	r2, [sp, #0]
 801eebc:	fb04 540e 	mla	r4, r4, lr, r5
 801eec0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801eec4:	1235      	asrs	r5, r6, #8
 801eec6:	fb01 4100 	mla	r1, r1, r0, r4
 801eeca:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801eece:	0a09      	lsrs	r1, r1, #8
 801eed0:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 801eed4:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 801eed8:	fb03 7101 	mla	r1, r3, r1, r7
 801eedc:	fb0e 1e08 	mla	lr, lr, r8, r1
 801eee0:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 801eee4:	fb00 e101 	mla	r1, r0, r1, lr
 801eee8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801eeec:	b287      	uxth	r7, r0
 801eeee:	0a09      	lsrs	r1, r1, #8
 801eef0:	437a      	muls	r2, r7
 801eef2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801eef6:	1c53      	adds	r3, r2, #1
 801eef8:	4321      	orrs	r1, r4
 801eefa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eefe:	0c0a      	lsrs	r2, r1, #16
 801ef00:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801ef04:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ef08:	b2c8      	uxtb	r0, r1
 801ef0a:	fb12 f207 	smulbb	r2, r2, r7
 801ef0e:	fb14 f407 	smulbb	r4, r4, r7
 801ef12:	b2db      	uxtb	r3, r3
 801ef14:	fb10 f007 	smulbb	r0, r0, r7
 801ef18:	fb05 2503 	mla	r5, r5, r3, r2
 801ef1c:	10f2      	asrs	r2, r6, #3
 801ef1e:	00f6      	lsls	r6, r6, #3
 801ef20:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801ef24:	b2ad      	uxth	r5, r5
 801ef26:	b2f6      	uxtb	r6, r6
 801ef28:	fb02 4203 	mla	r2, r2, r3, r4
 801ef2c:	fb06 0303 	mla	r3, r6, r3, r0
 801ef30:	b294      	uxth	r4, r2
 801ef32:	b299      	uxth	r1, r3
 801ef34:	1c6b      	adds	r3, r5, #1
 801ef36:	1c62      	adds	r2, r4, #1
 801ef38:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ef3c:	1c4b      	adds	r3, r1, #1
 801ef3e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ef42:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ef46:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801ef4a:	0952      	lsrs	r2, r2, #5
 801ef4c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ef50:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ef54:	432b      	orrs	r3, r5
 801ef56:	4313      	orrs	r3, r2
 801ef58:	9a02      	ldr	r2, [sp, #8]
 801ef5a:	8013      	strh	r3, [r2, #0]
 801ef5c:	b005      	add	sp, #20
 801ef5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef62:	2500      	movs	r5, #0
 801ef64:	e6e9      	b.n	801ed3a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801ef66:	2100      	movs	r1, #0
 801ef68:	460d      	mov	r5, r1
 801ef6a:	e6f3      	b.n	801ed54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801ef6c:	2100      	movs	r1, #0
 801ef6e:	e6f1      	b.n	801ed54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801ef70:	4631      	mov	r1, r6
 801ef72:	e6ef      	b.n	801ed54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801ef74:	2400      	movs	r4, #0
 801ef76:	e700      	b.n	801ed7a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801ef78:	2200      	movs	r2, #0
 801ef7a:	4614      	mov	r4, r2
 801ef7c:	e70b      	b.n	801ed96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801ef7e:	4602      	mov	r2, r0
 801ef80:	4604      	mov	r4, r0
 801ef82:	e708      	b.n	801ed96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801ef84:	2200      	movs	r2, #0
 801ef86:	e706      	b.n	801ed96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801ef88:	4632      	mov	r2, r6
 801ef8a:	e704      	b.n	801ed96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801ef8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef90:	b09f      	sub	sp, #124	@ 0x7c
 801ef92:	921b      	str	r2, [sp, #108]	@ 0x6c
 801ef94:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef96:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801ef98:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801ef9c:	901d      	str	r0, [sp, #116]	@ 0x74
 801ef9e:	931c      	str	r3, [sp, #112]	@ 0x70
 801efa0:	6850      	ldr	r0, [r2, #4]
 801efa2:	9119      	str	r1, [sp, #100]	@ 0x64
 801efa4:	6812      	ldr	r2, [r2, #0]
 801efa6:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801efa8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801efac:	fb00 1303 	mla	r3, r0, r3, r1
 801efb0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801efb4:	930c      	str	r3, [sp, #48]	@ 0x30
 801efb6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801efb8:	681b      	ldr	r3, [r3, #0]
 801efba:	9312      	str	r3, [sp, #72]	@ 0x48
 801efbc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801efbe:	685e      	ldr	r6, [r3, #4]
 801efc0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801efc4:	3604      	adds	r6, #4
 801efc6:	930d      	str	r3, [sp, #52]	@ 0x34
 801efc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801efca:	2b00      	cmp	r3, #0
 801efcc:	dc03      	bgt.n	801efd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801efce:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	f340 8387 	ble.w	801f6e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801efd6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801efd8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801efdc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801efe0:	1e48      	subs	r0, r1, #1
 801efe2:	1e57      	subs	r7, r2, #1
 801efe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	f340 8194 	ble.w	801f314 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801efec:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801efee:	142b      	asrs	r3, r5, #16
 801eff0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801eff4:	d406      	bmi.n	801f004 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eff6:	4584      	cmp	ip, r0
 801eff8:	da04      	bge.n	801f004 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801effa:	2b00      	cmp	r3, #0
 801effc:	db02      	blt.n	801f004 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801effe:	42bb      	cmp	r3, r7
 801f000:	f2c0 8189 	blt.w	801f316 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f004:	f11c 0c01 	adds.w	ip, ip, #1
 801f008:	f100 8177 	bmi.w	801f2fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f00c:	4561      	cmp	r1, ip
 801f00e:	f2c0 8174 	blt.w	801f2fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f012:	3301      	adds	r3, #1
 801f014:	f100 8171 	bmi.w	801f2fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f018:	429a      	cmp	r2, r3
 801f01a:	f2c0 816e 	blt.w	801f2fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f020:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f022:	931a      	str	r3, [sp, #104]	@ 0x68
 801f024:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f026:	2b00      	cmp	r3, #0
 801f028:	f340 8193 	ble.w	801f352 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801f02c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f02e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f032:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f036:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f03a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f03c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f040:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f042:	141b      	asrs	r3, r3, #16
 801f044:	f100 81d6 	bmi.w	801f3f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801f048:	f100 38ff 	add.w	r8, r0, #4294967295
 801f04c:	4543      	cmp	r3, r8
 801f04e:	f280 81d1 	bge.w	801f3f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801f052:	f1bc 0f00 	cmp.w	ip, #0
 801f056:	f2c0 81cd 	blt.w	801f3f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801f05a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f05e:	45c4      	cmp	ip, r8
 801f060:	f280 81c8 	bge.w	801f3f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801f064:	b200      	sxth	r0, r0
 801f066:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f068:	fb0c 3300 	mla	r3, ip, r0, r3
 801f06c:	eb04 0803 	add.w	r8, r4, r3
 801f070:	5ce3      	ldrb	r3, [r4, r3]
 801f072:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f076:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f07a:	2a00      	cmp	r2, #0
 801f07c:	f000 81af 	beq.w	801f3de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801f080:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f084:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f088:	940e      	str	r4, [sp, #56]	@ 0x38
 801f08a:	0e24      	lsrs	r4, r4, #24
 801f08c:	9415      	str	r4, [sp, #84]	@ 0x54
 801f08e:	b179      	cbz	r1, 801f0b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f090:	eb08 0c00 	add.w	ip, r8, r0
 801f094:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f098:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f09c:	900a      	str	r0, [sp, #40]	@ 0x28
 801f09e:	0e00      	lsrs	r0, r0, #24
 801f0a0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f0a2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f0a6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f0aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f0ac:	0e00      	lsrs	r0, r0, #24
 801f0ae:	9016      	str	r0, [sp, #88]	@ 0x58
 801f0b0:	b292      	uxth	r2, r2
 801f0b2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f0b4:	b289      	uxth	r1, r1
 801f0b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f0b8:	fb02 f901 	mul.w	r9, r2, r1
 801f0bc:	0112      	lsls	r2, r2, #4
 801f0be:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f0c2:	eba2 0809 	sub.w	r8, r2, r9
 801f0c6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801f0ca:	b289      	uxth	r1, r1
 801f0cc:	fa1f f888 	uxth.w	r8, r8
 801f0d0:	1a52      	subs	r2, r2, r1
 801f0d2:	fb08 f000 	mul.w	r0, r8, r0
 801f0d6:	b292      	uxth	r2, r2
 801f0d8:	fb02 000e 	mla	r0, r2, lr, r0
 801f0dc:	fb01 0004 	mla	r0, r1, r4, r0
 801f0e0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f0e2:	fb09 0004 	mla	r0, r9, r4, r0
 801f0e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f0ea:	2800      	cmp	r0, #0
 801f0ec:	f000 80fa 	beq.w	801f2e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f0f0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f0f4:	d01b      	beq.n	801f12e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801f0f6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f0fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f0fe:	fb0e fa0a 	mul.w	sl, lr, sl
 801f102:	fb0e fe03 	mul.w	lr, lr, r3
 801f106:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f10a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f10e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801f112:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f116:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f11a:	4453      	add	r3, sl
 801f11c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f120:	0a1b      	lsrs	r3, r3, #8
 801f122:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f126:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f12a:	ea43 030c 	orr.w	r3, r3, ip
 801f12e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f130:	2cff      	cmp	r4, #255	@ 0xff
 801f132:	d021      	beq.n	801f178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801f134:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f136:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f13a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f13c:	fb04 fb0b 	mul.w	fp, r4, fp
 801f140:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f142:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f146:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f148:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f14c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f150:	fb04 fa0a 	mul.w	sl, r4, sl
 801f154:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f158:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f15c:	44de      	add	lr, fp
 801f15e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f162:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f166:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f16a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f16e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f172:	ea4e 040a 	orr.w	r4, lr, sl
 801f176:	940e      	str	r4, [sp, #56]	@ 0x38
 801f178:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f17a:	2cff      	cmp	r4, #255	@ 0xff
 801f17c:	d021      	beq.n	801f1c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f17e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f180:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f184:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f186:	fb04 fb0b 	mul.w	fp, r4, fp
 801f18a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f18c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f190:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f192:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f196:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f19a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f19e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f1a2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f1a6:	44de      	add	lr, fp
 801f1a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f1ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f1b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f1bc:	ea4e 040a 	orr.w	r4, lr, sl
 801f1c0:	940a      	str	r4, [sp, #40]	@ 0x28
 801f1c2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f1c4:	2cff      	cmp	r4, #255	@ 0xff
 801f1c6:	d021      	beq.n	801f20c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801f1c8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f1ca:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f1ce:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f1d0:	fb04 fb0b 	mul.w	fp, r4, fp
 801f1d4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f1d6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f1da:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f1dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f1e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f1e4:	fb04 fa0a 	mul.w	sl, r4, sl
 801f1e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f1ec:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f1f0:	44de      	add	lr, fp
 801f1f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f1f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f202:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f206:	ea4e 040a 	orr.w	r4, lr, sl
 801f20a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801f20c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f20e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801f212:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f216:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f21a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f21c:	fb08 fc0c 	mul.w	ip, r8, ip
 801f220:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f224:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f228:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f22a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f22e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f232:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f234:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f238:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f23c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f23e:	fb08 f80e 	mul.w	r8, r8, lr
 801f242:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f246:	fb02 8303 	mla	r3, r2, r3, r8
 801f24a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f24c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f250:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801f254:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f256:	fb01 330a 	mla	r3, r1, sl, r3
 801f25a:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801f25e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f260:	fb09 3901 	mla	r9, r9, r1, r3
 801f264:	883b      	ldrh	r3, [r7, #0]
 801f266:	4342      	muls	r2, r0
 801f268:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f26c:	1c50      	adds	r0, r2, #1
 801f26e:	1219      	asrs	r1, r3, #8
 801f270:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801f274:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f278:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801f27c:	ea4c 0c09 	orr.w	ip, ip, r9
 801f280:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f284:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801f288:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801f28c:	b2c0      	uxtb	r0, r0
 801f28e:	fb12 f204 	smulbb	r2, r2, r4
 801f292:	fa5f fc8c 	uxtb.w	ip, ip
 801f296:	fb1e fe04 	smulbb	lr, lr, r4
 801f29a:	fb01 2100 	mla	r1, r1, r0, r2
 801f29e:	10da      	asrs	r2, r3, #3
 801f2a0:	fb1c fc04 	smulbb	ip, ip, r4
 801f2a4:	00db      	lsls	r3, r3, #3
 801f2a6:	b289      	uxth	r1, r1
 801f2a8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801f2ac:	b2db      	uxtb	r3, r3
 801f2ae:	fb02 e200 	mla	r2, r2, r0, lr
 801f2b2:	fb03 c300 	mla	r3, r3, r0, ip
 801f2b6:	b292      	uxth	r2, r2
 801f2b8:	fa1f fc83 	uxth.w	ip, r3
 801f2bc:	1c4b      	adds	r3, r1, #1
 801f2be:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f2c2:	f10c 0301 	add.w	r3, ip, #1
 801f2c6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801f2ca:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801f2ce:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f2d2:	430b      	orrs	r3, r1
 801f2d4:	1c51      	adds	r1, r2, #1
 801f2d6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f2da:	0952      	lsrs	r2, r2, #5
 801f2dc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f2e0:	4313      	orrs	r3, r2
 801f2e2:	803b      	strh	r3, [r7, #0]
 801f2e4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f2e6:	3702      	adds	r7, #2
 801f2e8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f2ea:	441a      	add	r2, r3
 801f2ec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f2ee:	441d      	add	r5, r3
 801f2f0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f2f2:	9229      	str	r2, [sp, #164]	@ 0xa4
 801f2f4:	3b01      	subs	r3, #1
 801f2f6:	931a      	str	r3, [sp, #104]	@ 0x68
 801f2f8:	e694      	b.n	801f024 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f2fa:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f2fc:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801f2fe:	441c      	add	r4, r3
 801f300:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f302:	441d      	add	r5, r3
 801f304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f306:	9429      	str	r4, [sp, #164]	@ 0xa4
 801f308:	3b01      	subs	r3, #1
 801f30a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f30c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f30e:	3302      	adds	r3, #2
 801f310:	930c      	str	r3, [sp, #48]	@ 0x30
 801f312:	e667      	b.n	801efe4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f314:	d024      	beq.n	801f360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801f316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f318:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801f31a:	3b01      	subs	r3, #1
 801f31c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801f31e:	fb00 4003 	mla	r0, r0, r3, r4
 801f322:	1400      	asrs	r0, r0, #16
 801f324:	f53f ae7b 	bmi.w	801f01e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f328:	3901      	subs	r1, #1
 801f32a:	4288      	cmp	r0, r1
 801f32c:	f6bf ae77 	bge.w	801f01e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f330:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f332:	fb01 5303 	mla	r3, r1, r3, r5
 801f336:	141b      	asrs	r3, r3, #16
 801f338:	f53f ae71 	bmi.w	801f01e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f33c:	3a01      	subs	r2, #1
 801f33e:	4293      	cmp	r3, r2
 801f340:	f6bf ae6d 	bge.w	801f01e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f344:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801f348:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801f34c:	f1bb 0f00 	cmp.w	fp, #0
 801f350:	dc70      	bgt.n	801f434 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801f352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f354:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f35a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f35e:	930c      	str	r3, [sp, #48]	@ 0x30
 801f360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f362:	2b00      	cmp	r3, #0
 801f364:	f340 81be 	ble.w	801f6e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801f368:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f36c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f36e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f372:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f376:	eef0 6a62 	vmov.f32	s13, s5
 801f37a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f37e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f382:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f386:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801f38a:	eef0 6a43 	vmov.f32	s13, s6
 801f38e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f392:	ee16 5a90 	vmov	r5, s13
 801f396:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f39a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f39e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3ae:	ee12 2a90 	vmov	r2, s5
 801f3b2:	eef0 2a47 	vmov.f32	s5, s14
 801f3b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3ba:	ee13 2a10 	vmov	r2, s6
 801f3be:	932b      	str	r3, [sp, #172]	@ 0xac
 801f3c0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f3c2:	eeb0 3a67 	vmov.f32	s6, s15
 801f3c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3ca:	932c      	str	r3, [sp, #176]	@ 0xb0
 801f3cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f3ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f3d0:	3b01      	subs	r3, #1
 801f3d2:	9319      	str	r3, [sp, #100]	@ 0x64
 801f3d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f3d6:	bf08      	it	eq
 801f3d8:	4613      	moveq	r3, r2
 801f3da:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3dc:	e5f4      	b.n	801efc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f3de:	2900      	cmp	r1, #0
 801f3e0:	f43f ae66 	beq.w	801f0b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f3e4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f3e8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f3ec:	900a      	str	r0, [sp, #40]	@ 0x28
 801f3ee:	0e00      	lsrs	r0, r0, #24
 801f3f0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f3f2:	e65d      	b.n	801f0b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f3f4:	f113 0801 	adds.w	r8, r3, #1
 801f3f8:	f53f af74 	bmi.w	801f2e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f3fc:	4540      	cmp	r0, r8
 801f3fe:	f6ff af71 	blt.w	801f2e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f402:	f11c 0801 	adds.w	r8, ip, #1
 801f406:	f53f af6d 	bmi.w	801f2e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f40a:	45c6      	cmp	lr, r8
 801f40c:	f6ff af6a 	blt.w	801f2e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f410:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f412:	b200      	sxth	r0, r0
 801f414:	9302      	str	r3, [sp, #8]
 801f416:	fa0f f38e 	sxth.w	r3, lr
 801f41a:	9000      	str	r0, [sp, #0]
 801f41c:	9301      	str	r3, [sp, #4]
 801f41e:	4633      	mov	r3, r6
 801f420:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f422:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f426:	e9cd c203 	strd	ip, r2, [sp, #12]
 801f42a:	4639      	mov	r1, r7
 801f42c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f42e:	f7ff fc63 	bl	801ecf8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801f432:	e757      	b.n	801f2e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f434:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f436:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f43a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801f43c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f440:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f442:	1427      	asrs	r7, r4, #16
 801f444:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f446:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f44a:	142b      	asrs	r3, r5, #16
 801f44c:	fb01 7303 	mla	r3, r1, r3, r7
 801f450:	18e7      	adds	r7, r4, r3
 801f452:	5ce3      	ldrb	r3, [r4, r3]
 801f454:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f458:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f45c:	2a00      	cmp	r2, #0
 801f45e:	f000 8137 	beq.w	801f6d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801f462:	f897 e001 	ldrb.w	lr, [r7, #1]
 801f466:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801f46a:	9410      	str	r4, [sp, #64]	@ 0x40
 801f46c:	0e24      	lsrs	r4, r4, #24
 801f46e:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f470:	b170      	cbz	r0, 801f490 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801f472:	eb07 0e01 	add.w	lr, r7, r1
 801f476:	5c79      	ldrb	r1, [r7, r1]
 801f478:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f47c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f47e:	0e09      	lsrs	r1, r1, #24
 801f480:	9114      	str	r1, [sp, #80]	@ 0x50
 801f482:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801f486:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f48a:	9111      	str	r1, [sp, #68]	@ 0x44
 801f48c:	0e09      	lsrs	r1, r1, #24
 801f48e:	9118      	str	r1, [sp, #96]	@ 0x60
 801f490:	b292      	uxth	r2, r2
 801f492:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f494:	b280      	uxth	r0, r0
 801f496:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f498:	fb02 f800 	mul.w	r8, r2, r0
 801f49c:	0112      	lsls	r2, r2, #4
 801f49e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801f4a2:	eba2 0e08 	sub.w	lr, r2, r8
 801f4a6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801f4aa:	b280      	uxth	r0, r0
 801f4ac:	fa1f fe8e 	uxth.w	lr, lr
 801f4b0:	1a12      	subs	r2, r2, r0
 801f4b2:	fb0e f101 	mul.w	r1, lr, r1
 801f4b6:	b292      	uxth	r2, r2
 801f4b8:	fb02 110c 	mla	r1, r2, ip, r1
 801f4bc:	fb00 1104 	mla	r1, r0, r4, r1
 801f4c0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801f4c2:	fb08 1104 	mla	r1, r8, r4, r1
 801f4c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f4ca:	2900      	cmp	r1, #0
 801f4cc:	f000 80f5 	beq.w	801f6ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801f4d0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801f4d4:	d019      	beq.n	801f50a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801f4d6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f4da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f4de:	fb0c fa0a 	mul.w	sl, ip, sl
 801f4e2:	fb0c fc03 	mul.w	ip, ip, r3
 801f4e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f4ea:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f4ee:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801f4f2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f4f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f4fa:	4453      	add	r3, sl
 801f4fc:	0a3f      	lsrs	r7, r7, #8
 801f4fe:	0a1b      	lsrs	r3, r3, #8
 801f500:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801f504:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f508:	433b      	orrs	r3, r7
 801f50a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801f50c:	2cff      	cmp	r4, #255	@ 0xff
 801f50e:	d020      	beq.n	801f552 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801f510:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f512:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f516:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801f518:	4367      	muls	r7, r4
 801f51a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f51c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f520:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f524:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801f526:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f52a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f52e:	fb04 fa0a 	mul.w	sl, r4, sl
 801f532:	44bc      	add	ip, r7
 801f534:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f538:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f53c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f540:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f544:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f548:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f54c:	ea4c 040a 	orr.w	r4, ip, sl
 801f550:	9410      	str	r4, [sp, #64]	@ 0x40
 801f552:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f554:	2cff      	cmp	r4, #255	@ 0xff
 801f556:	d020      	beq.n	801f59a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801f558:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f55a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f55e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f560:	4367      	muls	r7, r4
 801f562:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f564:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f568:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f56c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f56e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f572:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f576:	fb04 fa0a 	mul.w	sl, r4, sl
 801f57a:	44bc      	add	ip, r7
 801f57c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f584:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f588:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f58c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f590:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f594:	ea4c 040a 	orr.w	r4, ip, sl
 801f598:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f59a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801f59c:	2cff      	cmp	r4, #255	@ 0xff
 801f59e:	d020      	beq.n	801f5e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801f5a0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f5a2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f5a6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801f5a8:	4367      	muls	r7, r4
 801f5aa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f5ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f5b0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f5b4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801f5b6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f5ba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f5be:	fb04 fa0a 	mul.w	sl, r4, sl
 801f5c2:	44bc      	add	ip, r7
 801f5c4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f5c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f5cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f5d0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f5d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f5d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f5dc:	ea4c 040a 	orr.w	r4, ip, sl
 801f5e0:	9411      	str	r4, [sp, #68]	@ 0x44
 801f5e2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f5e4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801f5e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f5ec:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f5f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f5f2:	fb0e f707 	mul.w	r7, lr, r7
 801f5f6:	fb02 770c 	mla	r7, r2, ip, r7
 801f5fa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f5fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f600:	fb00 770c 	mla	r7, r0, ip, r7
 801f604:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f608:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f60a:	fb08 770c 	mla	r7, r8, ip, r7
 801f60e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801f612:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f614:	fb0e fe0c 	mul.w	lr, lr, ip
 801f618:	0a3f      	lsrs	r7, r7, #8
 801f61a:	fb02 e303 	mla	r3, r2, r3, lr
 801f61e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f620:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801f624:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801f628:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f62a:	fb00 330a 	mla	r3, r0, sl, r3
 801f62e:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801f632:	f8b9 0000 	ldrh.w	r0, [r9]
 801f636:	fb08 3c0c 	mla	ip, r8, ip, r3
 801f63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f63c:	1202      	asrs	r2, r0, #8
 801f63e:	434b      	muls	r3, r1
 801f640:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f644:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801f648:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f64c:	1c59      	adds	r1, r3, #1
 801f64e:	ea47 070c 	orr.w	r7, r7, ip
 801f652:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f656:	0c3b      	lsrs	r3, r7, #16
 801f658:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f65c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801f660:	b2ff      	uxtb	r7, r7
 801f662:	fb13 f304 	smulbb	r3, r3, r4
 801f666:	b2c9      	uxtb	r1, r1
 801f668:	fb1c fc04 	smulbb	ip, ip, r4
 801f66c:	fb02 3201 	mla	r2, r2, r1, r3
 801f670:	10c3      	asrs	r3, r0, #3
 801f672:	fb17 f704 	smulbb	r7, r7, r4
 801f676:	00c0      	lsls	r0, r0, #3
 801f678:	b292      	uxth	r2, r2
 801f67a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801f67e:	b2c0      	uxtb	r0, r0
 801f680:	fb03 c301 	mla	r3, r3, r1, ip
 801f684:	f102 0c01 	add.w	ip, r2, #1
 801f688:	fb00 7001 	mla	r0, r0, r1, r7
 801f68c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f690:	b280      	uxth	r0, r0
 801f692:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 801f696:	b29b      	uxth	r3, r3
 801f698:	1c42      	adds	r2, r0, #1
 801f69a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f69e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f6a2:	ea42 020c 	orr.w	r2, r2, ip
 801f6a6:	f103 0c01 	add.w	ip, r3, #1
 801f6aa:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801f6ae:	095b      	lsrs	r3, r3, #5
 801f6b0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f6b4:	431a      	orrs	r2, r3
 801f6b6:	f8a9 2000 	strh.w	r2, [r9]
 801f6ba:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f6bc:	f109 0902 	add.w	r9, r9, #2
 801f6c0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f6c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f6c6:	441a      	add	r2, r3
 801f6c8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f6ca:	9229      	str	r2, [sp, #164]	@ 0xa4
 801f6cc:	441d      	add	r5, r3
 801f6ce:	e63d      	b.n	801f34c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801f6d0:	2800      	cmp	r0, #0
 801f6d2:	f43f aedd 	beq.w	801f490 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801f6d6:	5c79      	ldrb	r1, [r7, r1]
 801f6d8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f6dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f6de:	0e09      	lsrs	r1, r1, #24
 801f6e0:	9114      	str	r1, [sp, #80]	@ 0x50
 801f6e2:	e6d5      	b.n	801f490 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801f6e4:	b01f      	add	sp, #124	@ 0x7c
 801f6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f6ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801f6ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6ee:	b089      	sub	sp, #36	@ 0x24
 801f6f0:	9101      	str	r1, [sp, #4]
 801f6f2:	9801      	ldr	r0, [sp, #4]
 801f6f4:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 801f6f8:	8800      	ldrh	r0, [r0, #0]
 801f6fa:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 801f6fe:	1206      	asrs	r6, r0, #8
 801f700:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 801f704:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 801f708:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f70c:	9602      	str	r6, [sp, #8]
 801f70e:	10c6      	asrs	r6, r0, #3
 801f710:	00c0      	lsls	r0, r0, #3
 801f712:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f716:	b2c0      	uxtb	r0, r0
 801f718:	9603      	str	r6, [sp, #12]
 801f71a:	9004      	str	r0, [sp, #16]
 801f71c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 801f720:	fb07 100c 	mla	r0, r7, ip, r1
 801f724:	2f00      	cmp	r7, #0
 801f726:	eb02 0e00 	add.w	lr, r2, r0
 801f72a:	f2c0 810a 	blt.w	801f942 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801f72e:	45b8      	cmp	r8, r7
 801f730:	f340 8107 	ble.w	801f942 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801f734:	2900      	cmp	r1, #0
 801f736:	f2c0 8102 	blt.w	801f93e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801f73a:	458c      	cmp	ip, r1
 801f73c:	f340 80ff 	ble.w	801f93e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801f740:	5c12      	ldrb	r2, [r2, r0]
 801f742:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f746:	1c4a      	adds	r2, r1, #1
 801f748:	f100 80fe 	bmi.w	801f948 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801f74c:	4594      	cmp	ip, r2
 801f74e:	f340 80fb 	ble.w	801f948 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801f752:	2d00      	cmp	r5, #0
 801f754:	f000 80fa 	beq.w	801f94c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801f758:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f75c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f760:	3701      	adds	r7, #1
 801f762:	f100 80f7 	bmi.w	801f954 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801f766:	45b8      	cmp	r8, r7
 801f768:	f340 80f4 	ble.w	801f954 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801f76c:	2c00      	cmp	r4, #0
 801f76e:	f000 80f4 	beq.w	801f95a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801f772:	2900      	cmp	r1, #0
 801f774:	eb0e 020c 	add.w	r2, lr, ip
 801f778:	f2c0 80ea 	blt.w	801f950 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801f77c:	458c      	cmp	ip, r1
 801f77e:	f340 80e7 	ble.w	801f950 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801f782:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801f786:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801f78a:	3101      	adds	r1, #1
 801f78c:	f100 80e8 	bmi.w	801f960 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801f790:	458c      	cmp	ip, r1
 801f792:	f340 80e5 	ble.w	801f960 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801f796:	2d00      	cmp	r5, #0
 801f798:	f000 80e4 	beq.w	801f964 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801f79c:	7852      	ldrb	r2, [r2, #1]
 801f79e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f7a2:	0e0b      	lsrs	r3, r1, #24
 801f7a4:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 801f7a8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f7ac:	9300      	str	r3, [sp, #0]
 801f7ae:	b2a4      	uxth	r4, r4
 801f7b0:	b2ab      	uxth	r3, r5
 801f7b2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801f7b6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f7ba:	fb03 f904 	mul.w	r9, r3, r4
 801f7be:	011b      	lsls	r3, r3, #4
 801f7c0:	fb0a f505 	mul.w	r5, sl, r5
 801f7c4:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801f7c8:	eba3 0e09 	sub.w	lr, r3, r9
 801f7cc:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 801f7d0:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 801f7d4:	0a28      	lsrs	r0, r5, #8
 801f7d6:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801f7da:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801f7de:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f7e2:	fb0a f303 	mul.w	r3, sl, r3
 801f7e6:	fb08 f707 	mul.w	r7, r8, r7
 801f7ea:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801f7ee:	4405      	add	r5, r0
 801f7f0:	fb08 fc0c 	mul.w	ip, r8, ip
 801f7f4:	b2a4      	uxth	r4, r4
 801f7f6:	0a2d      	lsrs	r5, r5, #8
 801f7f8:	fa1f fe8e 	uxth.w	lr, lr
 801f7fc:	1b12      	subs	r2, r2, r4
 801f7fe:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 801f802:	b292      	uxth	r2, r2
 801f804:	9005      	str	r0, [sp, #20]
 801f806:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 801f80a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f80e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801f812:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f816:	0a1b      	lsrs	r3, r3, #8
 801f818:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f81c:	9306      	str	r3, [sp, #24]
 801f81e:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 801f822:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f826:	4460      	add	r0, ip
 801f828:	fb0b f303 	mul.w	r3, fp, r3
 801f82c:	fb0b f606 	mul.w	r6, fp, r6
 801f830:	0a00      	lsrs	r0, r0, #8
 801f832:	0a1d      	lsrs	r5, r3, #8
 801f834:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 801f838:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f83c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801f840:	441d      	add	r5, r3
 801f842:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 801f846:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f84a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801f84e:	0a2d      	lsrs	r5, r5, #8
 801f850:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801f854:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 801f858:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801f85c:	0a36      	lsrs	r6, r6, #8
 801f85e:	0a1b      	lsrs	r3, r3, #8
 801f860:	fb05 f50e 	mul.w	r5, r5, lr
 801f864:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f868:	9307      	str	r3, [sp, #28]
 801f86a:	0e0b      	lsrs	r3, r1, #24
 801f86c:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801f870:	fb0e f606 	mul.w	r6, lr, r6
 801f874:	435f      	muls	r7, r3
 801f876:	4359      	muls	r1, r3
 801f878:	9b05      	ldr	r3, [sp, #20]
 801f87a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f87e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f882:	fb03 5502 	mla	r5, r3, r2, r5
 801f886:	9b06      	ldr	r3, [sp, #24]
 801f888:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f88c:	fb0e fe0b 	mul.w	lr, lr, fp
 801f890:	44bc      	add	ip, r7
 801f892:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 801f896:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f89a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f89e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f8a2:	0a09      	lsrs	r1, r1, #8
 801f8a4:	fb0c 5509 	mla	r5, ip, r9, r5
 801f8a8:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801f8ac:	fb00 5504 	mla	r5, r0, r4, r5
 801f8b0:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 801f8b4:	9b07      	ldr	r3, [sp, #28]
 801f8b6:	fb02 6000 	mla	r0, r2, r0, r6
 801f8ba:	0a2d      	lsrs	r5, r5, #8
 801f8bc:	fb02 e20a 	mla	r2, r2, sl, lr
 801f8c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f8c4:	fb09 0001 	mla	r0, r9, r1, r0
 801f8c8:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801f8cc:	fb04 0003 	mla	r0, r4, r3, r0
 801f8d0:	9b00      	ldr	r3, [sp, #0]
 801f8d2:	fb04 2408 	mla	r4, r4, r8, r2
 801f8d6:	9a04      	ldr	r2, [sp, #16]
 801f8d8:	0a00      	lsrs	r0, r0, #8
 801f8da:	fb09 4903 	mla	r9, r9, r3, r4
 801f8de:	9b02      	ldr	r3, [sp, #8]
 801f8e0:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f8e4:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801f8e8:	4305      	orrs	r5, r0
 801f8ea:	fa5f f989 	uxtb.w	r9, r9
 801f8ee:	fb03 f109 	mul.w	r1, r3, r9
 801f8f2:	9b03      	ldr	r3, [sp, #12]
 801f8f4:	fb03 f309 	mul.w	r3, r3, r9
 801f8f8:	fb02 f909 	mul.w	r9, r2, r9
 801f8fc:	1c4a      	adds	r2, r1, #1
 801f8fe:	1c58      	adds	r0, r3, #1
 801f900:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f904:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f908:	0c2a      	lsrs	r2, r5, #16
 801f90a:	0a2b      	lsrs	r3, r5, #8
 801f90c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801f910:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f914:	0212      	lsls	r2, r2, #8
 801f916:	00db      	lsls	r3, r3, #3
 801f918:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 801f91c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f920:	4313      	orrs	r3, r2
 801f922:	f109 0201 	add.w	r2, r9, #1
 801f926:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801f92a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801f92e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f932:	431d      	orrs	r5, r3
 801f934:	9b01      	ldr	r3, [sp, #4]
 801f936:	801d      	strh	r5, [r3, #0]
 801f938:	b009      	add	sp, #36	@ 0x24
 801f93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f93e:	2000      	movs	r0, #0
 801f940:	e701      	b.n	801f746 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801f942:	2600      	movs	r6, #0
 801f944:	4630      	mov	r0, r6
 801f946:	e70b      	b.n	801f760 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801f948:	2600      	movs	r6, #0
 801f94a:	e709      	b.n	801f760 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801f94c:	462e      	mov	r6, r5
 801f94e:	e707      	b.n	801f760 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801f950:	2700      	movs	r7, #0
 801f952:	e71a      	b.n	801f78a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801f954:	2100      	movs	r1, #0
 801f956:	460f      	mov	r7, r1
 801f958:	e723      	b.n	801f7a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801f95a:	4621      	mov	r1, r4
 801f95c:	4627      	mov	r7, r4
 801f95e:	e720      	b.n	801f7a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801f960:	2100      	movs	r1, #0
 801f962:	e71e      	b.n	801f7a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801f964:	4629      	mov	r1, r5
 801f966:	e71c      	b.n	801f7a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801f968 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f96c:	b09b      	sub	sp, #108	@ 0x6c
 801f96e:	9218      	str	r2, [sp, #96]	@ 0x60
 801f970:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f972:	9019      	str	r0, [sp, #100]	@ 0x64
 801f974:	9116      	str	r1, [sp, #88]	@ 0x58
 801f976:	6850      	ldr	r0, [r2, #4]
 801f978:	9307      	str	r3, [sp, #28]
 801f97a:	6812      	ldr	r2, [r2, #0]
 801f97c:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801f97e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801f982:	fb00 1303 	mla	r3, r0, r3, r1
 801f986:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f98a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f98c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f98e:	681b      	ldr	r3, [r3, #0]
 801f990:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f992:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f994:	685e      	ldr	r6, [r3, #4]
 801f996:	3604      	adds	r6, #4
 801f998:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	dc03      	bgt.n	801f9a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f99e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	f340 8373 	ble.w	802008c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801f9a6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f9a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f9ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f9b0:	1e48      	subs	r0, r1, #1
 801f9b2:	1e57      	subs	r7, r2, #1
 801f9b4:	9b07      	ldr	r3, [sp, #28]
 801f9b6:	2b00      	cmp	r3, #0
 801f9b8:	f340 818f 	ble.w	801fcda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801f9bc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801f9be:	142b      	asrs	r3, r5, #16
 801f9c0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f9c4:	d406      	bmi.n	801f9d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f9c6:	4584      	cmp	ip, r0
 801f9c8:	da04      	bge.n	801f9d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	db02      	blt.n	801f9d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f9ce:	42bb      	cmp	r3, r7
 801f9d0:	f2c0 8184 	blt.w	801fcdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801f9d4:	f11c 0c01 	adds.w	ip, ip, #1
 801f9d8:	f100 8172 	bmi.w	801fcc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f9dc:	4561      	cmp	r1, ip
 801f9de:	f2c0 816f 	blt.w	801fcc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f9e2:	3301      	adds	r3, #1
 801f9e4:	f100 816c 	bmi.w	801fcc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f9e8:	429a      	cmp	r2, r3
 801f9ea:	f2c0 8169 	blt.w	801fcc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f9ee:	9b07      	ldr	r3, [sp, #28]
 801f9f0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801f9f2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f9f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	f340 818e 	ble.w	801fd18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801f9fc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f9fe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fa02:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fa06:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fa0a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fa0c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801fa10:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801fa12:	141b      	asrs	r3, r3, #16
 801fa14:	f100 81d1 	bmi.w	801fdba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa18:	f101 38ff 	add.w	r8, r1, #4294967295
 801fa1c:	4543      	cmp	r3, r8
 801fa1e:	f280 81cc 	bge.w	801fdba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa22:	f1bc 0f00 	cmp.w	ip, #0
 801fa26:	f2c0 81c8 	blt.w	801fdba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa2a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fa2e:	45c4      	cmp	ip, r8
 801fa30:	f280 81c3 	bge.w	801fdba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa34:	b209      	sxth	r1, r1
 801fa36:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fa38:	fb0c 3301 	mla	r3, ip, r1, r3
 801fa3c:	eb04 0803 	add.w	r8, r4, r3
 801fa40:	5ce3      	ldrb	r3, [r4, r3]
 801fa42:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fa46:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fa4a:	2a00      	cmp	r2, #0
 801fa4c:	f000 81aa 	beq.w	801fda4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801fa50:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fa54:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801fa58:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fa5a:	0e24      	lsrs	r4, r4, #24
 801fa5c:	9412      	str	r4, [sp, #72]	@ 0x48
 801fa5e:	b178      	cbz	r0, 801fa80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fa60:	eb08 0c01 	add.w	ip, r8, r1
 801fa64:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fa68:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fa6c:	9108      	str	r1, [sp, #32]
 801fa6e:	0e09      	lsrs	r1, r1, #24
 801fa70:	9110      	str	r1, [sp, #64]	@ 0x40
 801fa72:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801fa76:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fa7a:	910c      	str	r1, [sp, #48]	@ 0x30
 801fa7c:	0e09      	lsrs	r1, r1, #24
 801fa7e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801fa80:	b292      	uxth	r2, r2
 801fa82:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801fa84:	b280      	uxth	r0, r0
 801fa86:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fa88:	fb02 f900 	mul.w	r9, r2, r0
 801fa8c:	0112      	lsls	r2, r2, #4
 801fa8e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fa92:	eba2 0809 	sub.w	r8, r2, r9
 801fa96:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801fa9a:	b280      	uxth	r0, r0
 801fa9c:	fa1f f888 	uxth.w	r8, r8
 801faa0:	1a12      	subs	r2, r2, r0
 801faa2:	fb08 f101 	mul.w	r1, r8, r1
 801faa6:	b292      	uxth	r2, r2
 801faa8:	fb02 110e 	mla	r1, r2, lr, r1
 801faac:	fb00 1104 	mla	r1, r0, r4, r1
 801fab0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fab2:	fb09 1104 	mla	r1, r9, r4, r1
 801fab6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801faba:	2900      	cmp	r1, #0
 801fabc:	f000 80f5 	beq.w	801fcaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fac0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801fac4:	d01b      	beq.n	801fafe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fac6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801faca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801face:	fb0e fa0a 	mul.w	sl, lr, sl
 801fad2:	fb0e fe03 	mul.w	lr, lr, r3
 801fad6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fada:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fade:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801fae2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fae6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801faea:	4453      	add	r3, sl
 801faec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faf0:	0a1b      	lsrs	r3, r3, #8
 801faf2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801faf6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fafa:	ea43 030c 	orr.w	r3, r3, ip
 801fafe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fb00:	2cff      	cmp	r4, #255	@ 0xff
 801fb02:	d021      	beq.n	801fb48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fb04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fb06:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb0a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fb0c:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fb12:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb16:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fb18:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb1c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb20:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb28:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb2c:	44de      	add	lr, fp
 801fb2e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb3a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb3e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb42:	ea4e 040a 	orr.w	r4, lr, sl
 801fb46:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fb48:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fb4a:	2cff      	cmp	r4, #255	@ 0xff
 801fb4c:	d021      	beq.n	801fb92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fb4e:	9c08      	ldr	r4, [sp, #32]
 801fb50:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb54:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fb56:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb5a:	9c08      	ldr	r4, [sp, #32]
 801fb5c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb60:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fb62:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb66:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb6a:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb6e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb72:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb76:	44de      	add	lr, fp
 801fb78:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb84:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb88:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb8c:	ea4e 040a 	orr.w	r4, lr, sl
 801fb90:	9408      	str	r4, [sp, #32]
 801fb92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fb94:	2cff      	cmp	r4, #255	@ 0xff
 801fb96:	d021      	beq.n	801fbdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801fb98:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fb9a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb9e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fba0:	fb04 fb0b 	mul.w	fp, r4, fp
 801fba4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fba6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fbaa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fbac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fbb0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fbb4:	fb04 fa0a 	mul.w	sl, r4, sl
 801fbb8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fbbc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fbc0:	44de      	add	lr, fp
 801fbc2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fbc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fbca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fbce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fbd2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fbd6:	ea4e 040a 	orr.w	r4, lr, sl
 801fbda:	940c      	str	r4, [sp, #48]	@ 0x30
 801fbdc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fbde:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801fbe2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fbe6:	43c9      	mvns	r1, r1
 801fbe8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fbec:	9c08      	ldr	r4, [sp, #32]
 801fbee:	fb08 fc0c 	mul.w	ip, r8, ip
 801fbf2:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fbf6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fbfa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fbfc:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fc00:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fc04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc06:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fc0a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fc0e:	fb08 f80e 	mul.w	r8, r8, lr
 801fc12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc16:	fa5f fe81 	uxtb.w	lr, r1
 801fc1a:	fb02 8303 	mla	r3, r2, r3, r8
 801fc1e:	9a08      	ldr	r2, [sp, #32]
 801fc20:	f8b7 8000 	ldrh.w	r8, [r7]
 801fc24:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fc28:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801fc2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fc2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801fc32:	fb00 330a 	mla	r3, r0, sl, r3
 801fc36:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801fc3a:	ea4f 2228 	mov.w	r2, r8, asr #8
 801fc3e:	fb09 3900 	mla	r9, r9, r0, r3
 801fc42:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801fc46:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801fc4a:	b2c9      	uxtb	r1, r1
 801fc4c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fc50:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801fc54:	fb02 f20e 	mul.w	r2, r2, lr
 801fc58:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801fc5c:	fb00 f00e 	mul.w	r0, r0, lr
 801fc60:	1c53      	adds	r3, r2, #1
 801fc62:	fb01 f10e 	mul.w	r1, r1, lr
 801fc66:	ea4c 0c09 	orr.w	ip, ip, r9
 801fc6a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fc6e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801fc72:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fc76:	4a60      	ldr	r2, [pc, #384]	@ (801fdf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801fc78:	b2db      	uxtb	r3, r3
 801fc7a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801fc7e:	1c43      	adds	r3, r0, #1
 801fc80:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fc84:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fc88:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fc8c:	00db      	lsls	r3, r3, #3
 801fc8e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801fc92:	4313      	orrs	r3, r2
 801fc94:	1c4a      	adds	r2, r1, #1
 801fc96:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fc9a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801fc9e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801fca2:	ea4c 0c03 	orr.w	ip, ip, r3
 801fca6:	f8a7 c000 	strh.w	ip, [r7]
 801fcaa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fcac:	3702      	adds	r7, #2
 801fcae:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801fcb0:	441a      	add	r2, r3
 801fcb2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fcb4:	441d      	add	r5, r3
 801fcb6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fcb8:	9225      	str	r2, [sp, #148]	@ 0x94
 801fcba:	3b01      	subs	r3, #1
 801fcbc:	9317      	str	r3, [sp, #92]	@ 0x5c
 801fcbe:	e699      	b.n	801f9f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fcc0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fcc2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801fcc4:	441c      	add	r4, r3
 801fcc6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fcc8:	441d      	add	r5, r3
 801fcca:	9b07      	ldr	r3, [sp, #28]
 801fccc:	9425      	str	r4, [sp, #148]	@ 0x94
 801fcce:	3b01      	subs	r3, #1
 801fcd0:	9307      	str	r3, [sp, #28]
 801fcd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcd4:	3302      	adds	r3, #2
 801fcd6:	930a      	str	r3, [sp, #40]	@ 0x28
 801fcd8:	e66c      	b.n	801f9b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fcda:	d024      	beq.n	801fd26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801fcdc:	9b07      	ldr	r3, [sp, #28]
 801fcde:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801fce0:	3b01      	subs	r3, #1
 801fce2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801fce4:	fb00 4003 	mla	r0, r0, r3, r4
 801fce8:	1400      	asrs	r0, r0, #16
 801fcea:	f53f ae80 	bmi.w	801f9ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fcee:	3901      	subs	r1, #1
 801fcf0:	4288      	cmp	r0, r1
 801fcf2:	f6bf ae7c 	bge.w	801f9ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fcf6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801fcf8:	fb01 5303 	mla	r3, r1, r3, r5
 801fcfc:	141b      	asrs	r3, r3, #16
 801fcfe:	f53f ae76 	bmi.w	801f9ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fd02:	3a01      	subs	r2, #1
 801fd04:	4293      	cmp	r3, r2
 801fd06:	f6bf ae72 	bge.w	801f9ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fd0a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fd0e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801fd12:	f1bb 0f00 	cmp.w	fp, #0
 801fd16:	dc71      	bgt.n	801fdfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fd18:	9b07      	ldr	r3, [sp, #28]
 801fd1a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fd1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fd20:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801fd24:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd26:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	f340 81af 	ble.w	802008c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801fd2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fd32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fd34:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd3c:	eef0 6a62 	vmov.f32	s13, s5
 801fd40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd44:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd4c:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 801fd50:	eef0 6a43 	vmov.f32	s13, s6
 801fd54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd58:	ee16 5a90 	vmov	r5, s13
 801fd5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd60:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd64:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd74:	ee12 2a90 	vmov	r2, s5
 801fd78:	eef0 2a47 	vmov.f32	s5, s14
 801fd7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd80:	ee13 2a10 	vmov	r2, s6
 801fd84:	9327      	str	r3, [sp, #156]	@ 0x9c
 801fd86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fd88:	eeb0 3a67 	vmov.f32	s6, s15
 801fd8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd90:	9328      	str	r3, [sp, #160]	@ 0xa0
 801fd92:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fd94:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fd96:	3b01      	subs	r3, #1
 801fd98:	9316      	str	r3, [sp, #88]	@ 0x58
 801fd9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fd9c:	bf08      	it	eq
 801fd9e:	4613      	moveq	r3, r2
 801fda0:	9307      	str	r3, [sp, #28]
 801fda2:	e5f9      	b.n	801f998 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fda4:	2800      	cmp	r0, #0
 801fda6:	f43f ae6b 	beq.w	801fa80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fdaa:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fdae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fdb2:	9108      	str	r1, [sp, #32]
 801fdb4:	0e09      	lsrs	r1, r1, #24
 801fdb6:	9110      	str	r1, [sp, #64]	@ 0x40
 801fdb8:	e662      	b.n	801fa80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fdba:	f113 0801 	adds.w	r8, r3, #1
 801fdbe:	f53f af74 	bmi.w	801fcaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fdc2:	4541      	cmp	r1, r8
 801fdc4:	f6ff af71 	blt.w	801fcaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fdc8:	f11c 0801 	adds.w	r8, ip, #1
 801fdcc:	f53f af6d 	bmi.w	801fcaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fdd0:	45c6      	cmp	lr, r8
 801fdd2:	f6ff af6a 	blt.w	801fcaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fdd6:	b209      	sxth	r1, r1
 801fdd8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801fddc:	fa0f f38e 	sxth.w	r3, lr
 801fde0:	9100      	str	r1, [sp, #0]
 801fde2:	4639      	mov	r1, r7
 801fde4:	9301      	str	r3, [sp, #4]
 801fde6:	4633      	mov	r3, r6
 801fde8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801fdec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fdee:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801fdf0:	f7ff fc7b 	bl	801f6ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801fdf4:	e759      	b.n	801fcaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fdf6:	bf00      	nop
 801fdf8:	fffff800 	.word	0xfffff800
 801fdfc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801fdfe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fe02:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801fe04:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fe08:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fe0a:	1427      	asrs	r7, r4, #16
 801fe0c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fe0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe12:	142b      	asrs	r3, r5, #16
 801fe14:	fb01 7303 	mla	r3, r1, r3, r7
 801fe18:	18e7      	adds	r7, r4, r3
 801fe1a:	5ce3      	ldrb	r3, [r4, r3]
 801fe1c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fe20:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fe24:	2a00      	cmp	r2, #0
 801fe26:	f000 8127 	beq.w	8020078 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801fe2a:	f897 e001 	ldrb.w	lr, [r7, #1]
 801fe2e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801fe32:	940d      	str	r4, [sp, #52]	@ 0x34
 801fe34:	0e24      	lsrs	r4, r4, #24
 801fe36:	9414      	str	r4, [sp, #80]	@ 0x50
 801fe38:	b170      	cbz	r0, 801fe58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801fe3a:	eb07 0e01 	add.w	lr, r7, r1
 801fe3e:	5c79      	ldrb	r1, [r7, r1]
 801fe40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe44:	9109      	str	r1, [sp, #36]	@ 0x24
 801fe46:	0e09      	lsrs	r1, r1, #24
 801fe48:	9111      	str	r1, [sp, #68]	@ 0x44
 801fe4a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801fe4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe52:	910e      	str	r1, [sp, #56]	@ 0x38
 801fe54:	0e09      	lsrs	r1, r1, #24
 801fe56:	9115      	str	r1, [sp, #84]	@ 0x54
 801fe58:	b292      	uxth	r2, r2
 801fe5a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fe5c:	b280      	uxth	r0, r0
 801fe5e:	fb02 f800 	mul.w	r8, r2, r0
 801fe62:	0112      	lsls	r2, r2, #4
 801fe64:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801fe68:	eba2 0e08 	sub.w	lr, r2, r8
 801fe6c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801fe70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fe72:	b280      	uxth	r0, r0
 801fe74:	fa1f fe8e 	uxth.w	lr, lr
 801fe78:	1a09      	subs	r1, r1, r0
 801fe7a:	fb0e f202 	mul.w	r2, lr, r2
 801fe7e:	b289      	uxth	r1, r1
 801fe80:	fb01 220c 	mla	r2, r1, ip, r2
 801fe84:	fb00 2204 	mla	r2, r0, r4, r2
 801fe88:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fe8a:	fb08 2204 	mla	r2, r8, r4, r2
 801fe8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fe92:	2a00      	cmp	r2, #0
 801fe94:	f000 80e5 	beq.w	8020062 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801fe98:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801fe9c:	d019      	beq.n	801fed2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801fe9e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fea2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fea6:	fb0c fa0a 	mul.w	sl, ip, sl
 801feaa:	fb0c fc03 	mul.w	ip, ip, r3
 801feae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801feb2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801feb6:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801feba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801febe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fec2:	4453      	add	r3, sl
 801fec4:	0a3f      	lsrs	r7, r7, #8
 801fec6:	0a1b      	lsrs	r3, r3, #8
 801fec8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801fecc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fed0:	433b      	orrs	r3, r7
 801fed2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fed4:	2cff      	cmp	r4, #255	@ 0xff
 801fed6:	d020      	beq.n	801ff1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801fed8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801feda:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fede:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fee0:	4367      	muls	r7, r4
 801fee2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fee4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fee8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801feec:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801feee:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fef2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fef6:	fb04 fa0a 	mul.w	sl, r4, sl
 801fefa:	44bc      	add	ip, r7
 801fefc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ff00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff08:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff10:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff14:	ea4c 040a 	orr.w	r4, ip, sl
 801ff18:	940d      	str	r4, [sp, #52]	@ 0x34
 801ff1a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ff1c:	2cff      	cmp	r4, #255	@ 0xff
 801ff1e:	d020      	beq.n	801ff62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801ff20:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ff22:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff26:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ff28:	4367      	muls	r7, r4
 801ff2a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ff2c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff30:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff34:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ff36:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ff3a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff3e:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff42:	44bc      	add	ip, r7
 801ff44:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ff48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff50:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff58:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff5c:	ea4c 040a 	orr.w	r4, ip, sl
 801ff60:	9409      	str	r4, [sp, #36]	@ 0x24
 801ff62:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ff64:	2cff      	cmp	r4, #255	@ 0xff
 801ff66:	d020      	beq.n	801ffaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801ff68:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff6a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff6e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ff70:	4367      	muls	r7, r4
 801ff72:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff78:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff7c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ff7e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ff82:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff86:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff8a:	44bc      	add	ip, r7
 801ff8c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ff90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff98:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffa0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ffa4:	ea4c 040a 	orr.w	r4, ip, sl
 801ffa8:	940e      	str	r4, [sp, #56]	@ 0x38
 801ffaa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ffac:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ffb0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ffb4:	43d2      	mvns	r2, r2
 801ffb6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ffba:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ffbc:	b2d2      	uxtb	r2, r2
 801ffbe:	fb0e f707 	mul.w	r7, lr, r7
 801ffc2:	fb01 770c 	mla	r7, r1, ip, r7
 801ffc6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ffca:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ffcc:	fb00 770c 	mla	r7, r0, ip, r7
 801ffd0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ffd4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ffd6:	fb08 770c 	mla	r7, r8, ip, r7
 801ffda:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ffde:	fb0e fe0c 	mul.w	lr, lr, ip
 801ffe2:	0a3f      	lsrs	r7, r7, #8
 801ffe4:	fb01 e303 	mla	r3, r1, r3, lr
 801ffe8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ffea:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ffee:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801fff2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fff4:	fb00 330a 	mla	r3, r0, sl, r3
 801fff8:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801fffc:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020000:	f8b9 3000 	ldrh.w	r3, [r9]
 8020004:	1218      	asrs	r0, r3, #8
 8020006:	10d9      	asrs	r1, r3, #3
 8020008:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802000c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8020010:	00db      	lsls	r3, r3, #3
 8020012:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020016:	4350      	muls	r0, r2
 8020018:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802001c:	b2db      	uxtb	r3, r3
 802001e:	4351      	muls	r1, r2
 8020020:	ea47 070c 	orr.w	r7, r7, ip
 8020024:	4353      	muls	r3, r2
 8020026:	1c42      	adds	r2, r0, #1
 8020028:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802002c:	0c3a      	lsrs	r2, r7, #16
 802002e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020032:	4a18      	ldr	r2, [pc, #96]	@ (8020094 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8020034:	b2c0      	uxtb	r0, r0
 8020036:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802003a:	1c4a      	adds	r2, r1, #1
 802003c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020040:	0a3a      	lsrs	r2, r7, #8
 8020042:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020046:	00c9      	lsls	r1, r1, #3
 8020048:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802004c:	4301      	orrs	r1, r0
 802004e:	1c58      	adds	r0, r3, #1
 8020050:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020054:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020058:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802005c:	4308      	orrs	r0, r1
 802005e:	f8a9 0000 	strh.w	r0, [r9]
 8020062:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020064:	f109 0902 	add.w	r9, r9, #2
 8020068:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802006a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802006e:	441a      	add	r2, r3
 8020070:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020072:	9225      	str	r2, [sp, #148]	@ 0x94
 8020074:	441d      	add	r5, r3
 8020076:	e64c      	b.n	801fd12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020078:	2800      	cmp	r0, #0
 802007a:	f43f aeed 	beq.w	801fe58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802007e:	5c79      	ldrb	r1, [r7, r1]
 8020080:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020084:	9109      	str	r1, [sp, #36]	@ 0x24
 8020086:	0e09      	lsrs	r1, r1, #24
 8020088:	9111      	str	r1, [sp, #68]	@ 0x44
 802008a:	e6e5      	b.n	801fe58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802008c:	b01b      	add	sp, #108	@ 0x6c
 802008e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020092:	bf00      	nop
 8020094:	fffff800 	.word	0xfffff800

08020098 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8020098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802009c:	b085      	sub	sp, #20
 802009e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80200a2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80200a6:	2800      	cmp	r0, #0
 80200a8:	9103      	str	r1, [sp, #12]
 80200aa:	fb00 7406 	mla	r4, r0, r6, r7
 80200ae:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 80200b2:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 80200b6:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80200ba:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 80200be:	eb03 0904 	add.w	r9, r3, r4
 80200c2:	9501      	str	r5, [sp, #4]
 80200c4:	f2c0 8150 	blt.w	8020368 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80200c8:	4583      	cmp	fp, r0
 80200ca:	f340 814d 	ble.w	8020368 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80200ce:	2f00      	cmp	r7, #0
 80200d0:	f2c0 8146 	blt.w	8020360 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80200d4:	42be      	cmp	r6, r7
 80200d6:	f340 8143 	ble.w	8020360 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80200da:	f813 c004 	ldrb.w	ip, [r3, r4]
 80200de:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80200e2:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80200e6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80200ea:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 80200ee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80200f2:	4355      	muls	r5, r2
 80200f4:	fb0c f203 	mul.w	r2, ip, r3
 80200f8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80200fc:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8020100:	441d      	add	r5, r3
 8020102:	f102 0320 	add.w	r3, r2, #32
 8020106:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802010a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802010e:	0a1b      	lsrs	r3, r3, #8
 8020110:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020114:	431c      	orrs	r4, r3
 8020116:	1c7b      	adds	r3, r7, #1
 8020118:	f100 812b 	bmi.w	8020372 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802011c:	429e      	cmp	r6, r3
 802011e:	f340 8128 	ble.w	8020372 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020122:	2900      	cmp	r1, #0
 8020124:	f000 8128 	beq.w	8020378 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8020128:	9a01      	ldr	r2, [sp, #4]
 802012a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802012e:	8855      	ldrh	r5, [r2, #2]
 8020130:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8020134:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8020138:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802013c:	fb08 f802 	mul.w	r8, r8, r2
 8020140:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8020144:	435d      	muls	r5, r3
 8020146:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802014a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802014e:	44d0      	add	r8, sl
 8020150:	f105 0a20 	add.w	sl, r5, #32
 8020154:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020158:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802015c:	0a2d      	lsrs	r5, r5, #8
 802015e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020162:	432a      	orrs	r2, r5
 8020164:	3001      	adds	r0, #1
 8020166:	f100 810d 	bmi.w	8020384 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802016a:	4583      	cmp	fp, r0
 802016c:	f340 810a 	ble.w	8020384 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8020170:	f1be 0f00 	cmp.w	lr, #0
 8020174:	f000 810b 	beq.w	802038e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8020178:	2f00      	cmp	r7, #0
 802017a:	f2c0 8100 	blt.w	802037e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802017e:	42be      	cmp	r6, r7
 8020180:	f340 80fd 	ble.w	802037e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8020184:	9801      	ldr	r0, [sp, #4]
 8020186:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 802018a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802018e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8020192:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020196:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 802019a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802019e:	fb0a fa00 	mul.w	sl, sl, r0
 80201a2:	fb05 f808 	mul.w	r8, r5, r8
 80201a6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80201aa:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80201ae:	4482      	add	sl, r0
 80201b0:	f108 0020 	add.w	r0, r8, #32
 80201b4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80201b8:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80201bc:	0a00      	lsrs	r0, r0, #8
 80201be:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80201c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80201c6:	3701      	adds	r7, #1
 80201c8:	f100 80e6 	bmi.w	8020398 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80201cc:	42be      	cmp	r6, r7
 80201ce:	f340 80e3 	ble.w	8020398 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80201d2:	2900      	cmp	r1, #0
 80201d4:	f000 80e3 	beq.w	802039e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80201d8:	3601      	adds	r6, #1
 80201da:	9801      	ldr	r0, [sp, #4]
 80201dc:	f819 7006 	ldrb.w	r7, [r9, r6]
 80201e0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80201e4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80201e8:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 80201ec:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80201f0:	fb09 f906 	mul.w	r9, r9, r6
 80201f4:	fb07 f800 	mul.w	r8, r7, r0
 80201f8:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80201fc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8020200:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8020204:	44d1      	add	r9, sl
 8020206:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802020a:	f108 0020 	add.w	r0, r8, #32
 802020e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020212:	0a00      	lsrs	r0, r0, #8
 8020214:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020218:	4330      	orrs	r0, r6
 802021a:	b28e      	uxth	r6, r1
 802021c:	fa1f f98e 	uxth.w	r9, lr
 8020220:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8020224:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8020228:	fb06 f809 	mul.w	r8, r6, r9
 802022c:	0136      	lsls	r6, r6, #4
 802022e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8020232:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8020236:	9601      	str	r6, [sp, #4]
 8020238:	ea4a 0404 	orr.w	r4, sl, r4
 802023c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020240:	fa1f f689 	uxth.w	r6, r9
 8020244:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8020248:	fb11 f90e 	smulbb	r9, r1, lr
 802024c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8020250:	9602      	str	r6, [sp, #8]
 8020252:	4626      	mov	r6, r4
 8020254:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8020258:	f1ce 0410 	rsb	r4, lr, #16
 802025c:	ea4a 0202 	orr.w	r2, sl, r2
 8020260:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020264:	1a64      	subs	r4, r4, r1
 8020266:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802026a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802026e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8020272:	434a      	muls	r2, r1
 8020274:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8020278:	ea4a 0000 	orr.w	r0, sl, r0
 802027c:	9903      	ldr	r1, [sp, #12]
 802027e:	fb04 2406 	mla	r4, r4, r6, r2
 8020282:	9e02      	ldr	r6, [sp, #8]
 8020284:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8020288:	fb09 4200 	mla	r2, r9, r0, r4
 802028c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8020290:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8020294:	8808      	ldrh	r0, [r1, #0]
 8020296:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802029a:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 802029e:	ea44 0b0b 	orr.w	fp, r4, fp
 80202a2:	9c01      	ldr	r4, [sp, #4]
 80202a4:	b289      	uxth	r1, r1
 80202a6:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 80202aa:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80202ae:	1ba4      	subs	r4, r4, r6
 80202b0:	9e01      	ldr	r6, [sp, #4]
 80202b2:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80202b6:	eba6 0608 	sub.w	r6, r6, r8
 80202ba:	b2a4      	uxth	r4, r4
 80202bc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80202c0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80202c4:	b2b6      	uxth	r6, r6
 80202c6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80202ca:	4373      	muls	r3, r6
 80202cc:	ea42 0e0e 	orr.w	lr, r2, lr
 80202d0:	fb0c 3304 	mla	r3, ip, r4, r3
 80202d4:	9c02      	ldr	r4, [sp, #8]
 80202d6:	fa1f f28e 	uxth.w	r2, lr
 80202da:	fb04 3505 	mla	r5, r4, r5, r3
 80202de:	10d4      	asrs	r4, r2, #3
 80202e0:	fb08 5707 	mla	r7, r8, r7, r5
 80202e4:	1215      	asrs	r5, r2, #8
 80202e6:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80202ea:	00d2      	lsls	r2, r2, #3
 80202ec:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80202f0:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80202f4:	b2d2      	uxtb	r2, r2
 80202f6:	434f      	muls	r7, r1
 80202f8:	1c7b      	adds	r3, r7, #1
 80202fa:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80202fe:	1203      	asrs	r3, r0, #8
 8020300:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8020304:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8020308:	b2ff      	uxtb	r7, r7
 802030a:	fb13 f307 	smulbb	r3, r3, r7
 802030e:	fb05 3501 	mla	r5, r5, r1, r3
 8020312:	10c3      	asrs	r3, r0, #3
 8020314:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8020318:	b2ad      	uxth	r5, r5
 802031a:	fb13 f307 	smulbb	r3, r3, r7
 802031e:	fb04 3401 	mla	r4, r4, r1, r3
 8020322:	00c3      	lsls	r3, r0, #3
 8020324:	b2db      	uxtb	r3, r3
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fb13 f307 	smulbb	r3, r3, r7
 802032c:	fb02 3101 	mla	r1, r2, r1, r3
 8020330:	1c6b      	adds	r3, r5, #1
 8020332:	1c62      	adds	r2, r4, #1
 8020334:	b289      	uxth	r1, r1
 8020336:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802033a:	1c4b      	adds	r3, r1, #1
 802033c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8020340:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020344:	9a03      	ldr	r2, [sp, #12]
 8020346:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802034a:	0964      	lsrs	r4, r4, #5
 802034c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020350:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8020354:	432b      	orrs	r3, r5
 8020356:	4323      	orrs	r3, r4
 8020358:	8013      	strh	r3, [r2, #0]
 802035a:	b005      	add	sp, #20
 802035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020360:	f04f 0c00 	mov.w	ip, #0
 8020364:	4664      	mov	r4, ip
 8020366:	e6d6      	b.n	8020116 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8020368:	2300      	movs	r3, #0
 802036a:	469c      	mov	ip, r3
 802036c:	461a      	mov	r2, r3
 802036e:	461c      	mov	r4, r3
 8020370:	e6f8      	b.n	8020164 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8020372:	2300      	movs	r3, #0
 8020374:	461a      	mov	r2, r3
 8020376:	e6f5      	b.n	8020164 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8020378:	460b      	mov	r3, r1
 802037a:	460a      	mov	r2, r1
 802037c:	e6f2      	b.n	8020164 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802037e:	2500      	movs	r5, #0
 8020380:	46ab      	mov	fp, r5
 8020382:	e720      	b.n	80201c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8020384:	2700      	movs	r7, #0
 8020386:	463d      	mov	r5, r7
 8020388:	4638      	mov	r0, r7
 802038a:	46bb      	mov	fp, r7
 802038c:	e745      	b.n	802021a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802038e:	4677      	mov	r7, lr
 8020390:	4675      	mov	r5, lr
 8020392:	4670      	mov	r0, lr
 8020394:	46f3      	mov	fp, lr
 8020396:	e740      	b.n	802021a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8020398:	2700      	movs	r7, #0
 802039a:	4638      	mov	r0, r7
 802039c:	e73d      	b.n	802021a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802039e:	460f      	mov	r7, r1
 80203a0:	4608      	mov	r0, r1
 80203a2:	e73a      	b.n	802021a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080203a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80203a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203a8:	b097      	sub	sp, #92	@ 0x5c
 80203aa:	9214      	str	r2, [sp, #80]	@ 0x50
 80203ac:	9308      	str	r3, [sp, #32]
 80203ae:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80203b0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80203b4:	9015      	str	r0, [sp, #84]	@ 0x54
 80203b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80203b8:	6850      	ldr	r0, [r2, #4]
 80203ba:	9111      	str	r1, [sp, #68]	@ 0x44
 80203bc:	6812      	ldr	r2, [r2, #0]
 80203be:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80203c2:	fb00 1303 	mla	r3, r0, r3, r1
 80203c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80203ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80203cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80203d4:	685b      	ldr	r3, [r3, #4]
 80203d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80203d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80203dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80203de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	dc03      	bgt.n	80203ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80203e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	f340 83cd 	ble.w	8020b86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80203ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80203ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80203f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80203f6:	1e48      	subs	r0, r1, #1
 80203f8:	1e55      	subs	r5, r2, #1
 80203fa:	9b08      	ldr	r3, [sp, #32]
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	f340 81a5 	ble.w	802074c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8020402:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8020404:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020406:	1436      	asrs	r6, r6, #16
 8020408:	ea4f 4323 	mov.w	r3, r3, asr #16
 802040c:	d406      	bmi.n	802041c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802040e:	4286      	cmp	r6, r0
 8020410:	da04      	bge.n	802041c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020412:	2b00      	cmp	r3, #0
 8020414:	db02      	blt.n	802041c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020416:	42ab      	cmp	r3, r5
 8020418:	f2c0 8199 	blt.w	802074e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802041c:	3601      	adds	r6, #1
 802041e:	f100 8186 	bmi.w	802072e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020422:	42b1      	cmp	r1, r6
 8020424:	f2c0 8183 	blt.w	802072e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020428:	3301      	adds	r3, #1
 802042a:	f100 8180 	bmi.w	802072e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802042e:	429a      	cmp	r2, r3
 8020430:	f2c0 817d 	blt.w	802072e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020434:	9b08      	ldr	r3, [sp, #32]
 8020436:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802043a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802043c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802043e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020440:	2b00      	cmp	r3, #0
 8020442:	f340 81a6 	ble.w	8020792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020446:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020448:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 802044a:	1418      	asrs	r0, r3, #16
 802044c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802044e:	142d      	asrs	r5, r5, #16
 8020450:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020454:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020456:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802045a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802045c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8020460:	f100 81fa 	bmi.w	8020858 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020464:	f102 3eff 	add.w	lr, r2, #4294967295
 8020468:	4575      	cmp	r5, lr
 802046a:	f280 81f5 	bge.w	8020858 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802046e:	2800      	cmp	r0, #0
 8020470:	f2c0 81f2 	blt.w	8020858 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020474:	f103 3eff 	add.w	lr, r3, #4294967295
 8020478:	4570      	cmp	r0, lr
 802047a:	f280 81ed 	bge.w	8020858 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802047e:	b212      	sxth	r2, r2
 8020480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020482:	fa1f fe81 	uxth.w	lr, r1
 8020486:	fb00 5002 	mla	r0, r0, r2, r5
 802048a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802048e:	eb03 0a00 	add.w	sl, r3, r0
 8020492:	f813 9000 	ldrb.w	r9, [r3, r0]
 8020496:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802049a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802049e:	b29b      	uxth	r3, r3
 80204a0:	f1bc 0f00 	cmp.w	ip, #0
 80204a4:	f000 81bb 	beq.w	802081e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80204a8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80204ac:	eb0a 0b02 	add.w	fp, sl, r2
 80204b0:	fa1f fa8c 	uxth.w	sl, ip
 80204b4:	940d      	str	r4, [sp, #52]	@ 0x34
 80204b6:	fb0a fe0e 	mul.w	lr, sl, lr
 80204ba:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80204be:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80204c2:	eba5 050e 	sub.w	r5, r5, lr
 80204c6:	940e      	str	r4, [sp, #56]	@ 0x38
 80204c8:	fa1f fa8a 	uxth.w	sl, sl
 80204cc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80204ce:	b2ad      	uxth	r5, r5
 80204d0:	eba3 030a 	sub.w	r3, r3, sl
 80204d4:	fb08 f505 	mul.w	r5, r8, r5
 80204d8:	b29b      	uxth	r3, r3
 80204da:	fb09 5303 	mla	r3, r9, r3, r5
 80204de:	fb0a 3304 	mla	r3, sl, r4, r3
 80204e2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80204e4:	fb0e 3304 	mla	r3, lr, r4, r3
 80204e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80204ec:	2b00      	cmp	r3, #0
 80204ee:	f000 8111 	beq.w	8020714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80204f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204f4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80204f8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80204fc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8020500:	f000 8192 	beq.w	8020828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8020504:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8020508:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802050c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020510:	fb0a fe0e 	mul.w	lr, sl, lr
 8020514:	fb09 f000 	mul.w	r0, r9, r0
 8020518:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802051c:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8020520:	f100 0b20 	add.w	fp, r0, #32
 8020524:	44ce      	add	lr, r9
 8020526:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802052a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802052e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020532:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8020536:	ea4e 0909 	orr.w	r9, lr, r9
 802053a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802053e:	8868      	ldrh	r0, [r5, #2]
 8020540:	d019      	beq.n	8020576 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020542:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8020546:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802054a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802054e:	fb0a fe0e 	mul.w	lr, sl, lr
 8020552:	fb08 f800 	mul.w	r8, r8, r0
 8020556:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802055a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802055e:	f108 0b20 	add.w	fp, r8, #32
 8020562:	4486      	add	lr, r0
 8020564:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8020568:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802056c:	0a00      	lsrs	r0, r0, #8
 802056e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020572:	ea4e 0000 	orr.w	r0, lr, r0
 8020576:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802057a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802057e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020582:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8020586:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802058a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802058e:	ea4e 0909 	orr.w	r9, lr, r9
 8020592:	ea4a 0000 	orr.w	r0, sl, r0
 8020596:	f1bc 0f00 	cmp.w	ip, #0
 802059a:	f000 8147 	beq.w	802082c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802059e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80205a2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80205a4:	3a01      	subs	r2, #1
 80205a6:	2cff      	cmp	r4, #255	@ 0xff
 80205a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80205ac:	f102 0202 	add.w	r2, r2, #2
 80205b0:	eb05 0e02 	add.w	lr, r5, r2
 80205b4:	5aaa      	ldrh	r2, [r5, r2]
 80205b6:	d018      	beq.n	80205ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80205b8:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80205bc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80205c0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80205c4:	fb04 fa02 	mul.w	sl, r4, r2
 80205c8:	fb08 f805 	mul.w	r8, r8, r5
 80205cc:	f10a 0520 	add.w	r5, sl, #32
 80205d0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80205d4:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80205d8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80205dc:	4442      	add	r2, r8
 80205de:	0a2d      	lsrs	r5, r5, #8
 80205e0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80205e4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80205e8:	432a      	orrs	r2, r5
 80205ea:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80205ec:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80205f0:	2cff      	cmp	r4, #255	@ 0xff
 80205f2:	d01a      	beq.n	802062a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80205f4:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80205f8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80205fc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020600:	fb04 fa05 	mul.w	sl, r4, r5
 8020604:	fb08 f80e 	mul.w	r8, r8, lr
 8020608:	f10a 0e20 	add.w	lr, sl, #32
 802060c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8020610:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8020614:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8020618:	4445      	add	r5, r8
 802061a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802061e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8020622:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8020626:	ea45 050e 	orr.w	r5, r5, lr
 802062a:	fb1c fe01 	smulbb	lr, ip, r1
 802062e:	f1cc 0810 	rsb	r8, ip, #16
 8020632:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020636:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802063a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802063e:	eba8 0801 	sub.w	r8, r8, r1
 8020642:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8020646:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802064a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802064e:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8020652:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8020656:	ea4a 0202 	orr.w	r2, sl, r2
 802065a:	4341      	muls	r1, r0
 802065c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8020660:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8020664:	fb09 1108 	mla	r1, r9, r8, r1
 8020668:	ea4b 0505 	orr.w	r5, fp, r5
 802066c:	fb0c 1102 	mla	r1, ip, r2, r1
 8020670:	fb0e 1e05 	mla	lr, lr, r5, r1
 8020674:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8020678:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802067c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020680:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8020684:	ea42 0e0e 	orr.w	lr, r2, lr
 8020688:	fa1f f28e 	uxth.w	r2, lr
 802068c:	2bff      	cmp	r3, #255	@ 0xff
 802068e:	d103      	bne.n	8020698 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020690:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020692:	29ff      	cmp	r1, #255	@ 0xff
 8020694:	f000 80de 	beq.w	8020854 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8020698:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802069a:	1215      	asrs	r5, r2, #8
 802069c:	8838      	ldrh	r0, [r7, #0]
 802069e:	434b      	muls	r3, r1
 80206a0:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80206a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80206a6:	f103 0c01 	add.w	ip, r3, #1
 80206aa:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80206ae:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80206b2:	fa5f fc83 	uxtb.w	ip, r3
 80206b6:	1203      	asrs	r3, r0, #8
 80206b8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80206bc:	fb13 f30c 	smulbb	r3, r3, ip
 80206c0:	fb05 3501 	mla	r5, r5, r1, r3
 80206c4:	10c3      	asrs	r3, r0, #3
 80206c6:	10d1      	asrs	r1, r2, #3
 80206c8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80206cc:	00d2      	lsls	r2, r2, #3
 80206ce:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80206d2:	b2ad      	uxth	r5, r5
 80206d4:	fb13 f30c 	smulbb	r3, r3, ip
 80206d8:	b2d2      	uxtb	r2, r2
 80206da:	fb01 3104 	mla	r1, r1, r4, r3
 80206de:	00c3      	lsls	r3, r0, #3
 80206e0:	b2db      	uxtb	r3, r3
 80206e2:	b289      	uxth	r1, r1
 80206e4:	fb13 f30c 	smulbb	r3, r3, ip
 80206e8:	fb02 3304 	mla	r3, r2, r4, r3
 80206ec:	b29a      	uxth	r2, r3
 80206ee:	1c6b      	adds	r3, r5, #1
 80206f0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80206f4:	1c53      	adds	r3, r2, #1
 80206f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80206fa:	1c4a      	adds	r2, r1, #1
 80206fc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020700:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020704:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020708:	0949      	lsrs	r1, r1, #5
 802070a:	432b      	orrs	r3, r5
 802070c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020710:	430b      	orrs	r3, r1
 8020712:	803b      	strh	r3, [r7, #0]
 8020714:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020716:	3702      	adds	r7, #2
 8020718:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802071a:	4413      	add	r3, r2
 802071c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802071e:	9321      	str	r3, [sp, #132]	@ 0x84
 8020720:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020722:	441a      	add	r2, r3
 8020724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020726:	3b01      	subs	r3, #1
 8020728:	9222      	str	r2, [sp, #136]	@ 0x88
 802072a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802072c:	e687      	b.n	802043e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802072e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020730:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8020732:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8020734:	4433      	add	r3, r6
 8020736:	9321      	str	r3, [sp, #132]	@ 0x84
 8020738:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802073a:	441c      	add	r4, r3
 802073c:	9b08      	ldr	r3, [sp, #32]
 802073e:	3b01      	subs	r3, #1
 8020740:	9422      	str	r4, [sp, #136]	@ 0x88
 8020742:	9308      	str	r3, [sp, #32]
 8020744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020746:	3302      	adds	r3, #2
 8020748:	9309      	str	r3, [sp, #36]	@ 0x24
 802074a:	e656      	b.n	80203fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802074c:	d028      	beq.n	80207a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802074e:	9b08      	ldr	r3, [sp, #32]
 8020750:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8020752:	3b01      	subs	r3, #1
 8020754:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8020756:	fb00 5003 	mla	r0, r0, r3, r5
 802075a:	1400      	asrs	r0, r0, #16
 802075c:	f53f ae6a 	bmi.w	8020434 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020760:	3901      	subs	r1, #1
 8020762:	4288      	cmp	r0, r1
 8020764:	f6bf ae66 	bge.w	8020434 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020768:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802076a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 802076c:	fb01 0303 	mla	r3, r1, r3, r0
 8020770:	141b      	asrs	r3, r3, #16
 8020772:	f53f ae5f 	bmi.w	8020434 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020776:	3a01      	subs	r2, #1
 8020778:	4293      	cmp	r3, r2
 802077a:	f6bf ae5b 	bge.w	8020434 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802077e:	9b08      	ldr	r3, [sp, #32]
 8020780:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8020784:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8020788:	9313      	str	r3, [sp, #76]	@ 0x4c
 802078a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802078c:	2b00      	cmp	r3, #0
 802078e:	f300 8082 	bgt.w	8020896 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8020792:	9b08      	ldr	r3, [sp, #32]
 8020794:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802079a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802079e:	9309      	str	r3, [sp, #36]	@ 0x24
 80207a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	f340 81ef 	ble.w	8020b86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80207a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80207ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80207ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 80207b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80207b6:	eef0 6a62 	vmov.f32	s13, s5
 80207ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80207be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80207c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207c6:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 80207ca:	eef0 6a43 	vmov.f32	s13, s6
 80207ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207d2:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 80207d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80207e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80207ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80207ee:	ee12 2a90 	vmov	r2, s5
 80207f2:	eef0 2a47 	vmov.f32	s5, s14
 80207f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80207fa:	ee13 2a10 	vmov	r2, s6
 80207fe:	9323      	str	r3, [sp, #140]	@ 0x8c
 8020800:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020802:	eeb0 3a67 	vmov.f32	s6, s15
 8020806:	fb92 f3f3 	sdiv	r3, r2, r3
 802080a:	9324      	str	r3, [sp, #144]	@ 0x90
 802080c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802080e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020810:	3b01      	subs	r3, #1
 8020812:	9311      	str	r3, [sp, #68]	@ 0x44
 8020814:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020816:	bf08      	it	eq
 8020818:	4613      	moveq	r3, r2
 802081a:	9308      	str	r3, [sp, #32]
 802081c:	e5df      	b.n	80203de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802081e:	fb08 f505 	mul.w	r5, r8, r5
 8020822:	fb09 5303 	mla	r3, r9, r3, r5
 8020826:	e65f      	b.n	80204e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8020828:	4681      	mov	r9, r0
 802082a:	e686      	b.n	802053a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802082c:	f1c1 0210 	rsb	r2, r1, #16
 8020830:	4341      	muls	r1, r0
 8020832:	fb09 1902 	mla	r9, r9, r2, r1
 8020836:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802083a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802083e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020842:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020846:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802084a:	ea42 0909 	orr.w	r9, r2, r9
 802084e:	fa1f f289 	uxth.w	r2, r9
 8020852:	e71b      	b.n	802068c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020854:	803a      	strh	r2, [r7, #0]
 8020856:	e75d      	b.n	8020714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020858:	f115 0e01 	adds.w	lr, r5, #1
 802085c:	f53f af5a 	bmi.w	8020714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020860:	4572      	cmp	r2, lr
 8020862:	f6ff af57 	blt.w	8020714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020866:	f110 0e01 	adds.w	lr, r0, #1
 802086a:	f53f af53 	bmi.w	8020714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802086e:	4573      	cmp	r3, lr
 8020870:	f6ff af50 	blt.w	8020714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020874:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020876:	b21b      	sxth	r3, r3
 8020878:	b212      	sxth	r2, r2
 802087a:	9502      	str	r5, [sp, #8]
 802087c:	9301      	str	r3, [sp, #4]
 802087e:	9200      	str	r2, [sp, #0]
 8020880:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8020884:	e9cd c405 	strd	ip, r4, [sp, #20]
 8020888:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 802088c:	4639      	mov	r1, r7
 802088e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020890:	f7ff fc02 	bl	8020098 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8020894:	e73e      	b.n	8020714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020896:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020898:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802089c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802089e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80208a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80208a4:	fa1f fc82 	uxth.w	ip, r2
 80208a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80208ae:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80208b2:	141f      	asrs	r7, r3, #16
 80208b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80208b6:	141b      	asrs	r3, r3, #16
 80208b8:	fb01 3707 	mla	r7, r1, r7, r3
 80208bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80208be:	eb03 0a07 	add.w	sl, r3, r7
 80208c2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80208c6:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80208ca:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80208ce:	b29b      	uxth	r3, r3
 80208d0:	2d00      	cmp	r5, #0
 80208d2:	f000 813d 	beq.w	8020b50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 80208d6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80208da:	eb0a 0b01 	add.w	fp, sl, r1
 80208de:	fa1f fa85 	uxth.w	sl, r5
 80208e2:	940f      	str	r4, [sp, #60]	@ 0x3c
 80208e4:	fb0a fc0c 	mul.w	ip, sl, ip
 80208e8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80208ec:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80208f0:	eba0 000c 	sub.w	r0, r0, ip
 80208f4:	9410      	str	r4, [sp, #64]	@ 0x40
 80208f6:	fa1f fa8a 	uxth.w	sl, sl
 80208fa:	b280      	uxth	r0, r0
 80208fc:	eba3 030a 	sub.w	r3, r3, sl
 8020900:	fb08 f000 	mul.w	r0, r8, r0
 8020904:	b29b      	uxth	r3, r3
 8020906:	fb09 0303 	mla	r3, r9, r3, r0
 802090a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802090c:	fb0a 3300 	mla	r3, sl, r0, r3
 8020910:	fb0c 3304 	mla	r3, ip, r4, r3
 8020914:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020918:	2b00      	cmp	r3, #0
 802091a:	f000 810b 	beq.w	8020b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802091e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020920:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020924:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020926:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802092a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802092e:	f000 8114 	beq.w	8020b5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8020932:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8020936:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802093a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802093e:	fb0a fc0c 	mul.w	ip, sl, ip
 8020942:	fb09 f707 	mul.w	r7, r9, r7
 8020946:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802094a:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802094e:	f107 0b20 	add.w	fp, r7, #32
 8020952:	44cc      	add	ip, r9
 8020954:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8020958:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802095c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020960:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8020964:	ea4c 0909 	orr.w	r9, ip, r9
 8020968:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802096c:	8847      	ldrh	r7, [r0, #2]
 802096e:	d019      	beq.n	80209a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8020970:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8020974:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020978:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802097c:	fb0a fc0c 	mul.w	ip, sl, ip
 8020980:	fb08 f807 	mul.w	r8, r8, r7
 8020984:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8020988:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802098c:	f108 0b20 	add.w	fp, r8, #32
 8020990:	44bc      	add	ip, r7
 8020992:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8020996:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802099a:	0a3f      	lsrs	r7, r7, #8
 802099c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80209a0:	ea4c 0707 	orr.w	r7, ip, r7
 80209a4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80209a8:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80209ac:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80209b0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80209b4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80209b8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80209bc:	ea4c 0909 	orr.w	r9, ip, r9
 80209c0:	ea4a 0707 	orr.w	r7, sl, r7
 80209c4:	2d00      	cmp	r5, #0
 80209c6:	f000 80ca 	beq.w	8020b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 80209ca:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80209ce:	3901      	subs	r1, #1
 80209d0:	0049      	lsls	r1, r1, #1
 80209d2:	3102      	adds	r1, #2
 80209d4:	eb00 0c01 	add.w	ip, r0, r1
 80209d8:	5a41      	ldrh	r1, [r0, r1]
 80209da:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80209dc:	28ff      	cmp	r0, #255	@ 0xff
 80209de:	d019      	beq.n	8020a14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80209e0:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 80209e4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80209e6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80209ea:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80209ee:	fb04 fa01 	mul.w	sl, r4, r1
 80209f2:	fb08 f800 	mul.w	r8, r8, r0
 80209f6:	f10a 0020 	add.w	r0, sl, #32
 80209fa:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80209fe:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8020a02:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020a06:	4441      	add	r1, r8
 8020a08:	0a00      	lsrs	r0, r0, #8
 8020a0a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8020a0e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020a12:	4301      	orrs	r1, r0
 8020a14:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020a16:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8020a1a:	2cff      	cmp	r4, #255	@ 0xff
 8020a1c:	d01a      	beq.n	8020a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8020a1e:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8020a22:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020a26:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020a2a:	fb04 fa00 	mul.w	sl, r4, r0
 8020a2e:	fb08 f80c 	mul.w	r8, r8, ip
 8020a32:	f10a 0c20 	add.w	ip, sl, #32
 8020a36:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8020a3a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8020a3e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8020a42:	4440      	add	r0, r8
 8020a44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a48:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8020a4c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8020a50:	ea40 000c 	orr.w	r0, r0, ip
 8020a54:	fb15 fc02 	smulbb	ip, r5, r2
 8020a58:	f1c5 0810 	rsb	r8, r5, #16
 8020a5c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020a60:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8020a64:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8020a68:	eba8 0802 	sub.w	r8, r8, r2
 8020a6c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8020a70:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8020a74:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8020a78:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8020a7c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8020a80:	ea4a 0101 	orr.w	r1, sl, r1
 8020a84:	437a      	muls	r2, r7
 8020a86:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8020a8a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8020a8e:	fb09 2208 	mla	r2, r9, r8, r2
 8020a92:	ea4b 0000 	orr.w	r0, fp, r0
 8020a96:	fb05 2201 	mla	r2, r5, r1, r2
 8020a9a:	fb0c 2200 	mla	r2, ip, r0, r2
 8020a9e:	0d57      	lsrs	r7, r2, #21
 8020aa0:	0952      	lsrs	r2, r2, #5
 8020aa2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8020aa6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8020aaa:	433a      	orrs	r2, r7
 8020aac:	2bff      	cmp	r3, #255	@ 0xff
 8020aae:	b292      	uxth	r2, r2
 8020ab0:	d102      	bne.n	8020ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8020ab2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020ab4:	29ff      	cmp	r1, #255	@ 0xff
 8020ab6:	d063      	beq.n	8020b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8020ab8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020aba:	1215      	asrs	r5, r2, #8
 8020abc:	f8be 1000 	ldrh.w	r1, [lr]
 8020ac0:	4343      	muls	r3, r0
 8020ac2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020ac4:	10cf      	asrs	r7, r1, #3
 8020ac6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020aca:	1c58      	adds	r0, r3, #1
 8020acc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020ad0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8020ad4:	1208      	asrs	r0, r1, #8
 8020ad6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8020ada:	00c9      	lsls	r1, r1, #3
 8020adc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8020ae0:	b2db      	uxtb	r3, r3
 8020ae2:	b2c9      	uxtb	r1, r1
 8020ae4:	fb10 f003 	smulbb	r0, r0, r3
 8020ae8:	fb11 f103 	smulbb	r1, r1, r3
 8020aec:	fb05 0504 	mla	r5, r5, r4, r0
 8020af0:	10d0      	asrs	r0, r2, #3
 8020af2:	fb17 f703 	smulbb	r7, r7, r3
 8020af6:	00d2      	lsls	r2, r2, #3
 8020af8:	b2ad      	uxth	r5, r5
 8020afa:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8020afe:	b2d2      	uxtb	r2, r2
 8020b00:	fb00 7004 	mla	r0, r0, r4, r7
 8020b04:	1c6b      	adds	r3, r5, #1
 8020b06:	fb02 1204 	mla	r2, r2, r4, r1
 8020b0a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020b0e:	b292      	uxth	r2, r2
 8020b10:	b280      	uxth	r0, r0
 8020b12:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020b16:	1c57      	adds	r7, r2, #1
 8020b18:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020b1c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020b20:	433d      	orrs	r5, r7
 8020b22:	1c47      	adds	r7, r0, #1
 8020b24:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020b28:	097f      	lsrs	r7, r7, #5
 8020b2a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8020b2e:	433d      	orrs	r5, r7
 8020b30:	f8ae 5000 	strh.w	r5, [lr]
 8020b34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020b36:	f10e 0e02 	add.w	lr, lr, #2
 8020b3a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020b3c:	4413      	add	r3, r2
 8020b3e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020b40:	9321      	str	r3, [sp, #132]	@ 0x84
 8020b42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020b44:	441a      	add	r2, r3
 8020b46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020b48:	3b01      	subs	r3, #1
 8020b4a:	9222      	str	r2, [sp, #136]	@ 0x88
 8020b4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020b4e:	e61c      	b.n	802078a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8020b50:	fb08 f000 	mul.w	r0, r8, r0
 8020b54:	fb09 0303 	mla	r3, r9, r3, r0
 8020b58:	e6dc      	b.n	8020914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8020b5a:	46b9      	mov	r9, r7
 8020b5c:	e704      	b.n	8020968 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8020b5e:	f1c2 0110 	rsb	r1, r2, #16
 8020b62:	437a      	muls	r2, r7
 8020b64:	fb09 2901 	mla	r9, r9, r1, r2
 8020b68:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020b6c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8020b70:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8020b74:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020b78:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8020b7c:	4302      	orrs	r2, r0
 8020b7e:	e795      	b.n	8020aac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8020b80:	f8ae 2000 	strh.w	r2, [lr]
 8020b84:	e7d6      	b.n	8020b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8020b86:	b017      	add	sp, #92	@ 0x5c
 8020b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8020b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b90:	b085      	sub	sp, #20
 8020b92:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8020b96:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8020b9a:	2800      	cmp	r0, #0
 8020b9c:	9103      	str	r1, [sp, #12]
 8020b9e:	fb00 7406 	mla	r4, r0, r6, r7
 8020ba2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8020ba6:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8020baa:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8020bae:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8020bb2:	eb02 0904 	add.w	r9, r2, r4
 8020bb6:	9501      	str	r5, [sp, #4]
 8020bb8:	f2c0 8141 	blt.w	8020e3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8020bbc:	4583      	cmp	fp, r0
 8020bbe:	f340 813e 	ble.w	8020e3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8020bc2:	2f00      	cmp	r7, #0
 8020bc4:	f2c0 8137 	blt.w	8020e36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8020bc8:	42be      	cmp	r6, r7
 8020bca:	f340 8134 	ble.w	8020e36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8020bce:	f812 c004 	ldrb.w	ip, [r2, r4]
 8020bd2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8020bd6:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8020bda:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020bde:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8020be2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020be6:	4355      	muls	r5, r2
 8020be8:	fb0c f203 	mul.w	r2, ip, r3
 8020bec:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8020bf0:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8020bf4:	441d      	add	r5, r3
 8020bf6:	f102 0320 	add.w	r3, r2, #32
 8020bfa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020bfe:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8020c02:	0a1b      	lsrs	r3, r3, #8
 8020c04:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020c08:	431c      	orrs	r4, r3
 8020c0a:	1c7b      	adds	r3, r7, #1
 8020c0c:	f100 811c 	bmi.w	8020e48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8020c10:	429e      	cmp	r6, r3
 8020c12:	f340 8119 	ble.w	8020e48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8020c16:	2900      	cmp	r1, #0
 8020c18:	f000 8119 	beq.w	8020e4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8020c1c:	9a01      	ldr	r2, [sp, #4]
 8020c1e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020c22:	8855      	ldrh	r5, [r2, #2]
 8020c24:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8020c28:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8020c2c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020c30:	fb08 f802 	mul.w	r8, r8, r2
 8020c34:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8020c38:	435d      	muls	r5, r3
 8020c3a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8020c3e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8020c42:	44d0      	add	r8, sl
 8020c44:	f105 0a20 	add.w	sl, r5, #32
 8020c48:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020c4c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8020c50:	0a2d      	lsrs	r5, r5, #8
 8020c52:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020c56:	432a      	orrs	r2, r5
 8020c58:	3001      	adds	r0, #1
 8020c5a:	f100 80fe 	bmi.w	8020e5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8020c5e:	4583      	cmp	fp, r0
 8020c60:	f340 80fb 	ble.w	8020e5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8020c64:	f1be 0f00 	cmp.w	lr, #0
 8020c68:	f000 80fc 	beq.w	8020e64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8020c6c:	2f00      	cmp	r7, #0
 8020c6e:	f2c0 80f1 	blt.w	8020e54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8020c72:	42be      	cmp	r6, r7
 8020c74:	f340 80ee 	ble.w	8020e54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8020c78:	9801      	ldr	r0, [sp, #4]
 8020c7a:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8020c7e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8020c82:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8020c86:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020c8a:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8020c8e:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8020c92:	fb0a fa00 	mul.w	sl, sl, r0
 8020c96:	fb05 f808 	mul.w	r8, r5, r8
 8020c9a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8020c9e:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8020ca2:	4482      	add	sl, r0
 8020ca4:	f108 0020 	add.w	r0, r8, #32
 8020ca8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020cac:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8020cb0:	0a00      	lsrs	r0, r0, #8
 8020cb2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020cb6:	ea4b 0b00 	orr.w	fp, fp, r0
 8020cba:	3701      	adds	r7, #1
 8020cbc:	f100 80d7 	bmi.w	8020e6e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8020cc0:	42be      	cmp	r6, r7
 8020cc2:	f340 80d4 	ble.w	8020e6e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8020cc6:	2900      	cmp	r1, #0
 8020cc8:	f000 80d4 	beq.w	8020e74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8020ccc:	3601      	adds	r6, #1
 8020cce:	9801      	ldr	r0, [sp, #4]
 8020cd0:	f819 7006 	ldrb.w	r7, [r9, r6]
 8020cd4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8020cd8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8020cdc:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8020ce0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020ce4:	fb09 f906 	mul.w	r9, r9, r6
 8020ce8:	fb07 f800 	mul.w	r8, r7, r0
 8020cec:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8020cf0:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8020cf4:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8020cf8:	44d1      	add	r9, sl
 8020cfa:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8020cfe:	f108 0020 	add.w	r0, r8, #32
 8020d02:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020d06:	0a00      	lsrs	r0, r0, #8
 8020d08:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020d0c:	4330      	orrs	r0, r6
 8020d0e:	b28e      	uxth	r6, r1
 8020d10:	fa1f f98e 	uxth.w	r9, lr
 8020d14:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8020d18:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8020d1c:	fb06 f809 	mul.w	r8, r6, r9
 8020d20:	0136      	lsls	r6, r6, #4
 8020d22:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8020d26:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8020d2a:	9601      	str	r6, [sp, #4]
 8020d2c:	ea4a 0404 	orr.w	r4, sl, r4
 8020d30:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020d34:	fa1f f689 	uxth.w	r6, r9
 8020d38:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8020d3c:	fb11 f90e 	smulbb	r9, r1, lr
 8020d40:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8020d44:	9602      	str	r6, [sp, #8]
 8020d46:	4626      	mov	r6, r4
 8020d48:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8020d4c:	f1ce 0410 	rsb	r4, lr, #16
 8020d50:	ea4a 0202 	orr.w	r2, sl, r2
 8020d54:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020d58:	1a64      	subs	r4, r4, r1
 8020d5a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8020d5e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8020d62:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8020d66:	434a      	muls	r2, r1
 8020d68:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8020d6c:	ea4a 0000 	orr.w	r0, sl, r0
 8020d70:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8020d74:	fb04 2406 	mla	r4, r4, r6, r2
 8020d78:	9903      	ldr	r1, [sp, #12]
 8020d7a:	fb09 4200 	mla	r2, r9, r0, r4
 8020d7e:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8020d82:	9801      	ldr	r0, [sp, #4]
 8020d84:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8020d88:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8020d8c:	8809      	ldrh	r1, [r1, #0]
 8020d8e:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8020d92:	ea44 0b0b 	orr.w	fp, r4, fp
 8020d96:	9c02      	ldr	r4, [sp, #8]
 8020d98:	1b00      	subs	r0, r0, r4
 8020d9a:	9c01      	ldr	r4, [sp, #4]
 8020d9c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8020da0:	eba4 0608 	sub.w	r6, r4, r8
 8020da4:	b280      	uxth	r0, r0
 8020da6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8020daa:	b2b6      	uxth	r6, r6
 8020dac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020db0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020db4:	4373      	muls	r3, r6
 8020db6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8020dba:	fb0c 3300 	mla	r3, ip, r0, r3
 8020dbe:	9802      	ldr	r0, [sp, #8]
 8020dc0:	ea42 0e0e 	orr.w	lr, r2, lr
 8020dc4:	fb00 3505 	mla	r5, r0, r5, r3
 8020dc8:	120b      	asrs	r3, r1, #8
 8020dca:	10c8      	asrs	r0, r1, #3
 8020dcc:	fb08 5707 	mla	r7, r8, r7, r5
 8020dd0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8020dd4:	00c9      	lsls	r1, r1, #3
 8020dd6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8020dda:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8020dde:	fa1f f28e 	uxth.w	r2, lr
 8020de2:	b2c9      	uxtb	r1, r1
 8020de4:	b2ff      	uxtb	r7, r7
 8020de6:	437b      	muls	r3, r7
 8020de8:	4378      	muls	r0, r7
 8020dea:	434f      	muls	r7, r1
 8020dec:	1c59      	adds	r1, r3, #1
 8020dee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020df2:	1213      	asrs	r3, r2, #8
 8020df4:	f023 0307 	bic.w	r3, r3, #7
 8020df8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020dfc:	1c41      	adds	r1, r0, #1
 8020dfe:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8020e02:	10d1      	asrs	r1, r2, #3
 8020e04:	021b      	lsls	r3, r3, #8
 8020e06:	f021 0103 	bic.w	r1, r1, #3
 8020e0a:	00d2      	lsls	r2, r2, #3
 8020e0c:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8020e10:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8020e14:	00c9      	lsls	r1, r1, #3
 8020e16:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020e1a:	430b      	orrs	r3, r1
 8020e1c:	1c79      	adds	r1, r7, #1
 8020e1e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8020e22:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8020e26:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020e2a:	431a      	orrs	r2, r3
 8020e2c:	9b03      	ldr	r3, [sp, #12]
 8020e2e:	801a      	strh	r2, [r3, #0]
 8020e30:	b005      	add	sp, #20
 8020e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e36:	f04f 0c00 	mov.w	ip, #0
 8020e3a:	4664      	mov	r4, ip
 8020e3c:	e6e5      	b.n	8020c0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8020e3e:	2300      	movs	r3, #0
 8020e40:	469c      	mov	ip, r3
 8020e42:	461a      	mov	r2, r3
 8020e44:	461c      	mov	r4, r3
 8020e46:	e707      	b.n	8020c58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8020e48:	2300      	movs	r3, #0
 8020e4a:	461a      	mov	r2, r3
 8020e4c:	e704      	b.n	8020c58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8020e4e:	460b      	mov	r3, r1
 8020e50:	460a      	mov	r2, r1
 8020e52:	e701      	b.n	8020c58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8020e54:	2500      	movs	r5, #0
 8020e56:	46ab      	mov	fp, r5
 8020e58:	e72f      	b.n	8020cba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8020e5a:	2700      	movs	r7, #0
 8020e5c:	463d      	mov	r5, r7
 8020e5e:	4638      	mov	r0, r7
 8020e60:	46bb      	mov	fp, r7
 8020e62:	e754      	b.n	8020d0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8020e64:	4677      	mov	r7, lr
 8020e66:	4675      	mov	r5, lr
 8020e68:	4670      	mov	r0, lr
 8020e6a:	46f3      	mov	fp, lr
 8020e6c:	e74f      	b.n	8020d0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8020e6e:	2700      	movs	r7, #0
 8020e70:	4638      	mov	r0, r7
 8020e72:	e74c      	b.n	8020d0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8020e74:	460f      	mov	r7, r1
 8020e76:	4608      	mov	r0, r1
 8020e78:	e749      	b.n	8020d0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08020e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e80:	b093      	sub	sp, #76	@ 0x4c
 8020e82:	9210      	str	r2, [sp, #64]	@ 0x40
 8020e84:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020e86:	9011      	str	r0, [sp, #68]	@ 0x44
 8020e88:	910e      	str	r1, [sp, #56]	@ 0x38
 8020e8a:	6850      	ldr	r0, [r2, #4]
 8020e8c:	9306      	str	r3, [sp, #24]
 8020e8e:	6812      	ldr	r2, [r2, #0]
 8020e90:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8020e94:	fb00 1303 	mla	r3, r0, r3, r1
 8020e98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020e9c:	9307      	str	r3, [sp, #28]
 8020e9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	9308      	str	r3, [sp, #32]
 8020ea4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020ea6:	685b      	ldr	r3, [r3, #4]
 8020ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8020eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020eac:	2b00      	cmp	r3, #0
 8020eae:	dc03      	bgt.n	8020eb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020eb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020eb2:	2b00      	cmp	r3, #0
 8020eb4:	f340 83b6 	ble.w	8021624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8020eb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020eba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ebe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020ec2:	1e48      	subs	r0, r1, #1
 8020ec4:	1e55      	subs	r5, r2, #1
 8020ec6:	9b06      	ldr	r3, [sp, #24]
 8020ec8:	2b00      	cmp	r3, #0
 8020eca:	f340 8165 	ble.w	8021198 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020ece:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8020ed0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020ed2:	1436      	asrs	r6, r6, #16
 8020ed4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020ed8:	d406      	bmi.n	8020ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020eda:	4286      	cmp	r6, r0
 8020edc:	da04      	bge.n	8020ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	db02      	blt.n	8020ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020ee2:	42ab      	cmp	r3, r5
 8020ee4:	f2c0 8159 	blt.w	802119a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020ee8:	3601      	adds	r6, #1
 8020eea:	f100 8146 	bmi.w	802117a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020eee:	42b1      	cmp	r1, r6
 8020ef0:	f2c0 8143 	blt.w	802117a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020ef4:	3301      	adds	r3, #1
 8020ef6:	f100 8140 	bmi.w	802117a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020efa:	429a      	cmp	r2, r3
 8020efc:	f2c0 813d 	blt.w	802117a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020f00:	9b06      	ldr	r3, [sp, #24]
 8020f02:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8020f06:	9f07      	ldr	r7, [sp, #28]
 8020f08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020f0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	f340 8166 	ble.w	80211de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f12:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020f14:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8020f16:	1418      	asrs	r0, r3, #16
 8020f18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020f1a:	142d      	asrs	r5, r5, #16
 8020f1c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020f20:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020f22:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8020f26:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020f28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8020f2c:	f100 81f0 	bmi.w	8021310 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020f30:	f102 3eff 	add.w	lr, r2, #4294967295
 8020f34:	4575      	cmp	r5, lr
 8020f36:	f280 81eb 	bge.w	8021310 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020f3a:	2800      	cmp	r0, #0
 8020f3c:	f2c0 81e8 	blt.w	8021310 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020f40:	f103 3eff 	add.w	lr, r3, #4294967295
 8020f44:	4570      	cmp	r0, lr
 8020f46:	f280 81e3 	bge.w	8021310 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020f4a:	b212      	sxth	r2, r2
 8020f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f4e:	fa1f fe81 	uxth.w	lr, r1
 8020f52:	fb00 5002 	mla	r0, r0, r2, r5
 8020f56:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8020f5a:	eb03 0a00 	add.w	sl, r3, r0
 8020f5e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8020f62:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8020f66:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020f6a:	b29b      	uxth	r3, r3
 8020f6c:	f1bc 0f00 	cmp.w	ip, #0
 8020f70:	f000 817b 	beq.w	802126a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020f74:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8020f78:	eb0a 0b02 	add.w	fp, sl, r2
 8020f7c:	fa1f fa8c 	uxth.w	sl, ip
 8020f80:	940a      	str	r4, [sp, #40]	@ 0x28
 8020f82:	fb0a fe0e 	mul.w	lr, sl, lr
 8020f86:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020f8a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8020f8e:	eba5 050e 	sub.w	r5, r5, lr
 8020f92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020f94:	fa1f fa8a 	uxth.w	sl, sl
 8020f98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020f9a:	b2ad      	uxth	r5, r5
 8020f9c:	eba3 030a 	sub.w	r3, r3, sl
 8020fa0:	fb08 f505 	mul.w	r5, r8, r5
 8020fa4:	b29b      	uxth	r3, r3
 8020fa6:	fb09 5303 	mla	r3, r9, r3, r5
 8020faa:	fb0a 3304 	mla	r3, sl, r4, r3
 8020fae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020fb0:	fb0e 3304 	mla	r3, lr, r4, r3
 8020fb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	f000 80d1 	beq.w	8021160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8020fbe:	9c08      	ldr	r4, [sp, #32]
 8020fc0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020fc4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8020fc8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8020fcc:	f000 8152 	beq.w	8021274 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8020fd0:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8020fd4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020fd8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020fdc:	fb0a fe0e 	mul.w	lr, sl, lr
 8020fe0:	fb09 f000 	mul.w	r0, r9, r0
 8020fe4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8020fe8:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8020fec:	f100 0b20 	add.w	fp, r0, #32
 8020ff0:	44ce      	add	lr, r9
 8020ff2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8020ff6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020ffa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020ffe:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021002:	ea4e 0909 	orr.w	r9, lr, r9
 8021006:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802100a:	8868      	ldrh	r0, [r5, #2]
 802100c:	d019      	beq.n	8021042 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802100e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8021012:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021016:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802101a:	fb0a fe0e 	mul.w	lr, sl, lr
 802101e:	fb08 f800 	mul.w	r8, r8, r0
 8021022:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021026:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802102a:	f108 0b20 	add.w	fp, r8, #32
 802102e:	4486      	add	lr, r0
 8021030:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021034:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021038:	0a00      	lsrs	r0, r0, #8
 802103a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802103e:	ea4e 0000 	orr.w	r0, lr, r0
 8021042:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021046:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802104a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802104e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021052:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8021056:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802105a:	ea4e 0909 	orr.w	r9, lr, r9
 802105e:	ea4a 0000 	orr.w	r0, sl, r0
 8021062:	f1bc 0f00 	cmp.w	ip, #0
 8021066:	f000 8107 	beq.w	8021278 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802106a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802106e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021070:	3a01      	subs	r2, #1
 8021072:	2cff      	cmp	r4, #255	@ 0xff
 8021074:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021078:	f102 0202 	add.w	r2, r2, #2
 802107c:	eb05 0e02 	add.w	lr, r5, r2
 8021080:	5aaa      	ldrh	r2, [r5, r2]
 8021082:	d018      	beq.n	80210b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021084:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8021088:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802108c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021090:	fb04 fa02 	mul.w	sl, r4, r2
 8021094:	fb08 f805 	mul.w	r8, r8, r5
 8021098:	f10a 0520 	add.w	r5, sl, #32
 802109c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80210a0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80210a4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80210a8:	4442      	add	r2, r8
 80210aa:	0a2d      	lsrs	r5, r5, #8
 80210ac:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80210b0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80210b4:	432a      	orrs	r2, r5
 80210b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80210b8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80210bc:	2cff      	cmp	r4, #255	@ 0xff
 80210be:	d01a      	beq.n	80210f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80210c0:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80210c4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80210c8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80210cc:	fb04 fa05 	mul.w	sl, r4, r5
 80210d0:	fb08 f80e 	mul.w	r8, r8, lr
 80210d4:	f10a 0e20 	add.w	lr, sl, #32
 80210d8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80210dc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80210e0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80210e4:	4445      	add	r5, r8
 80210e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210ea:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80210ee:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80210f2:	ea45 050e 	orr.w	r5, r5, lr
 80210f6:	fb1c fe01 	smulbb	lr, ip, r1
 80210fa:	f1cc 0810 	rsb	r8, ip, #16
 80210fe:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021102:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021106:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802110a:	eba8 0801 	sub.w	r8, r8, r1
 802110e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021112:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021116:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802111a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802111e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021122:	ea4a 0202 	orr.w	r2, sl, r2
 8021126:	4341      	muls	r1, r0
 8021128:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802112c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021130:	fb09 1108 	mla	r1, r9, r8, r1
 8021134:	ea4b 0505 	orr.w	r5, fp, r5
 8021138:	fb0c 1102 	mla	r1, ip, r2, r1
 802113c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021140:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021144:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021148:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802114c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8021150:	ea42 0e0e 	orr.w	lr, r2, lr
 8021154:	fa1f f28e 	uxth.w	r2, lr
 8021158:	2bff      	cmp	r3, #255	@ 0xff
 802115a:	f040 80a1 	bne.w	80212a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802115e:	803a      	strh	r2, [r7, #0]
 8021160:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021162:	3702      	adds	r7, #2
 8021164:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8021166:	4413      	add	r3, r2
 8021168:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802116a:	931d      	str	r3, [sp, #116]	@ 0x74
 802116c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802116e:	441a      	add	r2, r3
 8021170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021172:	3b01      	subs	r3, #1
 8021174:	921e      	str	r2, [sp, #120]	@ 0x78
 8021176:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021178:	e6c7      	b.n	8020f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802117a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802117c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802117e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8021180:	4433      	add	r3, r6
 8021182:	931d      	str	r3, [sp, #116]	@ 0x74
 8021184:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021186:	441c      	add	r4, r3
 8021188:	9b06      	ldr	r3, [sp, #24]
 802118a:	3b01      	subs	r3, #1
 802118c:	941e      	str	r4, [sp, #120]	@ 0x78
 802118e:	9306      	str	r3, [sp, #24]
 8021190:	9b07      	ldr	r3, [sp, #28]
 8021192:	3302      	adds	r3, #2
 8021194:	9307      	str	r3, [sp, #28]
 8021196:	e696      	b.n	8020ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021198:	d028      	beq.n	80211ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802119a:	9b06      	ldr	r3, [sp, #24]
 802119c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802119e:	3b01      	subs	r3, #1
 80211a0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80211a2:	fb00 5003 	mla	r0, r0, r3, r5
 80211a6:	1400      	asrs	r0, r0, #16
 80211a8:	f53f aeaa 	bmi.w	8020f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80211ac:	3901      	subs	r1, #1
 80211ae:	4288      	cmp	r0, r1
 80211b0:	f6bf aea6 	bge.w	8020f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80211b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80211b6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80211b8:	fb01 0303 	mla	r3, r1, r3, r0
 80211bc:	141b      	asrs	r3, r3, #16
 80211be:	f53f ae9f 	bmi.w	8020f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80211c2:	3a01      	subs	r2, #1
 80211c4:	4293      	cmp	r3, r2
 80211c6:	f6bf ae9b 	bge.w	8020f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80211ca:	9b06      	ldr	r3, [sp, #24]
 80211cc:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80211d0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80211d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80211d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80211d8:	2b00      	cmp	r3, #0
 80211da:	f300 80b6 	bgt.w	802134a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80211de:	9b06      	ldr	r3, [sp, #24]
 80211e0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80211e4:	9b07      	ldr	r3, [sp, #28]
 80211e6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80211ea:	9307      	str	r3, [sp, #28]
 80211ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	f340 8218 	ble.w	8021624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80211f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80211f8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80211fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80211fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021202:	eef0 6a62 	vmov.f32	s13, s5
 8021206:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802120a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802120e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021212:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8021216:	eef0 6a43 	vmov.f32	s13, s6
 802121a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802121e:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8021222:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021226:	ee61 7a27 	vmul.f32	s15, s2, s15
 802122a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802122e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021232:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021236:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802123a:	ee12 2a90 	vmov	r2, s5
 802123e:	eef0 2a47 	vmov.f32	s5, s14
 8021242:	fb92 f3f3 	sdiv	r3, r2, r3
 8021246:	ee13 2a10 	vmov	r2, s6
 802124a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802124c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802124e:	eeb0 3a67 	vmov.f32	s6, s15
 8021252:	fb92 f3f3 	sdiv	r3, r2, r3
 8021256:	9320      	str	r3, [sp, #128]	@ 0x80
 8021258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802125a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802125c:	3b01      	subs	r3, #1
 802125e:	930e      	str	r3, [sp, #56]	@ 0x38
 8021260:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021262:	bf08      	it	eq
 8021264:	4613      	moveq	r3, r2
 8021266:	9306      	str	r3, [sp, #24]
 8021268:	e61f      	b.n	8020eaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802126a:	fb08 f505 	mul.w	r5, r8, r5
 802126e:	fb09 5303 	mla	r3, r9, r3, r5
 8021272:	e69f      	b.n	8020fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021274:	4681      	mov	r9, r0
 8021276:	e6c6      	b.n	8021006 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8021278:	f1c1 0210 	rsb	r2, r1, #16
 802127c:	4341      	muls	r1, r0
 802127e:	fb09 1902 	mla	r9, r9, r2, r1
 8021282:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021286:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802128a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802128e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021292:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8021296:	ea42 0909 	orr.w	r9, r2, r9
 802129a:	fa1f f289 	uxth.w	r2, r9
 802129e:	e75b      	b.n	8021158 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80212a0:	f8b7 c000 	ldrh.w	ip, [r7]
 80212a4:	43db      	mvns	r3, r3
 80212a6:	ea4f 202c 	mov.w	r0, ip, asr #8
 80212aa:	fa5f fe83 	uxtb.w	lr, r3
 80212ae:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80212b2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80212b6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80212ba:	fb00 f00e 	mul.w	r0, r0, lr
 80212be:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80212c2:	b2db      	uxtb	r3, r3
 80212c4:	1c41      	adds	r1, r0, #1
 80212c6:	fb05 f50e 	mul.w	r5, r5, lr
 80212ca:	fb03 f30e 	mul.w	r3, r3, lr
 80212ce:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80212d2:	1211      	asrs	r1, r2, #8
 80212d4:	f021 0107 	bic.w	r1, r1, #7
 80212d8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80212dc:	48d3      	ldr	r0, [pc, #844]	@ (802162c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80212de:	b2c9      	uxtb	r1, r1
 80212e0:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80212e4:	1c69      	adds	r1, r5, #1
 80212e6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80212ea:	10d1      	asrs	r1, r2, #3
 80212ec:	00d2      	lsls	r2, r2, #3
 80212ee:	f021 0103 	bic.w	r1, r1, #3
 80212f2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80212f6:	00c9      	lsls	r1, r1, #3
 80212f8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80212fc:	4301      	orrs	r1, r0
 80212fe:	1c58      	adds	r0, r3, #1
 8021300:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021304:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021308:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802130c:	430a      	orrs	r2, r1
 802130e:	e726      	b.n	802115e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8021310:	f115 0e01 	adds.w	lr, r5, #1
 8021314:	f53f af24 	bmi.w	8021160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021318:	4572      	cmp	r2, lr
 802131a:	f6ff af21 	blt.w	8021160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802131e:	f110 0e01 	adds.w	lr, r0, #1
 8021322:	f53f af1d 	bmi.w	8021160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021326:	4573      	cmp	r3, lr
 8021328:	f6ff af1a 	blt.w	8021160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802132c:	b21b      	sxth	r3, r3
 802132e:	b212      	sxth	r2, r2
 8021330:	9301      	str	r3, [sp, #4]
 8021332:	9200      	str	r2, [sp, #0]
 8021334:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8021338:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802133c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8021340:	4639      	mov	r1, r7
 8021342:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021344:	f7ff fc22 	bl	8020b8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021348:	e70a      	b.n	8021160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802134a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802134c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021350:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021352:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021356:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021358:	fa1f fc82 	uxth.w	ip, r2
 802135c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021360:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021362:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021366:	141f      	asrs	r7, r3, #16
 8021368:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802136a:	141b      	asrs	r3, r3, #16
 802136c:	fb01 3707 	mla	r7, r1, r7, r3
 8021370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021372:	eb03 0a07 	add.w	sl, r3, r7
 8021376:	f813 9007 	ldrb.w	r9, [r3, r7]
 802137a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802137e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021382:	b29b      	uxth	r3, r3
 8021384:	2d00      	cmp	r5, #0
 8021386:	f000 80fe 	beq.w	8021586 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802138a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802138e:	eb0a 0b01 	add.w	fp, sl, r1
 8021392:	fa1f fa85 	uxth.w	sl, r5
 8021396:	940c      	str	r4, [sp, #48]	@ 0x30
 8021398:	fb0a fc0c 	mul.w	ip, sl, ip
 802139c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80213a0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80213a4:	eba0 000c 	sub.w	r0, r0, ip
 80213a8:	940d      	str	r4, [sp, #52]	@ 0x34
 80213aa:	fa1f fa8a 	uxth.w	sl, sl
 80213ae:	b280      	uxth	r0, r0
 80213b0:	eba3 030a 	sub.w	r3, r3, sl
 80213b4:	fb08 f000 	mul.w	r0, r8, r0
 80213b8:	b29b      	uxth	r3, r3
 80213ba:	fb09 0303 	mla	r3, r9, r3, r0
 80213be:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80213c0:	fb0a 3300 	mla	r3, sl, r0, r3
 80213c4:	fb0c 3304 	mla	r3, ip, r4, r3
 80213c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	f000 80cc 	beq.w	802156a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80213d2:	9808      	ldr	r0, [sp, #32]
 80213d4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80213d8:	9c08      	ldr	r4, [sp, #32]
 80213da:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80213de:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80213e2:	f000 80d5 	beq.w	8021590 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80213e6:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80213ea:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80213ee:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80213f2:	fb0a fc0c 	mul.w	ip, sl, ip
 80213f6:	fb09 f707 	mul.w	r7, r9, r7
 80213fa:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80213fe:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8021402:	f107 0b20 	add.w	fp, r7, #32
 8021406:	44cc      	add	ip, r9
 8021408:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802140c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021410:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021414:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021418:	ea4c 0909 	orr.w	r9, ip, r9
 802141c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021420:	8847      	ldrh	r7, [r0, #2]
 8021422:	d019      	beq.n	8021458 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8021424:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8021428:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802142c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8021430:	fb0a fc0c 	mul.w	ip, sl, ip
 8021434:	fb08 f807 	mul.w	r8, r8, r7
 8021438:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802143c:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8021440:	f108 0b20 	add.w	fp, r8, #32
 8021444:	44bc      	add	ip, r7
 8021446:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802144a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802144e:	0a3f      	lsrs	r7, r7, #8
 8021450:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8021454:	ea4c 0707 	orr.w	r7, ip, r7
 8021458:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802145c:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8021460:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021464:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8021468:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802146c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021470:	ea4c 0909 	orr.w	r9, ip, r9
 8021474:	ea4a 0707 	orr.w	r7, sl, r7
 8021478:	2d00      	cmp	r5, #0
 802147a:	f000 808b 	beq.w	8021594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802147e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8021482:	3901      	subs	r1, #1
 8021484:	0049      	lsls	r1, r1, #1
 8021486:	3102      	adds	r1, #2
 8021488:	eb00 0c01 	add.w	ip, r0, r1
 802148c:	5a41      	ldrh	r1, [r0, r1]
 802148e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021490:	28ff      	cmp	r0, #255	@ 0xff
 8021492:	d019      	beq.n	80214c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8021494:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8021498:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802149a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802149e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80214a2:	fb04 fa01 	mul.w	sl, r4, r1
 80214a6:	fb08 f800 	mul.w	r8, r8, r0
 80214aa:	f10a 0020 	add.w	r0, sl, #32
 80214ae:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80214b2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80214b6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80214ba:	4441      	add	r1, r8
 80214bc:	0a00      	lsrs	r0, r0, #8
 80214be:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80214c2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80214c6:	4301      	orrs	r1, r0
 80214c8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80214ca:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80214ce:	2cff      	cmp	r4, #255	@ 0xff
 80214d0:	d01a      	beq.n	8021508 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 80214d2:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 80214d6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80214da:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80214de:	fb04 fa00 	mul.w	sl, r4, r0
 80214e2:	fb08 f80c 	mul.w	r8, r8, ip
 80214e6:	f10a 0c20 	add.w	ip, sl, #32
 80214ea:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80214ee:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80214f2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80214f6:	4440      	add	r0, r8
 80214f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214fc:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021500:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8021504:	ea40 000c 	orr.w	r0, r0, ip
 8021508:	fb15 fc02 	smulbb	ip, r5, r2
 802150c:	f1c5 0810 	rsb	r8, r5, #16
 8021510:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021514:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8021518:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802151c:	eba8 0802 	sub.w	r8, r8, r2
 8021520:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021524:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021528:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802152c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021530:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021534:	ea4a 0101 	orr.w	r1, sl, r1
 8021538:	437a      	muls	r2, r7
 802153a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802153e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021542:	fb09 2208 	mla	r2, r9, r8, r2
 8021546:	ea4b 0000 	orr.w	r0, fp, r0
 802154a:	fb05 2201 	mla	r2, r5, r1, r2
 802154e:	fb0c 2200 	mla	r2, ip, r0, r2
 8021552:	0d57      	lsrs	r7, r2, #21
 8021554:	0952      	lsrs	r2, r2, #5
 8021556:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802155a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802155e:	433a      	orrs	r2, r7
 8021560:	2bff      	cmp	r3, #255	@ 0xff
 8021562:	b292      	uxth	r2, r2
 8021564:	d127      	bne.n	80215b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8021566:	f8ae 2000 	strh.w	r2, [lr]
 802156a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802156c:	f10e 0e02 	add.w	lr, lr, #2
 8021570:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8021572:	4413      	add	r3, r2
 8021574:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8021576:	931d      	str	r3, [sp, #116]	@ 0x74
 8021578:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802157a:	441a      	add	r2, r3
 802157c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802157e:	3b01      	subs	r3, #1
 8021580:	921e      	str	r2, [sp, #120]	@ 0x78
 8021582:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021584:	e627      	b.n	80211d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021586:	fb08 f000 	mul.w	r0, r8, r0
 802158a:	fb09 0303 	mla	r3, r9, r3, r0
 802158e:	e71b      	b.n	80213c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8021590:	46b9      	mov	r9, r7
 8021592:	e743      	b.n	802141c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8021594:	f1c2 0110 	rsb	r1, r2, #16
 8021598:	437a      	muls	r2, r7
 802159a:	fb09 2901 	mla	r9, r9, r1, r2
 802159e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80215a2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80215a6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80215aa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80215ae:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80215b2:	4302      	orrs	r2, r0
 80215b4:	e7d4      	b.n	8021560 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 80215b6:	f8be 7000 	ldrh.w	r7, [lr]
 80215ba:	43db      	mvns	r3, r3
 80215bc:	4c1b      	ldr	r4, [pc, #108]	@ (802162c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80215be:	1238      	asrs	r0, r7, #8
 80215c0:	fa5f fc83 	uxtb.w	ip, r3
 80215c4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80215c8:	10fd      	asrs	r5, r7, #3
 80215ca:	00fb      	lsls	r3, r7, #3
 80215cc:	fb00 f00c 	mul.w	r0, r0, ip
 80215d0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80215d4:	b2db      	uxtb	r3, r3
 80215d6:	fb05 f10c 	mul.w	r1, r5, ip
 80215da:	1c45      	adds	r5, r0, #1
 80215dc:	fb03 f30c 	mul.w	r3, r3, ip
 80215e0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80215e4:	1215      	asrs	r5, r2, #8
 80215e6:	f025 0507 	bic.w	r5, r5, #7
 80215ea:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80215ee:	1c4d      	adds	r5, r1, #1
 80215f0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80215f4:	10d1      	asrs	r1, r2, #3
 80215f6:	b2c0      	uxtb	r0, r0
 80215f8:	f021 0103 	bic.w	r1, r1, #3
 80215fc:	00d2      	lsls	r2, r2, #3
 80215fe:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8021602:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021606:	00c9      	lsls	r1, r1, #3
 8021608:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802160c:	4308      	orrs	r0, r1
 802160e:	1c59      	adds	r1, r3, #1
 8021610:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021614:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021618:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802161c:	4318      	orrs	r0, r3
 802161e:	f8ae 0000 	strh.w	r0, [lr]
 8021622:	e7a2      	b.n	802156a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8021624:	b013      	add	sp, #76	@ 0x4c
 8021626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802162a:	bf00      	nop
 802162c:	fffff800 	.word	0xfffff800

08021630 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8021630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021634:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8021638:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802163c:	fb05 4c03 	mla	ip, r5, r3, r4
 8021640:	2d00      	cmp	r5, #0
 8021642:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8021646:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802164a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802164e:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8021652:	8808      	ldrh	r0, [r1, #0]
 8021654:	f2c0 80a7 	blt.w	80217a6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8021658:	45aa      	cmp	sl, r5
 802165a:	f340 80a4 	ble.w	80217a6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802165e:	2c00      	cmp	r4, #0
 8021660:	f2c0 809f 	blt.w	80217a2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8021664:	42a3      	cmp	r3, r4
 8021666:	f340 809c 	ble.w	80217a2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802166a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802166e:	1c62      	adds	r2, r4, #1
 8021670:	f100 809c 	bmi.w	80217ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8021674:	4293      	cmp	r3, r2
 8021676:	f340 8099 	ble.w	80217ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802167a:	f1b9 0f00 	cmp.w	r9, #0
 802167e:	f000 8095 	beq.w	80217ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8021682:	f8be c002 	ldrh.w	ip, [lr, #2]
 8021686:	3501      	adds	r5, #1
 8021688:	f100 8094 	bmi.w	80217b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802168c:	45aa      	cmp	sl, r5
 802168e:	f340 8091 	ble.w	80217b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8021692:	2f00      	cmp	r7, #0
 8021694:	f000 808e 	beq.w	80217b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8021698:	2c00      	cmp	r4, #0
 802169a:	f2c0 8089 	blt.w	80217b0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802169e:	42a3      	cmp	r3, r4
 80216a0:	f340 8086 	ble.w	80217b0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80216a4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80216a8:	3401      	adds	r4, #1
 80216aa:	f100 8086 	bmi.w	80217ba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80216ae:	42a3      	cmp	r3, r4
 80216b0:	f340 8083 	ble.w	80217ba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80216b4:	f1b9 0f00 	cmp.w	r9, #0
 80216b8:	d07f      	beq.n	80217ba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80216ba:	3301      	adds	r3, #1
 80216bc:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80216c0:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80216c4:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 80216c8:	fb19 fe07 	smulbb	lr, r9, r7
 80216cc:	f1c7 0210 	rsb	r2, r7, #16
 80216d0:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80216d4:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80216d8:	eba2 0209 	sub.w	r2, r2, r9
 80216dc:	ea44 0808 	orr.w	r8, r4, r8
 80216e0:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80216e4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80216e8:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80216ec:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80216f0:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80216f4:	ea44 0c0c 	orr.w	ip, r4, ip
 80216f8:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80216fc:	fb04 f40c 	mul.w	r4, r4, ip
 8021700:	fb02 4808 	mla	r8, r2, r8, r4
 8021704:	041a      	lsls	r2, r3, #16
 8021706:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802170a:	b2b4      	uxth	r4, r6
 802170c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021710:	43f6      	mvns	r6, r6
 8021712:	4313      	orrs	r3, r2
 8021714:	042a      	lsls	r2, r5, #16
 8021716:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802171a:	b2f6      	uxtb	r6, r6
 802171c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021720:	fb0e 8303 	mla	r3, lr, r3, r8
 8021724:	432a      	orrs	r2, r5
 8021726:	fb07 3202 	mla	r2, r7, r2, r3
 802172a:	10c7      	asrs	r7, r0, #3
 802172c:	0d53      	lsrs	r3, r2, #21
 802172e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021732:	0952      	lsrs	r2, r2, #5
 8021734:	fb17 f706 	smulbb	r7, r7, r6
 8021738:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802173c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021740:	431a      	orrs	r2, r3
 8021742:	b293      	uxth	r3, r2
 8021744:	1202      	asrs	r2, r0, #8
 8021746:	121d      	asrs	r5, r3, #8
 8021748:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802174c:	00c0      	lsls	r0, r0, #3
 802174e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021752:	fb12 f206 	smulbb	r2, r2, r6
 8021756:	b2c0      	uxtb	r0, r0
 8021758:	fb05 2504 	mla	r5, r5, r4, r2
 802175c:	10da      	asrs	r2, r3, #3
 802175e:	fb10 f006 	smulbb	r0, r0, r6
 8021762:	00db      	lsls	r3, r3, #3
 8021764:	b2ad      	uxth	r5, r5
 8021766:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802176a:	b2db      	uxtb	r3, r3
 802176c:	fb02 7204 	mla	r2, r2, r4, r7
 8021770:	fb03 0004 	mla	r0, r3, r4, r0
 8021774:	1c6b      	adds	r3, r5, #1
 8021776:	b292      	uxth	r2, r2
 8021778:	b280      	uxth	r0, r0
 802177a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802177e:	1c43      	adds	r3, r0, #1
 8021780:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8021784:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021788:	1c50      	adds	r0, r2, #1
 802178a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802178e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021792:	0952      	lsrs	r2, r2, #5
 8021794:	432b      	orrs	r3, r5
 8021796:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802179a:	4313      	orrs	r3, r2
 802179c:	800b      	strh	r3, [r1, #0]
 802179e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80217a2:	4680      	mov	r8, r0
 80217a4:	e763      	b.n	802166e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 80217a6:	4684      	mov	ip, r0
 80217a8:	4680      	mov	r8, r0
 80217aa:	e76c      	b.n	8021686 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80217ac:	4684      	mov	ip, r0
 80217ae:	e76a      	b.n	8021686 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80217b0:	4605      	mov	r5, r0
 80217b2:	e779      	b.n	80216a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80217b4:	4603      	mov	r3, r0
 80217b6:	4605      	mov	r5, r0
 80217b8:	e782      	b.n	80216c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80217ba:	4603      	mov	r3, r0
 80217bc:	e780      	b.n	80216c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080217be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80217be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217c2:	b093      	sub	sp, #76	@ 0x4c
 80217c4:	461d      	mov	r5, r3
 80217c6:	9210      	str	r2, [sp, #64]	@ 0x40
 80217c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80217ca:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 80217ce:	910a      	str	r1, [sp, #40]	@ 0x28
 80217d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80217d2:	6859      	ldr	r1, [r3, #4]
 80217d4:	681b      	ldr	r3, [r3, #0]
 80217d6:	9011      	str	r0, [sp, #68]	@ 0x44
 80217d8:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 80217dc:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80217e0:	fb01 2707 	mla	r7, r1, r7, r2
 80217e4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80217e8:	9307      	str	r3, [sp, #28]
 80217ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80217ec:	681b      	ldr	r3, [r3, #0]
 80217ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80217f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80217f2:	43db      	mvns	r3, r3
 80217f4:	b2db      	uxtb	r3, r3
 80217f6:	9308      	str	r3, [sp, #32]
 80217f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	dc03      	bgt.n	8021806 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80217fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021800:	2b00      	cmp	r3, #0
 8021802:	f340 8205 	ble.w	8021c10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021806:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021808:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802180c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021810:	1e48      	subs	r0, r1, #1
 8021812:	f102 3cff 	add.w	ip, r2, #4294967295
 8021816:	2d00      	cmp	r5, #0
 8021818:	f340 80da 	ble.w	80219d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802181c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021820:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021824:	d406      	bmi.n	8021834 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021826:	4586      	cmp	lr, r0
 8021828:	da04      	bge.n	8021834 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802182a:	2b00      	cmp	r3, #0
 802182c:	db02      	blt.n	8021834 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802182e:	4563      	cmp	r3, ip
 8021830:	f2c0 80cf 	blt.w	80219d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021834:	f11e 0e01 	adds.w	lr, lr, #1
 8021838:	f100 80c1 	bmi.w	80219be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802183c:	4571      	cmp	r1, lr
 802183e:	f2c0 80be 	blt.w	80219be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021842:	3301      	adds	r3, #1
 8021844:	f100 80bb 	bmi.w	80219be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021848:	429a      	cmp	r2, r3
 802184a:	f2c0 80b8 	blt.w	80219be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802184e:	46a9      	mov	r9, r5
 8021850:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8021854:	f1b9 0f00 	cmp.w	r9, #0
 8021858:	f340 80d8 	ble.w	8021a0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802185c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802185e:	1421      	asrs	r1, r4, #16
 8021860:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021864:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021868:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802186c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021870:	f100 8112 	bmi.w	8021a98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021874:	f10e 3aff 	add.w	sl, lr, #4294967295
 8021878:	4551      	cmp	r1, sl
 802187a:	f280 810d 	bge.w	8021a98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802187e:	2800      	cmp	r0, #0
 8021880:	f2c0 810a 	blt.w	8021a98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021884:	f103 3aff 	add.w	sl, r3, #4294967295
 8021888:	4550      	cmp	r0, sl
 802188a:	f280 8105 	bge.w	8021a98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802188e:	fa0f f38e 	sxth.w	r3, lr
 8021892:	fb00 1103 	mla	r1, r0, r3, r1
 8021896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021898:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802189c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80218a0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80218a4:	f1bc 0f00 	cmp.w	ip, #0
 80218a8:	d007      	beq.n	80218ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80218aa:	005b      	lsls	r3, r3, #1
 80218ac:	eb0a 0003 	add.w	r0, sl, r3
 80218b0:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80218b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80218b6:	8843      	ldrh	r3, [r0, #2]
 80218b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80218ba:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80218be:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80218c2:	fb12 f30c 	smulbb	r3, r2, ip
 80218c6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80218ca:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80218ce:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80218d2:	10db      	asrs	r3, r3, #3
 80218d4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80218d8:	ea40 000e 	orr.w	r0, r0, lr
 80218dc:	f1cc 0e10 	rsb	lr, ip, #16
 80218e0:	ea4a 0101 	orr.w	r1, sl, r1
 80218e4:	9f08      	ldr	r7, [sp, #32]
 80218e6:	ebae 0e02 	sub.w	lr, lr, r2
 80218ea:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80218ee:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80218f2:	4351      	muls	r1, r2
 80218f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80218f6:	fb0e 1e00 	mla	lr, lr, r0, r1
 80218fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80218fc:	0410      	lsls	r0, r2, #16
 80218fe:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021902:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8021906:	4310      	orrs	r0, r2
 8021908:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802190a:	0412      	lsls	r2, r2, #16
 802190c:	fb03 e000 	mla	r0, r3, r0, lr
 8021910:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8021914:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8021918:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802191c:	ea42 020e 	orr.w	r2, r2, lr
 8021920:	fb03 0302 	mla	r3, r3, r2, r0
 8021924:	f8b8 0000 	ldrh.w	r0, [r8]
 8021928:	0d5a      	lsrs	r2, r3, #21
 802192a:	095b      	lsrs	r3, r3, #5
 802192c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021930:	1201      	asrs	r1, r0, #8
 8021932:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021936:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802193a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802193e:	00c0      	lsls	r0, r0, #3
 8021940:	4313      	orrs	r3, r2
 8021942:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8021946:	fb11 f107 	smulbb	r1, r1, r7
 802194a:	b2c0      	uxtb	r0, r0
 802194c:	b29b      	uxth	r3, r3
 802194e:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8021952:	fb10 f007 	smulbb	r0, r0, r7
 8021956:	fb1e fe07 	smulbb	lr, lr, r7
 802195a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802195e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8021962:	fb0c 1c02 	mla	ip, ip, r2, r1
 8021966:	10d9      	asrs	r1, r3, #3
 8021968:	00db      	lsls	r3, r3, #3
 802196a:	fa1f fc8c 	uxth.w	ip, ip
 802196e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021972:	b2db      	uxtb	r3, r3
 8021974:	fb01 e102 	mla	r1, r1, r2, lr
 8021978:	fb03 0302 	mla	r3, r3, r2, r0
 802197c:	b289      	uxth	r1, r1
 802197e:	b29a      	uxth	r2, r3
 8021980:	f10c 0301 	add.w	r3, ip, #1
 8021984:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021988:	1c53      	adds	r3, r2, #1
 802198a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802198e:	1c4a      	adds	r2, r1, #1
 8021990:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8021994:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021998:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802199c:	0949      	lsrs	r1, r1, #5
 802199e:	ea43 030c 	orr.w	r3, r3, ip
 80219a2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80219a6:	430b      	orrs	r3, r1
 80219a8:	f8a8 3000 	strh.w	r3, [r8]
 80219ac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80219ae:	f108 0802 	add.w	r8, r8, #2
 80219b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80219b6:	441c      	add	r4, r3
 80219b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80219ba:	441e      	add	r6, r3
 80219bc:	e74a      	b.n	8021854 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80219be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80219c0:	3d01      	subs	r5, #1
 80219c2:	441c      	add	r4, r3
 80219c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80219c6:	441e      	add	r6, r3
 80219c8:	9b07      	ldr	r3, [sp, #28]
 80219ca:	3302      	adds	r3, #2
 80219cc:	9307      	str	r3, [sp, #28]
 80219ce:	e722      	b.n	8021816 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80219d0:	d022      	beq.n	8021a18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80219d2:	1e6b      	subs	r3, r5, #1
 80219d4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80219d6:	fb00 4003 	mla	r0, r0, r3, r4
 80219da:	1400      	asrs	r0, r0, #16
 80219dc:	f53f af37 	bmi.w	802184e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80219e0:	3901      	subs	r1, #1
 80219e2:	4288      	cmp	r0, r1
 80219e4:	f6bf af33 	bge.w	802184e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80219e8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80219ea:	fb01 6303 	mla	r3, r1, r3, r6
 80219ee:	141b      	asrs	r3, r3, #16
 80219f0:	f53f af2d 	bmi.w	802184e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80219f4:	3a01      	subs	r2, #1
 80219f6:	4293      	cmp	r3, r2
 80219f8:	f6bf af29 	bge.w	802184e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80219fc:	46a8      	mov	r8, r5
 80219fe:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8021a02:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8021a06:	f1b8 0f00 	cmp.w	r8, #0
 8021a0a:	dc60      	bgt.n	8021ace <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8021a0c:	9b07      	ldr	r3, [sp, #28]
 8021a0e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8021a12:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021a16:	9307      	str	r3, [sp, #28]
 8021a18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	f340 80f8 	ble.w	8021c10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021a20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021a24:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021a26:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021a2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021a2e:	eef0 6a62 	vmov.f32	s13, s5
 8021a32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021a36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021a3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021a3e:	ee16 4a90 	vmov	r4, s13
 8021a42:	eef0 6a43 	vmov.f32	s13, s6
 8021a46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021a4a:	ee16 6a90 	vmov	r6, s13
 8021a4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021a52:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021a56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021a5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021a5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021a62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021a66:	ee12 2a90 	vmov	r2, s5
 8021a6a:	eef0 2a47 	vmov.f32	s5, s14
 8021a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a72:	ee13 2a10 	vmov	r2, s6
 8021a76:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021a78:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021a7a:	eeb0 3a67 	vmov.f32	s6, s15
 8021a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a82:	9320      	str	r3, [sp, #128]	@ 0x80
 8021a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021a86:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021a88:	3b01      	subs	r3, #1
 8021a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8021a8c:	bf08      	it	eq
 8021a8e:	4615      	moveq	r5, r2
 8021a90:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021a92:	bf18      	it	ne
 8021a94:	461d      	movne	r5, r3
 8021a96:	e6af      	b.n	80217f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021a98:	f111 0a01 	adds.w	sl, r1, #1
 8021a9c:	d486      	bmi.n	80219ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021a9e:	45d6      	cmp	lr, sl
 8021aa0:	db84      	blt.n	80219ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021aa2:	f110 0a01 	adds.w	sl, r0, #1
 8021aa6:	d481      	bmi.n	80219ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021aa8:	4553      	cmp	r3, sl
 8021aaa:	f6ff af7f 	blt.w	80219ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021aae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021ab0:	b21b      	sxth	r3, r3
 8021ab2:	9101      	str	r1, [sp, #4]
 8021ab4:	4641      	mov	r1, r8
 8021ab6:	9300      	str	r3, [sp, #0]
 8021ab8:	fa0f f38e 	sxth.w	r3, lr
 8021abc:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8021ac0:	e9cd c704 	strd	ip, r7, [sp, #16]
 8021ac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021ac6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021ac8:	f7ff fdb2 	bl	8021630 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8021acc:	e76e      	b.n	80219ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021ace:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021ad0:	1430      	asrs	r0, r6, #16
 8021ad2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021ad4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8021ad8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021adc:	1423      	asrs	r3, r4, #16
 8021ade:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021ae2:	fb01 3000 	mla	r0, r1, r0, r3
 8021ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ae8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8021aec:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8021af0:	8858      	ldrh	r0, [r3, #2]
 8021af2:	f1be 0f00 	cmp.w	lr, #0
 8021af6:	d00b      	beq.n	8021b10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8021af8:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8021afc:	3901      	subs	r1, #1
 8021afe:	0049      	lsls	r1, r1, #1
 8021b00:	3102      	adds	r1, #2
 8021b02:	eb03 0b01 	add.w	fp, r3, r1
 8021b06:	5a5b      	ldrh	r3, [r3, r1]
 8021b08:	930e      	str	r3, [sp, #56]	@ 0x38
 8021b0a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021b0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021b10:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8021b14:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8021b18:	fb12 f30e 	smulbb	r3, r2, lr
 8021b1c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021b20:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8021b24:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021b28:	10db      	asrs	r3, r3, #3
 8021b2a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021b2e:	ea41 010c 	orr.w	r1, r1, ip
 8021b32:	f1ce 0c10 	rsb	ip, lr, #16
 8021b36:	ea4b 0000 	orr.w	r0, fp, r0
 8021b3a:	9f08      	ldr	r7, [sp, #32]
 8021b3c:	ebac 0c02 	sub.w	ip, ip, r2
 8021b40:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021b44:	f108 38ff 	add.w	r8, r8, #4294967295
 8021b48:	4350      	muls	r0, r2
 8021b4a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8021b4e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021b50:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021b54:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021b56:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8021b5a:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 8021b5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021b60:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021b64:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021b68:	0412      	lsls	r2, r2, #16
 8021b6a:	ea4b 0101 	orr.w	r1, fp, r1
 8021b6e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021b72:	fb03 c101 	mla	r1, r3, r1, ip
 8021b76:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8021b7a:	4302      	orrs	r2, r0
 8021b7c:	fb03 1202 	mla	r2, r3, r2, r1
 8021b80:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8021b84:	0952      	lsrs	r2, r2, #5
 8021b86:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8021b8a:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8021b8e:	f8b9 2000 	ldrh.w	r2, [r9]
 8021b92:	ea4b 0303 	orr.w	r3, fp, r3
 8021b96:	1211      	asrs	r1, r2, #8
 8021b98:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8021b9c:	b29b      	uxth	r3, r3
 8021b9e:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8021ba2:	00d2      	lsls	r2, r2, #3
 8021ba4:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8021ba8:	fb11 f107 	smulbb	r1, r1, r7
 8021bac:	1218      	asrs	r0, r3, #8
 8021bae:	fb1c fc07 	smulbb	ip, ip, r7
 8021bb2:	b2d2      	uxtb	r2, r2
 8021bb4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8021bb8:	fb12 f207 	smulbb	r2, r2, r7
 8021bbc:	fb00 100a 	mla	r0, r0, sl, r1
 8021bc0:	10d9      	asrs	r1, r3, #3
 8021bc2:	00db      	lsls	r3, r3, #3
 8021bc4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021bc8:	b280      	uxth	r0, r0
 8021bca:	b2db      	uxtb	r3, r3
 8021bcc:	fb01 c10a 	mla	r1, r1, sl, ip
 8021bd0:	fb03 230a 	mla	r3, r3, sl, r2
 8021bd4:	1c42      	adds	r2, r0, #1
 8021bd6:	b289      	uxth	r1, r1
 8021bd8:	b29b      	uxth	r3, r3
 8021bda:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021bde:	f101 0c01 	add.w	ip, r1, #1
 8021be2:	1c5a      	adds	r2, r3, #1
 8021be4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021be8:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8021bec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021bf0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021bf2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021bf6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021bfa:	441c      	add	r4, r3
 8021bfc:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8021c00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021c02:	4310      	orrs	r0, r2
 8021c04:	441e      	add	r6, r3
 8021c06:	ea40 000c 	orr.w	r0, r0, ip
 8021c0a:	f829 0b02 	strh.w	r0, [r9], #2
 8021c0e:	e6fa      	b.n	8021a06 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8021c10:	b013      	add	sp, #76	@ 0x4c
 8021c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021c16 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8021c16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021c1a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8021c1e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8021c22:	fb0e 4703 	mla	r7, lr, r3, r4
 8021c26:	f1be 0f00 	cmp.w	lr, #0
 8021c2a:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8021c2e:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8021c32:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8021c36:	8808      	ldrh	r0, [r1, #0]
 8021c38:	db60      	blt.n	8021cfc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8021c3a:	45f1      	cmp	r9, lr
 8021c3c:	dd5e      	ble.n	8021cfc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8021c3e:	2c00      	cmp	r4, #0
 8021c40:	db5a      	blt.n	8021cf8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8021c42:	42a3      	cmp	r3, r4
 8021c44:	dd58      	ble.n	8021cf8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8021c46:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8021c4a:	1c62      	adds	r2, r4, #1
 8021c4c:	d459      	bmi.n	8021d02 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8021c4e:	4293      	cmp	r3, r2
 8021c50:	dd57      	ble.n	8021d02 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8021c52:	2d00      	cmp	r5, #0
 8021c54:	d055      	beq.n	8021d02 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8021c56:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8021c5a:	f11e 0e01 	adds.w	lr, lr, #1
 8021c5e:	d454      	bmi.n	8021d0a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8021c60:	45f1      	cmp	r9, lr
 8021c62:	dd52      	ble.n	8021d0a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8021c64:	2e00      	cmp	r6, #0
 8021c66:	d050      	beq.n	8021d0a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8021c68:	2c00      	cmp	r4, #0
 8021c6a:	db4c      	blt.n	8021d06 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8021c6c:	42a3      	cmp	r3, r4
 8021c6e:	dd4a      	ble.n	8021d06 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8021c70:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8021c74:	3401      	adds	r4, #1
 8021c76:	d405      	bmi.n	8021c84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8021c78:	42a3      	cmp	r3, r4
 8021c7a:	dd03      	ble.n	8021c84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8021c7c:	b115      	cbz	r5, 8021c84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8021c7e:	3301      	adds	r3, #1
 8021c80:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8021c84:	fb15 f406 	smulbb	r4, r5, r6
 8021c88:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8021c8c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8021c90:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8021c94:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8021c98:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8021c9c:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8021ca0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8021ca4:	ea43 0c0c 	orr.w	ip, r3, ip
 8021ca8:	f1c6 0310 	rsb	r3, r6, #16
 8021cac:	ea4e 0707 	orr.w	r7, lr, r7
 8021cb0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8021cb4:	1b5b      	subs	r3, r3, r5
 8021cb6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8021cba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021cbe:	437d      	muls	r5, r7
 8021cc0:	fb03 5c0c 	mla	ip, r3, ip, r5
 8021cc4:	0403      	lsls	r3, r0, #16
 8021cc6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021cca:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8021cce:	4318      	orrs	r0, r3
 8021cd0:	0413      	lsls	r3, r2, #16
 8021cd2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021cd6:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8021cda:	fb04 c000 	mla	r0, r4, r0, ip
 8021cde:	4313      	orrs	r3, r2
 8021ce0:	fb06 0003 	mla	r0, r6, r3, r0
 8021ce4:	0d43      	lsrs	r3, r0, #21
 8021ce6:	0940      	lsrs	r0, r0, #5
 8021ce8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021cec:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021cf0:	4318      	orrs	r0, r3
 8021cf2:	8008      	strh	r0, [r1, #0]
 8021cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021cf8:	4684      	mov	ip, r0
 8021cfa:	e7a6      	b.n	8021c4a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8021cfc:	4607      	mov	r7, r0
 8021cfe:	4684      	mov	ip, r0
 8021d00:	e7ab      	b.n	8021c5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8021d02:	4607      	mov	r7, r0
 8021d04:	e7a9      	b.n	8021c5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8021d06:	4602      	mov	r2, r0
 8021d08:	e7b4      	b.n	8021c74 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8021d0a:	4602      	mov	r2, r0
 8021d0c:	e7ba      	b.n	8021c84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08021d0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d12:	b08f      	sub	sp, #60	@ 0x3c
 8021d14:	461d      	mov	r5, r3
 8021d16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021d18:	9107      	str	r1, [sp, #28]
 8021d1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8021d1c:	6859      	ldr	r1, [r3, #4]
 8021d1e:	681b      	ldr	r3, [r3, #0]
 8021d20:	900d      	str	r0, [sp, #52]	@ 0x34
 8021d22:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 8021d26:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8021d2a:	fb01 2707 	mla	r7, r1, r7, r2
 8021d2e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8021d32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021d34:	f8d3 8000 	ldr.w	r8, [r3]
 8021d38:	9b07      	ldr	r3, [sp, #28]
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	dc03      	bgt.n	8021d46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021d3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	f340 8182 	ble.w	802204a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8021d46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021d48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021d50:	1e48      	subs	r0, r1, #1
 8021d52:	f102 3cff 	add.w	ip, r2, #4294967295
 8021d56:	2d00      	cmp	r5, #0
 8021d58:	f340 809b 	ble.w	8021e92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8021d5c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021d60:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021d64:	d406      	bmi.n	8021d74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021d66:	4586      	cmp	lr, r0
 8021d68:	da04      	bge.n	8021d74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021d6a:	2b00      	cmp	r3, #0
 8021d6c:	db02      	blt.n	8021d74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021d6e:	4563      	cmp	r3, ip
 8021d70:	f2c0 8090 	blt.w	8021e94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021d74:	f11e 0e01 	adds.w	lr, lr, #1
 8021d78:	f100 8084 	bmi.w	8021e84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021d7c:	4571      	cmp	r1, lr
 8021d7e:	f2c0 8081 	blt.w	8021e84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021d82:	3301      	adds	r3, #1
 8021d84:	d47e      	bmi.n	8021e84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021d86:	429a      	cmp	r2, r3
 8021d88:	db7c      	blt.n	8021e84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021d8a:	46aa      	mov	sl, r5
 8021d8c:	46b9      	mov	r9, r7
 8021d8e:	f1ba 0f00 	cmp.w	sl, #0
 8021d92:	f340 8099 	ble.w	8021ec8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021d96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021d98:	1421      	asrs	r1, r4, #16
 8021d9a:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021d9e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021da2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021da6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021daa:	f100 80d1 	bmi.w	8021f50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021dae:	f10e 3bff 	add.w	fp, lr, #4294967295
 8021db2:	4559      	cmp	r1, fp
 8021db4:	f280 80cc 	bge.w	8021f50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021db8:	2800      	cmp	r0, #0
 8021dba:	f2c0 80c9 	blt.w	8021f50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021dbe:	f103 3bff 	add.w	fp, r3, #4294967295
 8021dc2:	4558      	cmp	r0, fp
 8021dc4:	f280 80c4 	bge.w	8021f50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021dc8:	fa0f fe8e 	sxth.w	lr, lr
 8021dcc:	fb00 110e 	mla	r1, r0, lr, r1
 8021dd0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8021dd4:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8021dd8:	8841      	ldrh	r1, [r0, #2]
 8021dda:	f1bc 0f00 	cmp.w	ip, #0
 8021dde:	d00b      	beq.n	8021df8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8021de0:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8021de4:	3b01      	subs	r3, #1
 8021de6:	005b      	lsls	r3, r3, #1
 8021de8:	3302      	adds	r3, #2
 8021dea:	eb00 0e03 	add.w	lr, r0, r3
 8021dee:	5ac3      	ldrh	r3, [r0, r3]
 8021df0:	9308      	str	r3, [sp, #32]
 8021df2:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8021df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8021df8:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8021dfc:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8021e00:	fb12 f30c 	smulbb	r3, r2, ip
 8021e04:	f1cc 0e10 	rsb	lr, ip, #16
 8021e08:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8021e0c:	10db      	asrs	r3, r3, #3
 8021e0e:	ebae 0e02 	sub.w	lr, lr, r2
 8021e12:	ea40 000b 	orr.w	r0, r0, fp
 8021e16:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021e1a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8021e1e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021e22:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021e26:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8021e2a:	ea4b 0101 	orr.w	r1, fp, r1
 8021e2e:	4351      	muls	r1, r2
 8021e30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021e32:	fb0e 1e00 	mla	lr, lr, r0, r1
 8021e36:	0410      	lsls	r0, r2, #16
 8021e38:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021e3c:	9908      	ldr	r1, [sp, #32]
 8021e3e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8021e42:	4310      	orrs	r0, r2
 8021e44:	9a08      	ldr	r2, [sp, #32]
 8021e46:	0412      	lsls	r2, r2, #16
 8021e48:	fb03 e000 	mla	r0, r3, r0, lr
 8021e4c:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8021e50:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8021e54:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021e58:	ea42 020e 	orr.w	r2, r2, lr
 8021e5c:	fb03 0302 	mla	r3, r3, r2, r0
 8021e60:	0d5a      	lsrs	r2, r3, #21
 8021e62:	095b      	lsrs	r3, r3, #5
 8021e64:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021e68:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021e6c:	4313      	orrs	r3, r2
 8021e6e:	f8a9 3000 	strh.w	r3, [r9]
 8021e72:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021e74:	f109 0902 	add.w	r9, r9, #2
 8021e78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021e7c:	441c      	add	r4, r3
 8021e7e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021e80:	441e      	add	r6, r3
 8021e82:	e784      	b.n	8021d8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021e84:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021e86:	3d01      	subs	r5, #1
 8021e88:	3702      	adds	r7, #2
 8021e8a:	441c      	add	r4, r3
 8021e8c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021e8e:	441e      	add	r6, r3
 8021e90:	e761      	b.n	8021d56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021e92:	d01d      	beq.n	8021ed0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021e94:	1e6b      	subs	r3, r5, #1
 8021e96:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8021e98:	fb00 4003 	mla	r0, r0, r3, r4
 8021e9c:	1400      	asrs	r0, r0, #16
 8021e9e:	f53f af74 	bmi.w	8021d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021ea2:	3901      	subs	r1, #1
 8021ea4:	4288      	cmp	r0, r1
 8021ea6:	f6bf af70 	bge.w	8021d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021eaa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8021eac:	fb01 6303 	mla	r3, r1, r3, r6
 8021eb0:	141b      	asrs	r3, r3, #16
 8021eb2:	f53f af6a 	bmi.w	8021d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021eb6:	3a01      	subs	r2, #1
 8021eb8:	4293      	cmp	r3, r2
 8021eba:	f6bf af66 	bge.w	8021d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021ebe:	46a9      	mov	r9, r5
 8021ec0:	46ba      	mov	sl, r7
 8021ec2:	f1b9 0f00 	cmp.w	r9, #0
 8021ec6:	dc5b      	bgt.n	8021f80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8021ec8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8021ecc:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8021ed0:	9b07      	ldr	r3, [sp, #28]
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	f340 80b9 	ble.w	802204a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8021ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021edc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021ede:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021ee2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021ee6:	eef0 6a62 	vmov.f32	s13, s5
 8021eea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021eee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ef2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ef6:	ee16 4a90 	vmov	r4, s13
 8021efa:	eef0 6a43 	vmov.f32	s13, s6
 8021efe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f02:	ee16 6a90 	vmov	r6, s13
 8021f06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f1e:	ee12 2a90 	vmov	r2, s5
 8021f22:	eef0 2a47 	vmov.f32	s5, s14
 8021f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f2a:	ee13 2a10 	vmov	r2, s6
 8021f2e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021f30:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021f32:	eeb0 3a67 	vmov.f32	s6, s15
 8021f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f3a:	931c      	str	r3, [sp, #112]	@ 0x70
 8021f3c:	9b07      	ldr	r3, [sp, #28]
 8021f3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021f40:	3b01      	subs	r3, #1
 8021f42:	9307      	str	r3, [sp, #28]
 8021f44:	bf08      	it	eq
 8021f46:	4615      	moveq	r5, r2
 8021f48:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021f4a:	bf18      	it	ne
 8021f4c:	461d      	movne	r5, r3
 8021f4e:	e6f3      	b.n	8021d38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021f50:	f111 0b01 	adds.w	fp, r1, #1
 8021f54:	d48d      	bmi.n	8021e72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021f56:	45de      	cmp	lr, fp
 8021f58:	db8b      	blt.n	8021e72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021f5a:	f110 0b01 	adds.w	fp, r0, #1
 8021f5e:	d488      	bmi.n	8021e72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021f60:	455b      	cmp	r3, fp
 8021f62:	db86      	blt.n	8021e72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021f64:	b21b      	sxth	r3, r3
 8021f66:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8021f6a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8021f6e:	9300      	str	r3, [sp, #0]
 8021f70:	4642      	mov	r2, r8
 8021f72:	fa0f f38e 	sxth.w	r3, lr
 8021f76:	4649      	mov	r1, r9
 8021f78:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021f7a:	f7ff fe4c 	bl	8021c16 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8021f7e:	e778      	b.n	8021e72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021f80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021f82:	1420      	asrs	r0, r4, #16
 8021f84:	1431      	asrs	r1, r6, #16
 8021f86:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8021f8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021f8e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021f92:	fb03 0101 	mla	r1, r3, r1, r0
 8021f96:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8021f9a:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8021f9e:	8841      	ldrh	r1, [r0, #2]
 8021fa0:	f1be 0f00 	cmp.w	lr, #0
 8021fa4:	d00b      	beq.n	8021fbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021fa6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8021faa:	3b01      	subs	r3, #1
 8021fac:	005b      	lsls	r3, r3, #1
 8021fae:	3302      	adds	r3, #2
 8021fb0:	eb00 0b03 	add.w	fp, r0, r3
 8021fb4:	5ac3      	ldrh	r3, [r0, r3]
 8021fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8021fb8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021fbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021fbe:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8021fc2:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8021fc6:	fb12 f30e 	smulbb	r3, r2, lr
 8021fca:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021fce:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8021fd2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8021fd6:	10db      	asrs	r3, r3, #3
 8021fd8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021fdc:	ea40 000c 	orr.w	r0, r0, ip
 8021fe0:	f1ce 0c10 	rsb	ip, lr, #16
 8021fe4:	ea4b 0101 	orr.w	r1, fp, r1
 8021fe8:	f109 39ff 	add.w	r9, r9, #4294967295
 8021fec:	ebac 0c02 	sub.w	ip, ip, r2
 8021ff0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021ff4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8021ff8:	4351      	muls	r1, r2
 8021ffa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021ffc:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022000:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022002:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022006:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 802200a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802200c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8022010:	0412      	lsls	r2, r2, #16
 8022012:	ea4b 0000 	orr.w	r0, fp, r0
 8022016:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 802201a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802201e:	fb03 c000 	mla	r0, r3, r0, ip
 8022022:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022026:	ea42 0b0b 	orr.w	fp, r2, fp
 802202a:	fb03 000b 	mla	r0, r3, fp, r0
 802202e:	0d43      	lsrs	r3, r0, #21
 8022030:	0940      	lsrs	r0, r0, #5
 8022032:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022036:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802203a:	4318      	orrs	r0, r3
 802203c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802203e:	441c      	add	r4, r3
 8022040:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022042:	f82a 0b02 	strh.w	r0, [sl], #2
 8022046:	441e      	add	r6, r3
 8022048:	e73b      	b.n	8021ec2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802204a:	b00f      	add	sp, #60	@ 0x3c
 802204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022050 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8022050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022054:	b085      	sub	sp, #20
 8022056:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 802205a:	9102      	str	r1, [sp, #8]
 802205c:	2c00      	cmp	r4, #0
 802205e:	fb04 7103 	mla	r1, r4, r3, r7
 8022062:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8022066:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 802206a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802206e:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8022072:	f2c0 811b 	blt.w	80222ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022076:	45a6      	cmp	lr, r4
 8022078:	f340 8118 	ble.w	80222ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802207c:	2f00      	cmp	r7, #0
 802207e:	f2c0 8113 	blt.w	80222a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022082:	42bb      	cmp	r3, r7
 8022084:	f340 8110 	ble.w	80222a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022088:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802208c:	1c7a      	adds	r2, r7, #1
 802208e:	f100 8110 	bmi.w	80222b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022092:	4293      	cmp	r3, r2
 8022094:	f340 810d 	ble.w	80222b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022098:	2e00      	cmp	r6, #0
 802209a:	f000 810c 	beq.w	80222b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802209e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80220a2:	3401      	adds	r4, #1
 80220a4:	f100 810b 	bmi.w	80222be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80220a8:	45a6      	cmp	lr, r4
 80220aa:	f340 8108 	ble.w	80222be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80220ae:	2800      	cmp	r0, #0
 80220b0:	f000 8108 	beq.w	80222c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80220b4:	2f00      	cmp	r7, #0
 80220b6:	f2c0 8100 	blt.w	80222ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80220ba:	42bb      	cmp	r3, r7
 80220bc:	f340 80fd 	ble.w	80222ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80220c0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80220c4:	3701      	adds	r7, #1
 80220c6:	f100 8100 	bmi.w	80222ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80220ca:	42bb      	cmp	r3, r7
 80220cc:	f340 80fd 	ble.w	80222ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80220d0:	2e00      	cmp	r6, #0
 80220d2:	f000 80fc 	beq.w	80222ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80220d6:	3301      	adds	r3, #1
 80220d8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80220dc:	b2b6      	uxth	r6, r6
 80220de:	b280      	uxth	r0, r0
 80220e0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80220e4:	fb00 fe06 	mul.w	lr, r0, r6
 80220e8:	0136      	lsls	r6, r6, #4
 80220ea:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80220ee:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80220f2:	eba6 070e 	sub.w	r7, r6, lr
 80220f6:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80220fa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80220fe:	b280      	uxth	r0, r0
 8022100:	b2bf      	uxth	r7, r7
 8022102:	1a1b      	subs	r3, r3, r0
 8022104:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022108:	fb0a f607 	mul.w	r6, sl, r7
 802210c:	b29b      	uxth	r3, r3
 802210e:	fb0b 6603 	mla	r6, fp, r3, r6
 8022112:	fb00 6609 	mla	r6, r0, r9, r6
 8022116:	fb0e 6608 	mla	r6, lr, r8, r6
 802211a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802211e:	9600      	str	r6, [sp, #0]
 8022120:	2e00      	cmp	r6, #0
 8022122:	f000 80be 	beq.w	80222a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8022126:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802212a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802212e:	9e02      	ldr	r6, [sp, #8]
 8022130:	fb0b fc0c 	mul.w	ip, fp, ip
 8022134:	fb0b f505 	mul.w	r5, fp, r5
 8022138:	8836      	ldrh	r6, [r6, #0]
 802213a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802213e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022142:	9501      	str	r5, [sp, #4]
 8022144:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8022148:	44dc      	add	ip, fp
 802214a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802214e:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8022152:	9503      	str	r5, [sp, #12]
 8022154:	9d01      	ldr	r5, [sp, #4]
 8022156:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802215a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802215e:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8022162:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8022166:	fb0a fc0c 	mul.w	ip, sl, ip
 802216a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802216e:	fb0a fa01 	mul.w	sl, sl, r1
 8022172:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022176:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802217a:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802217e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8022182:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8022186:	4465      	add	r5, ip
 8022188:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802218c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8022190:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022194:	fb09 fc0c 	mul.w	ip, r9, ip
 8022198:	0a2d      	lsrs	r5, r5, #8
 802219a:	fb09 f904 	mul.w	r9, r9, r4
 802219e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80221a2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80221a6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80221aa:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80221ae:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80221b2:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80221b6:	437d      	muls	r5, r7
 80221b8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80221bc:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80221c0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80221c4:	4461      	add	r1, ip
 80221c6:	fb08 f404 	mul.w	r4, r8, r4
 80221ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80221ce:	fb08 f802 	mul.w	r8, r8, r2
 80221d2:	0a09      	lsrs	r1, r1, #8
 80221d4:	0a22      	lsrs	r2, r4, #8
 80221d6:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80221da:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80221de:	fb07 f70a 	mul.w	r7, r7, sl
 80221e2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80221e6:	4414      	add	r4, r2
 80221e8:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80221ec:	0a24      	lsrs	r4, r4, #8
 80221ee:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80221f2:	9a03      	ldr	r2, [sp, #12]
 80221f4:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80221f8:	fb02 5503 	mla	r5, r2, r3, r5
 80221fc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022200:	9a00      	ldr	r2, [sp, #0]
 8022202:	fb04 540e 	mla	r4, r4, lr, r5
 8022206:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802220a:	1235      	asrs	r5, r6, #8
 802220c:	fb01 4100 	mla	r1, r1, r0, r4
 8022210:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022214:	0a09      	lsrs	r1, r1, #8
 8022216:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802221a:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802221e:	fb03 7101 	mla	r1, r3, r1, r7
 8022222:	fb0e 1e08 	mla	lr, lr, r8, r1
 8022226:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802222a:	fb00 e101 	mla	r1, r0, r1, lr
 802222e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8022232:	b287      	uxth	r7, r0
 8022234:	0a09      	lsrs	r1, r1, #8
 8022236:	437a      	muls	r2, r7
 8022238:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802223c:	1c53      	adds	r3, r2, #1
 802223e:	4321      	orrs	r1, r4
 8022240:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022244:	0c0a      	lsrs	r2, r1, #16
 8022246:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802224a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802224e:	b2c8      	uxtb	r0, r1
 8022250:	fb12 f207 	smulbb	r2, r2, r7
 8022254:	fb14 f407 	smulbb	r4, r4, r7
 8022258:	b2db      	uxtb	r3, r3
 802225a:	fb10 f007 	smulbb	r0, r0, r7
 802225e:	fb05 2503 	mla	r5, r5, r3, r2
 8022262:	10f2      	asrs	r2, r6, #3
 8022264:	00f6      	lsls	r6, r6, #3
 8022266:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802226a:	b2ad      	uxth	r5, r5
 802226c:	b2f6      	uxtb	r6, r6
 802226e:	fb02 4203 	mla	r2, r2, r3, r4
 8022272:	fb06 0303 	mla	r3, r6, r3, r0
 8022276:	b294      	uxth	r4, r2
 8022278:	b299      	uxth	r1, r3
 802227a:	1c6b      	adds	r3, r5, #1
 802227c:	1c62      	adds	r2, r4, #1
 802227e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022282:	1c4b      	adds	r3, r1, #1
 8022284:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022288:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802228c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8022290:	0952      	lsrs	r2, r2, #5
 8022292:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022296:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802229a:	432b      	orrs	r3, r5
 802229c:	4313      	orrs	r3, r2
 802229e:	9a02      	ldr	r2, [sp, #8]
 80222a0:	8013      	strh	r3, [r2, #0]
 80222a2:	b005      	add	sp, #20
 80222a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222a8:	2500      	movs	r5, #0
 80222aa:	e6ef      	b.n	802208c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80222ac:	2100      	movs	r1, #0
 80222ae:	460d      	mov	r5, r1
 80222b0:	e6f7      	b.n	80220a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80222b2:	2100      	movs	r1, #0
 80222b4:	e6f5      	b.n	80220a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80222b6:	4631      	mov	r1, r6
 80222b8:	e6f3      	b.n	80220a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80222ba:	2400      	movs	r4, #0
 80222bc:	e702      	b.n	80220c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80222be:	2200      	movs	r2, #0
 80222c0:	4614      	mov	r4, r2
 80222c2:	e70b      	b.n	80220dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80222c4:	4602      	mov	r2, r0
 80222c6:	4604      	mov	r4, r0
 80222c8:	e708      	b.n	80220dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80222ca:	2200      	movs	r2, #0
 80222cc:	e706      	b.n	80220dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80222ce:	4632      	mov	r2, r6
 80222d0:	e704      	b.n	80220dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080222d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80222d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222d6:	b09d      	sub	sp, #116	@ 0x74
 80222d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80222da:	9307      	str	r3, [sp, #28]
 80222dc:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80222de:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 80222e2:	901b      	str	r0, [sp, #108]	@ 0x6c
 80222e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80222e6:	6850      	ldr	r0, [r2, #4]
 80222e8:	9117      	str	r1, [sp, #92]	@ 0x5c
 80222ea:	6812      	ldr	r2, [r2, #0]
 80222ec:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 80222f0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 80222f4:	fb00 1303 	mla	r3, r0, r3, r1
 80222f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80222fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80222fe:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022300:	681b      	ldr	r3, [r3, #0]
 8022302:	9310      	str	r3, [sp, #64]	@ 0x40
 8022304:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8022308:	930b      	str	r3, [sp, #44]	@ 0x2c
 802230a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802230c:	2b00      	cmp	r3, #0
 802230e:	dc03      	bgt.n	8022318 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8022310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022312:	2b00      	cmp	r3, #0
 8022314:	f340 8375 	ble.w	8022a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8022318:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802231a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802231e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022322:	1e48      	subs	r0, r1, #1
 8022324:	1e57      	subs	r7, r2, #1
 8022326:	9b07      	ldr	r3, [sp, #28]
 8022328:	2b00      	cmp	r3, #0
 802232a:	f340 818e 	ble.w	802264a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802232e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022332:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022336:	d406      	bmi.n	8022346 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022338:	4584      	cmp	ip, r0
 802233a:	da04      	bge.n	8022346 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802233c:	2b00      	cmp	r3, #0
 802233e:	db02      	blt.n	8022346 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022340:	42bb      	cmp	r3, r7
 8022342:	f2c0 8183 	blt.w	802264c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022346:	f11c 0c01 	adds.w	ip, ip, #1
 802234a:	f100 8173 	bmi.w	8022634 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802234e:	4561      	cmp	r1, ip
 8022350:	f2c0 8170 	blt.w	8022634 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022354:	3301      	adds	r3, #1
 8022356:	f100 816d 	bmi.w	8022634 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802235a:	429a      	cmp	r2, r3
 802235c:	f2c0 816a 	blt.w	8022634 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022360:	9b07      	ldr	r3, [sp, #28]
 8022362:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022364:	9318      	str	r3, [sp, #96]	@ 0x60
 8022366:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022368:	2b00      	cmp	r3, #0
 802236a:	f340 818c 	ble.w	8022686 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802236e:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8022370:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022374:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022376:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802237a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802237e:	1422      	asrs	r2, r4, #16
 8022380:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022384:	689b      	ldr	r3, [r3, #8]
 8022386:	f100 81cd 	bmi.w	8022724 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802238a:	f103 38ff 	add.w	r8, r3, #4294967295
 802238e:	4542      	cmp	r2, r8
 8022390:	f280 81c8 	bge.w	8022724 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022394:	f1bc 0f00 	cmp.w	ip, #0
 8022398:	f2c0 81c4 	blt.w	8022724 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802239c:	f10e 38ff 	add.w	r8, lr, #4294967295
 80223a0:	45c4      	cmp	ip, r8
 80223a2:	f280 81bf 	bge.w	8022724 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80223a6:	b21b      	sxth	r3, r3
 80223a8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80223aa:	fb0c 2203 	mla	r2, ip, r3, r2
 80223ae:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80223b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80223b6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80223ba:	2800      	cmp	r0, #0
 80223bc:	f000 81a9 	beq.w	8022712 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80223c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80223c4:	950c      	str	r5, [sp, #48]	@ 0x30
 80223c6:	0e2d      	lsrs	r5, r5, #24
 80223c8:	9513      	str	r5, [sp, #76]	@ 0x4c
 80223ca:	b181      	cbz	r1, 80223ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80223cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80223d0:	3b01      	subs	r3, #1
 80223d2:	009b      	lsls	r3, r3, #2
 80223d4:	3304      	adds	r3, #4
 80223d6:	eb08 0c03 	add.w	ip, r8, r3
 80223da:	f858 3003 	ldr.w	r3, [r8, r3]
 80223de:	9308      	str	r3, [sp, #32]
 80223e0:	0e1b      	lsrs	r3, r3, #24
 80223e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80223e4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80223e8:	930d      	str	r3, [sp, #52]	@ 0x34
 80223ea:	0e1b      	lsrs	r3, r3, #24
 80223ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80223ee:	b280      	uxth	r0, r0
 80223f0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80223f2:	b289      	uxth	r1, r1
 80223f4:	fb00 f901 	mul.w	r9, r0, r1
 80223f8:	0100      	lsls	r0, r0, #4
 80223fa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80223fe:	eba0 0809 	sub.w	r8, r0, r9
 8022402:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8022406:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022408:	b289      	uxth	r1, r1
 802240a:	fa1f f888 	uxth.w	r8, r8
 802240e:	1a5b      	subs	r3, r3, r1
 8022410:	fb08 f000 	mul.w	r0, r8, r0
 8022414:	b29b      	uxth	r3, r3
 8022416:	fb03 000e 	mla	r0, r3, lr, r0
 802241a:	fb01 0005 	mla	r0, r1, r5, r0
 802241e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8022420:	fb09 0005 	mla	r0, r9, r5, r0
 8022424:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022428:	2800      	cmp	r0, #0
 802242a:	f000 80fa 	beq.w	8022622 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802242e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022432:	d01b      	beq.n	802246c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8022434:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8022438:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802243c:	fb0e fa0a 	mul.w	sl, lr, sl
 8022440:	fb0e fe02 	mul.w	lr, lr, r2
 8022444:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022448:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802244c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022450:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022454:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022458:	4452      	add	r2, sl
 802245a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802245e:	0a12      	lsrs	r2, r2, #8
 8022460:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022464:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022468:	ea42 020c 	orr.w	r2, r2, ip
 802246c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802246e:	2dff      	cmp	r5, #255	@ 0xff
 8022470:	d021      	beq.n	80224b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8022472:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022474:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8022478:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802247a:	fb05 fb0b 	mul.w	fp, r5, fp
 802247e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022480:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8022484:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8022486:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802248a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802248e:	fb05 fa0a 	mul.w	sl, r5, sl
 8022492:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022496:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802249a:	44de      	add	lr, fp
 802249c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80224a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80224a8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80224ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80224b0:	ea4e 050a 	orr.w	r5, lr, sl
 80224b4:	950c      	str	r5, [sp, #48]	@ 0x30
 80224b6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80224b8:	2dff      	cmp	r5, #255	@ 0xff
 80224ba:	d021      	beq.n	8022500 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80224bc:	9d08      	ldr	r5, [sp, #32]
 80224be:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80224c2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80224c4:	fb05 fb0b 	mul.w	fp, r5, fp
 80224c8:	9d08      	ldr	r5, [sp, #32]
 80224ca:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80224ce:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80224d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80224d4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80224d8:	fb05 fa0a 	mul.w	sl, r5, sl
 80224dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80224e0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80224e4:	44de      	add	lr, fp
 80224e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80224ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80224f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80224f6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80224fa:	ea4e 050a 	orr.w	r5, lr, sl
 80224fe:	9508      	str	r5, [sp, #32]
 8022500:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8022502:	2dff      	cmp	r5, #255	@ 0xff
 8022504:	d021      	beq.n	802254a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8022506:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022508:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802250c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802250e:	fb05 fb0b 	mul.w	fp, r5, fp
 8022512:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022514:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8022518:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802251a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802251e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022522:	fb05 fa0a 	mul.w	sl, r5, sl
 8022526:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802252a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802252e:	44de      	add	lr, fp
 8022530:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022534:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022538:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802253c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022540:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022544:	ea4e 050a 	orr.w	r5, lr, sl
 8022548:	950d      	str	r5, [sp, #52]	@ 0x34
 802254a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802254c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8022550:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022554:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8022558:	9d08      	ldr	r5, [sp, #32]
 802255a:	fb08 fc0c 	mul.w	ip, r8, ip
 802255e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8022562:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8022566:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022568:	fb01 cc0e 	mla	ip, r1, lr, ip
 802256c:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8022570:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022572:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022576:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802257a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802257c:	fb08 f80e 	mul.w	r8, r8, lr
 8022580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022584:	fb03 8202 	mla	r2, r3, r2, r8
 8022588:	9b08      	ldr	r3, [sp, #32]
 802258a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802258e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8022592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022594:	fb01 220a 	mla	r2, r1, sl, r2
 8022598:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 802259c:	883b      	ldrh	r3, [r7, #0]
 802259e:	fb09 2901 	mla	r9, r9, r1, r2
 80225a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80225a4:	1219      	asrs	r1, r3, #8
 80225a6:	4342      	muls	r2, r0
 80225a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80225ac:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80225b0:	1c50      	adds	r0, r2, #1
 80225b2:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80225b6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80225ba:	ea4c 0c09 	orr.w	ip, ip, r9
 80225be:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80225c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80225c6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80225ca:	fa5f fc8c 	uxtb.w	ip, ip
 80225ce:	fb12 f205 	smulbb	r2, r2, r5
 80225d2:	b2c0      	uxtb	r0, r0
 80225d4:	fb1c fc05 	smulbb	ip, ip, r5
 80225d8:	fb01 2100 	mla	r1, r1, r0, r2
 80225dc:	10da      	asrs	r2, r3, #3
 80225de:	fb1e fe05 	smulbb	lr, lr, r5
 80225e2:	00db      	lsls	r3, r3, #3
 80225e4:	b289      	uxth	r1, r1
 80225e6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80225ea:	b2db      	uxtb	r3, r3
 80225ec:	fb02 e200 	mla	r2, r2, r0, lr
 80225f0:	fb03 c300 	mla	r3, r3, r0, ip
 80225f4:	b292      	uxth	r2, r2
 80225f6:	fa1f fc83 	uxth.w	ip, r3
 80225fa:	1c4b      	adds	r3, r1, #1
 80225fc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022600:	f10c 0301 	add.w	r3, ip, #1
 8022604:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8022608:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802260c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022610:	430b      	orrs	r3, r1
 8022612:	1c51      	adds	r1, r2, #1
 8022614:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022618:	0952      	lsrs	r2, r2, #5
 802261a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802261e:	4313      	orrs	r3, r2
 8022620:	803b      	strh	r3, [r7, #0]
 8022622:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8022624:	3702      	adds	r7, #2
 8022626:	441c      	add	r4, r3
 8022628:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802262a:	441e      	add	r6, r3
 802262c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802262e:	3b01      	subs	r3, #1
 8022630:	9318      	str	r3, [sp, #96]	@ 0x60
 8022632:	e698      	b.n	8022366 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022634:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8022636:	441c      	add	r4, r3
 8022638:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802263a:	441e      	add	r6, r3
 802263c:	9b07      	ldr	r3, [sp, #28]
 802263e:	3b01      	subs	r3, #1
 8022640:	9307      	str	r3, [sp, #28]
 8022642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022644:	3302      	adds	r3, #2
 8022646:	930a      	str	r3, [sp, #40]	@ 0x28
 8022648:	e66d      	b.n	8022326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802264a:	d023      	beq.n	8022694 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802264c:	9b07      	ldr	r3, [sp, #28]
 802264e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8022650:	3b01      	subs	r3, #1
 8022652:	fb00 4003 	mla	r0, r0, r3, r4
 8022656:	1400      	asrs	r0, r0, #16
 8022658:	f53f ae82 	bmi.w	8022360 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802265c:	3901      	subs	r1, #1
 802265e:	4288      	cmp	r0, r1
 8022660:	f6bf ae7e 	bge.w	8022360 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022664:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8022666:	fb01 6303 	mla	r3, r1, r3, r6
 802266a:	141b      	asrs	r3, r3, #16
 802266c:	f53f ae78 	bmi.w	8022360 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022670:	3a01      	subs	r2, #1
 8022672:	4293      	cmp	r3, r2
 8022674:	f6bf ae74 	bge.w	8022360 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022678:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802267c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8022680:	f1bb 0f00 	cmp.w	fp, #0
 8022684:	dc6c      	bgt.n	8022760 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8022686:	9b07      	ldr	r3, [sp, #28]
 8022688:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802268c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802268e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022692:	930a      	str	r3, [sp, #40]	@ 0x28
 8022694:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022696:	2b00      	cmp	r3, #0
 8022698:	f340 81b3 	ble.w	8022a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802269c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80226a0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80226a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80226a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80226aa:	eef0 6a62 	vmov.f32	s13, s5
 80226ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80226b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80226b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80226ba:	ee16 4a90 	vmov	r4, s13
 80226be:	eef0 6a43 	vmov.f32	s13, s6
 80226c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80226c6:	ee16 6a90 	vmov	r6, s13
 80226ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80226ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80226d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80226d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80226da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80226de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80226e2:	ee12 2a90 	vmov	r2, s5
 80226e6:	eef0 2a47 	vmov.f32	s5, s14
 80226ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80226ee:	ee13 2a10 	vmov	r2, s6
 80226f2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80226f4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80226f6:	eeb0 3a67 	vmov.f32	s6, s15
 80226fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80226fe:	932a      	str	r3, [sp, #168]	@ 0xa8
 8022700:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022702:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022704:	3b01      	subs	r3, #1
 8022706:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022708:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802270a:	bf08      	it	eq
 802270c:	4613      	moveq	r3, r2
 802270e:	9307      	str	r3, [sp, #28]
 8022710:	e5fb      	b.n	802230a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022712:	2900      	cmp	r1, #0
 8022714:	f43f ae6b 	beq.w	80223ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022718:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802271c:	9308      	str	r3, [sp, #32]
 802271e:	0e1b      	lsrs	r3, r3, #24
 8022720:	9311      	str	r3, [sp, #68]	@ 0x44
 8022722:	e664      	b.n	80223ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022724:	f112 0801 	adds.w	r8, r2, #1
 8022728:	f53f af7b 	bmi.w	8022622 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802272c:	4543      	cmp	r3, r8
 802272e:	f6ff af78 	blt.w	8022622 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022732:	f11c 0801 	adds.w	r8, ip, #1
 8022736:	f53f af74 	bmi.w	8022622 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802273a:	45c6      	cmp	lr, r8
 802273c:	f6ff af71 	blt.w	8022622 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022740:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8022742:	b21b      	sxth	r3, r3
 8022744:	9201      	str	r2, [sp, #4]
 8022746:	fa0f f28e 	sxth.w	r2, lr
 802274a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802274e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8022752:	9200      	str	r2, [sp, #0]
 8022754:	4639      	mov	r1, r7
 8022756:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022758:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802275a:	f7ff fc79 	bl	8022050 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802275e:	e760      	b.n	8022622 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022760:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022762:	1427      	asrs	r7, r4, #16
 8022764:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022766:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802276a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802276e:	1433      	asrs	r3, r6, #16
 8022770:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022774:	fb01 7303 	mla	r3, r1, r3, r7
 8022778:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802277c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022780:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022784:	2a00      	cmp	r2, #0
 8022786:	f000 8133 	beq.w	80229f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802278a:	687d      	ldr	r5, [r7, #4]
 802278c:	950e      	str	r5, [sp, #56]	@ 0x38
 802278e:	0e2d      	lsrs	r5, r5, #24
 8022790:	9515      	str	r5, [sp, #84]	@ 0x54
 8022792:	b178      	cbz	r0, 80227b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8022794:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8022798:	3901      	subs	r1, #1
 802279a:	0089      	lsls	r1, r1, #2
 802279c:	3104      	adds	r1, #4
 802279e:	eb07 0e01 	add.w	lr, r7, r1
 80227a2:	5879      	ldr	r1, [r7, r1]
 80227a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80227a6:	0e09      	lsrs	r1, r1, #24
 80227a8:	9112      	str	r1, [sp, #72]	@ 0x48
 80227aa:	f8de 1004 	ldr.w	r1, [lr, #4]
 80227ae:	910f      	str	r1, [sp, #60]	@ 0x3c
 80227b0:	0e09      	lsrs	r1, r1, #24
 80227b2:	9116      	str	r1, [sp, #88]	@ 0x58
 80227b4:	b292      	uxth	r2, r2
 80227b6:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80227b8:	b280      	uxth	r0, r0
 80227ba:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80227bc:	fb02 f800 	mul.w	r8, r2, r0
 80227c0:	0112      	lsls	r2, r2, #4
 80227c2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80227c6:	eba2 0e08 	sub.w	lr, r2, r8
 80227ca:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80227ce:	b280      	uxth	r0, r0
 80227d0:	fa1f fe8e 	uxth.w	lr, lr
 80227d4:	1a12      	subs	r2, r2, r0
 80227d6:	fb0e f101 	mul.w	r1, lr, r1
 80227da:	b292      	uxth	r2, r2
 80227dc:	fb02 110c 	mla	r1, r2, ip, r1
 80227e0:	fb00 1105 	mla	r1, r0, r5, r1
 80227e4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80227e6:	fb08 1105 	mla	r1, r8, r5, r1
 80227ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80227ee:	2900      	cmp	r1, #0
 80227f0:	f000 80f5 	beq.w	80229de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80227f4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80227f8:	d019      	beq.n	802282e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80227fa:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80227fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022802:	fb0c fa0a 	mul.w	sl, ip, sl
 8022806:	fb0c fc03 	mul.w	ip, ip, r3
 802280a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802280e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8022812:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8022816:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802281a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802281e:	4453      	add	r3, sl
 8022820:	0a3f      	lsrs	r7, r7, #8
 8022822:	0a1b      	lsrs	r3, r3, #8
 8022824:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8022828:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802282c:	433b      	orrs	r3, r7
 802282e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8022830:	2dff      	cmp	r5, #255	@ 0xff
 8022832:	d020      	beq.n	8022876 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8022834:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022836:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802283a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802283c:	436f      	muls	r7, r5
 802283e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022840:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022844:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8022848:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802284a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802284e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022852:	fb05 fa0a 	mul.w	sl, r5, sl
 8022856:	44bc      	add	ip, r7
 8022858:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802285c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022860:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022864:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022868:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802286c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022870:	ea4c 050a 	orr.w	r5, ip, sl
 8022874:	950e      	str	r5, [sp, #56]	@ 0x38
 8022876:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022878:	2dff      	cmp	r5, #255	@ 0xff
 802287a:	d020      	beq.n	80228be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802287c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802287e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8022882:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022884:	436f      	muls	r7, r5
 8022886:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022888:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802288c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8022890:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022892:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022896:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802289a:	fb05 fa0a 	mul.w	sl, r5, sl
 802289e:	44bc      	add	ip, r7
 80228a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80228a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80228ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80228b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80228b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80228b8:	ea4c 050a 	orr.w	r5, ip, sl
 80228bc:	9509      	str	r5, [sp, #36]	@ 0x24
 80228be:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80228c0:	2dff      	cmp	r5, #255	@ 0xff
 80228c2:	d020      	beq.n	8022906 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80228c4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80228c6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80228ca:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80228cc:	436f      	muls	r7, r5
 80228ce:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80228d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80228d4:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80228d8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80228da:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80228de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80228e2:	fb05 fa0a 	mul.w	sl, r5, sl
 80228e6:	44bc      	add	ip, r7
 80228e8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80228ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80228f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80228f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80228fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022900:	ea4c 050a 	orr.w	r5, ip, sl
 8022904:	950f      	str	r5, [sp, #60]	@ 0x3c
 8022906:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022908:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802290c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022910:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8022914:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022916:	fb0e f707 	mul.w	r7, lr, r7
 802291a:	fb02 770c 	mla	r7, r2, ip, r7
 802291e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8022922:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8022924:	fb00 770c 	mla	r7, r0, ip, r7
 8022928:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802292c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802292e:	fb08 770c 	mla	r7, r8, ip, r7
 8022932:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8022936:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022938:	fb0e fe0c 	mul.w	lr, lr, ip
 802293c:	0a3f      	lsrs	r7, r7, #8
 802293e:	fb02 e303 	mla	r3, r2, r3, lr
 8022942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022944:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8022948:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802294c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802294e:	fb00 330a 	mla	r3, r0, sl, r3
 8022952:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8022956:	f8b9 0000 	ldrh.w	r0, [r9]
 802295a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802295e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022960:	1202      	asrs	r2, r0, #8
 8022962:	4359      	muls	r1, r3
 8022964:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022968:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802296c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022970:	1c4b      	adds	r3, r1, #1
 8022972:	ea47 070c 	orr.w	r7, r7, ip
 8022976:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802297a:	0c3b      	lsrs	r3, r7, #16
 802297c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022980:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8022984:	b2ff      	uxtb	r7, r7
 8022986:	fb13 f305 	smulbb	r3, r3, r5
 802298a:	b2c9      	uxtb	r1, r1
 802298c:	fb17 f705 	smulbb	r7, r7, r5
 8022990:	fb02 3201 	mla	r2, r2, r1, r3
 8022994:	10c3      	asrs	r3, r0, #3
 8022996:	fb1c fc05 	smulbb	ip, ip, r5
 802299a:	00c0      	lsls	r0, r0, #3
 802299c:	b292      	uxth	r2, r2
 802299e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80229a2:	b2c0      	uxtb	r0, r0
 80229a4:	fb03 c301 	mla	r3, r3, r1, ip
 80229a8:	fb00 7001 	mla	r0, r0, r1, r7
 80229ac:	1c51      	adds	r1, r2, #1
 80229ae:	b29b      	uxth	r3, r3
 80229b0:	b280      	uxth	r0, r0
 80229b2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80229b6:	f100 0c01 	add.w	ip, r0, #1
 80229ba:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 80229be:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80229c2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80229c6:	ea4c 0202 	orr.w	r2, ip, r2
 80229ca:	f103 0c01 	add.w	ip, r3, #1
 80229ce:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80229d2:	095b      	lsrs	r3, r3, #5
 80229d4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80229d8:	431a      	orrs	r2, r3
 80229da:	f8a9 2000 	strh.w	r2, [r9]
 80229de:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80229e0:	f109 0902 	add.w	r9, r9, #2
 80229e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80229e8:	441c      	add	r4, r3
 80229ea:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80229ec:	441e      	add	r6, r3
 80229ee:	e647      	b.n	8022680 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80229f0:	2800      	cmp	r0, #0
 80229f2:	f43f aedf 	beq.w	80227b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80229f6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80229fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80229fc:	0e09      	lsrs	r1, r1, #24
 80229fe:	9112      	str	r1, [sp, #72]	@ 0x48
 8022a00:	e6d8      	b.n	80227b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8022a02:	b01d      	add	sp, #116	@ 0x74
 8022a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a08 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8022a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a0c:	b085      	sub	sp, #20
 8022a0e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8022a12:	9102      	str	r1, [sp, #8]
 8022a14:	2c00      	cmp	r4, #0
 8022a16:	fb04 7103 	mla	r1, r4, r3, r7
 8022a1a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8022a1e:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8022a22:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8022a26:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8022a2a:	f2c0 810c 	blt.w	8022c46 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8022a2e:	45a6      	cmp	lr, r4
 8022a30:	f340 8109 	ble.w	8022c46 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8022a34:	2f00      	cmp	r7, #0
 8022a36:	f2c0 8104 	blt.w	8022c42 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8022a3a:	42bb      	cmp	r3, r7
 8022a3c:	f340 8101 	ble.w	8022c42 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8022a40:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8022a44:	1c7a      	adds	r2, r7, #1
 8022a46:	f100 8101 	bmi.w	8022c4c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8022a4a:	4293      	cmp	r3, r2
 8022a4c:	f340 80fe 	ble.w	8022c4c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8022a50:	2e00      	cmp	r6, #0
 8022a52:	f000 80fd 	beq.w	8022c50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8022a56:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022a5a:	3401      	adds	r4, #1
 8022a5c:	f100 80fc 	bmi.w	8022c58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8022a60:	45a6      	cmp	lr, r4
 8022a62:	f340 80f9 	ble.w	8022c58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8022a66:	2800      	cmp	r0, #0
 8022a68:	f000 80f9 	beq.w	8022c5e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8022a6c:	2f00      	cmp	r7, #0
 8022a6e:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8022a72:	f2c0 80ef 	blt.w	8022c54 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8022a76:	42bb      	cmp	r3, r7
 8022a78:	f340 80ec 	ble.w	8022c54 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8022a7c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022a80:	3701      	adds	r7, #1
 8022a82:	f100 80ef 	bmi.w	8022c64 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8022a86:	42bb      	cmp	r3, r7
 8022a88:	f340 80ec 	ble.w	8022c64 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8022a8c:	2e00      	cmp	r6, #0
 8022a8e:	f000 80eb 	beq.w	8022c68 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8022a92:	6852      	ldr	r2, [r2, #4]
 8022a94:	b2b6      	uxth	r6, r6
 8022a96:	b280      	uxth	r0, r0
 8022a98:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022a9c:	fb00 fe06 	mul.w	lr, r0, r6
 8022aa0:	0136      	lsls	r6, r6, #4
 8022aa2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022aa6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022aaa:	eba6 070e 	sub.w	r7, r6, lr
 8022aae:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8022ab2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022ab6:	b280      	uxth	r0, r0
 8022ab8:	b2bf      	uxth	r7, r7
 8022aba:	1a1b      	subs	r3, r3, r0
 8022abc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022ac0:	fb07 f60a 	mul.w	r6, r7, sl
 8022ac4:	b29b      	uxth	r3, r3
 8022ac6:	fb0b 6603 	mla	r6, fp, r3, r6
 8022aca:	fb00 6609 	mla	r6, r0, r9, r6
 8022ace:	fb0e 6608 	mla	r6, lr, r8, r6
 8022ad2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022ad6:	9600      	str	r6, [sp, #0]
 8022ad8:	2e00      	cmp	r6, #0
 8022ada:	f000 80af 	beq.w	8022c3c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8022ade:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8022ae2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022ae6:	9e02      	ldr	r6, [sp, #8]
 8022ae8:	fb0b fc0c 	mul.w	ip, fp, ip
 8022aec:	fb0b f505 	mul.w	r5, fp, r5
 8022af0:	8836      	ldrh	r6, [r6, #0]
 8022af2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022af6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022afa:	9501      	str	r5, [sp, #4]
 8022afc:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8022b00:	44dc      	add	ip, fp
 8022b02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b06:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8022b0a:	9503      	str	r5, [sp, #12]
 8022b0c:	9d01      	ldr	r5, [sp, #4]
 8022b0e:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8022b12:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022b16:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8022b1a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8022b1e:	fb0a fc0c 	mul.w	ip, sl, ip
 8022b22:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8022b26:	fb0a fa01 	mul.w	sl, sl, r1
 8022b2a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022b2e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022b32:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8022b36:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8022b3a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8022b3e:	4465      	add	r5, ip
 8022b40:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022b44:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8022b48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b4c:	fb09 fc0c 	mul.w	ip, r9, ip
 8022b50:	0a2d      	lsrs	r5, r5, #8
 8022b52:	fb09 f904 	mul.w	r9, r9, r4
 8022b56:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022b5a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8022b5e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8022b62:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8022b66:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022b6a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8022b6e:	437d      	muls	r5, r7
 8022b70:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022b74:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8022b78:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022b7c:	4461      	add	r1, ip
 8022b7e:	fb08 f404 	mul.w	r4, r8, r4
 8022b82:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022b86:	fb08 f802 	mul.w	r8, r8, r2
 8022b8a:	0a09      	lsrs	r1, r1, #8
 8022b8c:	0a22      	lsrs	r2, r4, #8
 8022b8e:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8022b92:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8022b96:	fb07 f70a 	mul.w	r7, r7, sl
 8022b9a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022b9e:	4414      	add	r4, r2
 8022ba0:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8022ba4:	0a24      	lsrs	r4, r4, #8
 8022ba6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022baa:	9a03      	ldr	r2, [sp, #12]
 8022bac:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8022bb0:	fb02 5503 	mla	r5, r2, r3, r5
 8022bb4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022bb8:	fb04 540e 	mla	r4, r4, lr, r5
 8022bbc:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8022bc0:	fb01 4100 	mla	r1, r1, r0, r4
 8022bc4:	0a09      	lsrs	r1, r1, #8
 8022bc6:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8022bca:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8022bce:	fb03 7101 	mla	r1, r3, r1, r7
 8022bd2:	9b00      	ldr	r3, [sp, #0]
 8022bd4:	fb0e 1e08 	mla	lr, lr, r8, r1
 8022bd8:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8022bdc:	43da      	mvns	r2, r3
 8022bde:	1233      	asrs	r3, r6, #8
 8022be0:	fb00 e101 	mla	r1, r0, r1, lr
 8022be4:	10f0      	asrs	r0, r6, #3
 8022be6:	b2d2      	uxtb	r2, r2
 8022be8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8022bec:	0a09      	lsrs	r1, r1, #8
 8022bee:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8022bf2:	00f6      	lsls	r6, r6, #3
 8022bf4:	4353      	muls	r3, r2
 8022bf6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8022bfa:	4350      	muls	r0, r2
 8022bfc:	b2f6      	uxtb	r6, r6
 8022bfe:	4321      	orrs	r1, r4
 8022c00:	4356      	muls	r6, r2
 8022c02:	1c5a      	adds	r2, r3, #1
 8022c04:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022c08:	0c0b      	lsrs	r3, r1, #16
 8022c0a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022c0e:	1c42      	adds	r2, r0, #1
 8022c10:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022c14:	0a0a      	lsrs	r2, r1, #8
 8022c16:	021b      	lsls	r3, r3, #8
 8022c18:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022c1c:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8022c20:	00d2      	lsls	r2, r2, #3
 8022c22:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022c26:	4313      	orrs	r3, r2
 8022c28:	1c72      	adds	r2, r6, #1
 8022c2a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8022c2e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8022c32:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022c36:	4319      	orrs	r1, r3
 8022c38:	9b02      	ldr	r3, [sp, #8]
 8022c3a:	8019      	strh	r1, [r3, #0]
 8022c3c:	b005      	add	sp, #20
 8022c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c42:	2500      	movs	r5, #0
 8022c44:	e6fe      	b.n	8022a44 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8022c46:	2100      	movs	r1, #0
 8022c48:	460d      	mov	r5, r1
 8022c4a:	e706      	b.n	8022a5a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8022c4c:	2100      	movs	r1, #0
 8022c4e:	e704      	b.n	8022a5a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8022c50:	4631      	mov	r1, r6
 8022c52:	e702      	b.n	8022a5a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8022c54:	2400      	movs	r4, #0
 8022c56:	e713      	b.n	8022a80 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8022c58:	2200      	movs	r2, #0
 8022c5a:	4614      	mov	r4, r2
 8022c5c:	e71a      	b.n	8022a94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8022c5e:	4602      	mov	r2, r0
 8022c60:	4604      	mov	r4, r0
 8022c62:	e717      	b.n	8022a94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8022c64:	2200      	movs	r2, #0
 8022c66:	e715      	b.n	8022a94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8022c68:	4632      	mov	r2, r6
 8022c6a:	e713      	b.n	8022a94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08022c6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c70:	b09b      	sub	sp, #108	@ 0x6c
 8022c72:	9218      	str	r2, [sp, #96]	@ 0x60
 8022c74:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8022c76:	9019      	str	r0, [sp, #100]	@ 0x64
 8022c78:	9116      	str	r1, [sp, #88]	@ 0x58
 8022c7a:	6850      	ldr	r0, [r2, #4]
 8022c7c:	9307      	str	r3, [sp, #28]
 8022c7e:	6812      	ldr	r2, [r2, #0]
 8022c80:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8022c84:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8022c88:	fb00 1303 	mla	r3, r0, r3, r1
 8022c8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022c90:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c92:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022c94:	681b      	ldr	r3, [r3, #0]
 8022c96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022c98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	dc03      	bgt.n	8022ca6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022c9e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	f340 8387 	ble.w	80233b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8022ca6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022ca8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022cac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022cb0:	1e48      	subs	r0, r1, #1
 8022cb2:	1e57      	subs	r7, r2, #1
 8022cb4:	9b07      	ldr	r3, [sp, #28]
 8022cb6:	2b00      	cmp	r3, #0
 8022cb8:	f340 8166 	ble.w	8022f88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8022cbc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022cc0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022cc4:	d406      	bmi.n	8022cd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022cc6:	4584      	cmp	ip, r0
 8022cc8:	da04      	bge.n	8022cd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022cca:	2b00      	cmp	r3, #0
 8022ccc:	db02      	blt.n	8022cd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022cce:	42bb      	cmp	r3, r7
 8022cd0:	f2c0 815b 	blt.w	8022f8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8022cd4:	f11c 0c01 	adds.w	ip, ip, #1
 8022cd8:	f100 814b 	bmi.w	8022f72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022cdc:	4561      	cmp	r1, ip
 8022cde:	f2c0 8148 	blt.w	8022f72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022ce2:	3301      	adds	r3, #1
 8022ce4:	f100 8145 	bmi.w	8022f72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022ce8:	429a      	cmp	r2, r3
 8022cea:	f2c0 8142 	blt.w	8022f72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022cee:	9b07      	ldr	r3, [sp, #28]
 8022cf0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022cf2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022cf4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	f340 8165 	ble.w	8022fc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8022cfc:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8022cfe:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022d02:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022d04:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022d08:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022d0c:	1422      	asrs	r2, r4, #16
 8022d0e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022d12:	689b      	ldr	r3, [r3, #8]
 8022d14:	f100 81d5 	bmi.w	80230c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8022d18:	f103 38ff 	add.w	r8, r3, #4294967295
 8022d1c:	4542      	cmp	r2, r8
 8022d1e:	f280 81d0 	bge.w	80230c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8022d22:	f1bc 0f00 	cmp.w	ip, #0
 8022d26:	f2c0 81cc 	blt.w	80230c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8022d2a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022d2e:	45c4      	cmp	ip, r8
 8022d30:	f280 81c7 	bge.w	80230c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8022d34:	b21b      	sxth	r3, r3
 8022d36:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8022d38:	fb0c 2203 	mla	r2, ip, r3, r2
 8022d3c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8022d40:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022d44:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022d48:	2900      	cmp	r1, #0
 8022d4a:	f000 8182 	beq.w	8023052 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8022d4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8022d52:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022d54:	0e2d      	lsrs	r5, r5, #24
 8022d56:	9512      	str	r5, [sp, #72]	@ 0x48
 8022d58:	b180      	cbz	r0, 8022d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8022d5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8022d5e:	3b01      	subs	r3, #1
 8022d60:	009b      	lsls	r3, r3, #2
 8022d62:	3304      	adds	r3, #4
 8022d64:	eb08 0c03 	add.w	ip, r8, r3
 8022d68:	f858 3003 	ldr.w	r3, [r8, r3]
 8022d6c:	9308      	str	r3, [sp, #32]
 8022d6e:	0e1b      	lsrs	r3, r3, #24
 8022d70:	9310      	str	r3, [sp, #64]	@ 0x40
 8022d72:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022d76:	930c      	str	r3, [sp, #48]	@ 0x30
 8022d78:	0e1b      	lsrs	r3, r3, #24
 8022d7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022d7c:	b289      	uxth	r1, r1
 8022d7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022d80:	b280      	uxth	r0, r0
 8022d82:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022d84:	fb01 f900 	mul.w	r9, r1, r0
 8022d88:	0109      	lsls	r1, r1, #4
 8022d8a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022d8e:	eba1 0809 	sub.w	r8, r1, r9
 8022d92:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8022d96:	b280      	uxth	r0, r0
 8022d98:	fa1f f888 	uxth.w	r8, r8
 8022d9c:	1a09      	subs	r1, r1, r0
 8022d9e:	fb08 f303 	mul.w	r3, r8, r3
 8022da2:	b289      	uxth	r1, r1
 8022da4:	fb01 330e 	mla	r3, r1, lr, r3
 8022da8:	fb00 3305 	mla	r3, r0, r5, r3
 8022dac:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8022dae:	fb09 3305 	mla	r3, r9, r5, r3
 8022db2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	f000 80d2 	beq.w	8022f60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022dbc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022dc0:	d01b      	beq.n	8022dfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8022dc2:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8022dc6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022dca:	fb0e fa0a 	mul.w	sl, lr, sl
 8022dce:	fb0e fe02 	mul.w	lr, lr, r2
 8022dd2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022dd6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8022dda:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022dde:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022de2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022de6:	4452      	add	r2, sl
 8022de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022dec:	0a12      	lsrs	r2, r2, #8
 8022dee:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022df2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022df6:	ea42 020c 	orr.w	r2, r2, ip
 8022dfa:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022dfc:	2dff      	cmp	r5, #255	@ 0xff
 8022dfe:	d021      	beq.n	8022e44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8022e00:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022e02:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8022e06:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022e08:	fb05 fb0b 	mul.w	fp, r5, fp
 8022e0c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022e0e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8022e12:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022e14:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022e18:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022e1c:	fb05 fa0a 	mul.w	sl, r5, sl
 8022e20:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022e24:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022e28:	44de      	add	lr, fp
 8022e2a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022e2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e36:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022e3a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022e3e:	ea4e 050a 	orr.w	r5, lr, sl
 8022e42:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022e44:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022e46:	2dff      	cmp	r5, #255	@ 0xff
 8022e48:	d021      	beq.n	8022e8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8022e4a:	9d08      	ldr	r5, [sp, #32]
 8022e4c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8022e50:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022e52:	fb05 fb0b 	mul.w	fp, r5, fp
 8022e56:	9d08      	ldr	r5, [sp, #32]
 8022e58:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8022e5c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022e5e:	fb05 fa0e 	mul.w	sl, r5, lr
 8022e62:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022e66:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022e6a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022e6e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022e72:	44de      	add	lr, fp
 8022e74:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022e78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e80:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022e84:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022e88:	ea4e 050a 	orr.w	r5, lr, sl
 8022e8c:	9508      	str	r5, [sp, #32]
 8022e8e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8022e90:	2dff      	cmp	r5, #255	@ 0xff
 8022e92:	d021      	beq.n	8022ed8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8022e94:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022e96:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8022e9a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8022e9c:	fb05 fb0b 	mul.w	fp, r5, fp
 8022ea0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022ea2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8022ea6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8022ea8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022eac:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022eb0:	fb05 fa0a 	mul.w	sl, r5, sl
 8022eb4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022eb8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022ebc:	44de      	add	lr, fp
 8022ebe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022ec2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ec6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022eca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022ece:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022ed2:	ea4e 050a 	orr.w	r5, lr, sl
 8022ed6:	950c      	str	r5, [sp, #48]	@ 0x30
 8022ed8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022eda:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8022ede:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022ee2:	2bff      	cmp	r3, #255	@ 0xff
 8022ee4:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8022ee8:	9d08      	ldr	r5, [sp, #32]
 8022eea:	fb08 fc0c 	mul.w	ip, r8, ip
 8022eee:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022ef2:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8022ef6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022ef8:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022efc:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8022f00:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022f02:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022f06:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8022f0a:	fb08 f80e 	mul.w	r8, r8, lr
 8022f0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f12:	fb01 8202 	mla	r2, r1, r2, r8
 8022f16:	9908      	ldr	r1, [sp, #32]
 8022f18:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022f1c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8022f20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022f22:	fb00 220a 	mla	r2, r0, sl, r2
 8022f26:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8022f2a:	fb09 2900 	mla	r9, r9, r0, r2
 8022f2e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022f32:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8022f36:	ea4c 0c09 	orr.w	ip, ip, r9
 8022f3a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8022f3e:	f040 8091 	bne.w	8023064 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8022f42:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8022f46:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8022f4a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022f4e:	f022 0207 	bic.w	r2, r2, #7
 8022f52:	431a      	orrs	r2, r3
 8022f54:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8022f58:	ea4c 0c02 	orr.w	ip, ip, r2
 8022f5c:	f8a7 c000 	strh.w	ip, [r7]
 8022f60:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022f62:	3702      	adds	r7, #2
 8022f64:	441c      	add	r4, r3
 8022f66:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022f68:	441e      	add	r6, r3
 8022f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022f6c:	3b01      	subs	r3, #1
 8022f6e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022f70:	e6c0      	b.n	8022cf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8022f72:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022f74:	441c      	add	r4, r3
 8022f76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022f78:	441e      	add	r6, r3
 8022f7a:	9b07      	ldr	r3, [sp, #28]
 8022f7c:	3b01      	subs	r3, #1
 8022f7e:	9307      	str	r3, [sp, #28]
 8022f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f82:	3302      	adds	r3, #2
 8022f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f86:	e695      	b.n	8022cb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022f88:	d024      	beq.n	8022fd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022f8a:	9b07      	ldr	r3, [sp, #28]
 8022f8c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8022f8e:	3b01      	subs	r3, #1
 8022f90:	fb00 4003 	mla	r0, r0, r3, r4
 8022f94:	1400      	asrs	r0, r0, #16
 8022f96:	f53f aeaa 	bmi.w	8022cee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022f9a:	3901      	subs	r1, #1
 8022f9c:	4288      	cmp	r0, r1
 8022f9e:	f6bf aea6 	bge.w	8022cee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022fa2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022fa4:	fb01 6303 	mla	r3, r1, r3, r6
 8022fa8:	141b      	asrs	r3, r3, #16
 8022faa:	f53f aea0 	bmi.w	8022cee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022fae:	3a01      	subs	r2, #1
 8022fb0:	4293      	cmp	r3, r2
 8022fb2:	f6bf ae9c 	bge.w	8022cee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022fb6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022fba:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8022fbe:	f1bb 0f00 	cmp.w	fp, #0
 8022fc2:	f300 809a 	bgt.w	80230fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8022fc6:	9b07      	ldr	r3, [sp, #28]
 8022fc8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022fce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8022fd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022fd6:	2b00      	cmp	r3, #0
 8022fd8:	f340 81ec 	ble.w	80233b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8022fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022fe0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022fe2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022fe6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022fea:	eef0 6a62 	vmov.f32	s13, s5
 8022fee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022ff2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022ff6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ffa:	ee16 4a90 	vmov	r4, s13
 8022ffe:	eef0 6a43 	vmov.f32	s13, s6
 8023002:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023006:	ee16 6a90 	vmov	r6, s13
 802300a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802300e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023012:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023016:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802301a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802301e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023022:	ee12 2a90 	vmov	r2, s5
 8023026:	eef0 2a47 	vmov.f32	s5, s14
 802302a:	fb92 f3f3 	sdiv	r3, r2, r3
 802302e:	ee13 2a10 	vmov	r2, s6
 8023032:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023034:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023036:	eeb0 3a67 	vmov.f32	s6, s15
 802303a:	fb92 f3f3 	sdiv	r3, r2, r3
 802303e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023040:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023042:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023044:	3b01      	subs	r3, #1
 8023046:	9316      	str	r3, [sp, #88]	@ 0x58
 8023048:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802304a:	bf08      	it	eq
 802304c:	4613      	moveq	r3, r2
 802304e:	9307      	str	r3, [sp, #28]
 8023050:	e622      	b.n	8022c98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8023052:	2800      	cmp	r0, #0
 8023054:	f43f ae92 	beq.w	8022d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023058:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802305c:	9308      	str	r3, [sp, #32]
 802305e:	0e1b      	lsrs	r3, r3, #24
 8023060:	9310      	str	r3, [sp, #64]	@ 0x40
 8023062:	e68b      	b.n	8022d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023064:	8839      	ldrh	r1, [r7, #0]
 8023066:	43db      	mvns	r3, r3
 8023068:	4dd4      	ldr	r5, [pc, #848]	@ (80233bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802306a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802306e:	fa5f f883 	uxtb.w	r8, r3
 8023072:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8023076:	10c8      	asrs	r0, r1, #3
 8023078:	00cb      	lsls	r3, r1, #3
 802307a:	fb0e fe08 	mul.w	lr, lr, r8
 802307e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023082:	b2db      	uxtb	r3, r3
 8023084:	f10e 0101 	add.w	r1, lr, #1
 8023088:	fb00 f008 	mul.w	r0, r0, r8
 802308c:	fb03 f308 	mul.w	r3, r3, r8
 8023090:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8023094:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023098:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802309c:	f100 0e01 	add.w	lr, r0, #1
 80230a0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80230a4:	b2c9      	uxtb	r1, r1
 80230a6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80230aa:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80230ae:	00d2      	lsls	r2, r2, #3
 80230b0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80230b4:	430a      	orrs	r2, r1
 80230b6:	1c59      	adds	r1, r3, #1
 80230b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80230bc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80230c0:	e748      	b.n	8022f54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80230c2:	f112 0801 	adds.w	r8, r2, #1
 80230c6:	f53f af4b 	bmi.w	8022f60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80230ca:	4543      	cmp	r3, r8
 80230cc:	f6ff af48 	blt.w	8022f60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80230d0:	f11c 0801 	adds.w	r8, ip, #1
 80230d4:	f53f af44 	bmi.w	8022f60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80230d8:	45c6      	cmp	lr, r8
 80230da:	f6ff af41 	blt.w	8022f60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80230de:	b21b      	sxth	r3, r3
 80230e0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80230e4:	fa0f f28e 	sxth.w	r2, lr
 80230e8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80230ec:	9200      	str	r2, [sp, #0]
 80230ee:	4639      	mov	r1, r7
 80230f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80230f2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80230f4:	f7ff fc88 	bl	8022a08 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80230f8:	e732      	b.n	8022f60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80230fa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80230fc:	1421      	asrs	r1, r4, #16
 80230fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023100:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023104:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8023108:	1433      	asrs	r3, r6, #16
 802310a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802310e:	fb07 1303 	mla	r3, r7, r3, r1
 8023112:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023114:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023118:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802311c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023120:	2a00      	cmp	r2, #0
 8023122:	f000 8108 	beq.w	8023336 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8023126:	684d      	ldr	r5, [r1, #4]
 8023128:	950d      	str	r5, [sp, #52]	@ 0x34
 802312a:	0e2d      	lsrs	r5, r5, #24
 802312c:	9514      	str	r5, [sp, #80]	@ 0x50
 802312e:	b178      	cbz	r0, 8023150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023130:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8023134:	3f01      	subs	r7, #1
 8023136:	00bf      	lsls	r7, r7, #2
 8023138:	3704      	adds	r7, #4
 802313a:	eb01 0e07 	add.w	lr, r1, r7
 802313e:	59c9      	ldr	r1, [r1, r7]
 8023140:	9109      	str	r1, [sp, #36]	@ 0x24
 8023142:	0e09      	lsrs	r1, r1, #24
 8023144:	9111      	str	r1, [sp, #68]	@ 0x44
 8023146:	f8de 1004 	ldr.w	r1, [lr, #4]
 802314a:	910e      	str	r1, [sp, #56]	@ 0x38
 802314c:	0e09      	lsrs	r1, r1, #24
 802314e:	9115      	str	r1, [sp, #84]	@ 0x54
 8023150:	b292      	uxth	r2, r2
 8023152:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8023154:	b280      	uxth	r0, r0
 8023156:	fb02 f900 	mul.w	r9, r2, r0
 802315a:	0112      	lsls	r2, r2, #4
 802315c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023160:	eba2 0e09 	sub.w	lr, r2, r9
 8023164:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8023168:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802316a:	b280      	uxth	r0, r0
 802316c:	fa1f fe8e 	uxth.w	lr, lr
 8023170:	1a09      	subs	r1, r1, r0
 8023172:	fb0e f202 	mul.w	r2, lr, r2
 8023176:	b289      	uxth	r1, r1
 8023178:	fb01 220c 	mla	r2, r1, ip, r2
 802317c:	fb00 2205 	mla	r2, r0, r5, r2
 8023180:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8023182:	fb09 2205 	mla	r2, r9, r5, r2
 8023186:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802318a:	2a00      	cmp	r2, #0
 802318c:	f000 80ca 	beq.w	8023324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8023190:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8023194:	d019      	beq.n	80231ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8023196:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802319a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802319e:	fb0c fa0a 	mul.w	sl, ip, sl
 80231a2:	fb0c fc03 	mul.w	ip, ip, r3
 80231a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80231aa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80231ae:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80231b2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80231b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80231ba:	4453      	add	r3, sl
 80231bc:	0a3f      	lsrs	r7, r7, #8
 80231be:	0a1b      	lsrs	r3, r3, #8
 80231c0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80231c4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80231c8:	433b      	orrs	r3, r7
 80231ca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80231cc:	2dff      	cmp	r5, #255	@ 0xff
 80231ce:	d020      	beq.n	8023212 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80231d0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80231d2:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80231d6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80231d8:	436f      	muls	r7, r5
 80231da:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80231dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80231e0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80231e4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80231e6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80231ea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80231ee:	fb05 fa0a 	mul.w	sl, r5, sl
 80231f2:	44bc      	add	ip, r7
 80231f4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80231f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023200:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023204:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023208:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802320c:	ea4c 050a 	orr.w	r5, ip, sl
 8023210:	950d      	str	r5, [sp, #52]	@ 0x34
 8023212:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8023214:	2dff      	cmp	r5, #255	@ 0xff
 8023216:	d020      	beq.n	802325a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8023218:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802321a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802321e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8023220:	436f      	muls	r7, r5
 8023222:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8023224:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8023228:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802322a:	fb05 fa0c 	mul.w	sl, r5, ip
 802322e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023232:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023236:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802323a:	44bc      	add	ip, r7
 802323c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023240:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023244:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023248:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802324c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023250:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023254:	ea4c 050a 	orr.w	r5, ip, sl
 8023258:	9509      	str	r5, [sp, #36]	@ 0x24
 802325a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802325c:	2dff      	cmp	r5, #255	@ 0xff
 802325e:	d020      	beq.n	80232a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8023260:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8023262:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8023266:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8023268:	436f      	muls	r7, r5
 802326a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802326c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023270:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8023274:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8023276:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802327a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802327e:	fb05 fa0a 	mul.w	sl, r5, sl
 8023282:	44bc      	add	ip, r7
 8023284:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023288:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802328c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023290:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023294:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023298:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802329c:	ea4c 050a 	orr.w	r5, ip, sl
 80232a0:	950e      	str	r5, [sp, #56]	@ 0x38
 80232a2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80232a4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80232a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80232ac:	2aff      	cmp	r2, #255	@ 0xff
 80232ae:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80232b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80232b4:	fb0e f707 	mul.w	r7, lr, r7
 80232b8:	fb01 770c 	mla	r7, r1, ip, r7
 80232bc:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80232c0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80232c2:	fb00 770c 	mla	r7, r0, ip, r7
 80232c6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80232ca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80232cc:	fb09 770c 	mla	r7, r9, ip, r7
 80232d0:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80232d4:	fb0e fe0c 	mul.w	lr, lr, ip
 80232d8:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80232dc:	fb01 e303 	mla	r3, r1, r3, lr
 80232e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80232e2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80232e6:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80232ea:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80232ec:	fb00 330a 	mla	r3, r0, sl, r3
 80232f0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80232f4:	fb09 3c0c 	mla	ip, r9, ip, r3
 80232f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232fc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023300:	ea47 070c 	orr.w	r7, r7, ip
 8023304:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8023308:	d11e      	bne.n	8023348 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802330a:	097a      	lsrs	r2, r7, #5
 802330c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8023310:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8023314:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023318:	f023 0307 	bic.w	r3, r3, #7
 802331c:	4313      	orrs	r3, r2
 802331e:	431f      	orrs	r7, r3
 8023320:	f8a8 7000 	strh.w	r7, [r8]
 8023324:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023326:	f108 0802 	add.w	r8, r8, #2
 802332a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802332e:	441c      	add	r4, r3
 8023330:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023332:	441e      	add	r6, r3
 8023334:	e643      	b.n	8022fbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8023336:	2800      	cmp	r0, #0
 8023338:	f43f af0a 	beq.w	8023150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802333c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8023340:	9109      	str	r1, [sp, #36]	@ 0x24
 8023342:	0e09      	lsrs	r1, r1, #24
 8023344:	9111      	str	r1, [sp, #68]	@ 0x44
 8023346:	e703      	b.n	8023150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023348:	f8b8 1000 	ldrh.w	r1, [r8]
 802334c:	43d2      	mvns	r2, r2
 802334e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8023352:	fa5f fe82 	uxtb.w	lr, r2
 8023356:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802335a:	10c8      	asrs	r0, r1, #3
 802335c:	00ca      	lsls	r2, r1, #3
 802335e:	fb0c fc0e 	mul.w	ip, ip, lr
 8023362:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023366:	b2d2      	uxtb	r2, r2
 8023368:	f10c 0101 	add.w	r1, ip, #1
 802336c:	fb00 f00e 	mul.w	r0, r0, lr
 8023370:	fb02 f20e 	mul.w	r2, r2, lr
 8023374:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023378:	0c39      	lsrs	r1, r7, #16
 802337a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802337e:	490f      	ldr	r1, [pc, #60]	@ (80233bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8023380:	fa5f fc8c 	uxtb.w	ip, ip
 8023384:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8023388:	1c41      	adds	r1, r0, #1
 802338a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802338e:	1c51      	adds	r1, r2, #1
 8023390:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023394:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023398:	00c0      	lsls	r0, r0, #3
 802339a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802339e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80233a2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80233a6:	ea4c 0c00 	orr.w	ip, ip, r0
 80233aa:	ea47 0c0c 	orr.w	ip, r7, ip
 80233ae:	f8a8 c000 	strh.w	ip, [r8]
 80233b2:	e7b7      	b.n	8023324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80233b4:	b01b      	add	sp, #108	@ 0x6c
 80233b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233ba:	bf00      	nop
 80233bc:	fffff800 	.word	0xfffff800

080233c0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80233c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80233c4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 80233c8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80233cc:	2d00      	cmp	r5, #0
 80233ce:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80233d2:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80233d6:	fb05 0e03 	mla	lr, r5, r3, r0
 80233da:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 80233de:	f2c0 808c 	blt.w	80234fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80233e2:	45a9      	cmp	r9, r5
 80233e4:	f340 8089 	ble.w	80234fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80233e8:	2800      	cmp	r0, #0
 80233ea:	f2c0 8084 	blt.w	80234f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80233ee:	4580      	cmp	r8, r0
 80233f0:	f340 8081 	ble.w	80234f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80233f4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80233f8:	f01e 0f01 	tst.w	lr, #1
 80233fc:	5d16      	ldrb	r6, [r2, r4]
 80233fe:	bf0c      	ite	eq
 8023400:	f006 060f 	andeq.w	r6, r6, #15
 8023404:	1136      	asrne	r6, r6, #4
 8023406:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802340a:	b2f6      	uxtb	r6, r6
 802340c:	1c44      	adds	r4, r0, #1
 802340e:	d477      	bmi.n	8023500 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8023410:	45a0      	cmp	r8, r4
 8023412:	dd75      	ble.n	8023500 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8023414:	2f00      	cmp	r7, #0
 8023416:	d075      	beq.n	8023504 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8023418:	f10e 0a01 	add.w	sl, lr, #1
 802341c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8023420:	f01a 0f01 	tst.w	sl, #1
 8023424:	5d14      	ldrb	r4, [r2, r4]
 8023426:	bf0c      	ite	eq
 8023428:	f004 040f 	andeq.w	r4, r4, #15
 802342c:	1124      	asrne	r4, r4, #4
 802342e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023432:	b2e4      	uxtb	r4, r4
 8023434:	3501      	adds	r5, #1
 8023436:	d469      	bmi.n	802350c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8023438:	45a9      	cmp	r9, r5
 802343a:	dd67      	ble.n	802350c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802343c:	f1bc 0f00 	cmp.w	ip, #0
 8023440:	d067      	beq.n	8023512 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8023442:	2800      	cmp	r0, #0
 8023444:	db60      	blt.n	8023508 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8023446:	4580      	cmp	r8, r0
 8023448:	dd5e      	ble.n	8023508 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802344a:	eb03 090e 	add.w	r9, r3, lr
 802344e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8023452:	f019 0f01 	tst.w	r9, #1
 8023456:	5d55      	ldrb	r5, [r2, r5]
 8023458:	bf0c      	ite	eq
 802345a:	f005 050f 	andeq.w	r5, r5, #15
 802345e:	112d      	asrne	r5, r5, #4
 8023460:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023464:	b2ed      	uxtb	r5, r5
 8023466:	3001      	adds	r0, #1
 8023468:	d456      	bmi.n	8023518 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802346a:	4580      	cmp	r8, r0
 802346c:	dd54      	ble.n	8023518 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802346e:	2f00      	cmp	r7, #0
 8023470:	d054      	beq.n	802351c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8023472:	3301      	adds	r3, #1
 8023474:	449e      	add	lr, r3
 8023476:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802347a:	f01e 0f01 	tst.w	lr, #1
 802347e:	5cd0      	ldrb	r0, [r2, r3]
 8023480:	bf0c      	ite	eq
 8023482:	f000 000f 	andeq.w	r0, r0, #15
 8023486:	1100      	asrne	r0, r0, #4
 8023488:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802348c:	b2c3      	uxtb	r3, r0
 802348e:	b2ba      	uxth	r2, r7
 8023490:	fa1f fc8c 	uxth.w	ip, ip
 8023494:	fb02 f00c 	mul.w	r0, r2, ip
 8023498:	0112      	lsls	r2, r2, #4
 802349a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802349e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80234a2:	1a12      	subs	r2, r2, r0
 80234a4:	fa1f fc8c 	uxth.w	ip, ip
 80234a8:	b292      	uxth	r2, r2
 80234aa:	eba7 070c 	sub.w	r7, r7, ip
 80234ae:	4362      	muls	r2, r4
 80234b0:	b2bf      	uxth	r7, r7
 80234b2:	fb06 2207 	mla	r2, r6, r7, r2
 80234b6:	fb0c 2505 	mla	r5, ip, r5, r2
 80234ba:	fb00 5303 	mla	r3, r0, r3, r5
 80234be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80234c2:	b1b3      	cbz	r3, 80234f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80234c4:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 80234c8:	435a      	muls	r2, r3
 80234ca:	1c53      	adds	r3, r2, #1
 80234cc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80234d0:	4a2d      	ldr	r2, [pc, #180]	@ (8023588 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80234d2:	121b      	asrs	r3, r3, #8
 80234d4:	6812      	ldr	r2, [r2, #0]
 80234d6:	2bff      	cmp	r3, #255	@ 0xff
 80234d8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80234dc:	d120      	bne.n	8023520 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80234de:	0950      	lsrs	r0, r2, #5
 80234e0:	4b2a      	ldr	r3, [pc, #168]	@ (802358c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80234e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80234e6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80234ea:	4033      	ands	r3, r6
 80234ec:	4318      	orrs	r0, r3
 80234ee:	4302      	orrs	r2, r0
 80234f0:	800a      	strh	r2, [r1, #0]
 80234f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80234f6:	2600      	movs	r6, #0
 80234f8:	e788      	b.n	802340c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80234fa:	2400      	movs	r4, #0
 80234fc:	4626      	mov	r6, r4
 80234fe:	e799      	b.n	8023434 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8023500:	2400      	movs	r4, #0
 8023502:	e797      	b.n	8023434 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8023504:	463c      	mov	r4, r7
 8023506:	e795      	b.n	8023434 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8023508:	2500      	movs	r5, #0
 802350a:	e7ac      	b.n	8023466 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802350c:	2300      	movs	r3, #0
 802350e:	461d      	mov	r5, r3
 8023510:	e7bd      	b.n	802348e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8023512:	4663      	mov	r3, ip
 8023514:	4665      	mov	r5, ip
 8023516:	e7ba      	b.n	802348e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8023518:	2300      	movs	r3, #0
 802351a:	e7b8      	b.n	802348e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802351c:	463b      	mov	r3, r7
 802351e:	e7b6      	b.n	802348e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8023520:	880d      	ldrh	r5, [r1, #0]
 8023522:	b29f      	uxth	r7, r3
 8023524:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8023528:	43db      	mvns	r3, r3
 802352a:	122c      	asrs	r4, r5, #8
 802352c:	fb10 f007 	smulbb	r0, r0, r7
 8023530:	b2db      	uxtb	r3, r3
 8023532:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8023536:	b2f6      	uxtb	r6, r6
 8023538:	b2d2      	uxtb	r2, r2
 802353a:	fb04 0403 	mla	r4, r4, r3, r0
 802353e:	10e8      	asrs	r0, r5, #3
 8023540:	fb12 f207 	smulbb	r2, r2, r7
 8023544:	00ed      	lsls	r5, r5, #3
 8023546:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802354a:	b2a4      	uxth	r4, r4
 802354c:	fb16 f607 	smulbb	r6, r6, r7
 8023550:	b2ed      	uxtb	r5, r5
 8023552:	fb00 6603 	mla	r6, r0, r3, r6
 8023556:	fb05 2303 	mla	r3, r5, r3, r2
 802355a:	b2b0      	uxth	r0, r6
 802355c:	b29a      	uxth	r2, r3
 802355e:	1c63      	adds	r3, r4, #1
 8023560:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023564:	1c53      	adds	r3, r2, #1
 8023566:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802356a:	1c42      	adds	r2, r0, #1
 802356c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8023570:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023574:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023578:	0940      	lsrs	r0, r0, #5
 802357a:	4323      	orrs	r3, r4
 802357c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023580:	4303      	orrs	r3, r0
 8023582:	800b      	strh	r3, [r1, #0]
 8023584:	e7b5      	b.n	80234f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8023586:	bf00      	nop
 8023588:	24004280 	.word	0x24004280
 802358c:	00fff800 	.word	0x00fff800

08023590 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023594:	b097      	sub	sp, #92	@ 0x5c
 8023596:	9214      	str	r2, [sp, #80]	@ 0x50
 8023598:	9309      	str	r3, [sp, #36]	@ 0x24
 802359a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802359c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80235a0:	9015      	str	r0, [sp, #84]	@ 0x54
 80235a2:	910d      	str	r1, [sp, #52]	@ 0x34
 80235a4:	6850      	ldr	r0, [r2, #4]
 80235a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80235a8:	6812      	ldr	r2, [r2, #0]
 80235aa:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80235ae:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 80235b2:	fb00 1303 	mla	r3, r0, r3, r1
 80235b6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80235ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80235bc:	689b      	ldr	r3, [r3, #8]
 80235be:	3301      	adds	r3, #1
 80235c0:	f023 0301 	bic.w	r3, r3, #1
 80235c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80235c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80235c8:	681f      	ldr	r7, [r3, #0]
 80235ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	dc03      	bgt.n	80235d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80235d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80235d2:	2b00      	cmp	r3, #0
 80235d4:	f340 8289 	ble.w	8023aea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80235d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80235da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80235de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80235e2:	1e48      	subs	r0, r1, #1
 80235e4:	f102 3cff 	add.w	ip, r2, #4294967295
 80235e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235ea:	2b00      	cmp	r3, #0
 80235ec:	f340 80c5 	ble.w	802377a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80235f0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80235f4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80235f8:	d406      	bmi.n	8023608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80235fa:	4586      	cmp	lr, r0
 80235fc:	da04      	bge.n	8023608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80235fe:	2b00      	cmp	r3, #0
 8023600:	db02      	blt.n	8023608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023602:	4563      	cmp	r3, ip
 8023604:	f2c0 80ba 	blt.w	802377c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8023608:	f11e 0e01 	adds.w	lr, lr, #1
 802360c:	f100 80ab 	bmi.w	8023766 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023610:	4571      	cmp	r1, lr
 8023612:	f2c0 80a8 	blt.w	8023766 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023616:	3301      	adds	r3, #1
 8023618:	f100 80a5 	bmi.w	8023766 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802361c:	429a      	cmp	r2, r3
 802361e:	f2c0 80a2 	blt.w	8023766 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023624:	46c8      	mov	r8, r9
 8023626:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 802362a:	930e      	str	r3, [sp, #56]	@ 0x38
 802362c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802362e:	2b00      	cmp	r3, #0
 8023630:	f340 80c4 	ble.w	80237bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8023634:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023636:	1430      	asrs	r0, r6, #16
 8023638:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802363c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023640:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023644:	1423      	asrs	r3, r4, #16
 8023646:	f100 814f 	bmi.w	80238e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802364a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802364e:	455b      	cmp	r3, fp
 8023650:	f280 814a 	bge.w	80238e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023654:	2800      	cmp	r0, #0
 8023656:	f2c0 8147 	blt.w	80238e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802365a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802365e:	4558      	cmp	r0, fp
 8023660:	f280 8142 	bge.w	80238e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023664:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023666:	fb00 3305 	mla	r3, r0, r5, r3
 802366a:	0858      	lsrs	r0, r3, #1
 802366c:	07dd      	lsls	r5, r3, #31
 802366e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023672:	bf54      	ite	pl
 8023674:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023678:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802367c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023680:	fa5f fc8c 	uxtb.w	ip, ip
 8023684:	2a00      	cmp	r2, #0
 8023686:	f000 80dd 	beq.w	8023844 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802368a:	1c58      	adds	r0, r3, #1
 802368c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023690:	07c0      	lsls	r0, r0, #31
 8023692:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023696:	bf54      	ite	pl
 8023698:	f00e 0e0f 	andpl.w	lr, lr, #15
 802369c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80236a0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80236a4:	fa5f f08e 	uxtb.w	r0, lr
 80236a8:	9010      	str	r0, [sp, #64]	@ 0x40
 80236aa:	b1d9      	cbz	r1, 80236e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80236ac:	4453      	add	r3, sl
 80236ae:	0858      	lsrs	r0, r3, #1
 80236b0:	07dd      	lsls	r5, r3, #31
 80236b2:	f103 0301 	add.w	r3, r3, #1
 80236b6:	5c38      	ldrb	r0, [r7, r0]
 80236b8:	bf54      	ite	pl
 80236ba:	f000 000f 	andpl.w	r0, r0, #15
 80236be:	1100      	asrmi	r0, r0, #4
 80236c0:	07dd      	lsls	r5, r3, #31
 80236c2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80236c6:	b2c0      	uxtb	r0, r0
 80236c8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80236ca:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80236ce:	f817 e000 	ldrb.w	lr, [r7, r0]
 80236d2:	bf54      	ite	pl
 80236d4:	f00e 030f 	andpl.w	r3, lr, #15
 80236d8:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80236dc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80236e0:	b2db      	uxtb	r3, r3
 80236e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80236e4:	b292      	uxth	r2, r2
 80236e6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80236e8:	b289      	uxth	r1, r1
 80236ea:	fb02 f301 	mul.w	r3, r2, r1
 80236ee:	0112      	lsls	r2, r2, #4
 80236f0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80236f4:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80236f8:	1ad2      	subs	r2, r2, r3
 80236fa:	b289      	uxth	r1, r1
 80236fc:	b292      	uxth	r2, r2
 80236fe:	1a40      	subs	r0, r0, r1
 8023700:	436a      	muls	r2, r5
 8023702:	b280      	uxth	r0, r0
 8023704:	fb0c 2c00 	mla	ip, ip, r0, r2
 8023708:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802370a:	fb01 c102 	mla	r1, r1, r2, ip
 802370e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023710:	fb03 1302 	mla	r3, r3, r2, r1
 8023714:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023718:	b1db      	cbz	r3, 8023752 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802371a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802371c:	4353      	muls	r3, r2
 802371e:	1c5a      	adds	r2, r3, #1
 8023720:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023724:	4ac6      	ldr	r2, [pc, #792]	@ (8023a40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023726:	121b      	asrs	r3, r3, #8
 8023728:	6812      	ldr	r2, [r2, #0]
 802372a:	2bff      	cmp	r3, #255	@ 0xff
 802372c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8023730:	f040 8099 	bne.w	8023866 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8023734:	0953      	lsrs	r3, r2, #5
 8023736:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802373a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802373e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023742:	f02c 0c07 	bic.w	ip, ip, #7
 8023746:	ea43 0c0c 	orr.w	ip, r3, ip
 802374a:	ea4c 0202 	orr.w	r2, ip, r2
 802374e:	f8a8 2000 	strh.w	r2, [r8]
 8023752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023754:	f108 0802 	add.w	r8, r8, #2
 8023758:	441c      	add	r4, r3
 802375a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802375c:	441e      	add	r6, r3
 802375e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023760:	3b01      	subs	r3, #1
 8023762:	930e      	str	r3, [sp, #56]	@ 0x38
 8023764:	e762      	b.n	802362c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023766:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023768:	f109 0902 	add.w	r9, r9, #2
 802376c:	441c      	add	r4, r3
 802376e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023770:	441e      	add	r6, r3
 8023772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023774:	3b01      	subs	r3, #1
 8023776:	9309      	str	r3, [sp, #36]	@ 0x24
 8023778:	e736      	b.n	80235e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802377a:	d024      	beq.n	80237c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802377c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802377e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8023780:	3b01      	subs	r3, #1
 8023782:	fb00 4003 	mla	r0, r0, r3, r4
 8023786:	1400      	asrs	r0, r0, #16
 8023788:	f53f af4b 	bmi.w	8023622 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802378c:	3901      	subs	r1, #1
 802378e:	4288      	cmp	r0, r1
 8023790:	f6bf af47 	bge.w	8023622 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023794:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8023796:	fb01 6303 	mla	r3, r1, r3, r6
 802379a:	141b      	asrs	r3, r3, #16
 802379c:	f53f af41 	bmi.w	8023622 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80237a0:	3a01      	subs	r2, #1
 80237a2:	4293      	cmp	r3, r2
 80237a4:	f6bf af3d 	bge.w	8023622 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80237a8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80237ac:	46c8      	mov	r8, r9
 80237ae:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80237b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80237b4:	f1bb 0f00 	cmp.w	fp, #0
 80237b8:	f300 80b7 	bgt.w	802392a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80237bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237be:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80237c2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80237c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80237c8:	2b00      	cmp	r3, #0
 80237ca:	f340 818e 	ble.w	8023aea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80237ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80237d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80237d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80237d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80237dc:	eef0 6a62 	vmov.f32	s13, s5
 80237e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80237e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80237e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237ec:	ee16 4a90 	vmov	r4, s13
 80237f0:	eef0 6a43 	vmov.f32	s13, s6
 80237f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237f8:	ee16 6a90 	vmov	r6, s13
 80237fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023800:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023804:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023808:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802380c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023810:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023814:	ee12 2a90 	vmov	r2, s5
 8023818:	eef0 2a47 	vmov.f32	s5, s14
 802381c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023820:	ee13 2a10 	vmov	r2, s6
 8023824:	9323      	str	r3, [sp, #140]	@ 0x8c
 8023826:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023828:	eeb0 3a67 	vmov.f32	s6, s15
 802382c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023830:	9324      	str	r3, [sp, #144]	@ 0x90
 8023832:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023834:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023836:	3b01      	subs	r3, #1
 8023838:	930d      	str	r3, [sp, #52]	@ 0x34
 802383a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802383c:	bf08      	it	eq
 802383e:	4613      	moveq	r3, r2
 8023840:	9309      	str	r3, [sp, #36]	@ 0x24
 8023842:	e6c2      	b.n	80235ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023844:	2900      	cmp	r1, #0
 8023846:	f43f af4d 	beq.w	80236e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802384a:	eb0a 0003 	add.w	r0, sl, r3
 802384e:	0843      	lsrs	r3, r0, #1
 8023850:	07c0      	lsls	r0, r0, #31
 8023852:	5cfb      	ldrb	r3, [r7, r3]
 8023854:	bf54      	ite	pl
 8023856:	f003 030f 	andpl.w	r3, r3, #15
 802385a:	111b      	asrmi	r3, r3, #4
 802385c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023860:	b2db      	uxtb	r3, r3
 8023862:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023864:	e73e      	b.n	80236e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8023866:	f8b8 e000 	ldrh.w	lr, [r8]
 802386a:	fa1f fb83 	uxth.w	fp, r3
 802386e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8023872:	43db      	mvns	r3, r3
 8023874:	ea4f 202e 	mov.w	r0, lr, asr #8
 8023878:	fb11 f10b 	smulbb	r1, r1, fp
 802387c:	b2db      	uxtb	r3, r3
 802387e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8023882:	fa5f fc8c 	uxtb.w	ip, ip
 8023886:	b2d2      	uxtb	r2, r2
 8023888:	fb00 1003 	mla	r0, r0, r3, r1
 802388c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8023890:	fb1c fc0b 	smulbb	ip, ip, fp
 8023894:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023898:	b280      	uxth	r0, r0
 802389a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802389e:	fb12 fb0b 	smulbb	fp, r2, fp
 80238a2:	fa5f fe8e 	uxtb.w	lr, lr
 80238a6:	fb01 cc03 	mla	ip, r1, r3, ip
 80238aa:	fb0e bb03 	mla	fp, lr, r3, fp
 80238ae:	1c43      	adds	r3, r0, #1
 80238b0:	fa1f fc8c 	uxth.w	ip, ip
 80238b4:	fa1f fb8b 	uxth.w	fp, fp
 80238b8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80238bc:	f10c 0101 	add.w	r1, ip, #1
 80238c0:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 80238c4:	f10b 0001 	add.w	r0, fp, #1
 80238c8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80238cc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80238d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80238d4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80238d8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80238dc:	4318      	orrs	r0, r3
 80238de:	ea40 000c 	orr.w	r0, r0, ip
 80238e2:	f8a8 0000 	strh.w	r0, [r8]
 80238e6:	e734      	b.n	8023752 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80238e8:	f113 0b01 	adds.w	fp, r3, #1
 80238ec:	f53f af31 	bmi.w	8023752 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80238f0:	45dc      	cmp	ip, fp
 80238f2:	f6ff af2e 	blt.w	8023752 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80238f6:	f110 0b01 	adds.w	fp, r0, #1
 80238fa:	f53f af2a 	bmi.w	8023752 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80238fe:	45de      	cmp	lr, fp
 8023900:	f6ff af27 	blt.w	8023752 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023904:	9302      	str	r3, [sp, #8]
 8023906:	fa0f f38e 	sxth.w	r3, lr
 802390a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802390c:	9301      	str	r3, [sp, #4]
 802390e:	fa0f f38c 	sxth.w	r3, ip
 8023912:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023916:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802391a:	9300      	str	r3, [sp, #0]
 802391c:	463a      	mov	r2, r7
 802391e:	4653      	mov	r3, sl
 8023920:	4641      	mov	r1, r8
 8023922:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8023924:	f7ff fd4c 	bl	80233c0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8023928:	e713      	b.n	8023752 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802392a:	1422      	asrs	r2, r4, #16
 802392c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802392e:	1433      	asrs	r3, r6, #16
 8023930:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023934:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023938:	fb05 2303 	mla	r3, r5, r3, r2
 802393c:	085a      	lsrs	r2, r3, #1
 802393e:	07dd      	lsls	r5, r3, #31
 8023940:	5cba      	ldrb	r2, [r7, r2]
 8023942:	bf54      	ite	pl
 8023944:	f002 020f 	andpl.w	r2, r2, #15
 8023948:	1112      	asrmi	r2, r2, #4
 802394a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802394e:	b2d2      	uxtb	r2, r2
 8023950:	2900      	cmp	r1, #0
 8023952:	d077      	beq.n	8023a44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023954:	f103 0e01 	add.w	lr, r3, #1
 8023958:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802395c:	f01e 0f01 	tst.w	lr, #1
 8023960:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023964:	bf0c      	ite	eq
 8023966:	f00c 0c0f 	andeq.w	ip, ip, #15
 802396a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802396e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023972:	fa5f f58c 	uxtb.w	r5, ip
 8023976:	9512      	str	r5, [sp, #72]	@ 0x48
 8023978:	b308      	cbz	r0, 80239be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802397a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802397c:	442b      	add	r3, r5
 802397e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023982:	07dd      	lsls	r5, r3, #31
 8023984:	f103 0301 	add.w	r3, r3, #1
 8023988:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802398c:	bf54      	ite	pl
 802398e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023992:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023996:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802399a:	fa5f f58c 	uxtb.w	r5, ip
 802399e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80239a2:	950c      	str	r5, [sp, #48]	@ 0x30
 80239a4:	07dd      	lsls	r5, r3, #31
 80239a6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80239aa:	bf54      	ite	pl
 80239ac:	f00c 0c0f 	andpl.w	ip, ip, #15
 80239b0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80239b4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80239b8:	fa5f f38c 	uxtb.w	r3, ip
 80239bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80239be:	b289      	uxth	r1, r1
 80239c0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80239c2:	b280      	uxth	r0, r0
 80239c4:	fb01 f300 	mul.w	r3, r1, r0
 80239c8:	0109      	lsls	r1, r1, #4
 80239ca:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80239ce:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 80239d2:	1ac9      	subs	r1, r1, r3
 80239d4:	b280      	uxth	r0, r0
 80239d6:	b289      	uxth	r1, r1
 80239d8:	ebac 0c00 	sub.w	ip, ip, r0
 80239dc:	4369      	muls	r1, r5
 80239de:	fa1f fc8c 	uxth.w	ip, ip
 80239e2:	fb02 120c 	mla	r2, r2, ip, r1
 80239e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80239e8:	fb00 2001 	mla	r0, r0, r1, r2
 80239ec:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80239ee:	fb03 0302 	mla	r3, r3, r2, r0
 80239f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80239f6:	b1d3      	cbz	r3, 8023a2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80239f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80239fa:	4353      	muls	r3, r2
 80239fc:	1c5a      	adds	r2, r3, #1
 80239fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023a02:	4a0f      	ldr	r2, [pc, #60]	@ (8023a40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023a04:	121b      	asrs	r3, r3, #8
 8023a06:	6812      	ldr	r2, [r2, #0]
 8023a08:	2bff      	cmp	r3, #255	@ 0xff
 8023a0a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8023a0e:	d12d      	bne.n	8023a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023a10:	0953      	lsrs	r3, r2, #5
 8023a12:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8023a16:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023a1a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023a1e:	f02c 0c07 	bic.w	ip, ip, #7
 8023a22:	ea43 0c0c 	orr.w	ip, r3, ip
 8023a26:	ea4c 0202 	orr.w	r2, ip, r2
 8023a2a:	f8a8 2000 	strh.w	r2, [r8]
 8023a2e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023a30:	f108 0802 	add.w	r8, r8, #2
 8023a34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023a38:	441c      	add	r4, r3
 8023a3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023a3c:	441e      	add	r6, r3
 8023a3e:	e6b9      	b.n	80237b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023a40:	24004280 	.word	0x24004280
 8023a44:	2800      	cmp	r0, #0
 8023a46:	d0ba      	beq.n	80239be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8023a48:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8023a4a:	442b      	add	r3, r5
 8023a4c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a50:	07db      	lsls	r3, r3, #31
 8023a52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a56:	bf54      	ite	pl
 8023a58:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023a5c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023a60:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a64:	fa5f f38c 	uxtb.w	r3, ip
 8023a68:	930c      	str	r3, [sp, #48]	@ 0x30
 8023a6a:	e7a8      	b.n	80239be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8023a6c:	f8b8 e000 	ldrh.w	lr, [r8]
 8023a70:	fa1f fa83 	uxth.w	sl, r3
 8023a74:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8023a78:	43db      	mvns	r3, r3
 8023a7a:	ea4f 202e 	mov.w	r0, lr, asr #8
 8023a7e:	fb11 f10a 	smulbb	r1, r1, sl
 8023a82:	b2db      	uxtb	r3, r3
 8023a84:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8023a88:	b2d2      	uxtb	r2, r2
 8023a8a:	fa5f fc8c 	uxtb.w	ip, ip
 8023a8e:	fb00 1003 	mla	r0, r0, r3, r1
 8023a92:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8023a96:	fb12 f20a 	smulbb	r2, r2, sl
 8023a9a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023a9e:	b280      	uxth	r0, r0
 8023aa0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023aa4:	fb1c fc0a 	smulbb	ip, ip, sl
 8023aa8:	fa5f fe8e 	uxtb.w	lr, lr
 8023aac:	fb0e 2203 	mla	r2, lr, r3, r2
 8023ab0:	fb01 cc03 	mla	ip, r1, r3, ip
 8023ab4:	1c43      	adds	r3, r0, #1
 8023ab6:	b292      	uxth	r2, r2
 8023ab8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023abc:	1c51      	adds	r1, r2, #1
 8023abe:	fa1f fc8c 	uxth.w	ip, ip
 8023ac2:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8023ac6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8023aca:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8023ace:	4308      	orrs	r0, r1
 8023ad0:	f10c 0101 	add.w	r1, ip, #1
 8023ad4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023ad8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023adc:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8023ae0:	ea40 000c 	orr.w	r0, r0, ip
 8023ae4:	f8a8 0000 	strh.w	r0, [r8]
 8023ae8:	e7a1      	b.n	8023a2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023aea:	b017      	add	sp, #92	@ 0x5c
 8023aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023af0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8023af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023af4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8023af8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8023afc:	2d00      	cmp	r5, #0
 8023afe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023b02:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8023b06:	fb05 0e03 	mla	lr, r5, r3, r0
 8023b0a:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8023b0e:	f2c0 80b0 	blt.w	8023c72 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8023b12:	45a9      	cmp	r9, r5
 8023b14:	f340 80ad 	ble.w	8023c72 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8023b18:	2800      	cmp	r0, #0
 8023b1a:	f2c0 80a8 	blt.w	8023c6e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8023b1e:	4580      	cmp	r8, r0
 8023b20:	f340 80a5 	ble.w	8023c6e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8023b24:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023b28:	f01e 0f01 	tst.w	lr, #1
 8023b2c:	5d16      	ldrb	r6, [r2, r4]
 8023b2e:	bf0c      	ite	eq
 8023b30:	f006 060f 	andeq.w	r6, r6, #15
 8023b34:	1136      	asrne	r6, r6, #4
 8023b36:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023b3a:	b2f6      	uxtb	r6, r6
 8023b3c:	1c44      	adds	r4, r0, #1
 8023b3e:	f100 809b 	bmi.w	8023c78 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8023b42:	45a0      	cmp	r8, r4
 8023b44:	f340 8098 	ble.w	8023c78 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8023b48:	2f00      	cmp	r7, #0
 8023b4a:	f000 8097 	beq.w	8023c7c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8023b4e:	f10e 0a01 	add.w	sl, lr, #1
 8023b52:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8023b56:	f01a 0f01 	tst.w	sl, #1
 8023b5a:	5d14      	ldrb	r4, [r2, r4]
 8023b5c:	bf0c      	ite	eq
 8023b5e:	f004 040f 	andeq.w	r4, r4, #15
 8023b62:	1124      	asrne	r4, r4, #4
 8023b64:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023b68:	b2e4      	uxtb	r4, r4
 8023b6a:	3501      	adds	r5, #1
 8023b6c:	f100 808a 	bmi.w	8023c84 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8023b70:	45a9      	cmp	r9, r5
 8023b72:	f340 8087 	ble.w	8023c84 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8023b76:	f1bc 0f00 	cmp.w	ip, #0
 8023b7a:	f000 8086 	beq.w	8023c8a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8023b7e:	2800      	cmp	r0, #0
 8023b80:	db7e      	blt.n	8023c80 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8023b82:	4580      	cmp	r8, r0
 8023b84:	dd7c      	ble.n	8023c80 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8023b86:	eb03 090e 	add.w	r9, r3, lr
 8023b8a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8023b8e:	f019 0f01 	tst.w	r9, #1
 8023b92:	5d55      	ldrb	r5, [r2, r5]
 8023b94:	bf0c      	ite	eq
 8023b96:	f005 050f 	andeq.w	r5, r5, #15
 8023b9a:	112d      	asrne	r5, r5, #4
 8023b9c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023ba0:	b2ed      	uxtb	r5, r5
 8023ba2:	3001      	adds	r0, #1
 8023ba4:	d474      	bmi.n	8023c90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8023ba6:	4580      	cmp	r8, r0
 8023ba8:	dd72      	ble.n	8023c90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8023baa:	2f00      	cmp	r7, #0
 8023bac:	d072      	beq.n	8023c94 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8023bae:	3301      	adds	r3, #1
 8023bb0:	449e      	add	lr, r3
 8023bb2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023bb6:	f01e 0f01 	tst.w	lr, #1
 8023bba:	5cd0      	ldrb	r0, [r2, r3]
 8023bbc:	bf0c      	ite	eq
 8023bbe:	f000 000f 	andeq.w	r0, r0, #15
 8023bc2:	1100      	asrne	r0, r0, #4
 8023bc4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023bc8:	b2c3      	uxtb	r3, r0
 8023bca:	b2ba      	uxth	r2, r7
 8023bcc:	fa1f fc8c 	uxth.w	ip, ip
 8023bd0:	fb02 f00c 	mul.w	r0, r2, ip
 8023bd4:	0112      	lsls	r2, r2, #4
 8023bd6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8023bda:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8023bde:	1a12      	subs	r2, r2, r0
 8023be0:	fa1f fc8c 	uxth.w	ip, ip
 8023be4:	b292      	uxth	r2, r2
 8023be6:	eba7 070c 	sub.w	r7, r7, ip
 8023bea:	4362      	muls	r2, r4
 8023bec:	b2bf      	uxth	r7, r7
 8023bee:	fb06 2207 	mla	r2, r6, r7, r2
 8023bf2:	fb0c 2505 	mla	r5, ip, r5, r2
 8023bf6:	fb00 5303 	mla	r3, r0, r3, r5
 8023bfa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023bfe:	b3a3      	cbz	r3, 8023c6a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8023c00:	4a25      	ldr	r2, [pc, #148]	@ (8023c98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8023c02:	880e      	ldrh	r6, [r1, #0]
 8023c04:	6815      	ldr	r5, [r2, #0]
 8023c06:	b29a      	uxth	r2, r3
 8023c08:	1234      	asrs	r4, r6, #8
 8023c0a:	43db      	mvns	r3, r3
 8023c0c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8023c10:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8023c14:	b2db      	uxtb	r3, r3
 8023c16:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8023c1a:	fb10 f002 	smulbb	r0, r0, r2
 8023c1e:	b2ed      	uxtb	r5, r5
 8023c20:	fb17 f702 	smulbb	r7, r7, r2
 8023c24:	fb04 0403 	mla	r4, r4, r3, r0
 8023c28:	10f0      	asrs	r0, r6, #3
 8023c2a:	fb15 f202 	smulbb	r2, r5, r2
 8023c2e:	00f6      	lsls	r6, r6, #3
 8023c30:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023c34:	b2a4      	uxth	r4, r4
 8023c36:	b2f6      	uxtb	r6, r6
 8023c38:	fb00 7003 	mla	r0, r0, r3, r7
 8023c3c:	fb06 2303 	mla	r3, r6, r3, r2
 8023c40:	b280      	uxth	r0, r0
 8023c42:	b29a      	uxth	r2, r3
 8023c44:	1c63      	adds	r3, r4, #1
 8023c46:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023c4a:	1c53      	adds	r3, r2, #1
 8023c4c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023c50:	1c42      	adds	r2, r0, #1
 8023c52:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8023c56:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023c5a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023c5e:	0940      	lsrs	r0, r0, #5
 8023c60:	4323      	orrs	r3, r4
 8023c62:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023c66:	4303      	orrs	r3, r0
 8023c68:	800b      	strh	r3, [r1, #0]
 8023c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c6e:	2600      	movs	r6, #0
 8023c70:	e764      	b.n	8023b3c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8023c72:	2400      	movs	r4, #0
 8023c74:	4626      	mov	r6, r4
 8023c76:	e778      	b.n	8023b6a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8023c78:	2400      	movs	r4, #0
 8023c7a:	e776      	b.n	8023b6a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8023c7c:	463c      	mov	r4, r7
 8023c7e:	e774      	b.n	8023b6a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8023c80:	2500      	movs	r5, #0
 8023c82:	e78e      	b.n	8023ba2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8023c84:	2300      	movs	r3, #0
 8023c86:	461d      	mov	r5, r3
 8023c88:	e79f      	b.n	8023bca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8023c8a:	4663      	mov	r3, ip
 8023c8c:	4665      	mov	r5, ip
 8023c8e:	e79c      	b.n	8023bca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8023c90:	2300      	movs	r3, #0
 8023c92:	e79a      	b.n	8023bca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8023c94:	463b      	mov	r3, r7
 8023c96:	e798      	b.n	8023bca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8023c98:	24004280 	.word	0x24004280

08023c9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ca0:	b093      	sub	sp, #76	@ 0x4c
 8023ca2:	461d      	mov	r5, r3
 8023ca4:	920c      	str	r2, [sp, #48]	@ 0x30
 8023ca6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023ca8:	9011      	str	r0, [sp, #68]	@ 0x44
 8023caa:	9107      	str	r1, [sp, #28]
 8023cac:	6850      	ldr	r0, [r2, #4]
 8023cae:	6812      	ldr	r2, [r2, #0]
 8023cb0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023cb4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8023cb8:	fb00 1303 	mla	r3, r0, r3, r1
 8023cbc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023cc0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023cc2:	689b      	ldr	r3, [r3, #8]
 8023cc4:	3301      	adds	r3, #1
 8023cc6:	f023 0301 	bic.w	r3, r3, #1
 8023cca:	9306      	str	r3, [sp, #24]
 8023ccc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023cce:	681f      	ldr	r7, [r3, #0]
 8023cd0:	9b07      	ldr	r3, [sp, #28]
 8023cd2:	2b00      	cmp	r3, #0
 8023cd4:	dc03      	bgt.n	8023cde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8023cd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023cd8:	2b00      	cmp	r3, #0
 8023cda:	f340 8267 	ble.w	80241ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8023cde:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023ce0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ce4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ce8:	1e48      	subs	r0, r1, #1
 8023cea:	f102 3cff 	add.w	ip, r2, #4294967295
 8023cee:	2d00      	cmp	r5, #0
 8023cf0:	f340 80b7 	ble.w	8023e62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023cf4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023cf8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023cfc:	d406      	bmi.n	8023d0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023cfe:	4586      	cmp	lr, r0
 8023d00:	da04      	bge.n	8023d0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	db02      	blt.n	8023d0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023d06:	4563      	cmp	r3, ip
 8023d08:	f2c0 80ac 	blt.w	8023e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8023d0c:	f11e 0e01 	adds.w	lr, lr, #1
 8023d10:	f100 809f 	bmi.w	8023e52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023d14:	4571      	cmp	r1, lr
 8023d16:	f2c0 809c 	blt.w	8023e52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023d1a:	3301      	adds	r3, #1
 8023d1c:	f100 8099 	bmi.w	8023e52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023d20:	429a      	cmp	r2, r3
 8023d22:	f2c0 8096 	blt.w	8023e52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023d26:	46c8      	mov	r8, r9
 8023d28:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8023d2c:	9509      	str	r5, [sp, #36]	@ 0x24
 8023d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d30:	2b00      	cmp	r3, #0
 8023d32:	f340 80b5 	ble.w	8023ea0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023d36:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023d3a:	1430      	asrs	r0, r6, #16
 8023d3c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023d40:	9308      	str	r3, [sp, #32]
 8023d42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023d44:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023d48:	1423      	asrs	r3, r4, #16
 8023d4a:	f100 813f 	bmi.w	8023fcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023d4e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8023d52:	455b      	cmp	r3, fp
 8023d54:	f280 813a 	bge.w	8023fcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023d58:	2800      	cmp	r0, #0
 8023d5a:	f2c0 8137 	blt.w	8023fcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023d5e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023d62:	4558      	cmp	r0, fp
 8023d64:	f280 8132 	bge.w	8023fcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023d68:	9a06      	ldr	r2, [sp, #24]
 8023d6a:	fb00 3302 	mla	r3, r0, r2, r3
 8023d6e:	0858      	lsrs	r0, r3, #1
 8023d70:	07da      	lsls	r2, r3, #31
 8023d72:	9a08      	ldr	r2, [sp, #32]
 8023d74:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023d78:	bf54      	ite	pl
 8023d7a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023d7e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023d82:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023d86:	fa5f fc8c 	uxtb.w	ip, ip
 8023d8a:	2a00      	cmp	r2, #0
 8023d8c:	f000 80cc 	beq.w	8023f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023d90:	1c58      	adds	r0, r3, #1
 8023d92:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023d96:	07c0      	lsls	r0, r0, #31
 8023d98:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023d9c:	bf54      	ite	pl
 8023d9e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023da2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023da6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023daa:	fa5f fe8e 	uxtb.w	lr, lr
 8023dae:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8023db2:	b1b9      	cbz	r1, 8023de4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023db4:	4453      	add	r3, sl
 8023db6:	0858      	lsrs	r0, r3, #1
 8023db8:	07da      	lsls	r2, r3, #31
 8023dba:	5c38      	ldrb	r0, [r7, r0]
 8023dbc:	bf54      	ite	pl
 8023dbe:	f000 000f 	andpl.w	r0, r0, #15
 8023dc2:	1100      	asrmi	r0, r0, #4
 8023dc4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023dc8:	b2c0      	uxtb	r0, r0
 8023dca:	900a      	str	r0, [sp, #40]	@ 0x28
 8023dcc:	1c58      	adds	r0, r3, #1
 8023dce:	0843      	lsrs	r3, r0, #1
 8023dd0:	07c2      	lsls	r2, r0, #31
 8023dd2:	5cfb      	ldrb	r3, [r7, r3]
 8023dd4:	bf54      	ite	pl
 8023dd6:	f003 030f 	andpl.w	r3, r3, #15
 8023dda:	111b      	asrmi	r3, r3, #4
 8023ddc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023de0:	b2db      	uxtb	r3, r3
 8023de2:	930e      	str	r3, [sp, #56]	@ 0x38
 8023de4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023de8:	b289      	uxth	r1, r1
 8023dea:	fb02 f301 	mul.w	r3, r2, r1
 8023dee:	0112      	lsls	r2, r2, #4
 8023df0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023df4:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8023df8:	1ad2      	subs	r2, r2, r3
 8023dfa:	b289      	uxth	r1, r1
 8023dfc:	b292      	uxth	r2, r2
 8023dfe:	1a40      	subs	r0, r0, r1
 8023e00:	fa1f fe80 	uxth.w	lr, r0
 8023e04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023e06:	4342      	muls	r2, r0
 8023e08:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023e0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023e0e:	fb01 c102 	mla	r1, r1, r2, ip
 8023e12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023e14:	fb03 1302 	mla	r3, r3, r2, r1
 8023e18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023e1c:	2bff      	cmp	r3, #255	@ 0xff
 8023e1e:	f040 8094 	bne.w	8023f4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8023e22:	4bbf      	ldr	r3, [pc, #764]	@ (8024120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8023e24:	681a      	ldr	r2, [r3, #0]
 8023e26:	4bbf      	ldr	r3, [pc, #764]	@ (8024124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8023e28:	0951      	lsrs	r1, r2, #5
 8023e2a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8023e2e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023e32:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023e36:	430b      	orrs	r3, r1
 8023e38:	4313      	orrs	r3, r2
 8023e3a:	f8a8 3000 	strh.w	r3, [r8]
 8023e3e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023e40:	f108 0802 	add.w	r8, r8, #2
 8023e44:	441c      	add	r4, r3
 8023e46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023e48:	441e      	add	r6, r3
 8023e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e4c:	3b01      	subs	r3, #1
 8023e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e50:	e76d      	b.n	8023d2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023e52:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023e54:	3d01      	subs	r5, #1
 8023e56:	f109 0902 	add.w	r9, r9, #2
 8023e5a:	441c      	add	r4, r3
 8023e5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023e5e:	441e      	add	r6, r3
 8023e60:	e745      	b.n	8023cee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023e62:	d021      	beq.n	8023ea8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023e64:	1e6b      	subs	r3, r5, #1
 8023e66:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8023e68:	fb00 4003 	mla	r0, r0, r3, r4
 8023e6c:	1400      	asrs	r0, r0, #16
 8023e6e:	f53f af5a 	bmi.w	8023d26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023e72:	3901      	subs	r1, #1
 8023e74:	4288      	cmp	r0, r1
 8023e76:	f6bf af56 	bge.w	8023d26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023e7a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8023e7c:	fb01 6303 	mla	r3, r1, r3, r6
 8023e80:	141b      	asrs	r3, r3, #16
 8023e82:	f53f af50 	bmi.w	8023d26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023e86:	3a01      	subs	r2, #1
 8023e88:	4293      	cmp	r3, r2
 8023e8a:	f6bf af4c 	bge.w	8023d26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023e8e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023e92:	46a8      	mov	r8, r5
 8023e94:	46ce      	mov	lr, r9
 8023e96:	9308      	str	r3, [sp, #32]
 8023e98:	f1b8 0f00 	cmp.w	r8, #0
 8023e9c:	f300 80b6 	bgt.w	802400c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023ea0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023ea4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023ea8:	9b07      	ldr	r3, [sp, #28]
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	f340 817e 	ble.w	80241ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8023eb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023eb4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023eb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023eba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023ebe:	eef0 6a62 	vmov.f32	s13, s5
 8023ec2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023ec6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023eca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ece:	ee16 4a90 	vmov	r4, s13
 8023ed2:	eef0 6a43 	vmov.f32	s13, s6
 8023ed6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023eda:	ee16 6a90 	vmov	r6, s13
 8023ede:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023ee2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023ee6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023eea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023eee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023ef2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023ef6:	ee12 2a90 	vmov	r2, s5
 8023efa:	eef0 2a47 	vmov.f32	s5, s14
 8023efe:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f02:	ee13 2a10 	vmov	r2, s6
 8023f06:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023f08:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023f0a:	eeb0 3a67 	vmov.f32	s6, s15
 8023f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f12:	9320      	str	r3, [sp, #128]	@ 0x80
 8023f14:	9b07      	ldr	r3, [sp, #28]
 8023f16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023f18:	3b01      	subs	r3, #1
 8023f1a:	9307      	str	r3, [sp, #28]
 8023f1c:	bf08      	it	eq
 8023f1e:	4615      	moveq	r5, r2
 8023f20:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023f22:	bf18      	it	ne
 8023f24:	461d      	movne	r5, r3
 8023f26:	e6d3      	b.n	8023cd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8023f28:	2900      	cmp	r1, #0
 8023f2a:	f43f af5b 	beq.w	8023de4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023f2e:	eb0a 0003 	add.w	r0, sl, r3
 8023f32:	0843      	lsrs	r3, r0, #1
 8023f34:	07c0      	lsls	r0, r0, #31
 8023f36:	5cfb      	ldrb	r3, [r7, r3]
 8023f38:	bf54      	ite	pl
 8023f3a:	f003 030f 	andpl.w	r3, r3, #15
 8023f3e:	111b      	asrmi	r3, r3, #4
 8023f40:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023f44:	b2db      	uxtb	r3, r3
 8023f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8023f48:	e74c      	b.n	8023de4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	f43f af77 	beq.w	8023e3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023f50:	4a73      	ldr	r2, [pc, #460]	@ (8024120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8023f52:	fa1f fe83 	uxth.w	lr, r3
 8023f56:	f8b8 c000 	ldrh.w	ip, [r8]
 8023f5a:	43db      	mvns	r3, r3
 8023f5c:	6810      	ldr	r0, [r2, #0]
 8023f5e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8023f62:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8023f66:	b2db      	uxtb	r3, r3
 8023f68:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023f6c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8023f70:	fb12 f20e 	smulbb	r2, r2, lr
 8023f74:	b2c0      	uxtb	r0, r0
 8023f76:	fb1b fb0e 	smulbb	fp, fp, lr
 8023f7a:	fb01 2103 	mla	r1, r1, r3, r2
 8023f7e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023f82:	fb10 fe0e 	smulbb	lr, r0, lr
 8023f86:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023f8a:	b289      	uxth	r1, r1
 8023f8c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023f90:	fa5f fc8c 	uxtb.w	ip, ip
 8023f94:	fb02 b203 	mla	r2, r2, r3, fp
 8023f98:	1c48      	adds	r0, r1, #1
 8023f9a:	fb0c e303 	mla	r3, ip, r3, lr
 8023f9e:	b292      	uxth	r2, r2
 8023fa0:	b29b      	uxth	r3, r3
 8023fa2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023fa6:	f102 0b01 	add.w	fp, r2, #1
 8023faa:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 8023fae:	1c59      	adds	r1, r3, #1
 8023fb0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023fb4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023fb8:	0952      	lsrs	r2, r2, #5
 8023fba:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8023fbe:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023fc2:	4301      	orrs	r1, r0
 8023fc4:	4311      	orrs	r1, r2
 8023fc6:	f8a8 1000 	strh.w	r1, [r8]
 8023fca:	e738      	b.n	8023e3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023fcc:	f113 0b01 	adds.w	fp, r3, #1
 8023fd0:	f53f af35 	bmi.w	8023e3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023fd4:	45dc      	cmp	ip, fp
 8023fd6:	f6ff af32 	blt.w	8023e3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023fda:	f110 0b01 	adds.w	fp, r0, #1
 8023fde:	f53f af2e 	bmi.w	8023e3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023fe2:	45de      	cmp	lr, fp
 8023fe4:	f6ff af2b 	blt.w	8023e3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023fe8:	9302      	str	r3, [sp, #8]
 8023fea:	fa0f f38e 	sxth.w	r3, lr
 8023fee:	9a08      	ldr	r2, [sp, #32]
 8023ff0:	9301      	str	r3, [sp, #4]
 8023ff2:	fa0f f38c 	sxth.w	r3, ip
 8023ff6:	9105      	str	r1, [sp, #20]
 8023ff8:	4641      	mov	r1, r8
 8023ffa:	9300      	str	r3, [sp, #0]
 8023ffc:	4653      	mov	r3, sl
 8023ffe:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024002:	463a      	mov	r2, r7
 8024004:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024006:	f7ff fd73 	bl	8023af0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802400a:	e718      	b.n	8023e3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802400c:	1422      	asrs	r2, r4, #16
 802400e:	9906      	ldr	r1, [sp, #24]
 8024010:	1433      	asrs	r3, r6, #16
 8024012:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024016:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802401a:	fb01 2303 	mla	r3, r1, r3, r2
 802401e:	085a      	lsrs	r2, r3, #1
 8024020:	07d9      	lsls	r1, r3, #31
 8024022:	5cba      	ldrb	r2, [r7, r2]
 8024024:	bf54      	ite	pl
 8024026:	f002 020f 	andpl.w	r2, r2, #15
 802402a:	1112      	asrmi	r2, r2, #4
 802402c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024030:	b2d2      	uxtb	r2, r2
 8024032:	2800      	cmp	r0, #0
 8024034:	d063      	beq.n	80240fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8024036:	f103 0a01 	add.w	sl, r3, #1
 802403a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802403e:	f01a 0f01 	tst.w	sl, #1
 8024042:	5c79      	ldrb	r1, [r7, r1]
 8024044:	bf0c      	ite	eq
 8024046:	f001 010f 	andeq.w	r1, r1, #15
 802404a:	1109      	asrne	r1, r1, #4
 802404c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024050:	b2c9      	uxtb	r1, r1
 8024052:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024054:	f1bc 0f00 	cmp.w	ip, #0
 8024058:	d01a      	beq.n	8024090 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802405a:	9908      	ldr	r1, [sp, #32]
 802405c:	440b      	add	r3, r1
 802405e:	0859      	lsrs	r1, r3, #1
 8024060:	f013 0f01 	tst.w	r3, #1
 8024064:	f103 0301 	add.w	r3, r3, #1
 8024068:	5c79      	ldrb	r1, [r7, r1]
 802406a:	bf0c      	ite	eq
 802406c:	f001 010f 	andeq.w	r1, r1, #15
 8024070:	1109      	asrne	r1, r1, #4
 8024072:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024076:	b2c9      	uxtb	r1, r1
 8024078:	910b      	str	r1, [sp, #44]	@ 0x2c
 802407a:	0859      	lsrs	r1, r3, #1
 802407c:	07db      	lsls	r3, r3, #31
 802407e:	5c79      	ldrb	r1, [r7, r1]
 8024080:	bf54      	ite	pl
 8024082:	f001 010f 	andpl.w	r1, r1, #15
 8024086:	1109      	asrmi	r1, r1, #4
 8024088:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802408c:	b2c9      	uxtb	r1, r1
 802408e:	9110      	str	r1, [sp, #64]	@ 0x40
 8024090:	b280      	uxth	r0, r0
 8024092:	fa1f fc8c 	uxth.w	ip, ip
 8024096:	fb00 f30c 	mul.w	r3, r0, ip
 802409a:	0100      	lsls	r0, r0, #4
 802409c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80240a0:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80240a4:	1ac0      	subs	r0, r0, r3
 80240a6:	fa1f fc8c 	uxth.w	ip, ip
 80240aa:	b280      	uxth	r0, r0
 80240ac:	eba1 010c 	sub.w	r1, r1, ip
 80240b0:	fa1f fa81 	uxth.w	sl, r1
 80240b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80240b6:	4348      	muls	r0, r1
 80240b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80240ba:	fb02 020a 	mla	r2, r2, sl, r0
 80240be:	fb0c 2c01 	mla	ip, ip, r1, r2
 80240c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80240c4:	fb03 c302 	mla	r3, r3, r2, ip
 80240c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80240cc:	2bff      	cmp	r3, #255	@ 0xff
 80240ce:	d12b      	bne.n	8024128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80240d0:	4b13      	ldr	r3, [pc, #76]	@ (8024120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80240d2:	681a      	ldr	r2, [r3, #0]
 80240d4:	4b13      	ldr	r3, [pc, #76]	@ (8024124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80240d6:	0951      	lsrs	r1, r2, #5
 80240d8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80240dc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80240e0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80240e4:	430b      	orrs	r3, r1
 80240e6:	4313      	orrs	r3, r2
 80240e8:	f8ae 3000 	strh.w	r3, [lr]
 80240ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80240ee:	f10e 0e02 	add.w	lr, lr, #2
 80240f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80240f6:	441c      	add	r4, r3
 80240f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80240fa:	441e      	add	r6, r3
 80240fc:	e6cc      	b.n	8023e98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80240fe:	f1bc 0f00 	cmp.w	ip, #0
 8024102:	d0c5      	beq.n	8024090 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024104:	9908      	ldr	r1, [sp, #32]
 8024106:	440b      	add	r3, r1
 8024108:	0859      	lsrs	r1, r3, #1
 802410a:	07db      	lsls	r3, r3, #31
 802410c:	5c79      	ldrb	r1, [r7, r1]
 802410e:	bf54      	ite	pl
 8024110:	f001 010f 	andpl.w	r1, r1, #15
 8024114:	1109      	asrmi	r1, r1, #4
 8024116:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802411a:	b2c9      	uxtb	r1, r1
 802411c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802411e:	e7b7      	b.n	8024090 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024120:	24004280 	.word	0x24004280
 8024124:	fffff800 	.word	0xfffff800
 8024128:	2b00      	cmp	r3, #0
 802412a:	d0df      	beq.n	80240ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802412c:	4a21      	ldr	r2, [pc, #132]	@ (80241b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802412e:	fa1f fa83 	uxth.w	sl, r3
 8024132:	f8be c000 	ldrh.w	ip, [lr]
 8024136:	43db      	mvns	r3, r3
 8024138:	6810      	ldr	r0, [r2, #0]
 802413a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802413e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024142:	b2db      	uxtb	r3, r3
 8024144:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8024148:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802414c:	fb12 f20a 	smulbb	r2, r2, sl
 8024150:	b2c0      	uxtb	r0, r0
 8024152:	fb1b fb0a 	smulbb	fp, fp, sl
 8024156:	fb01 2103 	mla	r1, r1, r3, r2
 802415a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802415e:	fb10 f00a 	smulbb	r0, r0, sl
 8024162:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024166:	b289      	uxth	r1, r1
 8024168:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802416c:	fa5f fc8c 	uxtb.w	ip, ip
 8024170:	fb02 b203 	mla	r2, r2, r3, fp
 8024174:	fb0c 0003 	mla	r0, ip, r3, r0
 8024178:	1c4b      	adds	r3, r1, #1
 802417a:	b292      	uxth	r2, r2
 802417c:	b280      	uxth	r0, r0
 802417e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024182:	f100 0b01 	add.w	fp, r0, #1
 8024186:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802418a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802418e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8024192:	ea4b 0101 	orr.w	r1, fp, r1
 8024196:	f102 0b01 	add.w	fp, r2, #1
 802419a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802419e:	0952      	lsrs	r2, r2, #5
 80241a0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80241a4:	4311      	orrs	r1, r2
 80241a6:	f8ae 1000 	strh.w	r1, [lr]
 80241aa:	e79f      	b.n	80240ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80241ac:	b013      	add	sp, #76	@ 0x4c
 80241ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241b2:	bf00      	nop
 80241b4:	24004280 	.word	0x24004280

080241b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 80241b8:	b570      	push	{r4, r5, r6, lr}
 80241ba:	1208      	asrs	r0, r1, #8
 80241bc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80241c0:	b29e      	uxth	r6, r3
 80241c2:	1213      	asrs	r3, r2, #8
 80241c4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80241c8:	10cc      	asrs	r4, r1, #3
 80241ca:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80241ce:	00c9      	lsls	r1, r1, #3
 80241d0:	fb10 f006 	smulbb	r0, r0, r6
 80241d4:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80241d8:	fb13 f305 	smulbb	r3, r3, r5
 80241dc:	fb14 f406 	smulbb	r4, r4, r6
 80241e0:	4418      	add	r0, r3
 80241e2:	10d3      	asrs	r3, r2, #3
 80241e4:	00d2      	lsls	r2, r2, #3
 80241e6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80241ea:	b280      	uxth	r0, r0
 80241ec:	b2d2      	uxtb	r2, r2
 80241ee:	fb13 f305 	smulbb	r3, r3, r5
 80241f2:	fb12 f205 	smulbb	r2, r2, r5
 80241f6:	441c      	add	r4, r3
 80241f8:	b2cb      	uxtb	r3, r1
 80241fa:	fb13 f306 	smulbb	r3, r3, r6
 80241fe:	b2a4      	uxth	r4, r4
 8024200:	4413      	add	r3, r2
 8024202:	1c42      	adds	r2, r0, #1
 8024204:	b29b      	uxth	r3, r3
 8024206:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802420a:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802420e:	1c58      	adds	r0, r3, #1
 8024210:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024214:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024218:	4310      	orrs	r0, r2
 802421a:	1c62      	adds	r2, r4, #1
 802421c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8024220:	0964      	lsrs	r4, r4, #5
 8024222:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8024226:	4320      	orrs	r0, r4
 8024228:	bd70      	pop	{r4, r5, r6, pc}
	...

0802422c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024230:	b08f      	sub	sp, #60	@ 0x3c
 8024232:	461c      	mov	r4, r3
 8024234:	460d      	mov	r5, r1
 8024236:	4616      	mov	r6, r2
 8024238:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802423c:	9004      	str	r0, [sp, #16]
 802423e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024240:	2f00      	cmp	r7, #0
 8024242:	f000 80f6 	beq.w	8024432 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8024246:	6820      	ldr	r0, [r4, #0]
 8024248:	aa0a      	add	r2, sp, #40	@ 0x28
 802424a:	6861      	ldr	r1, [r4, #4]
 802424c:	f04f 0802 	mov.w	r8, #2
 8024250:	3604      	adds	r6, #4
 8024252:	c203      	stmia	r2!, {r0, r1}
 8024254:	6818      	ldr	r0, [r3, #0]
 8024256:	aa0c      	add	r2, sp, #48	@ 0x30
 8024258:	6859      	ldr	r1, [r3, #4]
 802425a:	c203      	stmia	r2!, {r0, r1}
 802425c:	a80a      	add	r0, sp, #40	@ 0x28
 802425e:	f7f0 fa29 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024262:	4621      	mov	r1, r4
 8024264:	a80c      	add	r0, sp, #48	@ 0x30
 8024266:	f7f0 fa4d 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802426a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802426e:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8024272:	f002 0301 	and.w	r3, r2, #1
 8024276:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802427a:	9306      	str	r3, [sp, #24]
 802427c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024280:	f003 0101 	and.w	r1, r3, #1
 8024284:	9105      	str	r1, [sp, #20]
 8024286:	9805      	ldr	r0, [sp, #20]
 8024288:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802428c:	4403      	add	r3, r0
 802428e:	fb01 2303 	mla	r3, r1, r3, r2
 8024292:	fb93 f3f8 	sdiv	r3, r3, r8
 8024296:	441d      	add	r5, r3
 8024298:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802429c:	441a      	add	r2, r3
 802429e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80242a2:	4419      	add	r1, r3
 80242a4:	4b64      	ldr	r3, [pc, #400]	@ (8024438 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80242a6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80242aa:	6818      	ldr	r0, [r3, #0]
 80242ac:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80242b0:	6803      	ldr	r3, [r0, #0]
 80242b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80242b4:	4798      	blx	r3
 80242b6:	4a61      	ldr	r2, [pc, #388]	@ (802443c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 80242b8:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80242bc:	2fff      	cmp	r7, #255	@ 0xff
 80242be:	8813      	ldrh	r3, [r2, #0]
 80242c0:	4611      	mov	r1, r2
 80242c2:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 80242c6:	fb03 fb0b 	mul.w	fp, r3, fp
 80242ca:	fb03 a404 	mla	r4, r3, r4, sl
 80242ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80242d2:	d06b      	beq.n	80243ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 80242d4:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 80242d8:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80242dc:	9303      	str	r3, [sp, #12]
 80242de:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 80242e2:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80242e6:	9b07      	ldr	r3, [sp, #28]
 80242e8:	42a3      	cmp	r3, r4
 80242ea:	f240 809d 	bls.w	8024428 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 80242ee:	9b06      	ldr	r3, [sp, #24]
 80242f0:	2b00      	cmp	r3, #0
 80242f2:	d039      	beq.n	8024368 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 80242f4:	782b      	ldrb	r3, [r5, #0]
 80242f6:	f105 0801 	add.w	r8, r5, #1
 80242fa:	f109 3bff 	add.w	fp, r9, #4294967295
 80242fe:	8822      	ldrh	r2, [r4, #0]
 8024300:	f003 030f 	and.w	r3, r3, #15
 8024304:	9804      	ldr	r0, [sp, #16]
 8024306:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802430a:	9b03      	ldr	r3, [sp, #12]
 802430c:	9300      	str	r3, [sp, #0]
 802430e:	463b      	mov	r3, r7
 8024310:	f7ff ff52 	bl	80241b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8024314:	f824 0b02 	strh.w	r0, [r4], #2
 8024318:	f1bb 0f01 	cmp.w	fp, #1
 802431c:	46a2      	mov	sl, r4
 802431e:	f104 0404 	add.w	r4, r4, #4
 8024322:	dd24      	ble.n	802436e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 8024324:	f898 3000 	ldrb.w	r3, [r8]
 8024328:	f1ab 0b02 	sub.w	fp, fp, #2
 802432c:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8024330:	091b      	lsrs	r3, r3, #4
 8024332:	9804      	ldr	r0, [sp, #16]
 8024334:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8024338:	9b03      	ldr	r3, [sp, #12]
 802433a:	9300      	str	r3, [sp, #0]
 802433c:	463b      	mov	r3, r7
 802433e:	f7ff ff3b 	bl	80241b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8024342:	f824 0c04 	strh.w	r0, [r4, #-4]
 8024346:	f818 3b01 	ldrb.w	r3, [r8], #1
 802434a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802434e:	f003 030f 	and.w	r3, r3, #15
 8024352:	9804      	ldr	r0, [sp, #16]
 8024354:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8024358:	9b03      	ldr	r3, [sp, #12]
 802435a:	9300      	str	r3, [sp, #0]
 802435c:	463b      	mov	r3, r7
 802435e:	f7ff ff2b 	bl	80241b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8024362:	f824 0c02 	strh.w	r0, [r4, #-2]
 8024366:	e7d7      	b.n	8024318 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8024368:	46a8      	mov	r8, r5
 802436a:	46cb      	mov	fp, r9
 802436c:	e7d4      	b.n	8024318 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802436e:	d10e      	bne.n	802438e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8024370:	f898 3000 	ldrb.w	r3, [r8]
 8024374:	f8ba 2000 	ldrh.w	r2, [sl]
 8024378:	091b      	lsrs	r3, r3, #4
 802437a:	9804      	ldr	r0, [sp, #16]
 802437c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8024380:	9b03      	ldr	r3, [sp, #12]
 8024382:	9300      	str	r3, [sp, #0]
 8024384:	463b      	mov	r3, r7
 8024386:	f7ff ff17 	bl	80241b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802438a:	f82a 0b02 	strh.w	r0, [sl], #2
 802438e:	9b08      	ldr	r3, [sp, #32]
 8024390:	9a05      	ldr	r2, [sp, #20]
 8024392:	881c      	ldrh	r4, [r3, #0]
 8024394:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024398:	eba4 0409 	sub.w	r4, r4, r9
 802439c:	4413      	add	r3, r2
 802439e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80243a0:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 80243a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80243a8:	441d      	add	r5, r3
 80243aa:	e79c      	b.n	80242e6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 80243ac:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 80243b0:	45a3      	cmp	fp, r4
 80243b2:	d939      	bls.n	8024428 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 80243b4:	9b06      	ldr	r3, [sp, #24]
 80243b6:	b1fb      	cbz	r3, 80243f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 80243b8:	782b      	ldrb	r3, [r5, #0]
 80243ba:	1c6a      	adds	r2, r5, #1
 80243bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80243c0:	3402      	adds	r4, #2
 80243c2:	f003 030f 	and.w	r3, r3, #15
 80243c6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80243ca:	f824 3c02 	strh.w	r3, [r4, #-2]
 80243ce:	2801      	cmp	r0, #1
 80243d0:	4623      	mov	r3, r4
 80243d2:	f104 0404 	add.w	r4, r4, #4
 80243d6:	dd12      	ble.n	80243fe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 80243d8:	7813      	ldrb	r3, [r2, #0]
 80243da:	3802      	subs	r0, #2
 80243dc:	091b      	lsrs	r3, r3, #4
 80243de:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80243e2:	f824 3c04 	strh.w	r3, [r4, #-4]
 80243e6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80243ea:	f003 030f 	and.w	r3, r3, #15
 80243ee:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80243f2:	f824 3c02 	strh.w	r3, [r4, #-2]
 80243f6:	e7ea      	b.n	80243ce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80243f8:	462a      	mov	r2, r5
 80243fa:	4648      	mov	r0, r9
 80243fc:	e7e7      	b.n	80243ce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80243fe:	d106      	bne.n	802440e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8024400:	7812      	ldrb	r2, [r2, #0]
 8024402:	3302      	adds	r3, #2
 8024404:	0912      	lsrs	r2, r2, #4
 8024406:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802440a:	f823 2c02 	strh.w	r2, [r3, #-2]
 802440e:	880c      	ldrh	r4, [r1, #0]
 8024410:	9a05      	ldr	r2, [sp, #20]
 8024412:	eba4 0409 	sub.w	r4, r4, r9
 8024416:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802441a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802441e:	4413      	add	r3, r2
 8024420:	fb93 f3f8 	sdiv	r3, r3, r8
 8024424:	441d      	add	r5, r3
 8024426:	e7c3      	b.n	80243b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 8024428:	4b03      	ldr	r3, [pc, #12]	@ (8024438 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802442a:	6818      	ldr	r0, [r3, #0]
 802442c:	6803      	ldr	r3, [r0, #0]
 802442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024430:	4798      	blx	r3
 8024432:	b00f      	add	sp, #60	@ 0x3c
 8024434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024438:	24004278 	.word	0x24004278
 802443c:	24004272 	.word	0x24004272

08024440 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8024440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024442:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8024446:	0a0f      	lsrs	r7, r1, #8
 8024448:	2dff      	cmp	r5, #255	@ 0xff
 802444a:	d10c      	bne.n	8024466 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802444c:	2bff      	cmp	r3, #255	@ 0xff
 802444e:	d10a      	bne.n	8024466 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8024450:	0948      	lsrs	r0, r1, #5
 8024452:	4b25      	ldr	r3, [pc, #148]	@ (80244e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8024454:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8024458:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802445c:	403b      	ands	r3, r7
 802445e:	4318      	orrs	r0, r3
 8024460:	4308      	orrs	r0, r1
 8024462:	b280      	uxth	r0, r0
 8024464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024466:	fb15 f503 	smulbb	r5, r5, r3
 802446a:	1214      	asrs	r4, r2, #8
 802446c:	10d6      	asrs	r6, r2, #3
 802446e:	b2ab      	uxth	r3, r5
 8024470:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8024474:	00d0      	lsls	r0, r2, #3
 8024476:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802447a:	1c5d      	adds	r5, r3, #1
 802447c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024480:	b2c0      	uxtb	r0, r0
 8024482:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8024486:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802448a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802448e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024492:	fa1f fc85 	uxth.w	ip, r5
 8024496:	43ed      	mvns	r5, r5
 8024498:	fb12 f20c 	smulbb	r2, r2, ip
 802449c:	b2eb      	uxtb	r3, r5
 802449e:	b2fd      	uxtb	r5, r7
 80244a0:	fb04 2403 	mla	r4, r4, r3, r2
 80244a4:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 80244a8:	fb15 f50c 	smulbb	r5, r5, ip
 80244ac:	b2c8      	uxtb	r0, r1
 80244ae:	b2a4      	uxth	r4, r4
 80244b0:	fb10 f00c 	smulbb	r0, r0, ip
 80244b4:	fb06 5503 	mla	r5, r6, r3, r5
 80244b8:	fb02 0003 	mla	r0, r2, r3, r0
 80244bc:	b2ad      	uxth	r5, r5
 80244be:	b283      	uxth	r3, r0
 80244c0:	1c60      	adds	r0, r4, #1
 80244c2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80244c6:	1c58      	adds	r0, r3, #1
 80244c8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80244cc:	1c6b      	adds	r3, r5, #1
 80244ce:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80244d2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80244d6:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80244da:	096d      	lsrs	r5, r5, #5
 80244dc:	4320      	orrs	r0, r4
 80244de:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80244e2:	4328      	orrs	r0, r5
 80244e4:	e7be      	b.n	8024464 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 80244e6:	bf00      	nop
 80244e8:	00fff800 	.word	0x00fff800

080244ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80244ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244f0:	461c      	mov	r4, r3
 80244f2:	b08d      	sub	sp, #52	@ 0x34
 80244f4:	460d      	mov	r5, r1
 80244f6:	4616      	mov	r6, r2
 80244f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80244fa:	4680      	mov	r8, r0
 80244fc:	6861      	ldr	r1, [r4, #4]
 80244fe:	aa08      	add	r2, sp, #32
 8024500:	6820      	ldr	r0, [r4, #0]
 8024502:	f04f 0a02 	mov.w	sl, #2
 8024506:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802450a:	3604      	adds	r6, #4
 802450c:	c203      	stmia	r2!, {r0, r1}
 802450e:	6818      	ldr	r0, [r3, #0]
 8024510:	aa0a      	add	r2, sp, #40	@ 0x28
 8024512:	6859      	ldr	r1, [r3, #4]
 8024514:	c203      	stmia	r2!, {r0, r1}
 8024516:	a808      	add	r0, sp, #32
 8024518:	f7f0 f8cc 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802451c:	4621      	mov	r1, r4
 802451e:	a80a      	add	r0, sp, #40	@ 0x28
 8024520:	f7f0 f8f0 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024524:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8024528:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 802452c:	f002 0301 	and.w	r3, r2, #1
 8024530:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8024534:	9303      	str	r3, [sp, #12]
 8024536:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802453a:	f003 0101 	and.w	r1, r3, #1
 802453e:	9102      	str	r1, [sp, #8]
 8024540:	9802      	ldr	r0, [sp, #8]
 8024542:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8024546:	4403      	add	r3, r0
 8024548:	fb01 2303 	mla	r3, r1, r3, r2
 802454c:	fb93 f3fa 	sdiv	r3, r3, sl
 8024550:	441d      	add	r5, r3
 8024552:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8024556:	441a      	add	r2, r3
 8024558:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802455c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8024560:	4419      	add	r1, r3
 8024562:	4a3e      	ldr	r2, [pc, #248]	@ (802465c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8024564:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8024568:	6810      	ldr	r0, [r2, #0]
 802456a:	9205      	str	r2, [sp, #20]
 802456c:	6803      	ldr	r3, [r0, #0]
 802456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024570:	4798      	blx	r3
 8024572:	4b3b      	ldr	r3, [pc, #236]	@ (8024660 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8024574:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8024578:	8819      	ldrh	r1, [r3, #0]
 802457a:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802457e:	434f      	muls	r7, r1
 8024580:	fb01 c404 	mla	r4, r1, r4, ip
 8024584:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8024588:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802458c:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8024590:	9204      	str	r2, [sp, #16]
 8024592:	9b04      	ldr	r3, [sp, #16]
 8024594:	429c      	cmp	r4, r3
 8024596:	d258      	bcs.n	802464a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8024598:	9b03      	ldr	r3, [sp, #12]
 802459a:	2b00      	cmp	r3, #0
 802459c:	d034      	beq.n	8024608 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802459e:	782b      	ldrb	r3, [r5, #0]
 80245a0:	1c6f      	adds	r7, r5, #1
 80245a2:	f003 030f 	and.w	r3, r3, #15
 80245a6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80245aa:	0e0b      	lsrs	r3, r1, #24
 80245ac:	d006      	beq.n	80245bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 80245ae:	8822      	ldrh	r2, [r4, #0]
 80245b0:	4640      	mov	r0, r8
 80245b2:	9300      	str	r3, [sp, #0]
 80245b4:	464b      	mov	r3, r9
 80245b6:	f7ff ff43 	bl	8024440 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80245ba:	8020      	strh	r0, [r4, #0]
 80245bc:	3402      	adds	r4, #2
 80245be:	f10b 3aff 	add.w	sl, fp, #4294967295
 80245c2:	f1ba 0f01 	cmp.w	sl, #1
 80245c6:	dd22      	ble.n	802460e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80245c8:	783b      	ldrb	r3, [r7, #0]
 80245ca:	091b      	lsrs	r3, r3, #4
 80245cc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80245d0:	0e0b      	lsrs	r3, r1, #24
 80245d2:	d006      	beq.n	80245e2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 80245d4:	8822      	ldrh	r2, [r4, #0]
 80245d6:	4640      	mov	r0, r8
 80245d8:	9300      	str	r3, [sp, #0]
 80245da:	464b      	mov	r3, r9
 80245dc:	f7ff ff30 	bl	8024440 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80245e0:	8020      	strh	r0, [r4, #0]
 80245e2:	f817 3b01 	ldrb.w	r3, [r7], #1
 80245e6:	f003 030f 	and.w	r3, r3, #15
 80245ea:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80245ee:	0e0b      	lsrs	r3, r1, #24
 80245f0:	d006      	beq.n	8024600 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 80245f2:	8862      	ldrh	r2, [r4, #2]
 80245f4:	4640      	mov	r0, r8
 80245f6:	9300      	str	r3, [sp, #0]
 80245f8:	464b      	mov	r3, r9
 80245fa:	f7ff ff21 	bl	8024440 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80245fe:	8060      	strh	r0, [r4, #2]
 8024600:	3404      	adds	r4, #4
 8024602:	f1aa 0a02 	sub.w	sl, sl, #2
 8024606:	e7dc      	b.n	80245c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8024608:	462f      	mov	r7, r5
 802460a:	46da      	mov	sl, fp
 802460c:	e7d9      	b.n	80245c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802460e:	d10d      	bne.n	802462c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8024610:	783b      	ldrb	r3, [r7, #0]
 8024612:	091b      	lsrs	r3, r3, #4
 8024614:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8024618:	0e0b      	lsrs	r3, r1, #24
 802461a:	d006      	beq.n	802462a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802461c:	8822      	ldrh	r2, [r4, #0]
 802461e:	4640      	mov	r0, r8
 8024620:	9300      	str	r3, [sp, #0]
 8024622:	464b      	mov	r3, r9
 8024624:	f7ff ff0c 	bl	8024440 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8024628:	8020      	strh	r0, [r4, #0]
 802462a:	3402      	adds	r4, #2
 802462c:	9b06      	ldr	r3, [sp, #24]
 802462e:	9a02      	ldr	r2, [sp, #8]
 8024630:	881b      	ldrh	r3, [r3, #0]
 8024632:	eba3 030b 	sub.w	r3, r3, fp
 8024636:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802463a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802463e:	4413      	add	r3, r2
 8024640:	9a07      	ldr	r2, [sp, #28]
 8024642:	fb93 f3f2 	sdiv	r3, r3, r2
 8024646:	441d      	add	r5, r3
 8024648:	e7a3      	b.n	8024592 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802464a:	9b05      	ldr	r3, [sp, #20]
 802464c:	6818      	ldr	r0, [r3, #0]
 802464e:	6803      	ldr	r3, [r0, #0]
 8024650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024652:	4798      	blx	r3
 8024654:	b00d      	add	sp, #52	@ 0x34
 8024656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802465a:	bf00      	nop
 802465c:	24004278 	.word	0x24004278
 8024660:	24004272 	.word	0x24004272

08024664 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8024664:	b570      	push	{r4, r5, r6, lr}
 8024666:	1214      	asrs	r4, r2, #8
 8024668:	788d      	ldrb	r5, [r1, #2]
 802466a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802466e:	10d0      	asrs	r0, r2, #3
 8024670:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8024674:	00d2      	lsls	r2, r2, #3
 8024676:	fb15 f503 	smulbb	r5, r5, r3
 802467a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802467e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024682:	b2d2      	uxtb	r2, r2
 8024684:	fb04 5506 	mla	r5, r4, r6, r5
 8024688:	784c      	ldrb	r4, [r1, #1]
 802468a:	7809      	ldrb	r1, [r1, #0]
 802468c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8024690:	fb14 f403 	smulbb	r4, r4, r3
 8024694:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024698:	fb11 f303 	smulbb	r3, r1, r3
 802469c:	b2ad      	uxth	r5, r5
 802469e:	fb00 4406 	mla	r4, r0, r6, r4
 80246a2:	fb02 3306 	mla	r3, r2, r6, r3
 80246a6:	1c68      	adds	r0, r5, #1
 80246a8:	b2a4      	uxth	r4, r4
 80246aa:	b29b      	uxth	r3, r3
 80246ac:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 80246b0:	1c62      	adds	r2, r4, #1
 80246b2:	1c58      	adds	r0, r3, #1
 80246b4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80246b8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80246bc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80246c0:	0964      	lsrs	r4, r4, #5
 80246c2:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80246c6:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80246ca:	4328      	orrs	r0, r5
 80246cc:	4320      	orrs	r0, r4
 80246ce:	bd70      	pop	{r4, r5, r6, pc}

080246d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80246d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246d4:	b08f      	sub	sp, #60	@ 0x3c
 80246d6:	461c      	mov	r4, r3
 80246d8:	4682      	mov	sl, r0
 80246da:	460e      	mov	r6, r1
 80246dc:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80246e0:	4615      	mov	r5, r2
 80246e2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80246e4:	2f00      	cmp	r7, #0
 80246e6:	f000 8141 	beq.w	802496c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 80246ea:	6820      	ldr	r0, [r4, #0]
 80246ec:	aa0a      	add	r2, sp, #40	@ 0x28
 80246ee:	6861      	ldr	r1, [r4, #4]
 80246f0:	f04f 0802 	mov.w	r8, #2
 80246f4:	3504      	adds	r5, #4
 80246f6:	c203      	stmia	r2!, {r0, r1}
 80246f8:	6818      	ldr	r0, [r3, #0]
 80246fa:	aa0c      	add	r2, sp, #48	@ 0x30
 80246fc:	6859      	ldr	r1, [r3, #4]
 80246fe:	c203      	stmia	r2!, {r0, r1}
 8024700:	a80a      	add	r0, sp, #40	@ 0x28
 8024702:	f7ef ffd7 	bl	80146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024706:	4621      	mov	r1, r4
 8024708:	a80c      	add	r0, sp, #48	@ 0x30
 802470a:	f7ef fffb 	bl	8014704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802470e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8024712:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8024716:	f002 0301 	and.w	r3, r2, #1
 802471a:	9306      	str	r3, [sp, #24]
 802471c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024720:	f003 0101 	and.w	r1, r3, #1
 8024724:	9105      	str	r1, [sp, #20]
 8024726:	9805      	ldr	r0, [sp, #20]
 8024728:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802472c:	4403      	add	r3, r0
 802472e:	fb01 2303 	mla	r3, r1, r3, r2
 8024732:	fb93 f3f8 	sdiv	r3, r3, r8
 8024736:	441e      	add	r6, r3
 8024738:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802473c:	441a      	add	r2, r3
 802473e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8024742:	4419      	add	r1, r3
 8024744:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8024748:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802474c:	9303      	str	r3, [sp, #12]
 802474e:	4b89      	ldr	r3, [pc, #548]	@ (8024974 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8024750:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8024754:	6818      	ldr	r0, [r3, #0]
 8024756:	6803      	ldr	r3, [r0, #0]
 8024758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802475a:	4798      	blx	r3
 802475c:	4a86      	ldr	r2, [pc, #536]	@ (8024978 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802475e:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8024762:	2fff      	cmp	r7, #255	@ 0xff
 8024764:	8813      	ldrh	r3, [r2, #0]
 8024766:	4694      	mov	ip, r2
 8024768:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 802476c:	fb03 9404 	mla	r4, r3, r4, r9
 8024770:	fb03 f30b 	mul.w	r3, r3, fp
 8024774:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8024778:	d071      	beq.n	802485e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802477a:	43f9      	mvns	r1, r7
 802477c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024780:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8024784:	b2c9      	uxtb	r1, r1
 8024786:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802478a:	9104      	str	r1, [sp, #16]
 802478c:	9b07      	ldr	r3, [sp, #28]
 802478e:	42a3      	cmp	r3, r4
 8024790:	f240 80e7 	bls.w	8024962 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8024794:	9b06      	ldr	r3, [sp, #24]
 8024796:	2b00      	cmp	r3, #0
 8024798:	d03d      	beq.n	8024816 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802479a:	7831      	ldrb	r1, [r6, #0]
 802479c:	4650      	mov	r0, sl
 802479e:	9b04      	ldr	r3, [sp, #16]
 80247a0:	f106 0801 	add.w	r8, r6, #1
 80247a4:	f001 010f 	and.w	r1, r1, #15
 80247a8:	8822      	ldrh	r2, [r4, #0]
 80247aa:	9300      	str	r3, [sp, #0]
 80247ac:	463b      	mov	r3, r7
 80247ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80247b2:	4429      	add	r1, r5
 80247b4:	f7ff ff56 	bl	8024664 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80247b8:	9b03      	ldr	r3, [sp, #12]
 80247ba:	f824 0b02 	strh.w	r0, [r4], #2
 80247be:	f103 3bff 	add.w	fp, r3, #4294967295
 80247c2:	f1bb 0f01 	cmp.w	fp, #1
 80247c6:	46a1      	mov	r9, r4
 80247c8:	f104 0404 	add.w	r4, r4, #4
 80247cc:	dd27      	ble.n	802481e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 80247ce:	f898 1000 	ldrb.w	r1, [r8]
 80247d2:	4650      	mov	r0, sl
 80247d4:	9b04      	ldr	r3, [sp, #16]
 80247d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80247da:	0909      	lsrs	r1, r1, #4
 80247dc:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80247e0:	9300      	str	r3, [sp, #0]
 80247e2:	463b      	mov	r3, r7
 80247e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80247e8:	4429      	add	r1, r5
 80247ea:	f7ff ff3b 	bl	8024664 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80247ee:	f824 0c04 	strh.w	r0, [r4, #-4]
 80247f2:	f818 1b01 	ldrb.w	r1, [r8], #1
 80247f6:	4650      	mov	r0, sl
 80247f8:	9b04      	ldr	r3, [sp, #16]
 80247fa:	f001 010f 	and.w	r1, r1, #15
 80247fe:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8024802:	9300      	str	r3, [sp, #0]
 8024804:	463b      	mov	r3, r7
 8024806:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802480a:	4429      	add	r1, r5
 802480c:	f7ff ff2a 	bl	8024664 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8024810:	f824 0c02 	strh.w	r0, [r4, #-2]
 8024814:	e7d5      	b.n	80247c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8024816:	46b0      	mov	r8, r6
 8024818:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802481c:	e7d1      	b.n	80247c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802481e:	d10f      	bne.n	8024840 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8024820:	f898 1000 	ldrb.w	r1, [r8]
 8024824:	4650      	mov	r0, sl
 8024826:	9b04      	ldr	r3, [sp, #16]
 8024828:	0909      	lsrs	r1, r1, #4
 802482a:	f8b9 2000 	ldrh.w	r2, [r9]
 802482e:	9300      	str	r3, [sp, #0]
 8024830:	463b      	mov	r3, r7
 8024832:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024836:	4429      	add	r1, r5
 8024838:	f7ff ff14 	bl	8024664 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802483c:	f829 0b02 	strh.w	r0, [r9], #2
 8024840:	9b08      	ldr	r3, [sp, #32]
 8024842:	9a05      	ldr	r2, [sp, #20]
 8024844:	881c      	ldrh	r4, [r3, #0]
 8024846:	9b03      	ldr	r3, [sp, #12]
 8024848:	1ae4      	subs	r4, r4, r3
 802484a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802484e:	4413      	add	r3, r2
 8024850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024852:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8024856:	fb93 f3f2 	sdiv	r3, r3, r2
 802485a:	441e      	add	r6, r3
 802485c:	e796      	b.n	802478c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802485e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024862:	4f46      	ldr	r7, [pc, #280]	@ (802497c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8024864:	42a3      	cmp	r3, r4
 8024866:	d97c      	bls.n	8024962 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8024868:	9a06      	ldr	r2, [sp, #24]
 802486a:	2a00      	cmp	r2, #0
 802486c:	d054      	beq.n	8024918 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802486e:	7830      	ldrb	r0, [r6, #0]
 8024870:	1c71      	adds	r1, r6, #1
 8024872:	f000 000f 	and.w	r0, r0, #15
 8024876:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802487a:	eb05 0e00 	add.w	lr, r5, r0
 802487e:	5c28      	ldrb	r0, [r5, r0]
 8024880:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8024884:	f89e e001 	ldrb.w	lr, [lr, #1]
 8024888:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802488c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024890:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8024894:	ea42 020e 	orr.w	r2, r2, lr
 8024898:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802489c:	f824 2b02 	strh.w	r2, [r4], #2
 80248a0:	9a03      	ldr	r2, [sp, #12]
 80248a2:	f102 3eff 	add.w	lr, r2, #4294967295
 80248a6:	f1be 0f01 	cmp.w	lr, #1
 80248aa:	4620      	mov	r0, r4
 80248ac:	f104 0404 	add.w	r4, r4, #4
 80248b0:	dd36      	ble.n	8024920 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 80248b2:	7808      	ldrb	r0, [r1, #0]
 80248b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80248b8:	0900      	lsrs	r0, r0, #4
 80248ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80248be:	eb05 0a00 	add.w	sl, r5, r0
 80248c2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80248c6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80248ca:	00d2      	lsls	r2, r2, #3
 80248cc:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80248d0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80248d4:	ea49 0202 	orr.w	r2, r9, r2
 80248d8:	f815 9000 	ldrb.w	r9, [r5, r0]
 80248dc:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80248e0:	f824 2c04 	strh.w	r2, [r4, #-4]
 80248e4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80248e8:	f000 000f 	and.w	r0, r0, #15
 80248ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80248f0:	eb05 0a00 	add.w	sl, r5, r0
 80248f4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80248f8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80248fc:	00d2      	lsls	r2, r2, #3
 80248fe:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8024902:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024906:	ea49 0202 	orr.w	r2, r9, r2
 802490a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802490e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8024912:	f824 2c02 	strh.w	r2, [r4, #-2]
 8024916:	e7c6      	b.n	80248a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8024918:	4631      	mov	r1, r6
 802491a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802491e:	e7c2      	b.n	80248a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8024920:	d111      	bne.n	8024946 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8024922:	7809      	ldrb	r1, [r1, #0]
 8024924:	0909      	lsrs	r1, r1, #4
 8024926:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802492a:	186c      	adds	r4, r5, r1
 802492c:	5c69      	ldrb	r1, [r5, r1]
 802492e:	78a2      	ldrb	r2, [r4, #2]
 8024930:	7864      	ldrb	r4, [r4, #1]
 8024932:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8024936:	00e4      	lsls	r4, r4, #3
 8024938:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802493c:	4322      	orrs	r2, r4
 802493e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8024942:	f820 2b02 	strh.w	r2, [r0], #2
 8024946:	9a03      	ldr	r2, [sp, #12]
 8024948:	f8bc 4000 	ldrh.w	r4, [ip]
 802494c:	9905      	ldr	r1, [sp, #20]
 802494e:	1aa4      	subs	r4, r4, r2
 8024950:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8024954:	440a      	add	r2, r1
 8024956:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802495a:	fb92 f2f8 	sdiv	r2, r2, r8
 802495e:	4416      	add	r6, r2
 8024960:	e780      	b.n	8024864 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8024962:	4b04      	ldr	r3, [pc, #16]	@ (8024974 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8024964:	6818      	ldr	r0, [r3, #0]
 8024966:	6803      	ldr	r3, [r0, #0]
 8024968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802496a:	4798      	blx	r3
 802496c:	b00f      	add	sp, #60	@ 0x3c
 802496e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024972:	bf00      	nop
 8024974:	24004278 	.word	0x24004278
 8024978:	24004272 	.word	0x24004272
 802497c:	fffff800 	.word	0xfffff800

08024980 <CRC_Lock>:
 8024980:	4a2d      	ldr	r2, [pc, #180]	@ (8024a38 <CRC_Lock+0xb8>)
 8024982:	b530      	push	{r4, r5, lr}
 8024984:	6813      	ldr	r3, [r2, #0]
 8024986:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802498a:	f023 0301 	bic.w	r3, r3, #1
 802498e:	6013      	str	r3, [r2, #0]
 8024990:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8024994:	4b29      	ldr	r3, [pc, #164]	@ (8024a3c <CRC_Lock+0xbc>)
 8024996:	681c      	ldr	r4, [r3, #0]
 8024998:	4014      	ands	r4, r2
 802499a:	42ac      	cmp	r4, r5
 802499c:	d005      	beq.n	80249aa <CRC_Lock+0x2a>
 802499e:	681c      	ldr	r4, [r3, #0]
 80249a0:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80249a4:	4014      	ands	r4, r2
 80249a6:	42ac      	cmp	r4, r5
 80249a8:	d125      	bne.n	80249f6 <CRC_Lock+0x76>
 80249aa:	4b25      	ldr	r3, [pc, #148]	@ (8024a40 <CRC_Lock+0xc0>)
 80249ac:	681b      	ldr	r3, [r3, #0]
 80249ae:	2b00      	cmp	r3, #0
 80249b0:	d139      	bne.n	8024a26 <CRC_Lock+0xa6>
 80249b2:	4b24      	ldr	r3, [pc, #144]	@ (8024a44 <CRC_Lock+0xc4>)
 80249b4:	681a      	ldr	r2, [r3, #0]
 80249b6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80249ba:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80249be:	d00d      	beq.n	80249dc <CRC_Lock+0x5c>
 80249c0:	681a      	ldr	r2, [r3, #0]
 80249c2:	f240 4483 	movw	r4, #1155	@ 0x483
 80249c6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80249ca:	42a2      	cmp	r2, r4
 80249cc:	d006      	beq.n	80249dc <CRC_Lock+0x5c>
 80249ce:	681b      	ldr	r3, [r3, #0]
 80249d0:	f240 4285 	movw	r2, #1157	@ 0x485
 80249d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80249d8:	4293      	cmp	r3, r2
 80249da:	d124      	bne.n	8024a26 <CRC_Lock+0xa6>
 80249dc:	4b1a      	ldr	r3, [pc, #104]	@ (8024a48 <CRC_Lock+0xc8>)
 80249de:	2201      	movs	r2, #1
 80249e0:	601a      	str	r2, [r3, #0]
 80249e2:	681a      	ldr	r2, [r3, #0]
 80249e4:	2a00      	cmp	r2, #0
 80249e6:	d1fc      	bne.n	80249e2 <CRC_Lock+0x62>
 80249e8:	4b18      	ldr	r3, [pc, #96]	@ (8024a4c <CRC_Lock+0xcc>)
 80249ea:	6018      	str	r0, [r3, #0]
 80249ec:	6818      	ldr	r0, [r3, #0]
 80249ee:	1a43      	subs	r3, r0, r1
 80249f0:	4258      	negs	r0, r3
 80249f2:	4158      	adcs	r0, r3
 80249f4:	e00e      	b.n	8024a14 <CRC_Lock+0x94>
 80249f6:	681b      	ldr	r3, [r3, #0]
 80249f8:	4013      	ands	r3, r2
 80249fa:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80249fe:	4293      	cmp	r3, r2
 8024a00:	d111      	bne.n	8024a26 <CRC_Lock+0xa6>
 8024a02:	4b13      	ldr	r3, [pc, #76]	@ (8024a50 <CRC_Lock+0xd0>)
 8024a04:	f240 4286 	movw	r2, #1158	@ 0x486
 8024a08:	681b      	ldr	r3, [r3, #0]
 8024a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024a0e:	4293      	cmp	r3, r2
 8024a10:	d001      	beq.n	8024a16 <CRC_Lock+0x96>
 8024a12:	2000      	movs	r0, #0
 8024a14:	bd30      	pop	{r4, r5, pc}
 8024a16:	4b0f      	ldr	r3, [pc, #60]	@ (8024a54 <CRC_Lock+0xd4>)
 8024a18:	2201      	movs	r2, #1
 8024a1a:	601a      	str	r2, [r3, #0]
 8024a1c:	681a      	ldr	r2, [r3, #0]
 8024a1e:	2a00      	cmp	r2, #0
 8024a20:	d1fc      	bne.n	8024a1c <CRC_Lock+0x9c>
 8024a22:	4b0d      	ldr	r3, [pc, #52]	@ (8024a58 <CRC_Lock+0xd8>)
 8024a24:	e7e1      	b.n	80249ea <CRC_Lock+0x6a>
 8024a26:	4b0d      	ldr	r3, [pc, #52]	@ (8024a5c <CRC_Lock+0xdc>)
 8024a28:	2201      	movs	r2, #1
 8024a2a:	601a      	str	r2, [r3, #0]
 8024a2c:	681a      	ldr	r2, [r3, #0]
 8024a2e:	2a00      	cmp	r2, #0
 8024a30:	d1fc      	bne.n	8024a2c <CRC_Lock+0xac>
 8024a32:	4b0b      	ldr	r3, [pc, #44]	@ (8024a60 <CRC_Lock+0xe0>)
 8024a34:	e7d9      	b.n	80249ea <CRC_Lock+0x6a>
 8024a36:	bf00      	nop
 8024a38:	e0002000 	.word	0xe0002000
 8024a3c:	e000ed00 	.word	0xe000ed00
 8024a40:	e0042000 	.word	0xe0042000
 8024a44:	5c001000 	.word	0x5c001000
 8024a48:	58024c08 	.word	0x58024c08
 8024a4c:	58024c00 	.word	0x58024c00
 8024a50:	46008ff0 	.word	0x46008ff0
 8024a54:	46024c08 	.word	0x46024c08
 8024a58:	46024c00 	.word	0x46024c00
 8024a5c:	40023008 	.word	0x40023008
 8024a60:	40023000 	.word	0x40023000

08024a64 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024a64:	6101      	str	r1, [r0, #16]
 8024a66:	4770      	bx	lr

08024a68 <_ZN8touchgfx8Gestures4tickEv>:
 8024a68:	7b83      	ldrb	r3, [r0, #14]
 8024a6a:	b14b      	cbz	r3, 8024a80 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024a6c:	8903      	ldrh	r3, [r0, #8]
 8024a6e:	3301      	adds	r3, #1
 8024a70:	b29b      	uxth	r3, r3
 8024a72:	2b07      	cmp	r3, #7
 8024a74:	8103      	strh	r3, [r0, #8]
 8024a76:	bf81      	itttt	hi
 8024a78:	2300      	movhi	r3, #0
 8024a7a:	8143      	strhhi	r3, [r0, #10]
 8024a7c:	8183      	strhhi	r3, [r0, #12]
 8024a7e:	7383      	strbhi	r3, [r0, #14]
 8024a80:	4770      	bx	lr
	...

08024a84 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024a84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024a88:	4698      	mov	r8, r3
 8024a8a:	8883      	ldrh	r3, [r0, #4]
 8024a8c:	4604      	mov	r4, r0
 8024a8e:	4617      	mov	r7, r2
 8024a90:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024a94:	eba8 0303 	sub.w	r3, r8, r3
 8024a98:	4a19      	ldr	r2, [pc, #100]	@ (8024b00 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8024a9a:	460e      	mov	r6, r1
 8024a9c:	b21b      	sxth	r3, r3
 8024a9e:	88c1      	ldrh	r1, [r0, #6]
 8024aa0:	9200      	str	r2, [sp, #0]
 8024aa2:	2000      	movs	r0, #0
 8024aa4:	2b00      	cmp	r3, #0
 8024aa6:	8aa2      	ldrh	r2, [r4, #20]
 8024aa8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8024aac:	bfb8      	it	lt
 8024aae:	425b      	neglt	r3, r3
 8024ab0:	f88d 0004 	strb.w	r0, [sp, #4]
 8024ab4:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024ab8:	b21b      	sxth	r3, r3
 8024aba:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024abe:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024ac2:	4293      	cmp	r3, r2
 8024ac4:	dc07      	bgt.n	8024ad6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8024ac6:	1a69      	subs	r1, r5, r1
 8024ac8:	b209      	sxth	r1, r1
 8024aca:	2900      	cmp	r1, #0
 8024acc:	bfb8      	it	lt
 8024ace:	4249      	neglt	r1, r1
 8024ad0:	b209      	sxth	r1, r1
 8024ad2:	428a      	cmp	r2, r1
 8024ad4:	da10      	bge.n	8024af8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8024ad6:	6920      	ldr	r0, [r4, #16]
 8024ad8:	4669      	mov	r1, sp
 8024ada:	eba8 0606 	sub.w	r6, r8, r6
 8024ade:	1bef      	subs	r7, r5, r7
 8024ae0:	6803      	ldr	r3, [r0, #0]
 8024ae2:	685b      	ldr	r3, [r3, #4]
 8024ae4:	4798      	blx	r3
 8024ae6:	2300      	movs	r3, #0
 8024ae8:	2001      	movs	r0, #1
 8024aea:	8166      	strh	r6, [r4, #10]
 8024aec:	8123      	strh	r3, [r4, #8]
 8024aee:	81a7      	strh	r7, [r4, #12]
 8024af0:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024af4:	80e5      	strh	r5, [r4, #6]
 8024af6:	73a0      	strb	r0, [r4, #14]
 8024af8:	b004      	add	sp, #16
 8024afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024afe:	bf00      	nop
 8024b00:	0802a588 	.word	0x0802a588

08024b04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b06:	461e      	mov	r6, r3
 8024b08:	1e4b      	subs	r3, r1, #1
 8024b0a:	b085      	sub	sp, #20
 8024b0c:	4604      	mov	r4, r0
 8024b0e:	2b01      	cmp	r3, #1
 8024b10:	460d      	mov	r5, r1
 8024b12:	4617      	mov	r7, r2
 8024b14:	d84b      	bhi.n	8024bae <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024b16:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024b1a:	1cd3      	adds	r3, r2, #3
 8024b1c:	b29b      	uxth	r3, r3
 8024b1e:	2b06      	cmp	r3, #6
 8024b20:	d916      	bls.n	8024b50 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024b22:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8024bc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024b26:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024b2a:	f8cd c004 	str.w	ip, [sp, #4]
 8024b2e:	f04f 0c00 	mov.w	ip, #0
 8024b32:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024b36:	6900      	ldr	r0, [r0, #16]
 8024b38:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024b3c:	a901      	add	r1, sp, #4
 8024b3e:	f88d c008 	strb.w	ip, [sp, #8]
 8024b42:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024b46:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024b4a:	6803      	ldr	r3, [r0, #0]
 8024b4c:	689b      	ldr	r3, [r3, #8]
 8024b4e:	4798      	blx	r3
 8024b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024b54:	1cd3      	adds	r3, r2, #3
 8024b56:	b29b      	uxth	r3, r3
 8024b58:	2b06      	cmp	r3, #6
 8024b5a:	d916      	bls.n	8024b8a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024b5c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8024bc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024b60:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024b64:	f8cd c004 	str.w	ip, [sp, #4]
 8024b68:	f04f 0c01 	mov.w	ip, #1
 8024b6c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024b70:	6920      	ldr	r0, [r4, #16]
 8024b72:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024b76:	a901      	add	r1, sp, #4
 8024b78:	f88d c008 	strb.w	ip, [sp, #8]
 8024b7c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024b80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024b84:	6803      	ldr	r3, [r0, #0]
 8024b86:	689b      	ldr	r3, [r3, #8]
 8024b88:	4798      	blx	r3
 8024b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8024bc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024b8c:	a901      	add	r1, sp, #4
 8024b8e:	6920      	ldr	r0, [r4, #16]
 8024b90:	9301      	str	r3, [sp, #4]
 8024b92:	2300      	movs	r3, #0
 8024b94:	f88d 5008 	strb.w	r5, [sp, #8]
 8024b98:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024b9c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024ba0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024ba4:	6803      	ldr	r3, [r0, #0]
 8024ba6:	681b      	ldr	r3, [r3, #0]
 8024ba8:	4798      	blx	r3
 8024baa:	b005      	add	sp, #20
 8024bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024bae:	2900      	cmp	r1, #0
 8024bb0:	d1eb      	bne.n	8024b8a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024bb2:	80a2      	strh	r2, [r4, #4]
 8024bb4:	80c6      	strh	r6, [r0, #6]
 8024bb6:	60a1      	str	r1, [r4, #8]
 8024bb8:	81a1      	strh	r1, [r4, #12]
 8024bba:	73a1      	strb	r1, [r4, #14]
 8024bbc:	e7e5      	b.n	8024b8a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024bbe:	bf00      	nop
 8024bc0:	0802a574 	.word	0x0802a574
 8024bc4:	0802a59c 	.word	0x0802a59c

08024bc8 <__aeabi_atexit>:
 8024bc8:	460b      	mov	r3, r1
 8024bca:	4601      	mov	r1, r0
 8024bcc:	4618      	mov	r0, r3
 8024bce:	f000 bf89 	b.w	8025ae4 <__cxa_atexit>

08024bd2 <_ZdlPvj>:
 8024bd2:	f000 b812 	b.w	8024bfa <_ZdlPv>

08024bd6 <__cxa_guard_acquire>:
 8024bd6:	6802      	ldr	r2, [r0, #0]
 8024bd8:	07d2      	lsls	r2, r2, #31
 8024bda:	4603      	mov	r3, r0
 8024bdc:	d405      	bmi.n	8024bea <__cxa_guard_acquire+0x14>
 8024bde:	7842      	ldrb	r2, [r0, #1]
 8024be0:	b102      	cbz	r2, 8024be4 <__cxa_guard_acquire+0xe>
 8024be2:	deff      	udf	#255	@ 0xff
 8024be4:	2001      	movs	r0, #1
 8024be6:	7058      	strb	r0, [r3, #1]
 8024be8:	4770      	bx	lr
 8024bea:	2000      	movs	r0, #0
 8024bec:	4770      	bx	lr

08024bee <__cxa_guard_release>:
 8024bee:	2301      	movs	r3, #1
 8024bf0:	6003      	str	r3, [r0, #0]
 8024bf2:	4770      	bx	lr

08024bf4 <__cxa_pure_virtual>:
 8024bf4:	b508      	push	{r3, lr}
 8024bf6:	f000 f80f 	bl	8024c18 <_ZSt9terminatev>

08024bfa <_ZdlPv>:
 8024bfa:	f000 b845 	b.w	8024c88 <free>

08024bfe <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024bfe:	b508      	push	{r3, lr}
 8024c00:	4780      	blx	r0
 8024c02:	f000 f80e 	bl	8024c22 <abort>
	...

08024c08 <_ZSt13get_terminatev>:
 8024c08:	4b02      	ldr	r3, [pc, #8]	@ (8024c14 <_ZSt13get_terminatev+0xc>)
 8024c0a:	6818      	ldr	r0, [r3, #0]
 8024c0c:	f3bf 8f5b 	dmb	ish
 8024c10:	4770      	bx	lr
 8024c12:	bf00      	nop
 8024c14:	24000158 	.word	0x24000158

08024c18 <_ZSt9terminatev>:
 8024c18:	b508      	push	{r3, lr}
 8024c1a:	f7ff fff5 	bl	8024c08 <_ZSt13get_terminatev>
 8024c1e:	f7ff ffee 	bl	8024bfe <_ZN10__cxxabiv111__terminateEPFvvE>

08024c22 <abort>:
 8024c22:	b508      	push	{r3, lr}
 8024c24:	2006      	movs	r0, #6
 8024c26:	f001 f95d 	bl	8025ee4 <raise>
 8024c2a:	2001      	movs	r0, #1
 8024c2c:	f7e2 fbb8 	bl	80073a0 <_exit>

08024c30 <__assert_func>:
 8024c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024c32:	4614      	mov	r4, r2
 8024c34:	461a      	mov	r2, r3
 8024c36:	4b09      	ldr	r3, [pc, #36]	@ (8024c5c <__assert_func+0x2c>)
 8024c38:	681b      	ldr	r3, [r3, #0]
 8024c3a:	4605      	mov	r5, r0
 8024c3c:	68d8      	ldr	r0, [r3, #12]
 8024c3e:	b954      	cbnz	r4, 8024c56 <__assert_func+0x26>
 8024c40:	4b07      	ldr	r3, [pc, #28]	@ (8024c60 <__assert_func+0x30>)
 8024c42:	461c      	mov	r4, r3
 8024c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024c48:	9100      	str	r1, [sp, #0]
 8024c4a:	462b      	mov	r3, r5
 8024c4c:	4905      	ldr	r1, [pc, #20]	@ (8024c64 <__assert_func+0x34>)
 8024c4e:	f000 fffb 	bl	8025c48 <fiprintf>
 8024c52:	f7ff ffe6 	bl	8024c22 <abort>
 8024c56:	4b04      	ldr	r3, [pc, #16]	@ (8024c68 <__assert_func+0x38>)
 8024c58:	e7f4      	b.n	8024c44 <__assert_func+0x14>
 8024c5a:	bf00      	nop
 8024c5c:	240002d4 	.word	0x240002d4
 8024c60:	0802a8f3 	.word	0x0802a8f3
 8024c64:	0802a8c5 	.word	0x0802a8c5
 8024c68:	0802a8b8 	.word	0x0802a8b8

08024c6c <atexit>:
 8024c6c:	2300      	movs	r3, #0
 8024c6e:	4601      	mov	r1, r0
 8024c70:	461a      	mov	r2, r3
 8024c72:	4618      	mov	r0, r3
 8024c74:	f001 b9fa 	b.w	802606c <__register_exitproc>

08024c78 <malloc>:
 8024c78:	4b02      	ldr	r3, [pc, #8]	@ (8024c84 <malloc+0xc>)
 8024c7a:	4601      	mov	r1, r0
 8024c7c:	6818      	ldr	r0, [r3, #0]
 8024c7e:	f000 b82d 	b.w	8024cdc <_malloc_r>
 8024c82:	bf00      	nop
 8024c84:	240002d4 	.word	0x240002d4

08024c88 <free>:
 8024c88:	4b02      	ldr	r3, [pc, #8]	@ (8024c94 <free+0xc>)
 8024c8a:	4601      	mov	r1, r0
 8024c8c:	6818      	ldr	r0, [r3, #0]
 8024c8e:	f001 ba49 	b.w	8026124 <_free_r>
 8024c92:	bf00      	nop
 8024c94:	240002d4 	.word	0x240002d4

08024c98 <sbrk_aligned>:
 8024c98:	b570      	push	{r4, r5, r6, lr}
 8024c9a:	4e0f      	ldr	r6, [pc, #60]	@ (8024cd8 <sbrk_aligned+0x40>)
 8024c9c:	460c      	mov	r4, r1
 8024c9e:	6831      	ldr	r1, [r6, #0]
 8024ca0:	4605      	mov	r5, r0
 8024ca2:	b911      	cbnz	r1, 8024caa <sbrk_aligned+0x12>
 8024ca4:	f001 f96e 	bl	8025f84 <_sbrk_r>
 8024ca8:	6030      	str	r0, [r6, #0]
 8024caa:	4621      	mov	r1, r4
 8024cac:	4628      	mov	r0, r5
 8024cae:	f001 f969 	bl	8025f84 <_sbrk_r>
 8024cb2:	1c43      	adds	r3, r0, #1
 8024cb4:	d103      	bne.n	8024cbe <sbrk_aligned+0x26>
 8024cb6:	f04f 34ff 	mov.w	r4, #4294967295
 8024cba:	4620      	mov	r0, r4
 8024cbc:	bd70      	pop	{r4, r5, r6, pc}
 8024cbe:	1cc4      	adds	r4, r0, #3
 8024cc0:	f024 0403 	bic.w	r4, r4, #3
 8024cc4:	42a0      	cmp	r0, r4
 8024cc6:	d0f8      	beq.n	8024cba <sbrk_aligned+0x22>
 8024cc8:	1a21      	subs	r1, r4, r0
 8024cca:	4628      	mov	r0, r5
 8024ccc:	f001 f95a 	bl	8025f84 <_sbrk_r>
 8024cd0:	3001      	adds	r0, #1
 8024cd2:	d1f2      	bne.n	8024cba <sbrk_aligned+0x22>
 8024cd4:	e7ef      	b.n	8024cb6 <sbrk_aligned+0x1e>
 8024cd6:	bf00      	nop
 8024cd8:	24004bc4 	.word	0x24004bc4

08024cdc <_malloc_r>:
 8024cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024ce0:	1ccd      	adds	r5, r1, #3
 8024ce2:	f025 0503 	bic.w	r5, r5, #3
 8024ce6:	3508      	adds	r5, #8
 8024ce8:	2d0c      	cmp	r5, #12
 8024cea:	bf38      	it	cc
 8024cec:	250c      	movcc	r5, #12
 8024cee:	2d00      	cmp	r5, #0
 8024cf0:	4606      	mov	r6, r0
 8024cf2:	db01      	blt.n	8024cf8 <_malloc_r+0x1c>
 8024cf4:	42a9      	cmp	r1, r5
 8024cf6:	d904      	bls.n	8024d02 <_malloc_r+0x26>
 8024cf8:	230c      	movs	r3, #12
 8024cfa:	6033      	str	r3, [r6, #0]
 8024cfc:	2000      	movs	r0, #0
 8024cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024d02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8024dd8 <_malloc_r+0xfc>
 8024d06:	f000 f869 	bl	8024ddc <__malloc_lock>
 8024d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8024d0e:	461c      	mov	r4, r3
 8024d10:	bb44      	cbnz	r4, 8024d64 <_malloc_r+0x88>
 8024d12:	4629      	mov	r1, r5
 8024d14:	4630      	mov	r0, r6
 8024d16:	f7ff ffbf 	bl	8024c98 <sbrk_aligned>
 8024d1a:	1c43      	adds	r3, r0, #1
 8024d1c:	4604      	mov	r4, r0
 8024d1e:	d158      	bne.n	8024dd2 <_malloc_r+0xf6>
 8024d20:	f8d8 4000 	ldr.w	r4, [r8]
 8024d24:	4627      	mov	r7, r4
 8024d26:	2f00      	cmp	r7, #0
 8024d28:	d143      	bne.n	8024db2 <_malloc_r+0xd6>
 8024d2a:	2c00      	cmp	r4, #0
 8024d2c:	d04b      	beq.n	8024dc6 <_malloc_r+0xea>
 8024d2e:	6823      	ldr	r3, [r4, #0]
 8024d30:	4639      	mov	r1, r7
 8024d32:	4630      	mov	r0, r6
 8024d34:	eb04 0903 	add.w	r9, r4, r3
 8024d38:	f001 f924 	bl	8025f84 <_sbrk_r>
 8024d3c:	4581      	cmp	r9, r0
 8024d3e:	d142      	bne.n	8024dc6 <_malloc_r+0xea>
 8024d40:	6821      	ldr	r1, [r4, #0]
 8024d42:	1a6d      	subs	r5, r5, r1
 8024d44:	4629      	mov	r1, r5
 8024d46:	4630      	mov	r0, r6
 8024d48:	f7ff ffa6 	bl	8024c98 <sbrk_aligned>
 8024d4c:	3001      	adds	r0, #1
 8024d4e:	d03a      	beq.n	8024dc6 <_malloc_r+0xea>
 8024d50:	6823      	ldr	r3, [r4, #0]
 8024d52:	442b      	add	r3, r5
 8024d54:	6023      	str	r3, [r4, #0]
 8024d56:	f8d8 3000 	ldr.w	r3, [r8]
 8024d5a:	685a      	ldr	r2, [r3, #4]
 8024d5c:	bb62      	cbnz	r2, 8024db8 <_malloc_r+0xdc>
 8024d5e:	f8c8 7000 	str.w	r7, [r8]
 8024d62:	e00f      	b.n	8024d84 <_malloc_r+0xa8>
 8024d64:	6822      	ldr	r2, [r4, #0]
 8024d66:	1b52      	subs	r2, r2, r5
 8024d68:	d420      	bmi.n	8024dac <_malloc_r+0xd0>
 8024d6a:	2a0b      	cmp	r2, #11
 8024d6c:	d917      	bls.n	8024d9e <_malloc_r+0xc2>
 8024d6e:	1961      	adds	r1, r4, r5
 8024d70:	42a3      	cmp	r3, r4
 8024d72:	6025      	str	r5, [r4, #0]
 8024d74:	bf18      	it	ne
 8024d76:	6059      	strne	r1, [r3, #4]
 8024d78:	6863      	ldr	r3, [r4, #4]
 8024d7a:	bf08      	it	eq
 8024d7c:	f8c8 1000 	streq.w	r1, [r8]
 8024d80:	5162      	str	r2, [r4, r5]
 8024d82:	604b      	str	r3, [r1, #4]
 8024d84:	4630      	mov	r0, r6
 8024d86:	f000 f82f 	bl	8024de8 <__malloc_unlock>
 8024d8a:	f104 000b 	add.w	r0, r4, #11
 8024d8e:	1d23      	adds	r3, r4, #4
 8024d90:	f020 0007 	bic.w	r0, r0, #7
 8024d94:	1ac2      	subs	r2, r0, r3
 8024d96:	bf1c      	itt	ne
 8024d98:	1a1b      	subne	r3, r3, r0
 8024d9a:	50a3      	strne	r3, [r4, r2]
 8024d9c:	e7af      	b.n	8024cfe <_malloc_r+0x22>
 8024d9e:	6862      	ldr	r2, [r4, #4]
 8024da0:	42a3      	cmp	r3, r4
 8024da2:	bf0c      	ite	eq
 8024da4:	f8c8 2000 	streq.w	r2, [r8]
 8024da8:	605a      	strne	r2, [r3, #4]
 8024daa:	e7eb      	b.n	8024d84 <_malloc_r+0xa8>
 8024dac:	4623      	mov	r3, r4
 8024dae:	6864      	ldr	r4, [r4, #4]
 8024db0:	e7ae      	b.n	8024d10 <_malloc_r+0x34>
 8024db2:	463c      	mov	r4, r7
 8024db4:	687f      	ldr	r7, [r7, #4]
 8024db6:	e7b6      	b.n	8024d26 <_malloc_r+0x4a>
 8024db8:	461a      	mov	r2, r3
 8024dba:	685b      	ldr	r3, [r3, #4]
 8024dbc:	42a3      	cmp	r3, r4
 8024dbe:	d1fb      	bne.n	8024db8 <_malloc_r+0xdc>
 8024dc0:	2300      	movs	r3, #0
 8024dc2:	6053      	str	r3, [r2, #4]
 8024dc4:	e7de      	b.n	8024d84 <_malloc_r+0xa8>
 8024dc6:	230c      	movs	r3, #12
 8024dc8:	6033      	str	r3, [r6, #0]
 8024dca:	4630      	mov	r0, r6
 8024dcc:	f000 f80c 	bl	8024de8 <__malloc_unlock>
 8024dd0:	e794      	b.n	8024cfc <_malloc_r+0x20>
 8024dd2:	6005      	str	r5, [r0, #0]
 8024dd4:	e7d6      	b.n	8024d84 <_malloc_r+0xa8>
 8024dd6:	bf00      	nop
 8024dd8:	24004bc8 	.word	0x24004bc8

08024ddc <__malloc_lock>:
 8024ddc:	4801      	ldr	r0, [pc, #4]	@ (8024de4 <__malloc_lock+0x8>)
 8024dde:	f001 b91e 	b.w	802601e <__retarget_lock_acquire_recursive>
 8024de2:	bf00      	nop
 8024de4:	24004d0c 	.word	0x24004d0c

08024de8 <__malloc_unlock>:
 8024de8:	4801      	ldr	r0, [pc, #4]	@ (8024df0 <__malloc_unlock+0x8>)
 8024dea:	f001 b919 	b.w	8026020 <__retarget_lock_release_recursive>
 8024dee:	bf00      	nop
 8024df0:	24004d0c 	.word	0x24004d0c

08024df4 <sulp>:
 8024df4:	b570      	push	{r4, r5, r6, lr}
 8024df6:	4604      	mov	r4, r0
 8024df8:	460d      	mov	r5, r1
 8024dfa:	4616      	mov	r6, r2
 8024dfc:	ec45 4b10 	vmov	d0, r4, r5
 8024e00:	f002 f89a 	bl	8026f38 <__ulp>
 8024e04:	b17e      	cbz	r6, 8024e26 <sulp+0x32>
 8024e06:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8024e0a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	dd09      	ble.n	8024e26 <sulp+0x32>
 8024e12:	051b      	lsls	r3, r3, #20
 8024e14:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8024e18:	2000      	movs	r0, #0
 8024e1a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8024e1e:	ec41 0b17 	vmov	d7, r0, r1
 8024e22:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024e26:	bd70      	pop	{r4, r5, r6, pc}

08024e28 <_strtod_l>:
 8024e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e2c:	ed2d 8b0a 	vpush	{d8-d12}
 8024e30:	b097      	sub	sp, #92	@ 0x5c
 8024e32:	4688      	mov	r8, r1
 8024e34:	920e      	str	r2, [sp, #56]	@ 0x38
 8024e36:	2200      	movs	r2, #0
 8024e38:	9212      	str	r2, [sp, #72]	@ 0x48
 8024e3a:	9005      	str	r0, [sp, #20]
 8024e3c:	f04f 0a00 	mov.w	sl, #0
 8024e40:	f04f 0b00 	mov.w	fp, #0
 8024e44:	460a      	mov	r2, r1
 8024e46:	9211      	str	r2, [sp, #68]	@ 0x44
 8024e48:	7811      	ldrb	r1, [r2, #0]
 8024e4a:	292b      	cmp	r1, #43	@ 0x2b
 8024e4c:	d04c      	beq.n	8024ee8 <_strtod_l+0xc0>
 8024e4e:	d839      	bhi.n	8024ec4 <_strtod_l+0x9c>
 8024e50:	290d      	cmp	r1, #13
 8024e52:	d833      	bhi.n	8024ebc <_strtod_l+0x94>
 8024e54:	2908      	cmp	r1, #8
 8024e56:	d833      	bhi.n	8024ec0 <_strtod_l+0x98>
 8024e58:	2900      	cmp	r1, #0
 8024e5a:	d03c      	beq.n	8024ed6 <_strtod_l+0xae>
 8024e5c:	2200      	movs	r2, #0
 8024e5e:	9208      	str	r2, [sp, #32]
 8024e60:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8024e62:	782a      	ldrb	r2, [r5, #0]
 8024e64:	2a30      	cmp	r2, #48	@ 0x30
 8024e66:	f040 80b5 	bne.w	8024fd4 <_strtod_l+0x1ac>
 8024e6a:	786a      	ldrb	r2, [r5, #1]
 8024e6c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8024e70:	2a58      	cmp	r2, #88	@ 0x58
 8024e72:	d170      	bne.n	8024f56 <_strtod_l+0x12e>
 8024e74:	9302      	str	r3, [sp, #8]
 8024e76:	9b08      	ldr	r3, [sp, #32]
 8024e78:	9301      	str	r3, [sp, #4]
 8024e7a:	ab12      	add	r3, sp, #72	@ 0x48
 8024e7c:	9300      	str	r3, [sp, #0]
 8024e7e:	4a8b      	ldr	r2, [pc, #556]	@ (80250ac <_strtod_l+0x284>)
 8024e80:	9805      	ldr	r0, [sp, #20]
 8024e82:	ab13      	add	r3, sp, #76	@ 0x4c
 8024e84:	a911      	add	r1, sp, #68	@ 0x44
 8024e86:	f001 f9ff 	bl	8026288 <__gethex>
 8024e8a:	f010 060f 	ands.w	r6, r0, #15
 8024e8e:	4604      	mov	r4, r0
 8024e90:	d005      	beq.n	8024e9e <_strtod_l+0x76>
 8024e92:	2e06      	cmp	r6, #6
 8024e94:	d12a      	bne.n	8024eec <_strtod_l+0xc4>
 8024e96:	3501      	adds	r5, #1
 8024e98:	2300      	movs	r3, #0
 8024e9a:	9511      	str	r5, [sp, #68]	@ 0x44
 8024e9c:	9308      	str	r3, [sp, #32]
 8024e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	f040 852f 	bne.w	8025904 <_strtod_l+0xadc>
 8024ea6:	9b08      	ldr	r3, [sp, #32]
 8024ea8:	ec4b ab10 	vmov	d0, sl, fp
 8024eac:	b1cb      	cbz	r3, 8024ee2 <_strtod_l+0xba>
 8024eae:	eeb1 0b40 	vneg.f64	d0, d0
 8024eb2:	b017      	add	sp, #92	@ 0x5c
 8024eb4:	ecbd 8b0a 	vpop	{d8-d12}
 8024eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ebc:	2920      	cmp	r1, #32
 8024ebe:	d1cd      	bne.n	8024e5c <_strtod_l+0x34>
 8024ec0:	3201      	adds	r2, #1
 8024ec2:	e7c0      	b.n	8024e46 <_strtod_l+0x1e>
 8024ec4:	292d      	cmp	r1, #45	@ 0x2d
 8024ec6:	d1c9      	bne.n	8024e5c <_strtod_l+0x34>
 8024ec8:	2101      	movs	r1, #1
 8024eca:	9108      	str	r1, [sp, #32]
 8024ecc:	1c51      	adds	r1, r2, #1
 8024ece:	9111      	str	r1, [sp, #68]	@ 0x44
 8024ed0:	7852      	ldrb	r2, [r2, #1]
 8024ed2:	2a00      	cmp	r2, #0
 8024ed4:	d1c4      	bne.n	8024e60 <_strtod_l+0x38>
 8024ed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ed8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	f040 850f 	bne.w	8025900 <_strtod_l+0xad8>
 8024ee2:	ec4b ab10 	vmov	d0, sl, fp
 8024ee6:	e7e4      	b.n	8024eb2 <_strtod_l+0x8a>
 8024ee8:	2100      	movs	r1, #0
 8024eea:	e7ee      	b.n	8024eca <_strtod_l+0xa2>
 8024eec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024eee:	b13a      	cbz	r2, 8024f00 <_strtod_l+0xd8>
 8024ef0:	2135      	movs	r1, #53	@ 0x35
 8024ef2:	a814      	add	r0, sp, #80	@ 0x50
 8024ef4:	f002 f917 	bl	8027126 <__copybits>
 8024ef8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024efa:	9805      	ldr	r0, [sp, #20]
 8024efc:	f001 fce8 	bl	80268d0 <_Bfree>
 8024f00:	1e73      	subs	r3, r6, #1
 8024f02:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024f04:	2b04      	cmp	r3, #4
 8024f06:	d806      	bhi.n	8024f16 <_strtod_l+0xee>
 8024f08:	e8df f003 	tbb	[pc, r3]
 8024f0c:	201d0314 	.word	0x201d0314
 8024f10:	14          	.byte	0x14
 8024f11:	00          	.byte	0x00
 8024f12:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8024f16:	05e3      	lsls	r3, r4, #23
 8024f18:	bf48      	it	mi
 8024f1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8024f1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8024f22:	0d1b      	lsrs	r3, r3, #20
 8024f24:	051b      	lsls	r3, r3, #20
 8024f26:	2b00      	cmp	r3, #0
 8024f28:	d1b9      	bne.n	8024e9e <_strtod_l+0x76>
 8024f2a:	f001 f84d 	bl	8025fc8 <__errno>
 8024f2e:	2322      	movs	r3, #34	@ 0x22
 8024f30:	6003      	str	r3, [r0, #0]
 8024f32:	e7b4      	b.n	8024e9e <_strtod_l+0x76>
 8024f34:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8024f38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8024f3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8024f40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8024f44:	e7e7      	b.n	8024f16 <_strtod_l+0xee>
 8024f46:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80250b4 <_strtod_l+0x28c>
 8024f4a:	e7e4      	b.n	8024f16 <_strtod_l+0xee>
 8024f4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8024f50:	f04f 3aff 	mov.w	sl, #4294967295
 8024f54:	e7df      	b.n	8024f16 <_strtod_l+0xee>
 8024f56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024f58:	1c5a      	adds	r2, r3, #1
 8024f5a:	9211      	str	r2, [sp, #68]	@ 0x44
 8024f5c:	785b      	ldrb	r3, [r3, #1]
 8024f5e:	2b30      	cmp	r3, #48	@ 0x30
 8024f60:	d0f9      	beq.n	8024f56 <_strtod_l+0x12e>
 8024f62:	2b00      	cmp	r3, #0
 8024f64:	d09b      	beq.n	8024e9e <_strtod_l+0x76>
 8024f66:	2301      	movs	r3, #1
 8024f68:	2600      	movs	r6, #0
 8024f6a:	9307      	str	r3, [sp, #28]
 8024f6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024f70:	46b1      	mov	r9, r6
 8024f72:	4635      	mov	r5, r6
 8024f74:	220a      	movs	r2, #10
 8024f76:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024f78:	7804      	ldrb	r4, [r0, #0]
 8024f7a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8024f7e:	b2d9      	uxtb	r1, r3
 8024f80:	2909      	cmp	r1, #9
 8024f82:	d929      	bls.n	8024fd8 <_strtod_l+0x1b0>
 8024f84:	494a      	ldr	r1, [pc, #296]	@ (80250b0 <_strtod_l+0x288>)
 8024f86:	2201      	movs	r2, #1
 8024f88:	f000 ff46 	bl	8025e18 <strncmp>
 8024f8c:	b378      	cbz	r0, 8024fee <_strtod_l+0x1c6>
 8024f8e:	2000      	movs	r0, #0
 8024f90:	4622      	mov	r2, r4
 8024f92:	462b      	mov	r3, r5
 8024f94:	4607      	mov	r7, r0
 8024f96:	9006      	str	r0, [sp, #24]
 8024f98:	2a65      	cmp	r2, #101	@ 0x65
 8024f9a:	d001      	beq.n	8024fa0 <_strtod_l+0x178>
 8024f9c:	2a45      	cmp	r2, #69	@ 0x45
 8024f9e:	d117      	bne.n	8024fd0 <_strtod_l+0x1a8>
 8024fa0:	b91b      	cbnz	r3, 8024faa <_strtod_l+0x182>
 8024fa2:	9b07      	ldr	r3, [sp, #28]
 8024fa4:	4303      	orrs	r3, r0
 8024fa6:	d096      	beq.n	8024ed6 <_strtod_l+0xae>
 8024fa8:	2300      	movs	r3, #0
 8024faa:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8024fae:	f108 0201 	add.w	r2, r8, #1
 8024fb2:	9211      	str	r2, [sp, #68]	@ 0x44
 8024fb4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024fb8:	2a2b      	cmp	r2, #43	@ 0x2b
 8024fba:	d06b      	beq.n	8025094 <_strtod_l+0x26c>
 8024fbc:	2a2d      	cmp	r2, #45	@ 0x2d
 8024fbe:	d071      	beq.n	80250a4 <_strtod_l+0x27c>
 8024fc0:	f04f 0e00 	mov.w	lr, #0
 8024fc4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8024fc8:	2c09      	cmp	r4, #9
 8024fca:	d979      	bls.n	80250c0 <_strtod_l+0x298>
 8024fcc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8024fd0:	2400      	movs	r4, #0
 8024fd2:	e094      	b.n	80250fe <_strtod_l+0x2d6>
 8024fd4:	2300      	movs	r3, #0
 8024fd6:	e7c7      	b.n	8024f68 <_strtod_l+0x140>
 8024fd8:	2d08      	cmp	r5, #8
 8024fda:	f100 0001 	add.w	r0, r0, #1
 8024fde:	bfd4      	ite	le
 8024fe0:	fb02 3909 	mlale	r9, r2, r9, r3
 8024fe4:	fb02 3606 	mlagt	r6, r2, r6, r3
 8024fe8:	3501      	adds	r5, #1
 8024fea:	9011      	str	r0, [sp, #68]	@ 0x44
 8024fec:	e7c3      	b.n	8024f76 <_strtod_l+0x14e>
 8024fee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024ff0:	1c5a      	adds	r2, r3, #1
 8024ff2:	9211      	str	r2, [sp, #68]	@ 0x44
 8024ff4:	785a      	ldrb	r2, [r3, #1]
 8024ff6:	b375      	cbz	r5, 8025056 <_strtod_l+0x22e>
 8024ff8:	4607      	mov	r7, r0
 8024ffa:	462b      	mov	r3, r5
 8024ffc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8025000:	2909      	cmp	r1, #9
 8025002:	d913      	bls.n	802502c <_strtod_l+0x204>
 8025004:	2101      	movs	r1, #1
 8025006:	9106      	str	r1, [sp, #24]
 8025008:	e7c6      	b.n	8024f98 <_strtod_l+0x170>
 802500a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802500c:	1c5a      	adds	r2, r3, #1
 802500e:	9211      	str	r2, [sp, #68]	@ 0x44
 8025010:	785a      	ldrb	r2, [r3, #1]
 8025012:	3001      	adds	r0, #1
 8025014:	2a30      	cmp	r2, #48	@ 0x30
 8025016:	d0f8      	beq.n	802500a <_strtod_l+0x1e2>
 8025018:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802501c:	2b08      	cmp	r3, #8
 802501e:	f200 8476 	bhi.w	802590e <_strtod_l+0xae6>
 8025022:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025024:	930a      	str	r3, [sp, #40]	@ 0x28
 8025026:	4607      	mov	r7, r0
 8025028:	2000      	movs	r0, #0
 802502a:	4603      	mov	r3, r0
 802502c:	3a30      	subs	r2, #48	@ 0x30
 802502e:	f100 0101 	add.w	r1, r0, #1
 8025032:	d023      	beq.n	802507c <_strtod_l+0x254>
 8025034:	440f      	add	r7, r1
 8025036:	eb00 0c03 	add.w	ip, r0, r3
 802503a:	4619      	mov	r1, r3
 802503c:	240a      	movs	r4, #10
 802503e:	4561      	cmp	r1, ip
 8025040:	d10b      	bne.n	802505a <_strtod_l+0x232>
 8025042:	1c5c      	adds	r4, r3, #1
 8025044:	4403      	add	r3, r0
 8025046:	2b08      	cmp	r3, #8
 8025048:	4404      	add	r4, r0
 802504a:	dc11      	bgt.n	8025070 <_strtod_l+0x248>
 802504c:	230a      	movs	r3, #10
 802504e:	fb03 2909 	mla	r9, r3, r9, r2
 8025052:	2100      	movs	r1, #0
 8025054:	e013      	b.n	802507e <_strtod_l+0x256>
 8025056:	4628      	mov	r0, r5
 8025058:	e7dc      	b.n	8025014 <_strtod_l+0x1ec>
 802505a:	2908      	cmp	r1, #8
 802505c:	f101 0101 	add.w	r1, r1, #1
 8025060:	dc02      	bgt.n	8025068 <_strtod_l+0x240>
 8025062:	fb04 f909 	mul.w	r9, r4, r9
 8025066:	e7ea      	b.n	802503e <_strtod_l+0x216>
 8025068:	2910      	cmp	r1, #16
 802506a:	bfd8      	it	le
 802506c:	4366      	mulle	r6, r4
 802506e:	e7e6      	b.n	802503e <_strtod_l+0x216>
 8025070:	2b0f      	cmp	r3, #15
 8025072:	dcee      	bgt.n	8025052 <_strtod_l+0x22a>
 8025074:	230a      	movs	r3, #10
 8025076:	fb03 2606 	mla	r6, r3, r6, r2
 802507a:	e7ea      	b.n	8025052 <_strtod_l+0x22a>
 802507c:	461c      	mov	r4, r3
 802507e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025080:	1c5a      	adds	r2, r3, #1
 8025082:	9211      	str	r2, [sp, #68]	@ 0x44
 8025084:	785a      	ldrb	r2, [r3, #1]
 8025086:	4608      	mov	r0, r1
 8025088:	4623      	mov	r3, r4
 802508a:	e7b7      	b.n	8024ffc <_strtod_l+0x1d4>
 802508c:	2301      	movs	r3, #1
 802508e:	2700      	movs	r7, #0
 8025090:	9306      	str	r3, [sp, #24]
 8025092:	e786      	b.n	8024fa2 <_strtod_l+0x17a>
 8025094:	f04f 0e00 	mov.w	lr, #0
 8025098:	f108 0202 	add.w	r2, r8, #2
 802509c:	9211      	str	r2, [sp, #68]	@ 0x44
 802509e:	f898 2002 	ldrb.w	r2, [r8, #2]
 80250a2:	e78f      	b.n	8024fc4 <_strtod_l+0x19c>
 80250a4:	f04f 0e01 	mov.w	lr, #1
 80250a8:	e7f6      	b.n	8025098 <_strtod_l+0x270>
 80250aa:	bf00      	nop
 80250ac:	0802a918 	.word	0x0802a918
 80250b0:	0802a8f4 	.word	0x0802a8f4
 80250b4:	7ff00000 	.word	0x7ff00000
 80250b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80250ba:	1c54      	adds	r4, r2, #1
 80250bc:	9411      	str	r4, [sp, #68]	@ 0x44
 80250be:	7852      	ldrb	r2, [r2, #1]
 80250c0:	2a30      	cmp	r2, #48	@ 0x30
 80250c2:	d0f9      	beq.n	80250b8 <_strtod_l+0x290>
 80250c4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80250c8:	2c08      	cmp	r4, #8
 80250ca:	d881      	bhi.n	8024fd0 <_strtod_l+0x1a8>
 80250cc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80250d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80250d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80250d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80250d6:	1c51      	adds	r1, r2, #1
 80250d8:	9111      	str	r1, [sp, #68]	@ 0x44
 80250da:	7852      	ldrb	r2, [r2, #1]
 80250dc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80250e0:	2c09      	cmp	r4, #9
 80250e2:	d938      	bls.n	8025156 <_strtod_l+0x32e>
 80250e4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80250e6:	1b0c      	subs	r4, r1, r4
 80250e8:	2c08      	cmp	r4, #8
 80250ea:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80250ee:	dc02      	bgt.n	80250f6 <_strtod_l+0x2ce>
 80250f0:	4564      	cmp	r4, ip
 80250f2:	bfa8      	it	ge
 80250f4:	4664      	movge	r4, ip
 80250f6:	f1be 0f00 	cmp.w	lr, #0
 80250fa:	d000      	beq.n	80250fe <_strtod_l+0x2d6>
 80250fc:	4264      	negs	r4, r4
 80250fe:	2b00      	cmp	r3, #0
 8025100:	d14e      	bne.n	80251a0 <_strtod_l+0x378>
 8025102:	9b07      	ldr	r3, [sp, #28]
 8025104:	4318      	orrs	r0, r3
 8025106:	f47f aeca 	bne.w	8024e9e <_strtod_l+0x76>
 802510a:	9b06      	ldr	r3, [sp, #24]
 802510c:	2b00      	cmp	r3, #0
 802510e:	f47f aee2 	bne.w	8024ed6 <_strtod_l+0xae>
 8025112:	2a69      	cmp	r2, #105	@ 0x69
 8025114:	d027      	beq.n	8025166 <_strtod_l+0x33e>
 8025116:	dc24      	bgt.n	8025162 <_strtod_l+0x33a>
 8025118:	2a49      	cmp	r2, #73	@ 0x49
 802511a:	d024      	beq.n	8025166 <_strtod_l+0x33e>
 802511c:	2a4e      	cmp	r2, #78	@ 0x4e
 802511e:	f47f aeda 	bne.w	8024ed6 <_strtod_l+0xae>
 8025122:	4997      	ldr	r1, [pc, #604]	@ (8025380 <_strtod_l+0x558>)
 8025124:	a811      	add	r0, sp, #68	@ 0x44
 8025126:	f001 fad1 	bl	80266cc <__match>
 802512a:	2800      	cmp	r0, #0
 802512c:	f43f aed3 	beq.w	8024ed6 <_strtod_l+0xae>
 8025130:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025132:	781b      	ldrb	r3, [r3, #0]
 8025134:	2b28      	cmp	r3, #40	@ 0x28
 8025136:	d12d      	bne.n	8025194 <_strtod_l+0x36c>
 8025138:	4992      	ldr	r1, [pc, #584]	@ (8025384 <_strtod_l+0x55c>)
 802513a:	aa14      	add	r2, sp, #80	@ 0x50
 802513c:	a811      	add	r0, sp, #68	@ 0x44
 802513e:	f001 fad9 	bl	80266f4 <__hexnan>
 8025142:	2805      	cmp	r0, #5
 8025144:	d126      	bne.n	8025194 <_strtod_l+0x36c>
 8025146:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025148:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 802514c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8025150:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8025154:	e6a3      	b.n	8024e9e <_strtod_l+0x76>
 8025156:	240a      	movs	r4, #10
 8025158:	fb04 2c0c 	mla	ip, r4, ip, r2
 802515c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8025160:	e7b8      	b.n	80250d4 <_strtod_l+0x2ac>
 8025162:	2a6e      	cmp	r2, #110	@ 0x6e
 8025164:	e7db      	b.n	802511e <_strtod_l+0x2f6>
 8025166:	4988      	ldr	r1, [pc, #544]	@ (8025388 <_strtod_l+0x560>)
 8025168:	a811      	add	r0, sp, #68	@ 0x44
 802516a:	f001 faaf 	bl	80266cc <__match>
 802516e:	2800      	cmp	r0, #0
 8025170:	f43f aeb1 	beq.w	8024ed6 <_strtod_l+0xae>
 8025174:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025176:	4985      	ldr	r1, [pc, #532]	@ (802538c <_strtod_l+0x564>)
 8025178:	3b01      	subs	r3, #1
 802517a:	a811      	add	r0, sp, #68	@ 0x44
 802517c:	9311      	str	r3, [sp, #68]	@ 0x44
 802517e:	f001 faa5 	bl	80266cc <__match>
 8025182:	b910      	cbnz	r0, 802518a <_strtod_l+0x362>
 8025184:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025186:	3301      	adds	r3, #1
 8025188:	9311      	str	r3, [sp, #68]	@ 0x44
 802518a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80253a0 <_strtod_l+0x578>
 802518e:	f04f 0a00 	mov.w	sl, #0
 8025192:	e684      	b.n	8024e9e <_strtod_l+0x76>
 8025194:	487e      	ldr	r0, [pc, #504]	@ (8025390 <_strtod_l+0x568>)
 8025196:	f000 ff5b 	bl	8026050 <nan>
 802519a:	ec5b ab10 	vmov	sl, fp, d0
 802519e:	e67e      	b.n	8024e9e <_strtod_l+0x76>
 80251a0:	ee07 9a90 	vmov	s15, r9
 80251a4:	1be2      	subs	r2, r4, r7
 80251a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80251aa:	2d00      	cmp	r5, #0
 80251ac:	bf08      	it	eq
 80251ae:	461d      	moveq	r5, r3
 80251b0:	2b10      	cmp	r3, #16
 80251b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80251b4:	461a      	mov	r2, r3
 80251b6:	bfa8      	it	ge
 80251b8:	2210      	movge	r2, #16
 80251ba:	2b09      	cmp	r3, #9
 80251bc:	ec5b ab17 	vmov	sl, fp, d7
 80251c0:	dc15      	bgt.n	80251ee <_strtod_l+0x3c6>
 80251c2:	1be1      	subs	r1, r4, r7
 80251c4:	2900      	cmp	r1, #0
 80251c6:	f43f ae6a 	beq.w	8024e9e <_strtod_l+0x76>
 80251ca:	eba4 0107 	sub.w	r1, r4, r7
 80251ce:	dd72      	ble.n	80252b6 <_strtod_l+0x48e>
 80251d0:	2916      	cmp	r1, #22
 80251d2:	dc59      	bgt.n	8025288 <_strtod_l+0x460>
 80251d4:	4b6f      	ldr	r3, [pc, #444]	@ (8025394 <_strtod_l+0x56c>)
 80251d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80251d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80251dc:	ed93 7b00 	vldr	d7, [r3]
 80251e0:	ec4b ab16 	vmov	d6, sl, fp
 80251e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80251e8:	ec5b ab17 	vmov	sl, fp, d7
 80251ec:	e657      	b.n	8024e9e <_strtod_l+0x76>
 80251ee:	4969      	ldr	r1, [pc, #420]	@ (8025394 <_strtod_l+0x56c>)
 80251f0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80251f4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80251f8:	ee06 6a90 	vmov	s13, r6
 80251fc:	2b0f      	cmp	r3, #15
 80251fe:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8025202:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025206:	ec5b ab16 	vmov	sl, fp, d6
 802520a:	ddda      	ble.n	80251c2 <_strtod_l+0x39a>
 802520c:	1a9a      	subs	r2, r3, r2
 802520e:	1be1      	subs	r1, r4, r7
 8025210:	440a      	add	r2, r1
 8025212:	2a00      	cmp	r2, #0
 8025214:	f340 8094 	ble.w	8025340 <_strtod_l+0x518>
 8025218:	f012 000f 	ands.w	r0, r2, #15
 802521c:	d00a      	beq.n	8025234 <_strtod_l+0x40c>
 802521e:	495d      	ldr	r1, [pc, #372]	@ (8025394 <_strtod_l+0x56c>)
 8025220:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8025224:	ed91 7b00 	vldr	d7, [r1]
 8025228:	ec4b ab16 	vmov	d6, sl, fp
 802522c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025230:	ec5b ab17 	vmov	sl, fp, d7
 8025234:	f032 020f 	bics.w	r2, r2, #15
 8025238:	d073      	beq.n	8025322 <_strtod_l+0x4fa>
 802523a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 802523e:	dd47      	ble.n	80252d0 <_strtod_l+0x4a8>
 8025240:	2400      	movs	r4, #0
 8025242:	4625      	mov	r5, r4
 8025244:	9407      	str	r4, [sp, #28]
 8025246:	4626      	mov	r6, r4
 8025248:	9a05      	ldr	r2, [sp, #20]
 802524a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80253a0 <_strtod_l+0x578>
 802524e:	2322      	movs	r3, #34	@ 0x22
 8025250:	6013      	str	r3, [r2, #0]
 8025252:	f04f 0a00 	mov.w	sl, #0
 8025256:	9b07      	ldr	r3, [sp, #28]
 8025258:	2b00      	cmp	r3, #0
 802525a:	f43f ae20 	beq.w	8024e9e <_strtod_l+0x76>
 802525e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025260:	9805      	ldr	r0, [sp, #20]
 8025262:	f001 fb35 	bl	80268d0 <_Bfree>
 8025266:	9805      	ldr	r0, [sp, #20]
 8025268:	4631      	mov	r1, r6
 802526a:	f001 fb31 	bl	80268d0 <_Bfree>
 802526e:	9805      	ldr	r0, [sp, #20]
 8025270:	4629      	mov	r1, r5
 8025272:	f001 fb2d 	bl	80268d0 <_Bfree>
 8025276:	9907      	ldr	r1, [sp, #28]
 8025278:	9805      	ldr	r0, [sp, #20]
 802527a:	f001 fb29 	bl	80268d0 <_Bfree>
 802527e:	9805      	ldr	r0, [sp, #20]
 8025280:	4621      	mov	r1, r4
 8025282:	f001 fb25 	bl	80268d0 <_Bfree>
 8025286:	e60a      	b.n	8024e9e <_strtod_l+0x76>
 8025288:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 802528c:	1be0      	subs	r0, r4, r7
 802528e:	4281      	cmp	r1, r0
 8025290:	dbbc      	blt.n	802520c <_strtod_l+0x3e4>
 8025292:	4a40      	ldr	r2, [pc, #256]	@ (8025394 <_strtod_l+0x56c>)
 8025294:	f1c3 030f 	rsb	r3, r3, #15
 8025298:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 802529c:	ed91 7b00 	vldr	d7, [r1]
 80252a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80252a2:	ec4b ab16 	vmov	d6, sl, fp
 80252a6:	1acb      	subs	r3, r1, r3
 80252a8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80252ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80252b0:	ed92 6b00 	vldr	d6, [r2]
 80252b4:	e796      	b.n	80251e4 <_strtod_l+0x3bc>
 80252b6:	3116      	adds	r1, #22
 80252b8:	dba8      	blt.n	802520c <_strtod_l+0x3e4>
 80252ba:	4b36      	ldr	r3, [pc, #216]	@ (8025394 <_strtod_l+0x56c>)
 80252bc:	1b3c      	subs	r4, r7, r4
 80252be:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80252c2:	ed94 7b00 	vldr	d7, [r4]
 80252c6:	ec4b ab16 	vmov	d6, sl, fp
 80252ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80252ce:	e78b      	b.n	80251e8 <_strtod_l+0x3c0>
 80252d0:	2000      	movs	r0, #0
 80252d2:	ec4b ab17 	vmov	d7, sl, fp
 80252d6:	4e30      	ldr	r6, [pc, #192]	@ (8025398 <_strtod_l+0x570>)
 80252d8:	1112      	asrs	r2, r2, #4
 80252da:	4601      	mov	r1, r0
 80252dc:	2a01      	cmp	r2, #1
 80252de:	dc23      	bgt.n	8025328 <_strtod_l+0x500>
 80252e0:	b108      	cbz	r0, 80252e6 <_strtod_l+0x4be>
 80252e2:	ec5b ab17 	vmov	sl, fp, d7
 80252e6:	4a2c      	ldr	r2, [pc, #176]	@ (8025398 <_strtod_l+0x570>)
 80252e8:	482c      	ldr	r0, [pc, #176]	@ (802539c <_strtod_l+0x574>)
 80252ea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80252ee:	ed92 7b00 	vldr	d7, [r2]
 80252f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80252f6:	ec4b ab16 	vmov	d6, sl, fp
 80252fa:	4a29      	ldr	r2, [pc, #164]	@ (80253a0 <_strtod_l+0x578>)
 80252fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025300:	ee17 1a90 	vmov	r1, s15
 8025304:	400a      	ands	r2, r1
 8025306:	4282      	cmp	r2, r0
 8025308:	ec5b ab17 	vmov	sl, fp, d7
 802530c:	d898      	bhi.n	8025240 <_strtod_l+0x418>
 802530e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8025312:	4282      	cmp	r2, r0
 8025314:	bf86      	itte	hi
 8025316:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80253a4 <_strtod_l+0x57c>
 802531a:	f04f 3aff 	movhi.w	sl, #4294967295
 802531e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8025322:	2200      	movs	r2, #0
 8025324:	9206      	str	r2, [sp, #24]
 8025326:	e076      	b.n	8025416 <_strtod_l+0x5ee>
 8025328:	f012 0f01 	tst.w	r2, #1
 802532c:	d004      	beq.n	8025338 <_strtod_l+0x510>
 802532e:	ed96 6b00 	vldr	d6, [r6]
 8025332:	2001      	movs	r0, #1
 8025334:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025338:	3101      	adds	r1, #1
 802533a:	1052      	asrs	r2, r2, #1
 802533c:	3608      	adds	r6, #8
 802533e:	e7cd      	b.n	80252dc <_strtod_l+0x4b4>
 8025340:	d0ef      	beq.n	8025322 <_strtod_l+0x4fa>
 8025342:	4252      	negs	r2, r2
 8025344:	f012 000f 	ands.w	r0, r2, #15
 8025348:	d00a      	beq.n	8025360 <_strtod_l+0x538>
 802534a:	4912      	ldr	r1, [pc, #72]	@ (8025394 <_strtod_l+0x56c>)
 802534c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8025350:	ed91 7b00 	vldr	d7, [r1]
 8025354:	ec4b ab16 	vmov	d6, sl, fp
 8025358:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802535c:	ec5b ab17 	vmov	sl, fp, d7
 8025360:	1112      	asrs	r2, r2, #4
 8025362:	d0de      	beq.n	8025322 <_strtod_l+0x4fa>
 8025364:	2a1f      	cmp	r2, #31
 8025366:	dd1f      	ble.n	80253a8 <_strtod_l+0x580>
 8025368:	2400      	movs	r4, #0
 802536a:	4625      	mov	r5, r4
 802536c:	9407      	str	r4, [sp, #28]
 802536e:	4626      	mov	r6, r4
 8025370:	9a05      	ldr	r2, [sp, #20]
 8025372:	2322      	movs	r3, #34	@ 0x22
 8025374:	f04f 0a00 	mov.w	sl, #0
 8025378:	f04f 0b00 	mov.w	fp, #0
 802537c:	6013      	str	r3, [r2, #0]
 802537e:	e76a      	b.n	8025256 <_strtod_l+0x42e>
 8025380:	0802a8ff 	.word	0x0802a8ff
 8025384:	0802a904 	.word	0x0802a904
 8025388:	0802a8f6 	.word	0x0802a8f6
 802538c:	0802a8f9 	.word	0x0802a8f9
 8025390:	0802a8f3 	.word	0x0802a8f3
 8025394:	0802ab78 	.word	0x0802ab78
 8025398:	0802ab50 	.word	0x0802ab50
 802539c:	7ca00000 	.word	0x7ca00000
 80253a0:	7ff00000 	.word	0x7ff00000
 80253a4:	7fefffff 	.word	0x7fefffff
 80253a8:	f012 0110 	ands.w	r1, r2, #16
 80253ac:	bf18      	it	ne
 80253ae:	216a      	movne	r1, #106	@ 0x6a
 80253b0:	9106      	str	r1, [sp, #24]
 80253b2:	ec4b ab17 	vmov	d7, sl, fp
 80253b6:	49b0      	ldr	r1, [pc, #704]	@ (8025678 <_strtod_l+0x850>)
 80253b8:	2000      	movs	r0, #0
 80253ba:	07d6      	lsls	r6, r2, #31
 80253bc:	d504      	bpl.n	80253c8 <_strtod_l+0x5a0>
 80253be:	ed91 6b00 	vldr	d6, [r1]
 80253c2:	2001      	movs	r0, #1
 80253c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80253c8:	1052      	asrs	r2, r2, #1
 80253ca:	f101 0108 	add.w	r1, r1, #8
 80253ce:	d1f4      	bne.n	80253ba <_strtod_l+0x592>
 80253d0:	b108      	cbz	r0, 80253d6 <_strtod_l+0x5ae>
 80253d2:	ec5b ab17 	vmov	sl, fp, d7
 80253d6:	9a06      	ldr	r2, [sp, #24]
 80253d8:	b1b2      	cbz	r2, 8025408 <_strtod_l+0x5e0>
 80253da:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80253de:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80253e2:	2a00      	cmp	r2, #0
 80253e4:	4658      	mov	r0, fp
 80253e6:	dd0f      	ble.n	8025408 <_strtod_l+0x5e0>
 80253e8:	2a1f      	cmp	r2, #31
 80253ea:	dd55      	ble.n	8025498 <_strtod_l+0x670>
 80253ec:	2a34      	cmp	r2, #52	@ 0x34
 80253ee:	bfde      	ittt	le
 80253f0:	f04f 32ff 	movle.w	r2, #4294967295
 80253f4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80253f8:	408a      	lslle	r2, r1
 80253fa:	f04f 0a00 	mov.w	sl, #0
 80253fe:	bfcc      	ite	gt
 8025400:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8025404:	ea02 0b00 	andle.w	fp, r2, r0
 8025408:	ec4b ab17 	vmov	d7, sl, fp
 802540c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025414:	d0a8      	beq.n	8025368 <_strtod_l+0x540>
 8025416:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025418:	9805      	ldr	r0, [sp, #20]
 802541a:	f8cd 9000 	str.w	r9, [sp]
 802541e:	462a      	mov	r2, r5
 8025420:	f001 fabe 	bl	80269a0 <__s2b>
 8025424:	9007      	str	r0, [sp, #28]
 8025426:	2800      	cmp	r0, #0
 8025428:	f43f af0a 	beq.w	8025240 <_strtod_l+0x418>
 802542c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802542e:	1b3f      	subs	r7, r7, r4
 8025430:	2b00      	cmp	r3, #0
 8025432:	bfb4      	ite	lt
 8025434:	463b      	movlt	r3, r7
 8025436:	2300      	movge	r3, #0
 8025438:	930a      	str	r3, [sp, #40]	@ 0x28
 802543a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802543c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8025668 <_strtod_l+0x840>
 8025440:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025444:	2400      	movs	r4, #0
 8025446:	930d      	str	r3, [sp, #52]	@ 0x34
 8025448:	4625      	mov	r5, r4
 802544a:	9b07      	ldr	r3, [sp, #28]
 802544c:	9805      	ldr	r0, [sp, #20]
 802544e:	6859      	ldr	r1, [r3, #4]
 8025450:	f001 f9fe 	bl	8026850 <_Balloc>
 8025454:	4606      	mov	r6, r0
 8025456:	2800      	cmp	r0, #0
 8025458:	f43f aef6 	beq.w	8025248 <_strtod_l+0x420>
 802545c:	9b07      	ldr	r3, [sp, #28]
 802545e:	691a      	ldr	r2, [r3, #16]
 8025460:	ec4b ab19 	vmov	d9, sl, fp
 8025464:	3202      	adds	r2, #2
 8025466:	f103 010c 	add.w	r1, r3, #12
 802546a:	0092      	lsls	r2, r2, #2
 802546c:	300c      	adds	r0, #12
 802546e:	f000 fde0 	bl	8026032 <memcpy>
 8025472:	eeb0 0b49 	vmov.f64	d0, d9
 8025476:	9805      	ldr	r0, [sp, #20]
 8025478:	aa14      	add	r2, sp, #80	@ 0x50
 802547a:	a913      	add	r1, sp, #76	@ 0x4c
 802547c:	f001 fdcc 	bl	8027018 <__d2b>
 8025480:	9012      	str	r0, [sp, #72]	@ 0x48
 8025482:	2800      	cmp	r0, #0
 8025484:	f43f aee0 	beq.w	8025248 <_strtod_l+0x420>
 8025488:	9805      	ldr	r0, [sp, #20]
 802548a:	2101      	movs	r1, #1
 802548c:	f001 fb1e 	bl	8026acc <__i2b>
 8025490:	4605      	mov	r5, r0
 8025492:	b940      	cbnz	r0, 80254a6 <_strtod_l+0x67e>
 8025494:	2500      	movs	r5, #0
 8025496:	e6d7      	b.n	8025248 <_strtod_l+0x420>
 8025498:	f04f 31ff 	mov.w	r1, #4294967295
 802549c:	fa01 f202 	lsl.w	r2, r1, r2
 80254a0:	ea02 0a0a 	and.w	sl, r2, sl
 80254a4:	e7b0      	b.n	8025408 <_strtod_l+0x5e0>
 80254a6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80254a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80254aa:	2f00      	cmp	r7, #0
 80254ac:	bfab      	itete	ge
 80254ae:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80254b0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80254b2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80254b6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80254ba:	bfac      	ite	ge
 80254bc:	eb07 0903 	addge.w	r9, r7, r3
 80254c0:	eba3 0807 	sublt.w	r8, r3, r7
 80254c4:	9b06      	ldr	r3, [sp, #24]
 80254c6:	1aff      	subs	r7, r7, r3
 80254c8:	4417      	add	r7, r2
 80254ca:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80254ce:	4a6b      	ldr	r2, [pc, #428]	@ (802567c <_strtod_l+0x854>)
 80254d0:	3f01      	subs	r7, #1
 80254d2:	4297      	cmp	r7, r2
 80254d4:	da51      	bge.n	802557a <_strtod_l+0x752>
 80254d6:	1bd1      	subs	r1, r2, r7
 80254d8:	291f      	cmp	r1, #31
 80254da:	eba3 0301 	sub.w	r3, r3, r1
 80254de:	f04f 0201 	mov.w	r2, #1
 80254e2:	dc3e      	bgt.n	8025562 <_strtod_l+0x73a>
 80254e4:	408a      	lsls	r2, r1
 80254e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80254e8:	2200      	movs	r2, #0
 80254ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80254ec:	eb09 0703 	add.w	r7, r9, r3
 80254f0:	4498      	add	r8, r3
 80254f2:	9b06      	ldr	r3, [sp, #24]
 80254f4:	45b9      	cmp	r9, r7
 80254f6:	4498      	add	r8, r3
 80254f8:	464b      	mov	r3, r9
 80254fa:	bfa8      	it	ge
 80254fc:	463b      	movge	r3, r7
 80254fe:	4543      	cmp	r3, r8
 8025500:	bfa8      	it	ge
 8025502:	4643      	movge	r3, r8
 8025504:	2b00      	cmp	r3, #0
 8025506:	bfc2      	ittt	gt
 8025508:	1aff      	subgt	r7, r7, r3
 802550a:	eba8 0803 	subgt.w	r8, r8, r3
 802550e:	eba9 0903 	subgt.w	r9, r9, r3
 8025512:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025514:	2b00      	cmp	r3, #0
 8025516:	dd16      	ble.n	8025546 <_strtod_l+0x71e>
 8025518:	4629      	mov	r1, r5
 802551a:	9805      	ldr	r0, [sp, #20]
 802551c:	461a      	mov	r2, r3
 802551e:	f001 fb95 	bl	8026c4c <__pow5mult>
 8025522:	4605      	mov	r5, r0
 8025524:	2800      	cmp	r0, #0
 8025526:	d0b5      	beq.n	8025494 <_strtod_l+0x66c>
 8025528:	4601      	mov	r1, r0
 802552a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802552c:	9805      	ldr	r0, [sp, #20]
 802552e:	f001 fae3 	bl	8026af8 <__multiply>
 8025532:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025534:	2800      	cmp	r0, #0
 8025536:	f43f ae87 	beq.w	8025248 <_strtod_l+0x420>
 802553a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802553c:	9805      	ldr	r0, [sp, #20]
 802553e:	f001 f9c7 	bl	80268d0 <_Bfree>
 8025542:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025544:	9312      	str	r3, [sp, #72]	@ 0x48
 8025546:	2f00      	cmp	r7, #0
 8025548:	dc1b      	bgt.n	8025582 <_strtod_l+0x75a>
 802554a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802554c:	2b00      	cmp	r3, #0
 802554e:	dd21      	ble.n	8025594 <_strtod_l+0x76c>
 8025550:	4631      	mov	r1, r6
 8025552:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025554:	9805      	ldr	r0, [sp, #20]
 8025556:	f001 fb79 	bl	8026c4c <__pow5mult>
 802555a:	4606      	mov	r6, r0
 802555c:	b9d0      	cbnz	r0, 8025594 <_strtod_l+0x76c>
 802555e:	2600      	movs	r6, #0
 8025560:	e672      	b.n	8025248 <_strtod_l+0x420>
 8025562:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8025566:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 802556a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 802556e:	37e2      	adds	r7, #226	@ 0xe2
 8025570:	fa02 f107 	lsl.w	r1, r2, r7
 8025574:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025576:	920c      	str	r2, [sp, #48]	@ 0x30
 8025578:	e7b8      	b.n	80254ec <_strtod_l+0x6c4>
 802557a:	2200      	movs	r2, #0
 802557c:	920b      	str	r2, [sp, #44]	@ 0x2c
 802557e:	2201      	movs	r2, #1
 8025580:	e7f9      	b.n	8025576 <_strtod_l+0x74e>
 8025582:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025584:	9805      	ldr	r0, [sp, #20]
 8025586:	463a      	mov	r2, r7
 8025588:	f001 fbba 	bl	8026d00 <__lshift>
 802558c:	9012      	str	r0, [sp, #72]	@ 0x48
 802558e:	2800      	cmp	r0, #0
 8025590:	d1db      	bne.n	802554a <_strtod_l+0x722>
 8025592:	e659      	b.n	8025248 <_strtod_l+0x420>
 8025594:	f1b8 0f00 	cmp.w	r8, #0
 8025598:	dd07      	ble.n	80255aa <_strtod_l+0x782>
 802559a:	4631      	mov	r1, r6
 802559c:	9805      	ldr	r0, [sp, #20]
 802559e:	4642      	mov	r2, r8
 80255a0:	f001 fbae 	bl	8026d00 <__lshift>
 80255a4:	4606      	mov	r6, r0
 80255a6:	2800      	cmp	r0, #0
 80255a8:	d0d9      	beq.n	802555e <_strtod_l+0x736>
 80255aa:	f1b9 0f00 	cmp.w	r9, #0
 80255ae:	dd08      	ble.n	80255c2 <_strtod_l+0x79a>
 80255b0:	4629      	mov	r1, r5
 80255b2:	9805      	ldr	r0, [sp, #20]
 80255b4:	464a      	mov	r2, r9
 80255b6:	f001 fba3 	bl	8026d00 <__lshift>
 80255ba:	4605      	mov	r5, r0
 80255bc:	2800      	cmp	r0, #0
 80255be:	f43f ae43 	beq.w	8025248 <_strtod_l+0x420>
 80255c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80255c4:	9805      	ldr	r0, [sp, #20]
 80255c6:	4632      	mov	r2, r6
 80255c8:	f001 fc22 	bl	8026e10 <__mdiff>
 80255cc:	4604      	mov	r4, r0
 80255ce:	2800      	cmp	r0, #0
 80255d0:	f43f ae3a 	beq.w	8025248 <_strtod_l+0x420>
 80255d4:	2300      	movs	r3, #0
 80255d6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80255da:	60c3      	str	r3, [r0, #12]
 80255dc:	4629      	mov	r1, r5
 80255de:	f001 fbfb 	bl	8026dd8 <__mcmp>
 80255e2:	2800      	cmp	r0, #0
 80255e4:	da4e      	bge.n	8025684 <_strtod_l+0x85c>
 80255e6:	ea58 080a 	orrs.w	r8, r8, sl
 80255ea:	d174      	bne.n	80256d6 <_strtod_l+0x8ae>
 80255ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80255f0:	2b00      	cmp	r3, #0
 80255f2:	d170      	bne.n	80256d6 <_strtod_l+0x8ae>
 80255f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80255f8:	0d1b      	lsrs	r3, r3, #20
 80255fa:	051b      	lsls	r3, r3, #20
 80255fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8025600:	d969      	bls.n	80256d6 <_strtod_l+0x8ae>
 8025602:	6963      	ldr	r3, [r4, #20]
 8025604:	b913      	cbnz	r3, 802560c <_strtod_l+0x7e4>
 8025606:	6923      	ldr	r3, [r4, #16]
 8025608:	2b01      	cmp	r3, #1
 802560a:	dd64      	ble.n	80256d6 <_strtod_l+0x8ae>
 802560c:	4621      	mov	r1, r4
 802560e:	2201      	movs	r2, #1
 8025610:	9805      	ldr	r0, [sp, #20]
 8025612:	f001 fb75 	bl	8026d00 <__lshift>
 8025616:	4629      	mov	r1, r5
 8025618:	4604      	mov	r4, r0
 802561a:	f001 fbdd 	bl	8026dd8 <__mcmp>
 802561e:	2800      	cmp	r0, #0
 8025620:	dd59      	ble.n	80256d6 <_strtod_l+0x8ae>
 8025622:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025626:	9a06      	ldr	r2, [sp, #24]
 8025628:	0d1b      	lsrs	r3, r3, #20
 802562a:	051b      	lsls	r3, r3, #20
 802562c:	2a00      	cmp	r2, #0
 802562e:	d070      	beq.n	8025712 <_strtod_l+0x8ea>
 8025630:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8025634:	d86d      	bhi.n	8025712 <_strtod_l+0x8ea>
 8025636:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802563a:	f67f ae99 	bls.w	8025370 <_strtod_l+0x548>
 802563e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8025670 <_strtod_l+0x848>
 8025642:	ec4b ab16 	vmov	d6, sl, fp
 8025646:	4b0e      	ldr	r3, [pc, #56]	@ (8025680 <_strtod_l+0x858>)
 8025648:	ee26 7b07 	vmul.f64	d7, d6, d7
 802564c:	ee17 2a90 	vmov	r2, s15
 8025650:	4013      	ands	r3, r2
 8025652:	ec5b ab17 	vmov	sl, fp, d7
 8025656:	2b00      	cmp	r3, #0
 8025658:	f47f ae01 	bne.w	802525e <_strtod_l+0x436>
 802565c:	9a05      	ldr	r2, [sp, #20]
 802565e:	2322      	movs	r3, #34	@ 0x22
 8025660:	6013      	str	r3, [r2, #0]
 8025662:	e5fc      	b.n	802525e <_strtod_l+0x436>
 8025664:	f3af 8000 	nop.w
 8025668:	ffc00000 	.word	0xffc00000
 802566c:	41dfffff 	.word	0x41dfffff
 8025670:	00000000 	.word	0x00000000
 8025674:	39500000 	.word	0x39500000
 8025678:	0802a930 	.word	0x0802a930
 802567c:	fffffc02 	.word	0xfffffc02
 8025680:	7ff00000 	.word	0x7ff00000
 8025684:	46d9      	mov	r9, fp
 8025686:	d15d      	bne.n	8025744 <_strtod_l+0x91c>
 8025688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802568c:	f1b8 0f00 	cmp.w	r8, #0
 8025690:	d02a      	beq.n	80256e8 <_strtod_l+0x8c0>
 8025692:	4aab      	ldr	r2, [pc, #684]	@ (8025940 <_strtod_l+0xb18>)
 8025694:	4293      	cmp	r3, r2
 8025696:	d12a      	bne.n	80256ee <_strtod_l+0x8c6>
 8025698:	9b06      	ldr	r3, [sp, #24]
 802569a:	4652      	mov	r2, sl
 802569c:	b1fb      	cbz	r3, 80256de <_strtod_l+0x8b6>
 802569e:	4ba9      	ldr	r3, [pc, #676]	@ (8025944 <_strtod_l+0xb1c>)
 80256a0:	ea0b 0303 	and.w	r3, fp, r3
 80256a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80256a8:	f04f 31ff 	mov.w	r1, #4294967295
 80256ac:	d81a      	bhi.n	80256e4 <_strtod_l+0x8bc>
 80256ae:	0d1b      	lsrs	r3, r3, #20
 80256b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80256b4:	fa01 f303 	lsl.w	r3, r1, r3
 80256b8:	429a      	cmp	r2, r3
 80256ba:	d118      	bne.n	80256ee <_strtod_l+0x8c6>
 80256bc:	4ba2      	ldr	r3, [pc, #648]	@ (8025948 <_strtod_l+0xb20>)
 80256be:	4599      	cmp	r9, r3
 80256c0:	d102      	bne.n	80256c8 <_strtod_l+0x8a0>
 80256c2:	3201      	adds	r2, #1
 80256c4:	f43f adc0 	beq.w	8025248 <_strtod_l+0x420>
 80256c8:	4b9e      	ldr	r3, [pc, #632]	@ (8025944 <_strtod_l+0xb1c>)
 80256ca:	ea09 0303 	and.w	r3, r9, r3
 80256ce:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80256d2:	f04f 0a00 	mov.w	sl, #0
 80256d6:	9b06      	ldr	r3, [sp, #24]
 80256d8:	2b00      	cmp	r3, #0
 80256da:	d1b0      	bne.n	802563e <_strtod_l+0x816>
 80256dc:	e5bf      	b.n	802525e <_strtod_l+0x436>
 80256de:	f04f 33ff 	mov.w	r3, #4294967295
 80256e2:	e7e9      	b.n	80256b8 <_strtod_l+0x890>
 80256e4:	460b      	mov	r3, r1
 80256e6:	e7e7      	b.n	80256b8 <_strtod_l+0x890>
 80256e8:	ea53 030a 	orrs.w	r3, r3, sl
 80256ec:	d099      	beq.n	8025622 <_strtod_l+0x7fa>
 80256ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80256f0:	b1c3      	cbz	r3, 8025724 <_strtod_l+0x8fc>
 80256f2:	ea13 0f09 	tst.w	r3, r9
 80256f6:	d0ee      	beq.n	80256d6 <_strtod_l+0x8ae>
 80256f8:	9a06      	ldr	r2, [sp, #24]
 80256fa:	4650      	mov	r0, sl
 80256fc:	4659      	mov	r1, fp
 80256fe:	f1b8 0f00 	cmp.w	r8, #0
 8025702:	d013      	beq.n	802572c <_strtod_l+0x904>
 8025704:	f7ff fb76 	bl	8024df4 <sulp>
 8025708:	ee39 7b00 	vadd.f64	d7, d9, d0
 802570c:	ec5b ab17 	vmov	sl, fp, d7
 8025710:	e7e1      	b.n	80256d6 <_strtod_l+0x8ae>
 8025712:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8025716:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802571a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802571e:	f04f 3aff 	mov.w	sl, #4294967295
 8025722:	e7d8      	b.n	80256d6 <_strtod_l+0x8ae>
 8025724:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025726:	ea13 0f0a 	tst.w	r3, sl
 802572a:	e7e4      	b.n	80256f6 <_strtod_l+0x8ce>
 802572c:	f7ff fb62 	bl	8024df4 <sulp>
 8025730:	ee39 0b40 	vsub.f64	d0, d9, d0
 8025734:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8025738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802573c:	ec5b ab10 	vmov	sl, fp, d0
 8025740:	d1c9      	bne.n	80256d6 <_strtod_l+0x8ae>
 8025742:	e615      	b.n	8025370 <_strtod_l+0x548>
 8025744:	4629      	mov	r1, r5
 8025746:	4620      	mov	r0, r4
 8025748:	f001 fcbe 	bl	80270c8 <__ratio>
 802574c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8025750:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8025754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025758:	d85d      	bhi.n	8025816 <_strtod_l+0x9ee>
 802575a:	f1b8 0f00 	cmp.w	r8, #0
 802575e:	d164      	bne.n	802582a <_strtod_l+0xa02>
 8025760:	f1ba 0f00 	cmp.w	sl, #0
 8025764:	d14b      	bne.n	80257fe <_strtod_l+0x9d6>
 8025766:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802576a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 802576e:	2b00      	cmp	r3, #0
 8025770:	d160      	bne.n	8025834 <_strtod_l+0xa0c>
 8025772:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8025776:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 802577a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802577e:	d401      	bmi.n	8025784 <_strtod_l+0x95c>
 8025780:	ee20 8b08 	vmul.f64	d8, d0, d8
 8025784:	eeb1 ab48 	vneg.f64	d10, d8
 8025788:	486e      	ldr	r0, [pc, #440]	@ (8025944 <_strtod_l+0xb1c>)
 802578a:	4970      	ldr	r1, [pc, #448]	@ (802594c <_strtod_l+0xb24>)
 802578c:	ea09 0700 	and.w	r7, r9, r0
 8025790:	428f      	cmp	r7, r1
 8025792:	ec53 2b1a 	vmov	r2, r3, d10
 8025796:	d17d      	bne.n	8025894 <_strtod_l+0xa6c>
 8025798:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 802579c:	ec4b ab1c 	vmov	d12, sl, fp
 80257a0:	eeb0 0b4c 	vmov.f64	d0, d12
 80257a4:	f001 fbc8 	bl	8026f38 <__ulp>
 80257a8:	4866      	ldr	r0, [pc, #408]	@ (8025944 <_strtod_l+0xb1c>)
 80257aa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80257ae:	ee1c 3a90 	vmov	r3, s25
 80257b2:	4a67      	ldr	r2, [pc, #412]	@ (8025950 <_strtod_l+0xb28>)
 80257b4:	ea03 0100 	and.w	r1, r3, r0
 80257b8:	4291      	cmp	r1, r2
 80257ba:	ec5b ab1c 	vmov	sl, fp, d12
 80257be:	d93c      	bls.n	802583a <_strtod_l+0xa12>
 80257c0:	ee19 2a90 	vmov	r2, s19
 80257c4:	4b60      	ldr	r3, [pc, #384]	@ (8025948 <_strtod_l+0xb20>)
 80257c6:	429a      	cmp	r2, r3
 80257c8:	d104      	bne.n	80257d4 <_strtod_l+0x9ac>
 80257ca:	ee19 3a10 	vmov	r3, s18
 80257ce:	3301      	adds	r3, #1
 80257d0:	f43f ad3a 	beq.w	8025248 <_strtod_l+0x420>
 80257d4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8025948 <_strtod_l+0xb20>
 80257d8:	f04f 3aff 	mov.w	sl, #4294967295
 80257dc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80257de:	9805      	ldr	r0, [sp, #20]
 80257e0:	f001 f876 	bl	80268d0 <_Bfree>
 80257e4:	9805      	ldr	r0, [sp, #20]
 80257e6:	4631      	mov	r1, r6
 80257e8:	f001 f872 	bl	80268d0 <_Bfree>
 80257ec:	9805      	ldr	r0, [sp, #20]
 80257ee:	4629      	mov	r1, r5
 80257f0:	f001 f86e 	bl	80268d0 <_Bfree>
 80257f4:	9805      	ldr	r0, [sp, #20]
 80257f6:	4621      	mov	r1, r4
 80257f8:	f001 f86a 	bl	80268d0 <_Bfree>
 80257fc:	e625      	b.n	802544a <_strtod_l+0x622>
 80257fe:	f1ba 0f01 	cmp.w	sl, #1
 8025802:	d103      	bne.n	802580c <_strtod_l+0x9e4>
 8025804:	f1bb 0f00 	cmp.w	fp, #0
 8025808:	f43f adb2 	beq.w	8025370 <_strtod_l+0x548>
 802580c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8025810:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8025814:	e7b8      	b.n	8025788 <_strtod_l+0x960>
 8025816:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 802581a:	ee20 8b08 	vmul.f64	d8, d0, d8
 802581e:	f1b8 0f00 	cmp.w	r8, #0
 8025822:	d0af      	beq.n	8025784 <_strtod_l+0x95c>
 8025824:	eeb0 ab48 	vmov.f64	d10, d8
 8025828:	e7ae      	b.n	8025788 <_strtod_l+0x960>
 802582a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 802582e:	eeb0 8b4a 	vmov.f64	d8, d10
 8025832:	e7a9      	b.n	8025788 <_strtod_l+0x960>
 8025834:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8025838:	e7a6      	b.n	8025788 <_strtod_l+0x960>
 802583a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802583e:	9b06      	ldr	r3, [sp, #24]
 8025840:	46d9      	mov	r9, fp
 8025842:	2b00      	cmp	r3, #0
 8025844:	d1ca      	bne.n	80257dc <_strtod_l+0x9b4>
 8025846:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802584a:	0d1b      	lsrs	r3, r3, #20
 802584c:	051b      	lsls	r3, r3, #20
 802584e:	429f      	cmp	r7, r3
 8025850:	d1c4      	bne.n	80257dc <_strtod_l+0x9b4>
 8025852:	ec51 0b18 	vmov	r0, r1, d8
 8025856:	f7da ff97 	bl	8000788 <__aeabi_d2lz>
 802585a:	f7da ff4f 	bl	80006fc <__aeabi_l2d>
 802585e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8025862:	ec41 0b17 	vmov	d7, r0, r1
 8025866:	ea49 090a 	orr.w	r9, r9, sl
 802586a:	ea59 0908 	orrs.w	r9, r9, r8
 802586e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8025872:	d03c      	beq.n	80258ee <_strtod_l+0xac6>
 8025874:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8025928 <_strtod_l+0xb00>
 8025878:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802587c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025880:	f53f aced 	bmi.w	802525e <_strtod_l+0x436>
 8025884:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8025930 <_strtod_l+0xb08>
 8025888:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802588c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025890:	dda4      	ble.n	80257dc <_strtod_l+0x9b4>
 8025892:	e4e4      	b.n	802525e <_strtod_l+0x436>
 8025894:	9906      	ldr	r1, [sp, #24]
 8025896:	b1e1      	cbz	r1, 80258d2 <_strtod_l+0xaaa>
 8025898:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 802589c:	d819      	bhi.n	80258d2 <_strtod_l+0xaaa>
 802589e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80258a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80258a6:	d811      	bhi.n	80258cc <_strtod_l+0xaa4>
 80258a8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80258ac:	ee18 3a10 	vmov	r3, s16
 80258b0:	2b01      	cmp	r3, #1
 80258b2:	bf38      	it	cc
 80258b4:	2301      	movcc	r3, #1
 80258b6:	ee08 3a10 	vmov	s16, r3
 80258ba:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80258be:	f1b8 0f00 	cmp.w	r8, #0
 80258c2:	d111      	bne.n	80258e8 <_strtod_l+0xac0>
 80258c4:	eeb1 7b48 	vneg.f64	d7, d8
 80258c8:	ec53 2b17 	vmov	r2, r3, d7
 80258cc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80258d0:	1bcb      	subs	r3, r1, r7
 80258d2:	eeb0 0b49 	vmov.f64	d0, d9
 80258d6:	ec43 2b1a 	vmov	d10, r2, r3
 80258da:	f001 fb2d 	bl	8026f38 <__ulp>
 80258de:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80258e2:	ec5b ab19 	vmov	sl, fp, d9
 80258e6:	e7aa      	b.n	802583e <_strtod_l+0xa16>
 80258e8:	eeb0 7b48 	vmov.f64	d7, d8
 80258ec:	e7ec      	b.n	80258c8 <_strtod_l+0xaa0>
 80258ee:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8025938 <_strtod_l+0xb10>
 80258f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80258f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80258fa:	f57f af6f 	bpl.w	80257dc <_strtod_l+0x9b4>
 80258fe:	e4ae      	b.n	802525e <_strtod_l+0x436>
 8025900:	2300      	movs	r3, #0
 8025902:	9308      	str	r3, [sp, #32]
 8025904:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025906:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025908:	6013      	str	r3, [r2, #0]
 802590a:	f7ff bacc 	b.w	8024ea6 <_strtod_l+0x7e>
 802590e:	2a65      	cmp	r2, #101	@ 0x65
 8025910:	f43f abbc 	beq.w	802508c <_strtod_l+0x264>
 8025914:	2a45      	cmp	r2, #69	@ 0x45
 8025916:	f43f abb9 	beq.w	802508c <_strtod_l+0x264>
 802591a:	2301      	movs	r3, #1
 802591c:	9306      	str	r3, [sp, #24]
 802591e:	f7ff bbf0 	b.w	8025102 <_strtod_l+0x2da>
 8025922:	bf00      	nop
 8025924:	f3af 8000 	nop.w
 8025928:	94a03595 	.word	0x94a03595
 802592c:	3fdfffff 	.word	0x3fdfffff
 8025930:	35afe535 	.word	0x35afe535
 8025934:	3fe00000 	.word	0x3fe00000
 8025938:	94a03595 	.word	0x94a03595
 802593c:	3fcfffff 	.word	0x3fcfffff
 8025940:	000fffff 	.word	0x000fffff
 8025944:	7ff00000 	.word	0x7ff00000
 8025948:	7fefffff 	.word	0x7fefffff
 802594c:	7fe00000 	.word	0x7fe00000
 8025950:	7c9fffff 	.word	0x7c9fffff
 8025954:	00000000 	.word	0x00000000

08025958 <strtof>:
 8025958:	b510      	push	{r4, lr}
 802595a:	4c21      	ldr	r4, [pc, #132]	@ (80259e0 <strtof+0x88>)
 802595c:	4b21      	ldr	r3, [pc, #132]	@ (80259e4 <strtof+0x8c>)
 802595e:	460a      	mov	r2, r1
 8025960:	4601      	mov	r1, r0
 8025962:	6820      	ldr	r0, [r4, #0]
 8025964:	f7ff fa60 	bl	8024e28 <_strtod_l>
 8025968:	eeb4 0b40 	vcmp.f64	d0, d0
 802596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025970:	eeb0 7b40 	vmov.f64	d7, d0
 8025974:	d70d      	bvc.n	8025992 <strtof+0x3a>
 8025976:	ee17 3a90 	vmov	r3, s15
 802597a:	2b00      	cmp	r3, #0
 802597c:	481a      	ldr	r0, [pc, #104]	@ (80259e8 <strtof+0x90>)
 802597e:	da04      	bge.n	802598a <strtof+0x32>
 8025980:	f000 fb6e 	bl	8026060 <nanf>
 8025984:	eeb1 0a40 	vneg.f32	s0, s0
 8025988:	bd10      	pop	{r4, pc}
 802598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802598e:	f000 bb67 	b.w	8026060 <nanf>
 8025992:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025996:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80259ec <strtof+0x94>
 802599a:	eeb0 6ac0 	vabs.f32	s12, s0
 802599e:	eeb4 6a66 	vcmp.f32	s12, s13
 80259a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259a6:	dd08      	ble.n	80259ba <strtof+0x62>
 80259a8:	eeb0 6bc7 	vabs.f64	d6, d7
 80259ac:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 80259d8 <strtof+0x80>
 80259b0:	eeb4 6b45 	vcmp.f64	d6, d5
 80259b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259b8:	dd0a      	ble.n	80259d0 <strtof+0x78>
 80259ba:	ee10 3a10 	vmov	r3, s0
 80259be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80259c2:	d1e1      	bne.n	8025988 <strtof+0x30>
 80259c4:	ee17 2a90 	vmov	r2, s15
 80259c8:	4b09      	ldr	r3, [pc, #36]	@ (80259f0 <strtof+0x98>)
 80259ca:	4013      	ands	r3, r2
 80259cc:	2b00      	cmp	r3, #0
 80259ce:	d0db      	beq.n	8025988 <strtof+0x30>
 80259d0:	6823      	ldr	r3, [r4, #0]
 80259d2:	2222      	movs	r2, #34	@ 0x22
 80259d4:	601a      	str	r2, [r3, #0]
 80259d6:	e7d7      	b.n	8025988 <strtof+0x30>
 80259d8:	ffffffff 	.word	0xffffffff
 80259dc:	7fefffff 	.word	0x7fefffff
 80259e0:	240002d4 	.word	0x240002d4
 80259e4:	24000168 	.word	0x24000168
 80259e8:	0802a8f3 	.word	0x0802a8f3
 80259ec:	7f7fffff 	.word	0x7f7fffff
 80259f0:	7ff00000 	.word	0x7ff00000

080259f4 <_strtoul_l.constprop.0>:
 80259f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80259f8:	4e34      	ldr	r6, [pc, #208]	@ (8025acc <_strtoul_l.constprop.0+0xd8>)
 80259fa:	4686      	mov	lr, r0
 80259fc:	460d      	mov	r5, r1
 80259fe:	4628      	mov	r0, r5
 8025a00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025a04:	5d37      	ldrb	r7, [r6, r4]
 8025a06:	f017 0708 	ands.w	r7, r7, #8
 8025a0a:	d1f8      	bne.n	80259fe <_strtoul_l.constprop.0+0xa>
 8025a0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8025a0e:	d12f      	bne.n	8025a70 <_strtoul_l.constprop.0+0x7c>
 8025a10:	782c      	ldrb	r4, [r5, #0]
 8025a12:	2701      	movs	r7, #1
 8025a14:	1c85      	adds	r5, r0, #2
 8025a16:	f033 0010 	bics.w	r0, r3, #16
 8025a1a:	d109      	bne.n	8025a30 <_strtoul_l.constprop.0+0x3c>
 8025a1c:	2c30      	cmp	r4, #48	@ 0x30
 8025a1e:	d12c      	bne.n	8025a7a <_strtoul_l.constprop.0+0x86>
 8025a20:	7828      	ldrb	r0, [r5, #0]
 8025a22:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8025a26:	2858      	cmp	r0, #88	@ 0x58
 8025a28:	d127      	bne.n	8025a7a <_strtoul_l.constprop.0+0x86>
 8025a2a:	786c      	ldrb	r4, [r5, #1]
 8025a2c:	2310      	movs	r3, #16
 8025a2e:	3502      	adds	r5, #2
 8025a30:	f04f 38ff 	mov.w	r8, #4294967295
 8025a34:	2600      	movs	r6, #0
 8025a36:	fbb8 f8f3 	udiv	r8, r8, r3
 8025a3a:	fb03 f908 	mul.w	r9, r3, r8
 8025a3e:	ea6f 0909 	mvn.w	r9, r9
 8025a42:	4630      	mov	r0, r6
 8025a44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8025a48:	f1bc 0f09 	cmp.w	ip, #9
 8025a4c:	d81c      	bhi.n	8025a88 <_strtoul_l.constprop.0+0x94>
 8025a4e:	4664      	mov	r4, ip
 8025a50:	42a3      	cmp	r3, r4
 8025a52:	dd2a      	ble.n	8025aaa <_strtoul_l.constprop.0+0xb6>
 8025a54:	f1b6 3fff 	cmp.w	r6, #4294967295
 8025a58:	d007      	beq.n	8025a6a <_strtoul_l.constprop.0+0x76>
 8025a5a:	4580      	cmp	r8, r0
 8025a5c:	d322      	bcc.n	8025aa4 <_strtoul_l.constprop.0+0xb0>
 8025a5e:	d101      	bne.n	8025a64 <_strtoul_l.constprop.0+0x70>
 8025a60:	45a1      	cmp	r9, r4
 8025a62:	db1f      	blt.n	8025aa4 <_strtoul_l.constprop.0+0xb0>
 8025a64:	fb00 4003 	mla	r0, r0, r3, r4
 8025a68:	2601      	movs	r6, #1
 8025a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025a6e:	e7e9      	b.n	8025a44 <_strtoul_l.constprop.0+0x50>
 8025a70:	2c2b      	cmp	r4, #43	@ 0x2b
 8025a72:	bf04      	itt	eq
 8025a74:	782c      	ldrbeq	r4, [r5, #0]
 8025a76:	1c85      	addeq	r5, r0, #2
 8025a78:	e7cd      	b.n	8025a16 <_strtoul_l.constprop.0+0x22>
 8025a7a:	2b00      	cmp	r3, #0
 8025a7c:	d1d8      	bne.n	8025a30 <_strtoul_l.constprop.0+0x3c>
 8025a7e:	2c30      	cmp	r4, #48	@ 0x30
 8025a80:	bf0c      	ite	eq
 8025a82:	2308      	moveq	r3, #8
 8025a84:	230a      	movne	r3, #10
 8025a86:	e7d3      	b.n	8025a30 <_strtoul_l.constprop.0+0x3c>
 8025a88:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8025a8c:	f1bc 0f19 	cmp.w	ip, #25
 8025a90:	d801      	bhi.n	8025a96 <_strtoul_l.constprop.0+0xa2>
 8025a92:	3c37      	subs	r4, #55	@ 0x37
 8025a94:	e7dc      	b.n	8025a50 <_strtoul_l.constprop.0+0x5c>
 8025a96:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8025a9a:	f1bc 0f19 	cmp.w	ip, #25
 8025a9e:	d804      	bhi.n	8025aaa <_strtoul_l.constprop.0+0xb6>
 8025aa0:	3c57      	subs	r4, #87	@ 0x57
 8025aa2:	e7d5      	b.n	8025a50 <_strtoul_l.constprop.0+0x5c>
 8025aa4:	f04f 36ff 	mov.w	r6, #4294967295
 8025aa8:	e7df      	b.n	8025a6a <_strtoul_l.constprop.0+0x76>
 8025aaa:	1c73      	adds	r3, r6, #1
 8025aac:	d106      	bne.n	8025abc <_strtoul_l.constprop.0+0xc8>
 8025aae:	2322      	movs	r3, #34	@ 0x22
 8025ab0:	f8ce 3000 	str.w	r3, [lr]
 8025ab4:	4630      	mov	r0, r6
 8025ab6:	b932      	cbnz	r2, 8025ac6 <_strtoul_l.constprop.0+0xd2>
 8025ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025abc:	b107      	cbz	r7, 8025ac0 <_strtoul_l.constprop.0+0xcc>
 8025abe:	4240      	negs	r0, r0
 8025ac0:	2a00      	cmp	r2, #0
 8025ac2:	d0f9      	beq.n	8025ab8 <_strtoul_l.constprop.0+0xc4>
 8025ac4:	b106      	cbz	r6, 8025ac8 <_strtoul_l.constprop.0+0xd4>
 8025ac6:	1e69      	subs	r1, r5, #1
 8025ac8:	6011      	str	r1, [r2, #0]
 8025aca:	e7f5      	b.n	8025ab8 <_strtoul_l.constprop.0+0xc4>
 8025acc:	0802a959 	.word	0x0802a959

08025ad0 <strtoul>:
 8025ad0:	4613      	mov	r3, r2
 8025ad2:	460a      	mov	r2, r1
 8025ad4:	4601      	mov	r1, r0
 8025ad6:	4802      	ldr	r0, [pc, #8]	@ (8025ae0 <strtoul+0x10>)
 8025ad8:	6800      	ldr	r0, [r0, #0]
 8025ada:	f7ff bf8b 	b.w	80259f4 <_strtoul_l.constprop.0>
 8025ade:	bf00      	nop
 8025ae0:	240002d4 	.word	0x240002d4

08025ae4 <__cxa_atexit>:
 8025ae4:	b510      	push	{r4, lr}
 8025ae6:	4604      	mov	r4, r0
 8025ae8:	4804      	ldr	r0, [pc, #16]	@ (8025afc <__cxa_atexit+0x18>)
 8025aea:	4613      	mov	r3, r2
 8025aec:	b120      	cbz	r0, 8025af8 <__cxa_atexit+0x14>
 8025aee:	460a      	mov	r2, r1
 8025af0:	2002      	movs	r0, #2
 8025af2:	4621      	mov	r1, r4
 8025af4:	f000 faba 	bl	802606c <__register_exitproc>
 8025af8:	bd10      	pop	{r4, pc}
 8025afa:	bf00      	nop
 8025afc:	0802606d 	.word	0x0802606d

08025b00 <std>:
 8025b00:	2300      	movs	r3, #0
 8025b02:	b510      	push	{r4, lr}
 8025b04:	4604      	mov	r4, r0
 8025b06:	e9c0 3300 	strd	r3, r3, [r0]
 8025b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025b0e:	6083      	str	r3, [r0, #8]
 8025b10:	8181      	strh	r1, [r0, #12]
 8025b12:	6643      	str	r3, [r0, #100]	@ 0x64
 8025b14:	81c2      	strh	r2, [r0, #14]
 8025b16:	6183      	str	r3, [r0, #24]
 8025b18:	4619      	mov	r1, r3
 8025b1a:	2208      	movs	r2, #8
 8025b1c:	305c      	adds	r0, #92	@ 0x5c
 8025b1e:	f000 f973 	bl	8025e08 <memset>
 8025b22:	4b0d      	ldr	r3, [pc, #52]	@ (8025b58 <std+0x58>)
 8025b24:	6263      	str	r3, [r4, #36]	@ 0x24
 8025b26:	4b0d      	ldr	r3, [pc, #52]	@ (8025b5c <std+0x5c>)
 8025b28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8025b60 <std+0x60>)
 8025b2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8025b64 <std+0x64>)
 8025b30:	6323      	str	r3, [r4, #48]	@ 0x30
 8025b32:	4b0d      	ldr	r3, [pc, #52]	@ (8025b68 <std+0x68>)
 8025b34:	6224      	str	r4, [r4, #32]
 8025b36:	429c      	cmp	r4, r3
 8025b38:	d006      	beq.n	8025b48 <std+0x48>
 8025b3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8025b3e:	4294      	cmp	r4, r2
 8025b40:	d002      	beq.n	8025b48 <std+0x48>
 8025b42:	33d0      	adds	r3, #208	@ 0xd0
 8025b44:	429c      	cmp	r4, r3
 8025b46:	d105      	bne.n	8025b54 <std+0x54>
 8025b48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025b50:	f000 ba64 	b.w	802601c <__retarget_lock_init_recursive>
 8025b54:	bd10      	pop	{r4, pc}
 8025b56:	bf00      	nop
 8025b58:	08025d11 	.word	0x08025d11
 8025b5c:	08025d33 	.word	0x08025d33
 8025b60:	08025d6b 	.word	0x08025d6b
 8025b64:	08025d8f 	.word	0x08025d8f
 8025b68:	24004bcc 	.word	0x24004bcc

08025b6c <stdio_exit_handler>:
 8025b6c:	4a02      	ldr	r2, [pc, #8]	@ (8025b78 <stdio_exit_handler+0xc>)
 8025b6e:	4903      	ldr	r1, [pc, #12]	@ (8025b7c <stdio_exit_handler+0x10>)
 8025b70:	4803      	ldr	r0, [pc, #12]	@ (8025b80 <stdio_exit_handler+0x14>)
 8025b72:	f000 b87b 	b.w	8025c6c <_fwalk_sglue>
 8025b76:	bf00      	nop
 8025b78:	2400015c 	.word	0x2400015c
 8025b7c:	08027b21 	.word	0x08027b21
 8025b80:	240002d8 	.word	0x240002d8

08025b84 <cleanup_stdio>:
 8025b84:	6841      	ldr	r1, [r0, #4]
 8025b86:	4b0c      	ldr	r3, [pc, #48]	@ (8025bb8 <cleanup_stdio+0x34>)
 8025b88:	4299      	cmp	r1, r3
 8025b8a:	b510      	push	{r4, lr}
 8025b8c:	4604      	mov	r4, r0
 8025b8e:	d001      	beq.n	8025b94 <cleanup_stdio+0x10>
 8025b90:	f001 ffc6 	bl	8027b20 <_fflush_r>
 8025b94:	68a1      	ldr	r1, [r4, #8]
 8025b96:	4b09      	ldr	r3, [pc, #36]	@ (8025bbc <cleanup_stdio+0x38>)
 8025b98:	4299      	cmp	r1, r3
 8025b9a:	d002      	beq.n	8025ba2 <cleanup_stdio+0x1e>
 8025b9c:	4620      	mov	r0, r4
 8025b9e:	f001 ffbf 	bl	8027b20 <_fflush_r>
 8025ba2:	68e1      	ldr	r1, [r4, #12]
 8025ba4:	4b06      	ldr	r3, [pc, #24]	@ (8025bc0 <cleanup_stdio+0x3c>)
 8025ba6:	4299      	cmp	r1, r3
 8025ba8:	d004      	beq.n	8025bb4 <cleanup_stdio+0x30>
 8025baa:	4620      	mov	r0, r4
 8025bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025bb0:	f001 bfb6 	b.w	8027b20 <_fflush_r>
 8025bb4:	bd10      	pop	{r4, pc}
 8025bb6:	bf00      	nop
 8025bb8:	24004bcc 	.word	0x24004bcc
 8025bbc:	24004c34 	.word	0x24004c34
 8025bc0:	24004c9c 	.word	0x24004c9c

08025bc4 <global_stdio_init.part.0>:
 8025bc4:	b510      	push	{r4, lr}
 8025bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8025bf4 <global_stdio_init.part.0+0x30>)
 8025bc8:	4c0b      	ldr	r4, [pc, #44]	@ (8025bf8 <global_stdio_init.part.0+0x34>)
 8025bca:	4a0c      	ldr	r2, [pc, #48]	@ (8025bfc <global_stdio_init.part.0+0x38>)
 8025bcc:	601a      	str	r2, [r3, #0]
 8025bce:	4620      	mov	r0, r4
 8025bd0:	2200      	movs	r2, #0
 8025bd2:	2104      	movs	r1, #4
 8025bd4:	f7ff ff94 	bl	8025b00 <std>
 8025bd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025bdc:	2201      	movs	r2, #1
 8025bde:	2109      	movs	r1, #9
 8025be0:	f7ff ff8e 	bl	8025b00 <std>
 8025be4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025be8:	2202      	movs	r2, #2
 8025bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025bee:	2112      	movs	r1, #18
 8025bf0:	f7ff bf86 	b.w	8025b00 <std>
 8025bf4:	24004d04 	.word	0x24004d04
 8025bf8:	24004bcc 	.word	0x24004bcc
 8025bfc:	08025b6d 	.word	0x08025b6d

08025c00 <__sfp_lock_acquire>:
 8025c00:	4801      	ldr	r0, [pc, #4]	@ (8025c08 <__sfp_lock_acquire+0x8>)
 8025c02:	f000 ba0c 	b.w	802601e <__retarget_lock_acquire_recursive>
 8025c06:	bf00      	nop
 8025c08:	24004d0e 	.word	0x24004d0e

08025c0c <__sfp_lock_release>:
 8025c0c:	4801      	ldr	r0, [pc, #4]	@ (8025c14 <__sfp_lock_release+0x8>)
 8025c0e:	f000 ba07 	b.w	8026020 <__retarget_lock_release_recursive>
 8025c12:	bf00      	nop
 8025c14:	24004d0e 	.word	0x24004d0e

08025c18 <__sinit>:
 8025c18:	b510      	push	{r4, lr}
 8025c1a:	4604      	mov	r4, r0
 8025c1c:	f7ff fff0 	bl	8025c00 <__sfp_lock_acquire>
 8025c20:	6a23      	ldr	r3, [r4, #32]
 8025c22:	b11b      	cbz	r3, 8025c2c <__sinit+0x14>
 8025c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c28:	f7ff bff0 	b.w	8025c0c <__sfp_lock_release>
 8025c2c:	4b04      	ldr	r3, [pc, #16]	@ (8025c40 <__sinit+0x28>)
 8025c2e:	6223      	str	r3, [r4, #32]
 8025c30:	4b04      	ldr	r3, [pc, #16]	@ (8025c44 <__sinit+0x2c>)
 8025c32:	681b      	ldr	r3, [r3, #0]
 8025c34:	2b00      	cmp	r3, #0
 8025c36:	d1f5      	bne.n	8025c24 <__sinit+0xc>
 8025c38:	f7ff ffc4 	bl	8025bc4 <global_stdio_init.part.0>
 8025c3c:	e7f2      	b.n	8025c24 <__sinit+0xc>
 8025c3e:	bf00      	nop
 8025c40:	08025b85 	.word	0x08025b85
 8025c44:	24004d04 	.word	0x24004d04

08025c48 <fiprintf>:
 8025c48:	b40e      	push	{r1, r2, r3}
 8025c4a:	b503      	push	{r0, r1, lr}
 8025c4c:	4601      	mov	r1, r0
 8025c4e:	ab03      	add	r3, sp, #12
 8025c50:	4805      	ldr	r0, [pc, #20]	@ (8025c68 <fiprintf+0x20>)
 8025c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8025c56:	6800      	ldr	r0, [r0, #0]
 8025c58:	9301      	str	r3, [sp, #4]
 8025c5a:	f001 fc37 	bl	80274cc <_vfiprintf_r>
 8025c5e:	b002      	add	sp, #8
 8025c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8025c64:	b003      	add	sp, #12
 8025c66:	4770      	bx	lr
 8025c68:	240002d4 	.word	0x240002d4

08025c6c <_fwalk_sglue>:
 8025c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c70:	4607      	mov	r7, r0
 8025c72:	4688      	mov	r8, r1
 8025c74:	4614      	mov	r4, r2
 8025c76:	2600      	movs	r6, #0
 8025c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8025c80:	d505      	bpl.n	8025c8e <_fwalk_sglue+0x22>
 8025c82:	6824      	ldr	r4, [r4, #0]
 8025c84:	2c00      	cmp	r4, #0
 8025c86:	d1f7      	bne.n	8025c78 <_fwalk_sglue+0xc>
 8025c88:	4630      	mov	r0, r6
 8025c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c8e:	89ab      	ldrh	r3, [r5, #12]
 8025c90:	2b01      	cmp	r3, #1
 8025c92:	d907      	bls.n	8025ca4 <_fwalk_sglue+0x38>
 8025c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025c98:	3301      	adds	r3, #1
 8025c9a:	d003      	beq.n	8025ca4 <_fwalk_sglue+0x38>
 8025c9c:	4629      	mov	r1, r5
 8025c9e:	4638      	mov	r0, r7
 8025ca0:	47c0      	blx	r8
 8025ca2:	4306      	orrs	r6, r0
 8025ca4:	3568      	adds	r5, #104	@ 0x68
 8025ca6:	e7e9      	b.n	8025c7c <_fwalk_sglue+0x10>

08025ca8 <sniprintf>:
 8025ca8:	b40c      	push	{r2, r3}
 8025caa:	b530      	push	{r4, r5, lr}
 8025cac:	4b17      	ldr	r3, [pc, #92]	@ (8025d0c <sniprintf+0x64>)
 8025cae:	1e0c      	subs	r4, r1, #0
 8025cb0:	681d      	ldr	r5, [r3, #0]
 8025cb2:	b09d      	sub	sp, #116	@ 0x74
 8025cb4:	da08      	bge.n	8025cc8 <sniprintf+0x20>
 8025cb6:	238b      	movs	r3, #139	@ 0x8b
 8025cb8:	602b      	str	r3, [r5, #0]
 8025cba:	f04f 30ff 	mov.w	r0, #4294967295
 8025cbe:	b01d      	add	sp, #116	@ 0x74
 8025cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025cc4:	b002      	add	sp, #8
 8025cc6:	4770      	bx	lr
 8025cc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025ccc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025cd0:	bf14      	ite	ne
 8025cd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025cd6:	4623      	moveq	r3, r4
 8025cd8:	9304      	str	r3, [sp, #16]
 8025cda:	9307      	str	r3, [sp, #28]
 8025cdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025ce0:	9002      	str	r0, [sp, #8]
 8025ce2:	9006      	str	r0, [sp, #24]
 8025ce4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025ce8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025cea:	ab21      	add	r3, sp, #132	@ 0x84
 8025cec:	a902      	add	r1, sp, #8
 8025cee:	4628      	mov	r0, r5
 8025cf0:	9301      	str	r3, [sp, #4]
 8025cf2:	f001 fac5 	bl	8027280 <_svfiprintf_r>
 8025cf6:	1c43      	adds	r3, r0, #1
 8025cf8:	bfbc      	itt	lt
 8025cfa:	238b      	movlt	r3, #139	@ 0x8b
 8025cfc:	602b      	strlt	r3, [r5, #0]
 8025cfe:	2c00      	cmp	r4, #0
 8025d00:	d0dd      	beq.n	8025cbe <sniprintf+0x16>
 8025d02:	9b02      	ldr	r3, [sp, #8]
 8025d04:	2200      	movs	r2, #0
 8025d06:	701a      	strb	r2, [r3, #0]
 8025d08:	e7d9      	b.n	8025cbe <sniprintf+0x16>
 8025d0a:	bf00      	nop
 8025d0c:	240002d4 	.word	0x240002d4

08025d10 <__sread>:
 8025d10:	b510      	push	{r4, lr}
 8025d12:	460c      	mov	r4, r1
 8025d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025d18:	f000 f90e 	bl	8025f38 <_read_r>
 8025d1c:	2800      	cmp	r0, #0
 8025d1e:	bfab      	itete	ge
 8025d20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8025d22:	89a3      	ldrhlt	r3, [r4, #12]
 8025d24:	181b      	addge	r3, r3, r0
 8025d26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025d2a:	bfac      	ite	ge
 8025d2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8025d2e:	81a3      	strhlt	r3, [r4, #12]
 8025d30:	bd10      	pop	{r4, pc}

08025d32 <__swrite>:
 8025d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d36:	461f      	mov	r7, r3
 8025d38:	898b      	ldrh	r3, [r1, #12]
 8025d3a:	05db      	lsls	r3, r3, #23
 8025d3c:	4605      	mov	r5, r0
 8025d3e:	460c      	mov	r4, r1
 8025d40:	4616      	mov	r6, r2
 8025d42:	d505      	bpl.n	8025d50 <__swrite+0x1e>
 8025d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025d48:	2302      	movs	r3, #2
 8025d4a:	2200      	movs	r2, #0
 8025d4c:	f000 f8e2 	bl	8025f14 <_lseek_r>
 8025d50:	89a3      	ldrh	r3, [r4, #12]
 8025d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025d56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8025d5a:	81a3      	strh	r3, [r4, #12]
 8025d5c:	4632      	mov	r2, r6
 8025d5e:	463b      	mov	r3, r7
 8025d60:	4628      	mov	r0, r5
 8025d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025d66:	f000 b91d 	b.w	8025fa4 <_write_r>

08025d6a <__sseek>:
 8025d6a:	b510      	push	{r4, lr}
 8025d6c:	460c      	mov	r4, r1
 8025d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025d72:	f000 f8cf 	bl	8025f14 <_lseek_r>
 8025d76:	1c43      	adds	r3, r0, #1
 8025d78:	89a3      	ldrh	r3, [r4, #12]
 8025d7a:	bf15      	itete	ne
 8025d7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8025d7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8025d82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8025d86:	81a3      	strheq	r3, [r4, #12]
 8025d88:	bf18      	it	ne
 8025d8a:	81a3      	strhne	r3, [r4, #12]
 8025d8c:	bd10      	pop	{r4, pc}

08025d8e <__sclose>:
 8025d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025d92:	f000 b8af 	b.w	8025ef4 <_close_r>

08025d96 <_vsniprintf_r>:
 8025d96:	b530      	push	{r4, r5, lr}
 8025d98:	4614      	mov	r4, r2
 8025d9a:	2c00      	cmp	r4, #0
 8025d9c:	b09b      	sub	sp, #108	@ 0x6c
 8025d9e:	4605      	mov	r5, r0
 8025da0:	461a      	mov	r2, r3
 8025da2:	da05      	bge.n	8025db0 <_vsniprintf_r+0x1a>
 8025da4:	238b      	movs	r3, #139	@ 0x8b
 8025da6:	6003      	str	r3, [r0, #0]
 8025da8:	f04f 30ff 	mov.w	r0, #4294967295
 8025dac:	b01b      	add	sp, #108	@ 0x6c
 8025dae:	bd30      	pop	{r4, r5, pc}
 8025db0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025db4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025db8:	bf14      	ite	ne
 8025dba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025dbe:	4623      	moveq	r3, r4
 8025dc0:	9302      	str	r3, [sp, #8]
 8025dc2:	9305      	str	r3, [sp, #20]
 8025dc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025dc8:	9100      	str	r1, [sp, #0]
 8025dca:	9104      	str	r1, [sp, #16]
 8025dcc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025dd0:	4669      	mov	r1, sp
 8025dd2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025dd4:	f001 fa54 	bl	8027280 <_svfiprintf_r>
 8025dd8:	1c43      	adds	r3, r0, #1
 8025dda:	bfbc      	itt	lt
 8025ddc:	238b      	movlt	r3, #139	@ 0x8b
 8025dde:	602b      	strlt	r3, [r5, #0]
 8025de0:	2c00      	cmp	r4, #0
 8025de2:	d0e3      	beq.n	8025dac <_vsniprintf_r+0x16>
 8025de4:	9b00      	ldr	r3, [sp, #0]
 8025de6:	2200      	movs	r2, #0
 8025de8:	701a      	strb	r2, [r3, #0]
 8025dea:	e7df      	b.n	8025dac <_vsniprintf_r+0x16>

08025dec <vsniprintf>:
 8025dec:	b507      	push	{r0, r1, r2, lr}
 8025dee:	9300      	str	r3, [sp, #0]
 8025df0:	4613      	mov	r3, r2
 8025df2:	460a      	mov	r2, r1
 8025df4:	4601      	mov	r1, r0
 8025df6:	4803      	ldr	r0, [pc, #12]	@ (8025e04 <vsniprintf+0x18>)
 8025df8:	6800      	ldr	r0, [r0, #0]
 8025dfa:	f7ff ffcc 	bl	8025d96 <_vsniprintf_r>
 8025dfe:	b003      	add	sp, #12
 8025e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8025e04:	240002d4 	.word	0x240002d4

08025e08 <memset>:
 8025e08:	4402      	add	r2, r0
 8025e0a:	4603      	mov	r3, r0
 8025e0c:	4293      	cmp	r3, r2
 8025e0e:	d100      	bne.n	8025e12 <memset+0xa>
 8025e10:	4770      	bx	lr
 8025e12:	f803 1b01 	strb.w	r1, [r3], #1
 8025e16:	e7f9      	b.n	8025e0c <memset+0x4>

08025e18 <strncmp>:
 8025e18:	b510      	push	{r4, lr}
 8025e1a:	b16a      	cbz	r2, 8025e38 <strncmp+0x20>
 8025e1c:	3901      	subs	r1, #1
 8025e1e:	1884      	adds	r4, r0, r2
 8025e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025e24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8025e28:	429a      	cmp	r2, r3
 8025e2a:	d103      	bne.n	8025e34 <strncmp+0x1c>
 8025e2c:	42a0      	cmp	r0, r4
 8025e2e:	d001      	beq.n	8025e34 <strncmp+0x1c>
 8025e30:	2a00      	cmp	r2, #0
 8025e32:	d1f5      	bne.n	8025e20 <strncmp+0x8>
 8025e34:	1ad0      	subs	r0, r2, r3
 8025e36:	bd10      	pop	{r4, pc}
 8025e38:	4610      	mov	r0, r2
 8025e3a:	e7fc      	b.n	8025e36 <strncmp+0x1e>

08025e3c <__strtok_r>:
 8025e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025e3e:	4604      	mov	r4, r0
 8025e40:	b908      	cbnz	r0, 8025e46 <__strtok_r+0xa>
 8025e42:	6814      	ldr	r4, [r2, #0]
 8025e44:	b144      	cbz	r4, 8025e58 <__strtok_r+0x1c>
 8025e46:	4620      	mov	r0, r4
 8025e48:	f814 5b01 	ldrb.w	r5, [r4], #1
 8025e4c:	460f      	mov	r7, r1
 8025e4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8025e52:	b91e      	cbnz	r6, 8025e5c <__strtok_r+0x20>
 8025e54:	b965      	cbnz	r5, 8025e70 <__strtok_r+0x34>
 8025e56:	6015      	str	r5, [r2, #0]
 8025e58:	2000      	movs	r0, #0
 8025e5a:	e005      	b.n	8025e68 <__strtok_r+0x2c>
 8025e5c:	42b5      	cmp	r5, r6
 8025e5e:	d1f6      	bne.n	8025e4e <__strtok_r+0x12>
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	d1f0      	bne.n	8025e46 <__strtok_r+0xa>
 8025e64:	6014      	str	r4, [r2, #0]
 8025e66:	7003      	strb	r3, [r0, #0]
 8025e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025e6a:	461c      	mov	r4, r3
 8025e6c:	e00c      	b.n	8025e88 <__strtok_r+0x4c>
 8025e6e:	b915      	cbnz	r5, 8025e76 <__strtok_r+0x3a>
 8025e70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025e74:	460e      	mov	r6, r1
 8025e76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8025e7a:	42ab      	cmp	r3, r5
 8025e7c:	d1f7      	bne.n	8025e6e <__strtok_r+0x32>
 8025e7e:	2b00      	cmp	r3, #0
 8025e80:	d0f3      	beq.n	8025e6a <__strtok_r+0x2e>
 8025e82:	2300      	movs	r3, #0
 8025e84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8025e88:	6014      	str	r4, [r2, #0]
 8025e8a:	e7ed      	b.n	8025e68 <__strtok_r+0x2c>

08025e8c <strtok_r>:
 8025e8c:	2301      	movs	r3, #1
 8025e8e:	f7ff bfd5 	b.w	8025e3c <__strtok_r>

08025e92 <_raise_r>:
 8025e92:	291f      	cmp	r1, #31
 8025e94:	b538      	push	{r3, r4, r5, lr}
 8025e96:	4605      	mov	r5, r0
 8025e98:	460c      	mov	r4, r1
 8025e9a:	d904      	bls.n	8025ea6 <_raise_r+0x14>
 8025e9c:	2316      	movs	r3, #22
 8025e9e:	6003      	str	r3, [r0, #0]
 8025ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8025ea4:	bd38      	pop	{r3, r4, r5, pc}
 8025ea6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8025ea8:	b112      	cbz	r2, 8025eb0 <_raise_r+0x1e>
 8025eaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025eae:	b94b      	cbnz	r3, 8025ec4 <_raise_r+0x32>
 8025eb0:	4628      	mov	r0, r5
 8025eb2:	f000 f865 	bl	8025f80 <_getpid_r>
 8025eb6:	4622      	mov	r2, r4
 8025eb8:	4601      	mov	r1, r0
 8025eba:	4628      	mov	r0, r5
 8025ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025ec0:	f000 b84c 	b.w	8025f5c <_kill_r>
 8025ec4:	2b01      	cmp	r3, #1
 8025ec6:	d00a      	beq.n	8025ede <_raise_r+0x4c>
 8025ec8:	1c59      	adds	r1, r3, #1
 8025eca:	d103      	bne.n	8025ed4 <_raise_r+0x42>
 8025ecc:	2316      	movs	r3, #22
 8025ece:	6003      	str	r3, [r0, #0]
 8025ed0:	2001      	movs	r0, #1
 8025ed2:	e7e7      	b.n	8025ea4 <_raise_r+0x12>
 8025ed4:	2100      	movs	r1, #0
 8025ed6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8025eda:	4620      	mov	r0, r4
 8025edc:	4798      	blx	r3
 8025ede:	2000      	movs	r0, #0
 8025ee0:	e7e0      	b.n	8025ea4 <_raise_r+0x12>
	...

08025ee4 <raise>:
 8025ee4:	4b02      	ldr	r3, [pc, #8]	@ (8025ef0 <raise+0xc>)
 8025ee6:	4601      	mov	r1, r0
 8025ee8:	6818      	ldr	r0, [r3, #0]
 8025eea:	f7ff bfd2 	b.w	8025e92 <_raise_r>
 8025eee:	bf00      	nop
 8025ef0:	240002d4 	.word	0x240002d4

08025ef4 <_close_r>:
 8025ef4:	b538      	push	{r3, r4, r5, lr}
 8025ef6:	4d06      	ldr	r5, [pc, #24]	@ (8025f10 <_close_r+0x1c>)
 8025ef8:	2300      	movs	r3, #0
 8025efa:	4604      	mov	r4, r0
 8025efc:	4608      	mov	r0, r1
 8025efe:	602b      	str	r3, [r5, #0]
 8025f00:	f7e1 fa72 	bl	80073e8 <_close>
 8025f04:	1c43      	adds	r3, r0, #1
 8025f06:	d102      	bne.n	8025f0e <_close_r+0x1a>
 8025f08:	682b      	ldr	r3, [r5, #0]
 8025f0a:	b103      	cbz	r3, 8025f0e <_close_r+0x1a>
 8025f0c:	6023      	str	r3, [r4, #0]
 8025f0e:	bd38      	pop	{r3, r4, r5, pc}
 8025f10:	24004d08 	.word	0x24004d08

08025f14 <_lseek_r>:
 8025f14:	b538      	push	{r3, r4, r5, lr}
 8025f16:	4d07      	ldr	r5, [pc, #28]	@ (8025f34 <_lseek_r+0x20>)
 8025f18:	4604      	mov	r4, r0
 8025f1a:	4608      	mov	r0, r1
 8025f1c:	4611      	mov	r1, r2
 8025f1e:	2200      	movs	r2, #0
 8025f20:	602a      	str	r2, [r5, #0]
 8025f22:	461a      	mov	r2, r3
 8025f24:	f7e1 fa6a 	bl	80073fc <_lseek>
 8025f28:	1c43      	adds	r3, r0, #1
 8025f2a:	d102      	bne.n	8025f32 <_lseek_r+0x1e>
 8025f2c:	682b      	ldr	r3, [r5, #0]
 8025f2e:	b103      	cbz	r3, 8025f32 <_lseek_r+0x1e>
 8025f30:	6023      	str	r3, [r4, #0]
 8025f32:	bd38      	pop	{r3, r4, r5, pc}
 8025f34:	24004d08 	.word	0x24004d08

08025f38 <_read_r>:
 8025f38:	b538      	push	{r3, r4, r5, lr}
 8025f3a:	4d07      	ldr	r5, [pc, #28]	@ (8025f58 <_read_r+0x20>)
 8025f3c:	4604      	mov	r4, r0
 8025f3e:	4608      	mov	r0, r1
 8025f40:	4611      	mov	r1, r2
 8025f42:	2200      	movs	r2, #0
 8025f44:	602a      	str	r2, [r5, #0]
 8025f46:	461a      	mov	r2, r3
 8025f48:	f7e1 fa30 	bl	80073ac <_read>
 8025f4c:	1c43      	adds	r3, r0, #1
 8025f4e:	d102      	bne.n	8025f56 <_read_r+0x1e>
 8025f50:	682b      	ldr	r3, [r5, #0]
 8025f52:	b103      	cbz	r3, 8025f56 <_read_r+0x1e>
 8025f54:	6023      	str	r3, [r4, #0]
 8025f56:	bd38      	pop	{r3, r4, r5, pc}
 8025f58:	24004d08 	.word	0x24004d08

08025f5c <_kill_r>:
 8025f5c:	b538      	push	{r3, r4, r5, lr}
 8025f5e:	4d07      	ldr	r5, [pc, #28]	@ (8025f7c <_kill_r+0x20>)
 8025f60:	2300      	movs	r3, #0
 8025f62:	4604      	mov	r4, r0
 8025f64:	4608      	mov	r0, r1
 8025f66:	4611      	mov	r1, r2
 8025f68:	602b      	str	r3, [r5, #0]
 8025f6a:	f7e1 fa11 	bl	8007390 <_kill>
 8025f6e:	1c43      	adds	r3, r0, #1
 8025f70:	d102      	bne.n	8025f78 <_kill_r+0x1c>
 8025f72:	682b      	ldr	r3, [r5, #0]
 8025f74:	b103      	cbz	r3, 8025f78 <_kill_r+0x1c>
 8025f76:	6023      	str	r3, [r4, #0]
 8025f78:	bd38      	pop	{r3, r4, r5, pc}
 8025f7a:	bf00      	nop
 8025f7c:	24004d08 	.word	0x24004d08

08025f80 <_getpid_r>:
 8025f80:	f7e1 ba04 	b.w	800738c <_getpid>

08025f84 <_sbrk_r>:
 8025f84:	b538      	push	{r3, r4, r5, lr}
 8025f86:	4d06      	ldr	r5, [pc, #24]	@ (8025fa0 <_sbrk_r+0x1c>)
 8025f88:	2300      	movs	r3, #0
 8025f8a:	4604      	mov	r4, r0
 8025f8c:	4608      	mov	r0, r1
 8025f8e:	602b      	str	r3, [r5, #0]
 8025f90:	f7e1 fa36 	bl	8007400 <_sbrk>
 8025f94:	1c43      	adds	r3, r0, #1
 8025f96:	d102      	bne.n	8025f9e <_sbrk_r+0x1a>
 8025f98:	682b      	ldr	r3, [r5, #0]
 8025f9a:	b103      	cbz	r3, 8025f9e <_sbrk_r+0x1a>
 8025f9c:	6023      	str	r3, [r4, #0]
 8025f9e:	bd38      	pop	{r3, r4, r5, pc}
 8025fa0:	24004d08 	.word	0x24004d08

08025fa4 <_write_r>:
 8025fa4:	b538      	push	{r3, r4, r5, lr}
 8025fa6:	4d07      	ldr	r5, [pc, #28]	@ (8025fc4 <_write_r+0x20>)
 8025fa8:	4604      	mov	r4, r0
 8025faa:	4608      	mov	r0, r1
 8025fac:	4611      	mov	r1, r2
 8025fae:	2200      	movs	r2, #0
 8025fb0:	602a      	str	r2, [r5, #0]
 8025fb2:	461a      	mov	r2, r3
 8025fb4:	f7e1 fa0a 	bl	80073cc <_write>
 8025fb8:	1c43      	adds	r3, r0, #1
 8025fba:	d102      	bne.n	8025fc2 <_write_r+0x1e>
 8025fbc:	682b      	ldr	r3, [r5, #0]
 8025fbe:	b103      	cbz	r3, 8025fc2 <_write_r+0x1e>
 8025fc0:	6023      	str	r3, [r4, #0]
 8025fc2:	bd38      	pop	{r3, r4, r5, pc}
 8025fc4:	24004d08 	.word	0x24004d08

08025fc8 <__errno>:
 8025fc8:	4b01      	ldr	r3, [pc, #4]	@ (8025fd0 <__errno+0x8>)
 8025fca:	6818      	ldr	r0, [r3, #0]
 8025fcc:	4770      	bx	lr
 8025fce:	bf00      	nop
 8025fd0:	240002d4 	.word	0x240002d4

08025fd4 <__libc_init_array>:
 8025fd4:	b570      	push	{r4, r5, r6, lr}
 8025fd6:	4d0d      	ldr	r5, [pc, #52]	@ (802600c <__libc_init_array+0x38>)
 8025fd8:	4c0d      	ldr	r4, [pc, #52]	@ (8026010 <__libc_init_array+0x3c>)
 8025fda:	1b64      	subs	r4, r4, r5
 8025fdc:	10a4      	asrs	r4, r4, #2
 8025fde:	2600      	movs	r6, #0
 8025fe0:	42a6      	cmp	r6, r4
 8025fe2:	d109      	bne.n	8025ff8 <__libc_init_array+0x24>
 8025fe4:	4d0b      	ldr	r5, [pc, #44]	@ (8026014 <__libc_init_array+0x40>)
 8025fe6:	4c0c      	ldr	r4, [pc, #48]	@ (8026018 <__libc_init_array+0x44>)
 8025fe8:	f001 ff3e 	bl	8027e68 <_init>
 8025fec:	1b64      	subs	r4, r4, r5
 8025fee:	10a4      	asrs	r4, r4, #2
 8025ff0:	2600      	movs	r6, #0
 8025ff2:	42a6      	cmp	r6, r4
 8025ff4:	d105      	bne.n	8026002 <__libc_init_array+0x2e>
 8025ff6:	bd70      	pop	{r4, r5, r6, pc}
 8025ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8025ffc:	4798      	blx	r3
 8025ffe:	3601      	adds	r6, #1
 8026000:	e7ee      	b.n	8025fe0 <__libc_init_array+0xc>
 8026002:	f855 3b04 	ldr.w	r3, [r5], #4
 8026006:	4798      	blx	r3
 8026008:	3601      	adds	r6, #1
 802600a:	e7f2      	b.n	8025ff2 <__libc_init_array+0x1e>
 802600c:	0802c5d4 	.word	0x0802c5d4
 8026010:	0802c5d4 	.word	0x0802c5d4
 8026014:	0802c5d4 	.word	0x0802c5d4
 8026018:	0802c5e8 	.word	0x0802c5e8

0802601c <__retarget_lock_init_recursive>:
 802601c:	4770      	bx	lr

0802601e <__retarget_lock_acquire_recursive>:
 802601e:	4770      	bx	lr

08026020 <__retarget_lock_release_recursive>:
 8026020:	4770      	bx	lr

08026022 <strcpy>:
 8026022:	4603      	mov	r3, r0
 8026024:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026028:	f803 2b01 	strb.w	r2, [r3], #1
 802602c:	2a00      	cmp	r2, #0
 802602e:	d1f9      	bne.n	8026024 <strcpy+0x2>
 8026030:	4770      	bx	lr

08026032 <memcpy>:
 8026032:	440a      	add	r2, r1
 8026034:	4291      	cmp	r1, r2
 8026036:	f100 33ff 	add.w	r3, r0, #4294967295
 802603a:	d100      	bne.n	802603e <memcpy+0xc>
 802603c:	4770      	bx	lr
 802603e:	b510      	push	{r4, lr}
 8026040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026048:	4291      	cmp	r1, r2
 802604a:	d1f9      	bne.n	8026040 <memcpy+0xe>
 802604c:	bd10      	pop	{r4, pc}
	...

08026050 <nan>:
 8026050:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8026058 <nan+0x8>
 8026054:	4770      	bx	lr
 8026056:	bf00      	nop
 8026058:	00000000 	.word	0x00000000
 802605c:	7ff80000 	.word	0x7ff80000

08026060 <nanf>:
 8026060:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8026068 <nanf+0x8>
 8026064:	4770      	bx	lr
 8026066:	bf00      	nop
 8026068:	7fc00000 	.word	0x7fc00000

0802606c <__register_exitproc>:
 802606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026070:	4d27      	ldr	r5, [pc, #156]	@ (8026110 <__register_exitproc+0xa4>)
 8026072:	4607      	mov	r7, r0
 8026074:	6828      	ldr	r0, [r5, #0]
 8026076:	4691      	mov	r9, r2
 8026078:	460e      	mov	r6, r1
 802607a:	4698      	mov	r8, r3
 802607c:	f7ff ffcf 	bl	802601e <__retarget_lock_acquire_recursive>
 8026080:	4a24      	ldr	r2, [pc, #144]	@ (8026114 <__register_exitproc+0xa8>)
 8026082:	6814      	ldr	r4, [r2, #0]
 8026084:	b93c      	cbnz	r4, 8026096 <__register_exitproc+0x2a>
 8026086:	4b24      	ldr	r3, [pc, #144]	@ (8026118 <__register_exitproc+0xac>)
 8026088:	6013      	str	r3, [r2, #0]
 802608a:	4a24      	ldr	r2, [pc, #144]	@ (802611c <__register_exitproc+0xb0>)
 802608c:	b112      	cbz	r2, 8026094 <__register_exitproc+0x28>
 802608e:	6812      	ldr	r2, [r2, #0]
 8026090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8026094:	4c20      	ldr	r4, [pc, #128]	@ (8026118 <__register_exitproc+0xac>)
 8026096:	6863      	ldr	r3, [r4, #4]
 8026098:	2b1f      	cmp	r3, #31
 802609a:	dd06      	ble.n	80260aa <__register_exitproc+0x3e>
 802609c:	6828      	ldr	r0, [r5, #0]
 802609e:	f7ff ffbf 	bl	8026020 <__retarget_lock_release_recursive>
 80260a2:	f04f 30ff 	mov.w	r0, #4294967295
 80260a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80260aa:	b32f      	cbz	r7, 80260f8 <__register_exitproc+0x8c>
 80260ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80260b0:	b968      	cbnz	r0, 80260ce <__register_exitproc+0x62>
 80260b2:	4b1b      	ldr	r3, [pc, #108]	@ (8026120 <__register_exitproc+0xb4>)
 80260b4:	2b00      	cmp	r3, #0
 80260b6:	d0f1      	beq.n	802609c <__register_exitproc+0x30>
 80260b8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80260bc:	f7fe fddc 	bl	8024c78 <malloc>
 80260c0:	2800      	cmp	r0, #0
 80260c2:	d0eb      	beq.n	802609c <__register_exitproc+0x30>
 80260c4:	2300      	movs	r3, #0
 80260c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80260ca:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80260ce:	6863      	ldr	r3, [r4, #4]
 80260d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80260d4:	2201      	movs	r2, #1
 80260d6:	409a      	lsls	r2, r3
 80260d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80260dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80260e0:	4313      	orrs	r3, r2
 80260e2:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80260e6:	2f02      	cmp	r7, #2
 80260e8:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80260ec:	bf02      	ittt	eq
 80260ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80260f2:	4313      	orreq	r3, r2
 80260f4:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80260f8:	6863      	ldr	r3, [r4, #4]
 80260fa:	6828      	ldr	r0, [r5, #0]
 80260fc:	1c5a      	adds	r2, r3, #1
 80260fe:	3302      	adds	r3, #2
 8026100:	6062      	str	r2, [r4, #4]
 8026102:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8026106:	f7ff ff8b 	bl	8026020 <__retarget_lock_release_recursive>
 802610a:	2000      	movs	r0, #0
 802610c:	e7cb      	b.n	80260a6 <__register_exitproc+0x3a>
 802610e:	bf00      	nop
 8026110:	24000324 	.word	0x24000324
 8026114:	24004d9c 	.word	0x24004d9c
 8026118:	24004d10 	.word	0x24004d10
 802611c:	0802ac40 	.word	0x0802ac40
 8026120:	08024c79 	.word	0x08024c79

08026124 <_free_r>:
 8026124:	b538      	push	{r3, r4, r5, lr}
 8026126:	4605      	mov	r5, r0
 8026128:	2900      	cmp	r1, #0
 802612a:	d041      	beq.n	80261b0 <_free_r+0x8c>
 802612c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026130:	1f0c      	subs	r4, r1, #4
 8026132:	2b00      	cmp	r3, #0
 8026134:	bfb8      	it	lt
 8026136:	18e4      	addlt	r4, r4, r3
 8026138:	f7fe fe50 	bl	8024ddc <__malloc_lock>
 802613c:	4a1d      	ldr	r2, [pc, #116]	@ (80261b4 <_free_r+0x90>)
 802613e:	6813      	ldr	r3, [r2, #0]
 8026140:	b933      	cbnz	r3, 8026150 <_free_r+0x2c>
 8026142:	6063      	str	r3, [r4, #4]
 8026144:	6014      	str	r4, [r2, #0]
 8026146:	4628      	mov	r0, r5
 8026148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802614c:	f7fe be4c 	b.w	8024de8 <__malloc_unlock>
 8026150:	42a3      	cmp	r3, r4
 8026152:	d908      	bls.n	8026166 <_free_r+0x42>
 8026154:	6820      	ldr	r0, [r4, #0]
 8026156:	1821      	adds	r1, r4, r0
 8026158:	428b      	cmp	r3, r1
 802615a:	bf01      	itttt	eq
 802615c:	6819      	ldreq	r1, [r3, #0]
 802615e:	685b      	ldreq	r3, [r3, #4]
 8026160:	1809      	addeq	r1, r1, r0
 8026162:	6021      	streq	r1, [r4, #0]
 8026164:	e7ed      	b.n	8026142 <_free_r+0x1e>
 8026166:	461a      	mov	r2, r3
 8026168:	685b      	ldr	r3, [r3, #4]
 802616a:	b10b      	cbz	r3, 8026170 <_free_r+0x4c>
 802616c:	42a3      	cmp	r3, r4
 802616e:	d9fa      	bls.n	8026166 <_free_r+0x42>
 8026170:	6811      	ldr	r1, [r2, #0]
 8026172:	1850      	adds	r0, r2, r1
 8026174:	42a0      	cmp	r0, r4
 8026176:	d10b      	bne.n	8026190 <_free_r+0x6c>
 8026178:	6820      	ldr	r0, [r4, #0]
 802617a:	4401      	add	r1, r0
 802617c:	1850      	adds	r0, r2, r1
 802617e:	4283      	cmp	r3, r0
 8026180:	6011      	str	r1, [r2, #0]
 8026182:	d1e0      	bne.n	8026146 <_free_r+0x22>
 8026184:	6818      	ldr	r0, [r3, #0]
 8026186:	685b      	ldr	r3, [r3, #4]
 8026188:	6053      	str	r3, [r2, #4]
 802618a:	4408      	add	r0, r1
 802618c:	6010      	str	r0, [r2, #0]
 802618e:	e7da      	b.n	8026146 <_free_r+0x22>
 8026190:	d902      	bls.n	8026198 <_free_r+0x74>
 8026192:	230c      	movs	r3, #12
 8026194:	602b      	str	r3, [r5, #0]
 8026196:	e7d6      	b.n	8026146 <_free_r+0x22>
 8026198:	6820      	ldr	r0, [r4, #0]
 802619a:	1821      	adds	r1, r4, r0
 802619c:	428b      	cmp	r3, r1
 802619e:	bf04      	itt	eq
 80261a0:	6819      	ldreq	r1, [r3, #0]
 80261a2:	685b      	ldreq	r3, [r3, #4]
 80261a4:	6063      	str	r3, [r4, #4]
 80261a6:	bf04      	itt	eq
 80261a8:	1809      	addeq	r1, r1, r0
 80261aa:	6021      	streq	r1, [r4, #0]
 80261ac:	6054      	str	r4, [r2, #4]
 80261ae:	e7ca      	b.n	8026146 <_free_r+0x22>
 80261b0:	bd38      	pop	{r3, r4, r5, pc}
 80261b2:	bf00      	nop
 80261b4:	24004bc8 	.word	0x24004bc8

080261b8 <rshift>:
 80261b8:	6903      	ldr	r3, [r0, #16]
 80261ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80261be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80261c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80261c6:	f100 0414 	add.w	r4, r0, #20
 80261ca:	dd45      	ble.n	8026258 <rshift+0xa0>
 80261cc:	f011 011f 	ands.w	r1, r1, #31
 80261d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80261d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80261d8:	d10c      	bne.n	80261f4 <rshift+0x3c>
 80261da:	f100 0710 	add.w	r7, r0, #16
 80261de:	4629      	mov	r1, r5
 80261e0:	42b1      	cmp	r1, r6
 80261e2:	d334      	bcc.n	802624e <rshift+0x96>
 80261e4:	1a9b      	subs	r3, r3, r2
 80261e6:	009b      	lsls	r3, r3, #2
 80261e8:	1eea      	subs	r2, r5, #3
 80261ea:	4296      	cmp	r6, r2
 80261ec:	bf38      	it	cc
 80261ee:	2300      	movcc	r3, #0
 80261f0:	4423      	add	r3, r4
 80261f2:	e015      	b.n	8026220 <rshift+0x68>
 80261f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80261f8:	f1c1 0820 	rsb	r8, r1, #32
 80261fc:	40cf      	lsrs	r7, r1
 80261fe:	f105 0e04 	add.w	lr, r5, #4
 8026202:	46a1      	mov	r9, r4
 8026204:	4576      	cmp	r6, lr
 8026206:	46f4      	mov	ip, lr
 8026208:	d815      	bhi.n	8026236 <rshift+0x7e>
 802620a:	1a9a      	subs	r2, r3, r2
 802620c:	0092      	lsls	r2, r2, #2
 802620e:	3a04      	subs	r2, #4
 8026210:	3501      	adds	r5, #1
 8026212:	42ae      	cmp	r6, r5
 8026214:	bf38      	it	cc
 8026216:	2200      	movcc	r2, #0
 8026218:	18a3      	adds	r3, r4, r2
 802621a:	50a7      	str	r7, [r4, r2]
 802621c:	b107      	cbz	r7, 8026220 <rshift+0x68>
 802621e:	3304      	adds	r3, #4
 8026220:	1b1a      	subs	r2, r3, r4
 8026222:	42a3      	cmp	r3, r4
 8026224:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8026228:	bf08      	it	eq
 802622a:	2300      	moveq	r3, #0
 802622c:	6102      	str	r2, [r0, #16]
 802622e:	bf08      	it	eq
 8026230:	6143      	streq	r3, [r0, #20]
 8026232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026236:	f8dc c000 	ldr.w	ip, [ip]
 802623a:	fa0c fc08 	lsl.w	ip, ip, r8
 802623e:	ea4c 0707 	orr.w	r7, ip, r7
 8026242:	f849 7b04 	str.w	r7, [r9], #4
 8026246:	f85e 7b04 	ldr.w	r7, [lr], #4
 802624a:	40cf      	lsrs	r7, r1
 802624c:	e7da      	b.n	8026204 <rshift+0x4c>
 802624e:	f851 cb04 	ldr.w	ip, [r1], #4
 8026252:	f847 cf04 	str.w	ip, [r7, #4]!
 8026256:	e7c3      	b.n	80261e0 <rshift+0x28>
 8026258:	4623      	mov	r3, r4
 802625a:	e7e1      	b.n	8026220 <rshift+0x68>

0802625c <__hexdig_fun>:
 802625c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8026260:	2b09      	cmp	r3, #9
 8026262:	d802      	bhi.n	802626a <__hexdig_fun+0xe>
 8026264:	3820      	subs	r0, #32
 8026266:	b2c0      	uxtb	r0, r0
 8026268:	4770      	bx	lr
 802626a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802626e:	2b05      	cmp	r3, #5
 8026270:	d801      	bhi.n	8026276 <__hexdig_fun+0x1a>
 8026272:	3847      	subs	r0, #71	@ 0x47
 8026274:	e7f7      	b.n	8026266 <__hexdig_fun+0xa>
 8026276:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802627a:	2b05      	cmp	r3, #5
 802627c:	d801      	bhi.n	8026282 <__hexdig_fun+0x26>
 802627e:	3827      	subs	r0, #39	@ 0x27
 8026280:	e7f1      	b.n	8026266 <__hexdig_fun+0xa>
 8026282:	2000      	movs	r0, #0
 8026284:	4770      	bx	lr
	...

08026288 <__gethex>:
 8026288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802628c:	b085      	sub	sp, #20
 802628e:	468a      	mov	sl, r1
 8026290:	9302      	str	r3, [sp, #8]
 8026292:	680b      	ldr	r3, [r1, #0]
 8026294:	9001      	str	r0, [sp, #4]
 8026296:	4690      	mov	r8, r2
 8026298:	1c9c      	adds	r4, r3, #2
 802629a:	46a1      	mov	r9, r4
 802629c:	f814 0b01 	ldrb.w	r0, [r4], #1
 80262a0:	2830      	cmp	r0, #48	@ 0x30
 80262a2:	d0fa      	beq.n	802629a <__gethex+0x12>
 80262a4:	eba9 0303 	sub.w	r3, r9, r3
 80262a8:	f1a3 0b02 	sub.w	fp, r3, #2
 80262ac:	f7ff ffd6 	bl	802625c <__hexdig_fun>
 80262b0:	4605      	mov	r5, r0
 80262b2:	2800      	cmp	r0, #0
 80262b4:	d168      	bne.n	8026388 <__gethex+0x100>
 80262b6:	49a0      	ldr	r1, [pc, #640]	@ (8026538 <__gethex+0x2b0>)
 80262b8:	2201      	movs	r2, #1
 80262ba:	4648      	mov	r0, r9
 80262bc:	f7ff fdac 	bl	8025e18 <strncmp>
 80262c0:	4607      	mov	r7, r0
 80262c2:	2800      	cmp	r0, #0
 80262c4:	d167      	bne.n	8026396 <__gethex+0x10e>
 80262c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80262ca:	4626      	mov	r6, r4
 80262cc:	f7ff ffc6 	bl	802625c <__hexdig_fun>
 80262d0:	2800      	cmp	r0, #0
 80262d2:	d062      	beq.n	802639a <__gethex+0x112>
 80262d4:	4623      	mov	r3, r4
 80262d6:	7818      	ldrb	r0, [r3, #0]
 80262d8:	2830      	cmp	r0, #48	@ 0x30
 80262da:	4699      	mov	r9, r3
 80262dc:	f103 0301 	add.w	r3, r3, #1
 80262e0:	d0f9      	beq.n	80262d6 <__gethex+0x4e>
 80262e2:	f7ff ffbb 	bl	802625c <__hexdig_fun>
 80262e6:	fab0 f580 	clz	r5, r0
 80262ea:	096d      	lsrs	r5, r5, #5
 80262ec:	f04f 0b01 	mov.w	fp, #1
 80262f0:	464a      	mov	r2, r9
 80262f2:	4616      	mov	r6, r2
 80262f4:	3201      	adds	r2, #1
 80262f6:	7830      	ldrb	r0, [r6, #0]
 80262f8:	f7ff ffb0 	bl	802625c <__hexdig_fun>
 80262fc:	2800      	cmp	r0, #0
 80262fe:	d1f8      	bne.n	80262f2 <__gethex+0x6a>
 8026300:	498d      	ldr	r1, [pc, #564]	@ (8026538 <__gethex+0x2b0>)
 8026302:	2201      	movs	r2, #1
 8026304:	4630      	mov	r0, r6
 8026306:	f7ff fd87 	bl	8025e18 <strncmp>
 802630a:	2800      	cmp	r0, #0
 802630c:	d13f      	bne.n	802638e <__gethex+0x106>
 802630e:	b944      	cbnz	r4, 8026322 <__gethex+0x9a>
 8026310:	1c74      	adds	r4, r6, #1
 8026312:	4622      	mov	r2, r4
 8026314:	4616      	mov	r6, r2
 8026316:	3201      	adds	r2, #1
 8026318:	7830      	ldrb	r0, [r6, #0]
 802631a:	f7ff ff9f 	bl	802625c <__hexdig_fun>
 802631e:	2800      	cmp	r0, #0
 8026320:	d1f8      	bne.n	8026314 <__gethex+0x8c>
 8026322:	1ba4      	subs	r4, r4, r6
 8026324:	00a7      	lsls	r7, r4, #2
 8026326:	7833      	ldrb	r3, [r6, #0]
 8026328:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802632c:	2b50      	cmp	r3, #80	@ 0x50
 802632e:	d13e      	bne.n	80263ae <__gethex+0x126>
 8026330:	7873      	ldrb	r3, [r6, #1]
 8026332:	2b2b      	cmp	r3, #43	@ 0x2b
 8026334:	d033      	beq.n	802639e <__gethex+0x116>
 8026336:	2b2d      	cmp	r3, #45	@ 0x2d
 8026338:	d034      	beq.n	80263a4 <__gethex+0x11c>
 802633a:	1c71      	adds	r1, r6, #1
 802633c:	2400      	movs	r4, #0
 802633e:	7808      	ldrb	r0, [r1, #0]
 8026340:	f7ff ff8c 	bl	802625c <__hexdig_fun>
 8026344:	1e43      	subs	r3, r0, #1
 8026346:	b2db      	uxtb	r3, r3
 8026348:	2b18      	cmp	r3, #24
 802634a:	d830      	bhi.n	80263ae <__gethex+0x126>
 802634c:	f1a0 0210 	sub.w	r2, r0, #16
 8026350:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8026354:	f7ff ff82 	bl	802625c <__hexdig_fun>
 8026358:	f100 3cff 	add.w	ip, r0, #4294967295
 802635c:	fa5f fc8c 	uxtb.w	ip, ip
 8026360:	f1bc 0f18 	cmp.w	ip, #24
 8026364:	f04f 030a 	mov.w	r3, #10
 8026368:	d91e      	bls.n	80263a8 <__gethex+0x120>
 802636a:	b104      	cbz	r4, 802636e <__gethex+0xe6>
 802636c:	4252      	negs	r2, r2
 802636e:	4417      	add	r7, r2
 8026370:	f8ca 1000 	str.w	r1, [sl]
 8026374:	b1ed      	cbz	r5, 80263b2 <__gethex+0x12a>
 8026376:	f1bb 0f00 	cmp.w	fp, #0
 802637a:	bf0c      	ite	eq
 802637c:	2506      	moveq	r5, #6
 802637e:	2500      	movne	r5, #0
 8026380:	4628      	mov	r0, r5
 8026382:	b005      	add	sp, #20
 8026384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026388:	2500      	movs	r5, #0
 802638a:	462c      	mov	r4, r5
 802638c:	e7b0      	b.n	80262f0 <__gethex+0x68>
 802638e:	2c00      	cmp	r4, #0
 8026390:	d1c7      	bne.n	8026322 <__gethex+0x9a>
 8026392:	4627      	mov	r7, r4
 8026394:	e7c7      	b.n	8026326 <__gethex+0x9e>
 8026396:	464e      	mov	r6, r9
 8026398:	462f      	mov	r7, r5
 802639a:	2501      	movs	r5, #1
 802639c:	e7c3      	b.n	8026326 <__gethex+0x9e>
 802639e:	2400      	movs	r4, #0
 80263a0:	1cb1      	adds	r1, r6, #2
 80263a2:	e7cc      	b.n	802633e <__gethex+0xb6>
 80263a4:	2401      	movs	r4, #1
 80263a6:	e7fb      	b.n	80263a0 <__gethex+0x118>
 80263a8:	fb03 0002 	mla	r0, r3, r2, r0
 80263ac:	e7ce      	b.n	802634c <__gethex+0xc4>
 80263ae:	4631      	mov	r1, r6
 80263b0:	e7de      	b.n	8026370 <__gethex+0xe8>
 80263b2:	eba6 0309 	sub.w	r3, r6, r9
 80263b6:	3b01      	subs	r3, #1
 80263b8:	4629      	mov	r1, r5
 80263ba:	2b07      	cmp	r3, #7
 80263bc:	dc0a      	bgt.n	80263d4 <__gethex+0x14c>
 80263be:	9801      	ldr	r0, [sp, #4]
 80263c0:	f000 fa46 	bl	8026850 <_Balloc>
 80263c4:	4604      	mov	r4, r0
 80263c6:	b940      	cbnz	r0, 80263da <__gethex+0x152>
 80263c8:	4b5c      	ldr	r3, [pc, #368]	@ (802653c <__gethex+0x2b4>)
 80263ca:	4602      	mov	r2, r0
 80263cc:	21e4      	movs	r1, #228	@ 0xe4
 80263ce:	485c      	ldr	r0, [pc, #368]	@ (8026540 <__gethex+0x2b8>)
 80263d0:	f7fe fc2e 	bl	8024c30 <__assert_func>
 80263d4:	3101      	adds	r1, #1
 80263d6:	105b      	asrs	r3, r3, #1
 80263d8:	e7ef      	b.n	80263ba <__gethex+0x132>
 80263da:	f100 0a14 	add.w	sl, r0, #20
 80263de:	2300      	movs	r3, #0
 80263e0:	4655      	mov	r5, sl
 80263e2:	469b      	mov	fp, r3
 80263e4:	45b1      	cmp	r9, r6
 80263e6:	d337      	bcc.n	8026458 <__gethex+0x1d0>
 80263e8:	f845 bb04 	str.w	fp, [r5], #4
 80263ec:	eba5 050a 	sub.w	r5, r5, sl
 80263f0:	10ad      	asrs	r5, r5, #2
 80263f2:	6125      	str	r5, [r4, #16]
 80263f4:	4658      	mov	r0, fp
 80263f6:	f000 fb1d 	bl	8026a34 <__hi0bits>
 80263fa:	016d      	lsls	r5, r5, #5
 80263fc:	f8d8 6000 	ldr.w	r6, [r8]
 8026400:	1a2d      	subs	r5, r5, r0
 8026402:	42b5      	cmp	r5, r6
 8026404:	dd54      	ble.n	80264b0 <__gethex+0x228>
 8026406:	1bad      	subs	r5, r5, r6
 8026408:	4629      	mov	r1, r5
 802640a:	4620      	mov	r0, r4
 802640c:	f000 feae 	bl	802716c <__any_on>
 8026410:	4681      	mov	r9, r0
 8026412:	b178      	cbz	r0, 8026434 <__gethex+0x1ac>
 8026414:	1e6b      	subs	r3, r5, #1
 8026416:	1159      	asrs	r1, r3, #5
 8026418:	f003 021f 	and.w	r2, r3, #31
 802641c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8026420:	f04f 0901 	mov.w	r9, #1
 8026424:	fa09 f202 	lsl.w	r2, r9, r2
 8026428:	420a      	tst	r2, r1
 802642a:	d003      	beq.n	8026434 <__gethex+0x1ac>
 802642c:	454b      	cmp	r3, r9
 802642e:	dc36      	bgt.n	802649e <__gethex+0x216>
 8026430:	f04f 0902 	mov.w	r9, #2
 8026434:	4629      	mov	r1, r5
 8026436:	4620      	mov	r0, r4
 8026438:	f7ff febe 	bl	80261b8 <rshift>
 802643c:	442f      	add	r7, r5
 802643e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026442:	42bb      	cmp	r3, r7
 8026444:	da42      	bge.n	80264cc <__gethex+0x244>
 8026446:	9801      	ldr	r0, [sp, #4]
 8026448:	4621      	mov	r1, r4
 802644a:	f000 fa41 	bl	80268d0 <_Bfree>
 802644e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026450:	2300      	movs	r3, #0
 8026452:	6013      	str	r3, [r2, #0]
 8026454:	25a3      	movs	r5, #163	@ 0xa3
 8026456:	e793      	b.n	8026380 <__gethex+0xf8>
 8026458:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802645c:	2a2e      	cmp	r2, #46	@ 0x2e
 802645e:	d012      	beq.n	8026486 <__gethex+0x1fe>
 8026460:	2b20      	cmp	r3, #32
 8026462:	d104      	bne.n	802646e <__gethex+0x1e6>
 8026464:	f845 bb04 	str.w	fp, [r5], #4
 8026468:	f04f 0b00 	mov.w	fp, #0
 802646c:	465b      	mov	r3, fp
 802646e:	7830      	ldrb	r0, [r6, #0]
 8026470:	9303      	str	r3, [sp, #12]
 8026472:	f7ff fef3 	bl	802625c <__hexdig_fun>
 8026476:	9b03      	ldr	r3, [sp, #12]
 8026478:	f000 000f 	and.w	r0, r0, #15
 802647c:	4098      	lsls	r0, r3
 802647e:	ea4b 0b00 	orr.w	fp, fp, r0
 8026482:	3304      	adds	r3, #4
 8026484:	e7ae      	b.n	80263e4 <__gethex+0x15c>
 8026486:	45b1      	cmp	r9, r6
 8026488:	d8ea      	bhi.n	8026460 <__gethex+0x1d8>
 802648a:	492b      	ldr	r1, [pc, #172]	@ (8026538 <__gethex+0x2b0>)
 802648c:	9303      	str	r3, [sp, #12]
 802648e:	2201      	movs	r2, #1
 8026490:	4630      	mov	r0, r6
 8026492:	f7ff fcc1 	bl	8025e18 <strncmp>
 8026496:	9b03      	ldr	r3, [sp, #12]
 8026498:	2800      	cmp	r0, #0
 802649a:	d1e1      	bne.n	8026460 <__gethex+0x1d8>
 802649c:	e7a2      	b.n	80263e4 <__gethex+0x15c>
 802649e:	1ea9      	subs	r1, r5, #2
 80264a0:	4620      	mov	r0, r4
 80264a2:	f000 fe63 	bl	802716c <__any_on>
 80264a6:	2800      	cmp	r0, #0
 80264a8:	d0c2      	beq.n	8026430 <__gethex+0x1a8>
 80264aa:	f04f 0903 	mov.w	r9, #3
 80264ae:	e7c1      	b.n	8026434 <__gethex+0x1ac>
 80264b0:	da09      	bge.n	80264c6 <__gethex+0x23e>
 80264b2:	1b75      	subs	r5, r6, r5
 80264b4:	4621      	mov	r1, r4
 80264b6:	9801      	ldr	r0, [sp, #4]
 80264b8:	462a      	mov	r2, r5
 80264ba:	f000 fc21 	bl	8026d00 <__lshift>
 80264be:	1b7f      	subs	r7, r7, r5
 80264c0:	4604      	mov	r4, r0
 80264c2:	f100 0a14 	add.w	sl, r0, #20
 80264c6:	f04f 0900 	mov.w	r9, #0
 80264ca:	e7b8      	b.n	802643e <__gethex+0x1b6>
 80264cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80264d0:	42bd      	cmp	r5, r7
 80264d2:	dd6f      	ble.n	80265b4 <__gethex+0x32c>
 80264d4:	1bed      	subs	r5, r5, r7
 80264d6:	42ae      	cmp	r6, r5
 80264d8:	dc34      	bgt.n	8026544 <__gethex+0x2bc>
 80264da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80264de:	2b02      	cmp	r3, #2
 80264e0:	d022      	beq.n	8026528 <__gethex+0x2a0>
 80264e2:	2b03      	cmp	r3, #3
 80264e4:	d024      	beq.n	8026530 <__gethex+0x2a8>
 80264e6:	2b01      	cmp	r3, #1
 80264e8:	d115      	bne.n	8026516 <__gethex+0x28e>
 80264ea:	42ae      	cmp	r6, r5
 80264ec:	d113      	bne.n	8026516 <__gethex+0x28e>
 80264ee:	2e01      	cmp	r6, #1
 80264f0:	d10b      	bne.n	802650a <__gethex+0x282>
 80264f2:	9a02      	ldr	r2, [sp, #8]
 80264f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80264f8:	6013      	str	r3, [r2, #0]
 80264fa:	2301      	movs	r3, #1
 80264fc:	6123      	str	r3, [r4, #16]
 80264fe:	f8ca 3000 	str.w	r3, [sl]
 8026502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026504:	2562      	movs	r5, #98	@ 0x62
 8026506:	601c      	str	r4, [r3, #0]
 8026508:	e73a      	b.n	8026380 <__gethex+0xf8>
 802650a:	1e71      	subs	r1, r6, #1
 802650c:	4620      	mov	r0, r4
 802650e:	f000 fe2d 	bl	802716c <__any_on>
 8026512:	2800      	cmp	r0, #0
 8026514:	d1ed      	bne.n	80264f2 <__gethex+0x26a>
 8026516:	9801      	ldr	r0, [sp, #4]
 8026518:	4621      	mov	r1, r4
 802651a:	f000 f9d9 	bl	80268d0 <_Bfree>
 802651e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026520:	2300      	movs	r3, #0
 8026522:	6013      	str	r3, [r2, #0]
 8026524:	2550      	movs	r5, #80	@ 0x50
 8026526:	e72b      	b.n	8026380 <__gethex+0xf8>
 8026528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802652a:	2b00      	cmp	r3, #0
 802652c:	d1f3      	bne.n	8026516 <__gethex+0x28e>
 802652e:	e7e0      	b.n	80264f2 <__gethex+0x26a>
 8026530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026532:	2b00      	cmp	r3, #0
 8026534:	d1dd      	bne.n	80264f2 <__gethex+0x26a>
 8026536:	e7ee      	b.n	8026516 <__gethex+0x28e>
 8026538:	0802a8f4 	.word	0x0802a8f4
 802653c:	0802aa61 	.word	0x0802aa61
 8026540:	0802aa72 	.word	0x0802aa72
 8026544:	1e6f      	subs	r7, r5, #1
 8026546:	f1b9 0f00 	cmp.w	r9, #0
 802654a:	d130      	bne.n	80265ae <__gethex+0x326>
 802654c:	b127      	cbz	r7, 8026558 <__gethex+0x2d0>
 802654e:	4639      	mov	r1, r7
 8026550:	4620      	mov	r0, r4
 8026552:	f000 fe0b 	bl	802716c <__any_on>
 8026556:	4681      	mov	r9, r0
 8026558:	117a      	asrs	r2, r7, #5
 802655a:	2301      	movs	r3, #1
 802655c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8026560:	f007 071f 	and.w	r7, r7, #31
 8026564:	40bb      	lsls	r3, r7
 8026566:	4213      	tst	r3, r2
 8026568:	4629      	mov	r1, r5
 802656a:	4620      	mov	r0, r4
 802656c:	bf18      	it	ne
 802656e:	f049 0902 	orrne.w	r9, r9, #2
 8026572:	f7ff fe21 	bl	80261b8 <rshift>
 8026576:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802657a:	1b76      	subs	r6, r6, r5
 802657c:	2502      	movs	r5, #2
 802657e:	f1b9 0f00 	cmp.w	r9, #0
 8026582:	d047      	beq.n	8026614 <__gethex+0x38c>
 8026584:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026588:	2b02      	cmp	r3, #2
 802658a:	d015      	beq.n	80265b8 <__gethex+0x330>
 802658c:	2b03      	cmp	r3, #3
 802658e:	d017      	beq.n	80265c0 <__gethex+0x338>
 8026590:	2b01      	cmp	r3, #1
 8026592:	d109      	bne.n	80265a8 <__gethex+0x320>
 8026594:	f019 0f02 	tst.w	r9, #2
 8026598:	d006      	beq.n	80265a8 <__gethex+0x320>
 802659a:	f8da 3000 	ldr.w	r3, [sl]
 802659e:	ea49 0903 	orr.w	r9, r9, r3
 80265a2:	f019 0f01 	tst.w	r9, #1
 80265a6:	d10e      	bne.n	80265c6 <__gethex+0x33e>
 80265a8:	f045 0510 	orr.w	r5, r5, #16
 80265ac:	e032      	b.n	8026614 <__gethex+0x38c>
 80265ae:	f04f 0901 	mov.w	r9, #1
 80265b2:	e7d1      	b.n	8026558 <__gethex+0x2d0>
 80265b4:	2501      	movs	r5, #1
 80265b6:	e7e2      	b.n	802657e <__gethex+0x2f6>
 80265b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80265ba:	f1c3 0301 	rsb	r3, r3, #1
 80265be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80265c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80265c2:	2b00      	cmp	r3, #0
 80265c4:	d0f0      	beq.n	80265a8 <__gethex+0x320>
 80265c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80265ca:	f104 0314 	add.w	r3, r4, #20
 80265ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80265d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80265d6:	f04f 0c00 	mov.w	ip, #0
 80265da:	4618      	mov	r0, r3
 80265dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80265e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80265e4:	d01b      	beq.n	802661e <__gethex+0x396>
 80265e6:	3201      	adds	r2, #1
 80265e8:	6002      	str	r2, [r0, #0]
 80265ea:	2d02      	cmp	r5, #2
 80265ec:	f104 0314 	add.w	r3, r4, #20
 80265f0:	d13c      	bne.n	802666c <__gethex+0x3e4>
 80265f2:	f8d8 2000 	ldr.w	r2, [r8]
 80265f6:	3a01      	subs	r2, #1
 80265f8:	42b2      	cmp	r2, r6
 80265fa:	d109      	bne.n	8026610 <__gethex+0x388>
 80265fc:	1171      	asrs	r1, r6, #5
 80265fe:	2201      	movs	r2, #1
 8026600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8026604:	f006 061f 	and.w	r6, r6, #31
 8026608:	fa02 f606 	lsl.w	r6, r2, r6
 802660c:	421e      	tst	r6, r3
 802660e:	d13a      	bne.n	8026686 <__gethex+0x3fe>
 8026610:	f045 0520 	orr.w	r5, r5, #32
 8026614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026616:	601c      	str	r4, [r3, #0]
 8026618:	9b02      	ldr	r3, [sp, #8]
 802661a:	601f      	str	r7, [r3, #0]
 802661c:	e6b0      	b.n	8026380 <__gethex+0xf8>
 802661e:	4299      	cmp	r1, r3
 8026620:	f843 cc04 	str.w	ip, [r3, #-4]
 8026624:	d8d9      	bhi.n	80265da <__gethex+0x352>
 8026626:	68a3      	ldr	r3, [r4, #8]
 8026628:	459b      	cmp	fp, r3
 802662a:	db17      	blt.n	802665c <__gethex+0x3d4>
 802662c:	6861      	ldr	r1, [r4, #4]
 802662e:	9801      	ldr	r0, [sp, #4]
 8026630:	3101      	adds	r1, #1
 8026632:	f000 f90d 	bl	8026850 <_Balloc>
 8026636:	4681      	mov	r9, r0
 8026638:	b918      	cbnz	r0, 8026642 <__gethex+0x3ba>
 802663a:	4b1a      	ldr	r3, [pc, #104]	@ (80266a4 <__gethex+0x41c>)
 802663c:	4602      	mov	r2, r0
 802663e:	2184      	movs	r1, #132	@ 0x84
 8026640:	e6c5      	b.n	80263ce <__gethex+0x146>
 8026642:	6922      	ldr	r2, [r4, #16]
 8026644:	3202      	adds	r2, #2
 8026646:	f104 010c 	add.w	r1, r4, #12
 802664a:	0092      	lsls	r2, r2, #2
 802664c:	300c      	adds	r0, #12
 802664e:	f7ff fcf0 	bl	8026032 <memcpy>
 8026652:	4621      	mov	r1, r4
 8026654:	9801      	ldr	r0, [sp, #4]
 8026656:	f000 f93b 	bl	80268d0 <_Bfree>
 802665a:	464c      	mov	r4, r9
 802665c:	6923      	ldr	r3, [r4, #16]
 802665e:	1c5a      	adds	r2, r3, #1
 8026660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8026664:	6122      	str	r2, [r4, #16]
 8026666:	2201      	movs	r2, #1
 8026668:	615a      	str	r2, [r3, #20]
 802666a:	e7be      	b.n	80265ea <__gethex+0x362>
 802666c:	6922      	ldr	r2, [r4, #16]
 802666e:	455a      	cmp	r2, fp
 8026670:	dd0b      	ble.n	802668a <__gethex+0x402>
 8026672:	2101      	movs	r1, #1
 8026674:	4620      	mov	r0, r4
 8026676:	f7ff fd9f 	bl	80261b8 <rshift>
 802667a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802667e:	3701      	adds	r7, #1
 8026680:	42bb      	cmp	r3, r7
 8026682:	f6ff aee0 	blt.w	8026446 <__gethex+0x1be>
 8026686:	2501      	movs	r5, #1
 8026688:	e7c2      	b.n	8026610 <__gethex+0x388>
 802668a:	f016 061f 	ands.w	r6, r6, #31
 802668e:	d0fa      	beq.n	8026686 <__gethex+0x3fe>
 8026690:	4453      	add	r3, sl
 8026692:	f1c6 0620 	rsb	r6, r6, #32
 8026696:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802669a:	f000 f9cb 	bl	8026a34 <__hi0bits>
 802669e:	42b0      	cmp	r0, r6
 80266a0:	dbe7      	blt.n	8026672 <__gethex+0x3ea>
 80266a2:	e7f0      	b.n	8026686 <__gethex+0x3fe>
 80266a4:	0802aa61 	.word	0x0802aa61

080266a8 <L_shift>:
 80266a8:	f1c2 0208 	rsb	r2, r2, #8
 80266ac:	0092      	lsls	r2, r2, #2
 80266ae:	b570      	push	{r4, r5, r6, lr}
 80266b0:	f1c2 0620 	rsb	r6, r2, #32
 80266b4:	6843      	ldr	r3, [r0, #4]
 80266b6:	6804      	ldr	r4, [r0, #0]
 80266b8:	fa03 f506 	lsl.w	r5, r3, r6
 80266bc:	432c      	orrs	r4, r5
 80266be:	40d3      	lsrs	r3, r2
 80266c0:	6004      	str	r4, [r0, #0]
 80266c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80266c6:	4288      	cmp	r0, r1
 80266c8:	d3f4      	bcc.n	80266b4 <L_shift+0xc>
 80266ca:	bd70      	pop	{r4, r5, r6, pc}

080266cc <__match>:
 80266cc:	b530      	push	{r4, r5, lr}
 80266ce:	6803      	ldr	r3, [r0, #0]
 80266d0:	3301      	adds	r3, #1
 80266d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80266d6:	b914      	cbnz	r4, 80266de <__match+0x12>
 80266d8:	6003      	str	r3, [r0, #0]
 80266da:	2001      	movs	r0, #1
 80266dc:	bd30      	pop	{r4, r5, pc}
 80266de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80266e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80266e6:	2d19      	cmp	r5, #25
 80266e8:	bf98      	it	ls
 80266ea:	3220      	addls	r2, #32
 80266ec:	42a2      	cmp	r2, r4
 80266ee:	d0f0      	beq.n	80266d2 <__match+0x6>
 80266f0:	2000      	movs	r0, #0
 80266f2:	e7f3      	b.n	80266dc <__match+0x10>

080266f4 <__hexnan>:
 80266f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266f8:	680b      	ldr	r3, [r1, #0]
 80266fa:	6801      	ldr	r1, [r0, #0]
 80266fc:	115e      	asrs	r6, r3, #5
 80266fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8026702:	f013 031f 	ands.w	r3, r3, #31
 8026706:	b087      	sub	sp, #28
 8026708:	bf18      	it	ne
 802670a:	3604      	addne	r6, #4
 802670c:	2500      	movs	r5, #0
 802670e:	1f37      	subs	r7, r6, #4
 8026710:	4682      	mov	sl, r0
 8026712:	4690      	mov	r8, r2
 8026714:	9301      	str	r3, [sp, #4]
 8026716:	f846 5c04 	str.w	r5, [r6, #-4]
 802671a:	46b9      	mov	r9, r7
 802671c:	463c      	mov	r4, r7
 802671e:	9502      	str	r5, [sp, #8]
 8026720:	46ab      	mov	fp, r5
 8026722:	784a      	ldrb	r2, [r1, #1]
 8026724:	1c4b      	adds	r3, r1, #1
 8026726:	9303      	str	r3, [sp, #12]
 8026728:	b342      	cbz	r2, 802677c <__hexnan+0x88>
 802672a:	4610      	mov	r0, r2
 802672c:	9105      	str	r1, [sp, #20]
 802672e:	9204      	str	r2, [sp, #16]
 8026730:	f7ff fd94 	bl	802625c <__hexdig_fun>
 8026734:	2800      	cmp	r0, #0
 8026736:	d151      	bne.n	80267dc <__hexnan+0xe8>
 8026738:	9a04      	ldr	r2, [sp, #16]
 802673a:	9905      	ldr	r1, [sp, #20]
 802673c:	2a20      	cmp	r2, #32
 802673e:	d818      	bhi.n	8026772 <__hexnan+0x7e>
 8026740:	9b02      	ldr	r3, [sp, #8]
 8026742:	459b      	cmp	fp, r3
 8026744:	dd13      	ble.n	802676e <__hexnan+0x7a>
 8026746:	454c      	cmp	r4, r9
 8026748:	d206      	bcs.n	8026758 <__hexnan+0x64>
 802674a:	2d07      	cmp	r5, #7
 802674c:	dc04      	bgt.n	8026758 <__hexnan+0x64>
 802674e:	462a      	mov	r2, r5
 8026750:	4649      	mov	r1, r9
 8026752:	4620      	mov	r0, r4
 8026754:	f7ff ffa8 	bl	80266a8 <L_shift>
 8026758:	4544      	cmp	r4, r8
 802675a:	d952      	bls.n	8026802 <__hexnan+0x10e>
 802675c:	2300      	movs	r3, #0
 802675e:	f1a4 0904 	sub.w	r9, r4, #4
 8026762:	f844 3c04 	str.w	r3, [r4, #-4]
 8026766:	f8cd b008 	str.w	fp, [sp, #8]
 802676a:	464c      	mov	r4, r9
 802676c:	461d      	mov	r5, r3
 802676e:	9903      	ldr	r1, [sp, #12]
 8026770:	e7d7      	b.n	8026722 <__hexnan+0x2e>
 8026772:	2a29      	cmp	r2, #41	@ 0x29
 8026774:	d157      	bne.n	8026826 <__hexnan+0x132>
 8026776:	3102      	adds	r1, #2
 8026778:	f8ca 1000 	str.w	r1, [sl]
 802677c:	f1bb 0f00 	cmp.w	fp, #0
 8026780:	d051      	beq.n	8026826 <__hexnan+0x132>
 8026782:	454c      	cmp	r4, r9
 8026784:	d206      	bcs.n	8026794 <__hexnan+0xa0>
 8026786:	2d07      	cmp	r5, #7
 8026788:	dc04      	bgt.n	8026794 <__hexnan+0xa0>
 802678a:	462a      	mov	r2, r5
 802678c:	4649      	mov	r1, r9
 802678e:	4620      	mov	r0, r4
 8026790:	f7ff ff8a 	bl	80266a8 <L_shift>
 8026794:	4544      	cmp	r4, r8
 8026796:	d936      	bls.n	8026806 <__hexnan+0x112>
 8026798:	f1a8 0204 	sub.w	r2, r8, #4
 802679c:	4623      	mov	r3, r4
 802679e:	f853 1b04 	ldr.w	r1, [r3], #4
 80267a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80267a6:	429f      	cmp	r7, r3
 80267a8:	d2f9      	bcs.n	802679e <__hexnan+0xaa>
 80267aa:	1b3b      	subs	r3, r7, r4
 80267ac:	f023 0303 	bic.w	r3, r3, #3
 80267b0:	3304      	adds	r3, #4
 80267b2:	3401      	adds	r4, #1
 80267b4:	3e03      	subs	r6, #3
 80267b6:	42b4      	cmp	r4, r6
 80267b8:	bf88      	it	hi
 80267ba:	2304      	movhi	r3, #4
 80267bc:	4443      	add	r3, r8
 80267be:	2200      	movs	r2, #0
 80267c0:	f843 2b04 	str.w	r2, [r3], #4
 80267c4:	429f      	cmp	r7, r3
 80267c6:	d2fb      	bcs.n	80267c0 <__hexnan+0xcc>
 80267c8:	683b      	ldr	r3, [r7, #0]
 80267ca:	b91b      	cbnz	r3, 80267d4 <__hexnan+0xe0>
 80267cc:	4547      	cmp	r7, r8
 80267ce:	d128      	bne.n	8026822 <__hexnan+0x12e>
 80267d0:	2301      	movs	r3, #1
 80267d2:	603b      	str	r3, [r7, #0]
 80267d4:	2005      	movs	r0, #5
 80267d6:	b007      	add	sp, #28
 80267d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267dc:	3501      	adds	r5, #1
 80267de:	2d08      	cmp	r5, #8
 80267e0:	f10b 0b01 	add.w	fp, fp, #1
 80267e4:	dd06      	ble.n	80267f4 <__hexnan+0x100>
 80267e6:	4544      	cmp	r4, r8
 80267e8:	d9c1      	bls.n	802676e <__hexnan+0x7a>
 80267ea:	2300      	movs	r3, #0
 80267ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80267f0:	2501      	movs	r5, #1
 80267f2:	3c04      	subs	r4, #4
 80267f4:	6822      	ldr	r2, [r4, #0]
 80267f6:	f000 000f 	and.w	r0, r0, #15
 80267fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80267fe:	6020      	str	r0, [r4, #0]
 8026800:	e7b5      	b.n	802676e <__hexnan+0x7a>
 8026802:	2508      	movs	r5, #8
 8026804:	e7b3      	b.n	802676e <__hexnan+0x7a>
 8026806:	9b01      	ldr	r3, [sp, #4]
 8026808:	2b00      	cmp	r3, #0
 802680a:	d0dd      	beq.n	80267c8 <__hexnan+0xd4>
 802680c:	f1c3 0320 	rsb	r3, r3, #32
 8026810:	f04f 32ff 	mov.w	r2, #4294967295
 8026814:	40da      	lsrs	r2, r3
 8026816:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802681a:	4013      	ands	r3, r2
 802681c:	f846 3c04 	str.w	r3, [r6, #-4]
 8026820:	e7d2      	b.n	80267c8 <__hexnan+0xd4>
 8026822:	3f04      	subs	r7, #4
 8026824:	e7d0      	b.n	80267c8 <__hexnan+0xd4>
 8026826:	2004      	movs	r0, #4
 8026828:	e7d5      	b.n	80267d6 <__hexnan+0xe2>

0802682a <__ascii_mbtowc>:
 802682a:	b082      	sub	sp, #8
 802682c:	b901      	cbnz	r1, 8026830 <__ascii_mbtowc+0x6>
 802682e:	a901      	add	r1, sp, #4
 8026830:	b142      	cbz	r2, 8026844 <__ascii_mbtowc+0x1a>
 8026832:	b14b      	cbz	r3, 8026848 <__ascii_mbtowc+0x1e>
 8026834:	7813      	ldrb	r3, [r2, #0]
 8026836:	600b      	str	r3, [r1, #0]
 8026838:	7812      	ldrb	r2, [r2, #0]
 802683a:	1e10      	subs	r0, r2, #0
 802683c:	bf18      	it	ne
 802683e:	2001      	movne	r0, #1
 8026840:	b002      	add	sp, #8
 8026842:	4770      	bx	lr
 8026844:	4610      	mov	r0, r2
 8026846:	e7fb      	b.n	8026840 <__ascii_mbtowc+0x16>
 8026848:	f06f 0001 	mvn.w	r0, #1
 802684c:	e7f8      	b.n	8026840 <__ascii_mbtowc+0x16>
	...

08026850 <_Balloc>:
 8026850:	b570      	push	{r4, r5, r6, lr}
 8026852:	69c6      	ldr	r6, [r0, #28]
 8026854:	4604      	mov	r4, r0
 8026856:	460d      	mov	r5, r1
 8026858:	b976      	cbnz	r6, 8026878 <_Balloc+0x28>
 802685a:	2010      	movs	r0, #16
 802685c:	f7fe fa0c 	bl	8024c78 <malloc>
 8026860:	4602      	mov	r2, r0
 8026862:	61e0      	str	r0, [r4, #28]
 8026864:	b920      	cbnz	r0, 8026870 <_Balloc+0x20>
 8026866:	4b18      	ldr	r3, [pc, #96]	@ (80268c8 <_Balloc+0x78>)
 8026868:	4818      	ldr	r0, [pc, #96]	@ (80268cc <_Balloc+0x7c>)
 802686a:	216b      	movs	r1, #107	@ 0x6b
 802686c:	f7fe f9e0 	bl	8024c30 <__assert_func>
 8026870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026874:	6006      	str	r6, [r0, #0]
 8026876:	60c6      	str	r6, [r0, #12]
 8026878:	69e6      	ldr	r6, [r4, #28]
 802687a:	68f3      	ldr	r3, [r6, #12]
 802687c:	b183      	cbz	r3, 80268a0 <_Balloc+0x50>
 802687e:	69e3      	ldr	r3, [r4, #28]
 8026880:	68db      	ldr	r3, [r3, #12]
 8026882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026886:	b9b8      	cbnz	r0, 80268b8 <_Balloc+0x68>
 8026888:	2101      	movs	r1, #1
 802688a:	fa01 f605 	lsl.w	r6, r1, r5
 802688e:	1d72      	adds	r2, r6, #5
 8026890:	0092      	lsls	r2, r2, #2
 8026892:	4620      	mov	r0, r4
 8026894:	f001 fa1a 	bl	8027ccc <_calloc_r>
 8026898:	b160      	cbz	r0, 80268b4 <_Balloc+0x64>
 802689a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802689e:	e00e      	b.n	80268be <_Balloc+0x6e>
 80268a0:	2221      	movs	r2, #33	@ 0x21
 80268a2:	2104      	movs	r1, #4
 80268a4:	4620      	mov	r0, r4
 80268a6:	f001 fa11 	bl	8027ccc <_calloc_r>
 80268aa:	69e3      	ldr	r3, [r4, #28]
 80268ac:	60f0      	str	r0, [r6, #12]
 80268ae:	68db      	ldr	r3, [r3, #12]
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	d1e4      	bne.n	802687e <_Balloc+0x2e>
 80268b4:	2000      	movs	r0, #0
 80268b6:	bd70      	pop	{r4, r5, r6, pc}
 80268b8:	6802      	ldr	r2, [r0, #0]
 80268ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80268be:	2300      	movs	r3, #0
 80268c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80268c4:	e7f7      	b.n	80268b6 <_Balloc+0x66>
 80268c6:	bf00      	nop
 80268c8:	0802aad2 	.word	0x0802aad2
 80268cc:	0802aae9 	.word	0x0802aae9

080268d0 <_Bfree>:
 80268d0:	b570      	push	{r4, r5, r6, lr}
 80268d2:	69c6      	ldr	r6, [r0, #28]
 80268d4:	4605      	mov	r5, r0
 80268d6:	460c      	mov	r4, r1
 80268d8:	b976      	cbnz	r6, 80268f8 <_Bfree+0x28>
 80268da:	2010      	movs	r0, #16
 80268dc:	f7fe f9cc 	bl	8024c78 <malloc>
 80268e0:	4602      	mov	r2, r0
 80268e2:	61e8      	str	r0, [r5, #28]
 80268e4:	b920      	cbnz	r0, 80268f0 <_Bfree+0x20>
 80268e6:	4b09      	ldr	r3, [pc, #36]	@ (802690c <_Bfree+0x3c>)
 80268e8:	4809      	ldr	r0, [pc, #36]	@ (8026910 <_Bfree+0x40>)
 80268ea:	218f      	movs	r1, #143	@ 0x8f
 80268ec:	f7fe f9a0 	bl	8024c30 <__assert_func>
 80268f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80268f4:	6006      	str	r6, [r0, #0]
 80268f6:	60c6      	str	r6, [r0, #12]
 80268f8:	b13c      	cbz	r4, 802690a <_Bfree+0x3a>
 80268fa:	69eb      	ldr	r3, [r5, #28]
 80268fc:	6862      	ldr	r2, [r4, #4]
 80268fe:	68db      	ldr	r3, [r3, #12]
 8026900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026904:	6021      	str	r1, [r4, #0]
 8026906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802690a:	bd70      	pop	{r4, r5, r6, pc}
 802690c:	0802aad2 	.word	0x0802aad2
 8026910:	0802aae9 	.word	0x0802aae9

08026914 <__multadd>:
 8026914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026918:	690d      	ldr	r5, [r1, #16]
 802691a:	4607      	mov	r7, r0
 802691c:	460c      	mov	r4, r1
 802691e:	461e      	mov	r6, r3
 8026920:	f101 0c14 	add.w	ip, r1, #20
 8026924:	2000      	movs	r0, #0
 8026926:	f8dc 3000 	ldr.w	r3, [ip]
 802692a:	b299      	uxth	r1, r3
 802692c:	fb02 6101 	mla	r1, r2, r1, r6
 8026930:	0c1e      	lsrs	r6, r3, #16
 8026932:	0c0b      	lsrs	r3, r1, #16
 8026934:	fb02 3306 	mla	r3, r2, r6, r3
 8026938:	b289      	uxth	r1, r1
 802693a:	3001      	adds	r0, #1
 802693c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026940:	4285      	cmp	r5, r0
 8026942:	f84c 1b04 	str.w	r1, [ip], #4
 8026946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802694a:	dcec      	bgt.n	8026926 <__multadd+0x12>
 802694c:	b30e      	cbz	r6, 8026992 <__multadd+0x7e>
 802694e:	68a3      	ldr	r3, [r4, #8]
 8026950:	42ab      	cmp	r3, r5
 8026952:	dc19      	bgt.n	8026988 <__multadd+0x74>
 8026954:	6861      	ldr	r1, [r4, #4]
 8026956:	4638      	mov	r0, r7
 8026958:	3101      	adds	r1, #1
 802695a:	f7ff ff79 	bl	8026850 <_Balloc>
 802695e:	4680      	mov	r8, r0
 8026960:	b928      	cbnz	r0, 802696e <__multadd+0x5a>
 8026962:	4602      	mov	r2, r0
 8026964:	4b0c      	ldr	r3, [pc, #48]	@ (8026998 <__multadd+0x84>)
 8026966:	480d      	ldr	r0, [pc, #52]	@ (802699c <__multadd+0x88>)
 8026968:	21ba      	movs	r1, #186	@ 0xba
 802696a:	f7fe f961 	bl	8024c30 <__assert_func>
 802696e:	6922      	ldr	r2, [r4, #16]
 8026970:	3202      	adds	r2, #2
 8026972:	f104 010c 	add.w	r1, r4, #12
 8026976:	0092      	lsls	r2, r2, #2
 8026978:	300c      	adds	r0, #12
 802697a:	f7ff fb5a 	bl	8026032 <memcpy>
 802697e:	4621      	mov	r1, r4
 8026980:	4638      	mov	r0, r7
 8026982:	f7ff ffa5 	bl	80268d0 <_Bfree>
 8026986:	4644      	mov	r4, r8
 8026988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802698c:	3501      	adds	r5, #1
 802698e:	615e      	str	r6, [r3, #20]
 8026990:	6125      	str	r5, [r4, #16]
 8026992:	4620      	mov	r0, r4
 8026994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026998:	0802aa61 	.word	0x0802aa61
 802699c:	0802aae9 	.word	0x0802aae9

080269a0 <__s2b>:
 80269a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80269a4:	460c      	mov	r4, r1
 80269a6:	4615      	mov	r5, r2
 80269a8:	461f      	mov	r7, r3
 80269aa:	2209      	movs	r2, #9
 80269ac:	3308      	adds	r3, #8
 80269ae:	4606      	mov	r6, r0
 80269b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80269b4:	2100      	movs	r1, #0
 80269b6:	2201      	movs	r2, #1
 80269b8:	429a      	cmp	r2, r3
 80269ba:	db09      	blt.n	80269d0 <__s2b+0x30>
 80269bc:	4630      	mov	r0, r6
 80269be:	f7ff ff47 	bl	8026850 <_Balloc>
 80269c2:	b940      	cbnz	r0, 80269d6 <__s2b+0x36>
 80269c4:	4602      	mov	r2, r0
 80269c6:	4b19      	ldr	r3, [pc, #100]	@ (8026a2c <__s2b+0x8c>)
 80269c8:	4819      	ldr	r0, [pc, #100]	@ (8026a30 <__s2b+0x90>)
 80269ca:	21d3      	movs	r1, #211	@ 0xd3
 80269cc:	f7fe f930 	bl	8024c30 <__assert_func>
 80269d0:	0052      	lsls	r2, r2, #1
 80269d2:	3101      	adds	r1, #1
 80269d4:	e7f0      	b.n	80269b8 <__s2b+0x18>
 80269d6:	9b08      	ldr	r3, [sp, #32]
 80269d8:	6143      	str	r3, [r0, #20]
 80269da:	2d09      	cmp	r5, #9
 80269dc:	f04f 0301 	mov.w	r3, #1
 80269e0:	6103      	str	r3, [r0, #16]
 80269e2:	dd16      	ble.n	8026a12 <__s2b+0x72>
 80269e4:	f104 0909 	add.w	r9, r4, #9
 80269e8:	46c8      	mov	r8, r9
 80269ea:	442c      	add	r4, r5
 80269ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80269f0:	4601      	mov	r1, r0
 80269f2:	3b30      	subs	r3, #48	@ 0x30
 80269f4:	220a      	movs	r2, #10
 80269f6:	4630      	mov	r0, r6
 80269f8:	f7ff ff8c 	bl	8026914 <__multadd>
 80269fc:	45a0      	cmp	r8, r4
 80269fe:	d1f5      	bne.n	80269ec <__s2b+0x4c>
 8026a00:	f1a5 0408 	sub.w	r4, r5, #8
 8026a04:	444c      	add	r4, r9
 8026a06:	1b2d      	subs	r5, r5, r4
 8026a08:	1963      	adds	r3, r4, r5
 8026a0a:	42bb      	cmp	r3, r7
 8026a0c:	db04      	blt.n	8026a18 <__s2b+0x78>
 8026a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a12:	340a      	adds	r4, #10
 8026a14:	2509      	movs	r5, #9
 8026a16:	e7f6      	b.n	8026a06 <__s2b+0x66>
 8026a18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026a1c:	4601      	mov	r1, r0
 8026a1e:	3b30      	subs	r3, #48	@ 0x30
 8026a20:	220a      	movs	r2, #10
 8026a22:	4630      	mov	r0, r6
 8026a24:	f7ff ff76 	bl	8026914 <__multadd>
 8026a28:	e7ee      	b.n	8026a08 <__s2b+0x68>
 8026a2a:	bf00      	nop
 8026a2c:	0802aa61 	.word	0x0802aa61
 8026a30:	0802aae9 	.word	0x0802aae9

08026a34 <__hi0bits>:
 8026a34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8026a38:	4603      	mov	r3, r0
 8026a3a:	bf36      	itet	cc
 8026a3c:	0403      	lslcc	r3, r0, #16
 8026a3e:	2000      	movcs	r0, #0
 8026a40:	2010      	movcc	r0, #16
 8026a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8026a46:	bf3c      	itt	cc
 8026a48:	021b      	lslcc	r3, r3, #8
 8026a4a:	3008      	addcc	r0, #8
 8026a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8026a50:	bf3c      	itt	cc
 8026a52:	011b      	lslcc	r3, r3, #4
 8026a54:	3004      	addcc	r0, #4
 8026a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8026a5a:	bf3c      	itt	cc
 8026a5c:	009b      	lslcc	r3, r3, #2
 8026a5e:	3002      	addcc	r0, #2
 8026a60:	2b00      	cmp	r3, #0
 8026a62:	db05      	blt.n	8026a70 <__hi0bits+0x3c>
 8026a64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8026a68:	f100 0001 	add.w	r0, r0, #1
 8026a6c:	bf08      	it	eq
 8026a6e:	2020      	moveq	r0, #32
 8026a70:	4770      	bx	lr

08026a72 <__lo0bits>:
 8026a72:	6803      	ldr	r3, [r0, #0]
 8026a74:	4602      	mov	r2, r0
 8026a76:	f013 0007 	ands.w	r0, r3, #7
 8026a7a:	d00b      	beq.n	8026a94 <__lo0bits+0x22>
 8026a7c:	07d9      	lsls	r1, r3, #31
 8026a7e:	d421      	bmi.n	8026ac4 <__lo0bits+0x52>
 8026a80:	0798      	lsls	r0, r3, #30
 8026a82:	bf49      	itett	mi
 8026a84:	085b      	lsrmi	r3, r3, #1
 8026a86:	089b      	lsrpl	r3, r3, #2
 8026a88:	2001      	movmi	r0, #1
 8026a8a:	6013      	strmi	r3, [r2, #0]
 8026a8c:	bf5c      	itt	pl
 8026a8e:	6013      	strpl	r3, [r2, #0]
 8026a90:	2002      	movpl	r0, #2
 8026a92:	4770      	bx	lr
 8026a94:	b299      	uxth	r1, r3
 8026a96:	b909      	cbnz	r1, 8026a9c <__lo0bits+0x2a>
 8026a98:	0c1b      	lsrs	r3, r3, #16
 8026a9a:	2010      	movs	r0, #16
 8026a9c:	b2d9      	uxtb	r1, r3
 8026a9e:	b909      	cbnz	r1, 8026aa4 <__lo0bits+0x32>
 8026aa0:	3008      	adds	r0, #8
 8026aa2:	0a1b      	lsrs	r3, r3, #8
 8026aa4:	0719      	lsls	r1, r3, #28
 8026aa6:	bf04      	itt	eq
 8026aa8:	091b      	lsreq	r3, r3, #4
 8026aaa:	3004      	addeq	r0, #4
 8026aac:	0799      	lsls	r1, r3, #30
 8026aae:	bf04      	itt	eq
 8026ab0:	089b      	lsreq	r3, r3, #2
 8026ab2:	3002      	addeq	r0, #2
 8026ab4:	07d9      	lsls	r1, r3, #31
 8026ab6:	d403      	bmi.n	8026ac0 <__lo0bits+0x4e>
 8026ab8:	085b      	lsrs	r3, r3, #1
 8026aba:	f100 0001 	add.w	r0, r0, #1
 8026abe:	d003      	beq.n	8026ac8 <__lo0bits+0x56>
 8026ac0:	6013      	str	r3, [r2, #0]
 8026ac2:	4770      	bx	lr
 8026ac4:	2000      	movs	r0, #0
 8026ac6:	4770      	bx	lr
 8026ac8:	2020      	movs	r0, #32
 8026aca:	4770      	bx	lr

08026acc <__i2b>:
 8026acc:	b510      	push	{r4, lr}
 8026ace:	460c      	mov	r4, r1
 8026ad0:	2101      	movs	r1, #1
 8026ad2:	f7ff febd 	bl	8026850 <_Balloc>
 8026ad6:	4602      	mov	r2, r0
 8026ad8:	b928      	cbnz	r0, 8026ae6 <__i2b+0x1a>
 8026ada:	4b05      	ldr	r3, [pc, #20]	@ (8026af0 <__i2b+0x24>)
 8026adc:	4805      	ldr	r0, [pc, #20]	@ (8026af4 <__i2b+0x28>)
 8026ade:	f240 1145 	movw	r1, #325	@ 0x145
 8026ae2:	f7fe f8a5 	bl	8024c30 <__assert_func>
 8026ae6:	2301      	movs	r3, #1
 8026ae8:	6144      	str	r4, [r0, #20]
 8026aea:	6103      	str	r3, [r0, #16]
 8026aec:	bd10      	pop	{r4, pc}
 8026aee:	bf00      	nop
 8026af0:	0802aa61 	.word	0x0802aa61
 8026af4:	0802aae9 	.word	0x0802aae9

08026af8 <__multiply>:
 8026af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026afc:	4614      	mov	r4, r2
 8026afe:	690a      	ldr	r2, [r1, #16]
 8026b00:	6923      	ldr	r3, [r4, #16]
 8026b02:	429a      	cmp	r2, r3
 8026b04:	bfa8      	it	ge
 8026b06:	4623      	movge	r3, r4
 8026b08:	460f      	mov	r7, r1
 8026b0a:	bfa4      	itt	ge
 8026b0c:	460c      	movge	r4, r1
 8026b0e:	461f      	movge	r7, r3
 8026b10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026b14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8026b18:	68a3      	ldr	r3, [r4, #8]
 8026b1a:	6861      	ldr	r1, [r4, #4]
 8026b1c:	eb0a 0609 	add.w	r6, sl, r9
 8026b20:	42b3      	cmp	r3, r6
 8026b22:	b085      	sub	sp, #20
 8026b24:	bfb8      	it	lt
 8026b26:	3101      	addlt	r1, #1
 8026b28:	f7ff fe92 	bl	8026850 <_Balloc>
 8026b2c:	b930      	cbnz	r0, 8026b3c <__multiply+0x44>
 8026b2e:	4602      	mov	r2, r0
 8026b30:	4b44      	ldr	r3, [pc, #272]	@ (8026c44 <__multiply+0x14c>)
 8026b32:	4845      	ldr	r0, [pc, #276]	@ (8026c48 <__multiply+0x150>)
 8026b34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8026b38:	f7fe f87a 	bl	8024c30 <__assert_func>
 8026b3c:	f100 0514 	add.w	r5, r0, #20
 8026b40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026b44:	462b      	mov	r3, r5
 8026b46:	2200      	movs	r2, #0
 8026b48:	4543      	cmp	r3, r8
 8026b4a:	d321      	bcc.n	8026b90 <__multiply+0x98>
 8026b4c:	f107 0114 	add.w	r1, r7, #20
 8026b50:	f104 0214 	add.w	r2, r4, #20
 8026b54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8026b58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8026b5c:	9302      	str	r3, [sp, #8]
 8026b5e:	1b13      	subs	r3, r2, r4
 8026b60:	3b15      	subs	r3, #21
 8026b62:	f023 0303 	bic.w	r3, r3, #3
 8026b66:	3304      	adds	r3, #4
 8026b68:	f104 0715 	add.w	r7, r4, #21
 8026b6c:	42ba      	cmp	r2, r7
 8026b6e:	bf38      	it	cc
 8026b70:	2304      	movcc	r3, #4
 8026b72:	9301      	str	r3, [sp, #4]
 8026b74:	9b02      	ldr	r3, [sp, #8]
 8026b76:	9103      	str	r1, [sp, #12]
 8026b78:	428b      	cmp	r3, r1
 8026b7a:	d80c      	bhi.n	8026b96 <__multiply+0x9e>
 8026b7c:	2e00      	cmp	r6, #0
 8026b7e:	dd03      	ble.n	8026b88 <__multiply+0x90>
 8026b80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026b84:	2b00      	cmp	r3, #0
 8026b86:	d05b      	beq.n	8026c40 <__multiply+0x148>
 8026b88:	6106      	str	r6, [r0, #16]
 8026b8a:	b005      	add	sp, #20
 8026b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b90:	f843 2b04 	str.w	r2, [r3], #4
 8026b94:	e7d8      	b.n	8026b48 <__multiply+0x50>
 8026b96:	f8b1 a000 	ldrh.w	sl, [r1]
 8026b9a:	f1ba 0f00 	cmp.w	sl, #0
 8026b9e:	d024      	beq.n	8026bea <__multiply+0xf2>
 8026ba0:	f104 0e14 	add.w	lr, r4, #20
 8026ba4:	46a9      	mov	r9, r5
 8026ba6:	f04f 0c00 	mov.w	ip, #0
 8026baa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8026bae:	f8d9 3000 	ldr.w	r3, [r9]
 8026bb2:	fa1f fb87 	uxth.w	fp, r7
 8026bb6:	b29b      	uxth	r3, r3
 8026bb8:	fb0a 330b 	mla	r3, sl, fp, r3
 8026bbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8026bc0:	f8d9 7000 	ldr.w	r7, [r9]
 8026bc4:	4463      	add	r3, ip
 8026bc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8026bca:	fb0a c70b 	mla	r7, sl, fp, ip
 8026bce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8026bd2:	b29b      	uxth	r3, r3
 8026bd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026bd8:	4572      	cmp	r2, lr
 8026bda:	f849 3b04 	str.w	r3, [r9], #4
 8026bde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8026be2:	d8e2      	bhi.n	8026baa <__multiply+0xb2>
 8026be4:	9b01      	ldr	r3, [sp, #4]
 8026be6:	f845 c003 	str.w	ip, [r5, r3]
 8026bea:	9b03      	ldr	r3, [sp, #12]
 8026bec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8026bf0:	3104      	adds	r1, #4
 8026bf2:	f1b9 0f00 	cmp.w	r9, #0
 8026bf6:	d021      	beq.n	8026c3c <__multiply+0x144>
 8026bf8:	682b      	ldr	r3, [r5, #0]
 8026bfa:	f104 0c14 	add.w	ip, r4, #20
 8026bfe:	46ae      	mov	lr, r5
 8026c00:	f04f 0a00 	mov.w	sl, #0
 8026c04:	f8bc b000 	ldrh.w	fp, [ip]
 8026c08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8026c0c:	fb09 770b 	mla	r7, r9, fp, r7
 8026c10:	4457      	add	r7, sl
 8026c12:	b29b      	uxth	r3, r3
 8026c14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026c18:	f84e 3b04 	str.w	r3, [lr], #4
 8026c1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026c20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026c24:	f8be 3000 	ldrh.w	r3, [lr]
 8026c28:	fb09 330a 	mla	r3, r9, sl, r3
 8026c2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8026c30:	4562      	cmp	r2, ip
 8026c32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026c36:	d8e5      	bhi.n	8026c04 <__multiply+0x10c>
 8026c38:	9f01      	ldr	r7, [sp, #4]
 8026c3a:	51eb      	str	r3, [r5, r7]
 8026c3c:	3504      	adds	r5, #4
 8026c3e:	e799      	b.n	8026b74 <__multiply+0x7c>
 8026c40:	3e01      	subs	r6, #1
 8026c42:	e79b      	b.n	8026b7c <__multiply+0x84>
 8026c44:	0802aa61 	.word	0x0802aa61
 8026c48:	0802aae9 	.word	0x0802aae9

08026c4c <__pow5mult>:
 8026c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026c50:	4615      	mov	r5, r2
 8026c52:	f012 0203 	ands.w	r2, r2, #3
 8026c56:	4607      	mov	r7, r0
 8026c58:	460e      	mov	r6, r1
 8026c5a:	d007      	beq.n	8026c6c <__pow5mult+0x20>
 8026c5c:	4c25      	ldr	r4, [pc, #148]	@ (8026cf4 <__pow5mult+0xa8>)
 8026c5e:	3a01      	subs	r2, #1
 8026c60:	2300      	movs	r3, #0
 8026c62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026c66:	f7ff fe55 	bl	8026914 <__multadd>
 8026c6a:	4606      	mov	r6, r0
 8026c6c:	10ad      	asrs	r5, r5, #2
 8026c6e:	d03d      	beq.n	8026cec <__pow5mult+0xa0>
 8026c70:	69fc      	ldr	r4, [r7, #28]
 8026c72:	b97c      	cbnz	r4, 8026c94 <__pow5mult+0x48>
 8026c74:	2010      	movs	r0, #16
 8026c76:	f7fd ffff 	bl	8024c78 <malloc>
 8026c7a:	4602      	mov	r2, r0
 8026c7c:	61f8      	str	r0, [r7, #28]
 8026c7e:	b928      	cbnz	r0, 8026c8c <__pow5mult+0x40>
 8026c80:	4b1d      	ldr	r3, [pc, #116]	@ (8026cf8 <__pow5mult+0xac>)
 8026c82:	481e      	ldr	r0, [pc, #120]	@ (8026cfc <__pow5mult+0xb0>)
 8026c84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8026c88:	f7fd ffd2 	bl	8024c30 <__assert_func>
 8026c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026c90:	6004      	str	r4, [r0, #0]
 8026c92:	60c4      	str	r4, [r0, #12]
 8026c94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8026c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026c9c:	b94c      	cbnz	r4, 8026cb2 <__pow5mult+0x66>
 8026c9e:	f240 2171 	movw	r1, #625	@ 0x271
 8026ca2:	4638      	mov	r0, r7
 8026ca4:	f7ff ff12 	bl	8026acc <__i2b>
 8026ca8:	2300      	movs	r3, #0
 8026caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8026cae:	4604      	mov	r4, r0
 8026cb0:	6003      	str	r3, [r0, #0]
 8026cb2:	f04f 0900 	mov.w	r9, #0
 8026cb6:	07eb      	lsls	r3, r5, #31
 8026cb8:	d50a      	bpl.n	8026cd0 <__pow5mult+0x84>
 8026cba:	4631      	mov	r1, r6
 8026cbc:	4622      	mov	r2, r4
 8026cbe:	4638      	mov	r0, r7
 8026cc0:	f7ff ff1a 	bl	8026af8 <__multiply>
 8026cc4:	4631      	mov	r1, r6
 8026cc6:	4680      	mov	r8, r0
 8026cc8:	4638      	mov	r0, r7
 8026cca:	f7ff fe01 	bl	80268d0 <_Bfree>
 8026cce:	4646      	mov	r6, r8
 8026cd0:	106d      	asrs	r5, r5, #1
 8026cd2:	d00b      	beq.n	8026cec <__pow5mult+0xa0>
 8026cd4:	6820      	ldr	r0, [r4, #0]
 8026cd6:	b938      	cbnz	r0, 8026ce8 <__pow5mult+0x9c>
 8026cd8:	4622      	mov	r2, r4
 8026cda:	4621      	mov	r1, r4
 8026cdc:	4638      	mov	r0, r7
 8026cde:	f7ff ff0b 	bl	8026af8 <__multiply>
 8026ce2:	6020      	str	r0, [r4, #0]
 8026ce4:	f8c0 9000 	str.w	r9, [r0]
 8026ce8:	4604      	mov	r4, r0
 8026cea:	e7e4      	b.n	8026cb6 <__pow5mult+0x6a>
 8026cec:	4630      	mov	r0, r6
 8026cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026cf2:	bf00      	nop
 8026cf4:	0802ab44 	.word	0x0802ab44
 8026cf8:	0802aad2 	.word	0x0802aad2
 8026cfc:	0802aae9 	.word	0x0802aae9

08026d00 <__lshift>:
 8026d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026d04:	460c      	mov	r4, r1
 8026d06:	6849      	ldr	r1, [r1, #4]
 8026d08:	6923      	ldr	r3, [r4, #16]
 8026d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026d0e:	68a3      	ldr	r3, [r4, #8]
 8026d10:	4607      	mov	r7, r0
 8026d12:	4691      	mov	r9, r2
 8026d14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026d18:	f108 0601 	add.w	r6, r8, #1
 8026d1c:	42b3      	cmp	r3, r6
 8026d1e:	db0b      	blt.n	8026d38 <__lshift+0x38>
 8026d20:	4638      	mov	r0, r7
 8026d22:	f7ff fd95 	bl	8026850 <_Balloc>
 8026d26:	4605      	mov	r5, r0
 8026d28:	b948      	cbnz	r0, 8026d3e <__lshift+0x3e>
 8026d2a:	4602      	mov	r2, r0
 8026d2c:	4b28      	ldr	r3, [pc, #160]	@ (8026dd0 <__lshift+0xd0>)
 8026d2e:	4829      	ldr	r0, [pc, #164]	@ (8026dd4 <__lshift+0xd4>)
 8026d30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8026d34:	f7fd ff7c 	bl	8024c30 <__assert_func>
 8026d38:	3101      	adds	r1, #1
 8026d3a:	005b      	lsls	r3, r3, #1
 8026d3c:	e7ee      	b.n	8026d1c <__lshift+0x1c>
 8026d3e:	2300      	movs	r3, #0
 8026d40:	f100 0114 	add.w	r1, r0, #20
 8026d44:	f100 0210 	add.w	r2, r0, #16
 8026d48:	4618      	mov	r0, r3
 8026d4a:	4553      	cmp	r3, sl
 8026d4c:	db33      	blt.n	8026db6 <__lshift+0xb6>
 8026d4e:	6920      	ldr	r0, [r4, #16]
 8026d50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026d54:	f104 0314 	add.w	r3, r4, #20
 8026d58:	f019 091f 	ands.w	r9, r9, #31
 8026d5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026d60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026d64:	d02b      	beq.n	8026dbe <__lshift+0xbe>
 8026d66:	f1c9 0e20 	rsb	lr, r9, #32
 8026d6a:	468a      	mov	sl, r1
 8026d6c:	2200      	movs	r2, #0
 8026d6e:	6818      	ldr	r0, [r3, #0]
 8026d70:	fa00 f009 	lsl.w	r0, r0, r9
 8026d74:	4310      	orrs	r0, r2
 8026d76:	f84a 0b04 	str.w	r0, [sl], #4
 8026d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8026d7e:	459c      	cmp	ip, r3
 8026d80:	fa22 f20e 	lsr.w	r2, r2, lr
 8026d84:	d8f3      	bhi.n	8026d6e <__lshift+0x6e>
 8026d86:	ebac 0304 	sub.w	r3, ip, r4
 8026d8a:	3b15      	subs	r3, #21
 8026d8c:	f023 0303 	bic.w	r3, r3, #3
 8026d90:	3304      	adds	r3, #4
 8026d92:	f104 0015 	add.w	r0, r4, #21
 8026d96:	4584      	cmp	ip, r0
 8026d98:	bf38      	it	cc
 8026d9a:	2304      	movcc	r3, #4
 8026d9c:	50ca      	str	r2, [r1, r3]
 8026d9e:	b10a      	cbz	r2, 8026da4 <__lshift+0xa4>
 8026da0:	f108 0602 	add.w	r6, r8, #2
 8026da4:	3e01      	subs	r6, #1
 8026da6:	4638      	mov	r0, r7
 8026da8:	612e      	str	r6, [r5, #16]
 8026daa:	4621      	mov	r1, r4
 8026dac:	f7ff fd90 	bl	80268d0 <_Bfree>
 8026db0:	4628      	mov	r0, r5
 8026db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8026dba:	3301      	adds	r3, #1
 8026dbc:	e7c5      	b.n	8026d4a <__lshift+0x4a>
 8026dbe:	3904      	subs	r1, #4
 8026dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8026dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8026dc8:	459c      	cmp	ip, r3
 8026dca:	d8f9      	bhi.n	8026dc0 <__lshift+0xc0>
 8026dcc:	e7ea      	b.n	8026da4 <__lshift+0xa4>
 8026dce:	bf00      	nop
 8026dd0:	0802aa61 	.word	0x0802aa61
 8026dd4:	0802aae9 	.word	0x0802aae9

08026dd8 <__mcmp>:
 8026dd8:	690a      	ldr	r2, [r1, #16]
 8026dda:	4603      	mov	r3, r0
 8026ddc:	6900      	ldr	r0, [r0, #16]
 8026dde:	1a80      	subs	r0, r0, r2
 8026de0:	b530      	push	{r4, r5, lr}
 8026de2:	d10e      	bne.n	8026e02 <__mcmp+0x2a>
 8026de4:	3314      	adds	r3, #20
 8026de6:	3114      	adds	r1, #20
 8026de8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026dec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026df0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026df4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026df8:	4295      	cmp	r5, r2
 8026dfa:	d003      	beq.n	8026e04 <__mcmp+0x2c>
 8026dfc:	d205      	bcs.n	8026e0a <__mcmp+0x32>
 8026dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8026e02:	bd30      	pop	{r4, r5, pc}
 8026e04:	42a3      	cmp	r3, r4
 8026e06:	d3f3      	bcc.n	8026df0 <__mcmp+0x18>
 8026e08:	e7fb      	b.n	8026e02 <__mcmp+0x2a>
 8026e0a:	2001      	movs	r0, #1
 8026e0c:	e7f9      	b.n	8026e02 <__mcmp+0x2a>
	...

08026e10 <__mdiff>:
 8026e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e14:	4689      	mov	r9, r1
 8026e16:	4606      	mov	r6, r0
 8026e18:	4611      	mov	r1, r2
 8026e1a:	4648      	mov	r0, r9
 8026e1c:	4614      	mov	r4, r2
 8026e1e:	f7ff ffdb 	bl	8026dd8 <__mcmp>
 8026e22:	1e05      	subs	r5, r0, #0
 8026e24:	d112      	bne.n	8026e4c <__mdiff+0x3c>
 8026e26:	4629      	mov	r1, r5
 8026e28:	4630      	mov	r0, r6
 8026e2a:	f7ff fd11 	bl	8026850 <_Balloc>
 8026e2e:	4602      	mov	r2, r0
 8026e30:	b928      	cbnz	r0, 8026e3e <__mdiff+0x2e>
 8026e32:	4b3f      	ldr	r3, [pc, #252]	@ (8026f30 <__mdiff+0x120>)
 8026e34:	f240 2137 	movw	r1, #567	@ 0x237
 8026e38:	483e      	ldr	r0, [pc, #248]	@ (8026f34 <__mdiff+0x124>)
 8026e3a:	f7fd fef9 	bl	8024c30 <__assert_func>
 8026e3e:	2301      	movs	r3, #1
 8026e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026e44:	4610      	mov	r0, r2
 8026e46:	b003      	add	sp, #12
 8026e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e4c:	bfbc      	itt	lt
 8026e4e:	464b      	movlt	r3, r9
 8026e50:	46a1      	movlt	r9, r4
 8026e52:	4630      	mov	r0, r6
 8026e54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026e58:	bfba      	itte	lt
 8026e5a:	461c      	movlt	r4, r3
 8026e5c:	2501      	movlt	r5, #1
 8026e5e:	2500      	movge	r5, #0
 8026e60:	f7ff fcf6 	bl	8026850 <_Balloc>
 8026e64:	4602      	mov	r2, r0
 8026e66:	b918      	cbnz	r0, 8026e70 <__mdiff+0x60>
 8026e68:	4b31      	ldr	r3, [pc, #196]	@ (8026f30 <__mdiff+0x120>)
 8026e6a:	f240 2145 	movw	r1, #581	@ 0x245
 8026e6e:	e7e3      	b.n	8026e38 <__mdiff+0x28>
 8026e70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8026e74:	6926      	ldr	r6, [r4, #16]
 8026e76:	60c5      	str	r5, [r0, #12]
 8026e78:	f109 0310 	add.w	r3, r9, #16
 8026e7c:	f109 0514 	add.w	r5, r9, #20
 8026e80:	f104 0e14 	add.w	lr, r4, #20
 8026e84:	f100 0b14 	add.w	fp, r0, #20
 8026e88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026e8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026e90:	9301      	str	r3, [sp, #4]
 8026e92:	46d9      	mov	r9, fp
 8026e94:	f04f 0c00 	mov.w	ip, #0
 8026e98:	9b01      	ldr	r3, [sp, #4]
 8026e9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026e9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8026ea2:	9301      	str	r3, [sp, #4]
 8026ea4:	fa1f f38a 	uxth.w	r3, sl
 8026ea8:	4619      	mov	r1, r3
 8026eaa:	b283      	uxth	r3, r0
 8026eac:	1acb      	subs	r3, r1, r3
 8026eae:	0c00      	lsrs	r0, r0, #16
 8026eb0:	4463      	add	r3, ip
 8026eb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8026eb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026eba:	b29b      	uxth	r3, r3
 8026ebc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026ec0:	4576      	cmp	r6, lr
 8026ec2:	f849 3b04 	str.w	r3, [r9], #4
 8026ec6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026eca:	d8e5      	bhi.n	8026e98 <__mdiff+0x88>
 8026ecc:	1b33      	subs	r3, r6, r4
 8026ece:	3b15      	subs	r3, #21
 8026ed0:	f023 0303 	bic.w	r3, r3, #3
 8026ed4:	3415      	adds	r4, #21
 8026ed6:	3304      	adds	r3, #4
 8026ed8:	42a6      	cmp	r6, r4
 8026eda:	bf38      	it	cc
 8026edc:	2304      	movcc	r3, #4
 8026ede:	441d      	add	r5, r3
 8026ee0:	445b      	add	r3, fp
 8026ee2:	461e      	mov	r6, r3
 8026ee4:	462c      	mov	r4, r5
 8026ee6:	4544      	cmp	r4, r8
 8026ee8:	d30e      	bcc.n	8026f08 <__mdiff+0xf8>
 8026eea:	f108 0103 	add.w	r1, r8, #3
 8026eee:	1b49      	subs	r1, r1, r5
 8026ef0:	f021 0103 	bic.w	r1, r1, #3
 8026ef4:	3d03      	subs	r5, #3
 8026ef6:	45a8      	cmp	r8, r5
 8026ef8:	bf38      	it	cc
 8026efa:	2100      	movcc	r1, #0
 8026efc:	440b      	add	r3, r1
 8026efe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026f02:	b191      	cbz	r1, 8026f2a <__mdiff+0x11a>
 8026f04:	6117      	str	r7, [r2, #16]
 8026f06:	e79d      	b.n	8026e44 <__mdiff+0x34>
 8026f08:	f854 1b04 	ldr.w	r1, [r4], #4
 8026f0c:	46e6      	mov	lr, ip
 8026f0e:	0c08      	lsrs	r0, r1, #16
 8026f10:	fa1c fc81 	uxtah	ip, ip, r1
 8026f14:	4471      	add	r1, lr
 8026f16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026f1a:	b289      	uxth	r1, r1
 8026f1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026f20:	f846 1b04 	str.w	r1, [r6], #4
 8026f24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026f28:	e7dd      	b.n	8026ee6 <__mdiff+0xd6>
 8026f2a:	3f01      	subs	r7, #1
 8026f2c:	e7e7      	b.n	8026efe <__mdiff+0xee>
 8026f2e:	bf00      	nop
 8026f30:	0802aa61 	.word	0x0802aa61
 8026f34:	0802aae9 	.word	0x0802aae9

08026f38 <__ulp>:
 8026f38:	b082      	sub	sp, #8
 8026f3a:	ed8d 0b00 	vstr	d0, [sp]
 8026f3e:	9a01      	ldr	r2, [sp, #4]
 8026f40:	4b0f      	ldr	r3, [pc, #60]	@ (8026f80 <__ulp+0x48>)
 8026f42:	4013      	ands	r3, r2
 8026f44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026f48:	2b00      	cmp	r3, #0
 8026f4a:	dc08      	bgt.n	8026f5e <__ulp+0x26>
 8026f4c:	425b      	negs	r3, r3
 8026f4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8026f52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026f56:	da04      	bge.n	8026f62 <__ulp+0x2a>
 8026f58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8026f5c:	4113      	asrs	r3, r2
 8026f5e:	2200      	movs	r2, #0
 8026f60:	e008      	b.n	8026f74 <__ulp+0x3c>
 8026f62:	f1a2 0314 	sub.w	r3, r2, #20
 8026f66:	2b1e      	cmp	r3, #30
 8026f68:	bfda      	itte	le
 8026f6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8026f6e:	40da      	lsrle	r2, r3
 8026f70:	2201      	movgt	r2, #1
 8026f72:	2300      	movs	r3, #0
 8026f74:	4619      	mov	r1, r3
 8026f76:	4610      	mov	r0, r2
 8026f78:	ec41 0b10 	vmov	d0, r0, r1
 8026f7c:	b002      	add	sp, #8
 8026f7e:	4770      	bx	lr
 8026f80:	7ff00000 	.word	0x7ff00000

08026f84 <__b2d>:
 8026f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026f88:	6906      	ldr	r6, [r0, #16]
 8026f8a:	f100 0814 	add.w	r8, r0, #20
 8026f8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8026f92:	1f37      	subs	r7, r6, #4
 8026f94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026f98:	4610      	mov	r0, r2
 8026f9a:	f7ff fd4b 	bl	8026a34 <__hi0bits>
 8026f9e:	f1c0 0320 	rsb	r3, r0, #32
 8026fa2:	280a      	cmp	r0, #10
 8026fa4:	600b      	str	r3, [r1, #0]
 8026fa6:	491b      	ldr	r1, [pc, #108]	@ (8027014 <__b2d+0x90>)
 8026fa8:	dc15      	bgt.n	8026fd6 <__b2d+0x52>
 8026faa:	f1c0 0c0b 	rsb	ip, r0, #11
 8026fae:	fa22 f30c 	lsr.w	r3, r2, ip
 8026fb2:	45b8      	cmp	r8, r7
 8026fb4:	ea43 0501 	orr.w	r5, r3, r1
 8026fb8:	bf34      	ite	cc
 8026fba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026fbe:	2300      	movcs	r3, #0
 8026fc0:	3015      	adds	r0, #21
 8026fc2:	fa02 f000 	lsl.w	r0, r2, r0
 8026fc6:	fa23 f30c 	lsr.w	r3, r3, ip
 8026fca:	4303      	orrs	r3, r0
 8026fcc:	461c      	mov	r4, r3
 8026fce:	ec45 4b10 	vmov	d0, r4, r5
 8026fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026fd6:	45b8      	cmp	r8, r7
 8026fd8:	bf3a      	itte	cc
 8026fda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026fde:	f1a6 0708 	subcc.w	r7, r6, #8
 8026fe2:	2300      	movcs	r3, #0
 8026fe4:	380b      	subs	r0, #11
 8026fe6:	d012      	beq.n	802700e <__b2d+0x8a>
 8026fe8:	f1c0 0120 	rsb	r1, r0, #32
 8026fec:	fa23 f401 	lsr.w	r4, r3, r1
 8026ff0:	4082      	lsls	r2, r0
 8026ff2:	4322      	orrs	r2, r4
 8026ff4:	4547      	cmp	r7, r8
 8026ff6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8026ffa:	bf8c      	ite	hi
 8026ffc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8027000:	2200      	movls	r2, #0
 8027002:	4083      	lsls	r3, r0
 8027004:	40ca      	lsrs	r2, r1
 8027006:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802700a:	4313      	orrs	r3, r2
 802700c:	e7de      	b.n	8026fcc <__b2d+0x48>
 802700e:	ea42 0501 	orr.w	r5, r2, r1
 8027012:	e7db      	b.n	8026fcc <__b2d+0x48>
 8027014:	3ff00000 	.word	0x3ff00000

08027018 <__d2b>:
 8027018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802701c:	460f      	mov	r7, r1
 802701e:	2101      	movs	r1, #1
 8027020:	ec59 8b10 	vmov	r8, r9, d0
 8027024:	4616      	mov	r6, r2
 8027026:	f7ff fc13 	bl	8026850 <_Balloc>
 802702a:	4604      	mov	r4, r0
 802702c:	b930      	cbnz	r0, 802703c <__d2b+0x24>
 802702e:	4602      	mov	r2, r0
 8027030:	4b23      	ldr	r3, [pc, #140]	@ (80270c0 <__d2b+0xa8>)
 8027032:	4824      	ldr	r0, [pc, #144]	@ (80270c4 <__d2b+0xac>)
 8027034:	f240 310f 	movw	r1, #783	@ 0x30f
 8027038:	f7fd fdfa 	bl	8024c30 <__assert_func>
 802703c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8027040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027044:	b10d      	cbz	r5, 802704a <__d2b+0x32>
 8027046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802704a:	9301      	str	r3, [sp, #4]
 802704c:	f1b8 0300 	subs.w	r3, r8, #0
 8027050:	d023      	beq.n	802709a <__d2b+0x82>
 8027052:	4668      	mov	r0, sp
 8027054:	9300      	str	r3, [sp, #0]
 8027056:	f7ff fd0c 	bl	8026a72 <__lo0bits>
 802705a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802705e:	b1d0      	cbz	r0, 8027096 <__d2b+0x7e>
 8027060:	f1c0 0320 	rsb	r3, r0, #32
 8027064:	fa02 f303 	lsl.w	r3, r2, r3
 8027068:	430b      	orrs	r3, r1
 802706a:	40c2      	lsrs	r2, r0
 802706c:	6163      	str	r3, [r4, #20]
 802706e:	9201      	str	r2, [sp, #4]
 8027070:	9b01      	ldr	r3, [sp, #4]
 8027072:	61a3      	str	r3, [r4, #24]
 8027074:	2b00      	cmp	r3, #0
 8027076:	bf0c      	ite	eq
 8027078:	2201      	moveq	r2, #1
 802707a:	2202      	movne	r2, #2
 802707c:	6122      	str	r2, [r4, #16]
 802707e:	b1a5      	cbz	r5, 80270aa <__d2b+0x92>
 8027080:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8027084:	4405      	add	r5, r0
 8027086:	603d      	str	r5, [r7, #0]
 8027088:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802708c:	6030      	str	r0, [r6, #0]
 802708e:	4620      	mov	r0, r4
 8027090:	b003      	add	sp, #12
 8027092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027096:	6161      	str	r1, [r4, #20]
 8027098:	e7ea      	b.n	8027070 <__d2b+0x58>
 802709a:	a801      	add	r0, sp, #4
 802709c:	f7ff fce9 	bl	8026a72 <__lo0bits>
 80270a0:	9b01      	ldr	r3, [sp, #4]
 80270a2:	6163      	str	r3, [r4, #20]
 80270a4:	3020      	adds	r0, #32
 80270a6:	2201      	movs	r2, #1
 80270a8:	e7e8      	b.n	802707c <__d2b+0x64>
 80270aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80270ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80270b2:	6038      	str	r0, [r7, #0]
 80270b4:	6918      	ldr	r0, [r3, #16]
 80270b6:	f7ff fcbd 	bl	8026a34 <__hi0bits>
 80270ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80270be:	e7e5      	b.n	802708c <__d2b+0x74>
 80270c0:	0802aa61 	.word	0x0802aa61
 80270c4:	0802aae9 	.word	0x0802aae9

080270c8 <__ratio>:
 80270c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270cc:	4688      	mov	r8, r1
 80270ce:	4669      	mov	r1, sp
 80270d0:	4681      	mov	r9, r0
 80270d2:	f7ff ff57 	bl	8026f84 <__b2d>
 80270d6:	a901      	add	r1, sp, #4
 80270d8:	4640      	mov	r0, r8
 80270da:	ec55 4b10 	vmov	r4, r5, d0
 80270de:	f7ff ff51 	bl	8026f84 <__b2d>
 80270e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80270e6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80270ea:	1ad2      	subs	r2, r2, r3
 80270ec:	e9dd 3100 	ldrd	r3, r1, [sp]
 80270f0:	1a5b      	subs	r3, r3, r1
 80270f2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80270f6:	ec57 6b10 	vmov	r6, r7, d0
 80270fa:	2b00      	cmp	r3, #0
 80270fc:	bfd6      	itet	le
 80270fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8027102:	462a      	movgt	r2, r5
 8027104:	463a      	movle	r2, r7
 8027106:	46ab      	mov	fp, r5
 8027108:	46a2      	mov	sl, r4
 802710a:	bfce      	itee	gt
 802710c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8027110:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8027114:	ee00 3a90 	vmovle	s1, r3
 8027118:	ec4b ab17 	vmov	d7, sl, fp
 802711c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8027120:	b003      	add	sp, #12
 8027122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027126 <__copybits>:
 8027126:	3901      	subs	r1, #1
 8027128:	b570      	push	{r4, r5, r6, lr}
 802712a:	1149      	asrs	r1, r1, #5
 802712c:	6914      	ldr	r4, [r2, #16]
 802712e:	3101      	adds	r1, #1
 8027130:	f102 0314 	add.w	r3, r2, #20
 8027134:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8027138:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802713c:	1f05      	subs	r5, r0, #4
 802713e:	42a3      	cmp	r3, r4
 8027140:	d30c      	bcc.n	802715c <__copybits+0x36>
 8027142:	1aa3      	subs	r3, r4, r2
 8027144:	3b11      	subs	r3, #17
 8027146:	f023 0303 	bic.w	r3, r3, #3
 802714a:	3211      	adds	r2, #17
 802714c:	42a2      	cmp	r2, r4
 802714e:	bf88      	it	hi
 8027150:	2300      	movhi	r3, #0
 8027152:	4418      	add	r0, r3
 8027154:	2300      	movs	r3, #0
 8027156:	4288      	cmp	r0, r1
 8027158:	d305      	bcc.n	8027166 <__copybits+0x40>
 802715a:	bd70      	pop	{r4, r5, r6, pc}
 802715c:	f853 6b04 	ldr.w	r6, [r3], #4
 8027160:	f845 6f04 	str.w	r6, [r5, #4]!
 8027164:	e7eb      	b.n	802713e <__copybits+0x18>
 8027166:	f840 3b04 	str.w	r3, [r0], #4
 802716a:	e7f4      	b.n	8027156 <__copybits+0x30>

0802716c <__any_on>:
 802716c:	f100 0214 	add.w	r2, r0, #20
 8027170:	6900      	ldr	r0, [r0, #16]
 8027172:	114b      	asrs	r3, r1, #5
 8027174:	4298      	cmp	r0, r3
 8027176:	b510      	push	{r4, lr}
 8027178:	db11      	blt.n	802719e <__any_on+0x32>
 802717a:	dd0a      	ble.n	8027192 <__any_on+0x26>
 802717c:	f011 011f 	ands.w	r1, r1, #31
 8027180:	d007      	beq.n	8027192 <__any_on+0x26>
 8027182:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8027186:	fa24 f001 	lsr.w	r0, r4, r1
 802718a:	fa00 f101 	lsl.w	r1, r0, r1
 802718e:	428c      	cmp	r4, r1
 8027190:	d10b      	bne.n	80271aa <__any_on+0x3e>
 8027192:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027196:	4293      	cmp	r3, r2
 8027198:	d803      	bhi.n	80271a2 <__any_on+0x36>
 802719a:	2000      	movs	r0, #0
 802719c:	bd10      	pop	{r4, pc}
 802719e:	4603      	mov	r3, r0
 80271a0:	e7f7      	b.n	8027192 <__any_on+0x26>
 80271a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80271a6:	2900      	cmp	r1, #0
 80271a8:	d0f5      	beq.n	8027196 <__any_on+0x2a>
 80271aa:	2001      	movs	r0, #1
 80271ac:	e7f6      	b.n	802719c <__any_on+0x30>

080271ae <__ascii_wctomb>:
 80271ae:	4603      	mov	r3, r0
 80271b0:	4608      	mov	r0, r1
 80271b2:	b141      	cbz	r1, 80271c6 <__ascii_wctomb+0x18>
 80271b4:	2aff      	cmp	r2, #255	@ 0xff
 80271b6:	d904      	bls.n	80271c2 <__ascii_wctomb+0x14>
 80271b8:	228a      	movs	r2, #138	@ 0x8a
 80271ba:	601a      	str	r2, [r3, #0]
 80271bc:	f04f 30ff 	mov.w	r0, #4294967295
 80271c0:	4770      	bx	lr
 80271c2:	700a      	strb	r2, [r1, #0]
 80271c4:	2001      	movs	r0, #1
 80271c6:	4770      	bx	lr

080271c8 <__ssputs_r>:
 80271c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80271cc:	688e      	ldr	r6, [r1, #8]
 80271ce:	461f      	mov	r7, r3
 80271d0:	42be      	cmp	r6, r7
 80271d2:	680b      	ldr	r3, [r1, #0]
 80271d4:	4682      	mov	sl, r0
 80271d6:	460c      	mov	r4, r1
 80271d8:	4690      	mov	r8, r2
 80271da:	d82d      	bhi.n	8027238 <__ssputs_r+0x70>
 80271dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80271e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80271e4:	d026      	beq.n	8027234 <__ssputs_r+0x6c>
 80271e6:	6965      	ldr	r5, [r4, #20]
 80271e8:	6909      	ldr	r1, [r1, #16]
 80271ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80271ee:	eba3 0901 	sub.w	r9, r3, r1
 80271f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80271f6:	1c7b      	adds	r3, r7, #1
 80271f8:	444b      	add	r3, r9
 80271fa:	106d      	asrs	r5, r5, #1
 80271fc:	429d      	cmp	r5, r3
 80271fe:	bf38      	it	cc
 8027200:	461d      	movcc	r5, r3
 8027202:	0553      	lsls	r3, r2, #21
 8027204:	d527      	bpl.n	8027256 <__ssputs_r+0x8e>
 8027206:	4629      	mov	r1, r5
 8027208:	f7fd fd68 	bl	8024cdc <_malloc_r>
 802720c:	4606      	mov	r6, r0
 802720e:	b360      	cbz	r0, 802726a <__ssputs_r+0xa2>
 8027210:	6921      	ldr	r1, [r4, #16]
 8027212:	464a      	mov	r2, r9
 8027214:	f7fe ff0d 	bl	8026032 <memcpy>
 8027218:	89a3      	ldrh	r3, [r4, #12]
 802721a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802721e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027222:	81a3      	strh	r3, [r4, #12]
 8027224:	6126      	str	r6, [r4, #16]
 8027226:	6165      	str	r5, [r4, #20]
 8027228:	444e      	add	r6, r9
 802722a:	eba5 0509 	sub.w	r5, r5, r9
 802722e:	6026      	str	r6, [r4, #0]
 8027230:	60a5      	str	r5, [r4, #8]
 8027232:	463e      	mov	r6, r7
 8027234:	42be      	cmp	r6, r7
 8027236:	d900      	bls.n	802723a <__ssputs_r+0x72>
 8027238:	463e      	mov	r6, r7
 802723a:	6820      	ldr	r0, [r4, #0]
 802723c:	4632      	mov	r2, r6
 802723e:	4641      	mov	r1, r8
 8027240:	f000 fd2a 	bl	8027c98 <memmove>
 8027244:	68a3      	ldr	r3, [r4, #8]
 8027246:	1b9b      	subs	r3, r3, r6
 8027248:	60a3      	str	r3, [r4, #8]
 802724a:	6823      	ldr	r3, [r4, #0]
 802724c:	4433      	add	r3, r6
 802724e:	6023      	str	r3, [r4, #0]
 8027250:	2000      	movs	r0, #0
 8027252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027256:	462a      	mov	r2, r5
 8027258:	f000 fd4c 	bl	8027cf4 <_realloc_r>
 802725c:	4606      	mov	r6, r0
 802725e:	2800      	cmp	r0, #0
 8027260:	d1e0      	bne.n	8027224 <__ssputs_r+0x5c>
 8027262:	6921      	ldr	r1, [r4, #16]
 8027264:	4650      	mov	r0, sl
 8027266:	f7fe ff5d 	bl	8026124 <_free_r>
 802726a:	230c      	movs	r3, #12
 802726c:	f8ca 3000 	str.w	r3, [sl]
 8027270:	89a3      	ldrh	r3, [r4, #12]
 8027272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027276:	81a3      	strh	r3, [r4, #12]
 8027278:	f04f 30ff 	mov.w	r0, #4294967295
 802727c:	e7e9      	b.n	8027252 <__ssputs_r+0x8a>
	...

08027280 <_svfiprintf_r>:
 8027280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027284:	4698      	mov	r8, r3
 8027286:	898b      	ldrh	r3, [r1, #12]
 8027288:	061b      	lsls	r3, r3, #24
 802728a:	b09d      	sub	sp, #116	@ 0x74
 802728c:	4607      	mov	r7, r0
 802728e:	460d      	mov	r5, r1
 8027290:	4614      	mov	r4, r2
 8027292:	d510      	bpl.n	80272b6 <_svfiprintf_r+0x36>
 8027294:	690b      	ldr	r3, [r1, #16]
 8027296:	b973      	cbnz	r3, 80272b6 <_svfiprintf_r+0x36>
 8027298:	2140      	movs	r1, #64	@ 0x40
 802729a:	f7fd fd1f 	bl	8024cdc <_malloc_r>
 802729e:	6028      	str	r0, [r5, #0]
 80272a0:	6128      	str	r0, [r5, #16]
 80272a2:	b930      	cbnz	r0, 80272b2 <_svfiprintf_r+0x32>
 80272a4:	230c      	movs	r3, #12
 80272a6:	603b      	str	r3, [r7, #0]
 80272a8:	f04f 30ff 	mov.w	r0, #4294967295
 80272ac:	b01d      	add	sp, #116	@ 0x74
 80272ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272b2:	2340      	movs	r3, #64	@ 0x40
 80272b4:	616b      	str	r3, [r5, #20]
 80272b6:	2300      	movs	r3, #0
 80272b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80272ba:	2320      	movs	r3, #32
 80272bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80272c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80272c4:	2330      	movs	r3, #48	@ 0x30
 80272c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8027464 <_svfiprintf_r+0x1e4>
 80272ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80272ce:	f04f 0901 	mov.w	r9, #1
 80272d2:	4623      	mov	r3, r4
 80272d4:	469a      	mov	sl, r3
 80272d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80272da:	b10a      	cbz	r2, 80272e0 <_svfiprintf_r+0x60>
 80272dc:	2a25      	cmp	r2, #37	@ 0x25
 80272de:	d1f9      	bne.n	80272d4 <_svfiprintf_r+0x54>
 80272e0:	ebba 0b04 	subs.w	fp, sl, r4
 80272e4:	d00b      	beq.n	80272fe <_svfiprintf_r+0x7e>
 80272e6:	465b      	mov	r3, fp
 80272e8:	4622      	mov	r2, r4
 80272ea:	4629      	mov	r1, r5
 80272ec:	4638      	mov	r0, r7
 80272ee:	f7ff ff6b 	bl	80271c8 <__ssputs_r>
 80272f2:	3001      	adds	r0, #1
 80272f4:	f000 80a7 	beq.w	8027446 <_svfiprintf_r+0x1c6>
 80272f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80272fa:	445a      	add	r2, fp
 80272fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80272fe:	f89a 3000 	ldrb.w	r3, [sl]
 8027302:	2b00      	cmp	r3, #0
 8027304:	f000 809f 	beq.w	8027446 <_svfiprintf_r+0x1c6>
 8027308:	2300      	movs	r3, #0
 802730a:	f04f 32ff 	mov.w	r2, #4294967295
 802730e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027312:	f10a 0a01 	add.w	sl, sl, #1
 8027316:	9304      	str	r3, [sp, #16]
 8027318:	9307      	str	r3, [sp, #28]
 802731a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802731e:	931a      	str	r3, [sp, #104]	@ 0x68
 8027320:	4654      	mov	r4, sl
 8027322:	2205      	movs	r2, #5
 8027324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027328:	484e      	ldr	r0, [pc, #312]	@ (8027464 <_svfiprintf_r+0x1e4>)
 802732a:	f7d9 f809 	bl	8000340 <memchr>
 802732e:	9a04      	ldr	r2, [sp, #16]
 8027330:	b9d8      	cbnz	r0, 802736a <_svfiprintf_r+0xea>
 8027332:	06d0      	lsls	r0, r2, #27
 8027334:	bf44      	itt	mi
 8027336:	2320      	movmi	r3, #32
 8027338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802733c:	0711      	lsls	r1, r2, #28
 802733e:	bf44      	itt	mi
 8027340:	232b      	movmi	r3, #43	@ 0x2b
 8027342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027346:	f89a 3000 	ldrb.w	r3, [sl]
 802734a:	2b2a      	cmp	r3, #42	@ 0x2a
 802734c:	d015      	beq.n	802737a <_svfiprintf_r+0xfa>
 802734e:	9a07      	ldr	r2, [sp, #28]
 8027350:	4654      	mov	r4, sl
 8027352:	2000      	movs	r0, #0
 8027354:	f04f 0c0a 	mov.w	ip, #10
 8027358:	4621      	mov	r1, r4
 802735a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802735e:	3b30      	subs	r3, #48	@ 0x30
 8027360:	2b09      	cmp	r3, #9
 8027362:	d94b      	bls.n	80273fc <_svfiprintf_r+0x17c>
 8027364:	b1b0      	cbz	r0, 8027394 <_svfiprintf_r+0x114>
 8027366:	9207      	str	r2, [sp, #28]
 8027368:	e014      	b.n	8027394 <_svfiprintf_r+0x114>
 802736a:	eba0 0308 	sub.w	r3, r0, r8
 802736e:	fa09 f303 	lsl.w	r3, r9, r3
 8027372:	4313      	orrs	r3, r2
 8027374:	9304      	str	r3, [sp, #16]
 8027376:	46a2      	mov	sl, r4
 8027378:	e7d2      	b.n	8027320 <_svfiprintf_r+0xa0>
 802737a:	9b03      	ldr	r3, [sp, #12]
 802737c:	1d19      	adds	r1, r3, #4
 802737e:	681b      	ldr	r3, [r3, #0]
 8027380:	9103      	str	r1, [sp, #12]
 8027382:	2b00      	cmp	r3, #0
 8027384:	bfbb      	ittet	lt
 8027386:	425b      	neglt	r3, r3
 8027388:	f042 0202 	orrlt.w	r2, r2, #2
 802738c:	9307      	strge	r3, [sp, #28]
 802738e:	9307      	strlt	r3, [sp, #28]
 8027390:	bfb8      	it	lt
 8027392:	9204      	strlt	r2, [sp, #16]
 8027394:	7823      	ldrb	r3, [r4, #0]
 8027396:	2b2e      	cmp	r3, #46	@ 0x2e
 8027398:	d10a      	bne.n	80273b0 <_svfiprintf_r+0x130>
 802739a:	7863      	ldrb	r3, [r4, #1]
 802739c:	2b2a      	cmp	r3, #42	@ 0x2a
 802739e:	d132      	bne.n	8027406 <_svfiprintf_r+0x186>
 80273a0:	9b03      	ldr	r3, [sp, #12]
 80273a2:	1d1a      	adds	r2, r3, #4
 80273a4:	681b      	ldr	r3, [r3, #0]
 80273a6:	9203      	str	r2, [sp, #12]
 80273a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80273ac:	3402      	adds	r4, #2
 80273ae:	9305      	str	r3, [sp, #20]
 80273b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8027474 <_svfiprintf_r+0x1f4>
 80273b4:	7821      	ldrb	r1, [r4, #0]
 80273b6:	2203      	movs	r2, #3
 80273b8:	4650      	mov	r0, sl
 80273ba:	f7d8 ffc1 	bl	8000340 <memchr>
 80273be:	b138      	cbz	r0, 80273d0 <_svfiprintf_r+0x150>
 80273c0:	9b04      	ldr	r3, [sp, #16]
 80273c2:	eba0 000a 	sub.w	r0, r0, sl
 80273c6:	2240      	movs	r2, #64	@ 0x40
 80273c8:	4082      	lsls	r2, r0
 80273ca:	4313      	orrs	r3, r2
 80273cc:	3401      	adds	r4, #1
 80273ce:	9304      	str	r3, [sp, #16]
 80273d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80273d4:	4824      	ldr	r0, [pc, #144]	@ (8027468 <_svfiprintf_r+0x1e8>)
 80273d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80273da:	2206      	movs	r2, #6
 80273dc:	f7d8 ffb0 	bl	8000340 <memchr>
 80273e0:	2800      	cmp	r0, #0
 80273e2:	d036      	beq.n	8027452 <_svfiprintf_r+0x1d2>
 80273e4:	4b21      	ldr	r3, [pc, #132]	@ (802746c <_svfiprintf_r+0x1ec>)
 80273e6:	bb1b      	cbnz	r3, 8027430 <_svfiprintf_r+0x1b0>
 80273e8:	9b03      	ldr	r3, [sp, #12]
 80273ea:	3307      	adds	r3, #7
 80273ec:	f023 0307 	bic.w	r3, r3, #7
 80273f0:	3308      	adds	r3, #8
 80273f2:	9303      	str	r3, [sp, #12]
 80273f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273f6:	4433      	add	r3, r6
 80273f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80273fa:	e76a      	b.n	80272d2 <_svfiprintf_r+0x52>
 80273fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8027400:	460c      	mov	r4, r1
 8027402:	2001      	movs	r0, #1
 8027404:	e7a8      	b.n	8027358 <_svfiprintf_r+0xd8>
 8027406:	2300      	movs	r3, #0
 8027408:	3401      	adds	r4, #1
 802740a:	9305      	str	r3, [sp, #20]
 802740c:	4619      	mov	r1, r3
 802740e:	f04f 0c0a 	mov.w	ip, #10
 8027412:	4620      	mov	r0, r4
 8027414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027418:	3a30      	subs	r2, #48	@ 0x30
 802741a:	2a09      	cmp	r2, #9
 802741c:	d903      	bls.n	8027426 <_svfiprintf_r+0x1a6>
 802741e:	2b00      	cmp	r3, #0
 8027420:	d0c6      	beq.n	80273b0 <_svfiprintf_r+0x130>
 8027422:	9105      	str	r1, [sp, #20]
 8027424:	e7c4      	b.n	80273b0 <_svfiprintf_r+0x130>
 8027426:	fb0c 2101 	mla	r1, ip, r1, r2
 802742a:	4604      	mov	r4, r0
 802742c:	2301      	movs	r3, #1
 802742e:	e7f0      	b.n	8027412 <_svfiprintf_r+0x192>
 8027430:	ab03      	add	r3, sp, #12
 8027432:	9300      	str	r3, [sp, #0]
 8027434:	462a      	mov	r2, r5
 8027436:	4b0e      	ldr	r3, [pc, #56]	@ (8027470 <_svfiprintf_r+0x1f0>)
 8027438:	a904      	add	r1, sp, #16
 802743a:	4638      	mov	r0, r7
 802743c:	f3af 8000 	nop.w
 8027440:	1c42      	adds	r2, r0, #1
 8027442:	4606      	mov	r6, r0
 8027444:	d1d6      	bne.n	80273f4 <_svfiprintf_r+0x174>
 8027446:	89ab      	ldrh	r3, [r5, #12]
 8027448:	065b      	lsls	r3, r3, #25
 802744a:	f53f af2d 	bmi.w	80272a8 <_svfiprintf_r+0x28>
 802744e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027450:	e72c      	b.n	80272ac <_svfiprintf_r+0x2c>
 8027452:	ab03      	add	r3, sp, #12
 8027454:	9300      	str	r3, [sp, #0]
 8027456:	462a      	mov	r2, r5
 8027458:	4b05      	ldr	r3, [pc, #20]	@ (8027470 <_svfiprintf_r+0x1f0>)
 802745a:	a904      	add	r1, sp, #16
 802745c:	4638      	mov	r0, r7
 802745e:	f000 f9bb 	bl	80277d8 <_printf_i>
 8027462:	e7ed      	b.n	8027440 <_svfiprintf_r+0x1c0>
 8027464:	0802ac44 	.word	0x0802ac44
 8027468:	0802ac4e 	.word	0x0802ac4e
 802746c:	00000000 	.word	0x00000000
 8027470:	080271c9 	.word	0x080271c9
 8027474:	0802ac4a 	.word	0x0802ac4a

08027478 <__sfputc_r>:
 8027478:	6893      	ldr	r3, [r2, #8]
 802747a:	3b01      	subs	r3, #1
 802747c:	2b00      	cmp	r3, #0
 802747e:	b410      	push	{r4}
 8027480:	6093      	str	r3, [r2, #8]
 8027482:	da08      	bge.n	8027496 <__sfputc_r+0x1e>
 8027484:	6994      	ldr	r4, [r2, #24]
 8027486:	42a3      	cmp	r3, r4
 8027488:	db01      	blt.n	802748e <__sfputc_r+0x16>
 802748a:	290a      	cmp	r1, #10
 802748c:	d103      	bne.n	8027496 <__sfputc_r+0x1e>
 802748e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027492:	f000 bb6d 	b.w	8027b70 <__swbuf_r>
 8027496:	6813      	ldr	r3, [r2, #0]
 8027498:	1c58      	adds	r0, r3, #1
 802749a:	6010      	str	r0, [r2, #0]
 802749c:	7019      	strb	r1, [r3, #0]
 802749e:	4608      	mov	r0, r1
 80274a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80274a4:	4770      	bx	lr

080274a6 <__sfputs_r>:
 80274a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80274a8:	4606      	mov	r6, r0
 80274aa:	460f      	mov	r7, r1
 80274ac:	4614      	mov	r4, r2
 80274ae:	18d5      	adds	r5, r2, r3
 80274b0:	42ac      	cmp	r4, r5
 80274b2:	d101      	bne.n	80274b8 <__sfputs_r+0x12>
 80274b4:	2000      	movs	r0, #0
 80274b6:	e007      	b.n	80274c8 <__sfputs_r+0x22>
 80274b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80274bc:	463a      	mov	r2, r7
 80274be:	4630      	mov	r0, r6
 80274c0:	f7ff ffda 	bl	8027478 <__sfputc_r>
 80274c4:	1c43      	adds	r3, r0, #1
 80274c6:	d1f3      	bne.n	80274b0 <__sfputs_r+0xa>
 80274c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080274cc <_vfiprintf_r>:
 80274cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274d0:	460d      	mov	r5, r1
 80274d2:	b09d      	sub	sp, #116	@ 0x74
 80274d4:	4614      	mov	r4, r2
 80274d6:	4698      	mov	r8, r3
 80274d8:	4606      	mov	r6, r0
 80274da:	b118      	cbz	r0, 80274e4 <_vfiprintf_r+0x18>
 80274dc:	6a03      	ldr	r3, [r0, #32]
 80274de:	b90b      	cbnz	r3, 80274e4 <_vfiprintf_r+0x18>
 80274e0:	f7fe fb9a 	bl	8025c18 <__sinit>
 80274e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80274e6:	07d9      	lsls	r1, r3, #31
 80274e8:	d405      	bmi.n	80274f6 <_vfiprintf_r+0x2a>
 80274ea:	89ab      	ldrh	r3, [r5, #12]
 80274ec:	059a      	lsls	r2, r3, #22
 80274ee:	d402      	bmi.n	80274f6 <_vfiprintf_r+0x2a>
 80274f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80274f2:	f7fe fd94 	bl	802601e <__retarget_lock_acquire_recursive>
 80274f6:	89ab      	ldrh	r3, [r5, #12]
 80274f8:	071b      	lsls	r3, r3, #28
 80274fa:	d501      	bpl.n	8027500 <_vfiprintf_r+0x34>
 80274fc:	692b      	ldr	r3, [r5, #16]
 80274fe:	b99b      	cbnz	r3, 8027528 <_vfiprintf_r+0x5c>
 8027500:	4629      	mov	r1, r5
 8027502:	4630      	mov	r0, r6
 8027504:	f000 fb72 	bl	8027bec <__swsetup_r>
 8027508:	b170      	cbz	r0, 8027528 <_vfiprintf_r+0x5c>
 802750a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802750c:	07dc      	lsls	r4, r3, #31
 802750e:	d504      	bpl.n	802751a <_vfiprintf_r+0x4e>
 8027510:	f04f 30ff 	mov.w	r0, #4294967295
 8027514:	b01d      	add	sp, #116	@ 0x74
 8027516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802751a:	89ab      	ldrh	r3, [r5, #12]
 802751c:	0598      	lsls	r0, r3, #22
 802751e:	d4f7      	bmi.n	8027510 <_vfiprintf_r+0x44>
 8027520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027522:	f7fe fd7d 	bl	8026020 <__retarget_lock_release_recursive>
 8027526:	e7f3      	b.n	8027510 <_vfiprintf_r+0x44>
 8027528:	2300      	movs	r3, #0
 802752a:	9309      	str	r3, [sp, #36]	@ 0x24
 802752c:	2320      	movs	r3, #32
 802752e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027532:	f8cd 800c 	str.w	r8, [sp, #12]
 8027536:	2330      	movs	r3, #48	@ 0x30
 8027538:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80276e8 <_vfiprintf_r+0x21c>
 802753c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027540:	f04f 0901 	mov.w	r9, #1
 8027544:	4623      	mov	r3, r4
 8027546:	469a      	mov	sl, r3
 8027548:	f813 2b01 	ldrb.w	r2, [r3], #1
 802754c:	b10a      	cbz	r2, 8027552 <_vfiprintf_r+0x86>
 802754e:	2a25      	cmp	r2, #37	@ 0x25
 8027550:	d1f9      	bne.n	8027546 <_vfiprintf_r+0x7a>
 8027552:	ebba 0b04 	subs.w	fp, sl, r4
 8027556:	d00b      	beq.n	8027570 <_vfiprintf_r+0xa4>
 8027558:	465b      	mov	r3, fp
 802755a:	4622      	mov	r2, r4
 802755c:	4629      	mov	r1, r5
 802755e:	4630      	mov	r0, r6
 8027560:	f7ff ffa1 	bl	80274a6 <__sfputs_r>
 8027564:	3001      	adds	r0, #1
 8027566:	f000 80a7 	beq.w	80276b8 <_vfiprintf_r+0x1ec>
 802756a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802756c:	445a      	add	r2, fp
 802756e:	9209      	str	r2, [sp, #36]	@ 0x24
 8027570:	f89a 3000 	ldrb.w	r3, [sl]
 8027574:	2b00      	cmp	r3, #0
 8027576:	f000 809f 	beq.w	80276b8 <_vfiprintf_r+0x1ec>
 802757a:	2300      	movs	r3, #0
 802757c:	f04f 32ff 	mov.w	r2, #4294967295
 8027580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027584:	f10a 0a01 	add.w	sl, sl, #1
 8027588:	9304      	str	r3, [sp, #16]
 802758a:	9307      	str	r3, [sp, #28]
 802758c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027590:	931a      	str	r3, [sp, #104]	@ 0x68
 8027592:	4654      	mov	r4, sl
 8027594:	2205      	movs	r2, #5
 8027596:	f814 1b01 	ldrb.w	r1, [r4], #1
 802759a:	4853      	ldr	r0, [pc, #332]	@ (80276e8 <_vfiprintf_r+0x21c>)
 802759c:	f7d8 fed0 	bl	8000340 <memchr>
 80275a0:	9a04      	ldr	r2, [sp, #16]
 80275a2:	b9d8      	cbnz	r0, 80275dc <_vfiprintf_r+0x110>
 80275a4:	06d1      	lsls	r1, r2, #27
 80275a6:	bf44      	itt	mi
 80275a8:	2320      	movmi	r3, #32
 80275aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80275ae:	0713      	lsls	r3, r2, #28
 80275b0:	bf44      	itt	mi
 80275b2:	232b      	movmi	r3, #43	@ 0x2b
 80275b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80275b8:	f89a 3000 	ldrb.w	r3, [sl]
 80275bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80275be:	d015      	beq.n	80275ec <_vfiprintf_r+0x120>
 80275c0:	9a07      	ldr	r2, [sp, #28]
 80275c2:	4654      	mov	r4, sl
 80275c4:	2000      	movs	r0, #0
 80275c6:	f04f 0c0a 	mov.w	ip, #10
 80275ca:	4621      	mov	r1, r4
 80275cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80275d0:	3b30      	subs	r3, #48	@ 0x30
 80275d2:	2b09      	cmp	r3, #9
 80275d4:	d94b      	bls.n	802766e <_vfiprintf_r+0x1a2>
 80275d6:	b1b0      	cbz	r0, 8027606 <_vfiprintf_r+0x13a>
 80275d8:	9207      	str	r2, [sp, #28]
 80275da:	e014      	b.n	8027606 <_vfiprintf_r+0x13a>
 80275dc:	eba0 0308 	sub.w	r3, r0, r8
 80275e0:	fa09 f303 	lsl.w	r3, r9, r3
 80275e4:	4313      	orrs	r3, r2
 80275e6:	9304      	str	r3, [sp, #16]
 80275e8:	46a2      	mov	sl, r4
 80275ea:	e7d2      	b.n	8027592 <_vfiprintf_r+0xc6>
 80275ec:	9b03      	ldr	r3, [sp, #12]
 80275ee:	1d19      	adds	r1, r3, #4
 80275f0:	681b      	ldr	r3, [r3, #0]
 80275f2:	9103      	str	r1, [sp, #12]
 80275f4:	2b00      	cmp	r3, #0
 80275f6:	bfbb      	ittet	lt
 80275f8:	425b      	neglt	r3, r3
 80275fa:	f042 0202 	orrlt.w	r2, r2, #2
 80275fe:	9307      	strge	r3, [sp, #28]
 8027600:	9307      	strlt	r3, [sp, #28]
 8027602:	bfb8      	it	lt
 8027604:	9204      	strlt	r2, [sp, #16]
 8027606:	7823      	ldrb	r3, [r4, #0]
 8027608:	2b2e      	cmp	r3, #46	@ 0x2e
 802760a:	d10a      	bne.n	8027622 <_vfiprintf_r+0x156>
 802760c:	7863      	ldrb	r3, [r4, #1]
 802760e:	2b2a      	cmp	r3, #42	@ 0x2a
 8027610:	d132      	bne.n	8027678 <_vfiprintf_r+0x1ac>
 8027612:	9b03      	ldr	r3, [sp, #12]
 8027614:	1d1a      	adds	r2, r3, #4
 8027616:	681b      	ldr	r3, [r3, #0]
 8027618:	9203      	str	r2, [sp, #12]
 802761a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802761e:	3402      	adds	r4, #2
 8027620:	9305      	str	r3, [sp, #20]
 8027622:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80276f8 <_vfiprintf_r+0x22c>
 8027626:	7821      	ldrb	r1, [r4, #0]
 8027628:	2203      	movs	r2, #3
 802762a:	4650      	mov	r0, sl
 802762c:	f7d8 fe88 	bl	8000340 <memchr>
 8027630:	b138      	cbz	r0, 8027642 <_vfiprintf_r+0x176>
 8027632:	9b04      	ldr	r3, [sp, #16]
 8027634:	eba0 000a 	sub.w	r0, r0, sl
 8027638:	2240      	movs	r2, #64	@ 0x40
 802763a:	4082      	lsls	r2, r0
 802763c:	4313      	orrs	r3, r2
 802763e:	3401      	adds	r4, #1
 8027640:	9304      	str	r3, [sp, #16]
 8027642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027646:	4829      	ldr	r0, [pc, #164]	@ (80276ec <_vfiprintf_r+0x220>)
 8027648:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802764c:	2206      	movs	r2, #6
 802764e:	f7d8 fe77 	bl	8000340 <memchr>
 8027652:	2800      	cmp	r0, #0
 8027654:	d03f      	beq.n	80276d6 <_vfiprintf_r+0x20a>
 8027656:	4b26      	ldr	r3, [pc, #152]	@ (80276f0 <_vfiprintf_r+0x224>)
 8027658:	bb1b      	cbnz	r3, 80276a2 <_vfiprintf_r+0x1d6>
 802765a:	9b03      	ldr	r3, [sp, #12]
 802765c:	3307      	adds	r3, #7
 802765e:	f023 0307 	bic.w	r3, r3, #7
 8027662:	3308      	adds	r3, #8
 8027664:	9303      	str	r3, [sp, #12]
 8027666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027668:	443b      	add	r3, r7
 802766a:	9309      	str	r3, [sp, #36]	@ 0x24
 802766c:	e76a      	b.n	8027544 <_vfiprintf_r+0x78>
 802766e:	fb0c 3202 	mla	r2, ip, r2, r3
 8027672:	460c      	mov	r4, r1
 8027674:	2001      	movs	r0, #1
 8027676:	e7a8      	b.n	80275ca <_vfiprintf_r+0xfe>
 8027678:	2300      	movs	r3, #0
 802767a:	3401      	adds	r4, #1
 802767c:	9305      	str	r3, [sp, #20]
 802767e:	4619      	mov	r1, r3
 8027680:	f04f 0c0a 	mov.w	ip, #10
 8027684:	4620      	mov	r0, r4
 8027686:	f810 2b01 	ldrb.w	r2, [r0], #1
 802768a:	3a30      	subs	r2, #48	@ 0x30
 802768c:	2a09      	cmp	r2, #9
 802768e:	d903      	bls.n	8027698 <_vfiprintf_r+0x1cc>
 8027690:	2b00      	cmp	r3, #0
 8027692:	d0c6      	beq.n	8027622 <_vfiprintf_r+0x156>
 8027694:	9105      	str	r1, [sp, #20]
 8027696:	e7c4      	b.n	8027622 <_vfiprintf_r+0x156>
 8027698:	fb0c 2101 	mla	r1, ip, r1, r2
 802769c:	4604      	mov	r4, r0
 802769e:	2301      	movs	r3, #1
 80276a0:	e7f0      	b.n	8027684 <_vfiprintf_r+0x1b8>
 80276a2:	ab03      	add	r3, sp, #12
 80276a4:	9300      	str	r3, [sp, #0]
 80276a6:	462a      	mov	r2, r5
 80276a8:	4b12      	ldr	r3, [pc, #72]	@ (80276f4 <_vfiprintf_r+0x228>)
 80276aa:	a904      	add	r1, sp, #16
 80276ac:	4630      	mov	r0, r6
 80276ae:	f3af 8000 	nop.w
 80276b2:	4607      	mov	r7, r0
 80276b4:	1c78      	adds	r0, r7, #1
 80276b6:	d1d6      	bne.n	8027666 <_vfiprintf_r+0x19a>
 80276b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80276ba:	07d9      	lsls	r1, r3, #31
 80276bc:	d405      	bmi.n	80276ca <_vfiprintf_r+0x1fe>
 80276be:	89ab      	ldrh	r3, [r5, #12]
 80276c0:	059a      	lsls	r2, r3, #22
 80276c2:	d402      	bmi.n	80276ca <_vfiprintf_r+0x1fe>
 80276c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80276c6:	f7fe fcab 	bl	8026020 <__retarget_lock_release_recursive>
 80276ca:	89ab      	ldrh	r3, [r5, #12]
 80276cc:	065b      	lsls	r3, r3, #25
 80276ce:	f53f af1f 	bmi.w	8027510 <_vfiprintf_r+0x44>
 80276d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80276d4:	e71e      	b.n	8027514 <_vfiprintf_r+0x48>
 80276d6:	ab03      	add	r3, sp, #12
 80276d8:	9300      	str	r3, [sp, #0]
 80276da:	462a      	mov	r2, r5
 80276dc:	4b05      	ldr	r3, [pc, #20]	@ (80276f4 <_vfiprintf_r+0x228>)
 80276de:	a904      	add	r1, sp, #16
 80276e0:	4630      	mov	r0, r6
 80276e2:	f000 f879 	bl	80277d8 <_printf_i>
 80276e6:	e7e4      	b.n	80276b2 <_vfiprintf_r+0x1e6>
 80276e8:	0802ac44 	.word	0x0802ac44
 80276ec:	0802ac4e 	.word	0x0802ac4e
 80276f0:	00000000 	.word	0x00000000
 80276f4:	080274a7 	.word	0x080274a7
 80276f8:	0802ac4a 	.word	0x0802ac4a

080276fc <_printf_common>:
 80276fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027700:	4616      	mov	r6, r2
 8027702:	4698      	mov	r8, r3
 8027704:	688a      	ldr	r2, [r1, #8]
 8027706:	690b      	ldr	r3, [r1, #16]
 8027708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802770c:	4293      	cmp	r3, r2
 802770e:	bfb8      	it	lt
 8027710:	4613      	movlt	r3, r2
 8027712:	6033      	str	r3, [r6, #0]
 8027714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8027718:	4607      	mov	r7, r0
 802771a:	460c      	mov	r4, r1
 802771c:	b10a      	cbz	r2, 8027722 <_printf_common+0x26>
 802771e:	3301      	adds	r3, #1
 8027720:	6033      	str	r3, [r6, #0]
 8027722:	6823      	ldr	r3, [r4, #0]
 8027724:	0699      	lsls	r1, r3, #26
 8027726:	bf42      	ittt	mi
 8027728:	6833      	ldrmi	r3, [r6, #0]
 802772a:	3302      	addmi	r3, #2
 802772c:	6033      	strmi	r3, [r6, #0]
 802772e:	6825      	ldr	r5, [r4, #0]
 8027730:	f015 0506 	ands.w	r5, r5, #6
 8027734:	d106      	bne.n	8027744 <_printf_common+0x48>
 8027736:	f104 0a19 	add.w	sl, r4, #25
 802773a:	68e3      	ldr	r3, [r4, #12]
 802773c:	6832      	ldr	r2, [r6, #0]
 802773e:	1a9b      	subs	r3, r3, r2
 8027740:	42ab      	cmp	r3, r5
 8027742:	dc26      	bgt.n	8027792 <_printf_common+0x96>
 8027744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8027748:	6822      	ldr	r2, [r4, #0]
 802774a:	3b00      	subs	r3, #0
 802774c:	bf18      	it	ne
 802774e:	2301      	movne	r3, #1
 8027750:	0692      	lsls	r2, r2, #26
 8027752:	d42b      	bmi.n	80277ac <_printf_common+0xb0>
 8027754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8027758:	4641      	mov	r1, r8
 802775a:	4638      	mov	r0, r7
 802775c:	47c8      	blx	r9
 802775e:	3001      	adds	r0, #1
 8027760:	d01e      	beq.n	80277a0 <_printf_common+0xa4>
 8027762:	6823      	ldr	r3, [r4, #0]
 8027764:	6922      	ldr	r2, [r4, #16]
 8027766:	f003 0306 	and.w	r3, r3, #6
 802776a:	2b04      	cmp	r3, #4
 802776c:	bf02      	ittt	eq
 802776e:	68e5      	ldreq	r5, [r4, #12]
 8027770:	6833      	ldreq	r3, [r6, #0]
 8027772:	1aed      	subeq	r5, r5, r3
 8027774:	68a3      	ldr	r3, [r4, #8]
 8027776:	bf0c      	ite	eq
 8027778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802777c:	2500      	movne	r5, #0
 802777e:	4293      	cmp	r3, r2
 8027780:	bfc4      	itt	gt
 8027782:	1a9b      	subgt	r3, r3, r2
 8027784:	18ed      	addgt	r5, r5, r3
 8027786:	2600      	movs	r6, #0
 8027788:	341a      	adds	r4, #26
 802778a:	42b5      	cmp	r5, r6
 802778c:	d11a      	bne.n	80277c4 <_printf_common+0xc8>
 802778e:	2000      	movs	r0, #0
 8027790:	e008      	b.n	80277a4 <_printf_common+0xa8>
 8027792:	2301      	movs	r3, #1
 8027794:	4652      	mov	r2, sl
 8027796:	4641      	mov	r1, r8
 8027798:	4638      	mov	r0, r7
 802779a:	47c8      	blx	r9
 802779c:	3001      	adds	r0, #1
 802779e:	d103      	bne.n	80277a8 <_printf_common+0xac>
 80277a0:	f04f 30ff 	mov.w	r0, #4294967295
 80277a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80277a8:	3501      	adds	r5, #1
 80277aa:	e7c6      	b.n	802773a <_printf_common+0x3e>
 80277ac:	18e1      	adds	r1, r4, r3
 80277ae:	1c5a      	adds	r2, r3, #1
 80277b0:	2030      	movs	r0, #48	@ 0x30
 80277b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80277b6:	4422      	add	r2, r4
 80277b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80277bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80277c0:	3302      	adds	r3, #2
 80277c2:	e7c7      	b.n	8027754 <_printf_common+0x58>
 80277c4:	2301      	movs	r3, #1
 80277c6:	4622      	mov	r2, r4
 80277c8:	4641      	mov	r1, r8
 80277ca:	4638      	mov	r0, r7
 80277cc:	47c8      	blx	r9
 80277ce:	3001      	adds	r0, #1
 80277d0:	d0e6      	beq.n	80277a0 <_printf_common+0xa4>
 80277d2:	3601      	adds	r6, #1
 80277d4:	e7d9      	b.n	802778a <_printf_common+0x8e>
	...

080277d8 <_printf_i>:
 80277d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80277dc:	7e0f      	ldrb	r7, [r1, #24]
 80277de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80277e0:	2f78      	cmp	r7, #120	@ 0x78
 80277e2:	4691      	mov	r9, r2
 80277e4:	4680      	mov	r8, r0
 80277e6:	460c      	mov	r4, r1
 80277e8:	469a      	mov	sl, r3
 80277ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80277ee:	d807      	bhi.n	8027800 <_printf_i+0x28>
 80277f0:	2f62      	cmp	r7, #98	@ 0x62
 80277f2:	d80a      	bhi.n	802780a <_printf_i+0x32>
 80277f4:	2f00      	cmp	r7, #0
 80277f6:	f000 80d2 	beq.w	802799e <_printf_i+0x1c6>
 80277fa:	2f58      	cmp	r7, #88	@ 0x58
 80277fc:	f000 80b9 	beq.w	8027972 <_printf_i+0x19a>
 8027800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8027804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8027808:	e03a      	b.n	8027880 <_printf_i+0xa8>
 802780a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802780e:	2b15      	cmp	r3, #21
 8027810:	d8f6      	bhi.n	8027800 <_printf_i+0x28>
 8027812:	a101      	add	r1, pc, #4	@ (adr r1, 8027818 <_printf_i+0x40>)
 8027814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027818:	08027871 	.word	0x08027871
 802781c:	08027885 	.word	0x08027885
 8027820:	08027801 	.word	0x08027801
 8027824:	08027801 	.word	0x08027801
 8027828:	08027801 	.word	0x08027801
 802782c:	08027801 	.word	0x08027801
 8027830:	08027885 	.word	0x08027885
 8027834:	08027801 	.word	0x08027801
 8027838:	08027801 	.word	0x08027801
 802783c:	08027801 	.word	0x08027801
 8027840:	08027801 	.word	0x08027801
 8027844:	08027985 	.word	0x08027985
 8027848:	080278af 	.word	0x080278af
 802784c:	0802793f 	.word	0x0802793f
 8027850:	08027801 	.word	0x08027801
 8027854:	08027801 	.word	0x08027801
 8027858:	080279a7 	.word	0x080279a7
 802785c:	08027801 	.word	0x08027801
 8027860:	080278af 	.word	0x080278af
 8027864:	08027801 	.word	0x08027801
 8027868:	08027801 	.word	0x08027801
 802786c:	08027947 	.word	0x08027947
 8027870:	6833      	ldr	r3, [r6, #0]
 8027872:	1d1a      	adds	r2, r3, #4
 8027874:	681b      	ldr	r3, [r3, #0]
 8027876:	6032      	str	r2, [r6, #0]
 8027878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802787c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8027880:	2301      	movs	r3, #1
 8027882:	e09d      	b.n	80279c0 <_printf_i+0x1e8>
 8027884:	6833      	ldr	r3, [r6, #0]
 8027886:	6820      	ldr	r0, [r4, #0]
 8027888:	1d19      	adds	r1, r3, #4
 802788a:	6031      	str	r1, [r6, #0]
 802788c:	0606      	lsls	r6, r0, #24
 802788e:	d501      	bpl.n	8027894 <_printf_i+0xbc>
 8027890:	681d      	ldr	r5, [r3, #0]
 8027892:	e003      	b.n	802789c <_printf_i+0xc4>
 8027894:	0645      	lsls	r5, r0, #25
 8027896:	d5fb      	bpl.n	8027890 <_printf_i+0xb8>
 8027898:	f9b3 5000 	ldrsh.w	r5, [r3]
 802789c:	2d00      	cmp	r5, #0
 802789e:	da03      	bge.n	80278a8 <_printf_i+0xd0>
 80278a0:	232d      	movs	r3, #45	@ 0x2d
 80278a2:	426d      	negs	r5, r5
 80278a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80278a8:	4859      	ldr	r0, [pc, #356]	@ (8027a10 <_printf_i+0x238>)
 80278aa:	230a      	movs	r3, #10
 80278ac:	e011      	b.n	80278d2 <_printf_i+0xfa>
 80278ae:	6821      	ldr	r1, [r4, #0]
 80278b0:	6833      	ldr	r3, [r6, #0]
 80278b2:	0608      	lsls	r0, r1, #24
 80278b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80278b8:	d402      	bmi.n	80278c0 <_printf_i+0xe8>
 80278ba:	0649      	lsls	r1, r1, #25
 80278bc:	bf48      	it	mi
 80278be:	b2ad      	uxthmi	r5, r5
 80278c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80278c2:	4853      	ldr	r0, [pc, #332]	@ (8027a10 <_printf_i+0x238>)
 80278c4:	6033      	str	r3, [r6, #0]
 80278c6:	bf14      	ite	ne
 80278c8:	230a      	movne	r3, #10
 80278ca:	2308      	moveq	r3, #8
 80278cc:	2100      	movs	r1, #0
 80278ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80278d2:	6866      	ldr	r6, [r4, #4]
 80278d4:	60a6      	str	r6, [r4, #8]
 80278d6:	2e00      	cmp	r6, #0
 80278d8:	bfa2      	ittt	ge
 80278da:	6821      	ldrge	r1, [r4, #0]
 80278dc:	f021 0104 	bicge.w	r1, r1, #4
 80278e0:	6021      	strge	r1, [r4, #0]
 80278e2:	b90d      	cbnz	r5, 80278e8 <_printf_i+0x110>
 80278e4:	2e00      	cmp	r6, #0
 80278e6:	d04b      	beq.n	8027980 <_printf_i+0x1a8>
 80278e8:	4616      	mov	r6, r2
 80278ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80278ee:	fb03 5711 	mls	r7, r3, r1, r5
 80278f2:	5dc7      	ldrb	r7, [r0, r7]
 80278f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80278f8:	462f      	mov	r7, r5
 80278fa:	42bb      	cmp	r3, r7
 80278fc:	460d      	mov	r5, r1
 80278fe:	d9f4      	bls.n	80278ea <_printf_i+0x112>
 8027900:	2b08      	cmp	r3, #8
 8027902:	d10b      	bne.n	802791c <_printf_i+0x144>
 8027904:	6823      	ldr	r3, [r4, #0]
 8027906:	07df      	lsls	r7, r3, #31
 8027908:	d508      	bpl.n	802791c <_printf_i+0x144>
 802790a:	6923      	ldr	r3, [r4, #16]
 802790c:	6861      	ldr	r1, [r4, #4]
 802790e:	4299      	cmp	r1, r3
 8027910:	bfde      	ittt	le
 8027912:	2330      	movle	r3, #48	@ 0x30
 8027914:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027918:	f106 36ff 	addle.w	r6, r6, #4294967295
 802791c:	1b92      	subs	r2, r2, r6
 802791e:	6122      	str	r2, [r4, #16]
 8027920:	f8cd a000 	str.w	sl, [sp]
 8027924:	464b      	mov	r3, r9
 8027926:	aa03      	add	r2, sp, #12
 8027928:	4621      	mov	r1, r4
 802792a:	4640      	mov	r0, r8
 802792c:	f7ff fee6 	bl	80276fc <_printf_common>
 8027930:	3001      	adds	r0, #1
 8027932:	d14a      	bne.n	80279ca <_printf_i+0x1f2>
 8027934:	f04f 30ff 	mov.w	r0, #4294967295
 8027938:	b004      	add	sp, #16
 802793a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802793e:	6823      	ldr	r3, [r4, #0]
 8027940:	f043 0320 	orr.w	r3, r3, #32
 8027944:	6023      	str	r3, [r4, #0]
 8027946:	4833      	ldr	r0, [pc, #204]	@ (8027a14 <_printf_i+0x23c>)
 8027948:	2778      	movs	r7, #120	@ 0x78
 802794a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802794e:	6823      	ldr	r3, [r4, #0]
 8027950:	6831      	ldr	r1, [r6, #0]
 8027952:	061f      	lsls	r7, r3, #24
 8027954:	f851 5b04 	ldr.w	r5, [r1], #4
 8027958:	d402      	bmi.n	8027960 <_printf_i+0x188>
 802795a:	065f      	lsls	r7, r3, #25
 802795c:	bf48      	it	mi
 802795e:	b2ad      	uxthmi	r5, r5
 8027960:	6031      	str	r1, [r6, #0]
 8027962:	07d9      	lsls	r1, r3, #31
 8027964:	bf44      	itt	mi
 8027966:	f043 0320 	orrmi.w	r3, r3, #32
 802796a:	6023      	strmi	r3, [r4, #0]
 802796c:	b11d      	cbz	r5, 8027976 <_printf_i+0x19e>
 802796e:	2310      	movs	r3, #16
 8027970:	e7ac      	b.n	80278cc <_printf_i+0xf4>
 8027972:	4827      	ldr	r0, [pc, #156]	@ (8027a10 <_printf_i+0x238>)
 8027974:	e7e9      	b.n	802794a <_printf_i+0x172>
 8027976:	6823      	ldr	r3, [r4, #0]
 8027978:	f023 0320 	bic.w	r3, r3, #32
 802797c:	6023      	str	r3, [r4, #0]
 802797e:	e7f6      	b.n	802796e <_printf_i+0x196>
 8027980:	4616      	mov	r6, r2
 8027982:	e7bd      	b.n	8027900 <_printf_i+0x128>
 8027984:	6833      	ldr	r3, [r6, #0]
 8027986:	6825      	ldr	r5, [r4, #0]
 8027988:	6961      	ldr	r1, [r4, #20]
 802798a:	1d18      	adds	r0, r3, #4
 802798c:	6030      	str	r0, [r6, #0]
 802798e:	062e      	lsls	r6, r5, #24
 8027990:	681b      	ldr	r3, [r3, #0]
 8027992:	d501      	bpl.n	8027998 <_printf_i+0x1c0>
 8027994:	6019      	str	r1, [r3, #0]
 8027996:	e002      	b.n	802799e <_printf_i+0x1c6>
 8027998:	0668      	lsls	r0, r5, #25
 802799a:	d5fb      	bpl.n	8027994 <_printf_i+0x1bc>
 802799c:	8019      	strh	r1, [r3, #0]
 802799e:	2300      	movs	r3, #0
 80279a0:	6123      	str	r3, [r4, #16]
 80279a2:	4616      	mov	r6, r2
 80279a4:	e7bc      	b.n	8027920 <_printf_i+0x148>
 80279a6:	6833      	ldr	r3, [r6, #0]
 80279a8:	1d1a      	adds	r2, r3, #4
 80279aa:	6032      	str	r2, [r6, #0]
 80279ac:	681e      	ldr	r6, [r3, #0]
 80279ae:	6862      	ldr	r2, [r4, #4]
 80279b0:	2100      	movs	r1, #0
 80279b2:	4630      	mov	r0, r6
 80279b4:	f7d8 fcc4 	bl	8000340 <memchr>
 80279b8:	b108      	cbz	r0, 80279be <_printf_i+0x1e6>
 80279ba:	1b80      	subs	r0, r0, r6
 80279bc:	6060      	str	r0, [r4, #4]
 80279be:	6863      	ldr	r3, [r4, #4]
 80279c0:	6123      	str	r3, [r4, #16]
 80279c2:	2300      	movs	r3, #0
 80279c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80279c8:	e7aa      	b.n	8027920 <_printf_i+0x148>
 80279ca:	6923      	ldr	r3, [r4, #16]
 80279cc:	4632      	mov	r2, r6
 80279ce:	4649      	mov	r1, r9
 80279d0:	4640      	mov	r0, r8
 80279d2:	47d0      	blx	sl
 80279d4:	3001      	adds	r0, #1
 80279d6:	d0ad      	beq.n	8027934 <_printf_i+0x15c>
 80279d8:	6823      	ldr	r3, [r4, #0]
 80279da:	079b      	lsls	r3, r3, #30
 80279dc:	d413      	bmi.n	8027a06 <_printf_i+0x22e>
 80279de:	68e0      	ldr	r0, [r4, #12]
 80279e0:	9b03      	ldr	r3, [sp, #12]
 80279e2:	4298      	cmp	r0, r3
 80279e4:	bfb8      	it	lt
 80279e6:	4618      	movlt	r0, r3
 80279e8:	e7a6      	b.n	8027938 <_printf_i+0x160>
 80279ea:	2301      	movs	r3, #1
 80279ec:	4632      	mov	r2, r6
 80279ee:	4649      	mov	r1, r9
 80279f0:	4640      	mov	r0, r8
 80279f2:	47d0      	blx	sl
 80279f4:	3001      	adds	r0, #1
 80279f6:	d09d      	beq.n	8027934 <_printf_i+0x15c>
 80279f8:	3501      	adds	r5, #1
 80279fa:	68e3      	ldr	r3, [r4, #12]
 80279fc:	9903      	ldr	r1, [sp, #12]
 80279fe:	1a5b      	subs	r3, r3, r1
 8027a00:	42ab      	cmp	r3, r5
 8027a02:	dcf2      	bgt.n	80279ea <_printf_i+0x212>
 8027a04:	e7eb      	b.n	80279de <_printf_i+0x206>
 8027a06:	2500      	movs	r5, #0
 8027a08:	f104 0619 	add.w	r6, r4, #25
 8027a0c:	e7f5      	b.n	80279fa <_printf_i+0x222>
 8027a0e:	bf00      	nop
 8027a10:	0802ac55 	.word	0x0802ac55
 8027a14:	0802ac66 	.word	0x0802ac66

08027a18 <__sflush_r>:
 8027a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027a20:	0716      	lsls	r6, r2, #28
 8027a22:	4605      	mov	r5, r0
 8027a24:	460c      	mov	r4, r1
 8027a26:	d454      	bmi.n	8027ad2 <__sflush_r+0xba>
 8027a28:	684b      	ldr	r3, [r1, #4]
 8027a2a:	2b00      	cmp	r3, #0
 8027a2c:	dc02      	bgt.n	8027a34 <__sflush_r+0x1c>
 8027a2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8027a30:	2b00      	cmp	r3, #0
 8027a32:	dd48      	ble.n	8027ac6 <__sflush_r+0xae>
 8027a34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8027a36:	2e00      	cmp	r6, #0
 8027a38:	d045      	beq.n	8027ac6 <__sflush_r+0xae>
 8027a3a:	2300      	movs	r3, #0
 8027a3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8027a40:	682f      	ldr	r7, [r5, #0]
 8027a42:	6a21      	ldr	r1, [r4, #32]
 8027a44:	602b      	str	r3, [r5, #0]
 8027a46:	d030      	beq.n	8027aaa <__sflush_r+0x92>
 8027a48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027a4a:	89a3      	ldrh	r3, [r4, #12]
 8027a4c:	0759      	lsls	r1, r3, #29
 8027a4e:	d505      	bpl.n	8027a5c <__sflush_r+0x44>
 8027a50:	6863      	ldr	r3, [r4, #4]
 8027a52:	1ad2      	subs	r2, r2, r3
 8027a54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027a56:	b10b      	cbz	r3, 8027a5c <__sflush_r+0x44>
 8027a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027a5a:	1ad2      	subs	r2, r2, r3
 8027a5c:	2300      	movs	r3, #0
 8027a5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8027a60:	6a21      	ldr	r1, [r4, #32]
 8027a62:	4628      	mov	r0, r5
 8027a64:	47b0      	blx	r6
 8027a66:	1c43      	adds	r3, r0, #1
 8027a68:	89a3      	ldrh	r3, [r4, #12]
 8027a6a:	d106      	bne.n	8027a7a <__sflush_r+0x62>
 8027a6c:	6829      	ldr	r1, [r5, #0]
 8027a6e:	291d      	cmp	r1, #29
 8027a70:	d82b      	bhi.n	8027aca <__sflush_r+0xb2>
 8027a72:	4a2a      	ldr	r2, [pc, #168]	@ (8027b1c <__sflush_r+0x104>)
 8027a74:	410a      	asrs	r2, r1
 8027a76:	07d6      	lsls	r6, r2, #31
 8027a78:	d427      	bmi.n	8027aca <__sflush_r+0xb2>
 8027a7a:	2200      	movs	r2, #0
 8027a7c:	6062      	str	r2, [r4, #4]
 8027a7e:	04d9      	lsls	r1, r3, #19
 8027a80:	6922      	ldr	r2, [r4, #16]
 8027a82:	6022      	str	r2, [r4, #0]
 8027a84:	d504      	bpl.n	8027a90 <__sflush_r+0x78>
 8027a86:	1c42      	adds	r2, r0, #1
 8027a88:	d101      	bne.n	8027a8e <__sflush_r+0x76>
 8027a8a:	682b      	ldr	r3, [r5, #0]
 8027a8c:	b903      	cbnz	r3, 8027a90 <__sflush_r+0x78>
 8027a8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8027a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a92:	602f      	str	r7, [r5, #0]
 8027a94:	b1b9      	cbz	r1, 8027ac6 <__sflush_r+0xae>
 8027a96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027a9a:	4299      	cmp	r1, r3
 8027a9c:	d002      	beq.n	8027aa4 <__sflush_r+0x8c>
 8027a9e:	4628      	mov	r0, r5
 8027aa0:	f7fe fb40 	bl	8026124 <_free_r>
 8027aa4:	2300      	movs	r3, #0
 8027aa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8027aa8:	e00d      	b.n	8027ac6 <__sflush_r+0xae>
 8027aaa:	2301      	movs	r3, #1
 8027aac:	4628      	mov	r0, r5
 8027aae:	47b0      	blx	r6
 8027ab0:	4602      	mov	r2, r0
 8027ab2:	1c50      	adds	r0, r2, #1
 8027ab4:	d1c9      	bne.n	8027a4a <__sflush_r+0x32>
 8027ab6:	682b      	ldr	r3, [r5, #0]
 8027ab8:	2b00      	cmp	r3, #0
 8027aba:	d0c6      	beq.n	8027a4a <__sflush_r+0x32>
 8027abc:	2b1d      	cmp	r3, #29
 8027abe:	d001      	beq.n	8027ac4 <__sflush_r+0xac>
 8027ac0:	2b16      	cmp	r3, #22
 8027ac2:	d11e      	bne.n	8027b02 <__sflush_r+0xea>
 8027ac4:	602f      	str	r7, [r5, #0]
 8027ac6:	2000      	movs	r0, #0
 8027ac8:	e022      	b.n	8027b10 <__sflush_r+0xf8>
 8027aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027ace:	b21b      	sxth	r3, r3
 8027ad0:	e01b      	b.n	8027b0a <__sflush_r+0xf2>
 8027ad2:	690f      	ldr	r7, [r1, #16]
 8027ad4:	2f00      	cmp	r7, #0
 8027ad6:	d0f6      	beq.n	8027ac6 <__sflush_r+0xae>
 8027ad8:	0793      	lsls	r3, r2, #30
 8027ada:	680e      	ldr	r6, [r1, #0]
 8027adc:	bf08      	it	eq
 8027ade:	694b      	ldreq	r3, [r1, #20]
 8027ae0:	600f      	str	r7, [r1, #0]
 8027ae2:	bf18      	it	ne
 8027ae4:	2300      	movne	r3, #0
 8027ae6:	eba6 0807 	sub.w	r8, r6, r7
 8027aea:	608b      	str	r3, [r1, #8]
 8027aec:	f1b8 0f00 	cmp.w	r8, #0
 8027af0:	dde9      	ble.n	8027ac6 <__sflush_r+0xae>
 8027af2:	6a21      	ldr	r1, [r4, #32]
 8027af4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8027af6:	4643      	mov	r3, r8
 8027af8:	463a      	mov	r2, r7
 8027afa:	4628      	mov	r0, r5
 8027afc:	47b0      	blx	r6
 8027afe:	2800      	cmp	r0, #0
 8027b00:	dc08      	bgt.n	8027b14 <__sflush_r+0xfc>
 8027b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027b0a:	81a3      	strh	r3, [r4, #12]
 8027b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8027b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b14:	4407      	add	r7, r0
 8027b16:	eba8 0800 	sub.w	r8, r8, r0
 8027b1a:	e7e7      	b.n	8027aec <__sflush_r+0xd4>
 8027b1c:	dfbffffe 	.word	0xdfbffffe

08027b20 <_fflush_r>:
 8027b20:	b538      	push	{r3, r4, r5, lr}
 8027b22:	690b      	ldr	r3, [r1, #16]
 8027b24:	4605      	mov	r5, r0
 8027b26:	460c      	mov	r4, r1
 8027b28:	b913      	cbnz	r3, 8027b30 <_fflush_r+0x10>
 8027b2a:	2500      	movs	r5, #0
 8027b2c:	4628      	mov	r0, r5
 8027b2e:	bd38      	pop	{r3, r4, r5, pc}
 8027b30:	b118      	cbz	r0, 8027b3a <_fflush_r+0x1a>
 8027b32:	6a03      	ldr	r3, [r0, #32]
 8027b34:	b90b      	cbnz	r3, 8027b3a <_fflush_r+0x1a>
 8027b36:	f7fe f86f 	bl	8025c18 <__sinit>
 8027b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027b3e:	2b00      	cmp	r3, #0
 8027b40:	d0f3      	beq.n	8027b2a <_fflush_r+0xa>
 8027b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027b44:	07d0      	lsls	r0, r2, #31
 8027b46:	d404      	bmi.n	8027b52 <_fflush_r+0x32>
 8027b48:	0599      	lsls	r1, r3, #22
 8027b4a:	d402      	bmi.n	8027b52 <_fflush_r+0x32>
 8027b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027b4e:	f7fe fa66 	bl	802601e <__retarget_lock_acquire_recursive>
 8027b52:	4628      	mov	r0, r5
 8027b54:	4621      	mov	r1, r4
 8027b56:	f7ff ff5f 	bl	8027a18 <__sflush_r>
 8027b5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027b5c:	07da      	lsls	r2, r3, #31
 8027b5e:	4605      	mov	r5, r0
 8027b60:	d4e4      	bmi.n	8027b2c <_fflush_r+0xc>
 8027b62:	89a3      	ldrh	r3, [r4, #12]
 8027b64:	059b      	lsls	r3, r3, #22
 8027b66:	d4e1      	bmi.n	8027b2c <_fflush_r+0xc>
 8027b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027b6a:	f7fe fa59 	bl	8026020 <__retarget_lock_release_recursive>
 8027b6e:	e7dd      	b.n	8027b2c <_fflush_r+0xc>

08027b70 <__swbuf_r>:
 8027b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b72:	460e      	mov	r6, r1
 8027b74:	4614      	mov	r4, r2
 8027b76:	4605      	mov	r5, r0
 8027b78:	b118      	cbz	r0, 8027b82 <__swbuf_r+0x12>
 8027b7a:	6a03      	ldr	r3, [r0, #32]
 8027b7c:	b90b      	cbnz	r3, 8027b82 <__swbuf_r+0x12>
 8027b7e:	f7fe f84b 	bl	8025c18 <__sinit>
 8027b82:	69a3      	ldr	r3, [r4, #24]
 8027b84:	60a3      	str	r3, [r4, #8]
 8027b86:	89a3      	ldrh	r3, [r4, #12]
 8027b88:	071a      	lsls	r2, r3, #28
 8027b8a:	d501      	bpl.n	8027b90 <__swbuf_r+0x20>
 8027b8c:	6923      	ldr	r3, [r4, #16]
 8027b8e:	b943      	cbnz	r3, 8027ba2 <__swbuf_r+0x32>
 8027b90:	4621      	mov	r1, r4
 8027b92:	4628      	mov	r0, r5
 8027b94:	f000 f82a 	bl	8027bec <__swsetup_r>
 8027b98:	b118      	cbz	r0, 8027ba2 <__swbuf_r+0x32>
 8027b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8027b9e:	4638      	mov	r0, r7
 8027ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027ba2:	6823      	ldr	r3, [r4, #0]
 8027ba4:	6922      	ldr	r2, [r4, #16]
 8027ba6:	1a98      	subs	r0, r3, r2
 8027ba8:	6963      	ldr	r3, [r4, #20]
 8027baa:	b2f6      	uxtb	r6, r6
 8027bac:	4283      	cmp	r3, r0
 8027bae:	4637      	mov	r7, r6
 8027bb0:	dc05      	bgt.n	8027bbe <__swbuf_r+0x4e>
 8027bb2:	4621      	mov	r1, r4
 8027bb4:	4628      	mov	r0, r5
 8027bb6:	f7ff ffb3 	bl	8027b20 <_fflush_r>
 8027bba:	2800      	cmp	r0, #0
 8027bbc:	d1ed      	bne.n	8027b9a <__swbuf_r+0x2a>
 8027bbe:	68a3      	ldr	r3, [r4, #8]
 8027bc0:	3b01      	subs	r3, #1
 8027bc2:	60a3      	str	r3, [r4, #8]
 8027bc4:	6823      	ldr	r3, [r4, #0]
 8027bc6:	1c5a      	adds	r2, r3, #1
 8027bc8:	6022      	str	r2, [r4, #0]
 8027bca:	701e      	strb	r6, [r3, #0]
 8027bcc:	6962      	ldr	r2, [r4, #20]
 8027bce:	1c43      	adds	r3, r0, #1
 8027bd0:	429a      	cmp	r2, r3
 8027bd2:	d004      	beq.n	8027bde <__swbuf_r+0x6e>
 8027bd4:	89a3      	ldrh	r3, [r4, #12]
 8027bd6:	07db      	lsls	r3, r3, #31
 8027bd8:	d5e1      	bpl.n	8027b9e <__swbuf_r+0x2e>
 8027bda:	2e0a      	cmp	r6, #10
 8027bdc:	d1df      	bne.n	8027b9e <__swbuf_r+0x2e>
 8027bde:	4621      	mov	r1, r4
 8027be0:	4628      	mov	r0, r5
 8027be2:	f7ff ff9d 	bl	8027b20 <_fflush_r>
 8027be6:	2800      	cmp	r0, #0
 8027be8:	d0d9      	beq.n	8027b9e <__swbuf_r+0x2e>
 8027bea:	e7d6      	b.n	8027b9a <__swbuf_r+0x2a>

08027bec <__swsetup_r>:
 8027bec:	b538      	push	{r3, r4, r5, lr}
 8027bee:	4b29      	ldr	r3, [pc, #164]	@ (8027c94 <__swsetup_r+0xa8>)
 8027bf0:	4605      	mov	r5, r0
 8027bf2:	6818      	ldr	r0, [r3, #0]
 8027bf4:	460c      	mov	r4, r1
 8027bf6:	b118      	cbz	r0, 8027c00 <__swsetup_r+0x14>
 8027bf8:	6a03      	ldr	r3, [r0, #32]
 8027bfa:	b90b      	cbnz	r3, 8027c00 <__swsetup_r+0x14>
 8027bfc:	f7fe f80c 	bl	8025c18 <__sinit>
 8027c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027c04:	0719      	lsls	r1, r3, #28
 8027c06:	d422      	bmi.n	8027c4e <__swsetup_r+0x62>
 8027c08:	06da      	lsls	r2, r3, #27
 8027c0a:	d407      	bmi.n	8027c1c <__swsetup_r+0x30>
 8027c0c:	2209      	movs	r2, #9
 8027c0e:	602a      	str	r2, [r5, #0]
 8027c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027c14:	81a3      	strh	r3, [r4, #12]
 8027c16:	f04f 30ff 	mov.w	r0, #4294967295
 8027c1a:	e033      	b.n	8027c84 <__swsetup_r+0x98>
 8027c1c:	0758      	lsls	r0, r3, #29
 8027c1e:	d512      	bpl.n	8027c46 <__swsetup_r+0x5a>
 8027c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027c22:	b141      	cbz	r1, 8027c36 <__swsetup_r+0x4a>
 8027c24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027c28:	4299      	cmp	r1, r3
 8027c2a:	d002      	beq.n	8027c32 <__swsetup_r+0x46>
 8027c2c:	4628      	mov	r0, r5
 8027c2e:	f7fe fa79 	bl	8026124 <_free_r>
 8027c32:	2300      	movs	r3, #0
 8027c34:	6363      	str	r3, [r4, #52]	@ 0x34
 8027c36:	89a3      	ldrh	r3, [r4, #12]
 8027c38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8027c3c:	81a3      	strh	r3, [r4, #12]
 8027c3e:	2300      	movs	r3, #0
 8027c40:	6063      	str	r3, [r4, #4]
 8027c42:	6923      	ldr	r3, [r4, #16]
 8027c44:	6023      	str	r3, [r4, #0]
 8027c46:	89a3      	ldrh	r3, [r4, #12]
 8027c48:	f043 0308 	orr.w	r3, r3, #8
 8027c4c:	81a3      	strh	r3, [r4, #12]
 8027c4e:	6923      	ldr	r3, [r4, #16]
 8027c50:	b94b      	cbnz	r3, 8027c66 <__swsetup_r+0x7a>
 8027c52:	89a3      	ldrh	r3, [r4, #12]
 8027c54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8027c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027c5c:	d003      	beq.n	8027c66 <__swsetup_r+0x7a>
 8027c5e:	4621      	mov	r1, r4
 8027c60:	4628      	mov	r0, r5
 8027c62:	f000 f89b 	bl	8027d9c <__smakebuf_r>
 8027c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027c6a:	f013 0201 	ands.w	r2, r3, #1
 8027c6e:	d00a      	beq.n	8027c86 <__swsetup_r+0x9a>
 8027c70:	2200      	movs	r2, #0
 8027c72:	60a2      	str	r2, [r4, #8]
 8027c74:	6962      	ldr	r2, [r4, #20]
 8027c76:	4252      	negs	r2, r2
 8027c78:	61a2      	str	r2, [r4, #24]
 8027c7a:	6922      	ldr	r2, [r4, #16]
 8027c7c:	b942      	cbnz	r2, 8027c90 <__swsetup_r+0xa4>
 8027c7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8027c82:	d1c5      	bne.n	8027c10 <__swsetup_r+0x24>
 8027c84:	bd38      	pop	{r3, r4, r5, pc}
 8027c86:	0799      	lsls	r1, r3, #30
 8027c88:	bf58      	it	pl
 8027c8a:	6962      	ldrpl	r2, [r4, #20]
 8027c8c:	60a2      	str	r2, [r4, #8]
 8027c8e:	e7f4      	b.n	8027c7a <__swsetup_r+0x8e>
 8027c90:	2000      	movs	r0, #0
 8027c92:	e7f7      	b.n	8027c84 <__swsetup_r+0x98>
 8027c94:	240002d4 	.word	0x240002d4

08027c98 <memmove>:
 8027c98:	4288      	cmp	r0, r1
 8027c9a:	b510      	push	{r4, lr}
 8027c9c:	eb01 0402 	add.w	r4, r1, r2
 8027ca0:	d902      	bls.n	8027ca8 <memmove+0x10>
 8027ca2:	4284      	cmp	r4, r0
 8027ca4:	4623      	mov	r3, r4
 8027ca6:	d807      	bhi.n	8027cb8 <memmove+0x20>
 8027ca8:	1e43      	subs	r3, r0, #1
 8027caa:	42a1      	cmp	r1, r4
 8027cac:	d008      	beq.n	8027cc0 <memmove+0x28>
 8027cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8027cb6:	e7f8      	b.n	8027caa <memmove+0x12>
 8027cb8:	4402      	add	r2, r0
 8027cba:	4601      	mov	r1, r0
 8027cbc:	428a      	cmp	r2, r1
 8027cbe:	d100      	bne.n	8027cc2 <memmove+0x2a>
 8027cc0:	bd10      	pop	{r4, pc}
 8027cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8027cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8027cca:	e7f7      	b.n	8027cbc <memmove+0x24>

08027ccc <_calloc_r>:
 8027ccc:	b570      	push	{r4, r5, r6, lr}
 8027cce:	fba1 5402 	umull	r5, r4, r1, r2
 8027cd2:	b93c      	cbnz	r4, 8027ce4 <_calloc_r+0x18>
 8027cd4:	4629      	mov	r1, r5
 8027cd6:	f7fd f801 	bl	8024cdc <_malloc_r>
 8027cda:	4606      	mov	r6, r0
 8027cdc:	b928      	cbnz	r0, 8027cea <_calloc_r+0x1e>
 8027cde:	2600      	movs	r6, #0
 8027ce0:	4630      	mov	r0, r6
 8027ce2:	bd70      	pop	{r4, r5, r6, pc}
 8027ce4:	220c      	movs	r2, #12
 8027ce6:	6002      	str	r2, [r0, #0]
 8027ce8:	e7f9      	b.n	8027cde <_calloc_r+0x12>
 8027cea:	462a      	mov	r2, r5
 8027cec:	4621      	mov	r1, r4
 8027cee:	f7fe f88b 	bl	8025e08 <memset>
 8027cf2:	e7f5      	b.n	8027ce0 <_calloc_r+0x14>

08027cf4 <_realloc_r>:
 8027cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027cf8:	4680      	mov	r8, r0
 8027cfa:	4615      	mov	r5, r2
 8027cfc:	460c      	mov	r4, r1
 8027cfe:	b921      	cbnz	r1, 8027d0a <_realloc_r+0x16>
 8027d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027d04:	4611      	mov	r1, r2
 8027d06:	f7fc bfe9 	b.w	8024cdc <_malloc_r>
 8027d0a:	b92a      	cbnz	r2, 8027d18 <_realloc_r+0x24>
 8027d0c:	f7fe fa0a 	bl	8026124 <_free_r>
 8027d10:	2400      	movs	r4, #0
 8027d12:	4620      	mov	r0, r4
 8027d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027d18:	f000 f89e 	bl	8027e58 <_malloc_usable_size_r>
 8027d1c:	4285      	cmp	r5, r0
 8027d1e:	4606      	mov	r6, r0
 8027d20:	d802      	bhi.n	8027d28 <_realloc_r+0x34>
 8027d22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8027d26:	d8f4      	bhi.n	8027d12 <_realloc_r+0x1e>
 8027d28:	4629      	mov	r1, r5
 8027d2a:	4640      	mov	r0, r8
 8027d2c:	f7fc ffd6 	bl	8024cdc <_malloc_r>
 8027d30:	4607      	mov	r7, r0
 8027d32:	2800      	cmp	r0, #0
 8027d34:	d0ec      	beq.n	8027d10 <_realloc_r+0x1c>
 8027d36:	42b5      	cmp	r5, r6
 8027d38:	462a      	mov	r2, r5
 8027d3a:	4621      	mov	r1, r4
 8027d3c:	bf28      	it	cs
 8027d3e:	4632      	movcs	r2, r6
 8027d40:	f7fe f977 	bl	8026032 <memcpy>
 8027d44:	4621      	mov	r1, r4
 8027d46:	4640      	mov	r0, r8
 8027d48:	f7fe f9ec 	bl	8026124 <_free_r>
 8027d4c:	463c      	mov	r4, r7
 8027d4e:	e7e0      	b.n	8027d12 <_realloc_r+0x1e>

08027d50 <__swhatbuf_r>:
 8027d50:	b570      	push	{r4, r5, r6, lr}
 8027d52:	460c      	mov	r4, r1
 8027d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d58:	2900      	cmp	r1, #0
 8027d5a:	b096      	sub	sp, #88	@ 0x58
 8027d5c:	4615      	mov	r5, r2
 8027d5e:	461e      	mov	r6, r3
 8027d60:	da0d      	bge.n	8027d7e <__swhatbuf_r+0x2e>
 8027d62:	89a3      	ldrh	r3, [r4, #12]
 8027d64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8027d68:	f04f 0100 	mov.w	r1, #0
 8027d6c:	bf14      	ite	ne
 8027d6e:	2340      	movne	r3, #64	@ 0x40
 8027d70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8027d74:	2000      	movs	r0, #0
 8027d76:	6031      	str	r1, [r6, #0]
 8027d78:	602b      	str	r3, [r5, #0]
 8027d7a:	b016      	add	sp, #88	@ 0x58
 8027d7c:	bd70      	pop	{r4, r5, r6, pc}
 8027d7e:	466a      	mov	r2, sp
 8027d80:	f000 f848 	bl	8027e14 <_fstat_r>
 8027d84:	2800      	cmp	r0, #0
 8027d86:	dbec      	blt.n	8027d62 <__swhatbuf_r+0x12>
 8027d88:	9901      	ldr	r1, [sp, #4]
 8027d8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8027d8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8027d92:	4259      	negs	r1, r3
 8027d94:	4159      	adcs	r1, r3
 8027d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8027d9a:	e7eb      	b.n	8027d74 <__swhatbuf_r+0x24>

08027d9c <__smakebuf_r>:
 8027d9c:	898b      	ldrh	r3, [r1, #12]
 8027d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027da0:	079d      	lsls	r5, r3, #30
 8027da2:	4606      	mov	r6, r0
 8027da4:	460c      	mov	r4, r1
 8027da6:	d507      	bpl.n	8027db8 <__smakebuf_r+0x1c>
 8027da8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8027dac:	6023      	str	r3, [r4, #0]
 8027dae:	6123      	str	r3, [r4, #16]
 8027db0:	2301      	movs	r3, #1
 8027db2:	6163      	str	r3, [r4, #20]
 8027db4:	b003      	add	sp, #12
 8027db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027db8:	ab01      	add	r3, sp, #4
 8027dba:	466a      	mov	r2, sp
 8027dbc:	f7ff ffc8 	bl	8027d50 <__swhatbuf_r>
 8027dc0:	9f00      	ldr	r7, [sp, #0]
 8027dc2:	4605      	mov	r5, r0
 8027dc4:	4639      	mov	r1, r7
 8027dc6:	4630      	mov	r0, r6
 8027dc8:	f7fc ff88 	bl	8024cdc <_malloc_r>
 8027dcc:	b948      	cbnz	r0, 8027de2 <__smakebuf_r+0x46>
 8027dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027dd2:	059a      	lsls	r2, r3, #22
 8027dd4:	d4ee      	bmi.n	8027db4 <__smakebuf_r+0x18>
 8027dd6:	f023 0303 	bic.w	r3, r3, #3
 8027dda:	f043 0302 	orr.w	r3, r3, #2
 8027dde:	81a3      	strh	r3, [r4, #12]
 8027de0:	e7e2      	b.n	8027da8 <__smakebuf_r+0xc>
 8027de2:	89a3      	ldrh	r3, [r4, #12]
 8027de4:	6020      	str	r0, [r4, #0]
 8027de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027dea:	81a3      	strh	r3, [r4, #12]
 8027dec:	9b01      	ldr	r3, [sp, #4]
 8027dee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8027df2:	b15b      	cbz	r3, 8027e0c <__smakebuf_r+0x70>
 8027df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027df8:	4630      	mov	r0, r6
 8027dfa:	f000 f81d 	bl	8027e38 <_isatty_r>
 8027dfe:	b128      	cbz	r0, 8027e0c <__smakebuf_r+0x70>
 8027e00:	89a3      	ldrh	r3, [r4, #12]
 8027e02:	f023 0303 	bic.w	r3, r3, #3
 8027e06:	f043 0301 	orr.w	r3, r3, #1
 8027e0a:	81a3      	strh	r3, [r4, #12]
 8027e0c:	89a3      	ldrh	r3, [r4, #12]
 8027e0e:	431d      	orrs	r5, r3
 8027e10:	81a5      	strh	r5, [r4, #12]
 8027e12:	e7cf      	b.n	8027db4 <__smakebuf_r+0x18>

08027e14 <_fstat_r>:
 8027e14:	b538      	push	{r3, r4, r5, lr}
 8027e16:	4d07      	ldr	r5, [pc, #28]	@ (8027e34 <_fstat_r+0x20>)
 8027e18:	2300      	movs	r3, #0
 8027e1a:	4604      	mov	r4, r0
 8027e1c:	4608      	mov	r0, r1
 8027e1e:	4611      	mov	r1, r2
 8027e20:	602b      	str	r3, [r5, #0]
 8027e22:	f7df fae4 	bl	80073ee <_fstat>
 8027e26:	1c43      	adds	r3, r0, #1
 8027e28:	d102      	bne.n	8027e30 <_fstat_r+0x1c>
 8027e2a:	682b      	ldr	r3, [r5, #0]
 8027e2c:	b103      	cbz	r3, 8027e30 <_fstat_r+0x1c>
 8027e2e:	6023      	str	r3, [r4, #0]
 8027e30:	bd38      	pop	{r3, r4, r5, pc}
 8027e32:	bf00      	nop
 8027e34:	24004d08 	.word	0x24004d08

08027e38 <_isatty_r>:
 8027e38:	b538      	push	{r3, r4, r5, lr}
 8027e3a:	4d06      	ldr	r5, [pc, #24]	@ (8027e54 <_isatty_r+0x1c>)
 8027e3c:	2300      	movs	r3, #0
 8027e3e:	4604      	mov	r4, r0
 8027e40:	4608      	mov	r0, r1
 8027e42:	602b      	str	r3, [r5, #0]
 8027e44:	f7df fad8 	bl	80073f8 <_isatty>
 8027e48:	1c43      	adds	r3, r0, #1
 8027e4a:	d102      	bne.n	8027e52 <_isatty_r+0x1a>
 8027e4c:	682b      	ldr	r3, [r5, #0]
 8027e4e:	b103      	cbz	r3, 8027e52 <_isatty_r+0x1a>
 8027e50:	6023      	str	r3, [r4, #0]
 8027e52:	bd38      	pop	{r3, r4, r5, pc}
 8027e54:	24004d08 	.word	0x24004d08

08027e58 <_malloc_usable_size_r>:
 8027e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027e5c:	1f18      	subs	r0, r3, #4
 8027e5e:	2b00      	cmp	r3, #0
 8027e60:	bfbc      	itt	lt
 8027e62:	580b      	ldrlt	r3, [r1, r0]
 8027e64:	18c0      	addlt	r0, r0, r3
 8027e66:	4770      	bx	lr

08027e68 <_init>:
 8027e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027e6a:	bf00      	nop
 8027e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027e6e:	bc08      	pop	{r3}
 8027e70:	469e      	mov	lr, r3
 8027e72:	4770      	bx	lr

08027e74 <_fini>:
 8027e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027e76:	bf00      	nop
 8027e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027e7a:	bc08      	pop	{r3}
 8027e7c:	469e      	mov	lr, r3
 8027e7e:	4770      	bx	lr
